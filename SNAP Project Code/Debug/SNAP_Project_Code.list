
SNAP_Project_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016cc0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f18  08016e00  08016e00  00026e00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08017d18  08017d18  00027d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08017d1c  08017d1c  00027d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001cc  20000004  08017d20  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 BLE_DRIVER_CONTEXT 00000035  200001d0  08017eec  000301d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  20000208  08017f21  00030208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000265c  20000220  08017f32  00030220  2**3
                  ALLOC
  9 ._user_heap_stack 00000604  2000287c  08017f32  0003287c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00030219  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 12 MB_MEM1       000001bb  20030028  20030028  00040000  2**2
                  ALLOC
 13 MB_MEM2       00000883  200301e4  200301e4  00040000  2**2
                  ALLOC
 14 .debug_info   0003fee9  00000000  00000000  00030249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000828d  00000000  00000000  00070132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003758  00000000  00000000  000783c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003390  00000000  00000000  0007bb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00032805  00000000  00000000  0007eea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004073e  00000000  00000000  000b16ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010ae80  00000000  00000000  000f1deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001fcc6b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f9a4  00000000  00000000  001fccbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000220 	.word	0x20000220
 800015c:	00000000 	.word	0x00000000
 8000160:	08016de8 	.word	0x08016de8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000224 	.word	0x20000224
 800017c:	08016de8 	.word	0x08016de8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <LL_EXTI_EnableIT_32_63+0x24>)
 8000c42:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000c46:	4905      	ldr	r1, [pc, #20]	; (8000c5c <LL_EXTI_EnableIT_32_63+0x24>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	58000800 	.word	0x58000800

08000c60 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4013      	ands	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c84:	68fb      	ldr	r3, [r7, #12]
}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b085      	sub	sp, #20
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c9e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000ca2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
}
 8000cbe:	bf00      	nop
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000cce:	f002 f8a1 	bl	8002e14 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000cd2:	f002 f8a5 	bl	8002e20 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000cd6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000cda:	f7ff ffad 	bl	8000c38 <LL_EXTI_EnableIT_32_63>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 8000cde:	f000 f821 	bl	8000d24 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000ce2:	f000 f8c3 	bl	8000e6c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000ce6:	bf00      	nop
}
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000cec:	b5b0      	push	{r4, r5, r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <APPD_EnableCPU2+0x34>)
 8000cf4:	1d3c      	adds	r4, r7, #4
 8000cf6:	461d      	mov	r5, r3
 8000cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d00:	c403      	stmia	r4!, {r0, r1}
 8000d02:	8022      	strh	r2, [r4, #0]
 8000d04:	3402      	adds	r4, #2
 8000d06:	0c13      	lsrs	r3, r2, #16
 8000d08:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000d0a:	f010 f861 	bl	8010dd0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	4618      	mov	r0, r3
 8000d12:	f00f fafc 	bl	801030e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000d16:	bf00      	nop
}
 8000d18:	3720      	adds	r7, #32
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	08016e00 	.word	0x08016e00

08000d24 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	77fb      	strb	r3, [r7, #31]
 8000d48:	e038      	b.n	8000dbc <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000d4a:	7ffb      	ldrb	r3, [r7, #31]
 8000d4c:	4a44      	ldr	r2, [pc, #272]	; (8000e60 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	4413      	add	r3, r2
 8000d52:	799b      	ldrb	r3, [r3, #6]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d02b      	beq.n	8000db0 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000d58:	7ffb      	ldrb	r3, [r7, #31]
 8000d5a:	4a41      	ldr	r2, [pc, #260]	; (8000e60 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000d60:	4a40      	ldr	r2, [pc, #256]	; (8000e64 <APPD_SetCPU2GpioConfig+0x140>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d01b      	beq.n	8000d9e <APPD_SetCPU2GpioConfig+0x7a>
 8000d66:	4a3f      	ldr	r2, [pc, #252]	; (8000e64 <APPD_SetCPU2GpioConfig+0x140>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d823      	bhi.n	8000db4 <APPD_SetCPU2GpioConfig+0x90>
 8000d6c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d70:	d003      	beq.n	8000d7a <APPD_SetCPU2GpioConfig+0x56>
 8000d72:	4a3d      	ldr	r2, [pc, #244]	; (8000e68 <APPD_SetCPU2GpioConfig+0x144>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d009      	beq.n	8000d8c <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000d78:	e01c      	b.n	8000db4 <APPD_SetCPU2GpioConfig+0x90>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000d7a:	7ffb      	ldrb	r3, [r7, #31]
 8000d7c:	4a38      	ldr	r2, [pc, #224]	; (8000e60 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	4413      	add	r3, r2
 8000d82:	889a      	ldrh	r2, [r3, #4]
 8000d84:	8bbb      	ldrh	r3, [r7, #28]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	83bb      	strh	r3, [r7, #28]
          break;
 8000d8a:	e014      	b.n	8000db6 <APPD_SetCPU2GpioConfig+0x92>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000d8c:	7ffb      	ldrb	r3, [r7, #31]
 8000d8e:	4a34      	ldr	r2, [pc, #208]	; (8000e60 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	4413      	add	r3, r2
 8000d94:	889a      	ldrh	r2, [r3, #4]
 8000d96:	8b7b      	ldrh	r3, [r7, #26]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	837b      	strh	r3, [r7, #26]
          break;
 8000d9c:	e00b      	b.n	8000db6 <APPD_SetCPU2GpioConfig+0x92>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000d9e:	7ffb      	ldrb	r3, [r7, #31]
 8000da0:	4a2f      	ldr	r2, [pc, #188]	; (8000e60 <APPD_SetCPU2GpioConfig+0x13c>)
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	4413      	add	r3, r2
 8000da6:	889a      	ldrh	r2, [r3, #4]
 8000da8:	8b3b      	ldrh	r3, [r7, #24]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	833b      	strh	r3, [r7, #24]
          break;
 8000dae:	e002      	b.n	8000db6 <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000db0:	bf00      	nop
 8000db2:	e000      	b.n	8000db6 <APPD_SetCPU2GpioConfig+0x92>
          break;
 8000db4:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000db6:	7ffb      	ldrb	r3, [r7, #31]
 8000db8:	3301      	adds	r3, #1
 8000dba:	77fb      	strb	r3, [r7, #31]
 8000dbc:	7ffb      	ldrb	r3, [r7, #31]
 8000dbe:	2b25      	cmp	r3, #37	; 0x25
 8000dc0:	d9c3      	bls.n	8000d4a <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000dce:	8bbb      	ldrh	r3, [r7, #28]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d014      	beq.n	8000dfe <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000dd4:	8bbb      	ldrh	r3, [r7, #28]
 8000dd6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f7ff ff41 	bl	8000c60 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000dde:	2001      	movs	r0, #1
 8000de0:	f7ff ff57 	bl	8000c92 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	4619      	mov	r1, r3
 8000de8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dec:	f003 feb0 	bl	8004b50 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000df0:	8bbb      	ldrh	r3, [r7, #28]
 8000df2:	2200      	movs	r2, #0
 8000df4:	4619      	mov	r1, r3
 8000df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfa:	f004 f829 	bl	8004e50 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000dfe:	8b7b      	ldrh	r3, [r7, #26]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d012      	beq.n	8000e2a <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000e04:	8b7b      	ldrh	r3, [r7, #26]
 8000e06:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f7ff ff29 	bl	8000c60 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f7ff ff3f 	bl	8000c92 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	4619      	mov	r1, r3
 8000e18:	4813      	ldr	r0, [pc, #76]	; (8000e68 <APPD_SetCPU2GpioConfig+0x144>)
 8000e1a:	f003 fe99 	bl	8004b50 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000e1e:	8b7b      	ldrh	r3, [r7, #26]
 8000e20:	2200      	movs	r2, #0
 8000e22:	4619      	mov	r1, r3
 8000e24:	4810      	ldr	r0, [pc, #64]	; (8000e68 <APPD_SetCPU2GpioConfig+0x144>)
 8000e26:	f004 f813 	bl	8004e50 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000e2a:	8b3b      	ldrh	r3, [r7, #24]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d013      	beq.n	8000e58 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000e30:	8b3b      	ldrh	r3, [r7, #24]
 8000e32:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e34:	2004      	movs	r0, #4
 8000e36:	f7ff ff13 	bl	8000c60 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000e3a:	2004      	movs	r0, #4
 8000e3c:	f7ff ff29 	bl	8000c92 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	4619      	mov	r1, r3
 8000e44:	4807      	ldr	r0, [pc, #28]	; (8000e64 <APPD_SetCPU2GpioConfig+0x140>)
 8000e46:	f003 fe83 	bl	8004b50 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000e4a:	8b3b      	ldrh	r3, [r7, #24]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <APPD_SetCPU2GpioConfig+0x140>)
 8000e52:	f003 fffd 	bl	8004e50 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000e56:	bf00      	nop
 8000e58:	bf00      	nop
}
 8000e5a:	3720      	adds	r7, #32
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	080170f4 	.word	0x080170f4
 8000e64:	48000800 	.word	0x48000800
 8000e68:	48000400 	.word	0x48000400

08000e6c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000e70:	bf00      	nop
}
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e8a:	f023 0207 	bic.w	r2, r3, #7
 8000e8e:	4905      	ldr	r1, [pc, #20]	; (8000ea4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	58000400 	.word	0x58000400

08000ea8 <LL_EXTI_EnableIT_32_63>:
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <LL_EXTI_EnableIT_32_63+0x24>)
 8000eb2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000eb6:	4905      	ldr	r1, [pc, #20]	; (8000ecc <LL_EXTI_EnableIT_32_63+0x24>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	58000800 	.word	0x58000800

08000ed0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000ede:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000eea:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	cafecafe 	.word	0xcafecafe

08000f0c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000f1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	608b      	str	r3, [r1, #8]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000f8c:	d101      	bne.n	8000f92 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e000      	b.n	8000f94 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000fb2:	d101      	bne.n	8000fb8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e000      	b.n	8000fba <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <LL_AHB3_GRP1_EnableClock>:
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <LL_DBGMCU_GetDeviceID+0x18>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e0042000 	.word	0xe0042000

08001014 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <LL_DBGMCU_GetRevisionID+0x18>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	0c1b      	lsrs	r3, r3, #16
 800101e:	b29b      	uxth	r3, r3
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e0042000 	.word	0xe0042000

08001030 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	041b      	lsls	r3, r3, #16
 8001042:	431a      	orrs	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	605a      	str	r2, [r3, #4]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	431a      	orrs	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	605a      	str	r2, [r3, #4]
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	695a      	ldr	r2, [r3, #20]
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	041b      	lsls	r3, r3, #16
 8001088:	431a      	orrs	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	615a      	str	r2, [r3, #20]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	695a      	ldr	r2, [r3, #20]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	431a      	orrs	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	615a      	str	r2, [r3, #20]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	609a      	str	r2, [r3, #8]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	619a      	str	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <LL_LPM_EnableSleep+0x1c>)
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	4a04      	ldr	r2, [pc, #16]	; (8001110 <LL_LPM_EnableSleep+0x1c>)
 80010fe:	f023 0304 	bic.w	r3, r3, #4
 8001102:	6113      	str	r3, [r2, #16]
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	22ff      	movs	r2, #255	; 0xff
 8001120:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	22ca      	movs	r2, #202	; 0xca
 800113a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2253      	movs	r2, #83	; 0x53
 8001140:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f023 0207 	bic.w	r2, r3, #7
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	431a      	orrs	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	609a      	str	r2, [r3, #8]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <MX_APPE_Config+0x18>)
 800117a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800117e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001180:	f000 f826 	bl	80011d0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001184:	f000 f866 	bl	8001254 <Config_HSE>

  return;
 8001188:	bf00      	nop
}
 800118a:	bd80      	pop	{r7, pc}
 800118c:	58004000 	.word	0x58004000

08001190 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001194:	f000 f872 	bl	800127c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001198:	f000 f88a 	bl	80012b0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800119c:	4904      	ldr	r1, [pc, #16]	; (80011b0 <MX_APPE_Init+0x20>)
 800119e:	2000      	movs	r0, #0
 80011a0:	f000 f9ea 	bl	8001578 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 80011a4:	f7ff fd91 	bl	8000cca <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80011a8:	f000 f890 	bl	80012cc <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80011ac:	bf00      	nop
}
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000430 	.word	0x20000430

080011b4 <Init_Smps>:

void Init_Smps(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80011b8:	bf00      	nop
}
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <Init_Exti>:

void Init_Exti(void)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80011c6:	2050      	movs	r0, #80	; 0x50
 80011c8:	f7ff fe6e 	bl	8000ea8 <LL_EXTI_EnableIT_32_63>

  return;
 80011cc:	bf00      	nop
}
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80011d4:	f000 f804 	bl	80011e0 <Reset_BackupDomain>

  Reset_IPCC();
 80011d8:	f000 f81a 	bl	8001210 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80011dc:	bf00      	nop
}
 80011de:	bd80      	pop	{r7, pc}

080011e0 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80011e4:	f7ff fec8 	bl	8000f78 <LL_RCC_IsActiveFlag_PINRST>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00d      	beq.n	800120a <Reset_BackupDomain+0x2a>
 80011ee:	f7ff fed6 	bl	8000f9e <LL_RCC_IsActiveFlag_SFTRST>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d108      	bne.n	800120a <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80011f8:	f006 fc7c 	bl	8007af4 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80011fc:	f006 fc7a 	bl	8007af4 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001200:	f7ff fe98 	bl	8000f34 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001204:	f7ff fea7 	bl	8000f56 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001208:	bf00      	nop
 800120a:	bf00      	nop
}
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001214:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001218:	f7ff fed4 	bl	8000fc4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 800121c:	213f      	movs	r1, #63	; 0x3f
 800121e:	480c      	ldr	r0, [pc, #48]	; (8001250 <Reset_IPCC+0x40>)
 8001220:	f7ff ff4c 	bl	80010bc <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001224:	213f      	movs	r1, #63	; 0x3f
 8001226:	480a      	ldr	r0, [pc, #40]	; (8001250 <Reset_IPCC+0x40>)
 8001228:	f7ff ff56 	bl	80010d8 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 800122c:	213f      	movs	r1, #63	; 0x3f
 800122e:	4808      	ldr	r0, [pc, #32]	; (8001250 <Reset_IPCC+0x40>)
 8001230:	f7ff fefe 	bl	8001030 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001234:	213f      	movs	r1, #63	; 0x3f
 8001236:	4806      	ldr	r0, [pc, #24]	; (8001250 <Reset_IPCC+0x40>)
 8001238:	f7ff ff1d 	bl	8001076 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 800123c:	213f      	movs	r1, #63	; 0x3f
 800123e:	4804      	ldr	r0, [pc, #16]	; (8001250 <Reset_IPCC+0x40>)
 8001240:	f7ff ff08 	bl	8001054 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001244:	213f      	movs	r1, #63	; 0x3f
 8001246:	4802      	ldr	r0, [pc, #8]	; (8001250 <Reset_IPCC+0x40>)
 8001248:	f7ff ff27 	bl	800109a <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 800124c:	bf00      	nop
}
 800124e:	bd80      	pop	{r7, pc}
 8001250:	58000c00 	.word	0x58000c00

08001254 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800125a:	2000      	movs	r0, #0
 800125c:	f00f fe44 	bl	8010ee8 <OTP_Read>
 8001260:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	799b      	ldrb	r3, [r3, #6]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fe2f 	bl	8000ed0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001272:	bf00      	nop
 8001274:	bf00      	nop
}
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <System_Init>:

static void System_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  Init_Smps();
 8001280:	f7ff ff98 	bl	80011b4 <Init_Smps>

  Init_Exti();
 8001284:	f7ff ff9d 	bl	80011c2 <Init_Exti>

  Init_Rtc();
 8001288:	f000 f802 	bl	8001290 <Init_Rtc>

  return;
 800128c:	bf00      	nop
}
 800128e:	bd80      	pop	{r7, pc}

08001290 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <Init_Rtc+0x1c>)
 8001296:	f7ff ff4a 	bl	800112e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800129a:	2100      	movs	r1, #0
 800129c:	4803      	ldr	r0, [pc, #12]	; (80012ac <Init_Rtc+0x1c>)
 800129e:	f7ff ff56 	bl	800114e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80012a2:	4802      	ldr	r0, [pc, #8]	; (80012ac <Init_Rtc+0x1c>)
 80012a4:	f7ff ff36 	bl	8001114 <LL_RTC_EnableWriteProtection>

  return;
 80012a8:	bf00      	nop
}
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40002800 	.word	0x40002800

080012b0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80012b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012b8:	f7ff fe28 	bl	8000f0c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80012bc:	f012 fd40 	bl	8013d40 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80012c0:	2004      	movs	r0, #4
 80012c2:	f7ff fddb 	bl	8000e7c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80012c6:	bf00      	nop
}
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80012d2:	f00f fbc7 	bl	8010a64 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80012d6:	4a11      	ldr	r2, [pc, #68]	; (800131c <appe_Tl_Init+0x50>)
 80012d8:	2100      	movs	r1, #0
 80012da:	f44f 7080 	mov.w	r0, #256	; 0x100
 80012de:	f012 fe6d 	bl	8013fbc <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <appe_Tl_Init+0x54>)
 80012e4:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <appe_Tl_Init+0x58>)
 80012e8:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80012ea:	463b      	mov	r3, r7
 80012ec:	4619      	mov	r1, r3
 80012ee:	480e      	ldr	r0, [pc, #56]	; (8001328 <appe_Tl_Init+0x5c>)
 80012f0:	f00f fa7e 	bl	80107f0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80012f4:	4b0d      	ldr	r3, [pc, #52]	; (800132c <appe_Tl_Init+0x60>)
 80012f6:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80012f8:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <appe_Tl_Init+0x64>)
 80012fa:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80012fc:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <appe_Tl_Init+0x68>)
 80012fe:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001300:	f240 533c 	movw	r3, #1340	; 0x53c
 8001304:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001306:	f107 0308 	add.w	r3, r7, #8
 800130a:	4618      	mov	r0, r3
 800130c:	f00f fcec 	bl	8010ce8 <TL_MM_Init>

  TL_Enable();
 8001310:	f00f fba2 	bl	8010a58 <TL_Enable>

  return;
 8001314:	bf00      	nop
}
 8001316:	3720      	adds	r7, #32
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	08010829 	.word	0x08010829
 8001320:	20030734 	.word	0x20030734
 8001324:	08001339 	.word	0x08001339
 8001328:	08001351 	.word	0x08001351
 800132c:	2003094c 	.word	0x2003094c
 8001330:	20030840 	.word	0x20030840
 8001334:	200301f8 	.word	0x200301f8

08001338 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001342:	bf00      	nop
}
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	330b      	adds	r3, #11
 800135e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	b29b      	uxth	r3, r3
 8001366:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800136a:	2b07      	cmp	r3, #7
 800136c:	d81f      	bhi.n	80013ae <APPE_SysUserEvtRx+0x5e>
 800136e:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <APPE_SysUserEvtRx+0x24>)
 8001370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001374:	08001395 	.word	0x08001395
 8001378:	080013a7 	.word	0x080013a7
 800137c:	080013af 	.word	0x080013af
 8001380:	080013af 	.word	0x080013af
 8001384:	080013af 	.word	0x080013af
 8001388:	080013af 	.word	0x080013af
 800138c:	080013af 	.word	0x080013af
 8001390:	080013af 	.word	0x080013af
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	4618      	mov	r0, r3
 800139a:	f00e ffe5 	bl	8010368 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 f81b 	bl	80013da <APPE_SysEvtReadyProcessing>
    break;
 80013a4:	e004      	b.n	80013b0 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 f806 	bl	80013b8 <APPE_SysEvtError>
    break;
 80013ac:	e000      	b.n	80013b0 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80013ae:	bf00      	nop
  }

  return;
 80013b0:	bf00      	nop
}
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	330b      	adds	r3, #11
 80013c6:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	3302      	adds	r3, #2
 80013cc:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80013ce:	bf00      	nop
}
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b08a      	sub	sp, #40	; 0x28
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	330b      	adds	r3, #11
 80013fe:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	3302      	adds	r3, #2
 8001404:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d11d      	bne.n	800144a <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800140e:	f7ff fc6d 	bl	8000cec <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001412:	230f      	movs	r3, #15
 8001414:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001416:	237f      	movs	r3, #127	; 0x7f
 8001418:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800141a:	f7ff fdfb 	bl	8001014 <LL_DBGMCU_GetRevisionID>
 800141e:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	b29b      	uxth	r3, r3
 8001424:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001426:	f7ff fde7 	bl	8000ff8 <LL_DBGMCU_GetDeviceID>
 800142a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 800142c:	6a3b      	ldr	r3, [r7, #32]
 800142e:	b29b      	uxth	r3, r3
 8001430:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	4618      	mov	r0, r3
 8001438:	f00e ff80 	bl	801033c <SHCI_C2_Config>

    APP_BLE_Init();
 800143c:	f00f fe5e 	bl	80110fc <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001440:	2100      	movs	r1, #0
 8001442:	2001      	movs	r0, #1
 8001444:	f012 fc8e 	bl	8013d64 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001448:	e007      	b.n	800145a <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d103      	bne.n	800145a <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
  return;
 8001458:	bf00      	nop
 800145a:	bf00      	nop
}
 800145c:	3728      	adds	r7, #40	; 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b084      	sub	sp, #16
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800146a:	f001 fcaf 	bl	8002dcc <HAL_GetTick>
 800146e:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147a:	d00a      	beq.n	8001492 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800147c:	f001 fcbe 	bl	8002dfc <HAL_GetTickFreq>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4413      	add	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800148a:	e002      	b.n	8001492 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800148c:	f7ff fe32 	bl	80010f4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8001490:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001492:	f001 fc9b 	bl	8002dcc <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d8f4      	bhi.n	800148c <HAL_Delay+0x2a>
  }
}
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295
 80014b4:	f012 fc86 	bl	8013dc4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}

080014bc <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80014c0:	bf00      	nop
}
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
 80014d2:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	f012 fc74 	bl	8013dc4 <UTIL_SEQ_Run>

  return;
 80014dc:	bf00      	nop
}
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80014ec:	2100      	movs	r1, #0
 80014ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014f2:	f012 fd85 	bl	8014000 <UTIL_SEQ_SetTask>
  return;
 80014f6:	bf00      	nop
}
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001506:	2002      	movs	r0, #2
 8001508:	f012 fde6 	bl	80140d8 <UTIL_SEQ_SetEvt>
  return;
 800150c:	bf00      	nop
}
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800151c:	2002      	movs	r0, #2
 800151e:	f012 fdfb 	bl	8014118 <UTIL_SEQ_WaitEvt>
  return;
 8001522:	bf00      	nop
}
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <LL_EXTI_EnableIT_0_31>:
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <LL_EXTI_EnableIT_0_31+0x24>)
 8001536:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800153a:	4905      	ldr	r1, [pc, #20]	; (8001550 <LL_EXTI_EnableIT_0_31+0x24>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4313      	orrs	r3, r2
 8001540:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	58000800 	.word	0x58000800

08001554 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4904      	ldr	r1, [pc, #16]	; (8001574 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4313      	orrs	r3, r2
 8001566:	600b      	str	r3, [r1, #0]

}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	58000800 	.word	0x58000800

08001578 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001584:	4b5e      	ldr	r3, [pc, #376]	; (8001700 <HW_TS_Init+0x188>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	22ca      	movs	r2, #202	; 0xca
 800158a:	625a      	str	r2, [r3, #36]	; 0x24
 800158c:	4b5c      	ldr	r3, [pc, #368]	; (8001700 <HW_TS_Init+0x188>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2253      	movs	r2, #83	; 0x53
 8001592:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001594:	4b5b      	ldr	r3, [pc, #364]	; (8001704 <HW_TS_Init+0x18c>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4a5a      	ldr	r2, [pc, #360]	; (8001704 <HW_TS_Init+0x18c>)
 800159a:	f043 0320 	orr.w	r3, r3, #32
 800159e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80015a0:	4b58      	ldr	r3, [pc, #352]	; (8001704 <HW_TS_Init+0x18c>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f1c3 0304 	rsb	r3, r3, #4
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4b55      	ldr	r3, [pc, #340]	; (8001708 <HW_TS_Init+0x190>)
 80015b4:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80015b6:	4b53      	ldr	r3, [pc, #332]	; (8001704 <HW_TS_Init+0x18c>)
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80015be:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80015c2:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	fa92 f2a2 	rbit	r2, r2
 80015ca:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	2a00      	cmp	r2, #0
 80015d4:	d101      	bne.n	80015da <HW_TS_Init+0x62>
  {
    return 32U;
 80015d6:	2220      	movs	r2, #32
 80015d8:	e003      	b.n	80015e2 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	fab2 f282 	clz	r2, r2
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	40d3      	lsrs	r3, r2
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	3301      	adds	r3, #1
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4b48      	ldr	r3, [pc, #288]	; (800170c <HW_TS_Init+0x194>)
 80015ec:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80015ee:	4b45      	ldr	r3, [pc, #276]	; (8001704 <HW_TS_Init+0x18c>)
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	3301      	adds	r3, #1
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	4b44      	ldr	r3, [pc, #272]	; (8001710 <HW_TS_Init+0x198>)
 8001600:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001602:	4b43      	ldr	r3, [pc, #268]	; (8001710 <HW_TS_Init+0x198>)
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	3b01      	subs	r3, #1
 8001608:	4a40      	ldr	r2, [pc, #256]	; (800170c <HW_TS_Init+0x194>)
 800160a:	7812      	ldrb	r2, [r2, #0]
 800160c:	fb02 f303 	mul.w	r3, r2, r3
 8001610:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001614:	4a3c      	ldr	r2, [pc, #240]	; (8001708 <HW_TS_Init+0x190>)
 8001616:	7812      	ldrb	r2, [r2, #0]
 8001618:	40d3      	lsrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001622:	4293      	cmp	r3, r2
 8001624:	d904      	bls.n	8001630 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001626:	4b3b      	ldr	r3, [pc, #236]	; (8001714 <HW_TS_Init+0x19c>)
 8001628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800162c:	801a      	strh	r2, [r3, #0]
 800162e:	e003      	b.n	8001638 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	b29a      	uxth	r2, r3
 8001634:	4b37      	ldr	r3, [pc, #220]	; (8001714 <HW_TS_Init+0x19c>)
 8001636:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001638:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800163c:	f7ff ff8a 	bl	8001554 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001640:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001644:	f7ff ff72 	bl	800152c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d13d      	bne.n	80016ca <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800164e:	4b32      	ldr	r3, [pc, #200]	; (8001718 <HW_TS_Init+0x1a0>)
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001654:	4b31      	ldr	r3, [pc, #196]	; (800171c <HW_TS_Init+0x1a4>)
 8001656:	f04f 32ff 	mov.w	r2, #4294967295
 800165a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800165c:	2300      	movs	r3, #0
 800165e:	77fb      	strb	r3, [r7, #31]
 8001660:	e00c      	b.n	800167c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001662:	7ffa      	ldrb	r2, [r7, #31]
 8001664:	492e      	ldr	r1, [pc, #184]	; (8001720 <HW_TS_Init+0x1a8>)
 8001666:	4613      	mov	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	440b      	add	r3, r1
 8001670:	330c      	adds	r3, #12
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001676:	7ffb      	ldrb	r3, [r7, #31]
 8001678:	3301      	adds	r3, #1
 800167a:	77fb      	strb	r3, [r7, #31]
 800167c:	7ffb      	ldrb	r3, [r7, #31]
 800167e:	2b05      	cmp	r3, #5
 8001680:	d9ef      	bls.n	8001662 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001682:	4b28      	ldr	r3, [pc, #160]	; (8001724 <HW_TS_Init+0x1ac>)
 8001684:	2206      	movs	r2, #6
 8001686:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <HW_TS_Init+0x188>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <HW_TS_Init+0x188>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001696:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <HW_TS_Init+0x188>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	4b17      	ldr	r3, [pc, #92]	; (8001700 <HW_TS_Init+0x188>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80016a8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80016aa:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <HW_TS_Init+0x1b0>)
 80016ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016b0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80016b2:	2003      	movs	r0, #3
 80016b4:	f002 ff69 	bl	800458a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HW_TS_Init+0x188>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <HW_TS_Init+0x188>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	e009      	b.n	80016de <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <HW_TS_Init+0x188>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d002      	beq.n	80016de <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80016d8:	2003      	movs	r0, #3
 80016da:	f002 ff48 	bl	800456e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <HW_TS_Init+0x188>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	22ff      	movs	r2, #255	; 0xff
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80016e6:	2200      	movs	r2, #0
 80016e8:	2103      	movs	r1, #3
 80016ea:	2003      	movs	r0, #3
 80016ec:	f002 ff0b 	bl	8004506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80016f0:	2003      	movs	r0, #3
 80016f2:	f002 ff22 	bl	800453a <HAL_NVIC_EnableIRQ>

  return;
 80016f6:	bf00      	nop
}
 80016f8:	3720      	adds	r7, #32
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000430 	.word	0x20000430
 8001704:	40002800 	.word	0x40002800
 8001708:	200002d5 	.word	0x200002d5
 800170c:	200002d6 	.word	0x200002d6
 8001710:	200002d8 	.word	0x200002d8
 8001714:	200002da 	.word	0x200002da
 8001718:	200002d4 	.word	0x200002d4
 800171c:	200002d0 	.word	0x200002d0
 8001720:	2000023c 	.word	0x2000023c
 8001724:	200002cc 	.word	0x200002cc
 8001728:	58000800 	.word	0x58000800

0800172c <LL_RCC_LSE_SetDriveCapability>:
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173c:	f023 0218 	bic.w	r2, r3, #24
 8001740:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4313      	orrs	r3, r2
 8001748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <LL_AHB1_GRP1_EnableClock>:
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001764:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001766:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4313      	orrs	r3, r2
 800176e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001774:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4013      	ands	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800177c:	68fb      	ldr	r3, [r7, #12]
}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <LL_AHB2_GRP1_EnableClock>:
{
 800178a:	b480      	push	{r7}
 800178c:	b085      	sub	sp, #20
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001796:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001798:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4313      	orrs	r3, r2
 80017a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4013      	ands	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017ae:	68fb      	ldr	r3, [r7, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c0:	f001 fa96 	bl	8002cf0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80017c4:	f7ff fcd6 	bl	8001174 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c8:	f000 f822 	bl	8001810 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80017cc:	f000 f894 	bl	80018f8 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80017d0:	f000 f968 	bl	8001aa4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d4:	f000 fa4a 	bl	8001c6c <MX_GPIO_Init>
  MX_DMA_Init();
 80017d8:	f000 fa36 	bl	8001c48 <MX_DMA_Init>
  MX_USB_Device_Init();
 80017dc:	f011 fd74 	bl	80132c8 <MX_USB_Device_Init>
  MX_ADC1_Init();
 80017e0:	f000 f8aa 	bl	8001938 <MX_ADC1_Init>
  MX_I2C1_Init();
 80017e4:	f000 f91e 	bl	8001a24 <MX_I2C1_Init>
  MX_RTC_Init();
 80017e8:	f000 f978 	bl	8001adc <MX_RTC_Init>
  MX_TIM2_Init();
 80017ec:	f000 f9aa 	bl	8001b44 <MX_TIM2_Init>
  MX_RF_Init();
 80017f0:	f000 f96c 	bl	8001acc <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, MT3608_EN_Pin, GPIO_PIN_SET); 	/*Toggle 5V rail*/
 80017f4:	2201      	movs	r2, #1
 80017f6:	2140      	movs	r1, #64	; 0x40
 80017f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fc:	f003 fb28 	bl	8004e50 <HAL_GPIO_WritePin>
  SSD1306_Init();											/*Init OLED Screen*/
 8001800:	f000 fc26 	bl	8002050 <SSD1306_Init>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001804:	f7ff fcc4 	bl	8001190 <MX_APPE_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001808:	f7ff fe50 	bl	80014ac <MX_APPE_Process>
 800180c:	e7fc      	b.n	8001808 <main+0x4c>
	...

08001810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b09a      	sub	sp, #104	; 0x68
 8001814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001816:	f107 0320 	add.w	r3, r7, #32
 800181a:	2248      	movs	r2, #72	; 0x48
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f012 fd9a 	bl	8014358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]
 8001832:	615a      	str	r2, [r3, #20]
 8001834:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001836:	f006 f95d 	bl	8007af4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800183a:	2000      	movs	r0, #0
 800183c:	f7ff ff76 	bl	800172c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001840:	4b2c      	ldr	r3, [pc, #176]	; (80018f4 <SystemClock_Config+0xe4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001848:	4a2a      	ldr	r2, [pc, #168]	; (80018f4 <SystemClock_Config+0xe4>)
 800184a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <SystemClock_Config+0xe4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800185c:	2327      	movs	r3, #39	; 0x27
 800185e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001860:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001866:	2301      	movs	r3, #1
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800186a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001870:	2301      	movs	r3, #1
 8001872:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001874:	2340      	movs	r3, #64	; 0x40
 8001876:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001878:	2300      	movs	r3, #0
 800187a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800187c:	2360      	movs	r3, #96	; 0x60
 800187e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001880:	2302      	movs	r3, #2
 8001882:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001884:	2301      	movs	r3, #1
 8001886:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001888:	2300      	movs	r3, #0
 800188a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 800188c:	2318      	movs	r3, #24
 800188e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV24;
 8001890:	f44f 1338 	mov.w	r3, #3014656	; 0x2e0000
 8001894:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001896:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800189a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800189c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018a0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a2:	f107 0320 	add.w	r3, r7, #32
 80018a6:	4618      	mov	r0, r3
 80018a8:	f006 fcb0 	bl	800820c <HAL_RCC_OscConfig>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80018b2:	f000 fa6d 	bl	8001d90 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80018b6:	236f      	movs	r3, #111	; 0x6f
 80018b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80018ba:	2302      	movs	r3, #2
 80018bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80018be:	2380      	movs	r3, #128	; 0x80
 80018c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	2101      	movs	r1, #1
 80018d6:	4618      	mov	r0, r3
 80018d8:	f007 f80c 	bl	80088f4 <HAL_RCC_ClockConfig>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80018e2:	f000 fa55 	bl	8001d90 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80018e6:	f007 fd9b 	bl	8009420 <HAL_RCCEx_EnableMSIPLLMode>
}
 80018ea:	bf00      	nop
 80018ec:	3768      	adds	r7, #104	; 0x68
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	58000400 	.word	0x58000400

080018f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b094      	sub	sp, #80	; 0x50
 80018fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018fe:	463b      	mov	r3, r7
 8001900:	2250      	movs	r2, #80	; 0x50
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f012 fd27 	bl	8014358 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800190a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800190e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001910:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001914:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001916:	2300      	movs	r3, #0
 8001918:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800191a:	2310      	movs	r3, #16
 800191c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800191e:	463b      	mov	r3, r7
 8001920:	4618      	mov	r0, r3
 8001922:	f007 fc07 	bl	8009134 <HAL_RCCEx_PeriphCLKConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800192c:	f000 fa30 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001930:	bf00      	nop
 8001932:	3750      	adds	r7, #80	; 0x50
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800193e:	463b      	mov	r3, r7
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
 800194c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800194e:	4b31      	ldr	r3, [pc, #196]	; (8001a14 <MX_ADC1_Init+0xdc>)
 8001950:	4a31      	ldr	r2, [pc, #196]	; (8001a18 <MX_ADC1_Init+0xe0>)
 8001952:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001954:	4b2f      	ldr	r3, [pc, #188]	; (8001a14 <MX_ADC1_Init+0xdc>)
 8001956:	2200      	movs	r2, #0
 8001958:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800195a:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <MX_ADC1_Init+0xdc>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001960:	4b2c      	ldr	r3, [pc, #176]	; (8001a14 <MX_ADC1_Init+0xdc>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001966:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <MX_ADC1_Init+0xdc>)
 8001968:	2201      	movs	r2, #1
 800196a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800196c:	4b29      	ldr	r3, [pc, #164]	; (8001a14 <MX_ADC1_Init+0xdc>)
 800196e:	2204      	movs	r2, #4
 8001970:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001972:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <MX_ADC1_Init+0xdc>)
 8001974:	2200      	movs	r2, #0
 8001976:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001978:	4b26      	ldr	r3, [pc, #152]	; (8001a14 <MX_ADC1_Init+0xdc>)
 800197a:	2200      	movs	r2, #0
 800197c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800197e:	4b25      	ldr	r3, [pc, #148]	; (8001a14 <MX_ADC1_Init+0xdc>)
 8001980:	2202      	movs	r2, #2
 8001982:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001984:	4b23      	ldr	r3, [pc, #140]	; (8001a14 <MX_ADC1_Init+0xdc>)
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800198c:	4b21      	ldr	r3, [pc, #132]	; (8001a14 <MX_ADC1_Init+0xdc>)
 800198e:	2200      	movs	r2, #0
 8001990:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001992:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <MX_ADC1_Init+0xdc>)
 8001994:	2200      	movs	r2, #0
 8001996:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001998:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <MX_ADC1_Init+0xdc>)
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019a0:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <MX_ADC1_Init+0xdc>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80019a6:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <MX_ADC1_Init+0xdc>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019ae:	4819      	ldr	r0, [pc, #100]	; (8001a14 <MX_ADC1_Init+0xdc>)
 80019b0:	f001 fc52 	bl	8003258 <HAL_ADC_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80019ba:	f000 f9e9 	bl	8001d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80019be:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <MX_ADC1_Init+0xe4>)
 80019c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019c2:	2306      	movs	r3, #6
 80019c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019ca:	237f      	movs	r3, #127	; 0x7f
 80019cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019ce:	2304      	movs	r3, #4
 80019d0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019d6:	463b      	mov	r3, r7
 80019d8:	4619      	mov	r1, r3
 80019da:	480e      	ldr	r0, [pc, #56]	; (8001a14 <MX_ADC1_Init+0xdc>)
 80019dc:	f001 fe8c 	bl	80036f8 <HAL_ADC_ConfigChannel>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80019e6:	f000 f9d3 	bl	8001d90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <MX_ADC1_Init+0xe8>)
 80019ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80019ee:	230c      	movs	r3, #12
 80019f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80019f2:	2307      	movs	r3, #7
 80019f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019f6:	463b      	mov	r3, r7
 80019f8:	4619      	mov	r1, r3
 80019fa:	4806      	ldr	r0, [pc, #24]	; (8001a14 <MX_ADC1_Init+0xdc>)
 80019fc:	f001 fe7c 	bl	80036f8 <HAL_ADC_ConfigChannel>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001a06:	f000 f9c3 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200002dc 	.word	0x200002dc
 8001a18:	50040000 	.word	0x50040000
 8001a1c:	32601000 	.word	0x32601000
 8001a20:	19200040 	.word	0x19200040

08001a24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <MX_I2C1_Init+0x74>)
 8001a2a:	4a1c      	ldr	r2, [pc, #112]	; (8001a9c <MX_I2C1_Init+0x78>)
 8001a2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <MX_I2C1_Init+0x74>)
 8001a30:	4a1b      	ldr	r2, [pc, #108]	; (8001aa0 <MX_I2C1_Init+0x7c>)
 8001a32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a34:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <MX_I2C1_Init+0x74>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <MX_I2C1_Init+0x74>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a40:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <MX_I2C1_Init+0x74>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a46:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <MX_I2C1_Init+0x74>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <MX_I2C1_Init+0x74>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_I2C1_Init+0x74>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <MX_I2C1_Init+0x74>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a5e:	480e      	ldr	r0, [pc, #56]	; (8001a98 <MX_I2C1_Init+0x74>)
 8001a60:	f003 fa64 	bl	8004f2c <HAL_I2C_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a6a:	f000 f991 	bl	8001d90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4809      	ldr	r0, [pc, #36]	; (8001a98 <MX_I2C1_Init+0x74>)
 8001a72:	f004 f9dd 	bl	8005e30 <HAL_I2CEx_ConfigAnalogFilter>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a7c:	f000 f988 	bl	8001d90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a80:	2100      	movs	r1, #0
 8001a82:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_I2C1_Init+0x74>)
 8001a84:	f004 fa1f 	bl	8005ec6 <HAL_I2CEx_ConfigDigitalFilter>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a8e:	f000 f97f 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200003a0 	.word	0x200003a0
 8001a9c:	40005400 	.word	0x40005400
 8001aa0:	0010061a 	.word	0x0010061a

08001aa4 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_IPCC_Init+0x20>)
 8001aaa:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <MX_IPCC_Init+0x24>)
 8001aac:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_IPCC_Init+0x20>)
 8001ab0:	f004 fa56 	bl	8005f60 <HAL_IPCC_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001aba:	f000 f969 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200003f4 	.word	0x200003f4
 8001ac8:	58000c00 	.word	0x58000c00

08001acc <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ae0:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <MX_RTC_Init+0x60>)
 8001ae2:	4a17      	ldr	r2, [pc, #92]	; (8001b40 <MX_RTC_Init+0x64>)
 8001ae4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <MX_RTC_Init+0x60>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <MX_RTC_Init+0x60>)
 8001aee:	220f      	movs	r2, #15
 8001af0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <MX_RTC_Init+0x60>)
 8001af4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001af8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <MX_RTC_Init+0x60>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <MX_RTC_Init+0x60>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <MX_RTC_Init+0x60>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <MX_RTC_Init+0x60>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b12:	480a      	ldr	r0, [pc, #40]	; (8001b3c <MX_RTC_Init+0x60>)
 8001b14:	f007 fd9c 	bl	8009650 <HAL_RTC_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001b1e:	f000 f937 	bl	8001d90 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_RTC_Init+0x60>)
 8001b28:	f007 fe92 	bl	8009850 <HAL_RTCEx_SetWakeUpTimer>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001b32:	f000 f92d 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000430 	.word	0x20000430
 8001b40:	40002800 	.word	0x40002800

08001b44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08e      	sub	sp, #56	; 0x38
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b64:	463b      	mov	r3, r7
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
 8001b70:	611a      	str	r2, [r3, #16]
 8001b72:	615a      	str	r2, [r3, #20]
 8001b74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b76:	4b33      	ldr	r3, [pc, #204]	; (8001c44 <MX_TIM2_Init+0x100>)
 8001b78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b7e:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <MX_TIM2_Init+0x100>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b84:	4b2f      	ldr	r3, [pc, #188]	; (8001c44 <MX_TIM2_Init+0x100>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b8a:	4b2e      	ldr	r3, [pc, #184]	; (8001c44 <MX_TIM2_Init+0x100>)
 8001b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b92:	4b2c      	ldr	r3, [pc, #176]	; (8001c44 <MX_TIM2_Init+0x100>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b98:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <MX_TIM2_Init+0x100>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b9e:	4829      	ldr	r0, [pc, #164]	; (8001c44 <MX_TIM2_Init+0x100>)
 8001ba0:	f007 fef1 	bl	8009986 <HAL_TIM_Base_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001baa:	f000 f8f1 	bl	8001d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4822      	ldr	r0, [pc, #136]	; (8001c44 <MX_TIM2_Init+0x100>)
 8001bbc:	f008 fa12 	bl	8009fe4 <HAL_TIM_ConfigClockSource>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001bc6:	f000 f8e3 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bca:	481e      	ldr	r0, [pc, #120]	; (8001c44 <MX_TIM2_Init+0x100>)
 8001bcc:	f007 ff32 	bl	8009a34 <HAL_TIM_PWM_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001bd6:	f000 f8db 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001be2:	f107 031c 	add.w	r3, r7, #28
 8001be6:	4619      	mov	r1, r3
 8001be8:	4816      	ldr	r0, [pc, #88]	; (8001c44 <MX_TIM2_Init+0x100>)
 8001bea:	f008 fe69 	bl	800a8c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001bf4:	f000 f8cc 	bl	8001d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bf8:	2360      	movs	r3, #96	; 0x60
 8001bfa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c08:	463b      	mov	r3, r7
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	480d      	ldr	r0, [pc, #52]	; (8001c44 <MX_TIM2_Init+0x100>)
 8001c10:	f008 f8d4 	bl	8009dbc <HAL_TIM_PWM_ConfigChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001c1a:	f000 f8b9 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c1e:	463b      	mov	r3, r7
 8001c20:	2204      	movs	r2, #4
 8001c22:	4619      	mov	r1, r3
 8001c24:	4807      	ldr	r0, [pc, #28]	; (8001c44 <MX_TIM2_Init+0x100>)
 8001c26:	f008 f8c9 	bl	8009dbc <HAL_TIM_PWM_ConfigChannel>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001c30:	f000 f8ae 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c34:	4803      	ldr	r0, [pc, #12]	; (8001c44 <MX_TIM2_Init+0x100>)
 8001c36:	f000 fe57 	bl	80028e8 <HAL_TIM_MspPostInit>

}
 8001c3a:	bf00      	nop
 8001c3c:	3738      	adds	r7, #56	; 0x38
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000454 	.word	0x20000454

08001c48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001c4c:	2004      	movs	r0, #4
 8001c4e:	f7ff fd83 	bl	8001758 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c52:	2001      	movs	r0, #1
 8001c54:	f7ff fd80 	bl	8001758 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	200b      	movs	r0, #11
 8001c5e:	f002 fc52 	bl	8004506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c62:	200b      	movs	r0, #11
 8001c64:	f002 fc69 	bl	800453a <HAL_NVIC_EnableIRQ>

}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c80:	2004      	movs	r0, #4
 8001c82:	f7ff fd82 	bl	800178a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	2001      	movs	r0, #1
 8001c88:	f7ff fd7f 	bl	800178a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8c:	2002      	movs	r0, #2
 8001c8e:	f7ff fd7c 	bl	800178a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c92:	2010      	movs	r0, #16
 8001c94:	f7ff fd79 	bl	800178a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RGB_RED_Pin|RGB_BLUE_Pin|RGB_GREEN_Pin|MT3608_EN_Pin
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f240 415c 	movw	r1, #1116	; 0x45c
 8001c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca2:	f003 f8d5 	bl	8004e50 <HAL_GPIO_WritePin>
                          |LED_WP7_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_SHT31_GPIO_Port, RESET_SHT31_Pin, GPIO_PIN_SET);
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	2120      	movs	r1, #32
 8001caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cae:	f003 f8cf 	bl	8004e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_4273_EN_Pin|LED_4261_EN_Pin, GPIO_PIN_RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2130      	movs	r1, #48	; 0x30
 8001cb6:	4827      	ldr	r0, [pc, #156]	; (8001d54 <MX_GPIO_Init+0xe8>)
 8001cb8:	f003 f8ca 	bl	8004e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RGB_RED_Pin RGB_BLUE_Pin RGB_GREEN_Pin RESET_SHT31_Pin
                           MT3608_EN_Pin LED_WP7_EN_Pin */
  GPIO_InitStruct.Pin = RGB_RED_Pin|RGB_BLUE_Pin|RGB_GREEN_Pin|RESET_SHT31_Pin
 8001cbc:	f240 437c 	movw	r3, #1148	; 0x47c
 8001cc0:	607b      	str	r3, [r7, #4]
                          |MT3608_EN_Pin|LED_WP7_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd6:	f002 ff3b 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : BATT_STAT_Pin */
  GPIO_InitStruct.Pin = BATT_STAT_Pin;
 8001cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ce0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ce4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BATT_STAT_GPIO_Port, &GPIO_InitStruct);
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	4619      	mov	r1, r3
 8001cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf2:	f002 ff2d 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTT_BT_Pin BUTT_1_Pin */
  GPIO_InitStruct.Pin = BUTT_BT_Pin|BUTT_1_Pin;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	4813      	ldr	r0, [pc, #76]	; (8001d54 <MX_GPIO_Init+0xe8>)
 8001d08:	f002 ff22 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTT_2_Pin */
  GPIO_InitStruct.Pin = BUTT_2_Pin;
 8001d0c:	2310      	movs	r3, #16
 8001d0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d14:	2301      	movs	r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTT_2_GPIO_Port, &GPIO_InitStruct);
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	480e      	ldr	r0, [pc, #56]	; (8001d58 <MX_GPIO_Init+0xec>)
 8001d1e:	f002 ff17 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_4273_EN_Pin LED_4261_EN_Pin */
  GPIO_InitStruct.Pin = LED_4273_EN_Pin|LED_4261_EN_Pin;
 8001d22:	2330      	movs	r3, #48	; 0x30
 8001d24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d26:	2301      	movs	r3, #1
 8001d28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	4619      	mov	r1, r3
 8001d36:	4807      	ldr	r0, [pc, #28]	; (8001d54 <MX_GPIO_Init+0xe8>)
 8001d38:	f002 ff0a 	bl	8004b50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2100      	movs	r1, #0
 8001d40:	2017      	movs	r0, #23
 8001d42:	f002 fbe0 	bl	8004506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d46:	2017      	movs	r0, #23
 8001d48:	f002 fbf7 	bl	800453a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d4c:	bf00      	nop
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	48000400 	.word	0x48000400
 8001d58:	48001000 	.word	0x48001000

08001d5c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	80fb      	strh	r3, [r7, #6]
	while(GPIO_Pin == BATT_STAT_Pin)
 8001d66:	e008      	b.n	8001d7a <HAL_GPIO_EXTI_Callback+0x1e>
	{
		battery_completed = 1;
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <HAL_GPIO_EXTI_Callback+0x30>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, RGB_GREEN_Pin, GPIO_PIN_SET);
 8001d6e:	2201      	movs	r2, #1
 8001d70:	2110      	movs	r1, #16
 8001d72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d76:	f003 f86b 	bl	8004e50 <HAL_GPIO_WritePin>
	while(GPIO_Pin == BATT_STAT_Pin)
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d80:	d0f2      	beq.n	8001d68 <HAL_GPIO_EXTI_Callback+0xc>
	}

}
 8001d82:	bf00      	nop
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	200004a0 	.word	0x200004a0

08001d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d94:	b672      	cpsid	i
}
 8001d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  SSD1306_GotoXY(15, 25);
 8001d98:	2119      	movs	r1, #25
 8001d9a:	200f      	movs	r0, #15
 8001d9c:	f000 fac2 	bl	8002324 <SSD1306_GotoXY>
	  SSD1306_Puts("Error. Please", &Font_7x10, 1);
 8001da0:	2201      	movs	r2, #1
 8001da2:	4910      	ldr	r1, [pc, #64]	; (8001de4 <Error_Handler+0x54>)
 8001da4:	4810      	ldr	r0, [pc, #64]	; (8001de8 <Error_Handler+0x58>)
 8001da6:	f000 fb53 	bl	8002450 <SSD1306_Puts>
	  SSD1306_GotoXY(15, 35);
 8001daa:	2123      	movs	r1, #35	; 0x23
 8001dac:	200f      	movs	r0, #15
 8001dae:	f000 fab9 	bl	8002324 <SSD1306_GotoXY>
	  SSD1306_Puts("reset device", &Font_7x10, 1);
 8001db2:	2201      	movs	r2, #1
 8001db4:	490b      	ldr	r1, [pc, #44]	; (8001de4 <Error_Handler+0x54>)
 8001db6:	480d      	ldr	r0, [pc, #52]	; (8001dec <Error_Handler+0x5c>)
 8001db8:	f000 fb4a 	bl	8002450 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8001dbc:	f000 fa0c 	bl	80021d8 <SSD1306_UpdateScreen>
	  HAL_GPIO_WritePin(GPIOA, RGB_RED_Pin, GPIO_PIN_SET);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	2104      	movs	r1, #4
 8001dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc8:	f003 f842 	bl	8004e50 <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 8001dcc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001dd0:	f7ff fb47 	bl	8001462 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, RGB_RED_Pin, GPIO_PIN_RESET);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2104      	movs	r1, #4
 8001dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ddc:	f003 f838 	bl	8004e50 <HAL_GPIO_WritePin>
	  SSD1306_GotoXY(15, 25);
 8001de0:	e7da      	b.n	8001d98 <Error_Handler+0x8>
 8001de2:	bf00      	nop
 8001de4:	20000004 	.word	0x20000004
 8001de8:	08016e1c 	.word	0x08016e1c
 8001dec:	08016e2c 	.word	0x08016e2c

08001df0 <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8001dfa:	23ff      	movs	r3, #255	; 0xff
 8001dfc:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	e020      	b.n	8001e46 <calculate_crc+0x56>
		crc ^= data[i];
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4413      	add	r3, r2
 8001e0a:	781a      	ldrb	r2, [r3, #0]
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
 8001e0e:	4053      	eors	r3, r2
 8001e10:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	e010      	b.n	8001e3a <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 8001e18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	da06      	bge.n	8001e2e <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8001e20:	7dfb      	ldrb	r3, [r7, #23]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001e2a:	75fb      	strb	r3, [r7, #23]
 8001e2c:	e002      	b.n	8001e34 <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8001e2e:	7dfb      	ldrb	r3, [r7, #23]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	3301      	adds	r3, #1
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2b07      	cmp	r3, #7
 8001e3e:	d9eb      	bls.n	8001e18 <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	3301      	adds	r3, #1
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d3da      	bcc.n	8001e04 <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8001e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	371c      	adds	r7, #28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af02      	add	r7, sp, #8
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 8001e68:	887b      	ldrh	r3, [r7, #2]
 8001e6a:	0a1b      	lsrs	r3, r3, #8
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	733b      	strb	r3, [r7, #12]
 8001e72:	887b      	ldrh	r3, [r7, #2]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	889b      	ldrh	r3, [r3, #4]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	b299      	uxth	r1, r3
 8001e84:	f107 020c 	add.w	r2, r7, #12
 8001e88:	231e      	movs	r3, #30
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	f003 f8dd 	bl	800504c <HAL_I2C_Master_Transmit>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e000      	b.n	8001e9e <sht3x_send_command+0x42>
	}

	return true;
 8001e9c:	2301      	movs	r3, #1
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <uint8_to_uint16>:


static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4603      	mov	r3, r0
 8001eae:	460a      	mov	r2, r1
 8001eb0:	71fb      	strb	r3, [r7, #7]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	79bb      	ldrb	r3, [r7, #6]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	b29b      	uxth	r3, r3
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <sht3x_init>:


bool sht3x_init(sht3x_handle_t *handle)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af04      	add	r7, sp, #16
 8001eda:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <sht3x_init+0x1e>
 8001ee6:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <sht3x_init+0x74>)
 8001ee8:	4a18      	ldr	r2, [pc, #96]	; (8001f4c <sht3x_init+0x78>)
 8001eea:	213a      	movs	r1, #58	; 0x3a
 8001eec:	4818      	ldr	r0, [pc, #96]	; (8001f50 <sht3x_init+0x7c>)
 8001eee:	f012 f9a7 	bl	8014240 <__assert_func>

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	889b      	ldrh	r3, [r3, #4]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	b299      	uxth	r1, r3
 8001efe:	231e      	movs	r3, #30
 8001f00:	9302      	str	r3, [sp, #8]
 8001f02:	2303      	movs	r3, #3
 8001f04:	9301      	str	r3, [sp, #4]
 8001f06:	f107 030c 	add.w	r3, r7, #12
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	f24f 322d 	movw	r2, #62253	; 0xf32d
 8001f12:	f003 fa85 	bl	8005420 <HAL_I2C_Mem_Read>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	e00e      	b.n	8001f3e <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8001f20:	f107 030c 	add.w	r3, r7, #12
 8001f24:	2102      	movs	r1, #2
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ff62 	bl	8001df0 <calculate_crc>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8001f30:	7bbb      	ldrb	r3, [r7, #14]
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <sht3x_init+0x68>
		return false;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	e000      	b.n	8001f3e <sht3x_init+0x6a>
	}

	return true;
 8001f3c:	2301      	movs	r3, #1
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	08016e3c 	.word	0x08016e3c
 8001f4c:	08017990 	.word	0x08017990
 8001f50:	08016e7c 	.word	0x08016e7c

08001f54 <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af02      	add	r7, sp, #8
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 8001f60:	f642 4106 	movw	r1, #11270	; 0x2c06
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f7ff ff79 	bl	8001e5c <sht3x_send_command>

	HAL_Delay(1);
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f7ff fa79 	bl	8001462 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	889b      	ldrh	r3, [r3, #4]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	b299      	uxth	r1, r3
 8001f7c:	f107 0214 	add.w	r2, r7, #20
 8001f80:	231e      	movs	r3, #30
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	2306      	movs	r3, #6
 8001f86:	f003 f955 	bl	8005234 <HAL_I2C_Master_Receive>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <sht3x_read_temperature_and_humidity+0x40>
		return false;
 8001f90:	2300      	movs	r3, #0
 8001f92:	e050      	b.n	8002036 <sht3x_read_temperature_and_humidity+0xe2>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	2102      	movs	r1, #2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff28 	bl	8001df0 <calculate_crc>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	3303      	adds	r3, #3
 8001faa:	2102      	movs	r1, #2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff1f 	bl	8001df0 <calculate_crc>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8001fb6:	7dbb      	ldrb	r3, [r7, #22]
 8001fb8:	7ffa      	ldrb	r2, [r7, #31]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d103      	bne.n	8001fc6 <sht3x_read_temperature_and_humidity+0x72>
 8001fbe:	7e7b      	ldrb	r3, [r7, #25]
 8001fc0:	7fba      	ldrb	r2, [r7, #30]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d001      	beq.n	8001fca <sht3x_read_temperature_and_humidity+0x76>
		return false;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e035      	b.n	8002036 <sht3x_read_temperature_and_humidity+0xe2>
	}

	int16_t temperature_raw = (int16_t)uint8_to_uint16(buffer[0], buffer[1]);
 8001fca:	7d3b      	ldrb	r3, [r7, #20]
 8001fcc:	7d7a      	ldrb	r2, [r7, #21]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff68 	bl	8001ea6 <uint8_to_uint16>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 8001fda:	7dfb      	ldrb	r3, [r7, #23]
 8001fdc:	7e3a      	ldrb	r2, [r7, #24]
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff60 	bl	8001ea6 <uint8_to_uint16>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * temperature_raw / 65535.0f;
 8001fea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fee:	ee07 3a90 	vmov	s15, r3
 8001ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002040 <sht3x_read_temperature_and_humidity+0xec>
 8001ffa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ffe:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002044 <sht3x_read_temperature_and_humidity+0xf0>
 8002002:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002006:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002048 <sht3x_read_temperature_and_humidity+0xf4>
 800200a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * humidity_raw / 65535.0f;
 8002014:	8b7b      	ldrh	r3, [r7, #26]
 8002016:	ee07 3a90 	vmov	s15, r3
 800201a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800201e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800204c <sht3x_read_temperature_and_humidity+0xf8>
 8002022:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002026:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002044 <sht3x_read_temperature_and_humidity+0xf0>
 800202a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	edc3 7a00 	vstr	s15, [r3]

	return true;
 8002034:	2301      	movs	r3, #1
}
 8002036:	4618      	mov	r0, r3
 8002038:	3720      	adds	r7, #32
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	432f0000 	.word	0x432f0000
 8002044:	477fff00 	.word	0x477fff00
 8002048:	42340000 	.word	0x42340000
 800204c:	42c80000 	.word	0x42c80000

08002050 <SSD1306_Init>:
}




uint8_t SSD1306_Init(void) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002056:	f000 fa29 	bl	80024ac <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800205a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800205e:	2201      	movs	r2, #1
 8002060:	2178      	movs	r1, #120	; 0x78
 8002062:	485b      	ldr	r0, [pc, #364]	; (80021d0 <SSD1306_Init+0x180>)
 8002064:	f003 faf6 	bl	8005654 <HAL_I2C_IsDeviceReady>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800206e:	2300      	movs	r3, #0
 8002070:	e0a9      	b.n	80021c6 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8002072:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002076:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002078:	e002      	b.n	8002080 <SSD1306_Init+0x30>
		p--;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3b01      	subs	r3, #1
 800207e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f9      	bne.n	800207a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002086:	22ae      	movs	r2, #174	; 0xae
 8002088:	2100      	movs	r1, #0
 800208a:	2078      	movs	r0, #120	; 0x78
 800208c:	f000 fa8a 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002090:	2220      	movs	r2, #32
 8002092:	2100      	movs	r1, #0
 8002094:	2078      	movs	r0, #120	; 0x78
 8002096:	f000 fa85 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800209a:	2210      	movs	r2, #16
 800209c:	2100      	movs	r1, #0
 800209e:	2078      	movs	r0, #120	; 0x78
 80020a0:	f000 fa80 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80020a4:	22b0      	movs	r2, #176	; 0xb0
 80020a6:	2100      	movs	r1, #0
 80020a8:	2078      	movs	r0, #120	; 0x78
 80020aa:	f000 fa7b 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80020ae:	22c8      	movs	r2, #200	; 0xc8
 80020b0:	2100      	movs	r1, #0
 80020b2:	2078      	movs	r0, #120	; 0x78
 80020b4:	f000 fa76 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80020b8:	2200      	movs	r2, #0
 80020ba:	2100      	movs	r1, #0
 80020bc:	2078      	movs	r0, #120	; 0x78
 80020be:	f000 fa71 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80020c2:	2210      	movs	r2, #16
 80020c4:	2100      	movs	r1, #0
 80020c6:	2078      	movs	r0, #120	; 0x78
 80020c8:	f000 fa6c 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80020cc:	2240      	movs	r2, #64	; 0x40
 80020ce:	2100      	movs	r1, #0
 80020d0:	2078      	movs	r0, #120	; 0x78
 80020d2:	f000 fa67 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80020d6:	2281      	movs	r2, #129	; 0x81
 80020d8:	2100      	movs	r1, #0
 80020da:	2078      	movs	r0, #120	; 0x78
 80020dc:	f000 fa62 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80020e0:	22ff      	movs	r2, #255	; 0xff
 80020e2:	2100      	movs	r1, #0
 80020e4:	2078      	movs	r0, #120	; 0x78
 80020e6:	f000 fa5d 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80020ea:	22a1      	movs	r2, #161	; 0xa1
 80020ec:	2100      	movs	r1, #0
 80020ee:	2078      	movs	r0, #120	; 0x78
 80020f0:	f000 fa58 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80020f4:	22a6      	movs	r2, #166	; 0xa6
 80020f6:	2100      	movs	r1, #0
 80020f8:	2078      	movs	r0, #120	; 0x78
 80020fa:	f000 fa53 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80020fe:	22a8      	movs	r2, #168	; 0xa8
 8002100:	2100      	movs	r1, #0
 8002102:	2078      	movs	r0, #120	; 0x78
 8002104:	f000 fa4e 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002108:	223f      	movs	r2, #63	; 0x3f
 800210a:	2100      	movs	r1, #0
 800210c:	2078      	movs	r0, #120	; 0x78
 800210e:	f000 fa49 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002112:	22a4      	movs	r2, #164	; 0xa4
 8002114:	2100      	movs	r1, #0
 8002116:	2078      	movs	r0, #120	; 0x78
 8002118:	f000 fa44 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800211c:	22d3      	movs	r2, #211	; 0xd3
 800211e:	2100      	movs	r1, #0
 8002120:	2078      	movs	r0, #120	; 0x78
 8002122:	f000 fa3f 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	2078      	movs	r0, #120	; 0x78
 800212c:	f000 fa3a 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002130:	22d5      	movs	r2, #213	; 0xd5
 8002132:	2100      	movs	r1, #0
 8002134:	2078      	movs	r0, #120	; 0x78
 8002136:	f000 fa35 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800213a:	22f0      	movs	r2, #240	; 0xf0
 800213c:	2100      	movs	r1, #0
 800213e:	2078      	movs	r0, #120	; 0x78
 8002140:	f000 fa30 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002144:	22d9      	movs	r2, #217	; 0xd9
 8002146:	2100      	movs	r1, #0
 8002148:	2078      	movs	r0, #120	; 0x78
 800214a:	f000 fa2b 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800214e:	2222      	movs	r2, #34	; 0x22
 8002150:	2100      	movs	r1, #0
 8002152:	2078      	movs	r0, #120	; 0x78
 8002154:	f000 fa26 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002158:	22da      	movs	r2, #218	; 0xda
 800215a:	2100      	movs	r1, #0
 800215c:	2078      	movs	r0, #120	; 0x78
 800215e:	f000 fa21 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002162:	2212      	movs	r2, #18
 8002164:	2100      	movs	r1, #0
 8002166:	2078      	movs	r0, #120	; 0x78
 8002168:	f000 fa1c 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800216c:	22db      	movs	r2, #219	; 0xdb
 800216e:	2100      	movs	r1, #0
 8002170:	2078      	movs	r0, #120	; 0x78
 8002172:	f000 fa17 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002176:	2220      	movs	r2, #32
 8002178:	2100      	movs	r1, #0
 800217a:	2078      	movs	r0, #120	; 0x78
 800217c:	f000 fa12 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002180:	228d      	movs	r2, #141	; 0x8d
 8002182:	2100      	movs	r1, #0
 8002184:	2078      	movs	r0, #120	; 0x78
 8002186:	f000 fa0d 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800218a:	2214      	movs	r2, #20
 800218c:	2100      	movs	r1, #0
 800218e:	2078      	movs	r0, #120	; 0x78
 8002190:	f000 fa08 	bl	80025a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002194:	22af      	movs	r2, #175	; 0xaf
 8002196:	2100      	movs	r1, #0
 8002198:	2078      	movs	r0, #120	; 0x78
 800219a:	f000 fa03 	bl	80025a4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800219e:	222e      	movs	r2, #46	; 0x2e
 80021a0:	2100      	movs	r1, #0
 80021a2:	2078      	movs	r0, #120	; 0x78
 80021a4:	f000 f9fe 	bl	80025a4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80021a8:	2000      	movs	r0, #0
 80021aa:	f000 f843 	bl	8002234 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80021ae:	f000 f813 	bl	80021d8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <SSD1306_Init+0x184>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <SSD1306_Init+0x184>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <SSD1306_Init+0x184>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80021c4:	2301      	movs	r3, #1
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200003a0 	.word	0x200003a0
 80021d4:	200008a4 	.word	0x200008a4

080021d8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80021de:	2300      	movs	r3, #0
 80021e0:	71fb      	strb	r3, [r7, #7]
 80021e2:	e01d      	b.n	8002220 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	3b50      	subs	r3, #80	; 0x50
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	2100      	movs	r1, #0
 80021ee:	2078      	movs	r0, #120	; 0x78
 80021f0:	f000 f9d8 	bl	80025a4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80021f4:	2200      	movs	r2, #0
 80021f6:	2100      	movs	r1, #0
 80021f8:	2078      	movs	r0, #120	; 0x78
 80021fa:	f000 f9d3 	bl	80025a4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80021fe:	2210      	movs	r2, #16
 8002200:	2100      	movs	r1, #0
 8002202:	2078      	movs	r0, #120	; 0x78
 8002204:	f000 f9ce 	bl	80025a4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	01db      	lsls	r3, r3, #7
 800220c:	4a08      	ldr	r2, [pc, #32]	; (8002230 <SSD1306_UpdateScreen+0x58>)
 800220e:	441a      	add	r2, r3
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	2140      	movs	r1, #64	; 0x40
 8002214:	2078      	movs	r0, #120	; 0x78
 8002216:	f000 f95f 	bl	80024d8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	3301      	adds	r3, #1
 800221e:	71fb      	strb	r3, [r7, #7]
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	2b07      	cmp	r3, #7
 8002224:	d9de      	bls.n	80021e4 <SSD1306_UpdateScreen+0xc>
	}
}
 8002226:	bf00      	nop
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	200004a4 	.word	0x200004a4

08002234 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <SSD1306_Fill+0x14>
 8002244:	2300      	movs	r3, #0
 8002246:	e000      	b.n	800224a <SSD1306_Fill+0x16>
 8002248:	23ff      	movs	r3, #255	; 0xff
 800224a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800224e:	4619      	mov	r1, r3
 8002250:	4803      	ldr	r0, [pc, #12]	; (8002260 <SSD1306_Fill+0x2c>)
 8002252:	f012 f881 	bl	8014358 <memset>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200004a4 	.word	0x200004a4

08002264 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	80fb      	strh	r3, [r7, #6]
 800226e:	460b      	mov	r3, r1
 8002270:	80bb      	strh	r3, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	70fb      	strb	r3, [r7, #3]
	if (
 8002276:	88fb      	ldrh	r3, [r7, #6]
 8002278:	2b7f      	cmp	r3, #127	; 0x7f
 800227a:	d848      	bhi.n	800230e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800227c:	88bb      	ldrh	r3, [r7, #4]
 800227e:	2b3f      	cmp	r3, #63	; 0x3f
 8002280:	d845      	bhi.n	800230e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002282:	4b26      	ldr	r3, [pc, #152]	; (800231c <SSD1306_DrawPixel+0xb8>)
 8002284:	791b      	ldrb	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d006      	beq.n	8002298 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800228a:	78fb      	ldrb	r3, [r7, #3]
 800228c:	2b00      	cmp	r3, #0
 800228e:	bf0c      	ite	eq
 8002290:	2301      	moveq	r3, #1
 8002292:	2300      	movne	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d11a      	bne.n	80022d4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800229e:	88fa      	ldrh	r2, [r7, #6]
 80022a0:	88bb      	ldrh	r3, [r7, #4]
 80022a2:	08db      	lsrs	r3, r3, #3
 80022a4:	b298      	uxth	r0, r3
 80022a6:	4603      	mov	r3, r0
 80022a8:	01db      	lsls	r3, r3, #7
 80022aa:	4413      	add	r3, r2
 80022ac:	4a1c      	ldr	r2, [pc, #112]	; (8002320 <SSD1306_DrawPixel+0xbc>)
 80022ae:	5cd3      	ldrb	r3, [r2, r3]
 80022b0:	b25a      	sxtb	r2, r3
 80022b2:	88bb      	ldrh	r3, [r7, #4]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	2101      	movs	r1, #1
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	b25b      	sxtb	r3, r3
 80022c0:	4313      	orrs	r3, r2
 80022c2:	b259      	sxtb	r1, r3
 80022c4:	88fa      	ldrh	r2, [r7, #6]
 80022c6:	4603      	mov	r3, r0
 80022c8:	01db      	lsls	r3, r3, #7
 80022ca:	4413      	add	r3, r2
 80022cc:	b2c9      	uxtb	r1, r1
 80022ce:	4a14      	ldr	r2, [pc, #80]	; (8002320 <SSD1306_DrawPixel+0xbc>)
 80022d0:	54d1      	strb	r1, [r2, r3]
 80022d2:	e01d      	b.n	8002310 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80022d4:	88fa      	ldrh	r2, [r7, #6]
 80022d6:	88bb      	ldrh	r3, [r7, #4]
 80022d8:	08db      	lsrs	r3, r3, #3
 80022da:	b298      	uxth	r0, r3
 80022dc:	4603      	mov	r3, r0
 80022de:	01db      	lsls	r3, r3, #7
 80022e0:	4413      	add	r3, r2
 80022e2:	4a0f      	ldr	r2, [pc, #60]	; (8002320 <SSD1306_DrawPixel+0xbc>)
 80022e4:	5cd3      	ldrb	r3, [r2, r3]
 80022e6:	b25a      	sxtb	r2, r3
 80022e8:	88bb      	ldrh	r3, [r7, #4]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	2101      	movs	r1, #1
 80022f0:	fa01 f303 	lsl.w	r3, r1, r3
 80022f4:	b25b      	sxtb	r3, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	b25b      	sxtb	r3, r3
 80022fa:	4013      	ands	r3, r2
 80022fc:	b259      	sxtb	r1, r3
 80022fe:	88fa      	ldrh	r2, [r7, #6]
 8002300:	4603      	mov	r3, r0
 8002302:	01db      	lsls	r3, r3, #7
 8002304:	4413      	add	r3, r2
 8002306:	b2c9      	uxtb	r1, r1
 8002308:	4a05      	ldr	r2, [pc, #20]	; (8002320 <SSD1306_DrawPixel+0xbc>)
 800230a:	54d1      	strb	r1, [r2, r3]
 800230c:	e000      	b.n	8002310 <SSD1306_DrawPixel+0xac>
		return;
 800230e:	bf00      	nop
	}
}
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	200008a4 	.word	0x200008a4
 8002320:	200004a4 	.word	0x200004a4

08002324 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	460a      	mov	r2, r1
 800232e:	80fb      	strh	r3, [r7, #6]
 8002330:	4613      	mov	r3, r2
 8002332:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002334:	4a05      	ldr	r2, [pc, #20]	; (800234c <SSD1306_GotoXY+0x28>)
 8002336:	88fb      	ldrh	r3, [r7, #6]
 8002338:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800233a:	4a04      	ldr	r2, [pc, #16]	; (800234c <SSD1306_GotoXY+0x28>)
 800233c:	88bb      	ldrh	r3, [r7, #4]
 800233e:	8053      	strh	r3, [r2, #2]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	200008a4 	.word	0x200008a4

08002350 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	71fb      	strb	r3, [r7, #7]
 800235c:	4613      	mov	r3, r2
 800235e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002360:	4b3a      	ldr	r3, [pc, #232]	; (800244c <SSD1306_Putc+0xfc>)
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	4413      	add	r3, r2
	if (
 800236c:	2b7f      	cmp	r3, #127	; 0x7f
 800236e:	dc07      	bgt.n	8002380 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002370:	4b36      	ldr	r3, [pc, #216]	; (800244c <SSD1306_Putc+0xfc>)
 8002372:	885b      	ldrh	r3, [r3, #2]
 8002374:	461a      	mov	r2, r3
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	785b      	ldrb	r3, [r3, #1]
 800237a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800237c:	2b3f      	cmp	r3, #63	; 0x3f
 800237e:	dd01      	ble.n	8002384 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002380:	2300      	movs	r3, #0
 8002382:	e05e      	b.n	8002442 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	e04b      	b.n	8002422 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	3b20      	subs	r3, #32
 8002392:	6839      	ldr	r1, [r7, #0]
 8002394:	7849      	ldrb	r1, [r1, #1]
 8002396:	fb01 f303 	mul.w	r3, r1, r3
 800239a:	4619      	mov	r1, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	440b      	add	r3, r1
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80023a8:	2300      	movs	r3, #0
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	e030      	b.n	8002410 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d010      	beq.n	80023e0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80023be:	4b23      	ldr	r3, [pc, #140]	; (800244c <SSD1306_Putc+0xfc>)
 80023c0:	881a      	ldrh	r2, [r3, #0]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	b298      	uxth	r0, r3
 80023ca:	4b20      	ldr	r3, [pc, #128]	; (800244c <SSD1306_Putc+0xfc>)
 80023cc:	885a      	ldrh	r2, [r3, #2]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	79ba      	ldrb	r2, [r7, #6]
 80023d8:	4619      	mov	r1, r3
 80023da:	f7ff ff43 	bl	8002264 <SSD1306_DrawPixel>
 80023de:	e014      	b.n	800240a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80023e0:	4b1a      	ldr	r3, [pc, #104]	; (800244c <SSD1306_Putc+0xfc>)
 80023e2:	881a      	ldrh	r2, [r3, #0]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	b298      	uxth	r0, r3
 80023ec:	4b17      	ldr	r3, [pc, #92]	; (800244c <SSD1306_Putc+0xfc>)
 80023ee:	885a      	ldrh	r2, [r3, #2]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	4413      	add	r3, r2
 80023f6:	b299      	uxth	r1, r3
 80023f8:	79bb      	ldrb	r3, [r7, #6]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	bf0c      	ite	eq
 80023fe:	2301      	moveq	r3, #1
 8002400:	2300      	movne	r3, #0
 8002402:	b2db      	uxtb	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	f7ff ff2d 	bl	8002264 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	3301      	adds	r3, #1
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	461a      	mov	r2, r3
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4293      	cmp	r3, r2
 800241a:	d3c8      	bcc.n	80023ae <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	3301      	adds	r3, #1
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	785b      	ldrb	r3, [r3, #1]
 8002426:	461a      	mov	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	4293      	cmp	r3, r2
 800242c:	d3ad      	bcc.n	800238a <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <SSD1306_Putc+0xfc>)
 8002430:	881a      	ldrh	r2, [r3, #0]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	4413      	add	r3, r2
 800243a:	b29a      	uxth	r2, r3
 800243c:	4b03      	ldr	r3, [pc, #12]	; (800244c <SSD1306_Putc+0xfc>)
 800243e:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8002440:	79fb      	ldrb	r3, [r7, #7]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200008a4 	.word	0x200008a4

08002450 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	4613      	mov	r3, r2
 800245c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800245e:	e012      	b.n	8002486 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	79fa      	ldrb	r2, [r7, #7]
 8002466:	68b9      	ldr	r1, [r7, #8]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff71 	bl	8002350 <SSD1306_Putc>
 800246e:	4603      	mov	r3, r0
 8002470:	461a      	mov	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d002      	beq.n	8002480 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	e008      	b.n	8002492 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	3301      	adds	r3, #1
 8002484:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1e8      	bne.n	8002460 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	781b      	ldrb	r3, [r3, #0]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800249e:	2000      	movs	r0, #0
 80024a0:	f7ff fec8 	bl	8002234 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80024a4:	f7ff fe98 	bl	80021d8 <SSD1306_UpdateScreen>
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}

080024ac <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <ssd1306_I2C_Init+0x28>)
 80024b4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80024b6:	e002      	b.n	80024be <ssd1306_I2C_Init+0x12>
		p--;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1f9      	bne.n	80024b8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80024c4:	bf00      	nop
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	0003d090 	.word	0x0003d090

080024d8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	b0c7      	sub	sp, #284	; 0x11c
 80024dc:	af02      	add	r7, sp, #8
 80024de:	4604      	mov	r4, r0
 80024e0:	4608      	mov	r0, r1
 80024e2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80024e6:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80024ea:	600a      	str	r2, [r1, #0]
 80024ec:	4619      	mov	r1, r3
 80024ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024f2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80024f6:	4622      	mov	r2, r4
 80024f8:	701a      	strb	r2, [r3, #0]
 80024fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024fe:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002502:	4602      	mov	r2, r0
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800250a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800250e:	460a      	mov	r2, r1
 8002510:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002512:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002516:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800251a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800251e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8002522:	7812      	ldrb	r2, [r2, #0]
 8002524:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002526:	2300      	movs	r3, #0
 8002528:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800252c:	e015      	b.n	800255a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800252e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002532:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002536:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	441a      	add	r2, r3
 800253e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002542:	3301      	adds	r3, #1
 8002544:	7811      	ldrb	r1, [r2, #0]
 8002546:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800254a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800254e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002550:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002554:	3301      	adds	r3, #1
 8002556:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800255a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800255e:	b29b      	uxth	r3, r3
 8002560:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002564:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002568:	8812      	ldrh	r2, [r2, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d8df      	bhi.n	800252e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800256e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002572:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	b299      	uxth	r1, r3
 800257a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800257e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	3301      	adds	r3, #1
 8002586:	b29b      	uxth	r3, r3
 8002588:	f107 020c 	add.w	r2, r7, #12
 800258c:	200a      	movs	r0, #10
 800258e:	9000      	str	r0, [sp, #0]
 8002590:	4803      	ldr	r0, [pc, #12]	; (80025a0 <ssd1306_I2C_WriteMulti+0xc8>)
 8002592:	f002 fd5b 	bl	800504c <HAL_I2C_Master_Transmit>
}
 8002596:	bf00      	nop
 8002598:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800259c:	46bd      	mov	sp, r7
 800259e:	bd90      	pop	{r4, r7, pc}
 80025a0:	200003a0 	.word	0x200003a0

080025a4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af02      	add	r7, sp, #8
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]
 80025ae:	460b      	mov	r3, r1
 80025b0:	71bb      	strb	r3, [r7, #6]
 80025b2:	4613      	mov	r3, r2
 80025b4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80025b6:	79bb      	ldrb	r3, [r7, #6]
 80025b8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80025ba:	797b      	ldrb	r3, [r7, #5]
 80025bc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	b299      	uxth	r1, r3
 80025c2:	f107 020c 	add.w	r2, r7, #12
 80025c6:	230a      	movs	r3, #10
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	2302      	movs	r3, #2
 80025cc:	4803      	ldr	r0, [pc, #12]	; (80025dc <ssd1306_I2C_Write+0x38>)
 80025ce:	f002 fd3d 	bl	800504c <HAL_I2C_Master_Transmit>
}
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	200003a0 	.word	0x200003a0

080025e0 <LL_RCC_EnableRTC>:
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80025e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_AHB2_GRP1_EnableClock>:
{
 8002602:	b480      	push	{r7}
 8002604:	b085      	sub	sp, #20
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800260a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800260e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002610:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4313      	orrs	r3, r2
 8002618:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800261a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4013      	ands	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002626:	68fb      	ldr	r3, [r7, #12]
}
 8002628:	bf00      	nop
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <LL_AHB3_GRP1_EnableClock>:
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800263c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002640:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002642:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4313      	orrs	r3, r2
 800264a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800264c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002650:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4013      	ands	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002658:	68fb      	ldr	r3, [r7, #12]
}
 800265a:	bf00      	nop
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <LL_APB1_GRP1_EnableClock>:
{
 8002666:	b480      	push	{r7}
 8002668:	b085      	sub	sp, #20
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800266e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002672:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002674:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4313      	orrs	r3, r2
 800267c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800267e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002682:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4013      	ands	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800268a:	68fb      	ldr	r3, [r7, #12]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800269c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80026a0:	f7ff ffc8 	bl	8002634 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80026a4:	2200      	movs	r2, #0
 80026a6:	2100      	movs	r1, #0
 80026a8:	202e      	movs	r0, #46	; 0x2e
 80026aa:	f001 ff2c 	bl	8004506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80026ae:	202e      	movs	r0, #46	; 0x2e
 80026b0:	f001 ff43 	bl	800453a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b09c      	sub	sp, #112	; 0x70
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026d0:	f107 030c 	add.w	r3, r7, #12
 80026d4:	2250      	movs	r2, #80	; 0x50
 80026d6:	2100      	movs	r1, #0
 80026d8:	4618      	mov	r0, r3
 80026da:	f011 fe3d 	bl	8014358 <memset>
  if(hadc->Instance==ADC1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a2b      	ldr	r2, [pc, #172]	; (8002790 <HAL_ADC_MspInit+0xd8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d14e      	bne.n	8002786 <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80026e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026ec:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL;
 80026ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80026f2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026f4:	f107 030c 	add.w	r3, r7, #12
 80026f8:	4618      	mov	r0, r3
 80026fa:	f006 fd1b 	bl	8009134 <HAL_RCCEx_PeriphCLKConfig>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002704:	f7ff fb44 	bl	8001d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002708:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800270c:	f7ff ff79 	bl	8002602 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002710:	2001      	movs	r0, #1
 8002712:	f7ff ff76 	bl	8002602 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Feedback_VREF_Pin|BATT_ADC_Pin|OPAMP_ADC_Pin;
 8002716:	2383      	movs	r3, #131	; 0x83
 8002718:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800271a:	2303      	movs	r3, #3
 800271c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002722:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002726:	4619      	mov	r1, r3
 8002728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800272c:	f002 fa10 	bl	8004b50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002730:	4b18      	ldr	r3, [pc, #96]	; (8002794 <HAL_ADC_MspInit+0xdc>)
 8002732:	4a19      	ldr	r2, [pc, #100]	; (8002798 <HAL_ADC_MspInit+0xe0>)
 8002734:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002736:	4b17      	ldr	r3, [pc, #92]	; (8002794 <HAL_ADC_MspInit+0xdc>)
 8002738:	2205      	movs	r2, #5
 800273a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800273c:	4b15      	ldr	r3, [pc, #84]	; (8002794 <HAL_ADC_MspInit+0xdc>)
 800273e:	2200      	movs	r2, #0
 8002740:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002742:	4b14      	ldr	r3, [pc, #80]	; (8002794 <HAL_ADC_MspInit+0xdc>)
 8002744:	2200      	movs	r2, #0
 8002746:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002748:	4b12      	ldr	r3, [pc, #72]	; (8002794 <HAL_ADC_MspInit+0xdc>)
 800274a:	2280      	movs	r2, #128	; 0x80
 800274c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800274e:	4b11      	ldr	r3, [pc, #68]	; (8002794 <HAL_ADC_MspInit+0xdc>)
 8002750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002754:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002756:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <HAL_ADC_MspInit+0xdc>)
 8002758:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800275c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800275e:	4b0d      	ldr	r3, [pc, #52]	; (8002794 <HAL_ADC_MspInit+0xdc>)
 8002760:	2220      	movs	r2, #32
 8002762:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_ADC_MspInit+0xdc>)
 8002766:	2200      	movs	r2, #0
 8002768:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800276a:	480a      	ldr	r0, [pc, #40]	; (8002794 <HAL_ADC_MspInit+0xdc>)
 800276c:	f001 ff1c 	bl	80045a8 <HAL_DMA_Init>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8002776:	f7ff fb0b 	bl	8001d90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a05      	ldr	r2, [pc, #20]	; (8002794 <HAL_ADC_MspInit+0xdc>)
 800277e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002780:	4a04      	ldr	r2, [pc, #16]	; (8002794 <HAL_ADC_MspInit+0xdc>)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002786:	bf00      	nop
 8002788:	3770      	adds	r7, #112	; 0x70
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	50040000 	.word	0x50040000
 8002794:	20000340 	.word	0x20000340
 8002798:	40020008 	.word	0x40020008

0800279c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b09c      	sub	sp, #112	; 0x70
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027b4:	f107 030c 	add.w	r3, r7, #12
 80027b8:	2250      	movs	r2, #80	; 0x50
 80027ba:	2100      	movs	r1, #0
 80027bc:	4618      	mov	r0, r3
 80027be:	f011 fdcb 	bl	8014358 <memset>
  if(hi2c->Instance==I2C1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a16      	ldr	r2, [pc, #88]	; (8002820 <HAL_I2C_MspInit+0x84>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d125      	bne.n	8002818 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80027cc:	2304      	movs	r3, #4
 80027ce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80027d0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027d6:	f107 030c 	add.w	r3, r7, #12
 80027da:	4618      	mov	r0, r3
 80027dc:	f006 fcaa 	bl	8009134 <HAL_RCCEx_PeriphCLKConfig>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80027e6:	f7ff fad3 	bl	8001d90 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ea:	2002      	movs	r0, #2
 80027ec:	f7ff ff09 	bl	8002602 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027f0:	23c0      	movs	r3, #192	; 0xc0
 80027f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027f4:	2312      	movs	r3, #18
 80027f6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fc:	2300      	movs	r3, #0
 80027fe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002800:	2304      	movs	r3, #4
 8002802:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002804:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002808:	4619      	mov	r1, r3
 800280a:	4806      	ldr	r0, [pc, #24]	; (8002824 <HAL_I2C_MspInit+0x88>)
 800280c:	f002 f9a0 	bl	8004b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002810:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002814:	f7ff ff27 	bl	8002666 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002818:	bf00      	nop
 800281a:	3770      	adds	r7, #112	; 0x70
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40005400 	.word	0x40005400
 8002824:	48000400 	.word	0x48000400

08002828 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a0d      	ldr	r2, [pc, #52]	; (800286c <HAL_IPCC_MspInit+0x44>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d113      	bne.n	8002862 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800283a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800283e:	f7ff fef9 	bl	8002634 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002842:	2200      	movs	r2, #0
 8002844:	2100      	movs	r1, #0
 8002846:	202c      	movs	r0, #44	; 0x2c
 8002848:	f001 fe5d 	bl	8004506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800284c:	202c      	movs	r0, #44	; 0x2c
 800284e:	f001 fe74 	bl	800453a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002852:	2200      	movs	r2, #0
 8002854:	2100      	movs	r1, #0
 8002856:	202d      	movs	r0, #45	; 0x2d
 8002858:	f001 fe55 	bl	8004506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800285c:	202d      	movs	r0, #45	; 0x2d
 800285e:	f001 fe6c 	bl	800453a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	58000c00 	.word	0x58000c00

08002870 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b096      	sub	sp, #88	; 0x58
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002878:	f107 0308 	add.w	r3, r7, #8
 800287c:	2250      	movs	r2, #80	; 0x50
 800287e:	2100      	movs	r1, #0
 8002880:	4618      	mov	r0, r3
 8002882:	f011 fd69 	bl	8014358 <memset>
  if(hrtc->Instance==RTC)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a0e      	ldr	r2, [pc, #56]	; (80028c4 <HAL_RTC_MspInit+0x54>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d115      	bne.n	80028bc <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002890:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002894:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002896:	f44f 7380 	mov.w	r3, #256	; 0x100
 800289a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800289c:	f107 0308 	add.w	r3, r7, #8
 80028a0:	4618      	mov	r0, r3
 80028a2:	f006 fc47 	bl	8009134 <HAL_RCCEx_PeriphCLKConfig>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80028ac:	f7ff fa70 	bl	8001d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80028b0:	f7ff fe96 	bl	80025e0 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80028b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80028b8:	f7ff fed5 	bl	8002666 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80028bc:	bf00      	nop
 80028be:	3758      	adds	r7, #88	; 0x58
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40002800 	.word	0x40002800

080028c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d8:	d102      	bne.n	80028e0 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028da:	2001      	movs	r0, #1
 80028dc:	f7ff fec3 	bl	8002666 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80028e0:	bf00      	nop
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b088      	sub	sp, #32
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f0:	f107 030c 	add.w	r3, r7, #12
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002908:	d127      	bne.n	800295a <HAL_TIM_MspPostInit+0x72>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290a:	2001      	movs	r0, #1
 800290c:	f7ff fe79 	bl	8002602 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002910:	2002      	movs	r0, #2
 8002912:	f7ff fe76 	bl	8002602 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PWM_VREF_Pin;
 8002916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800291a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002924:	2300      	movs	r3, #0
 8002926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002928:	2301      	movs	r3, #1
 800292a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_VREF_GPIO_Port, &GPIO_InitStruct);
 800292c:	f107 030c 	add.w	r3, r7, #12
 8002930:	4619      	mov	r1, r3
 8002932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002936:	f002 f90b 	bl	8004b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_LEDS_Pin;
 800293a:	2308      	movs	r3, #8
 800293c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293e:	2302      	movs	r3, #2
 8002940:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800294a:	2301      	movs	r3, #1
 800294c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_LEDS_GPIO_Port, &GPIO_InitStruct);
 800294e:	f107 030c 	add.w	r3, r7, #12
 8002952:	4619      	mov	r1, r3
 8002954:	4803      	ldr	r0, [pc, #12]	; (8002964 <HAL_TIM_MspPostInit+0x7c>)
 8002956:	f002 f8fb 	bl	8004b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800295a:	bf00      	nop
 800295c:	3720      	adds	r7, #32
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	48000400 	.word	0x48000400

08002968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800296c:	e7fe      	b.n	800296c <NMI_Handler+0x4>

0800296e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002972:	e7fe      	b.n	8002972 <HardFault_Handler+0x4>

08002974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002978:	e7fe      	b.n	8002978 <MemManage_Handler+0x4>

0800297a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800297e:	e7fe      	b.n	800297e <BusFault_Handler+0x4>

08002980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002984:	e7fe      	b.n	8002984 <UsageFault_Handler+0x4>

08002986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029b4:	f000 f9f6 	bl	8002da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029b8:	bf00      	nop
 80029ba:	bd80      	pop	{r7, pc}

080029bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029c0:	4802      	ldr	r0, [pc, #8]	; (80029cc <DMA1_Channel1_IRQHandler+0x10>)
 80029c2:	f001 ff73 	bl	80048ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000340 	.word	0x20000340

080029d0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80029d4:	4802      	ldr	r0, [pc, #8]	; (80029e0 <USB_LP_IRQHandler+0x10>)
 80029d6:	f003 fc44 	bl	8006262 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	200022b0 	.word	0x200022b0

080029e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BATT_STAT_Pin);
 80029e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80029ec:	f002 fa62 	bl	8004eb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80029f0:	bf00      	nop
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80029f8:	f010 fb22 	bl	8013040 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002a04:	f010 fb54 	bl	80130b0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002a10:	f002 fa68 	bl	8004ee4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002a14:	bf00      	nop
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
	return 1;
 8002a1c:	2301      	movs	r3, #1
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <_kill>:

int _kill(int pid, int sig)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a32:	f011 fc47 	bl	80142c4 <__errno>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2216      	movs	r2, #22
 8002a3a:	601a      	str	r2, [r3, #0]
	return -1;
 8002a3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <_exit>:

void _exit (int status)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a50:	f04f 31ff 	mov.w	r1, #4294967295
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ffe7 	bl	8002a28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a5a:	e7fe      	b.n	8002a5a <_exit+0x12>

08002a5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	e00a      	b.n	8002a84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a6e:	f3af 8000 	nop.w
 8002a72:	4601      	mov	r1, r0
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	60ba      	str	r2, [r7, #8]
 8002a7a:	b2ca      	uxtb	r2, r1
 8002a7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	3301      	adds	r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	dbf0      	blt.n	8002a6e <_read+0x12>
	}

return len;
 8002a8c:	687b      	ldr	r3, [r7, #4]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b086      	sub	sp, #24
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	e009      	b.n	8002abc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	60ba      	str	r2, [r7, #8]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	dbf1      	blt.n	8002aa8 <_write+0x12>
	}
	return len;
 8002ac4:	687b      	ldr	r3, [r7, #4]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <_close>:

int _close(int file)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
	return -1;
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002af6:	605a      	str	r2, [r3, #4]
	return 0;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <_isatty>:

int _isatty(int file)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
	return 1;
 8002b0e:	2301      	movs	r3, #1
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
	return 0;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b40:	4a14      	ldr	r2, [pc, #80]	; (8002b94 <_sbrk+0x5c>)
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <_sbrk+0x60>)
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b4c:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <_sbrk+0x64>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d102      	bne.n	8002b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b54:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <_sbrk+0x64>)
 8002b56:	4a12      	ldr	r2, [pc, #72]	; (8002ba0 <_sbrk+0x68>)
 8002b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b5a:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <_sbrk+0x64>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4413      	add	r3, r2
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d207      	bcs.n	8002b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b68:	f011 fbac 	bl	80142c4 <__errno>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	220c      	movs	r2, #12
 8002b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b72:	f04f 33ff 	mov.w	r3, #4294967295
 8002b76:	e009      	b.n	8002b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b78:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <_sbrk+0x64>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b7e:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <_sbrk+0x64>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	4a05      	ldr	r2, [pc, #20]	; (8002b9c <_sbrk+0x64>)
 8002b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20008000 	.word	0x20008000
 8002b98:	00000400 	.word	0x00000400
 8002b9c:	200008ac 	.word	0x200008ac
 8002ba0:	20002880 	.word	0x20002880

08002ba4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002ba8:	4b22      	ldr	r3, [pc, #136]	; (8002c34 <SystemInit+0x90>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bae:	4a21      	ldr	r2, [pc, #132]	; (8002c34 <SystemInit+0x90>)
 8002bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bcc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002bd0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bdc:	4b16      	ldr	r3, [pc, #88]	; (8002c38 <SystemInit+0x94>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bee:	f023 0305 	bic.w	r3, r3, #5
 8002bf2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c02:	f023 0301 	bic.w	r3, r3, #1
 8002c06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0e:	4a0b      	ldr	r2, [pc, #44]	; (8002c3c <SystemInit+0x98>)
 8002c10:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c20:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c26:	2200      	movs	r2, #0
 8002c28:	619a      	str	r2, [r3, #24]
}
 8002c2a:	bf00      	nop
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000ed00 	.word	0xe000ed00
 8002c38:	faf6fefb 	.word	0xfaf6fefb
 8002c3c:	22041000 	.word	0x22041000

08002c40 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002c40:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c42:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c44:	3304      	adds	r3, #4

08002c46 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c46:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c48:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002c4a:	d3f9      	bcc.n	8002c40 <CopyDataInit>
  bx lr
 8002c4c:	4770      	bx	lr

08002c4e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002c4e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002c50:	3004      	adds	r0, #4

08002c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002c52:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002c54:	d3fb      	bcc.n	8002c4e <FillZerobss>
  bx lr
 8002c56:	4770      	bx	lr

08002c58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c58:	480c      	ldr	r0, [pc, #48]	; (8002c8c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002c5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c5c:	f7ff ffa2 	bl	8002ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002c60:	480b      	ldr	r0, [pc, #44]	; (8002c90 <LoopForever+0x8>)
 8002c62:	490c      	ldr	r1, [pc, #48]	; (8002c94 <LoopForever+0xc>)
 8002c64:	4a0c      	ldr	r2, [pc, #48]	; (8002c98 <LoopForever+0x10>)
 8002c66:	2300      	movs	r3, #0
 8002c68:	f7ff ffed 	bl	8002c46 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002c6c:	480b      	ldr	r0, [pc, #44]	; (8002c9c <LoopForever+0x14>)
 8002c6e:	490c      	ldr	r1, [pc, #48]	; (8002ca0 <LoopForever+0x18>)
 8002c70:	2300      	movs	r3, #0
 8002c72:	f7ff ffee 	bl	8002c52 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002c76:	480b      	ldr	r0, [pc, #44]	; (8002ca4 <LoopForever+0x1c>)
 8002c78:	490b      	ldr	r1, [pc, #44]	; (8002ca8 <LoopForever+0x20>)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f7ff ffe9 	bl	8002c52 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c80:	f011 fb38 	bl	80142f4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002c84:	f7fe fd9a 	bl	80017bc <main>

08002c88 <LoopForever>:

LoopForever:
  b LoopForever
 8002c88:	e7fe      	b.n	8002c88 <LoopForever>
 8002c8a:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002c8c:	20008000 	.word	0x20008000
  INIT_DATA _sdata, _edata, _sidata
 8002c90:	20000004 	.word	0x20000004
 8002c94:	200001d0 	.word	0x200001d0
 8002c98:	08017d20 	.word	0x08017d20
  INIT_BSS _sbss, _ebss
 8002c9c:	20000220 	.word	0x20000220
 8002ca0:	2000287c 	.word	0x2000287c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002ca4:	200301e4 	.word	0x200301e4
 8002ca8:	20030a67 	.word	0x20030a67

08002cac <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cac:	e7fe      	b.n	8002cac <ADC1_IRQHandler>
	...

08002cb0 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	4a04      	ldr	r2, [pc, #16]	; (8002ccc <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	6053      	str	r3, [r2, #4]
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	e0042000 	.word	0xe0042000

08002cd0 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	4a04      	ldr	r2, [pc, #16]	; (8002cec <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002cda:	f043 0302 	orr.w	r3, r3, #2
 8002cde:	6053      	str	r3, [r2, #4]
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	e0042000 	.word	0xe0042000

08002cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <HAL_Init+0x3c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a0b      	ldr	r2, [pc, #44]	; (8002d2c <HAL_Init+0x3c>)
 8002d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d04:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d06:	2003      	movs	r0, #3
 8002d08:	f001 fbf2 	bl	80044f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d0c:	200f      	movs	r0, #15
 8002d0e:	f000 f80f 	bl	8002d30 <HAL_InitTick>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	71fb      	strb	r3, [r7, #7]
 8002d1c:	e001      	b.n	8002d22 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d1e:	f7ff fcbb 	bl	8002698 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d22:	79fb      	ldrb	r3, [r7, #7]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	58004000 	.word	0x58004000

08002d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002d3c:	4b17      	ldr	r3, [pc, #92]	; (8002d9c <HAL_InitTick+0x6c>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d024      	beq.n	8002d8e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002d44:	f005 ff82 	bl	8008c4c <HAL_RCC_GetHCLKFreq>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <HAL_InitTick+0x6c>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d54:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f001 fbfa 	bl	8004556 <HAL_SYSTICK_Config>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10f      	bne.n	8002d88 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b0f      	cmp	r3, #15
 8002d6c:	d809      	bhi.n	8002d82 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	f04f 30ff 	mov.w	r0, #4294967295
 8002d76:	f001 fbc6 	bl	8004506 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d7a:	4a09      	ldr	r2, [pc, #36]	; (8002da0 <HAL_InitTick+0x70>)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	e007      	b.n	8002d92 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
 8002d86:	e004      	b.n	8002d92 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
 8002d8c:	e001      	b.n	8002d92 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	20000014 	.word	0x20000014
 8002da0:	20000010 	.word	0x20000010

08002da4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <HAL_IncTick+0x20>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_IncTick+0x24>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4413      	add	r3, r2
 8002db4:	4a04      	ldr	r2, [pc, #16]	; (8002dc8 <HAL_IncTick+0x24>)
 8002db6:	6013      	str	r3, [r2, #0]
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	20000014 	.word	0x20000014
 8002dc8:	200008b0 	.word	0x200008b0

08002dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return uwTick;
 8002dd0:	4b03      	ldr	r3, [pc, #12]	; (8002de0 <HAL_GetTick+0x14>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	200008b0 	.word	0x200008b0

08002de4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002de8:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <HAL_GetTickPrio+0x14>)
 8002dea:	681b      	ldr	r3, [r3, #0]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	20000010 	.word	0x20000010

08002dfc <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002e00:	4b03      	ldr	r3, [pc, #12]	; (8002e10 <HAL_GetTickFreq+0x14>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	20000014 	.word	0x20000014

08002e14 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002e18:	f7ff ff4a 	bl	8002cb0 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002e1c:	bf00      	nop
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002e24:	f7ff ff54 	bl	8002cd0 <LL_DBGMCU_EnableDBGStopMode>
}
 8002e28:	bf00      	nop
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	431a      	orrs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	3360      	adds	r3, #96	; 0x60
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <LL_ADC_SetOffset+0x44>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002ecc:	bf00      	nop
 8002ece:	371c      	adds	r7, #28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	03fff000 	.word	0x03fff000

08002edc <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3360      	adds	r3, #96	; 0x60
 8002eea:	461a      	mov	r2, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	3360      	adds	r3, #96	; 0x60
 8002f18:	461a      	mov	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002f32:	bf00      	nop
 8002f34:	371c      	adds	r7, #28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f56:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	3330      	adds	r3, #48	; 0x30
 8002f74:	461a      	mov	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	0a1b      	lsrs	r3, r3, #8
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	f003 030c 	and.w	r3, r3, #12
 8002f80:	4413      	add	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	211f      	movs	r1, #31
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	401a      	ands	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	0e9b      	lsrs	r3, r3, #26
 8002f9c:	f003 011f 	and.w	r1, r3, #31
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f003 031f 	and.w	r3, r3, #31
 8002fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002faa:	431a      	orrs	r2, r3
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002fb0:	bf00      	nop
 8002fb2:	371c      	adds	r7, #28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	3314      	adds	r3, #20
 8002fcc:	461a      	mov	r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	0e5b      	lsrs	r3, r3, #25
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	4413      	add	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	0d1b      	lsrs	r3, r3, #20
 8002fe4:	f003 031f 	and.w	r3, r3, #31
 8002fe8:	2107      	movs	r1, #7
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	401a      	ands	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	0d1b      	lsrs	r3, r3, #20
 8002ff6:	f003 031f 	and.w	r3, r3, #31
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8003000:	431a      	orrs	r2, r3
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8003006:	bf00      	nop
 8003008:	371c      	adds	r7, #28
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
	...

08003014 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302c:	43db      	mvns	r3, r3
 800302e:	401a      	ands	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f003 0318 	and.w	r3, r3, #24
 8003036:	4908      	ldr	r1, [pc, #32]	; (8003058 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003038:	40d9      	lsrs	r1, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	400b      	ands	r3, r1
 800303e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003042:	431a      	orrs	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800304a:	bf00      	nop
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	0007ffff 	.word	0x0007ffff

0800305c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800306c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6093      	str	r3, [r2, #8]
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003094:	d101      	bne.n	800309a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80030b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030e4:	d101      	bne.n	80030ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003108:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800310c:	f043 0201 	orr.w	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003130:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003134:	f043 0202 	orr.w	r2, r3, #2
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <LL_ADC_IsEnabled+0x18>
 800315c:	2301      	movs	r3, #1
 800315e:	e000      	b.n	8003162 <LL_ADC_IsEnabled+0x1a>
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b02      	cmp	r3, #2
 8003180:	d101      	bne.n	8003186 <LL_ADC_IsDisableOngoing+0x18>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <LL_ADC_IsDisableOngoing+0x1a>
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031a8:	f043 0204 	orr.w	r2, r3, #4
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031d0:	f043 0210 	orr.w	r2, r3, #16
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d101      	bne.n	80031fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800321a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800321e:	f043 0220 	orr.w	r2, r3, #32
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b08      	cmp	r3, #8
 8003244:	d101      	bne.n	800324a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8003264:	2300      	movs	r3, #0
 8003266:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003268:	2300      	movs	r3, #0
 800326a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e12e      	b.n	80034d4 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003280:	2b00      	cmp	r3, #0
 8003282:	d109      	bne.n	8003298 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7ff fa17 	bl	80026b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff feef 	bl	8003080 <LL_ADC_IsDeepPowerDownEnabled>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d004      	beq.n	80032b2 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff fed5 	bl	800305c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff ff0a 	bl	80030d0 <LL_ADC_IsInternalRegulatorEnabled>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d115      	bne.n	80032ee <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff feee 	bl	80030a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032cc:	4b83      	ldr	r3, [pc, #524]	; (80034dc <HAL_ADC_Init+0x284>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	099b      	lsrs	r3, r3, #6
 80032d2:	4a83      	ldr	r2, [pc, #524]	; (80034e0 <HAL_ADC_Init+0x288>)
 80032d4:	fba2 2303 	umull	r2, r3, r2, r3
 80032d8:	099b      	lsrs	r3, r3, #6
 80032da:	3301      	adds	r3, #1
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80032e0:	e002      	b.n	80032e8 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	3b01      	subs	r3, #1
 80032e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f9      	bne.n	80032e2 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff feec 	bl	80030d0 <LL_ADC_IsInternalRegulatorEnabled>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10d      	bne.n	800331a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003302:	f043 0210 	orr.w	r2, r3, #16
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330e:	f043 0201 	orr.w	r2, r3, #1
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff ff60 	bl	80031e4 <LL_ADC_REG_IsConversionOngoing>
 8003324:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	2b00      	cmp	r3, #0
 8003330:	f040 80c7 	bne.w	80034c2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f040 80c3 	bne.w	80034c2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003340:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003344:	f043 0202 	orr.w	r2, r3, #2
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff fef9 	bl	8003148 <LL_ADC_IsEnabled>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10b      	bne.n	8003374 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800335c:	4861      	ldr	r0, [pc, #388]	; (80034e4 <HAL_ADC_Init+0x28c>)
 800335e:	f7ff fef3 	bl	8003148 <LL_ADC_IsEnabled>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d105      	bne.n	8003374 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	4619      	mov	r1, r3
 800336e:	485e      	ldr	r0, [pc, #376]	; (80034e8 <HAL_ADC_Init+0x290>)
 8003370:	f7ff fd5c 	bl	8002e2c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	7e5b      	ldrb	r3, [r3, #25]
 8003378:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800337e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003384:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800338a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003392:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8003394:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d106      	bne.n	80033b4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	3b01      	subs	r3, #1
 80033ac:	045b      	lsls	r3, r3, #17
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d009      	beq.n	80033d0 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	4b45      	ldr	r3, [pc, #276]	; (80034ec <HAL_ADC_Init+0x294>)
 80033d8:	4013      	ands	r3, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6812      	ldr	r2, [r2, #0]
 80033de:	69b9      	ldr	r1, [r7, #24]
 80033e0:	430b      	orrs	r3, r1
 80033e2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff fefb 	bl	80031e4 <LL_ADC_REG_IsConversionOngoing>
 80033ee:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff ff1c 	bl	8003232 <LL_ADC_INJ_IsConversionOngoing>
 80033fa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d13d      	bne.n	800347e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d13a      	bne.n	800347e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800340c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003414:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003424:	f023 0302 	bic.w	r3, r3, #2
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6812      	ldr	r2, [r2, #0]
 800342c:	69b9      	ldr	r1, [r7, #24]
 800342e:	430b      	orrs	r3, r1
 8003430:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003438:	2b01      	cmp	r3, #1
 800343a:	d118      	bne.n	800346e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003446:	f023 0304 	bic.w	r3, r3, #4
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003452:	4311      	orrs	r1, r2
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003458:	4311      	orrs	r1, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800345e:	430a      	orrs	r2, r1
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	611a      	str	r2, [r3, #16]
 800346c:	e007      	b.n	800347e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0201 	bic.w	r2, r2, #1
 800347c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d10c      	bne.n	80034a0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	f023 010f 	bic.w	r1, r3, #15
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	1e5a      	subs	r2, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	631a      	str	r2, [r3, #48]	; 0x30
 800349e:	e007      	b.n	80034b0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 020f 	bic.w	r2, r2, #15
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b4:	f023 0303 	bic.w	r3, r3, #3
 80034b8:	f043 0201 	orr.w	r2, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	655a      	str	r2, [r3, #84]	; 0x54
 80034c0:	e007      	b.n	80034d2 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c6:	f043 0210 	orr.w	r2, r3, #16
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3720      	adds	r7, #32
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	2000000c 	.word	0x2000000c
 80034e0:	053e2d63 	.word	0x053e2d63
 80034e4:	50040000 	.word	0x50040000
 80034e8:	50040300 	.word	0x50040300
 80034ec:	fff0c007 	.word	0xfff0c007

080034f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff fe6f 	bl	80031e4 <LL_ADC_REG_IsConversionOngoing>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d167      	bne.n	80035dc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003512:	2b01      	cmp	r3, #1
 8003514:	d101      	bne.n	800351a <HAL_ADC_Start_DMA+0x2a>
 8003516:	2302      	movs	r3, #2
 8003518:	e063      	b.n	80035e2 <HAL_ADC_Start_DMA+0xf2>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 fd6a 	bl	8003ffc <ADC_Enable>
 8003528:	4603      	mov	r3, r0
 800352a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800352c:	7dfb      	ldrb	r3, [r7, #23]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d14f      	bne.n	80035d2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003536:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800353a:	f023 0301 	bic.w	r3, r3, #1
 800353e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d006      	beq.n	8003560 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003556:	f023 0206 	bic.w	r2, r3, #6
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	659a      	str	r2, [r3, #88]	; 0x58
 800355e:	e002      	b.n	8003566 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356a:	4a20      	ldr	r2, [pc, #128]	; (80035ec <HAL_ADC_Start_DMA+0xfc>)
 800356c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003572:	4a1f      	ldr	r2, [pc, #124]	; (80035f0 <HAL_ADC_Start_DMA+0x100>)
 8003574:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357a:	4a1e      	ldr	r2, [pc, #120]	; (80035f4 <HAL_ADC_Start_DMA+0x104>)
 800357c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	221c      	movs	r2, #28
 8003584:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0210 	orr.w	r2, r2, #16
 800359c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f042 0201 	orr.w	r2, r2, #1
 80035ac:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3340      	adds	r3, #64	; 0x40
 80035b8:	4619      	mov	r1, r3
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f001 f89b 	bl	80046f8 <HAL_DMA_Start_IT>
 80035c2:	4603      	mov	r3, r0
 80035c4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff fde2 	bl	8003194 <LL_ADC_REG_StartConversion>
 80035d0:	e006      	b.n	80035e0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80035da:	e001      	b.n	80035e0 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80035dc:	2302      	movs	r3, #2
 80035de:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80035e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	080041af 	.word	0x080041af
 80035f0:	08004287 	.word	0x08004287
 80035f4:	080042a3 	.word	0x080042a3

080035f8 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_ADC_Stop_DMA+0x16>
 800360a:	2302      	movs	r3, #2
 800360c:	e051      	b.n	80036b2 <HAL_ADC_Stop_DMA+0xba>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
#if defined(ADC_SUPPORT_2_5_MSPS)
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003616:	2103      	movs	r1, #3
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 fc33 	bl	8003e84 <ADC_ConversionStop>
 800361e:	4603      	mov	r3, r0
 8003620:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d13f      	bne.n	80036a8 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0201 	bic.w	r2, r2, #1
 8003636:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d10f      	bne.n	8003666 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800364a:	4618      	mov	r0, r3
 800364c:	f001 f8cf 	bl	80047ee <HAL_DMA_Abort>
 8003650:	4603      	mov	r3, r0
 8003652:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0210 	bic.w	r2, r2, #16
 8003674:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003676:	7bfb      	ldrb	r3, [r7, #15]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d105      	bne.n	8003688 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 fd37 	bl	80040f0 <ADC_Disable>
 8003682:	4603      	mov	r3, r0
 8003684:	73fb      	strb	r3, [r7, #15]
 8003686:	e002      	b.n	800368e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 fd31 	bl	80040f0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d109      	bne.n	80036a8 <HAL_ADC_Stop_DMA+0xb0>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003698:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800369c:	f023 0301 	bic.w	r3, r3, #1
 80036a0:	f043 0201 	orr.w	r2, r3, #1
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
	...

080036f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b0b6      	sub	sp, #216	; 0xd8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003702:	2300      	movs	r3, #0
 8003704:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003712:	2b01      	cmp	r3, #1
 8003714:	d101      	bne.n	800371a <HAL_ADC_ConfigChannel+0x22>
 8003716:	2302      	movs	r3, #2
 8003718:	e39f      	b.n	8003e5a <HAL_ADC_ConfigChannel+0x762>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff fd5c 	bl	80031e4 <LL_ADC_REG_IsConversionOngoing>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	f040 8384 	bne.w	8003e3c <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6818      	ldr	r0, [r3, #0]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	6859      	ldr	r1, [r3, #4]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	f7ff fc0f 	bl	8002f64 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff fd4a 	bl	80031e4 <LL_ADC_REG_IsConversionOngoing>
 8003750:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff fd6a 	bl	8003232 <LL_ADC_INJ_IsConversionOngoing>
 800375e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003762:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003766:	2b00      	cmp	r3, #0
 8003768:	f040 81a6 	bne.w	8003ab8 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800376c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003770:	2b00      	cmp	r3, #0
 8003772:	f040 81a1 	bne.w	8003ab8 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	6819      	ldr	r1, [r3, #0]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	461a      	mov	r2, r3
 8003784:	f7ff fc1a 	bl	8002fbc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	695a      	ldr	r2, [r3, #20]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	08db      	lsrs	r3, r3, #3
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d00a      	beq.n	80037c0 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6818      	ldr	r0, [r3, #0]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	6919      	ldr	r1, [r3, #16]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80037ba:	f7ff fb6b 	bl	8002e94 <LL_ADC_SetOffset>
 80037be:	e17b      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2100      	movs	r1, #0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff fb88 	bl	8002edc <LL_ADC_GetOffsetChannel>
 80037cc:	4603      	mov	r3, r0
 80037ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10a      	bne.n	80037ec <HAL_ADC_ConfigChannel+0xf4>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2100      	movs	r1, #0
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff fb7d 	bl	8002edc <LL_ADC_GetOffsetChannel>
 80037e2:	4603      	mov	r3, r0
 80037e4:	0e9b      	lsrs	r3, r3, #26
 80037e6:	f003 021f 	and.w	r2, r3, #31
 80037ea:	e01e      	b.n	800382a <HAL_ADC_ConfigChannel+0x132>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2100      	movs	r1, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff fb72 	bl	8002edc <LL_ADC_GetOffsetChannel>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003802:	fa93 f3a3 	rbit	r3, r3
 8003806:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 800380a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800380e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8003812:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 800381a:	2320      	movs	r3, #32
 800381c:	e004      	b.n	8003828 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 800381e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003822:	fab3 f383 	clz	r3, r3
 8003826:	b2db      	uxtb	r3, r3
 8003828:	461a      	mov	r2, r3
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003832:	2b00      	cmp	r3, #0
 8003834:	d105      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x14a>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	0e9b      	lsrs	r3, r3, #26
 800383c:	f003 031f 	and.w	r3, r3, #31
 8003840:	e018      	b.n	8003874 <HAL_ADC_ConfigChannel+0x17c>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800384e:	fa93 f3a3 	rbit	r3, r3
 8003852:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003856:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800385a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800385e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8003866:	2320      	movs	r3, #32
 8003868:	e004      	b.n	8003874 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800386a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800386e:	fab3 f383 	clz	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	429a      	cmp	r2, r3
 8003876:	d106      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2200      	movs	r2, #0
 800387e:	2100      	movs	r1, #0
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff fb41 	bl	8002f08 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2101      	movs	r1, #1
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fb25 	bl	8002edc <LL_ADC_GetOffsetChannel>
 8003892:	4603      	mov	r3, r0
 8003894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10a      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x1ba>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2101      	movs	r1, #1
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff fb1a 	bl	8002edc <LL_ADC_GetOffsetChannel>
 80038a8:	4603      	mov	r3, r0
 80038aa:	0e9b      	lsrs	r3, r3, #26
 80038ac:	f003 021f 	and.w	r2, r3, #31
 80038b0:	e01e      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x1f8>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2101      	movs	r1, #1
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff fb0f 	bl	8002edc <LL_ADC_GetOffsetChannel>
 80038be:	4603      	mov	r3, r0
 80038c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80038c8:	fa93 f3a3 	rbit	r3, r3
 80038cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80038d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80038d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 80038e0:	2320      	movs	r3, #32
 80038e2:	e004      	b.n	80038ee <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 80038e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80038e8:	fab3 f383 	clz	r3, r3
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	461a      	mov	r2, r3
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d105      	bne.n	8003908 <HAL_ADC_ConfigChannel+0x210>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	0e9b      	lsrs	r3, r3, #26
 8003902:	f003 031f 	and.w	r3, r3, #31
 8003906:	e018      	b.n	800393a <HAL_ADC_ConfigChannel+0x242>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003910:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800391c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003920:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003924:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 800392c:	2320      	movs	r3, #32
 800392e:	e004      	b.n	800393a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8003930:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003934:	fab3 f383 	clz	r3, r3
 8003938:	b2db      	uxtb	r3, r3
 800393a:	429a      	cmp	r2, r3
 800393c:	d106      	bne.n	800394c <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2200      	movs	r2, #0
 8003944:	2101      	movs	r1, #1
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff fade 	bl	8002f08 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2102      	movs	r1, #2
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff fac2 	bl	8002edc <LL_ADC_GetOffsetChannel>
 8003958:	4603      	mov	r3, r0
 800395a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10a      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x280>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2102      	movs	r1, #2
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff fab7 	bl	8002edc <LL_ADC_GetOffsetChannel>
 800396e:	4603      	mov	r3, r0
 8003970:	0e9b      	lsrs	r3, r3, #26
 8003972:	f003 021f 	and.w	r2, r3, #31
 8003976:	e01e      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x2be>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2102      	movs	r1, #2
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff faac 	bl	8002edc <LL_ADC_GetOffsetChannel>
 8003984:	4603      	mov	r3, r0
 8003986:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800398e:	fa93 f3a3 	rbit	r3, r3
 8003992:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003996:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800399a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800399e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80039a6:	2320      	movs	r3, #32
 80039a8:	e004      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80039aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039ae:	fab3 f383 	clz	r3, r3
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d105      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x2d6>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	0e9b      	lsrs	r3, r3, #26
 80039c8:	f003 031f 	and.w	r3, r3, #31
 80039cc:	e016      	b.n	80039fc <HAL_ADC_ConfigChannel+0x304>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039da:	fa93 f3a3 	rbit	r3, r3
 80039de:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80039e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80039e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 80039ee:	2320      	movs	r3, #32
 80039f0:	e004      	b.n	80039fc <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80039f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039f6:	fab3 f383 	clz	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d106      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2200      	movs	r2, #0
 8003a06:	2102      	movs	r1, #2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fa7d 	bl	8002f08 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2103      	movs	r1, #3
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fa61 	bl	8002edc <LL_ADC_GetOffsetChannel>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x342>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2103      	movs	r1, #3
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff fa56 	bl	8002edc <LL_ADC_GetOffsetChannel>
 8003a30:	4603      	mov	r3, r0
 8003a32:	0e9b      	lsrs	r3, r3, #26
 8003a34:	f003 021f 	and.w	r2, r3, #31
 8003a38:	e017      	b.n	8003a6a <HAL_ADC_ConfigChannel+0x372>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2103      	movs	r1, #3
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff fa4b 	bl	8002edc <LL_ADC_GetOffsetChannel>
 8003a46:	4603      	mov	r3, r0
 8003a48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a4c:	fa93 f3a3 	rbit	r3, r3
 8003a50:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003a52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a54:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003a56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8003a5c:	2320      	movs	r3, #32
 8003a5e:	e003      	b.n	8003a68 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8003a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a62:	fab3 f383 	clz	r3, r3
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	461a      	mov	r2, r3
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d105      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x38a>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	0e9b      	lsrs	r3, r3, #26
 8003a7c:	f003 031f 	and.w	r3, r3, #31
 8003a80:	e011      	b.n	8003aa6 <HAL_ADC_ConfigChannel+0x3ae>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a8a:	fa93 f3a3 	rbit	r3, r3
 8003a8e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003a90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a92:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8003a9a:	2320      	movs	r3, #32
 8003a9c:	e003      	b.n	8003aa6 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8003a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa0:	fab3 f383 	clz	r3, r3
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d106      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2103      	movs	r1, #3
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff fa28 	bl	8002f08 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff fb43 	bl	8003148 <LL_ADC_IsEnabled>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f040 81c2 	bne.w	8003e4e <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	6819      	ldr	r1, [r3, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f7ff fa9c 	bl	8003014 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	4a8e      	ldr	r2, [pc, #568]	; (8003d1c <HAL_ADC_ConfigChannel+0x624>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	f040 8130 	bne.w	8003d48 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10b      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x418>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	0e9b      	lsrs	r3, r3, #26
 8003afe:	3301      	adds	r3, #1
 8003b00:	f003 031f 	and.w	r3, r3, #31
 8003b04:	2b09      	cmp	r3, #9
 8003b06:	bf94      	ite	ls
 8003b08:	2301      	movls	r3, #1
 8003b0a:	2300      	movhi	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	e019      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x44c>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b18:	fa93 f3a3 	rbit	r3, r3
 8003b1c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003b1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b20:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003b22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8003b28:	2320      	movs	r3, #32
 8003b2a:	e003      	b.n	8003b34 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8003b2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b2e:	fab3 f383 	clz	r3, r3
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	3301      	adds	r3, #1
 8003b36:	f003 031f 	and.w	r3, r3, #31
 8003b3a:	2b09      	cmp	r3, #9
 8003b3c:	bf94      	ite	ls
 8003b3e:	2301      	movls	r3, #1
 8003b40:	2300      	movhi	r3, #0
 8003b42:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d079      	beq.n	8003c3c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d107      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x46c>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	0e9b      	lsrs	r3, r3, #26
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	069b      	lsls	r3, r3, #26
 8003b5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b62:	e015      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x498>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b6c:	fa93 f3a3 	rbit	r3, r3
 8003b70:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b74:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003b7c:	2320      	movs	r3, #32
 8003b7e:	e003      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b82:	fab3 f383 	clz	r3, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	3301      	adds	r3, #1
 8003b8a:	069b      	lsls	r3, r3, #26
 8003b8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d109      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x4b8>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	0e9b      	lsrs	r3, r3, #26
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	2101      	movs	r1, #1
 8003baa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bae:	e017      	b.n	8003be0 <HAL_ADC_ConfigChannel+0x4e8>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bb8:	fa93 f3a3 	rbit	r3, r3
 8003bbc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bc0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8003bc8:	2320      	movs	r3, #32
 8003bca:	e003      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bce:	fab3 f383 	clz	r3, r3
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	f003 031f 	and.w	r3, r3, #31
 8003bda:	2101      	movs	r1, #1
 8003bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003be0:	ea42 0103 	orr.w	r1, r2, r3
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10a      	bne.n	8003c06 <HAL_ADC_ConfigChannel+0x50e>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	0e9b      	lsrs	r3, r3, #26
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	f003 021f 	and.w	r2, r3, #31
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	4413      	add	r3, r2
 8003c02:	051b      	lsls	r3, r3, #20
 8003c04:	e018      	b.n	8003c38 <HAL_ADC_ConfigChannel+0x540>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0e:	fa93 f3a3 	rbit	r3, r3
 8003c12:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003c1e:	2320      	movs	r3, #32
 8003c20:	e003      	b.n	8003c2a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c24:	fab3 f383 	clz	r3, r3
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	f003 021f 	and.w	r2, r3, #31
 8003c30:	4613      	mov	r3, r2
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	4413      	add	r3, r2
 8003c36:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	e080      	b.n	8003d3e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d107      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x560>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	0e9b      	lsrs	r3, r3, #26
 8003c4e:	3301      	adds	r3, #1
 8003c50:	069b      	lsls	r3, r3, #26
 8003c52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c56:	e015      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x58c>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	fa93 f3a3 	rbit	r3, r3
 8003c64:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c68:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8003c70:	2320      	movs	r3, #32
 8003c72:	e003      	b.n	8003c7c <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8003c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c76:	fab3 f383 	clz	r3, r3
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	069b      	lsls	r3, r3, #26
 8003c80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d109      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x5ac>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	0e9b      	lsrs	r3, r3, #26
 8003c96:	3301      	adds	r3, #1
 8003c98:	f003 031f 	and.w	r3, r3, #31
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca2:	e017      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0x5dc>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	fa93 f3a3 	rbit	r3, r3
 8003cb0:	61fb      	str	r3, [r7, #28]
  return result;
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8003cbc:	2320      	movs	r3, #32
 8003cbe:	e003      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	fab3 f383 	clz	r3, r3
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	3301      	adds	r3, #1
 8003cca:	f003 031f 	and.w	r3, r3, #31
 8003cce:	2101      	movs	r1, #1
 8003cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd4:	ea42 0103 	orr.w	r1, r2, r3
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10d      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x608>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	0e9b      	lsrs	r3, r3, #26
 8003cea:	3301      	adds	r3, #1
 8003cec:	f003 021f 	and.w	r2, r3, #31
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3b1e      	subs	r3, #30
 8003cf8:	051b      	lsls	r3, r3, #20
 8003cfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003cfe:	e01d      	b.n	8003d3c <HAL_ADC_ConfigChannel+0x644>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	fa93 f3a3 	rbit	r3, r3
 8003d0c:	613b      	str	r3, [r7, #16]
  return result;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d103      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8003d18:	2320      	movs	r3, #32
 8003d1a:	e005      	b.n	8003d28 <HAL_ADC_ConfigChannel+0x630>
 8003d1c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	fab3 f383 	clz	r3, r3
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	3301      	adds	r3, #1
 8003d2a:	f003 021f 	and.w	r2, r3, #31
 8003d2e:	4613      	mov	r3, r2
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	4413      	add	r3, r2
 8003d34:	3b1e      	subs	r3, #30
 8003d36:	051b      	lsls	r3, r3, #20
 8003d38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	6892      	ldr	r2, [r2, #8]
 8003d42:	4619      	mov	r1, r3
 8003d44:	f7ff f93a 	bl	8002fbc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	4b45      	ldr	r3, [pc, #276]	; (8003e64 <HAL_ADC_ConfigChannel+0x76c>)
 8003d4e:	4013      	ands	r3, r2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d07c      	beq.n	8003e4e <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d54:	4844      	ldr	r0, [pc, #272]	; (8003e68 <HAL_ADC_ConfigChannel+0x770>)
 8003d56:	f7ff f88f 	bl	8002e78 <LL_ADC_GetCommonPathInternalCh>
 8003d5a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d5e:	4843      	ldr	r0, [pc, #268]	; (8003e6c <HAL_ADC_ConfigChannel+0x774>)
 8003d60:	f7ff f9f2 	bl	8003148 <LL_ADC_IsEnabled>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d15e      	bne.n	8003e28 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a40      	ldr	r2, [pc, #256]	; (8003e70 <HAL_ADC_ConfigChannel+0x778>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d127      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x6cc>
 8003d74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d121      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a39      	ldr	r2, [pc, #228]	; (8003e6c <HAL_ADC_ConfigChannel+0x774>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d161      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003d8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d92:	4619      	mov	r1, r3
 8003d94:	4834      	ldr	r0, [pc, #208]	; (8003e68 <HAL_ADC_ConfigChannel+0x770>)
 8003d96:	f7ff f85c 	bl	8002e52 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d9a:	4b36      	ldr	r3, [pc, #216]	; (8003e74 <HAL_ADC_ConfigChannel+0x77c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	099b      	lsrs	r3, r3, #6
 8003da0:	4a35      	ldr	r2, [pc, #212]	; (8003e78 <HAL_ADC_ConfigChannel+0x780>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	099b      	lsrs	r3, r3, #6
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	4613      	mov	r3, r2
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	4413      	add	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003db4:	e002      	b.n	8003dbc <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f9      	bne.n	8003db6 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dc2:	e044      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a2c      	ldr	r2, [pc, #176]	; (8003e7c <HAL_ADC_ConfigChannel+0x784>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d113      	bne.n	8003df6 <HAL_ADC_ConfigChannel+0x6fe>
 8003dce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10d      	bne.n	8003df6 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a23      	ldr	r2, [pc, #140]	; (8003e6c <HAL_ADC_ConfigChannel+0x774>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d134      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003de4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003de8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dec:	4619      	mov	r1, r3
 8003dee:	481e      	ldr	r0, [pc, #120]	; (8003e68 <HAL_ADC_ConfigChannel+0x770>)
 8003df0:	f7ff f82f 	bl	8002e52 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003df4:	e02b      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a21      	ldr	r2, [pc, #132]	; (8003e80 <HAL_ADC_ConfigChannel+0x788>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d126      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x756>
 8003e00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d120      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a16      	ldr	r2, [pc, #88]	; (8003e6c <HAL_ADC_ConfigChannel+0x774>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d11b      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003e16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4811      	ldr	r0, [pc, #68]	; (8003e68 <HAL_ADC_ConfigChannel+0x770>)
 8003e22:	f7ff f816 	bl	8002e52 <LL_ADC_SetCommonPathInternalCh>
 8003e26:	e012      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2c:	f043 0220 	orr.w	r2, r3, #32
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003e3a:	e008      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e40:	f043 0220 	orr.w	r2, r3, #32
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8003e56:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	37d8      	adds	r7, #216	; 0xd8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	80080000 	.word	0x80080000
 8003e68:	50040300 	.word	0x50040300
 8003e6c:	50040000 	.word	0x50040000
 8003e70:	c7520000 	.word	0xc7520000
 8003e74:	2000000c 	.word	0x2000000c
 8003e78:	053e2d63 	.word	0x053e2d63
 8003e7c:	cb840000 	.word	0xcb840000
 8003e80:	80000001 	.word	0x80000001

08003e84 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff f9a2 	bl	80031e4 <LL_ADC_REG_IsConversionOngoing>
 8003ea0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff f9c3 	bl	8003232 <LL_ADC_INJ_IsConversionOngoing>
 8003eac:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d103      	bne.n	8003ebc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 8098 	beq.w	8003fec <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d02a      	beq.n	8003f20 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	7e5b      	ldrb	r3, [r3, #25]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d126      	bne.n	8003f20 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	7e1b      	ldrb	r3, [r3, #24]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d122      	bne.n	8003f20 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003eda:	2301      	movs	r3, #1
 8003edc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003ede:	e014      	b.n	8003f0a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	4a45      	ldr	r2, [pc, #276]	; (8003ff8 <ADC_ConversionStop+0x174>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d90d      	bls.n	8003f04 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eec:	f043 0210 	orr.w	r2, r3, #16
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef8:	f043 0201 	orr.w	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e074      	b.n	8003fee <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	3301      	adds	r3, #1
 8003f08:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b40      	cmp	r3, #64	; 0x40
 8003f16:	d1e3      	bne.n	8003ee0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2240      	movs	r2, #64	; 0x40
 8003f1e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d014      	beq.n	8003f50 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff f95a 	bl	80031e4 <LL_ADC_REG_IsConversionOngoing>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00c      	beq.n	8003f50 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff f917 	bl	800316e <LL_ADC_IsDisableOngoing>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d104      	bne.n	8003f50 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff f936 	bl	80031bc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d014      	beq.n	8003f80 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff f969 	bl	8003232 <LL_ADC_INJ_IsConversionOngoing>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00c      	beq.n	8003f80 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff f8ff 	bl	800316e <LL_ADC_IsDisableOngoing>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d104      	bne.n	8003f80 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff f945 	bl	800320a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d005      	beq.n	8003f92 <ADC_ConversionStop+0x10e>
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d105      	bne.n	8003f98 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003f8c:	230c      	movs	r3, #12
 8003f8e:	617b      	str	r3, [r7, #20]
        break;
 8003f90:	e005      	b.n	8003f9e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003f92:	2308      	movs	r3, #8
 8003f94:	617b      	str	r3, [r7, #20]
        break;
 8003f96:	e002      	b.n	8003f9e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003f98:	2304      	movs	r3, #4
 8003f9a:	617b      	str	r3, [r7, #20]
        break;
 8003f9c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003f9e:	f7fe ff15 	bl	8002dcc <HAL_GetTick>
 8003fa2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003fa4:	e01b      	b.n	8003fde <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003fa6:	f7fe ff11 	bl	8002dcc <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b05      	cmp	r3, #5
 8003fb2:	d914      	bls.n	8003fde <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00d      	beq.n	8003fde <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc6:	f043 0210 	orr.w	r2, r3, #16
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd2:	f043 0201 	orr.w	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e007      	b.n	8003fee <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1dc      	bne.n	8003fa6 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3720      	adds	r7, #32
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	a33fffff 	.word	0xa33fffff

08003ffc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004004:	2300      	movs	r3, #0
 8004006:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff f89b 	bl	8003148 <LL_ADC_IsEnabled>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d15e      	bne.n	80040d6 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	4b30      	ldr	r3, [pc, #192]	; (80040e0 <ADC_Enable+0xe4>)
 8004020:	4013      	ands	r3, r2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00d      	beq.n	8004042 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402a:	f043 0210 	orr.w	r2, r3, #16
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004036:	f043 0201 	orr.w	r2, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e04a      	b.n	80040d8 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff f856 	bl	80030f8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800404c:	4825      	ldr	r0, [pc, #148]	; (80040e4 <ADC_Enable+0xe8>)
 800404e:	f7fe ff13 	bl	8002e78 <LL_ADC_GetCommonPathInternalCh>
 8004052:	4603      	mov	r3, r0
 8004054:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00f      	beq.n	800407c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800405c:	4b22      	ldr	r3, [pc, #136]	; (80040e8 <ADC_Enable+0xec>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	099b      	lsrs	r3, r3, #6
 8004062:	4a22      	ldr	r2, [pc, #136]	; (80040ec <ADC_Enable+0xf0>)
 8004064:	fba2 2303 	umull	r2, r3, r2, r3
 8004068:	099b      	lsrs	r3, r3, #6
 800406a:	3301      	adds	r3, #1
 800406c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800406e:	e002      	b.n	8004076 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	3b01      	subs	r3, #1
 8004074:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1f9      	bne.n	8004070 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800407c:	f7fe fea6 	bl	8002dcc <HAL_GetTick>
 8004080:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004082:	e021      	b.n	80040c8 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff f85d 	bl	8003148 <LL_ADC_IsEnabled>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d104      	bne.n	800409e <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff f82d 	bl	80030f8 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800409e:	f7fe fe95 	bl	8002dcc <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d90d      	bls.n	80040c8 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b0:	f043 0210 	orr.w	r2, r3, #16
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040bc:	f043 0201 	orr.w	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e007      	b.n	80040d8 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d1d6      	bne.n	8004084 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	8000003f 	.word	0x8000003f
 80040e4:	50040300 	.word	0x50040300
 80040e8:	2000000c 	.word	0x2000000c
 80040ec:	053e2d63 	.word	0x053e2d63

080040f0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff f836 	bl	800316e <LL_ADC_IsDisableOngoing>
 8004102:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff f81d 	bl	8003148 <LL_ADC_IsEnabled>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d047      	beq.n	80041a4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d144      	bne.n	80041a4 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 030d 	and.w	r3, r3, #13
 8004124:	2b01      	cmp	r3, #1
 8004126:	d10c      	bne.n	8004142 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f7fe fff7 	bl	8003120 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2203      	movs	r2, #3
 8004138:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800413a:	f7fe fe47 	bl	8002dcc <HAL_GetTick>
 800413e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004140:	e029      	b.n	8004196 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	f043 0210 	orr.w	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004152:	f043 0201 	orr.w	r2, r3, #1
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e023      	b.n	80041a6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800415e:	f7fe fe35 	bl	8002dcc <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d914      	bls.n	8004196 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00d      	beq.n	8004196 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417e:	f043 0210 	orr.w	r2, r3, #16
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418a:	f043 0201 	orr.w	r2, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e007      	b.n	80041a6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1dc      	bne.n	800415e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d14b      	bne.n	8004260 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d021      	beq.n	8004226 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fe fea9 	bl	8002f3e <LL_ADC_REG_IsTriggerSourceSWStart>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d032      	beq.n	8004258 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d12b      	bne.n	8004258 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004204:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d11f      	bne.n	8004258 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421c:	f043 0201 	orr.w	r2, r3, #1
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	655a      	str	r2, [r3, #84]	; 0x54
 8004224:	e018      	b.n	8004258 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d111      	bne.n	8004258 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004238:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d105      	bne.n	8004258 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004250:	f043 0201 	orr.w	r2, r3, #1
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f7ff fa2e 	bl	80036ba <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800425e:	e00e      	b.n	800427e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f7ff fa38 	bl	80036e2 <HAL_ADC_ErrorCallback>
}
 8004272:	e004      	b.n	800427e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	4798      	blx	r3
}
 800427e:	bf00      	nop
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004292:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f7ff fa1a 	bl	80036ce <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800429a:	bf00      	nop
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c0:	f043 0204 	orr.w	r2, r3, #4
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f7ff fa0a 	bl	80036e2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042ce:	bf00      	nop
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042e8:	4b0c      	ldr	r3, [pc, #48]	; (800431c <__NVIC_SetPriorityGrouping+0x44>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042f4:	4013      	ands	r3, r2
 80042f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800430a:	4a04      	ldr	r2, [pc, #16]	; (800431c <__NVIC_SetPriorityGrouping+0x44>)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	60d3      	str	r3, [r2, #12]
}
 8004310:	bf00      	nop
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	e000ed00 	.word	0xe000ed00

08004320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004324:	4b04      	ldr	r3, [pc, #16]	; (8004338 <__NVIC_GetPriorityGrouping+0x18>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	0a1b      	lsrs	r3, r3, #8
 800432a:	f003 0307 	and.w	r3, r3, #7
}
 800432e:	4618      	mov	r0, r3
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	e000ed00 	.word	0xe000ed00

0800433c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	4603      	mov	r3, r0
 8004344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434a:	2b00      	cmp	r3, #0
 800434c:	db0b      	blt.n	8004366 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	f003 021f 	and.w	r2, r3, #31
 8004354:	4907      	ldr	r1, [pc, #28]	; (8004374 <__NVIC_EnableIRQ+0x38>)
 8004356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435a:	095b      	lsrs	r3, r3, #5
 800435c:	2001      	movs	r0, #1
 800435e:	fa00 f202 	lsl.w	r2, r0, r2
 8004362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	e000e100 	.word	0xe000e100

08004378 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	4603      	mov	r3, r0
 8004380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004386:	2b00      	cmp	r3, #0
 8004388:	db0c      	blt.n	80043a4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	f003 021f 	and.w	r2, r3, #31
 8004390:	4907      	ldr	r1, [pc, #28]	; (80043b0 <__NVIC_SetPendingIRQ+0x38>)
 8004392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	2001      	movs	r0, #1
 800439a:	fa00 f202 	lsl.w	r2, r0, r2
 800439e:	3340      	adds	r3, #64	; 0x40
 80043a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	e000e100 	.word	0xe000e100

080043b4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	4603      	mov	r3, r0
 80043bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	db0c      	blt.n	80043e0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	f003 021f 	and.w	r2, r3, #31
 80043cc:	4907      	ldr	r1, [pc, #28]	; (80043ec <__NVIC_ClearPendingIRQ+0x38>)
 80043ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	2001      	movs	r0, #1
 80043d6:	fa00 f202 	lsl.w	r2, r0, r2
 80043da:	3360      	adds	r3, #96	; 0x60
 80043dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	e000e100 	.word	0xe000e100

080043f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	6039      	str	r1, [r7, #0]
 80043fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004400:	2b00      	cmp	r3, #0
 8004402:	db0a      	blt.n	800441a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	b2da      	uxtb	r2, r3
 8004408:	490c      	ldr	r1, [pc, #48]	; (800443c <__NVIC_SetPriority+0x4c>)
 800440a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440e:	0112      	lsls	r2, r2, #4
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	440b      	add	r3, r1
 8004414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004418:	e00a      	b.n	8004430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	b2da      	uxtb	r2, r3
 800441e:	4908      	ldr	r1, [pc, #32]	; (8004440 <__NVIC_SetPriority+0x50>)
 8004420:	79fb      	ldrb	r3, [r7, #7]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	3b04      	subs	r3, #4
 8004428:	0112      	lsls	r2, r2, #4
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	440b      	add	r3, r1
 800442e:	761a      	strb	r2, [r3, #24]
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	e000e100 	.word	0xe000e100
 8004440:	e000ed00 	.word	0xe000ed00

08004444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004444:	b480      	push	{r7}
 8004446:	b089      	sub	sp, #36	; 0x24
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	f1c3 0307 	rsb	r3, r3, #7
 800445e:	2b04      	cmp	r3, #4
 8004460:	bf28      	it	cs
 8004462:	2304      	movcs	r3, #4
 8004464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	3304      	adds	r3, #4
 800446a:	2b06      	cmp	r3, #6
 800446c:	d902      	bls.n	8004474 <NVIC_EncodePriority+0x30>
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	3b03      	subs	r3, #3
 8004472:	e000      	b.n	8004476 <NVIC_EncodePriority+0x32>
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004478:	f04f 32ff 	mov.w	r2, #4294967295
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43da      	mvns	r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	401a      	ands	r2, r3
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800448c:	f04f 31ff 	mov.w	r1, #4294967295
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	fa01 f303 	lsl.w	r3, r1, r3
 8004496:	43d9      	mvns	r1, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800449c:	4313      	orrs	r3, r2
         );
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3724      	adds	r7, #36	; 0x24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
	...

080044ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044bc:	d301      	bcc.n	80044c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044be:	2301      	movs	r3, #1
 80044c0:	e00f      	b.n	80044e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044c2:	4a0a      	ldr	r2, [pc, #40]	; (80044ec <SysTick_Config+0x40>)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044ca:	210f      	movs	r1, #15
 80044cc:	f04f 30ff 	mov.w	r0, #4294967295
 80044d0:	f7ff ff8e 	bl	80043f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044d4:	4b05      	ldr	r3, [pc, #20]	; (80044ec <SysTick_Config+0x40>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044da:	4b04      	ldr	r3, [pc, #16]	; (80044ec <SysTick_Config+0x40>)
 80044dc:	2207      	movs	r2, #7
 80044de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	e000e010 	.word	0xe000e010

080044f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7ff feed 	bl	80042d8 <__NVIC_SetPriorityGrouping>
}
 80044fe:	bf00      	nop
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b086      	sub	sp, #24
 800450a:	af00      	add	r7, sp, #0
 800450c:	4603      	mov	r3, r0
 800450e:	60b9      	str	r1, [r7, #8]
 8004510:	607a      	str	r2, [r7, #4]
 8004512:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004514:	f7ff ff04 	bl	8004320 <__NVIC_GetPriorityGrouping>
 8004518:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	68b9      	ldr	r1, [r7, #8]
 800451e:	6978      	ldr	r0, [r7, #20]
 8004520:	f7ff ff90 	bl	8004444 <NVIC_EncodePriority>
 8004524:	4602      	mov	r2, r0
 8004526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800452a:	4611      	mov	r1, r2
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff ff5f 	bl	80043f0 <__NVIC_SetPriority>
}
 8004532:	bf00      	nop
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b082      	sub	sp, #8
 800453e:	af00      	add	r7, sp, #0
 8004540:	4603      	mov	r3, r0
 8004542:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff fef7 	bl	800433c <__NVIC_EnableIRQ>
}
 800454e:	bf00      	nop
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b082      	sub	sp, #8
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff ffa4 	bl	80044ac <SysTick_Config>
 8004564:	4603      	mov	r3, r0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b082      	sub	sp, #8
 8004572:	af00      	add	r7, sp, #0
 8004574:	4603      	mov	r3, r0
 8004576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff fefb 	bl	8004378 <__NVIC_SetPendingIRQ>
}
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b082      	sub	sp, #8
 800458e:	af00      	add	r7, sp, #0
 8004590:	4603      	mov	r3, r0
 8004592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff ff0b 	bl	80043b4 <__NVIC_ClearPendingIRQ>
}
 800459e:	bf00      	nop
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e08e      	b.n	80046d8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	4b47      	ldr	r3, [pc, #284]	; (80046e0 <HAL_DMA_Init+0x138>)
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d80f      	bhi.n	80045e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	4b45      	ldr	r3, [pc, #276]	; (80046e4 <HAL_DMA_Init+0x13c>)
 80045ce:	4413      	add	r3, r2
 80045d0:	4a45      	ldr	r2, [pc, #276]	; (80046e8 <HAL_DMA_Init+0x140>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	091b      	lsrs	r3, r3, #4
 80045d8:	009a      	lsls	r2, r3, #2
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a42      	ldr	r2, [pc, #264]	; (80046ec <HAL_DMA_Init+0x144>)
 80045e2:	641a      	str	r2, [r3, #64]	; 0x40
 80045e4:	e00e      	b.n	8004604 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	461a      	mov	r2, r3
 80045ec:	4b40      	ldr	r3, [pc, #256]	; (80046f0 <HAL_DMA_Init+0x148>)
 80045ee:	4413      	add	r3, r2
 80045f0:	4a3d      	ldr	r2, [pc, #244]	; (80046e8 <HAL_DMA_Init+0x140>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	091b      	lsrs	r3, r3, #4
 80045f8:	009a      	lsls	r2, r3, #2
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a3c      	ldr	r2, [pc, #240]	; (80046f4 <HAL_DMA_Init+0x14c>)
 8004602:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800461a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004628:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004634:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004640:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fa16 	bl	8004a88 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004664:	d102      	bne.n	800466c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004674:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004678:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004682:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d010      	beq.n	80046ae <HAL_DMA_Init+0x106>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2b04      	cmp	r3, #4
 8004692:	d80c      	bhi.n	80046ae <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fa35 	bl	8004b04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046aa:	605a      	str	r2, [r3, #4]
 80046ac:	e008      	b.n	80046c0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40020407 	.word	0x40020407
 80046e4:	bffdfff8 	.word	0xbffdfff8
 80046e8:	cccccccd 	.word	0xcccccccd
 80046ec:	40020000 	.word	0x40020000
 80046f0:	bffdfbf8 	.word	0xbffdfbf8
 80046f4:	40020400 	.word	0x40020400

080046f8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_DMA_Start_IT+0x20>
 8004714:	2302      	movs	r3, #2
 8004716:	e066      	b.n	80047e6 <HAL_DMA_Start_IT+0xee>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b01      	cmp	r3, #1
 800472a:	d155      	bne.n	80047d8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0201 	bic.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	68b9      	ldr	r1, [r7, #8]
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 f95a 	bl	8004a0a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	2b00      	cmp	r3, #0
 800475c:	d008      	beq.n	8004770 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f042 020e 	orr.w	r2, r2, #14
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	e00f      	b.n	8004790 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0204 	bic.w	r2, r2, #4
 800477e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 020a 	orr.w	r2, r2, #10
 800478e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047ac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d007      	beq.n	80047c6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f042 0201 	orr.w	r2, r2, #1
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	e005      	b.n	80047e4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80047e0:	2302      	movs	r3, #2
 80047e2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80047e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e04f      	b.n	80048a0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d008      	beq.n	800481e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2204      	movs	r2, #4
 8004810:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e040      	b.n	80048a0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 020e 	bic.w	r2, r2, #14
 800482c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800483c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0201 	bic.w	r2, r2, #1
 800484c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004852:	f003 021c 	and.w	r2, r3, #28
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	2101      	movs	r1, #1
 800485c:	fa01 f202 	lsl.w	r2, r1, r2
 8004860:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800486a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00c      	beq.n	800488e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004882:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800488c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c8:	f003 031c 	and.w	r3, r3, #28
 80048cc:	2204      	movs	r2, #4
 80048ce:	409a      	lsls	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d026      	beq.n	8004926 <HAL_DMA_IRQHandler+0x7a>
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f003 0304 	and.w	r3, r3, #4
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d021      	beq.n	8004926 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0320 	and.w	r3, r3, #32
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d107      	bne.n	8004900 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0204 	bic.w	r2, r2, #4
 80048fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004904:	f003 021c 	and.w	r2, r3, #28
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	2104      	movs	r1, #4
 800490e:	fa01 f202 	lsl.w	r2, r1, r2
 8004912:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	2b00      	cmp	r3, #0
 800491a:	d071      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004924:	e06c      	b.n	8004a00 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492a:	f003 031c 	and.w	r3, r3, #28
 800492e:	2202      	movs	r2, #2
 8004930:	409a      	lsls	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4013      	ands	r3, r2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d02e      	beq.n	8004998 <HAL_DMA_IRQHandler+0xec>
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d029      	beq.n	8004998 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10b      	bne.n	800496a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 020a 	bic.w	r2, r2, #10
 8004960:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496e:	f003 021c 	and.w	r2, r3, #28
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	2102      	movs	r1, #2
 8004978:	fa01 f202 	lsl.w	r2, r1, r2
 800497c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	2b00      	cmp	r3, #0
 800498c:	d038      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004996:	e033      	b.n	8004a00 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499c:	f003 031c 	and.w	r3, r3, #28
 80049a0:	2208      	movs	r2, #8
 80049a2:	409a      	lsls	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d02a      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x156>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d025      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 020e 	bic.w	r2, r2, #14
 80049c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ca:	f003 021c 	and.w	r2, r3, #28
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	2101      	movs	r1, #1
 80049d4:	fa01 f202 	lsl.w	r2, r1, r2
 80049d8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d004      	beq.n	8004a02 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004a00:	bf00      	nop
 8004a02:	bf00      	nop
}
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
 8004a16:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a20:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d004      	beq.n	8004a34 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a32:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a38:	f003 021c 	and.w	r2, r3, #28
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	2101      	movs	r1, #1
 8004a42:	fa01 f202 	lsl.w	r2, r1, r2
 8004a46:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	2b10      	cmp	r3, #16
 8004a56:	d108      	bne.n	8004a6a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a68:	e007      	b.n	8004a7a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	60da      	str	r2, [r3, #12]
}
 8004a7a:	bf00      	nop
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
	...

08004a88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	4b17      	ldr	r3, [pc, #92]	; (8004af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d80a      	bhi.n	8004ab2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa0:	089b      	lsrs	r3, r3, #2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004aa8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6493      	str	r3, [r2, #72]	; 0x48
 8004ab0:	e007      	b.n	8004ac2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab6:	089b      	lsrs	r3, r3, #2
 8004ab8:	009a      	lsls	r2, r3, #2
 8004aba:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004abc:	4413      	add	r3, r2
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	3b08      	subs	r3, #8
 8004aca:	4a0c      	ldr	r2, [pc, #48]	; (8004afc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004acc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad0:	091b      	lsrs	r3, r3, #4
 8004ad2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a0a      	ldr	r2, [pc, #40]	; (8004b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004ad8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f003 031f 	and.w	r3, r3, #31
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	409a      	lsls	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ae8:	bf00      	nop
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	40020407 	.word	0x40020407
 8004af8:	4002081c 	.word	0x4002081c
 8004afc:	cccccccd 	.word	0xcccccccd
 8004b00:	40020880 	.word	0x40020880

08004b04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b14:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004b1a:	4413      	add	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	461a      	mov	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a09      	ldr	r2, [pc, #36]	; (8004b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004b28:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	2201      	movs	r2, #1
 8004b34:	409a      	lsls	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004b3a:	bf00      	nop
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	1000823f 	.word	0x1000823f
 8004b4c:	40020940 	.word	0x40020940

08004b50 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b5e:	e146      	b.n	8004dee <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	2101      	movs	r1, #1
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 8138 	beq.w	8004de8 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f003 0303 	and.w	r3, r3, #3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d005      	beq.n	8004b90 <HAL_GPIO_Init+0x40>
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f003 0303 	and.w	r3, r3, #3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d130      	bne.n	8004bf2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	2203      	movs	r2, #3
 8004b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba0:	43db      	mvns	r3, r3
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	43db      	mvns	r3, r3
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	091b      	lsrs	r3, r3, #4
 8004bdc:	f003 0201 	and.w	r2, r3, #1
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	d017      	beq.n	8004c2e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	2203      	movs	r2, #3
 8004c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0e:	43db      	mvns	r3, r3
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	4013      	ands	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d123      	bne.n	8004c82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	08da      	lsrs	r2, r3, #3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3208      	adds	r2, #8
 8004c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	220f      	movs	r2, #15
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	43db      	mvns	r3, r3
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	691a      	ldr	r2, [r3, #16]
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	08da      	lsrs	r2, r3, #3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3208      	adds	r2, #8
 8004c7c:	6939      	ldr	r1, [r7, #16]
 8004c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	2203      	movs	r2, #3
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	43db      	mvns	r3, r3
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	4013      	ands	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f003 0203 	and.w	r2, r3, #3
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 8092 	beq.w	8004de8 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004cc4:	4a51      	ldr	r2, [pc, #324]	; (8004e0c <HAL_GPIO_Init+0x2bc>)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	089b      	lsrs	r3, r3, #2
 8004cca:	3302      	adds	r3, #2
 8004ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f003 0303 	and.w	r3, r3, #3
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	220f      	movs	r2, #15
 8004cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004cee:	d013      	beq.n	8004d18 <HAL_GPIO_Init+0x1c8>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a47      	ldr	r2, [pc, #284]	; (8004e10 <HAL_GPIO_Init+0x2c0>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d00d      	beq.n	8004d14 <HAL_GPIO_Init+0x1c4>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a46      	ldr	r2, [pc, #280]	; (8004e14 <HAL_GPIO_Init+0x2c4>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d007      	beq.n	8004d10 <HAL_GPIO_Init+0x1c0>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a45      	ldr	r2, [pc, #276]	; (8004e18 <HAL_GPIO_Init+0x2c8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d101      	bne.n	8004d0c <HAL_GPIO_Init+0x1bc>
 8004d08:	2304      	movs	r3, #4
 8004d0a:	e006      	b.n	8004d1a <HAL_GPIO_Init+0x1ca>
 8004d0c:	2307      	movs	r3, #7
 8004d0e:	e004      	b.n	8004d1a <HAL_GPIO_Init+0x1ca>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e002      	b.n	8004d1a <HAL_GPIO_Init+0x1ca>
 8004d14:	2301      	movs	r3, #1
 8004d16:	e000      	b.n	8004d1a <HAL_GPIO_Init+0x1ca>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	f002 0203 	and.w	r2, r2, #3
 8004d20:	0092      	lsls	r2, r2, #2
 8004d22:	4093      	lsls	r3, r2
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004d2a:	4938      	ldr	r1, [pc, #224]	; (8004e0c <HAL_GPIO_Init+0x2bc>)
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	089b      	lsrs	r3, r3, #2
 8004d30:	3302      	adds	r3, #2
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d38:	4b38      	ldr	r3, [pc, #224]	; (8004e1c <HAL_GPIO_Init+0x2cc>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	43db      	mvns	r3, r3
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4013      	ands	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d5c:	4a2f      	ldr	r2, [pc, #188]	; (8004e1c <HAL_GPIO_Init+0x2cc>)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004d62:	4b2e      	ldr	r3, [pc, #184]	; (8004e1c <HAL_GPIO_Init+0x2cc>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d86:	4a25      	ldr	r2, [pc, #148]	; (8004e1c <HAL_GPIO_Init+0x2cc>)
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d8c:	4b23      	ldr	r3, [pc, #140]	; (8004e1c <HAL_GPIO_Init+0x2cc>)
 8004d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	43db      	mvns	r3, r3
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004db2:	4a1a      	ldr	r2, [pc, #104]	; (8004e1c <HAL_GPIO_Init+0x2cc>)
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004dba:	4b18      	ldr	r3, [pc, #96]	; (8004e1c <HAL_GPIO_Init+0x2cc>)
 8004dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	43db      	mvns	r3, r3
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004de0:	4a0e      	ldr	r2, [pc, #56]	; (8004e1c <HAL_GPIO_Init+0x2cc>)
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	3301      	adds	r3, #1
 8004dec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	fa22 f303 	lsr.w	r3, r2, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f47f aeb1 	bne.w	8004b60 <HAL_GPIO_Init+0x10>
  }
}
 8004dfe:	bf00      	nop
 8004e00:	bf00      	nop
 8004e02:	371c      	adds	r7, #28
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	40010000 	.word	0x40010000
 8004e10:	48000400 	.word	0x48000400
 8004e14:	48000800 	.word	0x48000800
 8004e18:	48001000 	.word	0x48001000
 8004e1c:	58000800 	.word	0x58000800

08004e20 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	887b      	ldrh	r3, [r7, #2]
 8004e32:	4013      	ands	r3, r2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	73fb      	strb	r3, [r7, #15]
 8004e3c:	e001      	b.n	8004e42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	807b      	strh	r3, [r7, #2]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e60:	787b      	ldrb	r3, [r7, #1]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e66:	887a      	ldrh	r2, [r7, #2]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e6c:	e002      	b.n	8004e74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e6e:	887a      	ldrh	r2, [r7, #2]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e92:	887a      	ldrh	r2, [r7, #2]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4013      	ands	r3, r2
 8004e98:	041a      	lsls	r2, r3, #16
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	43d9      	mvns	r1, r3
 8004e9e:	887b      	ldrh	r3, [r7, #2]
 8004ea0:	400b      	ands	r3, r1
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	619a      	str	r2, [r3, #24]
}
 8004ea8:	bf00      	nop
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	4603      	mov	r3, r0
 8004ebc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ebe:	4b08      	ldr	r3, [pc, #32]	; (8004ee0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	88fb      	ldrh	r3, [r7, #6]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d006      	beq.n	8004ed8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004eca:	4a05      	ldr	r2, [pc, #20]	; (8004ee0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ecc:	88fb      	ldrh	r3, [r7, #6]
 8004ece:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ed0:	88fb      	ldrh	r3, [r7, #6]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fc ff42 	bl	8001d5c <HAL_GPIO_EXTI_Callback>
  }
}
 8004ed8:	bf00      	nop
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	58000800 	.word	0x58000800

08004ee4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004eea:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <HAL_HSEM_IRQHandler+0x30>)
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004ef0:	4b08      	ldr	r3, [pc, #32]	; (8004f14 <HAL_HSEM_IRQHandler+0x30>)
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	43db      	mvns	r3, r3
 8004ef8:	4906      	ldr	r1, [pc, #24]	; (8004f14 <HAL_HSEM_IRQHandler+0x30>)
 8004efa:	4013      	ands	r3, r2
 8004efc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004efe:	4a05      	ldr	r2, [pc, #20]	; (8004f14 <HAL_HSEM_IRQHandler+0x30>)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f807 	bl	8004f18 <HAL_HSEM_FreeCallback>
}
 8004f0a:	bf00      	nop
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	58001500 	.word	0x58001500

08004f18 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e081      	b.n	8005042 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d106      	bne.n	8004f58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7fd fc22 	bl	800279c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2224      	movs	r2, #36	; 0x24
 8004f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0201 	bic.w	r2, r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d107      	bne.n	8004fa6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fa2:	609a      	str	r2, [r3, #8]
 8004fa4:	e006      	b.n	8004fb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004fb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d104      	bne.n	8004fc6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6812      	ldr	r2, [r2, #0]
 8004fd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fe8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691a      	ldr	r2, [r3, #16]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	69d9      	ldr	r1, [r3, #28]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a1a      	ldr	r2, [r3, #32]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0201 	orr.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2220      	movs	r2, #32
 800502e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
	...

0800504c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b088      	sub	sp, #32
 8005050:	af02      	add	r7, sp, #8
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	607a      	str	r2, [r7, #4]
 8005056:	461a      	mov	r2, r3
 8005058:	460b      	mov	r3, r1
 800505a:	817b      	strh	r3, [r7, #10]
 800505c:	4613      	mov	r3, r2
 800505e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b20      	cmp	r3, #32
 800506a:	f040 80da 	bne.w	8005222 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005074:	2b01      	cmp	r3, #1
 8005076:	d101      	bne.n	800507c <HAL_I2C_Master_Transmit+0x30>
 8005078:	2302      	movs	r3, #2
 800507a:	e0d3      	b.n	8005224 <HAL_I2C_Master_Transmit+0x1d8>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005084:	f7fd fea2 	bl	8002dcc <HAL_GetTick>
 8005088:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	2319      	movs	r3, #25
 8005090:	2201      	movs	r2, #1
 8005092:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 fc5c 	bl	8005954 <I2C_WaitOnFlagUntilTimeout>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e0be      	b.n	8005224 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2221      	movs	r2, #33	; 0x21
 80050aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2210      	movs	r2, #16
 80050b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	893a      	ldrh	r2, [r7, #8]
 80050c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	2bff      	cmp	r3, #255	; 0xff
 80050d6:	d90e      	bls.n	80050f6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	22ff      	movs	r2, #255	; 0xff
 80050dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	8979      	ldrh	r1, [r7, #10]
 80050e6:	4b51      	ldr	r3, [pc, #324]	; (800522c <HAL_I2C_Master_Transmit+0x1e0>)
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 fe6c 	bl	8005dcc <I2C_TransferConfig>
 80050f4:	e06c      	b.n	80051d0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005104:	b2da      	uxtb	r2, r3
 8005106:	8979      	ldrh	r1, [r7, #10]
 8005108:	4b48      	ldr	r3, [pc, #288]	; (800522c <HAL_I2C_Master_Transmit+0x1e0>)
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 fe5b 	bl	8005dcc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005116:	e05b      	b.n	80051d0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	6a39      	ldr	r1, [r7, #32]
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 fc68 	bl	80059f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e07b      	b.n	8005224 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	781a      	ldrb	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005146:	b29b      	uxth	r3, r3
 8005148:	3b01      	subs	r3, #1
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d034      	beq.n	80051d0 <HAL_I2C_Master_Transmit+0x184>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516a:	2b00      	cmp	r3, #0
 800516c:	d130      	bne.n	80051d0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	2200      	movs	r2, #0
 8005176:	2180      	movs	r1, #128	; 0x80
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 fbeb 	bl	8005954 <I2C_WaitOnFlagUntilTimeout>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e04d      	b.n	8005224 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518c:	b29b      	uxth	r3, r3
 800518e:	2bff      	cmp	r3, #255	; 0xff
 8005190:	d90e      	bls.n	80051b0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	22ff      	movs	r2, #255	; 0xff
 8005196:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519c:	b2da      	uxtb	r2, r3
 800519e:	8979      	ldrh	r1, [r7, #10]
 80051a0:	2300      	movs	r3, #0
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 fe0f 	bl	8005dcc <I2C_TransferConfig>
 80051ae:	e00f      	b.n	80051d0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051be:	b2da      	uxtb	r2, r3
 80051c0:	8979      	ldrh	r1, [r7, #10]
 80051c2:	2300      	movs	r3, #0
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f000 fdfe 	bl	8005dcc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d19e      	bne.n	8005118 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	6a39      	ldr	r1, [r7, #32]
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 fc4e 	bl	8005a80 <I2C_WaitOnSTOPFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e01a      	b.n	8005224 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2220      	movs	r2, #32
 80051f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6859      	ldr	r1, [r3, #4]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <HAL_I2C_Master_Transmit+0x1e4>)
 8005202:	400b      	ands	r3, r1
 8005204:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	e000      	b.n	8005224 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005222:	2302      	movs	r3, #2
  }
}
 8005224:	4618      	mov	r0, r3
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	80002000 	.word	0x80002000
 8005230:	fe00e800 	.word	0xfe00e800

08005234 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af02      	add	r7, sp, #8
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	607a      	str	r2, [r7, #4]
 800523e:	461a      	mov	r2, r3
 8005240:	460b      	mov	r3, r1
 8005242:	817b      	strh	r3, [r7, #10]
 8005244:	4613      	mov	r3, r2
 8005246:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b20      	cmp	r3, #32
 8005252:	f040 80db 	bne.w	800540c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <HAL_I2C_Master_Receive+0x30>
 8005260:	2302      	movs	r3, #2
 8005262:	e0d4      	b.n	800540e <HAL_I2C_Master_Receive+0x1da>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800526c:	f7fd fdae 	bl	8002dcc <HAL_GetTick>
 8005270:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	2319      	movs	r3, #25
 8005278:	2201      	movs	r2, #1
 800527a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 fb68 	bl	8005954 <I2C_WaitOnFlagUntilTimeout>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e0bf      	b.n	800540e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2222      	movs	r2, #34	; 0x22
 8005292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2210      	movs	r2, #16
 800529a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	893a      	ldrh	r2, [r7, #8]
 80052ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	2bff      	cmp	r3, #255	; 0xff
 80052be:	d90e      	bls.n	80052de <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	22ff      	movs	r2, #255	; 0xff
 80052c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	8979      	ldrh	r1, [r7, #10]
 80052ce:	4b52      	ldr	r3, [pc, #328]	; (8005418 <HAL_I2C_Master_Receive+0x1e4>)
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 fd78 	bl	8005dcc <I2C_TransferConfig>
 80052dc:	e06d      	b.n	80053ba <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	8979      	ldrh	r1, [r7, #10]
 80052f0:	4b49      	ldr	r3, [pc, #292]	; (8005418 <HAL_I2C_Master_Receive+0x1e4>)
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 fd67 	bl	8005dcc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80052fe:	e05c      	b.n	80053ba <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	6a39      	ldr	r1, [r7, #32]
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 fbff 	bl	8005b08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e07c      	b.n	800540e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005330:	3b01      	subs	r3, #1
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d034      	beq.n	80053ba <HAL_I2C_Master_Receive+0x186>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005354:	2b00      	cmp	r3, #0
 8005356:	d130      	bne.n	80053ba <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	2200      	movs	r2, #0
 8005360:	2180      	movs	r1, #128	; 0x80
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 faf6 	bl	8005954 <I2C_WaitOnFlagUntilTimeout>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e04d      	b.n	800540e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005376:	b29b      	uxth	r3, r3
 8005378:	2bff      	cmp	r3, #255	; 0xff
 800537a:	d90e      	bls.n	800539a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	22ff      	movs	r2, #255	; 0xff
 8005380:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005386:	b2da      	uxtb	r2, r3
 8005388:	8979      	ldrh	r1, [r7, #10]
 800538a:	2300      	movs	r3, #0
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 fd1a 	bl	8005dcc <I2C_TransferConfig>
 8005398:	e00f      	b.n	80053ba <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	8979      	ldrh	r1, [r7, #10]
 80053ac:	2300      	movs	r3, #0
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f000 fd09 	bl	8005dcc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d19d      	bne.n	8005300 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	6a39      	ldr	r1, [r7, #32]
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 fb59 	bl	8005a80 <I2C_WaitOnSTOPFlagUntilTimeout>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d001      	beq.n	80053d8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e01a      	b.n	800540e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2220      	movs	r2, #32
 80053de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6859      	ldr	r1, [r3, #4]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	4b0c      	ldr	r3, [pc, #48]	; (800541c <HAL_I2C_Master_Receive+0x1e8>)
 80053ec:	400b      	ands	r3, r1
 80053ee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005408:	2300      	movs	r3, #0
 800540a:	e000      	b.n	800540e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800540c:	2302      	movs	r3, #2
  }
}
 800540e:	4618      	mov	r0, r3
 8005410:	3718      	adds	r7, #24
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	80002400 	.word	0x80002400
 800541c:	fe00e800 	.word	0xfe00e800

08005420 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af02      	add	r7, sp, #8
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	4608      	mov	r0, r1
 800542a:	4611      	mov	r1, r2
 800542c:	461a      	mov	r2, r3
 800542e:	4603      	mov	r3, r0
 8005430:	817b      	strh	r3, [r7, #10]
 8005432:	460b      	mov	r3, r1
 8005434:	813b      	strh	r3, [r7, #8]
 8005436:	4613      	mov	r3, r2
 8005438:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b20      	cmp	r3, #32
 8005444:	f040 80fd 	bne.w	8005642 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <HAL_I2C_Mem_Read+0x34>
 800544e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005450:	2b00      	cmp	r3, #0
 8005452:	d105      	bne.n	8005460 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800545a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e0f1      	b.n	8005644 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005466:	2b01      	cmp	r3, #1
 8005468:	d101      	bne.n	800546e <HAL_I2C_Mem_Read+0x4e>
 800546a:	2302      	movs	r3, #2
 800546c:	e0ea      	b.n	8005644 <HAL_I2C_Mem_Read+0x224>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005476:	f7fd fca9 	bl	8002dcc <HAL_GetTick>
 800547a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	2319      	movs	r3, #25
 8005482:	2201      	movs	r2, #1
 8005484:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 fa63 	bl	8005954 <I2C_WaitOnFlagUntilTimeout>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d001      	beq.n	8005498 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e0d5      	b.n	8005644 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2222      	movs	r2, #34	; 0x22
 800549c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2240      	movs	r2, #64	; 0x40
 80054a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6a3a      	ldr	r2, [r7, #32]
 80054b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80054b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054c0:	88f8      	ldrh	r0, [r7, #6]
 80054c2:	893a      	ldrh	r2, [r7, #8]
 80054c4:	8979      	ldrh	r1, [r7, #10]
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	9301      	str	r3, [sp, #4]
 80054ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	4603      	mov	r3, r0
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 f9c7 	bl	8005864 <I2C_RequestMemoryRead>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d005      	beq.n	80054e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e0ad      	b.n	8005644 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2bff      	cmp	r3, #255	; 0xff
 80054f0:	d90e      	bls.n	8005510 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	22ff      	movs	r2, #255	; 0xff
 80054f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	8979      	ldrh	r1, [r7, #10]
 8005500:	4b52      	ldr	r3, [pc, #328]	; (800564c <HAL_I2C_Mem_Read+0x22c>)
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 fc5f 	bl	8005dcc <I2C_TransferConfig>
 800550e:	e00f      	b.n	8005530 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551e:	b2da      	uxtb	r2, r3
 8005520:	8979      	ldrh	r1, [r7, #10]
 8005522:	4b4a      	ldr	r3, [pc, #296]	; (800564c <HAL_I2C_Mem_Read+0x22c>)
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 fc4e 	bl	8005dcc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005536:	2200      	movs	r2, #0
 8005538:	2104      	movs	r1, #4
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 fa0a 	bl	8005954 <I2C_WaitOnFlagUntilTimeout>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e07c      	b.n	8005644 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	b2d2      	uxtb	r2, r2
 8005556:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005566:	3b01      	subs	r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005572:	b29b      	uxth	r3, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d034      	beq.n	80055f0 <HAL_I2C_Mem_Read+0x1d0>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800558a:	2b00      	cmp	r3, #0
 800558c:	d130      	bne.n	80055f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005594:	2200      	movs	r2, #0
 8005596:	2180      	movs	r1, #128	; 0x80
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 f9db 	bl	8005954 <I2C_WaitOnFlagUntilTimeout>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e04d      	b.n	8005644 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2bff      	cmp	r3, #255	; 0xff
 80055b0:	d90e      	bls.n	80055d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	22ff      	movs	r2, #255	; 0xff
 80055b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	8979      	ldrh	r1, [r7, #10]
 80055c0:	2300      	movs	r3, #0
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 fbff 	bl	8005dcc <I2C_TransferConfig>
 80055ce:	e00f      	b.n	80055f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	8979      	ldrh	r1, [r7, #10]
 80055e2:	2300      	movs	r3, #0
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f000 fbee 	bl	8005dcc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d19a      	bne.n	8005530 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f000 fa3e 	bl	8005a80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e01a      	b.n	8005644 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2220      	movs	r2, #32
 8005614:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6859      	ldr	r1, [r3, #4]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	4b0b      	ldr	r3, [pc, #44]	; (8005650 <HAL_I2C_Mem_Read+0x230>)
 8005622:	400b      	ands	r3, r1
 8005624:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2220      	movs	r2, #32
 800562a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	e000      	b.n	8005644 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005642:	2302      	movs	r3, #2
  }
}
 8005644:	4618      	mov	r0, r3
 8005646:	3718      	adds	r7, #24
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	80002400 	.word	0x80002400
 8005650:	fe00e800 	.word	0xfe00e800

08005654 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08a      	sub	sp, #40	; 0x28
 8005658:	af02      	add	r7, sp, #8
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	607a      	str	r2, [r7, #4]
 800565e:	603b      	str	r3, [r7, #0]
 8005660:	460b      	mov	r3, r1
 8005662:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005664:	2300      	movs	r3, #0
 8005666:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b20      	cmp	r3, #32
 8005672:	f040 80f1 	bne.w	8005858 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005684:	d101      	bne.n	800568a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005686:	2302      	movs	r3, #2
 8005688:	e0e7      	b.n	800585a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005690:	2b01      	cmp	r3, #1
 8005692:	d101      	bne.n	8005698 <HAL_I2C_IsDeviceReady+0x44>
 8005694:	2302      	movs	r3, #2
 8005696:	e0e0      	b.n	800585a <HAL_I2C_IsDeviceReady+0x206>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2224      	movs	r2, #36	; 0x24
 80056a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d107      	bne.n	80056c6 <HAL_I2C_IsDeviceReady+0x72>
 80056b6:	897b      	ldrh	r3, [r7, #10]
 80056b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80056c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80056c4:	e004      	b.n	80056d0 <HAL_I2C_IsDeviceReady+0x7c>
 80056c6:	897b      	ldrh	r3, [r7, #10]
 80056c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056cc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	6812      	ldr	r2, [r2, #0]
 80056d4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80056d6:	f7fd fb79 	bl	8002dcc <HAL_GetTick>
 80056da:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	bf0c      	ite	eq
 80056ea:	2301      	moveq	r3, #1
 80056ec:	2300      	movne	r3, #0
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	f003 0310 	and.w	r3, r3, #16
 80056fc:	2b10      	cmp	r3, #16
 80056fe:	bf0c      	ite	eq
 8005700:	2301      	moveq	r3, #1
 8005702:	2300      	movne	r3, #0
 8005704:	b2db      	uxtb	r3, r3
 8005706:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005708:	e034      	b.n	8005774 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005710:	d01a      	beq.n	8005748 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005712:	f7fd fb5b 	bl	8002dcc <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d302      	bcc.n	8005728 <HAL_I2C_IsDeviceReady+0xd4>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10f      	bne.n	8005748 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2220      	movs	r2, #32
 800572c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005734:	f043 0220 	orr.w	r2, r3, #32
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e088      	b.n	800585a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	f003 0320 	and.w	r3, r3, #32
 8005752:	2b20      	cmp	r3, #32
 8005754:	bf0c      	ite	eq
 8005756:	2301      	moveq	r3, #1
 8005758:	2300      	movne	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	f003 0310 	and.w	r3, r3, #16
 8005768:	2b10      	cmp	r3, #16
 800576a:	bf0c      	ite	eq
 800576c:	2301      	moveq	r3, #1
 800576e:	2300      	movne	r3, #0
 8005770:	b2db      	uxtb	r3, r3
 8005772:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005774:	7ffb      	ldrb	r3, [r7, #31]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d102      	bne.n	8005780 <HAL_I2C_IsDeviceReady+0x12c>
 800577a:	7fbb      	ldrb	r3, [r7, #30]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0c4      	beq.n	800570a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	f003 0310 	and.w	r3, r3, #16
 800578a:	2b10      	cmp	r3, #16
 800578c:	d01a      	beq.n	80057c4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2200      	movs	r2, #0
 8005796:	2120      	movs	r1, #32
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 f8db 	bl	8005954 <I2C_WaitOnFlagUntilTimeout>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e058      	b.n	800585a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2220      	movs	r2, #32
 80057ae:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2220      	movs	r2, #32
 80057b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	e04a      	b.n	800585a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2200      	movs	r2, #0
 80057cc:	2120      	movs	r1, #32
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 f8c0 	bl	8005954 <I2C_WaitOnFlagUntilTimeout>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e03d      	b.n	800585a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2210      	movs	r2, #16
 80057e4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2220      	movs	r2, #32
 80057ec:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d118      	bne.n	8005828 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005804:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2200      	movs	r2, #0
 800580e:	2120      	movs	r1, #32
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 f89f 	bl	8005954 <I2C_WaitOnFlagUntilTimeout>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d001      	beq.n	8005820 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e01c      	b.n	800585a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2220      	movs	r2, #32
 8005826:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	3301      	adds	r3, #1
 800582c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	429a      	cmp	r2, r3
 8005834:	f63f af3b 	bhi.w	80056ae <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005844:	f043 0220 	orr.w	r2, r3, #32
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e000      	b.n	800585a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005858:	2302      	movs	r3, #2
  }
}
 800585a:	4618      	mov	r0, r3
 800585c:	3720      	adds	r7, #32
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
	...

08005864 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af02      	add	r7, sp, #8
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	4608      	mov	r0, r1
 800586e:	4611      	mov	r1, r2
 8005870:	461a      	mov	r2, r3
 8005872:	4603      	mov	r3, r0
 8005874:	817b      	strh	r3, [r7, #10]
 8005876:	460b      	mov	r3, r1
 8005878:	813b      	strh	r3, [r7, #8]
 800587a:	4613      	mov	r3, r2
 800587c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800587e:	88fb      	ldrh	r3, [r7, #6]
 8005880:	b2da      	uxtb	r2, r3
 8005882:	8979      	ldrh	r1, [r7, #10]
 8005884:	4b20      	ldr	r3, [pc, #128]	; (8005908 <I2C_RequestMemoryRead+0xa4>)
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	2300      	movs	r3, #0
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 fa9e 	bl	8005dcc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005890:	69fa      	ldr	r2, [r7, #28]
 8005892:	69b9      	ldr	r1, [r7, #24]
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 f8ac 	bl	80059f2 <I2C_WaitOnTXISFlagUntilTimeout>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e02c      	b.n	80058fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058a4:	88fb      	ldrh	r3, [r7, #6]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d105      	bne.n	80058b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058aa:	893b      	ldrh	r3, [r7, #8]
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	629a      	str	r2, [r3, #40]	; 0x28
 80058b4:	e015      	b.n	80058e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80058b6:	893b      	ldrh	r3, [r7, #8]
 80058b8:	0a1b      	lsrs	r3, r3, #8
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058c4:	69fa      	ldr	r2, [r7, #28]
 80058c6:	69b9      	ldr	r1, [r7, #24]
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f892 	bl	80059f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e012      	b.n	80058fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058d8:	893b      	ldrh	r3, [r7, #8]
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	2200      	movs	r2, #0
 80058ea:	2140      	movs	r1, #64	; 0x40
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f831 	bl	8005954 <I2C_WaitOnFlagUntilTimeout>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e000      	b.n	80058fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	80002000 	.word	0x80002000

0800590c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b02      	cmp	r3, #2
 8005920:	d103      	bne.n	800592a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2200      	movs	r2, #0
 8005928:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b01      	cmp	r3, #1
 8005936:	d007      	beq.n	8005948 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699a      	ldr	r2, [r3, #24]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0201 	orr.w	r2, r2, #1
 8005946:	619a      	str	r2, [r3, #24]
  }
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	603b      	str	r3, [r7, #0]
 8005960:	4613      	mov	r3, r2
 8005962:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005964:	e031      	b.n	80059ca <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596c:	d02d      	beq.n	80059ca <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800596e:	f7fd fa2d 	bl	8002dcc <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d302      	bcc.n	8005984 <I2C_WaitOnFlagUntilTimeout+0x30>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d122      	bne.n	80059ca <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699a      	ldr	r2, [r3, #24]
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	4013      	ands	r3, r2
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	429a      	cmp	r2, r3
 8005992:	bf0c      	ite	eq
 8005994:	2301      	moveq	r3, #1
 8005996:	2300      	movne	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	461a      	mov	r2, r3
 800599c:	79fb      	ldrb	r3, [r7, #7]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d113      	bne.n	80059ca <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a6:	f043 0220 	orr.w	r2, r3, #32
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e00f      	b.n	80059ea <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	699a      	ldr	r2, [r3, #24]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4013      	ands	r3, r2
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	bf0c      	ite	eq
 80059da:	2301      	moveq	r3, #1
 80059dc:	2300      	movne	r3, #0
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	461a      	mov	r2, r3
 80059e2:	79fb      	ldrb	r3, [r7, #7]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d0be      	beq.n	8005966 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b084      	sub	sp, #16
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059fe:	e033      	b.n	8005a68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	68b9      	ldr	r1, [r7, #8]
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 f901 	bl	8005c0c <I2C_IsErrorOccurred>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e031      	b.n	8005a78 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1a:	d025      	beq.n	8005a68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a1c:	f7fd f9d6 	bl	8002dcc <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d302      	bcc.n	8005a32 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d11a      	bne.n	8005a68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d013      	beq.n	8005a68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a44:	f043 0220 	orr.w	r2, r3, #32
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e007      	b.n	8005a78 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d1c4      	bne.n	8005a00 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a8c:	e02f      	b.n	8005aee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	68b9      	ldr	r1, [r7, #8]
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 f8ba 	bl	8005c0c <I2C_IsErrorOccurred>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e02d      	b.n	8005afe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aa2:	f7fd f993 	bl	8002dcc <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d302      	bcc.n	8005ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d11a      	bne.n	8005aee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	f003 0320 	and.w	r3, r3, #32
 8005ac2:	2b20      	cmp	r3, #32
 8005ac4:	d013      	beq.n	8005aee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aca:	f043 0220 	orr.w	r2, r3, #32
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e007      	b.n	8005afe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	f003 0320 	and.w	r3, r3, #32
 8005af8:	2b20      	cmp	r3, #32
 8005afa:	d1c8      	bne.n	8005a8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b14:	e06b      	b.n	8005bee <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	68b9      	ldr	r1, [r7, #8]
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 f876 	bl	8005c0c <I2C_IsErrorOccurred>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e069      	b.n	8005bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	f003 0320 	and.w	r3, r3, #32
 8005b34:	2b20      	cmp	r3, #32
 8005b36:	d138      	bne.n	8005baa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	f003 0304 	and.w	r3, r3, #4
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d105      	bne.n	8005b52 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	e055      	b.n	8005bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	f003 0310 	and.w	r3, r3, #16
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d107      	bne.n	8005b70 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2210      	movs	r2, #16
 8005b66:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2204      	movs	r2, #4
 8005b6c:	645a      	str	r2, [r3, #68]	; 0x44
 8005b6e:	e002      	b.n	8005b76 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6859      	ldr	r1, [r3, #4]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	4b1f      	ldr	r3, [pc, #124]	; (8005c08 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8005b8a:	400b      	ands	r3, r1
 8005b8c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e029      	b.n	8005bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005baa:	f7fd f90f 	bl	8002dcc <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d302      	bcc.n	8005bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d116      	bne.n	8005bee <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	f003 0304 	and.w	r3, r3, #4
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d00f      	beq.n	8005bee <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd2:	f043 0220 	orr.w	r2, r3, #32
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e007      	b.n	8005bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	d18c      	bne.n	8005b16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	fe00e800 	.word	0xfe00e800

08005c0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08a      	sub	sp, #40	; 0x28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005c26:	2300      	movs	r3, #0
 8005c28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	f003 0310 	and.w	r3, r3, #16
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d068      	beq.n	8005d0a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2210      	movs	r2, #16
 8005c3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c40:	e049      	b.n	8005cd6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c48:	d045      	beq.n	8005cd6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c4a:	f7fd f8bf 	bl	8002dcc <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d302      	bcc.n	8005c60 <I2C_IsErrorOccurred+0x54>
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d13a      	bne.n	8005cd6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c82:	d121      	bne.n	8005cc8 <I2C_IsErrorOccurred+0xbc>
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c8a:	d01d      	beq.n	8005cc8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005c8c:	7cfb      	ldrb	r3, [r7, #19]
 8005c8e:	2b20      	cmp	r3, #32
 8005c90:	d01a      	beq.n	8005cc8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ca0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005ca2:	f7fd f893 	bl	8002dcc <HAL_GetTick>
 8005ca6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ca8:	e00e      	b.n	8005cc8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005caa:	f7fd f88f 	bl	8002dcc <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b19      	cmp	r3, #25
 8005cb6:	d907      	bls.n	8005cc8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	f043 0320 	orr.w	r3, r3, #32
 8005cbe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005cc6:	e006      	b.n	8005cd6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	f003 0320 	and.w	r3, r3, #32
 8005cd2:	2b20      	cmp	r3, #32
 8005cd4:	d1e9      	bne.n	8005caa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	f003 0320 	and.w	r3, r3, #32
 8005ce0:	2b20      	cmp	r3, #32
 8005ce2:	d003      	beq.n	8005cec <I2C_IsErrorOccurred+0xe0>
 8005ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0aa      	beq.n	8005c42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d103      	bne.n	8005cfc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	f043 0304 	orr.w	r3, r3, #4
 8005d02:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00b      	beq.n	8005d34 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	f043 0301 	orr.w	r3, r3, #1
 8005d22:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00b      	beq.n	8005d56 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	f043 0308 	orr.w	r3, r3, #8
 8005d44:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00b      	beq.n	8005d78 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	f043 0302 	orr.w	r3, r3, #2
 8005d66:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d01c      	beq.n	8005dba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f7ff fdc3 	bl	800590c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6859      	ldr	r1, [r3, #4]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	4b0d      	ldr	r3, [pc, #52]	; (8005dc8 <I2C_IsErrorOccurred+0x1bc>)
 8005d92:	400b      	ands	r3, r1
 8005d94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005dba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3728      	adds	r7, #40	; 0x28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	fe00e800 	.word	0xfe00e800

08005dcc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	607b      	str	r3, [r7, #4]
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	817b      	strh	r3, [r7, #10]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005dde:	897b      	ldrh	r3, [r7, #10]
 8005de0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005de4:	7a7b      	ldrb	r3, [r7, #9]
 8005de6:	041b      	lsls	r3, r3, #16
 8005de8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005dec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dfa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	0d5b      	lsrs	r3, r3, #21
 8005e06:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005e0a:	4b08      	ldr	r3, [pc, #32]	; (8005e2c <I2C_TransferConfig+0x60>)
 8005e0c:	430b      	orrs	r3, r1
 8005e0e:	43db      	mvns	r3, r3
 8005e10:	ea02 0103 	and.w	r1, r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005e1e:	bf00      	nop
 8005e20:	371c      	adds	r7, #28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	03ff63ff 	.word	0x03ff63ff

08005e30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b20      	cmp	r3, #32
 8005e44:	d138      	bne.n	8005eb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d101      	bne.n	8005e54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e50:	2302      	movs	r3, #2
 8005e52:	e032      	b.n	8005eba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2224      	movs	r2, #36	; 0x24
 8005e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 0201 	bic.w	r2, r2, #1
 8005e72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6819      	ldr	r1, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f042 0201 	orr.w	r2, r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	e000      	b.n	8005eba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005eb8:	2302      	movs	r3, #2
  }
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b085      	sub	sp, #20
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b20      	cmp	r3, #32
 8005eda:	d139      	bne.n	8005f50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d101      	bne.n	8005eea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	e033      	b.n	8005f52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2224      	movs	r2, #36	; 0x24
 8005ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0201 	bic.w	r2, r2, #1
 8005f08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005f18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	021b      	lsls	r3, r3, #8
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0201 	orr.w	r2, r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	e000      	b.n	8005f52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f50:	2302      	movs	r3, #2
  }
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
	...

08005f60 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d01e      	beq.n	8005fb0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005f72:	4b13      	ldr	r3, [pc, #76]	; (8005fc0 <HAL_IPCC_Init+0x60>)
 8005f74:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d102      	bne.n	8005f88 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7fc fc50 	bl	8002828 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005f88:	68b8      	ldr	r0, [r7, #8]
 8005f8a:	f000 f85b 	bl	8006044 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f82c 	bl	8005ff8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005fae:	e001      	b.n	8005fb4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	58000c00 	.word	0x58000c00

08005fc4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005fd2:	bf00      	nop
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b085      	sub	sp, #20
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	60f8      	str	r0, [r7, #12]
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005fec:	bf00      	nop
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8006000:	2300      	movs	r3, #0
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	e00f      	b.n	8006026 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	4a0b      	ldr	r2, [pc, #44]	; (800603c <IPCC_SetDefaultCallbacks+0x44>)
 8006010:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3306      	adds	r3, #6
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	4a08      	ldr	r2, [pc, #32]	; (8006040 <IPCC_SetDefaultCallbacks+0x48>)
 800601e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	3301      	adds	r3, #1
 8006024:	60fb      	str	r3, [r7, #12]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2b05      	cmp	r3, #5
 800602a:	d9ec      	bls.n	8006006 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800602c:	bf00      	nop
 800602e:	bf00      	nop
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	08005fc5 	.word	0x08005fc5
 8006040:	08005fdf 	.word	0x08005fdf

08006044 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8006058:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	223f      	movs	r2, #63	; 0x3f
 800605e:	609a      	str	r2, [r3, #8]
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800606c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800606e:	b08b      	sub	sp, #44	; 0x2c
 8006070:	af06      	add	r7, sp, #24
 8006072:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e0cb      	b.n	8006216 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d106      	bne.n	8006098 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f00d fb2a 	bl	80136ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2203      	movs	r2, #3
 800609c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f004 fc82 	bl	800a9ae <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060aa:	2300      	movs	r3, #0
 80060ac:	73fb      	strb	r3, [r7, #15]
 80060ae:	e040      	b.n	8006132 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
 80060b2:	6879      	ldr	r1, [r7, #4]
 80060b4:	1c5a      	adds	r2, r3, #1
 80060b6:	4613      	mov	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	440b      	add	r3, r1
 80060c0:	3301      	adds	r3, #1
 80060c2:	2201      	movs	r2, #1
 80060c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
 80060c8:	6879      	ldr	r1, [r7, #4]
 80060ca:	1c5a      	adds	r2, r3, #1
 80060cc:	4613      	mov	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	440b      	add	r3, r1
 80060d6:	7bfa      	ldrb	r2, [r7, #15]
 80060d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80060da:	7bfb      	ldrb	r3, [r7, #15]
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	440b      	add	r3, r1
 80060ea:	3303      	adds	r3, #3
 80060ec:	2200      	movs	r2, #0
 80060ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80060f0:	7bfa      	ldrb	r2, [r7, #15]
 80060f2:	6879      	ldr	r1, [r7, #4]
 80060f4:	4613      	mov	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	440b      	add	r3, r1
 80060fe:	3338      	adds	r3, #56	; 0x38
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006104:	7bfa      	ldrb	r2, [r7, #15]
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	4613      	mov	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	440b      	add	r3, r1
 8006112:	333c      	adds	r3, #60	; 0x3c
 8006114:	2200      	movs	r2, #0
 8006116:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006118:	7bfa      	ldrb	r2, [r7, #15]
 800611a:	6879      	ldr	r1, [r7, #4]
 800611c:	4613      	mov	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	00db      	lsls	r3, r3, #3
 8006124:	440b      	add	r3, r1
 8006126:	3340      	adds	r3, #64	; 0x40
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800612c:	7bfb      	ldrb	r3, [r7, #15]
 800612e:	3301      	adds	r3, #1
 8006130:	73fb      	strb	r3, [r7, #15]
 8006132:	7bfa      	ldrb	r2, [r7, #15]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	429a      	cmp	r2, r3
 800613a:	d3b9      	bcc.n	80060b0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800613c:	2300      	movs	r3, #0
 800613e:	73fb      	strb	r3, [r7, #15]
 8006140:	e044      	b.n	80061cc <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006142:	7bfa      	ldrb	r2, [r7, #15]
 8006144:	6879      	ldr	r1, [r7, #4]
 8006146:	4613      	mov	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	440b      	add	r3, r1
 8006150:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006154:	2200      	movs	r2, #0
 8006156:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006158:	7bfa      	ldrb	r2, [r7, #15]
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	4613      	mov	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	440b      	add	r3, r1
 8006166:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800616a:	7bfa      	ldrb	r2, [r7, #15]
 800616c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800616e:	7bfa      	ldrb	r2, [r7, #15]
 8006170:	6879      	ldr	r1, [r7, #4]
 8006172:	4613      	mov	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	00db      	lsls	r3, r3, #3
 800617a:	440b      	add	r3, r1
 800617c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006180:	2200      	movs	r2, #0
 8006182:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006184:	7bfa      	ldrb	r2, [r7, #15]
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	00db      	lsls	r3, r3, #3
 8006190:	440b      	add	r3, r1
 8006192:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006196:	2200      	movs	r2, #0
 8006198:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800619a:	7bfa      	ldrb	r2, [r7, #15]
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	00db      	lsls	r3, r3, #3
 80061a6:	440b      	add	r3, r1
 80061a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80061b0:	7bfa      	ldrb	r2, [r7, #15]
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	4613      	mov	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	00db      	lsls	r3, r3, #3
 80061bc:	440b      	add	r3, r1
 80061be:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
 80061c8:	3301      	adds	r3, #1
 80061ca:	73fb      	strb	r3, [r7, #15]
 80061cc:	7bfa      	ldrb	r2, [r7, #15]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d3b5      	bcc.n	8006142 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	603b      	str	r3, [r7, #0]
 80061dc:	687e      	ldr	r6, [r7, #4]
 80061de:	466d      	mov	r5, sp
 80061e0:	f106 0410 	add.w	r4, r6, #16
 80061e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	602b      	str	r3, [r5, #0]
 80061ec:	1d33      	adds	r3, r6, #4
 80061ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061f0:	6838      	ldr	r0, [r7, #0]
 80061f2:	f004 fbf7 	bl	800a9e4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d102      	bne.n	8006214 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f001 fc45 	bl	8007a9e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800621e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b082      	sub	sp, #8
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800622c:	2b01      	cmp	r3, #1
 800622e:	d101      	bne.n	8006234 <HAL_PCD_Start+0x16>
 8006230:	2302      	movs	r3, #2
 8006232:	e012      	b.n	800625a <HAL_PCD_Start+0x3c>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4618      	mov	r0, r3
 8006242:	f004 fb9d 	bl	800a980 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4618      	mov	r0, r3
 800624c:	f006 fe61 	bl	800cf12 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b084      	sub	sp, #16
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4618      	mov	r0, r3
 8006270:	f006 fe66 	bl	800cf40 <USB_ReadInterrupts>
 8006274:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d003      	beq.n	8006288 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fb05 	bl	8006890 <PCD_EP_ISR_Handler>

    return;
 8006286:	e110      	b.n	80064aa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800628e:	2b00      	cmp	r3, #0
 8006290:	d013      	beq.n	80062ba <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800629a:	b29a      	uxth	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062a4:	b292      	uxth	r2, r2
 80062a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f00d fad1 	bl	8013852 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80062b0:	2100      	movs	r1, #0
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f8fc 	bl	80064b0 <HAL_PCD_SetAddress>

    return;
 80062b8:	e0f7      	b.n	80064aa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00c      	beq.n	80062de <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062d6:	b292      	uxth	r2, r2
 80062d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80062dc:	e0e5      	b.n	80064aa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00c      	beq.n	8006302 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062fa:	b292      	uxth	r2, r2
 80062fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006300:	e0d3      	b.n	80064aa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d034      	beq.n	8006376 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006314:	b29a      	uxth	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0204 	bic.w	r2, r2, #4
 800631e:	b292      	uxth	r2, r2
 8006320:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800632c:	b29a      	uxth	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0208 	bic.w	r2, r2, #8
 8006336:	b292      	uxth	r2, r2
 8006338:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8006342:	2b01      	cmp	r3, #1
 8006344:	d107      	bne.n	8006356 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800634e:	2100      	movs	r1, #0
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f00d fc75 	bl	8013c40 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f00d fab4 	bl	80138c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006364:	b29a      	uxth	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800636e:	b292      	uxth	r2, r2
 8006370:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006374:	e099      	b.n	80064aa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800637c:	2b00      	cmp	r3, #0
 800637e:	d027      	beq.n	80063d0 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006388:	b29a      	uxth	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0208 	orr.w	r2, r2, #8
 8006392:	b292      	uxth	r2, r2
 8006394:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063aa:	b292      	uxth	r2, r2
 80063ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0204 	orr.w	r2, r2, #4
 80063c2:	b292      	uxth	r2, r2
 80063c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f00d fa61 	bl	8013890 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80063ce:	e06c      	b.n	80064aa <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d040      	beq.n	800645c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063ec:	b292      	uxth	r2, r2
 80063ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d12b      	bne.n	8006454 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006404:	b29a      	uxth	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0204 	orr.w	r2, r2, #4
 800640e:	b292      	uxth	r2, r2
 8006410:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800641c:	b29a      	uxth	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 0208 	orr.w	r2, r2, #8
 8006426:	b292      	uxth	r2, r2
 8006428:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800643c:	b29b      	uxth	r3, r3
 800643e:	089b      	lsrs	r3, r3, #2
 8006440:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800644a:	2101      	movs	r1, #1
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f00d fbf7 	bl	8013c40 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006452:	e02a      	b.n	80064aa <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f00d fa1b 	bl	8013890 <HAL_PCD_SuspendCallback>
    return;
 800645a:	e026      	b.n	80064aa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00f      	beq.n	8006486 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800646e:	b29a      	uxth	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006478:	b292      	uxth	r2, r2
 800647a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f00d f9d9 	bl	8013836 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006484:	e011      	b.n	80064aa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00c      	beq.n	80064aa <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006498:	b29a      	uxth	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064a2:	b292      	uxth	r2, r2
 80064a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80064a8:	bf00      	nop
  }
}
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	460b      	mov	r3, r1
 80064ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d101      	bne.n	80064ca <HAL_PCD_SetAddress+0x1a>
 80064c6:	2302      	movs	r3, #2
 80064c8:	e013      	b.n	80064f2 <HAL_PCD_SetAddress+0x42>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	78fa      	ldrb	r2, [r7, #3]
 80064d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	78fa      	ldrb	r2, [r7, #3]
 80064e0:	4611      	mov	r1, r2
 80064e2:	4618      	mov	r0, r3
 80064e4:	f006 fd01 	bl	800ceea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b084      	sub	sp, #16
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	4608      	mov	r0, r1
 8006504:	4611      	mov	r1, r2
 8006506:	461a      	mov	r2, r3
 8006508:	4603      	mov	r3, r0
 800650a:	70fb      	strb	r3, [r7, #3]
 800650c:	460b      	mov	r3, r1
 800650e:	803b      	strh	r3, [r7, #0]
 8006510:	4613      	mov	r3, r2
 8006512:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006514:	2300      	movs	r3, #0
 8006516:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006518:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800651c:	2b00      	cmp	r3, #0
 800651e:	da0e      	bge.n	800653e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006520:	78fb      	ldrb	r3, [r7, #3]
 8006522:	f003 0307 	and.w	r3, r3, #7
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	4613      	mov	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	00db      	lsls	r3, r3, #3
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	4413      	add	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2201      	movs	r2, #1
 800653a:	705a      	strb	r2, [r3, #1]
 800653c:	e00e      	b.n	800655c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800653e:	78fb      	ldrb	r3, [r7, #3]
 8006540:	f003 0207 	and.w	r2, r3, #7
 8006544:	4613      	mov	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	00db      	lsls	r3, r3, #3
 800654c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	4413      	add	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	f003 0307 	and.w	r3, r3, #7
 8006562:	b2da      	uxtb	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006568:	883a      	ldrh	r2, [r7, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	78ba      	ldrb	r2, [r7, #2]
 8006572:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006574:	78bb      	ldrb	r3, [r7, #2]
 8006576:	2b02      	cmp	r3, #2
 8006578:	d102      	bne.n	8006580 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006586:	2b01      	cmp	r3, #1
 8006588:	d101      	bne.n	800658e <HAL_PCD_EP_Open+0x94>
 800658a:	2302      	movs	r3, #2
 800658c:	e00e      	b.n	80065ac <HAL_PCD_EP_Open+0xb2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68f9      	ldr	r1, [r7, #12]
 800659c:	4618      	mov	r0, r3
 800659e:	f004 fa43 	bl	800aa28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80065aa:	7afb      	ldrb	r3, [r7, #11]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	460b      	mov	r3, r1
 80065be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80065c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	da0e      	bge.n	80065e6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065c8:	78fb      	ldrb	r3, [r7, #3]
 80065ca:	f003 0307 	and.w	r3, r3, #7
 80065ce:	1c5a      	adds	r2, r3, #1
 80065d0:	4613      	mov	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	00db      	lsls	r3, r3, #3
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	4413      	add	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2201      	movs	r2, #1
 80065e2:	705a      	strb	r2, [r3, #1]
 80065e4:	e00e      	b.n	8006604 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065e6:	78fb      	ldrb	r3, [r7, #3]
 80065e8:	f003 0207 	and.w	r2, r3, #7
 80065ec:	4613      	mov	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	00db      	lsls	r3, r3, #3
 80065f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	4413      	add	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006604:	78fb      	ldrb	r3, [r7, #3]
 8006606:	f003 0307 	and.w	r3, r3, #7
 800660a:	b2da      	uxtb	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006616:	2b01      	cmp	r3, #1
 8006618:	d101      	bne.n	800661e <HAL_PCD_EP_Close+0x6a>
 800661a:	2302      	movs	r3, #2
 800661c:	e00e      	b.n	800663c <HAL_PCD_EP_Close+0x88>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68f9      	ldr	r1, [r7, #12]
 800662c:	4618      	mov	r0, r3
 800662e:	f004 fdbf 	bl	800b1b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	607a      	str	r2, [r7, #4]
 800664e:	603b      	str	r3, [r7, #0]
 8006650:	460b      	mov	r3, r1
 8006652:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006654:	7afb      	ldrb	r3, [r7, #11]
 8006656:	f003 0207 	and.w	r2, r3, #7
 800665a:	4613      	mov	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	00db      	lsls	r3, r3, #3
 8006662:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	4413      	add	r3, r2
 800666a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2200      	movs	r2, #0
 800667c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2200      	movs	r2, #0
 8006682:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006684:	7afb      	ldrb	r3, [r7, #11]
 8006686:	f003 0307 	and.w	r3, r3, #7
 800668a:	b2da      	uxtb	r2, r3
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6979      	ldr	r1, [r7, #20]
 8006696:	4618      	mov	r0, r3
 8006698:	f004 ff77 	bl	800b58a <USB_EPStartXfer>

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3718      	adds	r7, #24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	460b      	mov	r3, r1
 80066b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80066b2:	78fb      	ldrb	r3, [r7, #3]
 80066b4:	f003 0207 	and.w	r2, r3, #7
 80066b8:	6879      	ldr	r1, [r7, #4]
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	00db      	lsls	r3, r3, #3
 80066c2:	440b      	add	r3, r1
 80066c4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80066c8:	681b      	ldr	r3, [r3, #0]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b086      	sub	sp, #24
 80066da:	af00      	add	r7, sp, #0
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	603b      	str	r3, [r7, #0]
 80066e2:	460b      	mov	r3, r1
 80066e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066e6:	7afb      	ldrb	r3, [r7, #11]
 80066e8:	f003 0307 	and.w	r3, r3, #7
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	4613      	mov	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	00db      	lsls	r3, r3, #3
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	4413      	add	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2200      	movs	r2, #0
 800671a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	2201      	movs	r2, #1
 8006720:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006722:	7afb      	ldrb	r3, [r7, #11]
 8006724:	f003 0307 	and.w	r3, r3, #7
 8006728:	b2da      	uxtb	r2, r3
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6979      	ldr	r1, [r7, #20]
 8006734:	4618      	mov	r0, r3
 8006736:	f004 ff28 	bl	800b58a <USB_EPStartXfer>

  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3718      	adds	r7, #24
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006750:	78fb      	ldrb	r3, [r7, #3]
 8006752:	f003 0207 	and.w	r2, r3, #7
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	429a      	cmp	r2, r3
 800675c:	d901      	bls.n	8006762 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e03e      	b.n	80067e0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006762:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006766:	2b00      	cmp	r3, #0
 8006768:	da0e      	bge.n	8006788 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800676a:	78fb      	ldrb	r3, [r7, #3]
 800676c:	f003 0307 	and.w	r3, r3, #7
 8006770:	1c5a      	adds	r2, r3, #1
 8006772:	4613      	mov	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	00db      	lsls	r3, r3, #3
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	4413      	add	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2201      	movs	r2, #1
 8006784:	705a      	strb	r2, [r3, #1]
 8006786:	e00c      	b.n	80067a2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006788:	78fa      	ldrb	r2, [r7, #3]
 800678a:	4613      	mov	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	4413      	add	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2201      	movs	r2, #1
 80067a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	f003 0307 	and.w	r3, r3, #7
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d101      	bne.n	80067c2 <HAL_PCD_EP_SetStall+0x7e>
 80067be:	2302      	movs	r3, #2
 80067c0:	e00e      	b.n	80067e0 <HAL_PCD_EP_SetStall+0x9c>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68f9      	ldr	r1, [r7, #12]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f006 fa8b 	bl	800ccec <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	460b      	mov	r3, r1
 80067f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80067f4:	78fb      	ldrb	r3, [r7, #3]
 80067f6:	f003 020f 	and.w	r2, r3, #15
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d901      	bls.n	8006806 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e040      	b.n	8006888 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006806:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800680a:	2b00      	cmp	r3, #0
 800680c:	da0e      	bge.n	800682c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800680e:	78fb      	ldrb	r3, [r7, #3]
 8006810:	f003 0307 	and.w	r3, r3, #7
 8006814:	1c5a      	adds	r2, r3, #1
 8006816:	4613      	mov	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	00db      	lsls	r3, r3, #3
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	4413      	add	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2201      	movs	r2, #1
 8006828:	705a      	strb	r2, [r3, #1]
 800682a:	e00e      	b.n	800684a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800682c:	78fb      	ldrb	r3, [r7, #3]
 800682e:	f003 0207 	and.w	r2, r3, #7
 8006832:	4613      	mov	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	00db      	lsls	r3, r3, #3
 800683a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	4413      	add	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006850:	78fb      	ldrb	r3, [r7, #3]
 8006852:	f003 0307 	and.w	r3, r3, #7
 8006856:	b2da      	uxtb	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006862:	2b01      	cmp	r3, #1
 8006864:	d101      	bne.n	800686a <HAL_PCD_EP_ClrStall+0x82>
 8006866:	2302      	movs	r3, #2
 8006868:	e00e      	b.n	8006888 <HAL_PCD_EP_ClrStall+0xa0>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68f9      	ldr	r1, [r7, #12]
 8006878:	4618      	mov	r0, r3
 800687a:	f006 fa88 	bl	800cd8e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b096      	sub	sp, #88	; 0x58
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006898:	e3b1      	b.n	8006ffe <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80068a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80068a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	f003 030f 	and.w	r3, r3, #15
 80068b0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80068b4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f040 8173 	bne.w	8006ba4 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80068be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80068c2:	f003 0310 	and.w	r3, r3, #16
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d150      	bne.n	800696c <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	881b      	ldrh	r3, [r3, #0]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80068d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068da:	81fb      	strh	r3, [r7, #14]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	89fb      	ldrh	r3, [r7, #14]
 80068e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	3328      	adds	r3, #40	; 0x28
 80068f2:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	461a      	mov	r2, r3
 8006900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	00db      	lsls	r3, r3, #3
 8006906:	4413      	add	r3, r2
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	6812      	ldr	r2, [r2, #0]
 800690c:	4413      	add	r3, r2
 800690e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800691a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800691c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800691e:	695a      	ldr	r2, [r3, #20]
 8006920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006922:	69db      	ldr	r3, [r3, #28]
 8006924:	441a      	add	r2, r3
 8006926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006928:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800692a:	2100      	movs	r1, #0
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f00c ff68 	bl	8013802 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 835f 	beq.w	8006ffe <PCD_EP_ISR_Handler+0x76e>
 8006940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	2b00      	cmp	r3, #0
 8006946:	f040 835a 	bne.w	8006ffe <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006950:	b2db      	uxtb	r3, r3
 8006952:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006956:	b2da      	uxtb	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	b292      	uxth	r2, r2
 800695e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800696a:	e348      	b.n	8006ffe <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006972:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800697e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006986:	2b00      	cmp	r3, #0
 8006988:	d032      	beq.n	80069f0 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006992:	b29b      	uxth	r3, r3
 8006994:	461a      	mov	r2, r3
 8006996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	00db      	lsls	r3, r3, #3
 800699c:	4413      	add	r3, r2
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	6812      	ldr	r2, [r2, #0]
 80069a2:	4413      	add	r3, r2
 80069a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80069ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069b0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6818      	ldr	r0, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80069bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069be:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80069c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069c2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	f006 fb0d 	bl	800cfe4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80069d6:	4013      	ands	r3, r2
 80069d8:	823b      	strh	r3, [r7, #16]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	8a3a      	ldrh	r2, [r7, #16]
 80069e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80069e4:	b292      	uxth	r2, r2
 80069e6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f00c fedd 	bl	80137a8 <HAL_PCD_SetupStageCallback>
 80069ee:	e306      	b.n	8006ffe <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80069f0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f280 8302 	bge.w	8006ffe <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006a06:	4013      	ands	r3, r2
 8006a08:	83fb      	strh	r3, [r7, #30]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	8bfa      	ldrh	r2, [r7, #30]
 8006a10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a14:	b292      	uxth	r2, r2
 8006a16:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	461a      	mov	r2, r3
 8006a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	00db      	lsls	r3, r3, #3
 8006a2a:	4413      	add	r3, r2
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	6812      	ldr	r2, [r2, #0]
 8006a30:	4413      	add	r3, r2
 8006a32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a36:	881b      	ldrh	r3, [r3, #0]
 8006a38:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a3e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a42:	69db      	ldr	r3, [r3, #28]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d019      	beq.n	8006a7c <PCD_EP_ISR_Handler+0x1ec>
 8006a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d015      	beq.n	8006a7c <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6818      	ldr	r0, [r3, #0]
 8006a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a56:	6959      	ldr	r1, [r3, #20]
 8006a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a5a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a5e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	f006 fabf 	bl	800cfe4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a68:	695a      	ldr	r2, [r3, #20]
 8006a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	441a      	add	r2, r3
 8006a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a72:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006a74:	2100      	movs	r1, #0
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f00c fea8 	bl	80137cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006a86:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f040 82b5 	bne.w	8006ffe <PCD_EP_ISR_Handler+0x76e>
 8006a94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006a98:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006a9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006aa0:	f000 82ad 	beq.w	8006ffe <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	4413      	add	r3, r2
 8006aba:	61bb      	str	r3, [r7, #24]
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ac2:	617b      	str	r3, [r7, #20]
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	881b      	ldrh	r3, [r3, #0]
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	801a      	strh	r2, [r3, #0]
 8006ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	2b3e      	cmp	r3, #62	; 0x3e
 8006ada:	d91d      	bls.n	8006b18 <PCD_EP_ISR_Handler+0x288>
 8006adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	095b      	lsrs	r3, r3, #5
 8006ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8006ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	f003 031f 	and.w	r3, r3, #31
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d102      	bne.n	8006af6 <PCD_EP_ISR_Handler+0x266>
 8006af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006af2:	3b01      	subs	r3, #1
 8006af4:	647b      	str	r3, [r7, #68]	; 0x44
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	029b      	lsls	r3, r3, #10
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	4313      	orrs	r3, r2
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	801a      	strh	r2, [r3, #0]
 8006b16:	e026      	b.n	8006b66 <PCD_EP_ISR_Handler+0x2d6>
 8006b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10a      	bne.n	8006b36 <PCD_EP_ISR_Handler+0x2a6>
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	801a      	strh	r2, [r3, #0]
 8006b34:	e017      	b.n	8006b66 <PCD_EP_ISR_Handler+0x2d6>
 8006b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	085b      	lsrs	r3, r3, #1
 8006b3c:	647b      	str	r3, [r7, #68]	; 0x44
 8006b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d002      	beq.n	8006b50 <PCD_EP_ISR_Handler+0x2c0>
 8006b4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	029b      	lsls	r3, r3, #10
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b76:	827b      	strh	r3, [r7, #18]
 8006b78:	8a7b      	ldrh	r3, [r7, #18]
 8006b7a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b7e:	827b      	strh	r3, [r7, #18]
 8006b80:	8a7b      	ldrh	r3, [r7, #18]
 8006b82:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b86:	827b      	strh	r3, [r7, #18]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	8a7b      	ldrh	r3, [r7, #18]
 8006b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	8013      	strh	r3, [r2, #0]
 8006ba2:	e22c      	b.n	8006ffe <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006bb8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f280 80f6 	bge.w	8006dae <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006bd8:	4013      	ands	r3, r2
 8006bda:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	461a      	mov	r2, r3
 8006be4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006bf0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bf4:	b292      	uxth	r2, r2
 8006bf6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006bf8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	00db      	lsls	r3, r3, #3
 8006c04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c10:	7b1b      	ldrb	r3, [r3, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d123      	bne.n	8006c5e <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	461a      	mov	r2, r3
 8006c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	4413      	add	r3, r2
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	6812      	ldr	r2, [r2, #0]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c34:	881b      	ldrh	r3, [r3, #0]
 8006c36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c3a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8006c3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 808e 	beq.w	8006d64 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6818      	ldr	r0, [r3, #0]
 8006c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c4e:	6959      	ldr	r1, [r3, #20]
 8006c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c52:	88da      	ldrh	r2, [r3, #6]
 8006c54:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006c58:	f006 f9c4 	bl	800cfe4 <USB_ReadPMA>
 8006c5c:	e082      	b.n	8006d64 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c60:	78db      	ldrb	r3, [r3, #3]
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d10a      	bne.n	8006c7c <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006c66:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f9d3 	bl	800701a <HAL_PCD_EP_DB_Receive>
 8006c74:	4603      	mov	r3, r0
 8006c76:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006c7a:	e073      	b.n	8006d64 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	461a      	mov	r2, r3
 8006c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c96:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	441a      	add	r2, r3
 8006ca8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	881b      	ldrh	r3, [r3, #0]
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d022      	beq.n	8006d20 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	00db      	lsls	r3, r3, #3
 8006cec:	4413      	add	r3, r2
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	6812      	ldr	r2, [r2, #0]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cfe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8006d02:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d02c      	beq.n	8006d64 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6818      	ldr	r0, [r3, #0]
 8006d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d10:	6959      	ldr	r1, [r3, #20]
 8006d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d14:	891a      	ldrh	r2, [r3, #8]
 8006d16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006d1a:	f006 f963 	bl	800cfe4 <USB_ReadPMA>
 8006d1e:	e021      	b.n	8006d64 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	00db      	lsls	r3, r3, #3
 8006d32:	4413      	add	r3, r2
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	6812      	ldr	r2, [r2, #0]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d44:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8006d48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d009      	beq.n	8006d64 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6818      	ldr	r0, [r3, #0]
 8006d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d56:	6959      	ldr	r1, [r3, #20]
 8006d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d5a:	895a      	ldrh	r2, [r3, #10]
 8006d5c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006d60:	f006 f940 	bl	800cfe4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d66:	69da      	ldr	r2, [r3, #28]
 8006d68:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006d6c:	441a      	add	r2, r3
 8006d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d70:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d74:	695a      	ldr	r2, [r3, #20]
 8006d76:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006d7a:	441a      	add	r2, r3
 8006d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d7e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d005      	beq.n	8006d94 <PCD_EP_ISR_Handler+0x504>
 8006d88:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8006d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d206      	bcs.n	8006da2 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	4619      	mov	r1, r3
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f00c fd16 	bl	80137cc <HAL_PCD_DataOutStageCallback>
 8006da0:	e005      	b.n	8006dae <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006da8:	4618      	mov	r0, r3
 8006daa:	f004 fbee 	bl	800b58a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006dae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f000 8121 	beq.w	8006ffe <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8006dbc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006dc0:	1c5a      	adds	r2, r3, #1
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	00db      	lsls	r3, r3, #3
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	4413      	add	r3, r2
 8006dce:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	881b      	ldrh	r3, [r3, #0]
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	441a      	add	r2, r3
 8006dfc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e0e:	78db      	ldrb	r3, [r3, #3]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	f040 80a2 	bne.w	8006f5a <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8006e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e18:	2200      	movs	r2, #0
 8006e1a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006e1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e1e:	7b1b      	ldrb	r3, [r3, #12]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 8093 	beq.w	8006f4c <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006e26:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d046      	beq.n	8006ec0 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e34:	785b      	ldrb	r3, [r3, #1]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d126      	bne.n	8006e88 <PCD_EP_ISR_Handler+0x5f8>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	4413      	add	r3, r2
 8006e50:	627b      	str	r3, [r7, #36]	; 0x24
 8006e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	00da      	lsls	r2, r3, #3
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e60:	623b      	str	r3, [r7, #32]
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	6a3b      	ldr	r3, [r7, #32]
 8006e70:	801a      	strh	r2, [r3, #0]
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	801a      	strh	r2, [r3, #0]
 8006e86:	e061      	b.n	8006f4c <PCD_EP_ISR_Handler+0x6bc>
 8006e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e8a:	785b      	ldrb	r3, [r3, #1]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d15d      	bne.n	8006f4c <PCD_EP_ISR_Handler+0x6bc>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea4:	4413      	add	r3, r2
 8006ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	00da      	lsls	r2, r3, #3
 8006eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006eb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	2200      	movs	r2, #0
 8006ebc:	801a      	strh	r2, [r3, #0]
 8006ebe:	e045      	b.n	8006f4c <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ec8:	785b      	ldrb	r3, [r3, #1]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d126      	bne.n	8006f1c <PCD_EP_ISR_Handler+0x68c>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	461a      	mov	r2, r3
 8006ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee2:	4413      	add	r3, r2
 8006ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	00da      	lsls	r2, r3, #3
 8006eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eee:	4413      	add	r3, r2
 8006ef0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ef4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	801a      	strh	r2, [r3, #0]
 8006f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f18:	801a      	strh	r2, [r3, #0]
 8006f1a:	e017      	b.n	8006f4c <PCD_EP_ISR_Handler+0x6bc>
 8006f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f1e:	785b      	ldrb	r3, [r3, #1]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d113      	bne.n	8006f4c <PCD_EP_ISR_Handler+0x6bc>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	461a      	mov	r2, r3
 8006f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f32:	4413      	add	r3, r2
 8006f34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	00da      	lsls	r2, r3, #3
 8006f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3e:	4413      	add	r3, r2
 8006f40:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f44:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f48:	2200      	movs	r2, #0
 8006f4a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f00c fc55 	bl	8013802 <HAL_PCD_DataInStageCallback>
 8006f58:	e051      	b.n	8006ffe <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006f5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d144      	bne.n	8006ff0 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	461a      	mov	r2, r3
 8006f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	00db      	lsls	r3, r3, #3
 8006f78:	4413      	add	r3, r2
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	6812      	ldr	r2, [r2, #0]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f84:	881b      	ldrh	r3, [r3, #0]
 8006f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f8a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f90:	699a      	ldr	r2, [r3, #24]
 8006f92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d907      	bls.n	8006faa <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8006f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f9c:	699a      	ldr	r2, [r3, #24]
 8006f9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006fa2:	1ad2      	subs	r2, r2, r3
 8006fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fa6:	619a      	str	r2, [r3, #24]
 8006fa8:	e002      	b.n	8006fb0 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8006faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fac:	2200      	movs	r2, #0
 8006fae:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006fb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d106      	bne.n	8006fc6 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f00c fc1f 	bl	8013802 <HAL_PCD_DataInStageCallback>
 8006fc4:	e01b      	b.n	8006ffe <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fc8:	695a      	ldr	r2, [r3, #20]
 8006fca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006fce:	441a      	add	r2, r3
 8006fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fd2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fd6:	69da      	ldr	r2, [r3, #28]
 8006fd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006fdc:	441a      	add	r2, r3
 8006fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fe0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f004 face 	bl	800b58a <USB_EPStartXfer>
 8006fee:	e006      	b.n	8006ffe <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006ff0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f917 	bl	800722c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007006:	b29b      	uxth	r3, r3
 8007008:	b21b      	sxth	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	f6ff ac45 	blt.w	800689a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3758      	adds	r7, #88	; 0x58
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b088      	sub	sp, #32
 800701e:	af00      	add	r7, sp, #0
 8007020:	60f8      	str	r0, [r7, #12]
 8007022:	60b9      	str	r1, [r7, #8]
 8007024:	4613      	mov	r3, r2
 8007026:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007028:	88fb      	ldrh	r3, [r7, #6]
 800702a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d07c      	beq.n	800712c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800703a:	b29b      	uxth	r3, r3
 800703c:	461a      	mov	r2, r3
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	00db      	lsls	r3, r3, #3
 8007044:	4413      	add	r3, r2
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	6812      	ldr	r2, [r2, #0]
 800704a:	4413      	add	r3, r2
 800704c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007056:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	699a      	ldr	r2, [r3, #24]
 800705c:	8b7b      	ldrh	r3, [r7, #26]
 800705e:	429a      	cmp	r2, r3
 8007060:	d306      	bcc.n	8007070 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	699a      	ldr	r2, [r3, #24]
 8007066:	8b7b      	ldrh	r3, [r7, #26]
 8007068:	1ad2      	subs	r2, r2, r3
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	619a      	str	r2, [r3, #24]
 800706e:	e002      	b.n	8007076 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2200      	movs	r2, #0
 8007074:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d123      	bne.n	80070c6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	461a      	mov	r2, r3
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	b29b      	uxth	r3, r3
 8007090:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007098:	833b      	strh	r3, [r7, #24]
 800709a:	8b3b      	ldrh	r3, [r7, #24]
 800709c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80070a0:	833b      	strh	r3, [r7, #24]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	461a      	mov	r2, r3
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	441a      	add	r2, r3
 80070b0:	8b3b      	ldrh	r3, [r7, #24]
 80070b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80070c6:	88fb      	ldrh	r3, [r7, #6]
 80070c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d01f      	beq.n	8007110 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	461a      	mov	r2, r3
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	881b      	ldrh	r3, [r3, #0]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ea:	82fb      	strh	r3, [r7, #22]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	461a      	mov	r2, r3
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	441a      	add	r2, r3
 80070fa:	8afb      	ldrh	r3, [r7, #22]
 80070fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007100:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007108:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800710c:	b29b      	uxth	r3, r3
 800710e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007110:	8b7b      	ldrh	r3, [r7, #26]
 8007112:	2b00      	cmp	r3, #0
 8007114:	f000 8085 	beq.w	8007222 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6818      	ldr	r0, [r3, #0]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	6959      	ldr	r1, [r3, #20]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	891a      	ldrh	r2, [r3, #8]
 8007124:	8b7b      	ldrh	r3, [r7, #26]
 8007126:	f005 ff5d 	bl	800cfe4 <USB_ReadPMA>
 800712a:	e07a      	b.n	8007222 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007134:	b29b      	uxth	r3, r3
 8007136:	461a      	mov	r2, r3
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	00db      	lsls	r3, r3, #3
 800713e:	4413      	add	r3, r2
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	6812      	ldr	r2, [r2, #0]
 8007144:	4413      	add	r3, r2
 8007146:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007150:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	699a      	ldr	r2, [r3, #24]
 8007156:	8b7b      	ldrh	r3, [r7, #26]
 8007158:	429a      	cmp	r2, r3
 800715a:	d306      	bcc.n	800716a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	699a      	ldr	r2, [r3, #24]
 8007160:	8b7b      	ldrh	r3, [r7, #26]
 8007162:	1ad2      	subs	r2, r2, r3
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	619a      	str	r2, [r3, #24]
 8007168:	e002      	b.n	8007170 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	2200      	movs	r2, #0
 800716e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d123      	bne.n	80071c0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	461a      	mov	r2, r3
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4413      	add	r3, r2
 8007186:	881b      	ldrh	r3, [r3, #0]
 8007188:	b29b      	uxth	r3, r3
 800718a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800718e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007192:	83fb      	strh	r3, [r7, #30]
 8007194:	8bfb      	ldrh	r3, [r7, #30]
 8007196:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800719a:	83fb      	strh	r3, [r7, #30]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	461a      	mov	r2, r3
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	441a      	add	r2, r3
 80071aa:	8bfb      	ldrh	r3, [r7, #30]
 80071ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071bc:	b29b      	uxth	r3, r3
 80071be:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80071c0:	88fb      	ldrh	r3, [r7, #6]
 80071c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d11f      	bne.n	800720a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	b29b      	uxth	r3, r3
 80071dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e4:	83bb      	strh	r3, [r7, #28]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	461a      	mov	r2, r3
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	441a      	add	r2, r3
 80071f4:	8bbb      	ldrh	r3, [r7, #28]
 80071f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007202:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007206:	b29b      	uxth	r3, r3
 8007208:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800720a:	8b7b      	ldrh	r3, [r7, #26]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d008      	beq.n	8007222 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6818      	ldr	r0, [r3, #0]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	6959      	ldr	r1, [r3, #20]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	895a      	ldrh	r2, [r3, #10]
 800721c:	8b7b      	ldrh	r3, [r7, #26]
 800721e:	f005 fee1 	bl	800cfe4 <USB_ReadPMA>
    }
  }

  return count;
 8007222:	8b7b      	ldrh	r3, [r7, #26]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3720      	adds	r7, #32
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b0a4      	sub	sp, #144	; 0x90
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	4613      	mov	r3, r2
 8007238:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800723a:	88fb      	ldrh	r3, [r7, #6]
 800723c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 81db 	beq.w	80075fc <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800724e:	b29b      	uxth	r3, r3
 8007250:	461a      	mov	r2, r3
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	00db      	lsls	r3, r3, #3
 8007258:	4413      	add	r3, r2
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	6812      	ldr	r2, [r2, #0]
 800725e:	4413      	add	r3, r2
 8007260:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800726a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	699a      	ldr	r2, [r3, #24]
 8007272:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007276:	429a      	cmp	r2, r3
 8007278:	d907      	bls.n	800728a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	699a      	ldr	r2, [r3, #24]
 800727e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007282:	1ad2      	subs	r2, r2, r3
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	619a      	str	r2, [r3, #24]
 8007288:	e002      	b.n	8007290 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	2200      	movs	r2, #0
 800728e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	2b00      	cmp	r3, #0
 8007296:	f040 80b9 	bne.w	800740c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	785b      	ldrb	r3, [r3, #1]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d126      	bne.n	80072f0 <HAL_PCD_EP_DB_Transmit+0xc4>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	461a      	mov	r2, r3
 80072b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b6:	4413      	add	r3, r2
 80072b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	00da      	lsls	r2, r3, #3
 80072c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c2:	4413      	add	r3, r2
 80072c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80072ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d8:	801a      	strh	r2, [r3, #0]
 80072da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072dc:	881b      	ldrh	r3, [r3, #0]
 80072de:	b29b      	uxth	r3, r3
 80072e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ec:	801a      	strh	r2, [r3, #0]
 80072ee:	e01a      	b.n	8007326 <HAL_PCD_EP_DB_Transmit+0xfa>
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	785b      	ldrb	r3, [r3, #1]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d116      	bne.n	8007326 <HAL_PCD_EP_DB_Transmit+0xfa>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	637b      	str	r3, [r7, #52]	; 0x34
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007306:	b29b      	uxth	r3, r3
 8007308:	461a      	mov	r2, r3
 800730a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800730c:	4413      	add	r3, r2
 800730e:	637b      	str	r3, [r7, #52]	; 0x34
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	00da      	lsls	r2, r3, #3
 8007316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007318:	4413      	add	r3, r2
 800731a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800731e:	633b      	str	r3, [r7, #48]	; 0x30
 8007320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007322:	2200      	movs	r2, #0
 8007324:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	627b      	str	r3, [r7, #36]	; 0x24
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	785b      	ldrb	r3, [r3, #1]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d126      	bne.n	8007382 <HAL_PCD_EP_DB_Transmit+0x156>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	61fb      	str	r3, [r7, #28]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007342:	b29b      	uxth	r3, r3
 8007344:	461a      	mov	r2, r3
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	4413      	add	r3, r2
 800734a:	61fb      	str	r3, [r7, #28]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	00da      	lsls	r2, r3, #3
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	4413      	add	r3, r2
 8007356:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800735a:	61bb      	str	r3, [r7, #24]
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	881b      	ldrh	r3, [r3, #0]
 8007360:	b29b      	uxth	r3, r3
 8007362:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007366:	b29a      	uxth	r2, r3
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	801a      	strh	r2, [r3, #0]
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	881b      	ldrh	r3, [r3, #0]
 8007370:	b29b      	uxth	r3, r3
 8007372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800737a:	b29a      	uxth	r2, r3
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	801a      	strh	r2, [r3, #0]
 8007380:	e017      	b.n	80073b2 <HAL_PCD_EP_DB_Transmit+0x186>
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	785b      	ldrb	r3, [r3, #1]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d113      	bne.n	80073b2 <HAL_PCD_EP_DB_Transmit+0x186>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007392:	b29b      	uxth	r3, r3
 8007394:	461a      	mov	r2, r3
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	4413      	add	r3, r2
 800739a:	627b      	str	r3, [r7, #36]	; 0x24
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	00da      	lsls	r2, r3, #3
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	4413      	add	r3, r2
 80073a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073aa:	623b      	str	r3, [r7, #32]
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	2200      	movs	r2, #0
 80073b0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	4619      	mov	r1, r3
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f00c fa22 	bl	8013802 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80073be:	88fb      	ldrh	r3, [r7, #6]
 80073c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 82fa 	beq.w	80079be <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e4:	82fb      	strh	r3, [r7, #22]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	461a      	mov	r2, r3
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	441a      	add	r2, r3
 80073f4:	8afb      	ldrh	r3, [r7, #22]
 80073f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007406:	b29b      	uxth	r3, r3
 8007408:	8013      	strh	r3, [r2, #0]
 800740a:	e2d8      	b.n	80079be <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800740c:	88fb      	ldrh	r3, [r7, #6]
 800740e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d021      	beq.n	800745a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800742c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007430:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	461a      	mov	r2, r3
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	441a      	add	r2, r3
 8007442:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800744a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800744e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007456:	b29b      	uxth	r3, r3
 8007458:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007460:	2b01      	cmp	r3, #1
 8007462:	f040 82ac 	bne.w	80079be <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	695a      	ldr	r2, [r3, #20]
 800746a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800746e:	441a      	add	r2, r3
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	69da      	ldr	r2, [r3, #28]
 8007478:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800747c:	441a      	add	r2, r3
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	6a1a      	ldr	r2, [r3, #32]
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	429a      	cmp	r2, r3
 800748c:	d30b      	bcc.n	80074a6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	6a1a      	ldr	r2, [r3, #32]
 800749a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800749e:	1ad2      	subs	r2, r2, r3
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	621a      	str	r2, [r3, #32]
 80074a4:	e017      	b.n	80074d6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d108      	bne.n	80074c0 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80074ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80074b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80074be:	e00a      	b.n	80074d6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2200      	movs	r2, #0
 80074d4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	785b      	ldrb	r3, [r3, #1]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d165      	bne.n	80075aa <HAL_PCD_EP_DB_Transmit+0x37e>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	461a      	mov	r2, r3
 80074f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074f2:	4413      	add	r3, r2
 80074f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	00da      	lsls	r2, r3, #3
 80074fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074fe:	4413      	add	r3, r2
 8007500:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007504:	63bb      	str	r3, [r7, #56]	; 0x38
 8007506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	b29b      	uxth	r3, r3
 800750c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007510:	b29a      	uxth	r2, r3
 8007512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007514:	801a      	strh	r2, [r3, #0]
 8007516:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800751a:	2b3e      	cmp	r3, #62	; 0x3e
 800751c:	d91d      	bls.n	800755a <HAL_PCD_EP_DB_Transmit+0x32e>
 800751e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007522:	095b      	lsrs	r3, r3, #5
 8007524:	64bb      	str	r3, [r7, #72]	; 0x48
 8007526:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800752a:	f003 031f 	and.w	r3, r3, #31
 800752e:	2b00      	cmp	r3, #0
 8007530:	d102      	bne.n	8007538 <HAL_PCD_EP_DB_Transmit+0x30c>
 8007532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007534:	3b01      	subs	r3, #1
 8007536:	64bb      	str	r3, [r7, #72]	; 0x48
 8007538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	b29a      	uxth	r2, r3
 800753e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007540:	b29b      	uxth	r3, r3
 8007542:	029b      	lsls	r3, r3, #10
 8007544:	b29b      	uxth	r3, r3
 8007546:	4313      	orrs	r3, r2
 8007548:	b29b      	uxth	r3, r3
 800754a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800754e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007552:	b29a      	uxth	r2, r3
 8007554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007556:	801a      	strh	r2, [r3, #0]
 8007558:	e044      	b.n	80075e4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800755a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10a      	bne.n	8007578 <HAL_PCD_EP_DB_Transmit+0x34c>
 8007562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007564:	881b      	ldrh	r3, [r3, #0]
 8007566:	b29b      	uxth	r3, r3
 8007568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800756c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007570:	b29a      	uxth	r2, r3
 8007572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007574:	801a      	strh	r2, [r3, #0]
 8007576:	e035      	b.n	80075e4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8007578:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800757c:	085b      	lsrs	r3, r3, #1
 800757e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007580:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b00      	cmp	r3, #0
 800758a:	d002      	beq.n	8007592 <HAL_PCD_EP_DB_Transmit+0x366>
 800758c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800758e:	3301      	adds	r3, #1
 8007590:	64bb      	str	r3, [r7, #72]	; 0x48
 8007592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	b29a      	uxth	r2, r3
 8007598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800759a:	b29b      	uxth	r3, r3
 800759c:	029b      	lsls	r3, r3, #10
 800759e:	b29b      	uxth	r3, r3
 80075a0:	4313      	orrs	r3, r2
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a6:	801a      	strh	r2, [r3, #0]
 80075a8:	e01c      	b.n	80075e4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	785b      	ldrb	r3, [r3, #1]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d118      	bne.n	80075e4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	647b      	str	r3, [r7, #68]	; 0x44
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	461a      	mov	r2, r3
 80075c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075c6:	4413      	add	r3, r2
 80075c8:	647b      	str	r3, [r7, #68]	; 0x44
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	00da      	lsls	r2, r3, #3
 80075d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d2:	4413      	add	r3, r2
 80075d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075d8:	643b      	str	r3, [r7, #64]	; 0x40
 80075da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075de:	b29a      	uxth	r2, r3
 80075e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075e2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6818      	ldr	r0, [r3, #0]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	6959      	ldr	r1, [r3, #20]
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	891a      	ldrh	r2, [r3, #8]
 80075f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	f005 fcb3 	bl	800cf60 <USB_WritePMA>
 80075fa:	e1e0      	b.n	80079be <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007604:	b29b      	uxth	r3, r3
 8007606:	461a      	mov	r2, r3
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	00db      	lsls	r3, r3, #3
 800760e:	4413      	add	r3, r2
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	6812      	ldr	r2, [r2, #0]
 8007614:	4413      	add	r3, r2
 8007616:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800761a:	881b      	ldrh	r3, [r3, #0]
 800761c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007620:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	699a      	ldr	r2, [r3, #24]
 8007628:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800762c:	429a      	cmp	r2, r3
 800762e:	d307      	bcc.n	8007640 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	699a      	ldr	r2, [r3, #24]
 8007634:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007638:	1ad2      	subs	r2, r2, r3
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	619a      	str	r2, [r3, #24]
 800763e:	e002      	b.n	8007646 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2200      	movs	r2, #0
 8007644:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	2b00      	cmp	r3, #0
 800764c:	f040 80c0 	bne.w	80077d0 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	785b      	ldrb	r3, [r3, #1]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d126      	bne.n	80076a6 <HAL_PCD_EP_DB_Transmit+0x47a>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007666:	b29b      	uxth	r3, r3
 8007668:	461a      	mov	r2, r3
 800766a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800766c:	4413      	add	r3, r2
 800766e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	00da      	lsls	r2, r3, #3
 8007676:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007678:	4413      	add	r3, r2
 800767a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800767e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007682:	881b      	ldrh	r3, [r3, #0]
 8007684:	b29b      	uxth	r3, r3
 8007686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800768a:	b29a      	uxth	r2, r3
 800768c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800768e:	801a      	strh	r2, [r3, #0]
 8007690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007692:	881b      	ldrh	r3, [r3, #0]
 8007694:	b29b      	uxth	r3, r3
 8007696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800769a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800769e:	b29a      	uxth	r2, r3
 80076a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076a2:	801a      	strh	r2, [r3, #0]
 80076a4:	e01a      	b.n	80076dc <HAL_PCD_EP_DB_Transmit+0x4b0>
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	785b      	ldrb	r3, [r3, #1]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d116      	bne.n	80076dc <HAL_PCD_EP_DB_Transmit+0x4b0>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	667b      	str	r3, [r7, #100]	; 0x64
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076bc:	b29b      	uxth	r3, r3
 80076be:	461a      	mov	r2, r3
 80076c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076c2:	4413      	add	r3, r2
 80076c4:	667b      	str	r3, [r7, #100]	; 0x64
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	00da      	lsls	r2, r3, #3
 80076cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076ce:	4413      	add	r3, r2
 80076d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80076d4:	663b      	str	r3, [r7, #96]	; 0x60
 80076d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076d8:	2200      	movs	r2, #0
 80076da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	677b      	str	r3, [r7, #116]	; 0x74
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	785b      	ldrb	r3, [r3, #1]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d12b      	bne.n	8007742 <HAL_PCD_EP_DB_Transmit+0x516>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	461a      	mov	r2, r3
 80076fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076fe:	4413      	add	r3, r2
 8007700:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	00da      	lsls	r2, r3, #3
 8007708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800770a:	4413      	add	r3, r2
 800770c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007710:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007714:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	b29b      	uxth	r3, r3
 800771c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007720:	b29a      	uxth	r2, r3
 8007722:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007726:	801a      	strh	r2, [r3, #0]
 8007728:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	b29b      	uxth	r3, r3
 8007730:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007734:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007738:	b29a      	uxth	r2, r3
 800773a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800773e:	801a      	strh	r2, [r3, #0]
 8007740:	e017      	b.n	8007772 <HAL_PCD_EP_DB_Transmit+0x546>
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	785b      	ldrb	r3, [r3, #1]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d113      	bne.n	8007772 <HAL_PCD_EP_DB_Transmit+0x546>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007752:	b29b      	uxth	r3, r3
 8007754:	461a      	mov	r2, r3
 8007756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007758:	4413      	add	r3, r2
 800775a:	677b      	str	r3, [r7, #116]	; 0x74
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	00da      	lsls	r2, r3, #3
 8007762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007764:	4413      	add	r3, r2
 8007766:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800776a:	673b      	str	r3, [r7, #112]	; 0x70
 800776c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800776e:	2200      	movs	r2, #0
 8007770:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	4619      	mov	r1, r3
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f00c f842 	bl	8013802 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800777e:	88fb      	ldrh	r3, [r7, #6]
 8007780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007784:	2b00      	cmp	r3, #0
 8007786:	f040 811a 	bne.w	80079be <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	461a      	mov	r2, r3
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	881b      	ldrh	r3, [r3, #0]
 800779a:	b29b      	uxth	r3, r3
 800779c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	461a      	mov	r2, r3
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	441a      	add	r2, r3
 80077b6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80077ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	8013      	strh	r3, [r2, #0]
 80077ce:	e0f6      	b.n	80079be <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80077d0:	88fb      	ldrh	r3, [r7, #6]
 80077d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d121      	bne.n	800781e <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	461a      	mov	r2, r3
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	4413      	add	r3, r2
 80077e8:	881b      	ldrh	r3, [r3, #0]
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	461a      	mov	r2, r3
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	441a      	add	r2, r3
 8007806:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800780a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800780e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007812:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800781a:	b29b      	uxth	r3, r3
 800781c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007824:	2b01      	cmp	r3, #1
 8007826:	f040 80ca 	bne.w	80079be <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	695a      	ldr	r2, [r3, #20]
 800782e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007832:	441a      	add	r2, r3
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	69da      	ldr	r2, [r3, #28]
 800783c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007840:	441a      	add	r2, r3
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	6a1a      	ldr	r2, [r3, #32]
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	429a      	cmp	r2, r3
 8007850:	d30b      	bcc.n	800786a <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	6a1a      	ldr	r2, [r3, #32]
 800785e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007862:	1ad2      	subs	r2, r2, r3
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	621a      	str	r2, [r3, #32]
 8007868:	e017      	b.n	800789a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d108      	bne.n	8007884 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8007872:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007876:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007882:	e00a      	b.n	800789a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2200      	movs	r2, #0
 8007890:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	657b      	str	r3, [r7, #84]	; 0x54
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	785b      	ldrb	r3, [r3, #1]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d165      	bne.n	8007974 <HAL_PCD_EP_DB_Transmit+0x748>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	461a      	mov	r2, r3
 80078ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078bc:	4413      	add	r3, r2
 80078be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	00da      	lsls	r2, r3, #3
 80078c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078c8:	4413      	add	r3, r2
 80078ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80078d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078d2:	881b      	ldrh	r3, [r3, #0]
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078da:	b29a      	uxth	r2, r3
 80078dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078de:	801a      	strh	r2, [r3, #0]
 80078e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078e4:	2b3e      	cmp	r3, #62	; 0x3e
 80078e6:	d91d      	bls.n	8007924 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80078e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078ec:	095b      	lsrs	r3, r3, #5
 80078ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80078f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078f4:	f003 031f 	and.w	r3, r3, #31
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d102      	bne.n	8007902 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80078fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078fe:	3b01      	subs	r3, #1
 8007900:	66bb      	str	r3, [r7, #104]	; 0x68
 8007902:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	b29a      	uxth	r2, r3
 8007908:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800790a:	b29b      	uxth	r3, r3
 800790c:	029b      	lsls	r3, r3, #10
 800790e:	b29b      	uxth	r3, r3
 8007910:	4313      	orrs	r3, r2
 8007912:	b29b      	uxth	r3, r3
 8007914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800791c:	b29a      	uxth	r2, r3
 800791e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007920:	801a      	strh	r2, [r3, #0]
 8007922:	e041      	b.n	80079a8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007924:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10a      	bne.n	8007942 <HAL_PCD_EP_DB_Transmit+0x716>
 800792c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800792e:	881b      	ldrh	r3, [r3, #0]
 8007930:	b29b      	uxth	r3, r3
 8007932:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007936:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800793a:	b29a      	uxth	r2, r3
 800793c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800793e:	801a      	strh	r2, [r3, #0]
 8007940:	e032      	b.n	80079a8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007942:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007946:	085b      	lsrs	r3, r3, #1
 8007948:	66bb      	str	r3, [r7, #104]	; 0x68
 800794a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	2b00      	cmp	r3, #0
 8007954:	d002      	beq.n	800795c <HAL_PCD_EP_DB_Transmit+0x730>
 8007956:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007958:	3301      	adds	r3, #1
 800795a:	66bb      	str	r3, [r7, #104]	; 0x68
 800795c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	b29a      	uxth	r2, r3
 8007962:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007964:	b29b      	uxth	r3, r3
 8007966:	029b      	lsls	r3, r3, #10
 8007968:	b29b      	uxth	r3, r3
 800796a:	4313      	orrs	r3, r2
 800796c:	b29a      	uxth	r2, r3
 800796e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007970:	801a      	strh	r2, [r3, #0]
 8007972:	e019      	b.n	80079a8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	785b      	ldrb	r3, [r3, #1]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d115      	bne.n	80079a8 <HAL_PCD_EP_DB_Transmit+0x77c>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007984:	b29b      	uxth	r3, r3
 8007986:	461a      	mov	r2, r3
 8007988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800798a:	4413      	add	r3, r2
 800798c:	657b      	str	r3, [r7, #84]	; 0x54
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	00da      	lsls	r2, r3, #3
 8007994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007996:	4413      	add	r3, r2
 8007998:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800799c:	653b      	str	r3, [r7, #80]	; 0x50
 800799e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079a6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6818      	ldr	r0, [r3, #0]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	6959      	ldr	r1, [r3, #20]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	895a      	ldrh	r2, [r3, #10]
 80079b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	f005 fad1 	bl	800cf60 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	461a      	mov	r2, r3
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	4413      	add	r3, r2
 80079cc:	881b      	ldrh	r3, [r3, #0]
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079d8:	82bb      	strh	r3, [r7, #20]
 80079da:	8abb      	ldrh	r3, [r7, #20]
 80079dc:	f083 0310 	eor.w	r3, r3, #16
 80079e0:	82bb      	strh	r3, [r7, #20]
 80079e2:	8abb      	ldrh	r3, [r7, #20]
 80079e4:	f083 0320 	eor.w	r3, r3, #32
 80079e8:	82bb      	strh	r3, [r7, #20]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	441a      	add	r2, r3
 80079f8:	8abb      	ldrh	r3, [r7, #20]
 80079fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3790      	adds	r7, #144	; 0x90
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	607b      	str	r3, [r7, #4]
 8007a22:	460b      	mov	r3, r1
 8007a24:	817b      	strh	r3, [r7, #10]
 8007a26:	4613      	mov	r3, r2
 8007a28:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007a2a:	897b      	ldrh	r3, [r7, #10]
 8007a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00b      	beq.n	8007a4e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a36:	897b      	ldrh	r3, [r7, #10]
 8007a38:	f003 0307 	and.w	r3, r3, #7
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	4613      	mov	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	00db      	lsls	r3, r3, #3
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	4413      	add	r3, r2
 8007a4a:	617b      	str	r3, [r7, #20]
 8007a4c:	e009      	b.n	8007a62 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007a4e:	897a      	ldrh	r2, [r7, #10]
 8007a50:	4613      	mov	r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4413      	add	r3, r2
 8007a56:	00db      	lsls	r3, r3, #3
 8007a58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	4413      	add	r3, r2
 8007a60:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007a62:	893b      	ldrh	r3, [r7, #8]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d107      	bne.n	8007a78 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	80da      	strh	r2, [r3, #6]
 8007a76:	e00b      	b.n	8007a90 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	0c1b      	lsrs	r3, r3, #16
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	371c      	adds	r7, #28
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b085      	sub	sp, #20
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	f043 0301 	orr.w	r3, r3, #1
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	f043 0302 	orr.w	r3, r3, #2
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
	...

08007af4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007af4:	b480      	push	{r7}
 8007af6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007af8:	4b05      	ldr	r3, [pc, #20]	; (8007b10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a04      	ldr	r2, [pc, #16]	; (8007b10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b02:	6013      	str	r3, [r2, #0]
}
 8007b04:	bf00      	nop
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	58000400 	.word	0x58000400

08007b14 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007b14:	b480      	push	{r7}
 8007b16:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8007b18:	4b04      	ldr	r3, [pc, #16]	; (8007b2c <HAL_PWREx_GetVoltageRange+0x18>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	58000400 	.word	0x58000400

08007b30 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007b30:	b480      	push	{r7}
 8007b32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007b34:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <HAL_PWREx_EnableVddUSB+0x1c>)
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	4a04      	ldr	r2, [pc, #16]	; (8007b4c <HAL_PWREx_EnableVddUSB+0x1c>)
 8007b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b3e:	6053      	str	r3, [r2, #4]
}
 8007b40:	bf00      	nop
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	58000400 	.word	0x58000400

08007b50 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007b50:	b480      	push	{r7}
 8007b52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b62:	d101      	bne.n	8007b68 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007b64:	2301      	movs	r3, #1
 8007b66:	e000      	b.n	8007b6a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <LL_RCC_HSE_Enable>:
{
 8007b74:	b480      	push	{r7}
 8007b76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b86:	6013      	str	r3, [r2, #0]
}
 8007b88:	bf00      	nop
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <LL_RCC_HSE_Disable>:
{
 8007b92:	b480      	push	{r7}
 8007b94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8007b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ba4:	6013      	str	r3, [r2, #0]
}
 8007ba6:	bf00      	nop
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <LL_RCC_HSE_IsReady>:
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bc2:	d101      	bne.n	8007bc8 <LL_RCC_HSE_IsReady+0x18>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e000      	b.n	8007bca <LL_RCC_HSE_IsReady+0x1a>
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <LL_RCC_HSI_Enable>:
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007be6:	6013      	str	r3, [r2, #0]
}
 8007be8:	bf00      	nop
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <LL_RCC_HSI_Disable>:
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c04:	6013      	str	r3, [r2, #0]
}
 8007c06:	bf00      	nop
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <LL_RCC_HSI_IsReady>:
{
 8007c10:	b480      	push	{r7}
 8007c12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c22:	d101      	bne.n	8007c28 <LL_RCC_HSI_IsReady+0x18>
 8007c24:	2301      	movs	r3, #1
 8007c26:	e000      	b.n	8007c2a <LL_RCC_HSI_IsReady+0x1a>
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <LL_RCC_HSI_SetCalibTrimming>:
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	061b      	lsls	r3, r3, #24
 8007c4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	604b      	str	r3, [r1, #4]
}
 8007c52:	bf00      	nop
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <LL_RCC_HSI48_Enable>:
{
 8007c5e:	b480      	push	{r7}
 8007c60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c6e:	f043 0301 	orr.w	r3, r3, #1
 8007c72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8007c76:	bf00      	nop
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <LL_RCC_HSI48_Disable>:
{
 8007c80:	b480      	push	{r7}
 8007c82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c90:	f023 0301 	bic.w	r3, r3, #1
 8007c94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8007c98:	bf00      	nop
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <LL_RCC_HSI48_IsReady>:
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8007ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007caa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007cae:	f003 0302 	and.w	r3, r3, #2
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d101      	bne.n	8007cba <LL_RCC_HSI48_IsReady+0x18>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e000      	b.n	8007cbc <LL_RCC_HSI48_IsReady+0x1a>
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <LL_RCC_LSE_Enable>:
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cd6:	f043 0301 	orr.w	r3, r3, #1
 8007cda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007cde:	bf00      	nop
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <LL_RCC_LSE_Disable>:
{
 8007ce8:	b480      	push	{r7}
 8007cea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cf8:	f023 0301 	bic.w	r3, r3, #1
 8007cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007d00:	bf00      	nop
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <LL_RCC_LSE_EnableBypass>:
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d1a:	f043 0304 	orr.w	r3, r3, #4
 8007d1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007d22:	bf00      	nop
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <LL_RCC_LSE_DisableBypass>:
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d3c:	f023 0304 	bic.w	r3, r3, #4
 8007d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007d44:	bf00      	nop
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <LL_RCC_LSE_IsReady>:
{
 8007d4e:	b480      	push	{r7}
 8007d50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d5a:	f003 0302 	and.w	r3, r3, #2
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d101      	bne.n	8007d66 <LL_RCC_LSE_IsReady+0x18>
 8007d62:	2301      	movs	r3, #1
 8007d64:	e000      	b.n	8007d68 <LL_RCC_LSE_IsReady+0x1a>
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <LL_RCC_LSI1_Enable>:
{
 8007d72:	b480      	push	{r7}
 8007d74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d82:	f043 0301 	orr.w	r3, r3, #1
 8007d86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007d8a:	bf00      	nop
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <LL_RCC_LSI1_Disable>:
{
 8007d94:	b480      	push	{r7}
 8007d96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007da0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007da4:	f023 0301 	bic.w	r3, r3, #1
 8007da8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007dac:	bf00      	nop
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <LL_RCC_LSI1_IsReady>:
{
 8007db6:	b480      	push	{r7}
 8007db8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8007dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dc2:	f003 0302 	and.w	r3, r3, #2
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d101      	bne.n	8007dce <LL_RCC_LSI1_IsReady+0x18>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e000      	b.n	8007dd0 <LL_RCC_LSI1_IsReady+0x1a>
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <LL_RCC_LSI2_Enable>:
{
 8007dda:	b480      	push	{r7}
 8007ddc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007de6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007dea:	f043 0304 	orr.w	r3, r3, #4
 8007dee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007df2:	bf00      	nop
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <LL_RCC_LSI2_Disable>:
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e0c:	f023 0304 	bic.w	r3, r3, #4
 8007e10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007e14:	bf00      	nop
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <LL_RCC_LSI2_IsReady>:
{
 8007e1e:	b480      	push	{r7}
 8007e20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8007e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e2a:	f003 0308 	and.w	r3, r3, #8
 8007e2e:	2b08      	cmp	r3, #8
 8007e30:	d101      	bne.n	8007e36 <LL_RCC_LSI2_IsReady+0x18>
 8007e32:	2301      	movs	r3, #1
 8007e34:	e000      	b.n	8007e38 <LL_RCC_LSI2_IsReady+0x1a>
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <LL_RCC_LSI2_SetTrimming>:
{
 8007e42:	b480      	push	{r7}
 8007e44:	b083      	sub	sp, #12
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8007e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	021b      	lsls	r3, r3, #8
 8007e5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <LL_RCC_MSI_Enable>:
{
 8007e70:	b480      	push	{r7}
 8007e72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e7e:	f043 0301 	orr.w	r3, r3, #1
 8007e82:	6013      	str	r3, [r2, #0]
}
 8007e84:	bf00      	nop
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <LL_RCC_MSI_Disable>:
{
 8007e8e:	b480      	push	{r7}
 8007e90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e9c:	f023 0301 	bic.w	r3, r3, #1
 8007ea0:	6013      	str	r3, [r2, #0]
}
 8007ea2:	bf00      	nop
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <LL_RCC_MSI_IsReady>:
{
 8007eac:	b480      	push	{r7}
 8007eae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0302 	and.w	r3, r3, #2
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d101      	bne.n	8007ec2 <LL_RCC_MSI_IsReady+0x16>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e000      	b.n	8007ec4 <LL_RCC_MSI_IsReady+0x18>
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <LL_RCC_MSI_SetRange>:
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8007ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ee0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	600b      	str	r3, [r1, #0]
}
 8007eea:	bf00      	nop
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <LL_RCC_MSI_GetRange>:
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b083      	sub	sp, #12
 8007efa:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8007efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f06:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2bb0      	cmp	r3, #176	; 0xb0
 8007f0c:	d901      	bls.n	8007f12 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8007f0e:	23b0      	movs	r3, #176	; 0xb0
 8007f10:	607b      	str	r3, [r7, #4]
  return msiRange;
 8007f12:	687b      	ldr	r3, [r7, #4]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <LL_RCC_MSI_SetCalibTrimming>:
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	021b      	lsls	r3, r3, #8
 8007f36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	604b      	str	r3, [r1, #4]
}
 8007f3e:	bf00      	nop
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <LL_RCC_SetSysClkSource>:
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b083      	sub	sp, #12
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f023 0203 	bic.w	r2, r3, #3
 8007f5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	608b      	str	r3, [r1, #8]
}
 8007f66:	bf00      	nop
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <LL_RCC_GetSysClkSource>:
{
 8007f72:	b480      	push	{r7}
 8007f74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	f003 030c 	and.w	r3, r3, #12
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <LL_RCC_SetAHBPrescaler>:
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b083      	sub	sp, #12
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	608b      	str	r3, [r1, #8]
}
 8007fa6:	bf00      	nop
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <LL_C2_RCC_SetAHBPrescaler>:
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b083      	sub	sp, #12
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8007fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fbe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007fc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007fc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007fd2:	bf00      	nop
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <LL_RCC_SetAHB4Prescaler>:
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b083      	sub	sp, #12
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007fee:	f023 020f 	bic.w	r2, r3, #15
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	091b      	lsrs	r3, r3, #4
 8007ff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <LL_RCC_SetAPB1Prescaler>:
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800801e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4313      	orrs	r3, r2
 8008026:	608b      	str	r3, [r1, #8]
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <LL_RCC_SetAPB2Prescaler>:
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800803c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008046:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4313      	orrs	r3, r2
 800804e:	608b      	str	r3, [r1, #8]
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <LL_RCC_GetAHBPrescaler>:
{
 800805c:	b480      	push	{r7}
 800805e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800806a:	4618      	mov	r0, r3
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <LL_RCC_GetAHB4Prescaler>:
{
 8008074:	b480      	push	{r7}
 8008076:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8008078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800807c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008080:	011b      	lsls	r3, r3, #4
 8008082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008086:	4618      	mov	r0, r3
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <LL_RCC_PLL_Enable>:
{
 8008090:	b480      	push	{r7}
 8008092:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800809e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80080a2:	6013      	str	r3, [r2, #0]
}
 80080a4:	bf00      	nop
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr

080080ae <LL_RCC_PLL_Disable>:
{
 80080ae:	b480      	push	{r7}
 80080b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80080b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080c0:	6013      	str	r3, [r2, #0]
}
 80080c2:	bf00      	nop
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <LL_RCC_PLL_IsReady>:
{
 80080cc:	b480      	push	{r7}
 80080ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80080d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080de:	d101      	bne.n	80080e4 <LL_RCC_PLL_IsReady+0x18>
 80080e0:	2301      	movs	r3, #1
 80080e2:	e000      	b.n	80080e6 <LL_RCC_PLL_IsReady+0x1a>
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <LL_RCC_PLL_GetN>:
{
 80080f0:	b480      	push	{r7}
 80080f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80080f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	0a1b      	lsrs	r3, r3, #8
 80080fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8008100:	4618      	mov	r0, r3
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr

0800810a <LL_RCC_PLL_GetR>:
{
 800810a:	b480      	push	{r7}
 800810c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800810e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8008118:	4618      	mov	r0, r3
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <LL_RCC_PLL_GetDivider>:
{
 8008122:	b480      	push	{r7}
 8008124:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8008130:	4618      	mov	r0, r3
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <LL_RCC_PLL_GetMainSource>:
{
 800813a:	b480      	push	{r7}
 800813c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800813e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f003 0303 	and.w	r3, r3, #3
}
 8008148:	4618      	mov	r0, r3
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <LL_RCC_IsActiveFlag_HPRE>:
{
 8008152:	b480      	push	{r7}
 8008154:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8008156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008164:	d101      	bne.n	800816a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8008166:	2301      	movs	r3, #1
 8008168:	e000      	b.n	800816c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8008176:	b480      	push	{r7}
 8008178:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800817a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800817e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008186:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800818a:	d101      	bne.n	8008190 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800818c:	2301      	movs	r3, #1
 800818e:	e000      	b.n	8008192 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800819c:	b480      	push	{r7}
 800819e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80081a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80081a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081b0:	d101      	bne.n	80081b6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80081b2:	2301      	movs	r3, #1
 80081b4:	e000      	b.n	80081b8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <LL_RCC_IsActiveFlag_PPRE1>:
{
 80081c2:	b480      	push	{r7}
 80081c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80081c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081d4:	d101      	bne.n	80081da <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80081d6:	2301      	movs	r3, #1
 80081d8:	e000      	b.n	80081dc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80081e6:	b480      	push	{r7}
 80081e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80081ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081f8:	d101      	bne.n	80081fe <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80081fa:	2301      	movs	r3, #1
 80081fc:	e000      	b.n	8008200 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
	...

0800820c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800820c:	b590      	push	{r4, r7, lr}
 800820e:	b08d      	sub	sp, #52	; 0x34
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d101      	bne.n	800821e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	e363      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 0320 	and.w	r3, r3, #32
 8008226:	2b00      	cmp	r3, #0
 8008228:	f000 808d 	beq.w	8008346 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800822c:	f7ff fea1 	bl	8007f72 <LL_RCC_GetSysClkSource>
 8008230:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008232:	f7ff ff82 	bl	800813a <LL_RCC_PLL_GetMainSource>
 8008236:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823a:	2b00      	cmp	r3, #0
 800823c:	d005      	beq.n	800824a <HAL_RCC_OscConfig+0x3e>
 800823e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008240:	2b0c      	cmp	r3, #12
 8008242:	d147      	bne.n	80082d4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8008244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008246:	2b01      	cmp	r3, #1
 8008248:	d144      	bne.n	80082d4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	69db      	ldr	r3, [r3, #28]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e347      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800825a:	f7ff fe4c 	bl	8007ef6 <LL_RCC_MSI_GetRange>
 800825e:	4603      	mov	r3, r0
 8008260:	429c      	cmp	r4, r3
 8008262:	d914      	bls.n	800828e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008268:	4618      	mov	r0, r3
 800826a:	f000 fd03 	bl	8008c74 <RCC_SetFlashLatencyFromMSIRange>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d001      	beq.n	8008278 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	e336      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827c:	4618      	mov	r0, r3
 800827e:	f7ff fe26 	bl	8007ece <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	4618      	mov	r0, r3
 8008288:	f7ff fe4a 	bl	8007f20 <LL_RCC_MSI_SetCalibTrimming>
 800828c:	e013      	b.n	80082b6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008292:	4618      	mov	r0, r3
 8008294:	f7ff fe1b 	bl	8007ece <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a1b      	ldr	r3, [r3, #32]
 800829c:	4618      	mov	r0, r3
 800829e:	f7ff fe3f 	bl	8007f20 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 fce4 	bl	8008c74 <RCC_SetFlashLatencyFromMSIRange>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e317      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80082b6:	f000 fcc9 	bl	8008c4c <HAL_RCC_GetHCLKFreq>
 80082ba:	4603      	mov	r3, r0
 80082bc:	4aa4      	ldr	r2, [pc, #656]	; (8008550 <HAL_RCC_OscConfig+0x344>)
 80082be:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80082c0:	4ba4      	ldr	r3, [pc, #656]	; (8008554 <HAL_RCC_OscConfig+0x348>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fa fd33 	bl	8002d30 <HAL_InitTick>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d039      	beq.n	8008344 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e308      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d01e      	beq.n	800831a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80082dc:	f7ff fdc8 	bl	8007e70 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80082e0:	f7fa fd74 	bl	8002dcc <HAL_GetTick>
 80082e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80082e6:	e008      	b.n	80082fa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80082e8:	f7fa fd70 	bl	8002dcc <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d901      	bls.n	80082fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e2f5      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80082fa:	f7ff fdd7 	bl	8007eac <LL_RCC_MSI_IsReady>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d0f1      	beq.n	80082e8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008308:	4618      	mov	r0, r3
 800830a:	f7ff fde0 	bl	8007ece <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	4618      	mov	r0, r3
 8008314:	f7ff fe04 	bl	8007f20 <LL_RCC_MSI_SetCalibTrimming>
 8008318:	e015      	b.n	8008346 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800831a:	f7ff fdb8 	bl	8007e8e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800831e:	f7fa fd55 	bl	8002dcc <HAL_GetTick>
 8008322:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8008324:	e008      	b.n	8008338 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008326:	f7fa fd51 	bl	8002dcc <HAL_GetTick>
 800832a:	4602      	mov	r2, r0
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	2b02      	cmp	r3, #2
 8008332:	d901      	bls.n	8008338 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e2d6      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8008338:	f7ff fdb8 	bl	8007eac <LL_RCC_MSI_IsReady>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1f1      	bne.n	8008326 <HAL_RCC_OscConfig+0x11a>
 8008342:	e000      	b.n	8008346 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008344:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 0301 	and.w	r3, r3, #1
 800834e:	2b00      	cmp	r3, #0
 8008350:	d047      	beq.n	80083e2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008352:	f7ff fe0e 	bl	8007f72 <LL_RCC_GetSysClkSource>
 8008356:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008358:	f7ff feef 	bl	800813a <LL_RCC_PLL_GetMainSource>
 800835c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800835e:	6a3b      	ldr	r3, [r7, #32]
 8008360:	2b08      	cmp	r3, #8
 8008362:	d005      	beq.n	8008370 <HAL_RCC_OscConfig+0x164>
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	2b0c      	cmp	r3, #12
 8008368:	d108      	bne.n	800837c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	2b03      	cmp	r3, #3
 800836e:	d105      	bne.n	800837c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d134      	bne.n	80083e2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e2b4      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008384:	d102      	bne.n	800838c <HAL_RCC_OscConfig+0x180>
 8008386:	f7ff fbf5 	bl	8007b74 <LL_RCC_HSE_Enable>
 800838a:	e001      	b.n	8008390 <HAL_RCC_OscConfig+0x184>
 800838c:	f7ff fc01 	bl	8007b92 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d012      	beq.n	80083be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008398:	f7fa fd18 	bl	8002dcc <HAL_GetTick>
 800839c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800839e:	e008      	b.n	80083b2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083a0:	f7fa fd14 	bl	8002dcc <HAL_GetTick>
 80083a4:	4602      	mov	r2, r0
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	2b64      	cmp	r3, #100	; 0x64
 80083ac:	d901      	bls.n	80083b2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e299      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80083b2:	f7ff fbfd 	bl	8007bb0 <LL_RCC_HSE_IsReady>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d0f1      	beq.n	80083a0 <HAL_RCC_OscConfig+0x194>
 80083bc:	e011      	b.n	80083e2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083be:	f7fa fd05 	bl	8002dcc <HAL_GetTick>
 80083c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80083c4:	e008      	b.n	80083d8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083c6:	f7fa fd01 	bl	8002dcc <HAL_GetTick>
 80083ca:	4602      	mov	r2, r0
 80083cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	2b64      	cmp	r3, #100	; 0x64
 80083d2:	d901      	bls.n	80083d8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e286      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80083d8:	f7ff fbea 	bl	8007bb0 <LL_RCC_HSE_IsReady>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1f1      	bne.n	80083c6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 0302 	and.w	r3, r3, #2
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d04c      	beq.n	8008488 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083ee:	f7ff fdc0 	bl	8007f72 <LL_RCC_GetSysClkSource>
 80083f2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80083f4:	f7ff fea1 	bl	800813a <LL_RCC_PLL_GetMainSource>
 80083f8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	2b04      	cmp	r3, #4
 80083fe:	d005      	beq.n	800840c <HAL_RCC_OscConfig+0x200>
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	2b0c      	cmp	r3, #12
 8008404:	d10e      	bne.n	8008424 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	2b02      	cmp	r3, #2
 800840a:	d10b      	bne.n	8008424 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d101      	bne.n	8008418 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e266      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	4618      	mov	r0, r3
 800841e:	f7ff fc09 	bl	8007c34 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008422:	e031      	b.n	8008488 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d019      	beq.n	8008460 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800842c:	f7ff fbd2 	bl	8007bd4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008430:	f7fa fccc 	bl	8002dcc <HAL_GetTick>
 8008434:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008436:	e008      	b.n	800844a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008438:	f7fa fcc8 	bl	8002dcc <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	2b02      	cmp	r3, #2
 8008444:	d901      	bls.n	800844a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	e24d      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800844a:	f7ff fbe1 	bl	8007c10 <LL_RCC_HSI_IsReady>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d0f1      	beq.n	8008438 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	4618      	mov	r0, r3
 800845a:	f7ff fbeb 	bl	8007c34 <LL_RCC_HSI_SetCalibTrimming>
 800845e:	e013      	b.n	8008488 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008460:	f7ff fbc7 	bl	8007bf2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008464:	f7fa fcb2 	bl	8002dcc <HAL_GetTick>
 8008468:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800846a:	e008      	b.n	800847e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800846c:	f7fa fcae 	bl	8002dcc <HAL_GetTick>
 8008470:	4602      	mov	r2, r0
 8008472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	2b02      	cmp	r3, #2
 8008478:	d901      	bls.n	800847e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800847a:	2303      	movs	r3, #3
 800847c:	e233      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800847e:	f7ff fbc7 	bl	8007c10 <LL_RCC_HSI_IsReady>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1f1      	bne.n	800846c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0308 	and.w	r3, r3, #8
 8008490:	2b00      	cmp	r3, #0
 8008492:	d106      	bne.n	80084a2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 80a3 	beq.w	80085e8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d076      	beq.n	8008598 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 0310 	and.w	r3, r3, #16
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d046      	beq.n	8008544 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80084b6:	f7ff fc7e 	bl	8007db6 <LL_RCC_LSI1_IsReady>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d113      	bne.n	80084e8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80084c0:	f7ff fc57 	bl	8007d72 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80084c4:	f7fa fc82 	bl	8002dcc <HAL_GetTick>
 80084c8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80084ca:	e008      	b.n	80084de <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80084cc:	f7fa fc7e 	bl	8002dcc <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d901      	bls.n	80084de <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e203      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80084de:	f7ff fc6a 	bl	8007db6 <LL_RCC_LSI1_IsReady>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d0f1      	beq.n	80084cc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80084e8:	f7ff fc77 	bl	8007dda <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ec:	f7fa fc6e 	bl	8002dcc <HAL_GetTick>
 80084f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80084f2:	e008      	b.n	8008506 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80084f4:	f7fa fc6a 	bl	8002dcc <HAL_GetTick>
 80084f8:	4602      	mov	r2, r0
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	2b03      	cmp	r3, #3
 8008500:	d901      	bls.n	8008506 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e1ef      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008506:	f7ff fc8a 	bl	8007e1e <LL_RCC_LSI2_IsReady>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d0f1      	beq.n	80084f4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	699b      	ldr	r3, [r3, #24]
 8008514:	4618      	mov	r0, r3
 8008516:	f7ff fc94 	bl	8007e42 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800851a:	f7ff fc3b 	bl	8007d94 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800851e:	f7fa fc55 	bl	8002dcc <HAL_GetTick>
 8008522:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008524:	e008      	b.n	8008538 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008526:	f7fa fc51 	bl	8002dcc <HAL_GetTick>
 800852a:	4602      	mov	r2, r0
 800852c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852e:	1ad3      	subs	r3, r2, r3
 8008530:	2b02      	cmp	r3, #2
 8008532:	d901      	bls.n	8008538 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8008534:	2303      	movs	r3, #3
 8008536:	e1d6      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008538:	f7ff fc3d 	bl	8007db6 <LL_RCC_LSI1_IsReady>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1f1      	bne.n	8008526 <HAL_RCC_OscConfig+0x31a>
 8008542:	e051      	b.n	80085e8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8008544:	f7ff fc15 	bl	8007d72 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008548:	f7fa fc40 	bl	8002dcc <HAL_GetTick>
 800854c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800854e:	e00c      	b.n	800856a <HAL_RCC_OscConfig+0x35e>
 8008550:	2000000c 	.word	0x2000000c
 8008554:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008558:	f7fa fc38 	bl	8002dcc <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	2b02      	cmp	r3, #2
 8008564:	d901      	bls.n	800856a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e1bd      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800856a:	f7ff fc24 	bl	8007db6 <LL_RCC_LSI1_IsReady>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d0f1      	beq.n	8008558 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8008574:	f7ff fc42 	bl	8007dfc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008578:	e008      	b.n	800858c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800857a:	f7fa fc27 	bl	8002dcc <HAL_GetTick>
 800857e:	4602      	mov	r2, r0
 8008580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	2b03      	cmp	r3, #3
 8008586:	d901      	bls.n	800858c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8008588:	2303      	movs	r3, #3
 800858a:	e1ac      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800858c:	f7ff fc47 	bl	8007e1e <LL_RCC_LSI2_IsReady>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1f1      	bne.n	800857a <HAL_RCC_OscConfig+0x36e>
 8008596:	e027      	b.n	80085e8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8008598:	f7ff fc30 	bl	8007dfc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800859c:	f7fa fc16 	bl	8002dcc <HAL_GetTick>
 80085a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80085a2:	e008      	b.n	80085b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80085a4:	f7fa fc12 	bl	8002dcc <HAL_GetTick>
 80085a8:	4602      	mov	r2, r0
 80085aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	2b03      	cmp	r3, #3
 80085b0:	d901      	bls.n	80085b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e197      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80085b6:	f7ff fc32 	bl	8007e1e <LL_RCC_LSI2_IsReady>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1f1      	bne.n	80085a4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80085c0:	f7ff fbe8 	bl	8007d94 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085c4:	f7fa fc02 	bl	8002dcc <HAL_GetTick>
 80085c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80085ca:	e008      	b.n	80085de <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80085cc:	f7fa fbfe 	bl	8002dcc <HAL_GetTick>
 80085d0:	4602      	mov	r2, r0
 80085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d901      	bls.n	80085de <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e183      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80085de:	f7ff fbea 	bl	8007db6 <LL_RCC_LSI1_IsReady>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1f1      	bne.n	80085cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 0304 	and.w	r3, r3, #4
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d05b      	beq.n	80086ac <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085f4:	4ba7      	ldr	r3, [pc, #668]	; (8008894 <HAL_RCC_OscConfig+0x688>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d114      	bne.n	800862a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008600:	f7ff fa78 	bl	8007af4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008604:	f7fa fbe2 	bl	8002dcc <HAL_GetTick>
 8008608:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800860a:	e008      	b.n	800861e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800860c:	f7fa fbde 	bl	8002dcc <HAL_GetTick>
 8008610:	4602      	mov	r2, r0
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	2b02      	cmp	r3, #2
 8008618:	d901      	bls.n	800861e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800861a:	2303      	movs	r3, #3
 800861c:	e163      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800861e:	4b9d      	ldr	r3, [pc, #628]	; (8008894 <HAL_RCC_OscConfig+0x688>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008626:	2b00      	cmp	r3, #0
 8008628:	d0f0      	beq.n	800860c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d102      	bne.n	8008638 <HAL_RCC_OscConfig+0x42c>
 8008632:	f7ff fb48 	bl	8007cc6 <LL_RCC_LSE_Enable>
 8008636:	e00c      	b.n	8008652 <HAL_RCC_OscConfig+0x446>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	2b05      	cmp	r3, #5
 800863e:	d104      	bne.n	800864a <HAL_RCC_OscConfig+0x43e>
 8008640:	f7ff fb63 	bl	8007d0a <LL_RCC_LSE_EnableBypass>
 8008644:	f7ff fb3f 	bl	8007cc6 <LL_RCC_LSE_Enable>
 8008648:	e003      	b.n	8008652 <HAL_RCC_OscConfig+0x446>
 800864a:	f7ff fb4d 	bl	8007ce8 <LL_RCC_LSE_Disable>
 800864e:	f7ff fb6d 	bl	8007d2c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d014      	beq.n	8008684 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800865a:	f7fa fbb7 	bl	8002dcc <HAL_GetTick>
 800865e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008660:	e00a      	b.n	8008678 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008662:	f7fa fbb3 	bl	8002dcc <HAL_GetTick>
 8008666:	4602      	mov	r2, r0
 8008668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008670:	4293      	cmp	r3, r2
 8008672:	d901      	bls.n	8008678 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8008674:	2303      	movs	r3, #3
 8008676:	e136      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8008678:	f7ff fb69 	bl	8007d4e <LL_RCC_LSE_IsReady>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d0ef      	beq.n	8008662 <HAL_RCC_OscConfig+0x456>
 8008682:	e013      	b.n	80086ac <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008684:	f7fa fba2 	bl	8002dcc <HAL_GetTick>
 8008688:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800868a:	e00a      	b.n	80086a2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800868c:	f7fa fb9e 	bl	8002dcc <HAL_GetTick>
 8008690:	4602      	mov	r2, r0
 8008692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	f241 3288 	movw	r2, #5000	; 0x1388
 800869a:	4293      	cmp	r3, r2
 800869c:	d901      	bls.n	80086a2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800869e:	2303      	movs	r3, #3
 80086a0:	e121      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80086a2:	f7ff fb54 	bl	8007d4e <LL_RCC_LSE_IsReady>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1ef      	bne.n	800868c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d02c      	beq.n	8008712 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d014      	beq.n	80086ea <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80086c0:	f7ff facd 	bl	8007c5e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086c4:	f7fa fb82 	bl	8002dcc <HAL_GetTick>
 80086c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80086ca:	e008      	b.n	80086de <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80086cc:	f7fa fb7e 	bl	8002dcc <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d901      	bls.n	80086de <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e103      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80086de:	f7ff fae0 	bl	8007ca2 <LL_RCC_HSI48_IsReady>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d0f1      	beq.n	80086cc <HAL_RCC_OscConfig+0x4c0>
 80086e8:	e013      	b.n	8008712 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80086ea:	f7ff fac9 	bl	8007c80 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086ee:	f7fa fb6d 	bl	8002dcc <HAL_GetTick>
 80086f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80086f4:	e008      	b.n	8008708 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80086f6:	f7fa fb69 	bl	8002dcc <HAL_GetTick>
 80086fa:	4602      	mov	r2, r0
 80086fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	2b02      	cmp	r3, #2
 8008702:	d901      	bls.n	8008708 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8008704:	2303      	movs	r3, #3
 8008706:	e0ee      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008708:	f7ff facb 	bl	8007ca2 <LL_RCC_HSI48_IsReady>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1f1      	bne.n	80086f6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 80e4 	beq.w	80088e4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800871c:	f7ff fc29 	bl	8007f72 <LL_RCC_GetSysClkSource>
 8008720:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8008722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872e:	2b02      	cmp	r3, #2
 8008730:	f040 80b4 	bne.w	800889c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f003 0203 	and.w	r2, r3, #3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873e:	429a      	cmp	r2, r3
 8008740:	d123      	bne.n	800878a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800874c:	429a      	cmp	r2, r3
 800874e:	d11c      	bne.n	800878a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	0a1b      	lsrs	r3, r3, #8
 8008754:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800875c:	429a      	cmp	r2, r3
 800875e:	d114      	bne.n	800878a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800876a:	429a      	cmp	r2, r3
 800876c:	d10d      	bne.n	800878a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008778:	429a      	cmp	r2, r3
 800877a:	d106      	bne.n	800878a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008786:	429a      	cmp	r2, r3
 8008788:	d05d      	beq.n	8008846 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	2b0c      	cmp	r3, #12
 800878e:	d058      	beq.n	8008842 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e0a1      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80087a2:	f7ff fc84 	bl	80080ae <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80087a6:	f7fa fb11 	bl	8002dcc <HAL_GetTick>
 80087aa:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80087ac:	e008      	b.n	80087c0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087ae:	f7fa fb0d 	bl	8002dcc <HAL_GetTick>
 80087b2:	4602      	mov	r2, r0
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	d901      	bls.n	80087c0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e092      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80087c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1ef      	bne.n	80087ae <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80087ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087d2:	68da      	ldr	r2, [r3, #12]
 80087d4:	4b30      	ldr	r3, [pc, #192]	; (8008898 <HAL_RCC_OscConfig+0x68c>)
 80087d6:	4013      	ands	r3, r2
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80087e0:	4311      	orrs	r1, r2
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80087e6:	0212      	lsls	r2, r2, #8
 80087e8:	4311      	orrs	r1, r2
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80087ee:	4311      	orrs	r1, r2
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80087f4:	4311      	orrs	r1, r2
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80087fa:	430a      	orrs	r2, r1
 80087fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008800:	4313      	orrs	r3, r2
 8008802:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008804:	f7ff fc44 	bl	8008090 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008816:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008818:	f7fa fad8 	bl	8002dcc <HAL_GetTick>
 800881c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800881e:	e008      	b.n	8008832 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008820:	f7fa fad4 	bl	8002dcc <HAL_GetTick>
 8008824:	4602      	mov	r2, r0
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	2b02      	cmp	r3, #2
 800882c:	d901      	bls.n	8008832 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	e059      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800883c:	2b00      	cmp	r3, #0
 800883e:	d0ef      	beq.n	8008820 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008840:	e050      	b.n	80088e4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	e04f      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d147      	bne.n	80088e4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008854:	f7ff fc1c 	bl	8008090 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008866:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008868:	f7fa fab0 	bl	8002dcc <HAL_GetTick>
 800886c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800886e:	e008      	b.n	8008882 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008870:	f7fa faac 	bl	8002dcc <HAL_GetTick>
 8008874:	4602      	mov	r2, r0
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	2b02      	cmp	r3, #2
 800887c:	d901      	bls.n	8008882 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800887e:	2303      	movs	r3, #3
 8008880:	e031      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800888c:	2b00      	cmp	r3, #0
 800888e:	d0ef      	beq.n	8008870 <HAL_RCC_OscConfig+0x664>
 8008890:	e028      	b.n	80088e4 <HAL_RCC_OscConfig+0x6d8>
 8008892:	bf00      	nop
 8008894:	58000400 	.word	0x58000400
 8008898:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	2b0c      	cmp	r3, #12
 80088a0:	d01e      	beq.n	80088e0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088a2:	f7ff fc04 	bl	80080ae <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088a6:	f7fa fa91 	bl	8002dcc <HAL_GetTick>
 80088aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80088ac:	e008      	b.n	80088c0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088ae:	f7fa fa8d 	bl	8002dcc <HAL_GetTick>
 80088b2:	4602      	mov	r2, r0
 80088b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d901      	bls.n	80088c0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e012      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80088c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1ef      	bne.n	80088ae <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80088ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088d2:	68da      	ldr	r2, [r3, #12]
 80088d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088d8:	4b05      	ldr	r3, [pc, #20]	; (80088f0 <HAL_RCC_OscConfig+0x6e4>)
 80088da:	4013      	ands	r3, r2
 80088dc:	60cb      	str	r3, [r1, #12]
 80088de:	e001      	b.n	80088e4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e000      	b.n	80088e6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3734      	adds	r7, #52	; 0x34
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd90      	pop	{r4, r7, pc}
 80088ee:	bf00      	nop
 80088f0:	eefefffc 	.word	0xeefefffc

080088f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d101      	bne.n	8008908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e12d      	b.n	8008b64 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008908:	4b98      	ldr	r3, [pc, #608]	; (8008b6c <HAL_RCC_ClockConfig+0x278>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 0307 	and.w	r3, r3, #7
 8008910:	683a      	ldr	r2, [r7, #0]
 8008912:	429a      	cmp	r2, r3
 8008914:	d91b      	bls.n	800894e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008916:	4b95      	ldr	r3, [pc, #596]	; (8008b6c <HAL_RCC_ClockConfig+0x278>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f023 0207 	bic.w	r2, r3, #7
 800891e:	4993      	ldr	r1, [pc, #588]	; (8008b6c <HAL_RCC_ClockConfig+0x278>)
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	4313      	orrs	r3, r2
 8008924:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008926:	f7fa fa51 	bl	8002dcc <HAL_GetTick>
 800892a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800892c:	e008      	b.n	8008940 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800892e:	f7fa fa4d 	bl	8002dcc <HAL_GetTick>
 8008932:	4602      	mov	r2, r0
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	2b02      	cmp	r3, #2
 800893a:	d901      	bls.n	8008940 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	e111      	b.n	8008b64 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008940:	4b8a      	ldr	r3, [pc, #552]	; (8008b6c <HAL_RCC_ClockConfig+0x278>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 0307 	and.w	r3, r3, #7
 8008948:	683a      	ldr	r2, [r7, #0]
 800894a:	429a      	cmp	r2, r3
 800894c:	d1ef      	bne.n	800892e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 0302 	and.w	r3, r3, #2
 8008956:	2b00      	cmp	r3, #0
 8008958:	d016      	beq.n	8008988 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	4618      	mov	r0, r3
 8008960:	f7ff fb13 	bl	8007f8a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008964:	f7fa fa32 	bl	8002dcc <HAL_GetTick>
 8008968:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800896a:	e008      	b.n	800897e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800896c:	f7fa fa2e 	bl	8002dcc <HAL_GetTick>
 8008970:	4602      	mov	r2, r0
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	2b02      	cmp	r3, #2
 8008978:	d901      	bls.n	800897e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800897a:	2303      	movs	r3, #3
 800897c:	e0f2      	b.n	8008b64 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800897e:	f7ff fbe8 	bl	8008152 <LL_RCC_IsActiveFlag_HPRE>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d0f1      	beq.n	800896c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 0320 	and.w	r3, r3, #32
 8008990:	2b00      	cmp	r3, #0
 8008992:	d016      	beq.n	80089c2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	4618      	mov	r0, r3
 800899a:	f7ff fb0a 	bl	8007fb2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800899e:	f7fa fa15 	bl	8002dcc <HAL_GetTick>
 80089a2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80089a4:	e008      	b.n	80089b8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80089a6:	f7fa fa11 	bl	8002dcc <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d901      	bls.n	80089b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	e0d5      	b.n	8008b64 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80089b8:	f7ff fbdd 	bl	8008176 <LL_RCC_IsActiveFlag_C2HPRE>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d0f1      	beq.n	80089a6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d016      	beq.n	80089fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7ff fb03 	bl	8007fde <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80089d8:	f7fa f9f8 	bl	8002dcc <HAL_GetTick>
 80089dc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80089de:	e008      	b.n	80089f2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80089e0:	f7fa f9f4 	bl	8002dcc <HAL_GetTick>
 80089e4:	4602      	mov	r2, r0
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d901      	bls.n	80089f2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e0b8      	b.n	8008b64 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80089f2:	f7ff fbd3 	bl	800819c <LL_RCC_IsActiveFlag_SHDHPRE>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d0f1      	beq.n	80089e0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 0304 	and.w	r3, r3, #4
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d016      	beq.n	8008a36 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7ff fafd 	bl	800800c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008a12:	f7fa f9db 	bl	8002dcc <HAL_GetTick>
 8008a16:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008a18:	e008      	b.n	8008a2c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008a1a:	f7fa f9d7 	bl	8002dcc <HAL_GetTick>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	1ad3      	subs	r3, r2, r3
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d901      	bls.n	8008a2c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	e09b      	b.n	8008b64 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008a2c:	f7ff fbc9 	bl	80081c2 <LL_RCC_IsActiveFlag_PPRE1>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d0f1      	beq.n	8008a1a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0308 	and.w	r3, r3, #8
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d017      	beq.n	8008a72 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	00db      	lsls	r3, r3, #3
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7ff faf3 	bl	8008034 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008a4e:	f7fa f9bd 	bl	8002dcc <HAL_GetTick>
 8008a52:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008a54:	e008      	b.n	8008a68 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008a56:	f7fa f9b9 	bl	8002dcc <HAL_GetTick>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	1ad3      	subs	r3, r2, r3
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d901      	bls.n	8008a68 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8008a64:	2303      	movs	r3, #3
 8008a66:	e07d      	b.n	8008b64 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008a68:	f7ff fbbd 	bl	80081e6 <LL_RCC_IsActiveFlag_PPRE2>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d0f1      	beq.n	8008a56 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0301 	and.w	r3, r3, #1
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d043      	beq.n	8008b06 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d106      	bne.n	8008a94 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008a86:	f7ff f893 	bl	8007bb0 <LL_RCC_HSE_IsReady>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d11e      	bne.n	8008ace <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e067      	b.n	8008b64 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	2b03      	cmp	r3, #3
 8008a9a:	d106      	bne.n	8008aaa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8008a9c:	f7ff fb16 	bl	80080cc <LL_RCC_PLL_IsReady>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d113      	bne.n	8008ace <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e05c      	b.n	8008b64 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d106      	bne.n	8008ac0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008ab2:	f7ff f9fb 	bl	8007eac <LL_RCC_MSI_IsReady>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d108      	bne.n	8008ace <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	e051      	b.n	8008b64 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008ac0:	f7ff f8a6 	bl	8007c10 <LL_RCC_HSI_IsReady>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d101      	bne.n	8008ace <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e04a      	b.n	8008b64 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7ff fa39 	bl	8007f4a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ad8:	f7fa f978 	bl	8002dcc <HAL_GetTick>
 8008adc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ade:	e00a      	b.n	8008af6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ae0:	f7fa f974 	bl	8002dcc <HAL_GetTick>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d901      	bls.n	8008af6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e036      	b.n	8008b64 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008af6:	f7ff fa3c 	bl	8007f72 <LL_RCC_GetSysClkSource>
 8008afa:	4602      	mov	r2, r0
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d1ec      	bne.n	8008ae0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008b06:	4b19      	ldr	r3, [pc, #100]	; (8008b6c <HAL_RCC_ClockConfig+0x278>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 0307 	and.w	r3, r3, #7
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d21b      	bcs.n	8008b4c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b14:	4b15      	ldr	r3, [pc, #84]	; (8008b6c <HAL_RCC_ClockConfig+0x278>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f023 0207 	bic.w	r2, r3, #7
 8008b1c:	4913      	ldr	r1, [pc, #76]	; (8008b6c <HAL_RCC_ClockConfig+0x278>)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b24:	f7fa f952 	bl	8002dcc <HAL_GetTick>
 8008b28:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b2a:	e008      	b.n	8008b3e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008b2c:	f7fa f94e 	bl	8002dcc <HAL_GetTick>
 8008b30:	4602      	mov	r2, r0
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d901      	bls.n	8008b3e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	e012      	b.n	8008b64 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b3e:	4b0b      	ldr	r3, [pc, #44]	; (8008b6c <HAL_RCC_ClockConfig+0x278>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 0307 	and.w	r3, r3, #7
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d1ef      	bne.n	8008b2c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008b4c:	f000 f87e 	bl	8008c4c <HAL_RCC_GetHCLKFreq>
 8008b50:	4603      	mov	r3, r0
 8008b52:	4a07      	ldr	r2, [pc, #28]	; (8008b70 <HAL_RCC_ClockConfig+0x27c>)
 8008b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8008b56:	f7fa f945 	bl	8002de4 <HAL_GetTickPrio>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f7fa f8e7 	bl	8002d30 <HAL_InitTick>
 8008b62:	4603      	mov	r3, r0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	58004000 	.word	0x58004000
 8008b70:	2000000c 	.word	0x2000000c

08008b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b74:	b590      	push	{r4, r7, lr}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b7a:	f7ff f9fa 	bl	8007f72 <LL_RCC_GetSysClkSource>
 8008b7e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d10a      	bne.n	8008b9c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008b86:	f7ff f9b6 	bl	8007ef6 <LL_RCC_MSI_GetRange>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	091b      	lsrs	r3, r3, #4
 8008b8e:	f003 030f 	and.w	r3, r3, #15
 8008b92:	4a2b      	ldr	r2, [pc, #172]	; (8008c40 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b98:	60fb      	str	r3, [r7, #12]
 8008b9a:	e04b      	b.n	8008c34 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	d102      	bne.n	8008ba8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008ba2:	4b28      	ldr	r3, [pc, #160]	; (8008c44 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008ba4:	60fb      	str	r3, [r7, #12]
 8008ba6:	e045      	b.n	8008c34 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2b08      	cmp	r3, #8
 8008bac:	d10a      	bne.n	8008bc4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008bae:	f7fe ffcf 	bl	8007b50 <LL_RCC_HSE_IsEnabledDiv2>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d102      	bne.n	8008bbe <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008bb8:	4b22      	ldr	r3, [pc, #136]	; (8008c44 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008bba:	60fb      	str	r3, [r7, #12]
 8008bbc:	e03a      	b.n	8008c34 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008bbe:	4b22      	ldr	r3, [pc, #136]	; (8008c48 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008bc0:	60fb      	str	r3, [r7, #12]
 8008bc2:	e037      	b.n	8008c34 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008bc4:	f7ff fab9 	bl	800813a <LL_RCC_PLL_GetMainSource>
 8008bc8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d003      	beq.n	8008bd8 <HAL_RCC_GetSysClockFreq+0x64>
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	2b03      	cmp	r3, #3
 8008bd4:	d003      	beq.n	8008bde <HAL_RCC_GetSysClockFreq+0x6a>
 8008bd6:	e00d      	b.n	8008bf4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008bd8:	4b1a      	ldr	r3, [pc, #104]	; (8008c44 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008bda:	60bb      	str	r3, [r7, #8]
        break;
 8008bdc:	e015      	b.n	8008c0a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008bde:	f7fe ffb7 	bl	8007b50 <LL_RCC_HSE_IsEnabledDiv2>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d102      	bne.n	8008bee <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008be8:	4b16      	ldr	r3, [pc, #88]	; (8008c44 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008bea:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008bec:	e00d      	b.n	8008c0a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8008bee:	4b16      	ldr	r3, [pc, #88]	; (8008c48 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008bf0:	60bb      	str	r3, [r7, #8]
        break;
 8008bf2:	e00a      	b.n	8008c0a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008bf4:	f7ff f97f 	bl	8007ef6 <LL_RCC_MSI_GetRange>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	091b      	lsrs	r3, r3, #4
 8008bfc:	f003 030f 	and.w	r3, r3, #15
 8008c00:	4a0f      	ldr	r2, [pc, #60]	; (8008c40 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c06:	60bb      	str	r3, [r7, #8]
        break;
 8008c08:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8008c0a:	f7ff fa71 	bl	80080f0 <LL_RCC_PLL_GetN>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	fb03 f402 	mul.w	r4, r3, r2
 8008c16:	f7ff fa84 	bl	8008122 <LL_RCC_PLL_GetDivider>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	091b      	lsrs	r3, r3, #4
 8008c1e:	3301      	adds	r3, #1
 8008c20:	fbb4 f4f3 	udiv	r4, r4, r3
 8008c24:	f7ff fa71 	bl	800810a <LL_RCC_PLL_GetR>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	0f5b      	lsrs	r3, r3, #29
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	fbb4 f3f3 	udiv	r3, r4, r3
 8008c32:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8008c34:	68fb      	ldr	r3, [r7, #12]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3714      	adds	r7, #20
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd90      	pop	{r4, r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	080179dc 	.word	0x080179dc
 8008c44:	00f42400 	.word	0x00f42400
 8008c48:	01e84800 	.word	0x01e84800

08008c4c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c4c:	b598      	push	{r3, r4, r7, lr}
 8008c4e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008c50:	f7ff ff90 	bl	8008b74 <HAL_RCC_GetSysClockFreq>
 8008c54:	4604      	mov	r4, r0
 8008c56:	f7ff fa01 	bl	800805c <LL_RCC_GetAHBPrescaler>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	091b      	lsrs	r3, r3, #4
 8008c5e:	f003 030f 	and.w	r3, r3, #15
 8008c62:	4a03      	ldr	r2, [pc, #12]	; (8008c70 <HAL_RCC_GetHCLKFreq+0x24>)
 8008c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c68:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	bd98      	pop	{r3, r4, r7, pc}
 8008c70:	0801799c 	.word	0x0801799c

08008c74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008c74:	b590      	push	{r4, r7, lr}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2bb0      	cmp	r3, #176	; 0xb0
 8008c80:	d903      	bls.n	8008c8a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8008c82:	4b15      	ldr	r3, [pc, #84]	; (8008cd8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c86:	60fb      	str	r3, [r7, #12]
 8008c88:	e007      	b.n	8008c9a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	091b      	lsrs	r3, r3, #4
 8008c8e:	f003 030f 	and.w	r3, r3, #15
 8008c92:	4a11      	ldr	r2, [pc, #68]	; (8008cd8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c98:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8008c9a:	f7ff f9eb 	bl	8008074 <LL_RCC_GetAHB4Prescaler>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	091b      	lsrs	r3, r3, #4
 8008ca2:	f003 030f 	and.w	r3, r3, #15
 8008ca6:	4a0d      	ldr	r2, [pc, #52]	; (8008cdc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8008ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cb2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	4a0a      	ldr	r2, [pc, #40]	; (8008ce0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8008cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8008cbc:	0c9c      	lsrs	r4, r3, #18
 8008cbe:	f7fe ff29 	bl	8007b14 <HAL_PWREx_GetVoltageRange>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f000 f80c 	bl	8008ce4 <RCC_SetFlashLatency>
 8008ccc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3714      	adds	r7, #20
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd90      	pop	{r4, r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	080179dc 	.word	0x080179dc
 8008cdc:	0801799c 	.word	0x0801799c
 8008ce0:	431bde83 	.word	0x431bde83

08008ce4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008ce4:	b590      	push	{r4, r7, lr}
 8008ce6:	b093      	sub	sp, #76	; 0x4c
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8008cee:	4b37      	ldr	r3, [pc, #220]	; (8008dcc <RCC_SetFlashLatency+0xe8>)
 8008cf0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8008cf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008cf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8008cfa:	4a35      	ldr	r2, [pc, #212]	; (8008dd0 <RCC_SetFlashLatency+0xec>)
 8008cfc:	f107 031c 	add.w	r3, r7, #28
 8008d00:	ca07      	ldmia	r2, {r0, r1, r2}
 8008d02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8008d06:	4b33      	ldr	r3, [pc, #204]	; (8008dd4 <RCC_SetFlashLatency+0xf0>)
 8008d08:	f107 040c 	add.w	r4, r7, #12
 8008d0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8008d12:	2300      	movs	r3, #0
 8008d14:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d1c:	d11a      	bne.n	8008d54 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008d1e:	2300      	movs	r3, #0
 8008d20:	643b      	str	r3, [r7, #64]	; 0x40
 8008d22:	e013      	b.n	8008d4c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	3348      	adds	r3, #72	; 0x48
 8008d2a:	443b      	add	r3, r7
 8008d2c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d807      	bhi.n	8008d46 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	3348      	adds	r3, #72	; 0x48
 8008d3c:	443b      	add	r3, r7
 8008d3e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008d42:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8008d44:	e020      	b.n	8008d88 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d48:	3301      	adds	r3, #1
 8008d4a:	643b      	str	r3, [r7, #64]	; 0x40
 8008d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d9e8      	bls.n	8008d24 <RCC_SetFlashLatency+0x40>
 8008d52:	e019      	b.n	8008d88 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008d54:	2300      	movs	r3, #0
 8008d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d58:	e013      	b.n	8008d82 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8008d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	3348      	adds	r3, #72	; 0x48
 8008d60:	443b      	add	r3, r7
 8008d62:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d807      	bhi.n	8008d7c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	3348      	adds	r3, #72	; 0x48
 8008d72:	443b      	add	r3, r7
 8008d74:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008d78:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8008d7a:	e005      	b.n	8008d88 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d7e:	3301      	adds	r3, #1
 8008d80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d9e8      	bls.n	8008d5a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8008d88:	4b13      	ldr	r3, [pc, #76]	; (8008dd8 <RCC_SetFlashLatency+0xf4>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f023 0207 	bic.w	r2, r3, #7
 8008d90:	4911      	ldr	r1, [pc, #68]	; (8008dd8 <RCC_SetFlashLatency+0xf4>)
 8008d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d94:	4313      	orrs	r3, r2
 8008d96:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008d98:	f7fa f818 	bl	8002dcc <HAL_GetTick>
 8008d9c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008d9e:	e008      	b.n	8008db2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008da0:	f7fa f814 	bl	8002dcc <HAL_GetTick>
 8008da4:	4602      	mov	r2, r0
 8008da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d901      	bls.n	8008db2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8008dae:	2303      	movs	r3, #3
 8008db0:	e007      	b.n	8008dc2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008db2:	4b09      	ldr	r3, [pc, #36]	; (8008dd8 <RCC_SetFlashLatency+0xf4>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0307 	and.w	r3, r3, #7
 8008dba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d1ef      	bne.n	8008da0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	374c      	adds	r7, #76	; 0x4c
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd90      	pop	{r4, r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	08016e90 	.word	0x08016e90
 8008dd0:	08016ea0 	.word	0x08016ea0
 8008dd4:	08016eac 	.word	0x08016eac
 8008dd8:	58004000 	.word	0x58004000

08008ddc <LL_RCC_LSE_IsEnabled>:
{
 8008ddc:	b480      	push	{r7}
 8008dde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8008de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008de8:	f003 0301 	and.w	r3, r3, #1
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d101      	bne.n	8008df4 <LL_RCC_LSE_IsEnabled+0x18>
 8008df0:	2301      	movs	r3, #1
 8008df2:	e000      	b.n	8008df6 <LL_RCC_LSE_IsEnabled+0x1a>
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <LL_RCC_LSE_IsReady>:
{
 8008e00:	b480      	push	{r7}
 8008e02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e0c:	f003 0302 	and.w	r3, r3, #2
 8008e10:	2b02      	cmp	r3, #2
 8008e12:	d101      	bne.n	8008e18 <LL_RCC_LSE_IsReady+0x18>
 8008e14:	2301      	movs	r3, #1
 8008e16:	e000      	b.n	8008e1a <LL_RCC_LSE_IsReady+0x1a>
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <LL_RCC_MSI_EnablePLLMode>:
{
 8008e24:	b480      	push	{r7}
 8008e26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8008e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e32:	f043 0304 	orr.w	r3, r3, #4
 8008e36:	6013      	str	r3, [r2, #0]
}
 8008e38:	bf00      	nop
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr

08008e42 <LL_RCC_SetRFWKPClockSource>:
{
 8008e42:	b480      	push	{r7}
 8008e44:	b083      	sub	sp, #12
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8008e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008e56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8008e62:	bf00      	nop
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <LL_RCC_SetSMPSClockSource>:
{
 8008e6e:	b480      	push	{r7}
 8008e70:	b083      	sub	sp, #12
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8008e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7c:	f023 0203 	bic.w	r2, r3, #3
 8008e80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008e8a:	bf00      	nop
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <LL_RCC_SetSMPSPrescaler>:
{
 8008e96:	b480      	push	{r7}
 8008e98:	b083      	sub	sp, #12
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8008e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008ea8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008eb2:	bf00      	nop
 8008eb4:	370c      	adds	r7, #12
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <LL_RCC_SetUSARTClockSource>:
{
 8008ebe:	b480      	push	{r7}
 8008ec0:	b083      	sub	sp, #12
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8008ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ece:	f023 0203 	bic.w	r2, r3, #3
 8008ed2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008ede:	bf00      	nop
 8008ee0:	370c      	adds	r7, #12
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr

08008eea <LL_RCC_SetLPUARTClockSource>:
{
 8008eea:	b480      	push	{r7}
 8008eec:	b083      	sub	sp, #12
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008efa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008efe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008f0a:	bf00      	nop
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <LL_RCC_SetI2CClockSource>:
{
 8008f16:	b480      	push	{r7}
 8008f18:	b083      	sub	sp, #12
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f22:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	091b      	lsrs	r3, r3, #4
 8008f2a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008f2e:	43db      	mvns	r3, r3
 8008f30:	401a      	ands	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	011b      	lsls	r3, r3, #4
 8008f36:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008f3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <LL_RCC_SetLPTIMClockSource>:
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	0c1b      	lsrs	r3, r3, #16
 8008f64:	041b      	lsls	r3, r3, #16
 8008f66:	43db      	mvns	r3, r3
 8008f68:	401a      	ands	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	041b      	lsls	r3, r3, #16
 8008f6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f72:	4313      	orrs	r3, r2
 8008f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <LL_RCC_SetSAIClockSource>:
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8008f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008f98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <LL_RCC_SetRNGClockSource>:
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fc0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008fc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008fd0:	bf00      	nop
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <LL_RCC_SetCLK48ClockSource>:
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8008fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008ff0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <LL_RCC_SetUSBClockSource>:
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7ff ffe3 	bl	8008fdc <LL_RCC_SetCLK48ClockSource>
}
 8009016:	bf00      	nop
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <LL_RCC_SetADCClockSource>:
{
 800901e:	b480      	push	{r7}
 8009020:	b083      	sub	sp, #12
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8009026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800902a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800902e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009032:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4313      	orrs	r3, r2
 800903a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800903e:	bf00      	nop
 8009040:	370c      	adds	r7, #12
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr

0800904a <LL_RCC_SetRTCClockSource>:
{
 800904a:	b480      	push	{r7}
 800904c:	b083      	sub	sp, #12
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800905a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800905e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4313      	orrs	r3, r2
 8009066:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800906a:	bf00      	nop
 800906c:	370c      	adds	r7, #12
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr

08009076 <LL_RCC_GetRTCClockSource>:
{
 8009076:	b480      	push	{r7}
 8009078:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800907a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800907e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009082:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8009086:	4618      	mov	r0, r3
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <LL_RCC_ForceBackupDomainReset>:
{
 8009090:	b480      	push	{r7}
 8009092:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800909c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80090a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80090a8:	bf00      	nop
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80090b2:	b480      	push	{r7}
 80090b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80090b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80090c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80090ca:	bf00      	nop
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <LL_RCC_PLLSAI1_Enable>:
{
 80090d4:	b480      	push	{r7}
 80090d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80090d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80090e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80090e6:	6013      	str	r3, [r2, #0]
}
 80090e8:	bf00      	nop
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr

080090f2 <LL_RCC_PLLSAI1_Disable>:
{
 80090f2:	b480      	push	{r7}
 80090f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80090f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009100:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009104:	6013      	str	r3, [r2, #0]
}
 8009106:	bf00      	nop
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <LL_RCC_PLLSAI1_IsReady>:
{
 8009110:	b480      	push	{r7}
 8009112:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8009114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800911e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009122:	d101      	bne.n	8009128 <LL_RCC_PLLSAI1_IsReady+0x18>
 8009124:	2301      	movs	r3, #1
 8009126:	e000      	b.n	800912a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b088      	sub	sp, #32
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800913c:	2300      	movs	r3, #0
 800913e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8009140:	2300      	movs	r3, #0
 8009142:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800914c:	2b00      	cmp	r3, #0
 800914e:	d034      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009154:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009158:	d021      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800915a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800915e:	d81b      	bhi.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009160:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009164:	d01d      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8009166:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800916a:	d815      	bhi.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800916c:	2b00      	cmp	r3, #0
 800916e:	d00b      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8009170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009174:	d110      	bne.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8009176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009184:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8009186:	e00d      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	3304      	adds	r3, #4
 800918c:	4618      	mov	r0, r3
 800918e:	f000 f94d 	bl	800942c <RCCEx_PLLSAI1_ConfigNP>
 8009192:	4603      	mov	r3, r0
 8009194:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009196:	e005      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	77fb      	strb	r3, [r7, #31]
        break;
 800919c:	e002      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800919e:	bf00      	nop
 80091a0:	e000      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80091a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091a4:	7ffb      	ldrb	r3, [r7, #31]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d105      	bne.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7ff fee8 	bl	8008f84 <LL_RCC_SetSAIClockSource>
 80091b4:	e001      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b6:	7ffb      	ldrb	r3, [r7, #31]
 80091b8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d046      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80091c6:	f7ff ff56 	bl	8009076 <LL_RCC_GetRTCClockSource>
 80091ca:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d0:	69ba      	ldr	r2, [r7, #24]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d03c      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80091d6:	f7fe fc8d 	bl	8007af4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d105      	bne.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7ff ff30 	bl	800904a <LL_RCC_SetRTCClockSource>
 80091ea:	e02e      	b.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80091ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091f4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80091f6:	f7ff ff4b 	bl	8009090 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80091fa:	f7ff ff5a 	bl	80090b2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009208:	4313      	orrs	r3, r2
 800920a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800920c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8009216:	f7ff fde1 	bl	8008ddc <LL_RCC_LSE_IsEnabled>
 800921a:	4603      	mov	r3, r0
 800921c:	2b01      	cmp	r3, #1
 800921e:	d114      	bne.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009220:	f7f9 fdd4 	bl	8002dcc <HAL_GetTick>
 8009224:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8009226:	e00b      	b.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009228:	f7f9 fdd0 	bl	8002dcc <HAL_GetTick>
 800922c:	4602      	mov	r2, r0
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	1ad3      	subs	r3, r2, r3
 8009232:	f241 3288 	movw	r2, #5000	; 0x1388
 8009236:	4293      	cmp	r3, r2
 8009238:	d902      	bls.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800923a:	2303      	movs	r3, #3
 800923c:	77fb      	strb	r3, [r7, #31]
              break;
 800923e:	e004      	b.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8009240:	f7ff fdde 	bl	8008e00 <LL_RCC_LSE_IsReady>
 8009244:	4603      	mov	r3, r0
 8009246:	2b01      	cmp	r3, #1
 8009248:	d1ee      	bne.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800924a:	7ffb      	ldrb	r3, [r7, #31]
 800924c:	77bb      	strb	r3, [r7, #30]
 800924e:	e001      	b.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009250:	7ffb      	ldrb	r3, [r7, #31]
 8009252:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 0301 	and.w	r3, r3, #1
 800925c:	2b00      	cmp	r3, #0
 800925e:	d004      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	699b      	ldr	r3, [r3, #24]
 8009264:	4618      	mov	r0, r3
 8009266:	f7ff fe2a 	bl	8008ebe <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 0302 	and.w	r3, r3, #2
 8009272:	2b00      	cmp	r3, #0
 8009274:	d004      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	69db      	ldr	r3, [r3, #28]
 800927a:	4618      	mov	r0, r3
 800927c:	f7ff fe35 	bl	8008eea <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 0310 	and.w	r3, r3, #16
 8009288:	2b00      	cmp	r3, #0
 800928a:	d004      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009290:	4618      	mov	r0, r3
 8009292:	f7ff fe5d 	bl	8008f50 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 0320 	and.w	r3, r3, #32
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d004      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7ff fe52 	bl	8008f50 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f003 0304 	and.w	r3, r3, #4
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d004      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a1b      	ldr	r3, [r3, #32]
 80092bc:	4618      	mov	r0, r3
 80092be:	f7ff fe2a 	bl	8008f16 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f003 0308 	and.w	r3, r3, #8
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d004      	beq.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7ff fe1f 	bl	8008f16 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d022      	beq.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7ff fe8d 	bl	8009008 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092f6:	d107      	bne.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80092f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009306:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800930c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009310:	d10b      	bne.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	3304      	adds	r3, #4
 8009316:	4618      	mov	r0, r3
 8009318:	f000 f8e3 	bl	80094e2 <RCCEx_PLLSAI1_ConfigNQ>
 800931c:	4603      	mov	r3, r0
 800931e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009320:	7ffb      	ldrb	r3, [r7, #31]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d001      	beq.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8009326:	7ffb      	ldrb	r3, [r7, #31]
 8009328:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009332:	2b00      	cmp	r3, #0
 8009334:	d02b      	beq.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800933a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800933e:	d008      	beq.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009344:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009348:	d003      	beq.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934e:	2b00      	cmp	r3, #0
 8009350:	d105      	bne.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009356:	4618      	mov	r0, r3
 8009358:	f7ff fe2a 	bl	8008fb0 <LL_RCC_SetRNGClockSource>
 800935c:	e00a      	b.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009366:	60fb      	str	r3, [r7, #12]
 8009368:	2000      	movs	r0, #0
 800936a:	f7ff fe21 	bl	8008fb0 <LL_RCC_SetRNGClockSource>
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f7ff fe34 	bl	8008fdc <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009378:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800937c:	d107      	bne.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800937e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800938c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009396:	2b00      	cmp	r3, #0
 8009398:	d022      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800939e:	4618      	mov	r0, r3
 80093a0:	f7ff fe3d 	bl	800901e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093ac:	d107      	bne.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80093ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80093b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093bc:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093c6:	d10b      	bne.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	3304      	adds	r3, #4
 80093cc:	4618      	mov	r0, r3
 80093ce:	f000 f8e3 	bl	8009598 <RCCEx_PLLSAI1_ConfigNR>
 80093d2:	4603      	mov	r3, r0
 80093d4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80093d6:	7ffb      	ldrb	r3, [r7, #31]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d001      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80093dc:	7ffb      	ldrb	r3, [r7, #31]
 80093de:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d004      	beq.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7ff fd26 	bl	8008e42 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d009      	beq.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009406:	4618      	mov	r0, r3
 8009408:	f7ff fd45 	bl	8008e96 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009410:	4618      	mov	r0, r3
 8009412:	f7ff fd2c 	bl	8008e6e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8009416:	7fbb      	ldrb	r3, [r7, #30]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3720      	adds	r7, #32
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8009424:	f7ff fcfe 	bl	8008e24 <LL_RCC_MSI_EnablePLLMode>
}
 8009428:	bf00      	nop
 800942a:	bd80      	pop	{r7, pc}

0800942c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009434:	2300      	movs	r3, #0
 8009436:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009438:	f7ff fe5b 	bl	80090f2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800943c:	f7f9 fcc6 	bl	8002dcc <HAL_GetTick>
 8009440:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009442:	e009      	b.n	8009458 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009444:	f7f9 fcc2 	bl	8002dcc <HAL_GetTick>
 8009448:	4602      	mov	r2, r0
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	2b02      	cmp	r3, #2
 8009450:	d902      	bls.n	8009458 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8009452:	2303      	movs	r3, #3
 8009454:	73fb      	strb	r3, [r7, #15]
      break;
 8009456:	e004      	b.n	8009462 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009458:	f7ff fe5a 	bl	8009110 <LL_RCC_PLLSAI1_IsReady>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1f0      	bne.n	8009444 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8009462:	7bfb      	ldrb	r3, [r7, #15]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d137      	bne.n	80094d8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	021b      	lsls	r3, r3, #8
 8009478:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800947c:	4313      	orrs	r3, r2
 800947e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8009480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009492:	4313      	orrs	r3, r2
 8009494:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009496:	f7ff fe1d 	bl	80090d4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800949a:	f7f9 fc97 	bl	8002dcc <HAL_GetTick>
 800949e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80094a0:	e009      	b.n	80094b6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80094a2:	f7f9 fc93 	bl	8002dcc <HAL_GetTick>
 80094a6:	4602      	mov	r2, r0
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	1ad3      	subs	r3, r2, r3
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d902      	bls.n	80094b6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80094b0:	2303      	movs	r3, #3
 80094b2:	73fb      	strb	r3, [r7, #15]
        break;
 80094b4:	e004      	b.n	80094c0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80094b6:	f7ff fe2b 	bl	8009110 <LL_RCC_PLLSAI1_IsReady>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d1f0      	bne.n	80094a2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80094c0:	7bfb      	ldrb	r3, [r7, #15]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d108      	bne.n	80094d8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80094c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094ca:	691a      	ldr	r2, [r3, #16]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094d4:	4313      	orrs	r3, r2
 80094d6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80094d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b084      	sub	sp, #16
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80094ee:	f7ff fe00 	bl	80090f2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80094f2:	f7f9 fc6b 	bl	8002dcc <HAL_GetTick>
 80094f6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80094f8:	e009      	b.n	800950e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80094fa:	f7f9 fc67 	bl	8002dcc <HAL_GetTick>
 80094fe:	4602      	mov	r2, r0
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	2b02      	cmp	r3, #2
 8009506:	d902      	bls.n	800950e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8009508:	2303      	movs	r3, #3
 800950a:	73fb      	strb	r3, [r7, #15]
      break;
 800950c:	e004      	b.n	8009518 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800950e:	f7ff fdff 	bl	8009110 <LL_RCC_PLLSAI1_IsReady>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1f0      	bne.n	80094fa <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8009518:	7bfb      	ldrb	r3, [r7, #15]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d137      	bne.n	800958e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800951e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	021b      	lsls	r3, r3, #8
 800952e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009532:	4313      	orrs	r3, r2
 8009534:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8009536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009548:	4313      	orrs	r3, r2
 800954a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800954c:	f7ff fdc2 	bl	80090d4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009550:	f7f9 fc3c 	bl	8002dcc <HAL_GetTick>
 8009554:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009556:	e009      	b.n	800956c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009558:	f7f9 fc38 	bl	8002dcc <HAL_GetTick>
 800955c:	4602      	mov	r2, r0
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	2b02      	cmp	r3, #2
 8009564:	d902      	bls.n	800956c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8009566:	2303      	movs	r3, #3
 8009568:	73fb      	strb	r3, [r7, #15]
        break;
 800956a:	e004      	b.n	8009576 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800956c:	f7ff fdd0 	bl	8009110 <LL_RCC_PLLSAI1_IsReady>
 8009570:	4603      	mov	r3, r0
 8009572:	2b01      	cmp	r3, #1
 8009574:	d1f0      	bne.n	8009558 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8009576:	7bfb      	ldrb	r3, [r7, #15]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d108      	bne.n	800958e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800957c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009580:	691a      	ldr	r2, [r3, #16]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800958a:	4313      	orrs	r3, r2
 800958c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800958e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009590:	4618      	mov	r0, r3
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80095a4:	f7ff fda5 	bl	80090f2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80095a8:	f7f9 fc10 	bl	8002dcc <HAL_GetTick>
 80095ac:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80095ae:	e009      	b.n	80095c4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80095b0:	f7f9 fc0c 	bl	8002dcc <HAL_GetTick>
 80095b4:	4602      	mov	r2, r0
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d902      	bls.n	80095c4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80095be:	2303      	movs	r3, #3
 80095c0:	73fb      	strb	r3, [r7, #15]
      break;
 80095c2:	e004      	b.n	80095ce <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80095c4:	f7ff fda4 	bl	8009110 <LL_RCC_PLLSAI1_IsReady>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1f0      	bne.n	80095b0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80095ce:	7bfb      	ldrb	r3, [r7, #15]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d137      	bne.n	8009644 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80095d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	021b      	lsls	r3, r3, #8
 80095e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80095e8:	4313      	orrs	r3, r2
 80095ea:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80095ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80095fe:	4313      	orrs	r3, r2
 8009600:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009602:	f7ff fd67 	bl	80090d4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009606:	f7f9 fbe1 	bl	8002dcc <HAL_GetTick>
 800960a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800960c:	e009      	b.n	8009622 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800960e:	f7f9 fbdd 	bl	8002dcc <HAL_GetTick>
 8009612:	4602      	mov	r2, r0
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	2b02      	cmp	r3, #2
 800961a:	d902      	bls.n	8009622 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800961c:	2303      	movs	r3, #3
 800961e:	73fb      	strb	r3, [r7, #15]
        break;
 8009620:	e004      	b.n	800962c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009622:	f7ff fd75 	bl	8009110 <LL_RCC_PLLSAI1_IsReady>
 8009626:	4603      	mov	r3, r0
 8009628:	2b01      	cmp	r3, #1
 800962a:	d1f0      	bne.n	800960e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800962c:	7bfb      	ldrb	r3, [r7, #15]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d108      	bne.n	8009644 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009636:	691a      	ldr	r2, [r3, #16]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009640:	4313      	orrs	r3, r2
 8009642:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009644:	7bfb      	ldrb	r3, [r7, #15]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
	...

08009650 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d101      	bne.n	8009662 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	e09f      	b.n	80097a2 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009668:	b2db      	uxtb	r3, r3
 800966a:	2b00      	cmp	r3, #0
 800966c:	d106      	bne.n	800967c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f7f9 f8fa 	bl	8002870 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2202      	movs	r2, #2
 8009680:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009684:	4b49      	ldr	r3, [pc, #292]	; (80097ac <HAL_RTC_Init+0x15c>)
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	f003 0310 	and.w	r3, r3, #16
 800968c:	2b10      	cmp	r3, #16
 800968e:	d07e      	beq.n	800978e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	22ca      	movs	r2, #202	; 0xca
 8009696:	625a      	str	r2, [r3, #36]	; 0x24
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2253      	movs	r2, #83	; 0x53
 800969e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 f8ab 	bl	80097fc <RTC_EnterInitMode>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d00a      	beq.n	80096c2 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	22ff      	movs	r2, #255	; 0xff
 80096b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2204      	movs	r2, #4
 80096b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	73fb      	strb	r3, [r7, #15]
 80096c0:	e067      	b.n	8009792 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	6812      	ldr	r2, [r2, #0]
 80096cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80096d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096d4:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	6899      	ldr	r1, [r3, #8]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685a      	ldr	r2, [r3, #4]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	431a      	orrs	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	699b      	ldr	r3, [r3, #24]
 80096ea:	431a      	orrs	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	430a      	orrs	r2, r1
 80096f2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	68d2      	ldr	r2, [r2, #12]
 80096fc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	6919      	ldr	r1, [r3, #16]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	041a      	lsls	r2, r3, #16
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	430a      	orrs	r2, r1
 8009710:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68da      	ldr	r2, [r3, #12]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009720:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f022 0203 	bic.w	r2, r2, #3
 8009730:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	69da      	ldr	r2, [r3, #28]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	695b      	ldr	r3, [r3, #20]
 8009740:	431a      	orrs	r2, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	430a      	orrs	r2, r1
 8009748:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	f003 0320 	and.w	r3, r3, #32
 8009754:	2b00      	cmp	r3, #0
 8009756:	d113      	bne.n	8009780 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 f829 	bl	80097b0 <HAL_RTC_WaitForSynchro>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00d      	beq.n	8009780 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	22ff      	movs	r2, #255	; 0xff
 800976a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2204      	movs	r2, #4
 8009770:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	e010      	b.n	80097a2 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	22ff      	movs	r2, #255	; 0xff
 8009786:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8009788:	2300      	movs	r3, #0
 800978a:	73fb      	strb	r3, [r7, #15]
 800978c:	e001      	b.n	8009792 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800978e:	2300      	movs	r3, #0
 8009790:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009792:	7bfb      	ldrb	r3, [r7, #15]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d103      	bne.n	80097a0 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80097a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	40002800 	.word	0x40002800

080097b0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68da      	ldr	r2, [r3, #12]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80097c6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80097c8:	f7f9 fb00 	bl	8002dcc <HAL_GetTick>
 80097cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80097ce:	e009      	b.n	80097e4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80097d0:	f7f9 fafc 	bl	8002dcc <HAL_GetTick>
 80097d4:	4602      	mov	r2, r0
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	1ad3      	subs	r3, r2, r3
 80097da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097de:	d901      	bls.n	80097e4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80097e0:	2303      	movs	r3, #3
 80097e2:	e007      	b.n	80097f4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	f003 0320 	and.w	r3, r3, #32
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d0ee      	beq.n	80097d0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3710      	adds	r7, #16
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800980e:	2b00      	cmp	r3, #0
 8009810:	d119      	bne.n	8009846 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f04f 32ff 	mov.w	r2, #4294967295
 800981a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800981c:	f7f9 fad6 	bl	8002dcc <HAL_GetTick>
 8009820:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009822:	e009      	b.n	8009838 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009824:	f7f9 fad2 	bl	8002dcc <HAL_GetTick>
 8009828:	4602      	mov	r2, r0
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009832:	d901      	bls.n	8009838 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8009834:	2303      	movs	r3, #3
 8009836:	e007      	b.n	8009848 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009842:	2b00      	cmp	r3, #0
 8009844:	d0ee      	beq.n	8009824 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3710      	adds	r7, #16
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b086      	sub	sp, #24
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009862:	2b01      	cmp	r3, #1
 8009864:	d101      	bne.n	800986a <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8009866:	2302      	movs	r3, #2
 8009868:	e089      	b.n	800997e <HAL_RTCEx_SetWakeUpTimer+0x12e>
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2201      	movs	r2, #1
 800986e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2202      	movs	r2, #2
 8009876:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	22ca      	movs	r2, #202	; 0xca
 8009880:	625a      	str	r2, [r3, #36]	; 0x24
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2253      	movs	r2, #83	; 0x53
 8009888:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009894:	2b00      	cmp	r3, #0
 8009896:	d020      	beq.n	80098da <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 8009898:	f7f9 fa98 	bl	8002dcc <HAL_GetTick>
 800989c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800989e:	e015      	b.n	80098cc <HAL_RTCEx_SetWakeUpTimer+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80098a0:	f7f9 fa94 	bl	8002dcc <HAL_GetTick>
 80098a4:	4602      	mov	r2, r0
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	1ad3      	subs	r3, r2, r3
 80098aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098ae:	d90d      	bls.n	80098cc <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	22ff      	movs	r2, #255	; 0xff
 80098b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2203      	movs	r2, #3
 80098bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80098c8:	2303      	movs	r3, #3
 80098ca:	e058      	b.n	800997e <HAL_RTCEx_SetWakeUpTimer+0x12e>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	f003 0304 	and.w	r3, r3, #4
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1e2      	bne.n	80098a0 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	689a      	ldr	r2, [r3, #8]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098e8:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80098ea:	f7f9 fa6f 	bl	8002dcc <HAL_GetTick>
 80098ee:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80098f0:	e015      	b.n	800991e <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80098f2:	f7f9 fa6b 	bl	8002dcc <HAL_GetTick>
 80098f6:	4602      	mov	r2, r0
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	1ad3      	subs	r3, r2, r3
 80098fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009900:	d90d      	bls.n	800991e <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	22ff      	movs	r2, #255	; 0xff
 8009908:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2203      	movs	r2, #3
 800990e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800991a:	2303      	movs	r3, #3
 800991c:	e02f      	b.n	800997e <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	f003 0304 	and.w	r3, r3, #4
 8009928:	2b00      	cmp	r3, #0
 800992a:	d0e2      	beq.n	80098f2 <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	689a      	ldr	r2, [r3, #8]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f022 0207 	bic.w	r2, r2, #7
 800993a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6899      	ldr	r1, [r3, #8]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	430a      	orrs	r2, r1
 800994a:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	68ba      	ldr	r2, [r7, #8]
 8009952:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	689a      	ldr	r2, [r3, #8]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009962:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	22ff      	movs	r2, #255	; 0xff
 800996a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2201      	movs	r2, #1
 8009970:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3718      	adds	r7, #24
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b082      	sub	sp, #8
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d101      	bne.n	8009998 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	e049      	b.n	8009a2c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d106      	bne.n	80099b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f7f8 ff8b 	bl	80028c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2202      	movs	r2, #2
 80099b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	3304      	adds	r3, #4
 80099c2:	4619      	mov	r1, r3
 80099c4:	4610      	mov	r0, r2
 80099c6:	f000 fbd7 	bl	800a178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2201      	movs	r2, #1
 80099f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2201      	movs	r2, #1
 8009a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3708      	adds	r7, #8
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d101      	bne.n	8009a46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e049      	b.n	8009ada <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d106      	bne.n	8009a60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f841 	bl	8009ae2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2202      	movs	r2, #2
 8009a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	3304      	adds	r3, #4
 8009a70:	4619      	mov	r1, r3
 8009a72:	4610      	mov	r0, r2
 8009a74:	f000 fb80 	bl	800a178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2201      	movs	r2, #1
 8009a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3708      	adds	r7, #8
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009ae2:	b480      	push	{r7}
 8009ae4:	b083      	sub	sp, #12
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009aea:	bf00      	nop
 8009aec:	370c      	adds	r7, #12
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
	...

08009af8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d109      	bne.n	8009b1c <HAL_TIM_PWM_Start+0x24>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	bf14      	ite	ne
 8009b14:	2301      	movne	r3, #1
 8009b16:	2300      	moveq	r3, #0
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	e03c      	b.n	8009b96 <HAL_TIM_PWM_Start+0x9e>
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	2b04      	cmp	r3, #4
 8009b20:	d109      	bne.n	8009b36 <HAL_TIM_PWM_Start+0x3e>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	bf14      	ite	ne
 8009b2e:	2301      	movne	r3, #1
 8009b30:	2300      	moveq	r3, #0
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	e02f      	b.n	8009b96 <HAL_TIM_PWM_Start+0x9e>
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	2b08      	cmp	r3, #8
 8009b3a:	d109      	bne.n	8009b50 <HAL_TIM_PWM_Start+0x58>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	bf14      	ite	ne
 8009b48:	2301      	movne	r3, #1
 8009b4a:	2300      	moveq	r3, #0
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	e022      	b.n	8009b96 <HAL_TIM_PWM_Start+0x9e>
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	2b0c      	cmp	r3, #12
 8009b54:	d109      	bne.n	8009b6a <HAL_TIM_PWM_Start+0x72>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	bf14      	ite	ne
 8009b62:	2301      	movne	r3, #1
 8009b64:	2300      	moveq	r3, #0
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	e015      	b.n	8009b96 <HAL_TIM_PWM_Start+0x9e>
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2b10      	cmp	r3, #16
 8009b6e:	d109      	bne.n	8009b84 <HAL_TIM_PWM_Start+0x8c>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	bf14      	ite	ne
 8009b7c:	2301      	movne	r3, #1
 8009b7e:	2300      	moveq	r3, #0
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	e008      	b.n	8009b96 <HAL_TIM_PWM_Start+0x9e>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	bf14      	ite	ne
 8009b90:	2301      	movne	r3, #1
 8009b92:	2300      	moveq	r3, #0
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d001      	beq.n	8009b9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e079      	b.n	8009c92 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d104      	bne.n	8009bae <HAL_TIM_PWM_Start+0xb6>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bac:	e023      	b.n	8009bf6 <HAL_TIM_PWM_Start+0xfe>
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	2b04      	cmp	r3, #4
 8009bb2:	d104      	bne.n	8009bbe <HAL_TIM_PWM_Start+0xc6>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2202      	movs	r2, #2
 8009bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bbc:	e01b      	b.n	8009bf6 <HAL_TIM_PWM_Start+0xfe>
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	2b08      	cmp	r3, #8
 8009bc2:	d104      	bne.n	8009bce <HAL_TIM_PWM_Start+0xd6>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2202      	movs	r2, #2
 8009bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bcc:	e013      	b.n	8009bf6 <HAL_TIM_PWM_Start+0xfe>
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	2b0c      	cmp	r3, #12
 8009bd2:	d104      	bne.n	8009bde <HAL_TIM_PWM_Start+0xe6>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2202      	movs	r2, #2
 8009bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009bdc:	e00b      	b.n	8009bf6 <HAL_TIM_PWM_Start+0xfe>
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	2b10      	cmp	r3, #16
 8009be2:	d104      	bne.n	8009bee <HAL_TIM_PWM_Start+0xf6>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2202      	movs	r2, #2
 8009be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bec:	e003      	b.n	8009bf6 <HAL_TIM_PWM_Start+0xfe>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	6839      	ldr	r1, [r7, #0]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f000 fe38 	bl	800a874 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a24      	ldr	r2, [pc, #144]	; (8009c9c <HAL_TIM_PWM_Start+0x1a4>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d009      	beq.n	8009c22 <HAL_TIM_PWM_Start+0x12a>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a23      	ldr	r2, [pc, #140]	; (8009ca0 <HAL_TIM_PWM_Start+0x1a8>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d004      	beq.n	8009c22 <HAL_TIM_PWM_Start+0x12a>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a21      	ldr	r2, [pc, #132]	; (8009ca4 <HAL_TIM_PWM_Start+0x1ac>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d101      	bne.n	8009c26 <HAL_TIM_PWM_Start+0x12e>
 8009c22:	2301      	movs	r3, #1
 8009c24:	e000      	b.n	8009c28 <HAL_TIM_PWM_Start+0x130>
 8009c26:	2300      	movs	r3, #0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d007      	beq.n	8009c3c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c3a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a16      	ldr	r2, [pc, #88]	; (8009c9c <HAL_TIM_PWM_Start+0x1a4>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d004      	beq.n	8009c50 <HAL_TIM_PWM_Start+0x158>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c4e:	d115      	bne.n	8009c7c <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	689a      	ldr	r2, [r3, #8]
 8009c56:	4b14      	ldr	r3, [pc, #80]	; (8009ca8 <HAL_TIM_PWM_Start+0x1b0>)
 8009c58:	4013      	ands	r3, r2
 8009c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2b06      	cmp	r3, #6
 8009c60:	d015      	beq.n	8009c8e <HAL_TIM_PWM_Start+0x196>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c68:	d011      	beq.n	8009c8e <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f042 0201 	orr.w	r2, r2, #1
 8009c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c7a:	e008      	b.n	8009c8e <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f042 0201 	orr.w	r2, r2, #1
 8009c8a:	601a      	str	r2, [r3, #0]
 8009c8c:	e000      	b.n	8009c90 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	40012c00 	.word	0x40012c00
 8009ca0:	40014400 	.word	0x40014400
 8009ca4:	40014800 	.word	0x40014800
 8009ca8:	00010007 	.word	0x00010007

08009cac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f000 fdd8 	bl	800a874 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a39      	ldr	r2, [pc, #228]	; (8009db0 <HAL_TIM_PWM_Stop+0x104>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d009      	beq.n	8009ce2 <HAL_TIM_PWM_Stop+0x36>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a38      	ldr	r2, [pc, #224]	; (8009db4 <HAL_TIM_PWM_Stop+0x108>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d004      	beq.n	8009ce2 <HAL_TIM_PWM_Stop+0x36>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a36      	ldr	r2, [pc, #216]	; (8009db8 <HAL_TIM_PWM_Stop+0x10c>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d101      	bne.n	8009ce6 <HAL_TIM_PWM_Stop+0x3a>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e000      	b.n	8009ce8 <HAL_TIM_PWM_Stop+0x3c>
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d017      	beq.n	8009d1c <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	6a1a      	ldr	r2, [r3, #32]
 8009cf2:	f241 1311 	movw	r3, #4369	; 0x1111
 8009cf6:	4013      	ands	r3, r2
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d10f      	bne.n	8009d1c <HAL_TIM_PWM_Stop+0x70>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	6a1a      	ldr	r2, [r3, #32]
 8009d02:	f240 4344 	movw	r3, #1092	; 0x444
 8009d06:	4013      	ands	r3, r2
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d107      	bne.n	8009d1c <HAL_TIM_PWM_Stop+0x70>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d1a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6a1a      	ldr	r2, [r3, #32]
 8009d22:	f241 1311 	movw	r3, #4369	; 0x1111
 8009d26:	4013      	ands	r3, r2
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10f      	bne.n	8009d4c <HAL_TIM_PWM_Stop+0xa0>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	6a1a      	ldr	r2, [r3, #32]
 8009d32:	f240 4344 	movw	r3, #1092	; 0x444
 8009d36:	4013      	ands	r3, r2
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d107      	bne.n	8009d4c <HAL_TIM_PWM_Stop+0xa0>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f022 0201 	bic.w	r2, r2, #1
 8009d4a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d104      	bne.n	8009d5c <HAL_TIM_PWM_Stop+0xb0>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2201      	movs	r2, #1
 8009d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d5a:	e023      	b.n	8009da4 <HAL_TIM_PWM_Stop+0xf8>
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	2b04      	cmp	r3, #4
 8009d60:	d104      	bne.n	8009d6c <HAL_TIM_PWM_Stop+0xc0>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d6a:	e01b      	b.n	8009da4 <HAL_TIM_PWM_Stop+0xf8>
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	2b08      	cmp	r3, #8
 8009d70:	d104      	bne.n	8009d7c <HAL_TIM_PWM_Stop+0xd0>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d7a:	e013      	b.n	8009da4 <HAL_TIM_PWM_Stop+0xf8>
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	2b0c      	cmp	r3, #12
 8009d80:	d104      	bne.n	8009d8c <HAL_TIM_PWM_Stop+0xe0>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2201      	movs	r2, #1
 8009d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009d8a:	e00b      	b.n	8009da4 <HAL_TIM_PWM_Stop+0xf8>
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	2b10      	cmp	r3, #16
 8009d90:	d104      	bne.n	8009d9c <HAL_TIM_PWM_Stop+0xf0>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2201      	movs	r2, #1
 8009d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d9a:	e003      	b.n	8009da4 <HAL_TIM_PWM_Stop+0xf8>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8009da4:	2300      	movs	r3, #0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	40012c00 	.word	0x40012c00
 8009db4:	40014400 	.word	0x40014400
 8009db8:	40014800 	.word	0x40014800

08009dbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b086      	sub	sp, #24
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d101      	bne.n	8009dda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009dd6:	2302      	movs	r3, #2
 8009dd8:	e0ff      	b.n	8009fda <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2b14      	cmp	r3, #20
 8009de6:	f200 80f0 	bhi.w	8009fca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009dea:	a201      	add	r2, pc, #4	; (adr r2, 8009df0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df0:	08009e45 	.word	0x08009e45
 8009df4:	08009fcb 	.word	0x08009fcb
 8009df8:	08009fcb 	.word	0x08009fcb
 8009dfc:	08009fcb 	.word	0x08009fcb
 8009e00:	08009e85 	.word	0x08009e85
 8009e04:	08009fcb 	.word	0x08009fcb
 8009e08:	08009fcb 	.word	0x08009fcb
 8009e0c:	08009fcb 	.word	0x08009fcb
 8009e10:	08009ec7 	.word	0x08009ec7
 8009e14:	08009fcb 	.word	0x08009fcb
 8009e18:	08009fcb 	.word	0x08009fcb
 8009e1c:	08009fcb 	.word	0x08009fcb
 8009e20:	08009f07 	.word	0x08009f07
 8009e24:	08009fcb 	.word	0x08009fcb
 8009e28:	08009fcb 	.word	0x08009fcb
 8009e2c:	08009fcb 	.word	0x08009fcb
 8009e30:	08009f49 	.word	0x08009f49
 8009e34:	08009fcb 	.word	0x08009fcb
 8009e38:	08009fcb 	.word	0x08009fcb
 8009e3c:	08009fcb 	.word	0x08009fcb
 8009e40:	08009f89 	.word	0x08009f89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68b9      	ldr	r1, [r7, #8]
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f000 f9f8 	bl	800a240 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	699a      	ldr	r2, [r3, #24]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f042 0208 	orr.w	r2, r2, #8
 8009e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	699a      	ldr	r2, [r3, #24]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f022 0204 	bic.w	r2, r2, #4
 8009e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6999      	ldr	r1, [r3, #24]
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	691a      	ldr	r2, [r3, #16]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	430a      	orrs	r2, r1
 8009e80:	619a      	str	r2, [r3, #24]
      break;
 8009e82:	e0a5      	b.n	8009fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	68b9      	ldr	r1, [r7, #8]
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f000 fa54 	bl	800a338 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	699a      	ldr	r2, [r3, #24]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	699a      	ldr	r2, [r3, #24]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	6999      	ldr	r1, [r3, #24]
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	021a      	lsls	r2, r3, #8
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	430a      	orrs	r2, r1
 8009ec2:	619a      	str	r2, [r3, #24]
      break;
 8009ec4:	e084      	b.n	8009fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	68b9      	ldr	r1, [r7, #8]
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f000 faad 	bl	800a42c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	69da      	ldr	r2, [r3, #28]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f042 0208 	orr.w	r2, r2, #8
 8009ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	69da      	ldr	r2, [r3, #28]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f022 0204 	bic.w	r2, r2, #4
 8009ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	69d9      	ldr	r1, [r3, #28]
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	691a      	ldr	r2, [r3, #16]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	430a      	orrs	r2, r1
 8009f02:	61da      	str	r2, [r3, #28]
      break;
 8009f04:	e064      	b.n	8009fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68b9      	ldr	r1, [r7, #8]
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f000 fb05 	bl	800a51c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	69da      	ldr	r2, [r3, #28]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	69da      	ldr	r2, [r3, #28]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	69d9      	ldr	r1, [r3, #28]
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	021a      	lsls	r2, r3, #8
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	430a      	orrs	r2, r1
 8009f44:	61da      	str	r2, [r3, #28]
      break;
 8009f46:	e043      	b.n	8009fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	68b9      	ldr	r1, [r7, #8]
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f000 fb42 	bl	800a5d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f042 0208 	orr.w	r2, r2, #8
 8009f62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f022 0204 	bic.w	r2, r2, #4
 8009f72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	691a      	ldr	r2, [r3, #16]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	430a      	orrs	r2, r1
 8009f84:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009f86:	e023      	b.n	8009fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68b9      	ldr	r1, [r7, #8]
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f000 fb7a 	bl	800a688 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fa2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	021a      	lsls	r2, r3, #8
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	430a      	orrs	r2, r1
 8009fc6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009fc8:	e002      	b.n	8009fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8009fce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3718      	adds	r7, #24
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop

08009fe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d101      	bne.n	800a000 <HAL_TIM_ConfigClockSource+0x1c>
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	e0b6      	b.n	800a16e <HAL_TIM_ConfigClockSource+0x18a>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2201      	movs	r2, #1
 800a004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2202      	movs	r2, #2
 800a00c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800a01e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a02a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	68ba      	ldr	r2, [r7, #8]
 800a032:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a03c:	d03e      	beq.n	800a0bc <HAL_TIM_ConfigClockSource+0xd8>
 800a03e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a042:	f200 8087 	bhi.w	800a154 <HAL_TIM_ConfigClockSource+0x170>
 800a046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a04a:	f000 8086 	beq.w	800a15a <HAL_TIM_ConfigClockSource+0x176>
 800a04e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a052:	d87f      	bhi.n	800a154 <HAL_TIM_ConfigClockSource+0x170>
 800a054:	2b70      	cmp	r3, #112	; 0x70
 800a056:	d01a      	beq.n	800a08e <HAL_TIM_ConfigClockSource+0xaa>
 800a058:	2b70      	cmp	r3, #112	; 0x70
 800a05a:	d87b      	bhi.n	800a154 <HAL_TIM_ConfigClockSource+0x170>
 800a05c:	2b60      	cmp	r3, #96	; 0x60
 800a05e:	d050      	beq.n	800a102 <HAL_TIM_ConfigClockSource+0x11e>
 800a060:	2b60      	cmp	r3, #96	; 0x60
 800a062:	d877      	bhi.n	800a154 <HAL_TIM_ConfigClockSource+0x170>
 800a064:	2b50      	cmp	r3, #80	; 0x50
 800a066:	d03c      	beq.n	800a0e2 <HAL_TIM_ConfigClockSource+0xfe>
 800a068:	2b50      	cmp	r3, #80	; 0x50
 800a06a:	d873      	bhi.n	800a154 <HAL_TIM_ConfigClockSource+0x170>
 800a06c:	2b40      	cmp	r3, #64	; 0x40
 800a06e:	d058      	beq.n	800a122 <HAL_TIM_ConfigClockSource+0x13e>
 800a070:	2b40      	cmp	r3, #64	; 0x40
 800a072:	d86f      	bhi.n	800a154 <HAL_TIM_ConfigClockSource+0x170>
 800a074:	2b30      	cmp	r3, #48	; 0x30
 800a076:	d064      	beq.n	800a142 <HAL_TIM_ConfigClockSource+0x15e>
 800a078:	2b30      	cmp	r3, #48	; 0x30
 800a07a:	d86b      	bhi.n	800a154 <HAL_TIM_ConfigClockSource+0x170>
 800a07c:	2b20      	cmp	r3, #32
 800a07e:	d060      	beq.n	800a142 <HAL_TIM_ConfigClockSource+0x15e>
 800a080:	2b20      	cmp	r3, #32
 800a082:	d867      	bhi.n	800a154 <HAL_TIM_ConfigClockSource+0x170>
 800a084:	2b00      	cmp	r3, #0
 800a086:	d05c      	beq.n	800a142 <HAL_TIM_ConfigClockSource+0x15e>
 800a088:	2b10      	cmp	r3, #16
 800a08a:	d05a      	beq.n	800a142 <HAL_TIM_ConfigClockSource+0x15e>
 800a08c:	e062      	b.n	800a154 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6818      	ldr	r0, [r3, #0]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	6899      	ldr	r1, [r3, #8]
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	685a      	ldr	r2, [r3, #4]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	f000 fbc9 	bl	800a834 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a0b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	609a      	str	r2, [r3, #8]
      break;
 800a0ba:	e04f      	b.n	800a15c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6818      	ldr	r0, [r3, #0]
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	6899      	ldr	r1, [r3, #8]
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	685a      	ldr	r2, [r3, #4]
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	68db      	ldr	r3, [r3, #12]
 800a0cc:	f000 fbb2 	bl	800a834 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	689a      	ldr	r2, [r3, #8]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0de:	609a      	str	r2, [r3, #8]
      break;
 800a0e0:	e03c      	b.n	800a15c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6818      	ldr	r0, [r3, #0]
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	6859      	ldr	r1, [r3, #4]
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	f000 fb24 	bl	800a73c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	2150      	movs	r1, #80	; 0x50
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f000 fb7d 	bl	800a7fa <TIM_ITRx_SetConfig>
      break;
 800a100:	e02c      	b.n	800a15c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6818      	ldr	r0, [r3, #0]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	6859      	ldr	r1, [r3, #4]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	461a      	mov	r2, r3
 800a110:	f000 fb43 	bl	800a79a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2160      	movs	r1, #96	; 0x60
 800a11a:	4618      	mov	r0, r3
 800a11c:	f000 fb6d 	bl	800a7fa <TIM_ITRx_SetConfig>
      break;
 800a120:	e01c      	b.n	800a15c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6818      	ldr	r0, [r3, #0]
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	6859      	ldr	r1, [r3, #4]
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	461a      	mov	r2, r3
 800a130:	f000 fb04 	bl	800a73c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2140      	movs	r1, #64	; 0x40
 800a13a:	4618      	mov	r0, r3
 800a13c:	f000 fb5d 	bl	800a7fa <TIM_ITRx_SetConfig>
      break;
 800a140:	e00c      	b.n	800a15c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4619      	mov	r1, r3
 800a14c:	4610      	mov	r0, r2
 800a14e:	f000 fb54 	bl	800a7fa <TIM_ITRx_SetConfig>
      break;
 800a152:	e003      	b.n	800a15c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	73fb      	strb	r3, [r7, #15]
      break;
 800a158:	e000      	b.n	800a15c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a15a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a16c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
	...

0800a178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a2a      	ldr	r2, [pc, #168]	; (800a234 <TIM_Base_SetConfig+0xbc>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d003      	beq.n	800a198 <TIM_Base_SetConfig+0x20>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a196:	d108      	bne.n	800a1aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a19e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a21      	ldr	r2, [pc, #132]	; (800a234 <TIM_Base_SetConfig+0xbc>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d00b      	beq.n	800a1ca <TIM_Base_SetConfig+0x52>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1b8:	d007      	beq.n	800a1ca <TIM_Base_SetConfig+0x52>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4a1e      	ldr	r2, [pc, #120]	; (800a238 <TIM_Base_SetConfig+0xc0>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d003      	beq.n	800a1ca <TIM_Base_SetConfig+0x52>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a1d      	ldr	r2, [pc, #116]	; (800a23c <TIM_Base_SetConfig+0xc4>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d108      	bne.n	800a1dc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	695b      	ldr	r3, [r3, #20]
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	68fa      	ldr	r2, [r7, #12]
 800a1ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	689a      	ldr	r2, [r3, #8]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a0c      	ldr	r2, [pc, #48]	; (800a234 <TIM_Base_SetConfig+0xbc>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d007      	beq.n	800a218 <TIM_Base_SetConfig+0xa0>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a0b      	ldr	r2, [pc, #44]	; (800a238 <TIM_Base_SetConfig+0xc0>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d003      	beq.n	800a218 <TIM_Base_SetConfig+0xa0>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a0a      	ldr	r2, [pc, #40]	; (800a23c <TIM_Base_SetConfig+0xc4>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d103      	bne.n	800a220 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	691a      	ldr	r2, [r3, #16]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	615a      	str	r2, [r3, #20]
}
 800a226:	bf00      	nop
 800a228:	3714      	adds	r7, #20
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	40012c00 	.word	0x40012c00
 800a238:	40014400 	.word	0x40014400
 800a23c:	40014800 	.word	0x40014800

0800a240 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a240:	b480      	push	{r7}
 800a242:	b087      	sub	sp, #28
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a1b      	ldr	r3, [r3, #32]
 800a24e:	f023 0201 	bic.w	r2, r3, #1
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	699b      	ldr	r3, [r3, #24]
 800a266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a26e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f023 0303 	bic.w	r3, r3, #3
 800a27a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68fa      	ldr	r2, [r7, #12]
 800a282:	4313      	orrs	r3, r2
 800a284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	f023 0302 	bic.w	r3, r3, #2
 800a28c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	697a      	ldr	r2, [r7, #20]
 800a294:	4313      	orrs	r3, r2
 800a296:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	4a24      	ldr	r2, [pc, #144]	; (800a32c <TIM_OC1_SetConfig+0xec>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d007      	beq.n	800a2b0 <TIM_OC1_SetConfig+0x70>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a23      	ldr	r2, [pc, #140]	; (800a330 <TIM_OC1_SetConfig+0xf0>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d003      	beq.n	800a2b0 <TIM_OC1_SetConfig+0x70>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4a22      	ldr	r2, [pc, #136]	; (800a334 <TIM_OC1_SetConfig+0xf4>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d10c      	bne.n	800a2ca <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	f023 0308 	bic.w	r3, r3, #8
 800a2b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	697a      	ldr	r2, [r7, #20]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	f023 0304 	bic.w	r3, r3, #4
 800a2c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4a17      	ldr	r2, [pc, #92]	; (800a32c <TIM_OC1_SetConfig+0xec>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d007      	beq.n	800a2e2 <TIM_OC1_SetConfig+0xa2>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4a17      	ldr	r2, [pc, #92]	; (800a334 <TIM_OC1_SetConfig+0xf4>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d003      	beq.n	800a2e2 <TIM_OC1_SetConfig+0xa2>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4a14      	ldr	r2, [pc, #80]	; (800a330 <TIM_OC1_SetConfig+0xf0>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d111      	bne.n	800a306 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	695b      	ldr	r3, [r3, #20]
 800a2f6:	693a      	ldr	r2, [r7, #16]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	699b      	ldr	r3, [r3, #24]
 800a300:	693a      	ldr	r2, [r7, #16]
 800a302:	4313      	orrs	r3, r2
 800a304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	693a      	ldr	r2, [r7, #16]
 800a30a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	685a      	ldr	r2, [r3, #4]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	697a      	ldr	r2, [r7, #20]
 800a31e:	621a      	str	r2, [r3, #32]
}
 800a320:	bf00      	nop
 800a322:	371c      	adds	r7, #28
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr
 800a32c:	40012c00 	.word	0x40012c00
 800a330:	40014800 	.word	0x40014800
 800a334:	40014400 	.word	0x40014400

0800a338 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a338:	b480      	push	{r7}
 800a33a:	b087      	sub	sp, #28
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	f023 0210 	bic.w	r2, r3, #16
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a1b      	ldr	r3, [r3, #32]
 800a352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	699b      	ldr	r3, [r3, #24]
 800a35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a36a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	021b      	lsls	r3, r3, #8
 800a37a:	68fa      	ldr	r2, [r7, #12]
 800a37c:	4313      	orrs	r3, r2
 800a37e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	f023 0320 	bic.w	r3, r3, #32
 800a386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	011b      	lsls	r3, r3, #4
 800a38e:	697a      	ldr	r2, [r7, #20]
 800a390:	4313      	orrs	r3, r2
 800a392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	4a22      	ldr	r2, [pc, #136]	; (800a420 <TIM_OC2_SetConfig+0xe8>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d10d      	bne.n	800a3b8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	011b      	lsls	r3, r3, #4
 800a3aa:	697a      	ldr	r2, [r7, #20]
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4a19      	ldr	r2, [pc, #100]	; (800a420 <TIM_OC2_SetConfig+0xe8>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d007      	beq.n	800a3d0 <TIM_OC2_SetConfig+0x98>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4a18      	ldr	r2, [pc, #96]	; (800a424 <TIM_OC2_SetConfig+0xec>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d003      	beq.n	800a3d0 <TIM_OC2_SetConfig+0x98>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4a17      	ldr	r2, [pc, #92]	; (800a428 <TIM_OC2_SetConfig+0xf0>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d113      	bne.n	800a3f8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	695b      	ldr	r3, [r3, #20]
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	693a      	ldr	r2, [r7, #16]
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	699b      	ldr	r3, [r3, #24]
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	693a      	ldr	r2, [r7, #16]
 800a3fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	68fa      	ldr	r2, [r7, #12]
 800a402:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	685a      	ldr	r2, [r3, #4]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	697a      	ldr	r2, [r7, #20]
 800a410:	621a      	str	r2, [r3, #32]
}
 800a412:	bf00      	nop
 800a414:	371c      	adds	r7, #28
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	40012c00 	.word	0x40012c00
 800a424:	40014400 	.word	0x40014400
 800a428:	40014800 	.word	0x40014800

0800a42c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b087      	sub	sp, #28
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a1b      	ldr	r3, [r3, #32]
 800a43a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6a1b      	ldr	r3, [r3, #32]
 800a446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	69db      	ldr	r3, [r3, #28]
 800a452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a45a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a45e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f023 0303 	bic.w	r3, r3, #3
 800a466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	4313      	orrs	r3, r2
 800a470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	021b      	lsls	r3, r3, #8
 800a480:	697a      	ldr	r2, [r7, #20]
 800a482:	4313      	orrs	r3, r2
 800a484:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4a21      	ldr	r2, [pc, #132]	; (800a510 <TIM_OC3_SetConfig+0xe4>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d10d      	bne.n	800a4aa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a494:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	021b      	lsls	r3, r3, #8
 800a49c:	697a      	ldr	r2, [r7, #20]
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a4a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	4a18      	ldr	r2, [pc, #96]	; (800a510 <TIM_OC3_SetConfig+0xe4>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d007      	beq.n	800a4c2 <TIM_OC3_SetConfig+0x96>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4a17      	ldr	r2, [pc, #92]	; (800a514 <TIM_OC3_SetConfig+0xe8>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d003      	beq.n	800a4c2 <TIM_OC3_SetConfig+0x96>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4a16      	ldr	r2, [pc, #88]	; (800a518 <TIM_OC3_SetConfig+0xec>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d113      	bne.n	800a4ea <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	011b      	lsls	r3, r3, #4
 800a4d8:	693a      	ldr	r2, [r7, #16]
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	699b      	ldr	r3, [r3, #24]
 800a4e2:	011b      	lsls	r3, r3, #4
 800a4e4:	693a      	ldr	r2, [r7, #16]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	693a      	ldr	r2, [r7, #16]
 800a4ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	685a      	ldr	r2, [r3, #4]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	697a      	ldr	r2, [r7, #20]
 800a502:	621a      	str	r2, [r3, #32]
}
 800a504:	bf00      	nop
 800a506:	371c      	adds	r7, #28
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr
 800a510:	40012c00 	.word	0x40012c00
 800a514:	40014400 	.word	0x40014400
 800a518:	40014800 	.word	0x40014800

0800a51c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b087      	sub	sp, #28
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a1b      	ldr	r3, [r3, #32]
 800a52a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a1b      	ldr	r3, [r3, #32]
 800a536:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	69db      	ldr	r3, [r3, #28]
 800a542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a54a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a54e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	021b      	lsls	r3, r3, #8
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	4313      	orrs	r3, r2
 800a562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a56a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	031b      	lsls	r3, r3, #12
 800a572:	693a      	ldr	r2, [r7, #16]
 800a574:	4313      	orrs	r3, r2
 800a576:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4a14      	ldr	r2, [pc, #80]	; (800a5cc <TIM_OC4_SetConfig+0xb0>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d007      	beq.n	800a590 <TIM_OC4_SetConfig+0x74>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4a13      	ldr	r2, [pc, #76]	; (800a5d0 <TIM_OC4_SetConfig+0xb4>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d003      	beq.n	800a590 <TIM_OC4_SetConfig+0x74>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a12      	ldr	r2, [pc, #72]	; (800a5d4 <TIM_OC4_SetConfig+0xb8>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d109      	bne.n	800a5a4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a596:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	695b      	ldr	r3, [r3, #20]
 800a59c:	019b      	lsls	r3, r3, #6
 800a59e:	697a      	ldr	r2, [r7, #20]
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	697a      	ldr	r2, [r7, #20]
 800a5a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	685a      	ldr	r2, [r3, #4]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	693a      	ldr	r2, [r7, #16]
 800a5bc:	621a      	str	r2, [r3, #32]
}
 800a5be:	bf00      	nop
 800a5c0:	371c      	adds	r7, #28
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr
 800a5ca:	bf00      	nop
 800a5cc:	40012c00 	.word	0x40012c00
 800a5d0:	40014400 	.word	0x40014400
 800a5d4:	40014800 	.word	0x40014800

0800a5d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b087      	sub	sp, #28
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a1b      	ldr	r3, [r3, #32]
 800a5e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6a1b      	ldr	r3, [r3, #32]
 800a5f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a60a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68fa      	ldr	r2, [r7, #12]
 800a612:	4313      	orrs	r3, r2
 800a614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a61c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	041b      	lsls	r3, r3, #16
 800a624:	693a      	ldr	r2, [r7, #16]
 800a626:	4313      	orrs	r3, r2
 800a628:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	4a13      	ldr	r2, [pc, #76]	; (800a67c <TIM_OC5_SetConfig+0xa4>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d007      	beq.n	800a642 <TIM_OC5_SetConfig+0x6a>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	4a12      	ldr	r2, [pc, #72]	; (800a680 <TIM_OC5_SetConfig+0xa8>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d003      	beq.n	800a642 <TIM_OC5_SetConfig+0x6a>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4a11      	ldr	r2, [pc, #68]	; (800a684 <TIM_OC5_SetConfig+0xac>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d109      	bne.n	800a656 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a648:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	695b      	ldr	r3, [r3, #20]
 800a64e:	021b      	lsls	r3, r3, #8
 800a650:	697a      	ldr	r2, [r7, #20]
 800a652:	4313      	orrs	r3, r2
 800a654:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	697a      	ldr	r2, [r7, #20]
 800a65a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	68fa      	ldr	r2, [r7, #12]
 800a660:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	685a      	ldr	r2, [r3, #4]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	693a      	ldr	r2, [r7, #16]
 800a66e:	621a      	str	r2, [r3, #32]
}
 800a670:	bf00      	nop
 800a672:	371c      	adds	r7, #28
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr
 800a67c:	40012c00 	.word	0x40012c00
 800a680:	40014400 	.word	0x40014400
 800a684:	40014800 	.word	0x40014800

0800a688 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a688:	b480      	push	{r7}
 800a68a:	b087      	sub	sp, #28
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a1b      	ldr	r3, [r3, #32]
 800a696:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a1b      	ldr	r3, [r3, #32]
 800a6a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	021b      	lsls	r3, r3, #8
 800a6c2:	68fa      	ldr	r2, [r7, #12]
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a6ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	051b      	lsls	r3, r3, #20
 800a6d6:	693a      	ldr	r2, [r7, #16]
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	4a14      	ldr	r2, [pc, #80]	; (800a730 <TIM_OC6_SetConfig+0xa8>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d007      	beq.n	800a6f4 <TIM_OC6_SetConfig+0x6c>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	4a13      	ldr	r2, [pc, #76]	; (800a734 <TIM_OC6_SetConfig+0xac>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d003      	beq.n	800a6f4 <TIM_OC6_SetConfig+0x6c>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	4a12      	ldr	r2, [pc, #72]	; (800a738 <TIM_OC6_SetConfig+0xb0>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d109      	bne.n	800a708 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a6fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	695b      	ldr	r3, [r3, #20]
 800a700:	029b      	lsls	r3, r3, #10
 800a702:	697a      	ldr	r2, [r7, #20]
 800a704:	4313      	orrs	r3, r2
 800a706:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	697a      	ldr	r2, [r7, #20]
 800a70c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	685a      	ldr	r2, [r3, #4]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	693a      	ldr	r2, [r7, #16]
 800a720:	621a      	str	r2, [r3, #32]
}
 800a722:	bf00      	nop
 800a724:	371c      	adds	r7, #28
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	40012c00 	.word	0x40012c00
 800a734:	40014400 	.word	0x40014400
 800a738:	40014800 	.word	0x40014800

0800a73c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b087      	sub	sp, #28
 800a740:	af00      	add	r7, sp, #0
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	60b9      	str	r1, [r7, #8]
 800a746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	6a1b      	ldr	r3, [r3, #32]
 800a74c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	6a1b      	ldr	r3, [r3, #32]
 800a752:	f023 0201 	bic.w	r2, r3, #1
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	011b      	lsls	r3, r3, #4
 800a76c:	693a      	ldr	r2, [r7, #16]
 800a76e:	4313      	orrs	r3, r2
 800a770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	f023 030a 	bic.w	r3, r3, #10
 800a778:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a77a:	697a      	ldr	r2, [r7, #20]
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	4313      	orrs	r3, r2
 800a780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	693a      	ldr	r2, [r7, #16]
 800a786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	697a      	ldr	r2, [r7, #20]
 800a78c:	621a      	str	r2, [r3, #32]
}
 800a78e:	bf00      	nop
 800a790:	371c      	adds	r7, #28
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a79a:	b480      	push	{r7}
 800a79c:	b087      	sub	sp, #28
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	60f8      	str	r0, [r7, #12]
 800a7a2:	60b9      	str	r1, [r7, #8]
 800a7a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6a1b      	ldr	r3, [r3, #32]
 800a7aa:	f023 0210 	bic.w	r2, r3, #16
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6a1b      	ldr	r3, [r3, #32]
 800a7bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a7c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	031b      	lsls	r3, r3, #12
 800a7ca:	697a      	ldr	r2, [r7, #20]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a7d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	011b      	lsls	r3, r3, #4
 800a7dc:	693a      	ldr	r2, [r7, #16]
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	697a      	ldr	r2, [r7, #20]
 800a7e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	693a      	ldr	r2, [r7, #16]
 800a7ec:	621a      	str	r2, [r3, #32]
}
 800a7ee:	bf00      	nop
 800a7f0:	371c      	adds	r7, #28
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr

0800a7fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a7fa:	b480      	push	{r7}
 800a7fc:	b085      	sub	sp, #20
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
 800a802:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a814:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a816:	683a      	ldr	r2, [r7, #0]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	f043 0307 	orr.w	r3, r3, #7
 800a820:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	609a      	str	r2, [r3, #8]
}
 800a828:	bf00      	nop
 800a82a:	3714      	adds	r7, #20
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a834:	b480      	push	{r7}
 800a836:	b087      	sub	sp, #28
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	607a      	str	r2, [r7, #4]
 800a840:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a84e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	021a      	lsls	r2, r3, #8
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	431a      	orrs	r2, r3
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	697a      	ldr	r2, [r7, #20]
 800a85e:	4313      	orrs	r3, r2
 800a860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	697a      	ldr	r2, [r7, #20]
 800a866:	609a      	str	r2, [r3, #8]
}
 800a868:	bf00      	nop
 800a86a:	371c      	adds	r7, #28
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a874:	b480      	push	{r7}
 800a876:	b087      	sub	sp, #28
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	f003 031f 	and.w	r3, r3, #31
 800a886:	2201      	movs	r2, #1
 800a888:	fa02 f303 	lsl.w	r3, r2, r3
 800a88c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	6a1a      	ldr	r2, [r3, #32]
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	43db      	mvns	r3, r3
 800a896:	401a      	ands	r2, r3
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6a1a      	ldr	r2, [r3, #32]
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	f003 031f 	and.w	r3, r3, #31
 800a8a6:	6879      	ldr	r1, [r7, #4]
 800a8a8:	fa01 f303 	lsl.w	r3, r1, r3
 800a8ac:	431a      	orrs	r2, r3
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	621a      	str	r2, [r3, #32]
}
 800a8b2:	bf00      	nop
 800a8b4:	371c      	adds	r7, #28
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
	...

0800a8c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b085      	sub	sp, #20
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d101      	bne.n	800a8d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a8d4:	2302      	movs	r3, #2
 800a8d6:	e04a      	b.n	800a96e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2202      	movs	r2, #2
 800a8e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a1f      	ldr	r2, [pc, #124]	; (800a97c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d108      	bne.n	800a914 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a908:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	4313      	orrs	r3, r2
 800a912:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a91a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	4313      	orrs	r3, r2
 800a924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a12      	ldr	r2, [pc, #72]	; (800a97c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d004      	beq.n	800a942 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a940:	d10c      	bne.n	800a95c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a948:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	68ba      	ldr	r2, [r7, #8]
 800a950:	4313      	orrs	r3, r2
 800a952:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68ba      	ldr	r2, [r7, #8]
 800a95a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3714      	adds	r7, #20
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop
 800a97c:	40012c00 	.word	0x40012c00

0800a980 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a990:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a994:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	b29a      	uxth	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a9a0:	2300      	movs	r3, #0
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3714      	adds	r7, #20
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr

0800a9ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a9ae:	b480      	push	{r7}
 800a9b0:	b085      	sub	sp, #20
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a9b6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a9ba:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a9c2:	b29a      	uxth	r2, r3
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	43db      	mvns	r3, r3
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3714      	adds	r7, #20
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a9e4:	b084      	sub	sp, #16
 800a9e6:	b480      	push	{r7}
 800a9e8:	b083      	sub	sp, #12
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	f107 0014 	add.w	r0, r7, #20
 800a9f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800aa16:	2300      	movs	r3, #0
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	b004      	add	sp, #16
 800aa24:	4770      	bx	lr
	...

0800aa28 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b09d      	sub	sp, #116	; 0x74
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800aa32:	2300      	movs	r3, #0
 800aa34:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	4413      	add	r3, r2
 800aa42:	881b      	ldrh	r3, [r3, #0]
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800aa4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa4e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	78db      	ldrb	r3, [r3, #3]
 800aa56:	2b03      	cmp	r3, #3
 800aa58:	d81f      	bhi.n	800aa9a <USB_ActivateEndpoint+0x72>
 800aa5a:	a201      	add	r2, pc, #4	; (adr r2, 800aa60 <USB_ActivateEndpoint+0x38>)
 800aa5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa60:	0800aa71 	.word	0x0800aa71
 800aa64:	0800aa8d 	.word	0x0800aa8d
 800aa68:	0800aaa3 	.word	0x0800aaa3
 800aa6c:	0800aa7f 	.word	0x0800aa7f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800aa70:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800aa74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aa78:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800aa7c:	e012      	b.n	800aaa4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800aa7e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800aa82:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800aa86:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800aa8a:	e00b      	b.n	800aaa4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800aa8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800aa90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aa94:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800aa98:	e004      	b.n	800aaa4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800aaa0:	e000      	b.n	800aaa4 <USB_ActivateEndpoint+0x7c>
      break;
 800aaa2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	441a      	add	r2, r3
 800aaae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800aab2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aab6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aabe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	4413      	add	r3, r2
 800aad0:	881b      	ldrh	r3, [r3, #0]
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	b21b      	sxth	r3, r3
 800aad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aade:	b21a      	sxth	r2, r3
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	b21b      	sxth	r3, r3
 800aae6:	4313      	orrs	r3, r2
 800aae8:	b21b      	sxth	r3, r3
 800aaea:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	441a      	add	r2, r3
 800aaf8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800aafc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	7b1b      	ldrb	r3, [r3, #12]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	f040 8178 	bne.w	800ae0a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	785b      	ldrb	r3, [r3, #1]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f000 8084 	beq.w	800ac2c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	61bb      	str	r3, [r7, #24]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	461a      	mov	r2, r3
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	4413      	add	r3, r2
 800ab36:	61bb      	str	r3, [r7, #24]
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	00da      	lsls	r2, r3, #3
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	4413      	add	r3, r2
 800ab42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab46:	617b      	str	r3, [r7, #20]
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	88db      	ldrh	r3, [r3, #6]
 800ab4c:	085b      	lsrs	r3, r3, #1
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	005b      	lsls	r3, r3, #1
 800ab52:	b29a      	uxth	r2, r3
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	4413      	add	r3, r2
 800ab62:	881b      	ldrh	r3, [r3, #0]
 800ab64:	827b      	strh	r3, [r7, #18]
 800ab66:	8a7b      	ldrh	r3, [r7, #18]
 800ab68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d01b      	beq.n	800aba8 <USB_ActivateEndpoint+0x180>
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	4413      	add	r3, r2
 800ab7a:	881b      	ldrh	r3, [r3, #0]
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab86:	823b      	strh	r3, [r7, #16]
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	441a      	add	r2, r3
 800ab92:	8a3b      	ldrh	r3, [r7, #16]
 800ab94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aba0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	78db      	ldrb	r3, [r3, #3]
 800abac:	2b01      	cmp	r3, #1
 800abae:	d020      	beq.n	800abf2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	4413      	add	r3, r2
 800abba:	881b      	ldrh	r3, [r3, #0]
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abc6:	81bb      	strh	r3, [r7, #12]
 800abc8:	89bb      	ldrh	r3, [r7, #12]
 800abca:	f083 0320 	eor.w	r3, r3, #32
 800abce:	81bb      	strh	r3, [r7, #12]
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	441a      	add	r2, r3
 800abda:	89bb      	ldrh	r3, [r7, #12]
 800abdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abec:	b29b      	uxth	r3, r3
 800abee:	8013      	strh	r3, [r2, #0]
 800abf0:	e2d5      	b.n	800b19e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	4413      	add	r3, r2
 800abfc:	881b      	ldrh	r3, [r3, #0]
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac08:	81fb      	strh	r3, [r7, #14]
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	441a      	add	r2, r3
 800ac14:	89fb      	ldrh	r3, [r7, #14]
 800ac16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	8013      	strh	r3, [r2, #0]
 800ac2a:	e2b8      	b.n	800b19e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	633b      	str	r3, [r7, #48]	; 0x30
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	461a      	mov	r2, r3
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3c:	4413      	add	r3, r2
 800ac3e:	633b      	str	r3, [r7, #48]	; 0x30
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	00da      	lsls	r2, r3, #3
 800ac46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac48:	4413      	add	r3, r2
 800ac4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ac4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	88db      	ldrh	r3, [r3, #6]
 800ac54:	085b      	lsrs	r3, r3, #1
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	005b      	lsls	r3, r3, #1
 800ac5a:	b29a      	uxth	r2, r3
 800ac5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac70:	4413      	add	r3, r2
 800ac72:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	00da      	lsls	r2, r3, #3
 800ac7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac7c:	4413      	add	r3, r2
 800ac7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac82:	627b      	str	r3, [r7, #36]	; 0x24
 800ac84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac86:	881b      	ldrh	r3, [r3, #0]
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac8e:	b29a      	uxth	r2, r3
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac92:	801a      	strh	r2, [r3, #0]
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	691b      	ldr	r3, [r3, #16]
 800ac98:	2b3e      	cmp	r3, #62	; 0x3e
 800ac9a:	d91d      	bls.n	800acd8 <USB_ActivateEndpoint+0x2b0>
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	691b      	ldr	r3, [r3, #16]
 800aca0:	095b      	lsrs	r3, r3, #5
 800aca2:	66bb      	str	r3, [r7, #104]	; 0x68
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	691b      	ldr	r3, [r3, #16]
 800aca8:	f003 031f 	and.w	r3, r3, #31
 800acac:	2b00      	cmp	r3, #0
 800acae:	d102      	bne.n	800acb6 <USB_ActivateEndpoint+0x28e>
 800acb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800acb2:	3b01      	subs	r3, #1
 800acb4:	66bb      	str	r3, [r7, #104]	; 0x68
 800acb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb8:	881b      	ldrh	r3, [r3, #0]
 800acba:	b29a      	uxth	r2, r3
 800acbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	029b      	lsls	r3, r3, #10
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	4313      	orrs	r3, r2
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800accc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acd0:	b29a      	uxth	r2, r3
 800acd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd4:	801a      	strh	r2, [r3, #0]
 800acd6:	e026      	b.n	800ad26 <USB_ActivateEndpoint+0x2fe>
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	691b      	ldr	r3, [r3, #16]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d10a      	bne.n	800acf6 <USB_ActivateEndpoint+0x2ce>
 800ace0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace2:	881b      	ldrh	r3, [r3, #0]
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acee:	b29a      	uxth	r2, r3
 800acf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf2:	801a      	strh	r2, [r3, #0]
 800acf4:	e017      	b.n	800ad26 <USB_ActivateEndpoint+0x2fe>
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	691b      	ldr	r3, [r3, #16]
 800acfa:	085b      	lsrs	r3, r3, #1
 800acfc:	66bb      	str	r3, [r7, #104]	; 0x68
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	691b      	ldr	r3, [r3, #16]
 800ad02:	f003 0301 	and.w	r3, r3, #1
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d002      	beq.n	800ad10 <USB_ActivateEndpoint+0x2e8>
 800ad0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad12:	881b      	ldrh	r3, [r3, #0]
 800ad14:	b29a      	uxth	r2, r3
 800ad16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	029b      	lsls	r3, r3, #10
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad24:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	4413      	add	r3, r2
 800ad30:	881b      	ldrh	r3, [r3, #0]
 800ad32:	847b      	strh	r3, [r7, #34]	; 0x22
 800ad34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d01b      	beq.n	800ad76 <USB_ActivateEndpoint+0x34e>
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	4413      	add	r3, r2
 800ad48:	881b      	ldrh	r3, [r3, #0]
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad54:	843b      	strh	r3, [r7, #32]
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	441a      	add	r2, r3
 800ad60:	8c3b      	ldrh	r3, [r7, #32]
 800ad62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d124      	bne.n	800adc8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	4413      	add	r3, r2
 800ad88:	881b      	ldrh	r3, [r3, #0]
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad94:	83bb      	strh	r3, [r7, #28]
 800ad96:	8bbb      	ldrh	r3, [r7, #28]
 800ad98:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ad9c:	83bb      	strh	r3, [r7, #28]
 800ad9e:	8bbb      	ldrh	r3, [r7, #28]
 800ada0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ada4:	83bb      	strh	r3, [r7, #28]
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	441a      	add	r2, r3
 800adb0:	8bbb      	ldrh	r3, [r7, #28]
 800adb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	8013      	strh	r3, [r2, #0]
 800adc6:	e1ea      	b.n	800b19e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	4413      	add	r3, r2
 800add2:	881b      	ldrh	r3, [r3, #0]
 800add4:	b29b      	uxth	r3, r3
 800add6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800adda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adde:	83fb      	strh	r3, [r7, #30]
 800ade0:	8bfb      	ldrh	r3, [r7, #30]
 800ade2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ade6:	83fb      	strh	r3, [r7, #30]
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	441a      	add	r2, r3
 800adf2:	8bfb      	ldrh	r3, [r7, #30]
 800adf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	8013      	strh	r3, [r2, #0]
 800ae08:	e1c9      	b.n	800b19e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	78db      	ldrb	r3, [r3, #3]
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	d11e      	bne.n	800ae50 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	4413      	add	r3, r2
 800ae1c:	881b      	ldrh	r3, [r3, #0]
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae28:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	441a      	add	r2, r3
 800ae36:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ae3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae42:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ae46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	8013      	strh	r3, [r2, #0]
 800ae4e:	e01d      	b.n	800ae8c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	4413      	add	r3, r2
 800ae5a:	881b      	ldrh	r3, [r3, #0]
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ae62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae66:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	441a      	add	r2, r3
 800ae74:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800ae78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	461a      	mov	r2, r3
 800ae9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae9c:	4413      	add	r3, r2
 800ae9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	00da      	lsls	r2, r3, #3
 800aea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aea8:	4413      	add	r3, r2
 800aeaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aeae:	65bb      	str	r3, [r7, #88]	; 0x58
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	891b      	ldrh	r3, [r3, #8]
 800aeb4:	085b      	lsrs	r3, r3, #1
 800aeb6:	b29b      	uxth	r3, r3
 800aeb8:	005b      	lsls	r3, r3, #1
 800aeba:	b29a      	uxth	r2, r3
 800aebc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aebe:	801a      	strh	r2, [r3, #0]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	657b      	str	r3, [r7, #84]	; 0x54
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	461a      	mov	r2, r3
 800aece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aed0:	4413      	add	r3, r2
 800aed2:	657b      	str	r3, [r7, #84]	; 0x54
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	00da      	lsls	r2, r3, #3
 800aeda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aedc:	4413      	add	r3, r2
 800aede:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aee2:	653b      	str	r3, [r7, #80]	; 0x50
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	895b      	ldrh	r3, [r3, #10]
 800aee8:	085b      	lsrs	r3, r3, #1
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	005b      	lsls	r3, r3, #1
 800aeee:	b29a      	uxth	r2, r3
 800aef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aef2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	785b      	ldrb	r3, [r3, #1]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f040 8093 	bne.w	800b024 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	4413      	add	r3, r2
 800af08:	881b      	ldrh	r3, [r3, #0]
 800af0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800af0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800af12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af16:	2b00      	cmp	r3, #0
 800af18:	d01b      	beq.n	800af52 <USB_ActivateEndpoint+0x52a>
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	4413      	add	r3, r2
 800af24:	881b      	ldrh	r3, [r3, #0]
 800af26:	b29b      	uxth	r3, r3
 800af28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af30:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	441a      	add	r2, r3
 800af3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800af3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af4e:	b29b      	uxth	r3, r3
 800af50:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	4413      	add	r3, r2
 800af5c:	881b      	ldrh	r3, [r3, #0]
 800af5e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800af60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800af62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af66:	2b00      	cmp	r3, #0
 800af68:	d01b      	beq.n	800afa2 <USB_ActivateEndpoint+0x57a>
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	4413      	add	r3, r2
 800af74:	881b      	ldrh	r3, [r3, #0]
 800af76:	b29b      	uxth	r3, r3
 800af78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af80:	877b      	strh	r3, [r7, #58]	; 0x3a
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	441a      	add	r2, r3
 800af8c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800af8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	4413      	add	r3, r2
 800afac:	881b      	ldrh	r3, [r3, #0]
 800afae:	b29b      	uxth	r3, r3
 800afb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800afb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afb8:	873b      	strh	r3, [r7, #56]	; 0x38
 800afba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800afbc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800afc0:	873b      	strh	r3, [r7, #56]	; 0x38
 800afc2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800afc4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800afc8:	873b      	strh	r3, [r7, #56]	; 0x38
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	441a      	add	r2, r3
 800afd4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800afd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	4413      	add	r3, r2
 800aff4:	881b      	ldrh	r3, [r3, #0]
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800affc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b000:	86fb      	strh	r3, [r7, #54]	; 0x36
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	441a      	add	r2, r3
 800b00c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b00e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b01a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b01e:	b29b      	uxth	r3, r3
 800b020:	8013      	strh	r3, [r2, #0]
 800b022:	e0bc      	b.n	800b19e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	4413      	add	r3, r2
 800b02e:	881b      	ldrh	r3, [r3, #0]
 800b030:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800b034:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d01d      	beq.n	800b07c <USB_ActivateEndpoint+0x654>
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	4413      	add	r3, r2
 800b04a:	881b      	ldrh	r3, [r3, #0]
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b056:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	441a      	add	r2, r3
 800b064:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b06c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b070:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b078:	b29b      	uxth	r3, r3
 800b07a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	4413      	add	r3, r2
 800b086:	881b      	ldrh	r3, [r3, #0]
 800b088:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b08c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b094:	2b00      	cmp	r3, #0
 800b096:	d01d      	beq.n	800b0d4 <USB_ActivateEndpoint+0x6ac>
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	4413      	add	r3, r2
 800b0a2:	881b      	ldrh	r3, [r3, #0]
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	441a      	add	r2, r3
 800b0bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b0c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	78db      	ldrb	r3, [r3, #3]
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d024      	beq.n	800b126 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	4413      	add	r3, r2
 800b0e6:	881b      	ldrh	r3, [r3, #0]
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800b0f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b0fa:	f083 0320 	eor.w	r3, r3, #32
 800b0fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	441a      	add	r2, r3
 800b10c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b11c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b120:	b29b      	uxth	r3, r3
 800b122:	8013      	strh	r3, [r2, #0]
 800b124:	e01d      	b.n	800b162 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	4413      	add	r3, r2
 800b130:	881b      	ldrh	r3, [r3, #0]
 800b132:	b29b      	uxth	r3, r3
 800b134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b13c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	441a      	add	r2, r3
 800b14a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b14e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b15a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b15e:	b29b      	uxth	r3, r3
 800b160:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	4413      	add	r3, r2
 800b16c:	881b      	ldrh	r3, [r3, #0]
 800b16e:	b29b      	uxth	r3, r3
 800b170:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b178:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	441a      	add	r2, r3
 800b186:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b18a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b18e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b19e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3774      	adds	r7, #116	; 0x74
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop

0800b1b0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b08d      	sub	sp, #52	; 0x34
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	7b1b      	ldrb	r3, [r3, #12]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	f040 808e 	bne.w	800b2e0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	785b      	ldrb	r3, [r3, #1]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d044      	beq.n	800b256 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	4413      	add	r3, r2
 800b1d6:	881b      	ldrh	r3, [r3, #0]
 800b1d8:	81bb      	strh	r3, [r7, #12]
 800b1da:	89bb      	ldrh	r3, [r7, #12]
 800b1dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d01b      	beq.n	800b21c <USB_DeactivateEndpoint+0x6c>
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	4413      	add	r3, r2
 800b1ee:	881b      	ldrh	r3, [r3, #0]
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1fa:	817b      	strh	r3, [r7, #10]
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	441a      	add	r2, r3
 800b206:	897b      	ldrh	r3, [r7, #10]
 800b208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b20c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b214:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b218:	b29b      	uxth	r3, r3
 800b21a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	4413      	add	r3, r2
 800b226:	881b      	ldrh	r3, [r3, #0]
 800b228:	b29b      	uxth	r3, r3
 800b22a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b22e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b232:	813b      	strh	r3, [r7, #8]
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	441a      	add	r2, r3
 800b23e:	893b      	ldrh	r3, [r7, #8]
 800b240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b248:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b24c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b250:	b29b      	uxth	r3, r3
 800b252:	8013      	strh	r3, [r2, #0]
 800b254:	e192      	b.n	800b57c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	4413      	add	r3, r2
 800b260:	881b      	ldrh	r3, [r3, #0]
 800b262:	827b      	strh	r3, [r7, #18]
 800b264:	8a7b      	ldrh	r3, [r7, #18]
 800b266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d01b      	beq.n	800b2a6 <USB_DeactivateEndpoint+0xf6>
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	4413      	add	r3, r2
 800b278:	881b      	ldrh	r3, [r3, #0]
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b284:	823b      	strh	r3, [r7, #16]
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	441a      	add	r2, r3
 800b290:	8a3b      	ldrh	r3, [r7, #16]
 800b292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b29a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b29e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	009b      	lsls	r3, r3, #2
 800b2ae:	4413      	add	r3, r2
 800b2b0:	881b      	ldrh	r3, [r3, #0]
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2bc:	81fb      	strh	r3, [r7, #14]
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	441a      	add	r2, r3
 800b2c8:	89fb      	ldrh	r3, [r7, #14]
 800b2ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	8013      	strh	r3, [r2, #0]
 800b2de:	e14d      	b.n	800b57c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	785b      	ldrb	r3, [r3, #1]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f040 80a5 	bne.w	800b434 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b2ea:	687a      	ldr	r2, [r7, #4]
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	4413      	add	r3, r2
 800b2f4:	881b      	ldrh	r3, [r3, #0]
 800b2f6:	843b      	strh	r3, [r7, #32]
 800b2f8:	8c3b      	ldrh	r3, [r7, #32]
 800b2fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d01b      	beq.n	800b33a <USB_DeactivateEndpoint+0x18a>
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	4413      	add	r3, r2
 800b30c:	881b      	ldrh	r3, [r3, #0]
 800b30e:	b29b      	uxth	r3, r3
 800b310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b318:	83fb      	strh	r3, [r7, #30]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	441a      	add	r2, r3
 800b324:	8bfb      	ldrh	r3, [r7, #30]
 800b326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b32a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b32e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b336:	b29b      	uxth	r3, r3
 800b338:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	4413      	add	r3, r2
 800b344:	881b      	ldrh	r3, [r3, #0]
 800b346:	83bb      	strh	r3, [r7, #28]
 800b348:	8bbb      	ldrh	r3, [r7, #28]
 800b34a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d01b      	beq.n	800b38a <USB_DeactivateEndpoint+0x1da>
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	4413      	add	r3, r2
 800b35c:	881b      	ldrh	r3, [r3, #0]
 800b35e:	b29b      	uxth	r3, r3
 800b360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b368:	837b      	strh	r3, [r7, #26]
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	441a      	add	r2, r3
 800b374:	8b7b      	ldrh	r3, [r7, #26]
 800b376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b37a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b37e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b382:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b386:	b29b      	uxth	r3, r3
 800b388:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	4413      	add	r3, r2
 800b394:	881b      	ldrh	r3, [r3, #0]
 800b396:	b29b      	uxth	r3, r3
 800b398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b39c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3a0:	833b      	strh	r3, [r7, #24]
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	441a      	add	r2, r3
 800b3ac:	8b3b      	ldrh	r3, [r7, #24]
 800b3ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	4413      	add	r3, r2
 800b3cc:	881b      	ldrh	r3, [r3, #0]
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b3d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3d8:	82fb      	strh	r3, [r7, #22]
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	009b      	lsls	r3, r3, #2
 800b3e2:	441a      	add	r2, r3
 800b3e4:	8afb      	ldrh	r3, [r7, #22]
 800b3e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	4413      	add	r3, r2
 800b404:	881b      	ldrh	r3, [r3, #0]
 800b406:	b29b      	uxth	r3, r3
 800b408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b40c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b410:	82bb      	strh	r3, [r7, #20]
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	441a      	add	r2, r3
 800b41c:	8abb      	ldrh	r3, [r7, #20]
 800b41e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b42a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b42e:	b29b      	uxth	r3, r3
 800b430:	8013      	strh	r3, [r2, #0]
 800b432:	e0a3      	b.n	800b57c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	4413      	add	r3, r2
 800b43e:	881b      	ldrh	r3, [r3, #0]
 800b440:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b442:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d01b      	beq.n	800b484 <USB_DeactivateEndpoint+0x2d4>
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	4413      	add	r3, r2
 800b456:	881b      	ldrh	r3, [r3, #0]
 800b458:	b29b      	uxth	r3, r3
 800b45a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b45e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b462:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	441a      	add	r2, r3
 800b46e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b478:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b47c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b480:	b29b      	uxth	r3, r3
 800b482:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	4413      	add	r3, r2
 800b48e:	881b      	ldrh	r3, [r3, #0]
 800b490:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b492:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d01b      	beq.n	800b4d4 <USB_DeactivateEndpoint+0x324>
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	4413      	add	r3, r2
 800b4a6:	881b      	ldrh	r3, [r3, #0]
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4b2:	853b      	strh	r3, [r7, #40]	; 0x28
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	441a      	add	r2, r3
 800b4be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b4c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	009b      	lsls	r3, r3, #2
 800b4dc:	4413      	add	r3, r2
 800b4de:	881b      	ldrh	r3, [r3, #0]
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	441a      	add	r2, r3
 800b4f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b4f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b500:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b508:	b29b      	uxth	r3, r3
 800b50a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	4413      	add	r3, r2
 800b516:	881b      	ldrh	r3, [r3, #0]
 800b518:	b29b      	uxth	r3, r3
 800b51a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b51e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b522:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	441a      	add	r2, r3
 800b52e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b53c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b540:	b29b      	uxth	r3, r3
 800b542:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	4413      	add	r3, r2
 800b54e:	881b      	ldrh	r3, [r3, #0]
 800b550:	b29b      	uxth	r3, r3
 800b552:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b55a:	847b      	strh	r3, [r7, #34]	; 0x22
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	441a      	add	r2, r3
 800b566:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b56c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b578:	b29b      	uxth	r3, r3
 800b57a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b57c:	2300      	movs	r3, #0
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3734      	adds	r7, #52	; 0x34
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr

0800b58a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b0c2      	sub	sp, #264	; 0x108
 800b58e:	af00      	add	r7, sp, #0
 800b590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b594:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b598:	6018      	str	r0, [r3, #0]
 800b59a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b59e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5a2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b5a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	785b      	ldrb	r3, [r3, #1]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	f040 86b7 	bne.w	800c324 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b5b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	699a      	ldr	r2, [r3, #24]
 800b5c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	691b      	ldr	r3, [r3, #16]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d908      	bls.n	800b5e4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b5d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	691b      	ldr	r3, [r3, #16]
 800b5de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b5e2:	e007      	b.n	800b5f4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b5e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	699b      	ldr	r3, [r3, #24]
 800b5f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b5f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	7b1b      	ldrb	r3, [r3, #12]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d13a      	bne.n	800b67a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	6959      	ldr	r1, [r3, #20]
 800b610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	88da      	ldrh	r2, [r3, #6]
 800b61c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b620:	b29b      	uxth	r3, r3
 800b622:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b626:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b62a:	6800      	ldr	r0, [r0, #0]
 800b62c:	f001 fc98 	bl	800cf60 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b634:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	613b      	str	r3, [r7, #16]
 800b63c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b640:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	461a      	mov	r2, r3
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	4413      	add	r3, r2
 800b652:	613b      	str	r3, [r7, #16]
 800b654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	00da      	lsls	r2, r3, #3
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	4413      	add	r3, r2
 800b666:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b66a:	60fb      	str	r3, [r7, #12]
 800b66c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b670:	b29a      	uxth	r2, r3
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	801a      	strh	r2, [r3, #0]
 800b676:	f000 be1f 	b.w	800c2b8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b67a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b67e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	78db      	ldrb	r3, [r3, #3]
 800b686:	2b02      	cmp	r3, #2
 800b688:	f040 8462 	bne.w	800bf50 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b68c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	6a1a      	ldr	r2, [r3, #32]
 800b698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b69c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	691b      	ldr	r3, [r3, #16]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	f240 83df 	bls.w	800be68 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b6aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	4413      	add	r3, r2
 800b6c4:	881b      	ldrh	r3, [r3, #0]
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b6d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	441a      	add	r2, r3
 800b6ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b6f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b6fa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b6fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b702:	b29b      	uxth	r3, r3
 800b704:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b70a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	6a1a      	ldr	r2, [r3, #32]
 800b712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b716:	1ad2      	subs	r2, r2, r3
 800b718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b71c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b728:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	4413      	add	r3, r2
 800b73e:	881b      	ldrh	r3, [r3, #0]
 800b740:	b29b      	uxth	r3, r3
 800b742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b746:	2b00      	cmp	r3, #0
 800b748:	f000 81c7 	beq.w	800bada <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b74c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b750:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	633b      	str	r3, [r7, #48]	; 0x30
 800b758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b75c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	785b      	ldrb	r3, [r3, #1]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d177      	bne.n	800b858 <USB_EPStartXfer+0x2ce>
 800b768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b76c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	62bb      	str	r3, [r7, #40]	; 0x28
 800b774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b778:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b782:	b29b      	uxth	r3, r3
 800b784:	461a      	mov	r2, r3
 800b786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b788:	4413      	add	r3, r2
 800b78a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b78c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	00da      	lsls	r2, r3, #3
 800b79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79c:	4413      	add	r3, r2
 800b79e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b7a2:	627b      	str	r3, [r7, #36]	; 0x24
 800b7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a6:	881b      	ldrh	r3, [r3, #0]
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b7ae:	b29a      	uxth	r2, r3
 800b7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b2:	801a      	strh	r2, [r3, #0]
 800b7b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7b8:	2b3e      	cmp	r3, #62	; 0x3e
 800b7ba:	d921      	bls.n	800b800 <USB_EPStartXfer+0x276>
 800b7bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c0:	095b      	lsrs	r3, r3, #5
 800b7c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b7c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ca:	f003 031f 	and.w	r3, r3, #31
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d104      	bne.n	800b7dc <USB_EPStartXfer+0x252>
 800b7d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b7d6:	3b01      	subs	r3, #1
 800b7d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7de:	881b      	ldrh	r3, [r3, #0]
 800b7e0:	b29a      	uxth	r2, r3
 800b7e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b7e6:	b29b      	uxth	r3, r3
 800b7e8:	029b      	lsls	r3, r3, #10
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fc:	801a      	strh	r2, [r3, #0]
 800b7fe:	e050      	b.n	800b8a2 <USB_EPStartXfer+0x318>
 800b800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b804:	2b00      	cmp	r3, #0
 800b806:	d10a      	bne.n	800b81e <USB_EPStartXfer+0x294>
 800b808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80a:	881b      	ldrh	r3, [r3, #0]
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b816:	b29a      	uxth	r2, r3
 800b818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81a:	801a      	strh	r2, [r3, #0]
 800b81c:	e041      	b.n	800b8a2 <USB_EPStartXfer+0x318>
 800b81e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b822:	085b      	lsrs	r3, r3, #1
 800b824:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b82c:	f003 0301 	and.w	r3, r3, #1
 800b830:	2b00      	cmp	r3, #0
 800b832:	d004      	beq.n	800b83e <USB_EPStartXfer+0x2b4>
 800b834:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b838:	3301      	adds	r3, #1
 800b83a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b840:	881b      	ldrh	r3, [r3, #0]
 800b842:	b29a      	uxth	r2, r3
 800b844:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b848:	b29b      	uxth	r3, r3
 800b84a:	029b      	lsls	r3, r3, #10
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	4313      	orrs	r3, r2
 800b850:	b29a      	uxth	r2, r3
 800b852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b854:	801a      	strh	r2, [r3, #0]
 800b856:	e024      	b.n	800b8a2 <USB_EPStartXfer+0x318>
 800b858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b85c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	785b      	ldrb	r3, [r3, #1]
 800b864:	2b01      	cmp	r3, #1
 800b866:	d11c      	bne.n	800b8a2 <USB_EPStartXfer+0x318>
 800b868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b86c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b876:	b29b      	uxth	r3, r3
 800b878:	461a      	mov	r2, r3
 800b87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87c:	4413      	add	r3, r2
 800b87e:	633b      	str	r3, [r7, #48]	; 0x30
 800b880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	00da      	lsls	r2, r3, #3
 800b88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b890:	4413      	add	r3, r2
 800b892:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b896:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b89c:	b29a      	uxth	r2, r3
 800b89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b8a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	895b      	ldrh	r3, [r3, #10]
 800b8ae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b8b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	6959      	ldr	r1, [r3, #20]
 800b8be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b8c8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b8cc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b8d0:	6800      	ldr	r0, [r0, #0]
 800b8d2:	f001 fb45 	bl	800cf60 <USB_WritePMA>
            ep->xfer_buff += len;
 800b8d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	695a      	ldr	r2, [r3, #20]
 800b8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8e6:	441a      	add	r2, r3
 800b8e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b8f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	6a1a      	ldr	r2, [r3, #32]
 800b900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	691b      	ldr	r3, [r3, #16]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d90f      	bls.n	800b930 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	6a1a      	ldr	r2, [r3, #32]
 800b91c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b920:	1ad2      	subs	r2, r2, r3
 800b922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	621a      	str	r2, [r3, #32]
 800b92e:	e00e      	b.n	800b94e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	6a1b      	ldr	r3, [r3, #32]
 800b93c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	2200      	movs	r2, #0
 800b94c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b94e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	785b      	ldrb	r3, [r3, #1]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d177      	bne.n	800ba4e <USB_EPStartXfer+0x4c4>
 800b95e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b962:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	61bb      	str	r3, [r7, #24]
 800b96a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b96e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b978:	b29b      	uxth	r3, r3
 800b97a:	461a      	mov	r2, r3
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	4413      	add	r3, r2
 800b980:	61bb      	str	r3, [r7, #24]
 800b982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	00da      	lsls	r2, r3, #3
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	4413      	add	r3, r2
 800b994:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b998:	617b      	str	r3, [r7, #20]
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	881b      	ldrh	r3, [r3, #0]
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b9a4:	b29a      	uxth	r2, r3
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	801a      	strh	r2, [r3, #0]
 800b9aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ae:	2b3e      	cmp	r3, #62	; 0x3e
 800b9b0:	d921      	bls.n	800b9f6 <USB_EPStartXfer+0x46c>
 800b9b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9b6:	095b      	lsrs	r3, r3, #5
 800b9b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b9bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c0:	f003 031f 	and.w	r3, r3, #31
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d104      	bne.n	800b9d2 <USB_EPStartXfer+0x448>
 800b9c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9cc:	3b01      	subs	r3, #1
 800b9ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	881b      	ldrh	r3, [r3, #0]
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9dc:	b29b      	uxth	r3, r3
 800b9de:	029b      	lsls	r3, r3, #10
 800b9e0:	b29b      	uxth	r3, r3
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9ee:	b29a      	uxth	r2, r3
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	801a      	strh	r2, [r3, #0]
 800b9f4:	e056      	b.n	800baa4 <USB_EPStartXfer+0x51a>
 800b9f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d10a      	bne.n	800ba14 <USB_EPStartXfer+0x48a>
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	881b      	ldrh	r3, [r3, #0]
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba0c:	b29a      	uxth	r2, r3
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	801a      	strh	r2, [r3, #0]
 800ba12:	e047      	b.n	800baa4 <USB_EPStartXfer+0x51a>
 800ba14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba18:	085b      	lsrs	r3, r3, #1
 800ba1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ba1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba22:	f003 0301 	and.w	r3, r3, #1
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d004      	beq.n	800ba34 <USB_EPStartXfer+0x4aa>
 800ba2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba2e:	3301      	adds	r3, #1
 800ba30:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	881b      	ldrh	r3, [r3, #0]
 800ba38:	b29a      	uxth	r2, r3
 800ba3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	029b      	lsls	r3, r3, #10
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	4313      	orrs	r3, r2
 800ba46:	b29a      	uxth	r2, r3
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	801a      	strh	r2, [r3, #0]
 800ba4c:	e02a      	b.n	800baa4 <USB_EPStartXfer+0x51a>
 800ba4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	785b      	ldrb	r3, [r3, #1]
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d122      	bne.n	800baa4 <USB_EPStartXfer+0x51a>
 800ba5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	623b      	str	r3, [r7, #32]
 800ba6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	6a3b      	ldr	r3, [r7, #32]
 800ba7e:	4413      	add	r3, r2
 800ba80:	623b      	str	r3, [r7, #32]
 800ba82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	00da      	lsls	r2, r3, #3
 800ba90:	6a3b      	ldr	r3, [r7, #32]
 800ba92:	4413      	add	r3, r2
 800ba94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ba98:	61fb      	str	r3, [r7, #28]
 800ba9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	69fb      	ldr	r3, [r7, #28]
 800baa2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800baa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	891b      	ldrh	r3, [r3, #8]
 800bab0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bab8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	6959      	ldr	r1, [r3, #20]
 800bac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800baca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bace:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bad2:	6800      	ldr	r0, [r0, #0]
 800bad4:	f001 fa44 	bl	800cf60 <USB_WritePMA>
 800bad8:	e3ee      	b.n	800c2b8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	785b      	ldrb	r3, [r3, #1]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d177      	bne.n	800bbda <USB_EPStartXfer+0x650>
 800baea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	64bb      	str	r3, [r7, #72]	; 0x48
 800baf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bafa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	461a      	mov	r2, r3
 800bb08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb0a:	4413      	add	r3, r2
 800bb0c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	00da      	lsls	r2, r3, #3
 800bb1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb1e:	4413      	add	r3, r2
 800bb20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bb24:	647b      	str	r3, [r7, #68]	; 0x44
 800bb26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb28:	881b      	ldrh	r3, [r3, #0]
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb30:	b29a      	uxth	r2, r3
 800bb32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb34:	801a      	strh	r2, [r3, #0]
 800bb36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb3a:	2b3e      	cmp	r3, #62	; 0x3e
 800bb3c:	d921      	bls.n	800bb82 <USB_EPStartXfer+0x5f8>
 800bb3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb42:	095b      	lsrs	r3, r3, #5
 800bb44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bb48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb4c:	f003 031f 	and.w	r3, r3, #31
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d104      	bne.n	800bb5e <USB_EPStartXfer+0x5d4>
 800bb54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bb5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb60:	881b      	ldrh	r3, [r3, #0]
 800bb62:	b29a      	uxth	r2, r3
 800bb64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	029b      	lsls	r3, r3, #10
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb7a:	b29a      	uxth	r2, r3
 800bb7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb7e:	801a      	strh	r2, [r3, #0]
 800bb80:	e056      	b.n	800bc30 <USB_EPStartXfer+0x6a6>
 800bb82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d10a      	bne.n	800bba0 <USB_EPStartXfer+0x616>
 800bb8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb8c:	881b      	ldrh	r3, [r3, #0]
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb98:	b29a      	uxth	r2, r3
 800bb9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb9c:	801a      	strh	r2, [r3, #0]
 800bb9e:	e047      	b.n	800bc30 <USB_EPStartXfer+0x6a6>
 800bba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bba4:	085b      	lsrs	r3, r3, #1
 800bba6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bbaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbae:	f003 0301 	and.w	r3, r3, #1
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d004      	beq.n	800bbc0 <USB_EPStartXfer+0x636>
 800bbb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bbba:	3301      	adds	r3, #1
 800bbbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bbc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbc2:	881b      	ldrh	r3, [r3, #0]
 800bbc4:	b29a      	uxth	r2, r3
 800bbc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	029b      	lsls	r3, r3, #10
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	b29a      	uxth	r2, r3
 800bbd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbd6:	801a      	strh	r2, [r3, #0]
 800bbd8:	e02a      	b.n	800bc30 <USB_EPStartXfer+0x6a6>
 800bbda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	785b      	ldrb	r3, [r3, #1]
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d122      	bne.n	800bc30 <USB_EPStartXfer+0x6a6>
 800bbea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	653b      	str	r3, [r7, #80]	; 0x50
 800bbf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	461a      	mov	r2, r3
 800bc08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc0a:	4413      	add	r3, r2
 800bc0c:	653b      	str	r3, [r7, #80]	; 0x50
 800bc0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	00da      	lsls	r2, r3, #3
 800bc1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc1e:	4413      	add	r3, r2
 800bc20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bc24:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc2a:	b29a      	uxth	r2, r3
 800bc2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bc30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	891b      	ldrh	r3, [r3, #8]
 800bc3c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bc40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	6959      	ldr	r1, [r3, #20]
 800bc4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bc56:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bc5a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bc5e:	6800      	ldr	r0, [r0, #0]
 800bc60:	f001 f97e 	bl	800cf60 <USB_WritePMA>
            ep->xfer_buff += len;
 800bc64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	695a      	ldr	r2, [r3, #20]
 800bc70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc74:	441a      	add	r2, r3
 800bc76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bc82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	6a1a      	ldr	r2, [r3, #32]
 800bc8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	691b      	ldr	r3, [r3, #16]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d90f      	bls.n	800bcbe <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800bc9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	6a1a      	ldr	r2, [r3, #32]
 800bcaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcae:	1ad2      	subs	r2, r2, r3
 800bcb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	621a      	str	r2, [r3, #32]
 800bcbc:	e00e      	b.n	800bcdc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800bcbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	6a1b      	ldr	r3, [r3, #32]
 800bcca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800bcce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bcdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bce0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	643b      	str	r3, [r7, #64]	; 0x40
 800bce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	785b      	ldrb	r3, [r3, #1]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d177      	bne.n	800bde8 <USB_EPStartXfer+0x85e>
 800bcf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	461a      	mov	r2, r3
 800bd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd18:	4413      	add	r3, r2
 800bd1a:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	00da      	lsls	r2, r3, #3
 800bd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2c:	4413      	add	r3, r2
 800bd2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bd32:	637b      	str	r3, [r7, #52]	; 0x34
 800bd34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd36:	881b      	ldrh	r3, [r3, #0]
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd3e:	b29a      	uxth	r2, r3
 800bd40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd42:	801a      	strh	r2, [r3, #0]
 800bd44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd48:	2b3e      	cmp	r3, #62	; 0x3e
 800bd4a:	d921      	bls.n	800bd90 <USB_EPStartXfer+0x806>
 800bd4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd50:	095b      	lsrs	r3, r3, #5
 800bd52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bd56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd5a:	f003 031f 	and.w	r3, r3, #31
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d104      	bne.n	800bd6c <USB_EPStartXfer+0x7e2>
 800bd62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd66:	3b01      	subs	r3, #1
 800bd68:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bd6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd6e:	881b      	ldrh	r3, [r3, #0]
 800bd70:	b29a      	uxth	r2, r3
 800bd72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	029b      	lsls	r3, r3, #10
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd88:	b29a      	uxth	r2, r3
 800bd8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd8c:	801a      	strh	r2, [r3, #0]
 800bd8e:	e050      	b.n	800be32 <USB_EPStartXfer+0x8a8>
 800bd90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d10a      	bne.n	800bdae <USB_EPStartXfer+0x824>
 800bd98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd9a:	881b      	ldrh	r3, [r3, #0]
 800bd9c:	b29b      	uxth	r3, r3
 800bd9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bda2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bda6:	b29a      	uxth	r2, r3
 800bda8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdaa:	801a      	strh	r2, [r3, #0]
 800bdac:	e041      	b.n	800be32 <USB_EPStartXfer+0x8a8>
 800bdae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdb2:	085b      	lsrs	r3, r3, #1
 800bdb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bdb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdbc:	f003 0301 	and.w	r3, r3, #1
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d004      	beq.n	800bdce <USB_EPStartXfer+0x844>
 800bdc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdc8:	3301      	adds	r3, #1
 800bdca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bdce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdd0:	881b      	ldrh	r3, [r3, #0]
 800bdd2:	b29a      	uxth	r2, r3
 800bdd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	029b      	lsls	r3, r3, #10
 800bddc:	b29b      	uxth	r3, r3
 800bdde:	4313      	orrs	r3, r2
 800bde0:	b29a      	uxth	r2, r3
 800bde2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bde4:	801a      	strh	r2, [r3, #0]
 800bde6:	e024      	b.n	800be32 <USB_EPStartXfer+0x8a8>
 800bde8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	785b      	ldrb	r3, [r3, #1]
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d11c      	bne.n	800be32 <USB_EPStartXfer+0x8a8>
 800bdf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be06:	b29b      	uxth	r3, r3
 800be08:	461a      	mov	r2, r3
 800be0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be0c:	4413      	add	r3, r2
 800be0e:	643b      	str	r3, [r7, #64]	; 0x40
 800be10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	00da      	lsls	r2, r3, #3
 800be1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be20:	4413      	add	r3, r2
 800be22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800be26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be2c:	b29a      	uxth	r2, r3
 800be2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800be32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	895b      	ldrh	r3, [r3, #10]
 800be3e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800be42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	6959      	ldr	r1, [r3, #20]
 800be4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be52:	b29b      	uxth	r3, r3
 800be54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800be58:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800be5c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800be60:	6800      	ldr	r0, [r0, #0]
 800be62:	f001 f87d 	bl	800cf60 <USB_WritePMA>
 800be66:	e227      	b.n	800c2b8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800be68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	6a1b      	ldr	r3, [r3, #32]
 800be74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800be78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be80:	681a      	ldr	r2, [r3, #0]
 800be82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	4413      	add	r3, r2
 800be92:	881b      	ldrh	r3, [r3, #0]
 800be94:	b29b      	uxth	r3, r3
 800be96:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800be9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be9e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800bea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800beb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	009b      	lsls	r3, r3, #2
 800beba:	441a      	add	r2, r3
 800bebc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800bec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800becc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bed8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bee4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800beee:	b29b      	uxth	r3, r3
 800bef0:	461a      	mov	r2, r3
 800bef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bef4:	4413      	add	r3, r2
 800bef6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800befc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	00da      	lsls	r2, r3, #3
 800bf06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf08:	4413      	add	r3, r2
 800bf0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bf0e:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf14:	b29a      	uxth	r2, r3
 800bf16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf18:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bf1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	891b      	ldrh	r3, [r3, #8]
 800bf26:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bf2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	6959      	ldr	r1, [r3, #20]
 800bf36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf3a:	b29b      	uxth	r3, r3
 800bf3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bf40:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bf44:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bf48:	6800      	ldr	r0, [r0, #0]
 800bf4a:	f001 f809 	bl	800cf60 <USB_WritePMA>
 800bf4e:	e1b3      	b.n	800c2b8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800bf50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	6a1a      	ldr	r2, [r3, #32]
 800bf5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf60:	1ad2      	subs	r2, r2, r3
 800bf62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bf6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	4413      	add	r3, r2
 800bf88:	881b      	ldrh	r3, [r3, #0]
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	f000 80c6 	beq.w	800c122 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bf96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	673b      	str	r3, [r7, #112]	; 0x70
 800bfa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	785b      	ldrb	r3, [r3, #1]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d177      	bne.n	800c0a2 <USB_EPStartXfer+0xb18>
 800bfb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	66bb      	str	r3, [r7, #104]	; 0x68
 800bfbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	461a      	mov	r2, r3
 800bfd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bfd2:	4413      	add	r3, r2
 800bfd4:	66bb      	str	r3, [r7, #104]	; 0x68
 800bfd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	00da      	lsls	r2, r3, #3
 800bfe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bfe6:	4413      	add	r3, r2
 800bfe8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bfec:	667b      	str	r3, [r7, #100]	; 0x64
 800bfee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bff0:	881b      	ldrh	r3, [r3, #0]
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bff8:	b29a      	uxth	r2, r3
 800bffa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bffc:	801a      	strh	r2, [r3, #0]
 800bffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c002:	2b3e      	cmp	r3, #62	; 0x3e
 800c004:	d921      	bls.n	800c04a <USB_EPStartXfer+0xac0>
 800c006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c00a:	095b      	lsrs	r3, r3, #5
 800c00c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c010:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c014:	f003 031f 	and.w	r3, r3, #31
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d104      	bne.n	800c026 <USB_EPStartXfer+0xa9c>
 800c01c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c020:	3b01      	subs	r3, #1
 800c022:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c028:	881b      	ldrh	r3, [r3, #0]
 800c02a:	b29a      	uxth	r2, r3
 800c02c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c030:	b29b      	uxth	r3, r3
 800c032:	029b      	lsls	r3, r3, #10
 800c034:	b29b      	uxth	r3, r3
 800c036:	4313      	orrs	r3, r2
 800c038:	b29b      	uxth	r3, r3
 800c03a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c03e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c042:	b29a      	uxth	r2, r3
 800c044:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c046:	801a      	strh	r2, [r3, #0]
 800c048:	e050      	b.n	800c0ec <USB_EPStartXfer+0xb62>
 800c04a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d10a      	bne.n	800c068 <USB_EPStartXfer+0xade>
 800c052:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c054:	881b      	ldrh	r3, [r3, #0]
 800c056:	b29b      	uxth	r3, r3
 800c058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c05c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c060:	b29a      	uxth	r2, r3
 800c062:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c064:	801a      	strh	r2, [r3, #0]
 800c066:	e041      	b.n	800c0ec <USB_EPStartXfer+0xb62>
 800c068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c06c:	085b      	lsrs	r3, r3, #1
 800c06e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c076:	f003 0301 	and.w	r3, r3, #1
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d004      	beq.n	800c088 <USB_EPStartXfer+0xafe>
 800c07e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c082:	3301      	adds	r3, #1
 800c084:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c08a:	881b      	ldrh	r3, [r3, #0]
 800c08c:	b29a      	uxth	r2, r3
 800c08e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c092:	b29b      	uxth	r3, r3
 800c094:	029b      	lsls	r3, r3, #10
 800c096:	b29b      	uxth	r3, r3
 800c098:	4313      	orrs	r3, r2
 800c09a:	b29a      	uxth	r2, r3
 800c09c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c09e:	801a      	strh	r2, [r3, #0]
 800c0a0:	e024      	b.n	800c0ec <USB_EPStartXfer+0xb62>
 800c0a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	785b      	ldrb	r3, [r3, #1]
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d11c      	bne.n	800c0ec <USB_EPStartXfer+0xb62>
 800c0b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c0c6:	4413      	add	r3, r2
 800c0c8:	673b      	str	r3, [r7, #112]	; 0x70
 800c0ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	00da      	lsls	r2, r3, #3
 800c0d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c0da:	4413      	add	r3, r2
 800c0dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c0e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c0e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0e6:	b29a      	uxth	r2, r3
 800c0e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800c0ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	895b      	ldrh	r3, [r3, #10]
 800c0f8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c0fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c100:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	6959      	ldr	r1, [r3, #20]
 800c108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c112:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c116:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c11a:	6800      	ldr	r0, [r0, #0]
 800c11c:	f000 ff20 	bl	800cf60 <USB_WritePMA>
 800c120:	e0ca      	b.n	800c2b8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	785b      	ldrb	r3, [r3, #1]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d177      	bne.n	800c222 <USB_EPStartXfer+0xc98>
 800c132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c136:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c13e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c142:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	461a      	mov	r2, r3
 800c150:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c152:	4413      	add	r3, r2
 800c154:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c15a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	00da      	lsls	r2, r3, #3
 800c164:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c166:	4413      	add	r3, r2
 800c168:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c16c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c16e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c170:	881b      	ldrh	r3, [r3, #0]
 800c172:	b29b      	uxth	r3, r3
 800c174:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c178:	b29a      	uxth	r2, r3
 800c17a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c17c:	801a      	strh	r2, [r3, #0]
 800c17e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c182:	2b3e      	cmp	r3, #62	; 0x3e
 800c184:	d921      	bls.n	800c1ca <USB_EPStartXfer+0xc40>
 800c186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c18a:	095b      	lsrs	r3, r3, #5
 800c18c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c194:	f003 031f 	and.w	r3, r3, #31
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d104      	bne.n	800c1a6 <USB_EPStartXfer+0xc1c>
 800c19c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c1a0:	3b01      	subs	r3, #1
 800c1a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c1a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1a8:	881b      	ldrh	r3, [r3, #0]
 800c1aa:	b29a      	uxth	r2, r3
 800c1ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	029b      	lsls	r3, r3, #10
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1c2:	b29a      	uxth	r2, r3
 800c1c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1c6:	801a      	strh	r2, [r3, #0]
 800c1c8:	e05c      	b.n	800c284 <USB_EPStartXfer+0xcfa>
 800c1ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d10a      	bne.n	800c1e8 <USB_EPStartXfer+0xc5e>
 800c1d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1d4:	881b      	ldrh	r3, [r3, #0]
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1e0:	b29a      	uxth	r2, r3
 800c1e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1e4:	801a      	strh	r2, [r3, #0]
 800c1e6:	e04d      	b.n	800c284 <USB_EPStartXfer+0xcfa>
 800c1e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1ec:	085b      	lsrs	r3, r3, #1
 800c1ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c1f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1f6:	f003 0301 	and.w	r3, r3, #1
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d004      	beq.n	800c208 <USB_EPStartXfer+0xc7e>
 800c1fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c202:	3301      	adds	r3, #1
 800c204:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c208:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c20a:	881b      	ldrh	r3, [r3, #0]
 800c20c:	b29a      	uxth	r2, r3
 800c20e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c212:	b29b      	uxth	r3, r3
 800c214:	029b      	lsls	r3, r3, #10
 800c216:	b29b      	uxth	r3, r3
 800c218:	4313      	orrs	r3, r2
 800c21a:	b29a      	uxth	r2, r3
 800c21c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c21e:	801a      	strh	r2, [r3, #0]
 800c220:	e030      	b.n	800c284 <USB_EPStartXfer+0xcfa>
 800c222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	785b      	ldrb	r3, [r3, #1]
 800c22e:	2b01      	cmp	r3, #1
 800c230:	d128      	bne.n	800c284 <USB_EPStartXfer+0xcfa>
 800c232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c236:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c244:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c24e:	b29b      	uxth	r3, r3
 800c250:	461a      	mov	r2, r3
 800c252:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c256:	4413      	add	r3, r2
 800c258:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c25c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	00da      	lsls	r2, r3, #3
 800c26a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c26e:	4413      	add	r3, r2
 800c270:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c274:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c27c:	b29a      	uxth	r2, r3
 800c27e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c282:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	891b      	ldrh	r3, [r3, #8]
 800c290:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	6959      	ldr	r1, [r3, #20]
 800c2a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2a4:	b29b      	uxth	r3, r3
 800c2a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c2aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c2ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c2b2:	6800      	ldr	r0, [r0, #0]
 800c2b4:	f000 fe54 	bl	800cf60 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c2b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	4413      	add	r3, r2
 800c2d2:	881b      	ldrh	r3, [r3, #0]
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c2da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2de:	817b      	strh	r3, [r7, #10]
 800c2e0:	897b      	ldrh	r3, [r7, #10]
 800c2e2:	f083 0310 	eor.w	r3, r3, #16
 800c2e6:	817b      	strh	r3, [r7, #10]
 800c2e8:	897b      	ldrh	r3, [r7, #10]
 800c2ea:	f083 0320 	eor.w	r3, r3, #32
 800c2ee:	817b      	strh	r3, [r7, #10]
 800c2f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	441a      	add	r2, r3
 800c30a:	897b      	ldrh	r3, [r7, #10]
 800c30c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	8013      	strh	r3, [r2, #0]
 800c320:	f000 bcde 	b.w	800cce0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	7b1b      	ldrb	r3, [r3, #12]
 800c330:	2b00      	cmp	r3, #0
 800c332:	f040 80bb 	bne.w	800c4ac <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c33a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	699a      	ldr	r2, [r3, #24]
 800c342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	691b      	ldr	r3, [r3, #16]
 800c34e:	429a      	cmp	r2, r3
 800c350:	d917      	bls.n	800c382 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800c352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	691b      	ldr	r3, [r3, #16]
 800c35e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800c362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	699a      	ldr	r2, [r3, #24]
 800c36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c372:	1ad2      	subs	r2, r2, r3
 800c374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	619a      	str	r2, [r3, #24]
 800c380:	e00e      	b.n	800c3a0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800c382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	699b      	ldr	r3, [r3, #24]
 800c38e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800c392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2200      	movs	r2, #0
 800c39e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c3a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c3ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3bc:	b29b      	uxth	r3, r3
 800c3be:	461a      	mov	r2, r3
 800c3c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c3c4:	4413      	add	r3, r2
 800c3c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c3ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	00da      	lsls	r2, r3, #3
 800c3d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c3dc:	4413      	add	r3, r2
 800c3de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c3e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c3e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c3ea:	881b      	ldrh	r3, [r3, #0]
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c3f2:	b29a      	uxth	r2, r3
 800c3f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c3f8:	801a      	strh	r2, [r3, #0]
 800c3fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3fe:	2b3e      	cmp	r3, #62	; 0x3e
 800c400:	d924      	bls.n	800c44c <USB_EPStartXfer+0xec2>
 800c402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c406:	095b      	lsrs	r3, r3, #5
 800c408:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c40c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c410:	f003 031f 	and.w	r3, r3, #31
 800c414:	2b00      	cmp	r3, #0
 800c416:	d104      	bne.n	800c422 <USB_EPStartXfer+0xe98>
 800c418:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c41c:	3b01      	subs	r3, #1
 800c41e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c422:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c426:	881b      	ldrh	r3, [r3, #0]
 800c428:	b29a      	uxth	r2, r3
 800c42a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c42e:	b29b      	uxth	r3, r3
 800c430:	029b      	lsls	r3, r3, #10
 800c432:	b29b      	uxth	r3, r3
 800c434:	4313      	orrs	r3, r2
 800c436:	b29b      	uxth	r3, r3
 800c438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c43c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c440:	b29a      	uxth	r2, r3
 800c442:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c446:	801a      	strh	r2, [r3, #0]
 800c448:	f000 bc10 	b.w	800cc6c <USB_EPStartXfer+0x16e2>
 800c44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c450:	2b00      	cmp	r3, #0
 800c452:	d10c      	bne.n	800c46e <USB_EPStartXfer+0xee4>
 800c454:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c458:	881b      	ldrh	r3, [r3, #0]
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c464:	b29a      	uxth	r2, r3
 800c466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c46a:	801a      	strh	r2, [r3, #0]
 800c46c:	e3fe      	b.n	800cc6c <USB_EPStartXfer+0x16e2>
 800c46e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c472:	085b      	lsrs	r3, r3, #1
 800c474:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c47c:	f003 0301 	and.w	r3, r3, #1
 800c480:	2b00      	cmp	r3, #0
 800c482:	d004      	beq.n	800c48e <USB_EPStartXfer+0xf04>
 800c484:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c488:	3301      	adds	r3, #1
 800c48a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c48e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c492:	881b      	ldrh	r3, [r3, #0]
 800c494:	b29a      	uxth	r2, r3
 800c496:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	029b      	lsls	r3, r3, #10
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	b29a      	uxth	r2, r3
 800c4a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c4a8:	801a      	strh	r2, [r3, #0]
 800c4aa:	e3df      	b.n	800cc6c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c4ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	78db      	ldrb	r3, [r3, #3]
 800c4b8:	2b02      	cmp	r3, #2
 800c4ba:	f040 8218 	bne.w	800c8ee <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c4be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	785b      	ldrb	r3, [r3, #1]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	f040 809d 	bne.w	800c60a <USB_EPStartXfer+0x1080>
 800c4d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c4de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c4f4:	4413      	add	r3, r2
 800c4f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c4fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	00da      	lsls	r2, r3, #3
 800c508:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c50c:	4413      	add	r3, r2
 800c50e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c512:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c516:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c51a:	881b      	ldrh	r3, [r3, #0]
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c522:	b29a      	uxth	r2, r3
 800c524:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c528:	801a      	strh	r2, [r3, #0]
 800c52a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c52e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	691b      	ldr	r3, [r3, #16]
 800c536:	2b3e      	cmp	r3, #62	; 0x3e
 800c538:	d92b      	bls.n	800c592 <USB_EPStartXfer+0x1008>
 800c53a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c53e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	691b      	ldr	r3, [r3, #16]
 800c546:	095b      	lsrs	r3, r3, #5
 800c548:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c54c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	691b      	ldr	r3, [r3, #16]
 800c558:	f003 031f 	and.w	r3, r3, #31
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d104      	bne.n	800c56a <USB_EPStartXfer+0xfe0>
 800c560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c564:	3b01      	subs	r3, #1
 800c566:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c56a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c56e:	881b      	ldrh	r3, [r3, #0]
 800c570:	b29a      	uxth	r2, r3
 800c572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c576:	b29b      	uxth	r3, r3
 800c578:	029b      	lsls	r3, r3, #10
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	4313      	orrs	r3, r2
 800c57e:	b29b      	uxth	r3, r3
 800c580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c588:	b29a      	uxth	r2, r3
 800c58a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c58e:	801a      	strh	r2, [r3, #0]
 800c590:	e070      	b.n	800c674 <USB_EPStartXfer+0x10ea>
 800c592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c596:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	691b      	ldr	r3, [r3, #16]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d10c      	bne.n	800c5bc <USB_EPStartXfer+0x1032>
 800c5a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c5a6:	881b      	ldrh	r3, [r3, #0]
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5b2:	b29a      	uxth	r2, r3
 800c5b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c5b8:	801a      	strh	r2, [r3, #0]
 800c5ba:	e05b      	b.n	800c674 <USB_EPStartXfer+0x10ea>
 800c5bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	691b      	ldr	r3, [r3, #16]
 800c5c8:	085b      	lsrs	r3, r3, #1
 800c5ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c5ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	691b      	ldr	r3, [r3, #16]
 800c5da:	f003 0301 	and.w	r3, r3, #1
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d004      	beq.n	800c5ec <USB_EPStartXfer+0x1062>
 800c5e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c5ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c5f0:	881b      	ldrh	r3, [r3, #0]
 800c5f2:	b29a      	uxth	r2, r3
 800c5f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	029b      	lsls	r3, r3, #10
 800c5fc:	b29b      	uxth	r3, r3
 800c5fe:	4313      	orrs	r3, r2
 800c600:	b29a      	uxth	r2, r3
 800c602:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c606:	801a      	strh	r2, [r3, #0]
 800c608:	e034      	b.n	800c674 <USB_EPStartXfer+0x10ea>
 800c60a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c60e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	785b      	ldrb	r3, [r3, #1]
 800c616:	2b01      	cmp	r3, #1
 800c618:	d12c      	bne.n	800c674 <USB_EPStartXfer+0x10ea>
 800c61a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c61e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c62c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c636:	b29b      	uxth	r3, r3
 800c638:	461a      	mov	r2, r3
 800c63a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c63e:	4413      	add	r3, r2
 800c640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	00da      	lsls	r2, r3, #3
 800c652:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c656:	4413      	add	r3, r2
 800c658:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c65c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	691b      	ldr	r3, [r3, #16]
 800c66c:	b29a      	uxth	r2, r3
 800c66e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c672:	801a      	strh	r2, [r3, #0]
 800c674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c678:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	785b      	ldrb	r3, [r3, #1]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f040 809d 	bne.w	800c7ce <USB_EPStartXfer+0x1244>
 800c694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c698:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c6a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c6b8:	4413      	add	r3, r2
 800c6ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c6be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	00da      	lsls	r2, r3, #3
 800c6cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c6d0:	4413      	add	r3, r2
 800c6d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c6d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c6da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c6de:	881b      	ldrh	r3, [r3, #0]
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c6e6:	b29a      	uxth	r2, r3
 800c6e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c6ec:	801a      	strh	r2, [r3, #0]
 800c6ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	691b      	ldr	r3, [r3, #16]
 800c6fa:	2b3e      	cmp	r3, #62	; 0x3e
 800c6fc:	d92b      	bls.n	800c756 <USB_EPStartXfer+0x11cc>
 800c6fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	691b      	ldr	r3, [r3, #16]
 800c70a:	095b      	lsrs	r3, r3, #5
 800c70c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	691b      	ldr	r3, [r3, #16]
 800c71c:	f003 031f 	and.w	r3, r3, #31
 800c720:	2b00      	cmp	r3, #0
 800c722:	d104      	bne.n	800c72e <USB_EPStartXfer+0x11a4>
 800c724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c728:	3b01      	subs	r3, #1
 800c72a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c72e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c732:	881b      	ldrh	r3, [r3, #0]
 800c734:	b29a      	uxth	r2, r3
 800c736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	029b      	lsls	r3, r3, #10
 800c73e:	b29b      	uxth	r3, r3
 800c740:	4313      	orrs	r3, r2
 800c742:	b29b      	uxth	r3, r3
 800c744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c74c:	b29a      	uxth	r2, r3
 800c74e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c752:	801a      	strh	r2, [r3, #0]
 800c754:	e069      	b.n	800c82a <USB_EPStartXfer+0x12a0>
 800c756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c75a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	691b      	ldr	r3, [r3, #16]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d10c      	bne.n	800c780 <USB_EPStartXfer+0x11f6>
 800c766:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c76a:	881b      	ldrh	r3, [r3, #0]
 800c76c:	b29b      	uxth	r3, r3
 800c76e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c776:	b29a      	uxth	r2, r3
 800c778:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c77c:	801a      	strh	r2, [r3, #0]
 800c77e:	e054      	b.n	800c82a <USB_EPStartXfer+0x12a0>
 800c780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	691b      	ldr	r3, [r3, #16]
 800c78c:	085b      	lsrs	r3, r3, #1
 800c78e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	691b      	ldr	r3, [r3, #16]
 800c79e:	f003 0301 	and.w	r3, r3, #1
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d004      	beq.n	800c7b0 <USB_EPStartXfer+0x1226>
 800c7a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c7b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c7b4:	881b      	ldrh	r3, [r3, #0]
 800c7b6:	b29a      	uxth	r2, r3
 800c7b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7bc:	b29b      	uxth	r3, r3
 800c7be:	029b      	lsls	r3, r3, #10
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	b29a      	uxth	r2, r3
 800c7c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c7ca:	801a      	strh	r2, [r3, #0]
 800c7cc:	e02d      	b.n	800c82a <USB_EPStartXfer+0x12a0>
 800c7ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	785b      	ldrb	r3, [r3, #1]
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d125      	bne.n	800c82a <USB_EPStartXfer+0x12a0>
 800c7de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c7f4:	4413      	add	r3, r2
 800c7f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c7fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	00da      	lsls	r2, r3, #3
 800c808:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c80c:	4413      	add	r3, r2
 800c80e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c812:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c81a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	691b      	ldr	r3, [r3, #16]
 800c822:	b29a      	uxth	r2, r3
 800c824:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c828:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c82a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c82e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	69db      	ldr	r3, [r3, #28]
 800c836:	2b00      	cmp	r3, #0
 800c838:	f000 8218 	beq.w	800cc6c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c83c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c840:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c844:	681a      	ldr	r2, [r3, #0]
 800c846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c84a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	009b      	lsls	r3, r3, #2
 800c854:	4413      	add	r3, r2
 800c856:	881b      	ldrh	r3, [r3, #0]
 800c858:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c85c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c864:	2b00      	cmp	r3, #0
 800c866:	d005      	beq.n	800c874 <USB_EPStartXfer+0x12ea>
 800c868:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c86c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c870:	2b00      	cmp	r3, #0
 800c872:	d10d      	bne.n	800c890 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c874:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f040 81f5 	bne.w	800cc6c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c882:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	f040 81ee 	bne.w	800cc6c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c894:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c898:	681a      	ldr	r2, [r3, #0]
 800c89a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c89e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	4413      	add	r3, r2
 800c8aa:	881b      	ldrh	r3, [r3, #0]
 800c8ac:	b29b      	uxth	r3, r3
 800c8ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8b6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c8ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	009b      	lsls	r3, r3, #2
 800c8d2:	441a      	add	r2, r3
 800c8d4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c8d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c8dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c8e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c8e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	8013      	strh	r3, [r2, #0]
 800c8ec:	e1be      	b.n	800cc6c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c8ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	78db      	ldrb	r3, [r3, #3]
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	f040 81b4 	bne.w	800cc68 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	699a      	ldr	r2, [r3, #24]
 800c90c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	691b      	ldr	r3, [r3, #16]
 800c918:	429a      	cmp	r2, r3
 800c91a:	d917      	bls.n	800c94c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c91c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	691b      	ldr	r3, [r3, #16]
 800c928:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800c92c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	699a      	ldr	r2, [r3, #24]
 800c938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c93c:	1ad2      	subs	r2, r2, r3
 800c93e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	619a      	str	r2, [r3, #24]
 800c94a:	e00e      	b.n	800c96a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c94c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	699b      	ldr	r3, [r3, #24]
 800c958:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800c95c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	2200      	movs	r2, #0
 800c968:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c96a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c96e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	785b      	ldrb	r3, [r3, #1]
 800c976:	2b00      	cmp	r3, #0
 800c978:	f040 8085 	bne.w	800ca86 <USB_EPStartXfer+0x14fc>
 800c97c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c980:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c98a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c98e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c998:	b29b      	uxth	r3, r3
 800c99a:	461a      	mov	r2, r3
 800c99c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c9a0:	4413      	add	r3, r2
 800c9a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c9a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	781b      	ldrb	r3, [r3, #0]
 800c9b2:	00da      	lsls	r2, r3, #3
 800c9b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c9b8:	4413      	add	r3, r2
 800c9ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c9be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c9c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c9c6:	881b      	ldrh	r3, [r3, #0]
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c9d4:	801a      	strh	r2, [r3, #0]
 800c9d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9da:	2b3e      	cmp	r3, #62	; 0x3e
 800c9dc:	d923      	bls.n	800ca26 <USB_EPStartXfer+0x149c>
 800c9de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9e2:	095b      	lsrs	r3, r3, #5
 800c9e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c9e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9ec:	f003 031f 	and.w	r3, r3, #31
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d104      	bne.n	800c9fe <USB_EPStartXfer+0x1474>
 800c9f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c9fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ca02:	881b      	ldrh	r3, [r3, #0]
 800ca04:	b29a      	uxth	r2, r3
 800ca06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	029b      	lsls	r3, r3, #10
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	4313      	orrs	r3, r2
 800ca12:	b29b      	uxth	r3, r3
 800ca14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca1c:	b29a      	uxth	r2, r3
 800ca1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ca22:	801a      	strh	r2, [r3, #0]
 800ca24:	e060      	b.n	800cae8 <USB_EPStartXfer+0x155e>
 800ca26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d10c      	bne.n	800ca48 <USB_EPStartXfer+0x14be>
 800ca2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ca32:	881b      	ldrh	r3, [r3, #0]
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca3e:	b29a      	uxth	r2, r3
 800ca40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ca44:	801a      	strh	r2, [r3, #0]
 800ca46:	e04f      	b.n	800cae8 <USB_EPStartXfer+0x155e>
 800ca48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca4c:	085b      	lsrs	r3, r3, #1
 800ca4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ca52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca56:	f003 0301 	and.w	r3, r3, #1
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d004      	beq.n	800ca68 <USB_EPStartXfer+0x14de>
 800ca5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca62:	3301      	adds	r3, #1
 800ca64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ca68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ca6c:	881b      	ldrh	r3, [r3, #0]
 800ca6e:	b29a      	uxth	r2, r3
 800ca70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	029b      	lsls	r3, r3, #10
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	b29a      	uxth	r2, r3
 800ca7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ca82:	801a      	strh	r2, [r3, #0]
 800ca84:	e030      	b.n	800cae8 <USB_EPStartXfer+0x155e>
 800ca86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	785b      	ldrb	r3, [r3, #1]
 800ca92:	2b01      	cmp	r3, #1
 800ca94:	d128      	bne.n	800cae8 <USB_EPStartXfer+0x155e>
 800ca96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800caa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800caa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cab2:	b29b      	uxth	r3, r3
 800cab4:	461a      	mov	r2, r3
 800cab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800caba:	4413      	add	r3, r2
 800cabc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800cac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	00da      	lsls	r2, r3, #3
 800cace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cad2:	4413      	add	r3, r2
 800cad4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cadc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cae0:	b29a      	uxth	r2, r3
 800cae2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800cae6:	801a      	strh	r2, [r3, #0]
 800cae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800caec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800caf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cafa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	785b      	ldrb	r3, [r3, #1]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	f040 8085 	bne.w	800cc12 <USB_EPStartXfer+0x1688>
 800cb08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800cb16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	461a      	mov	r2, r3
 800cb28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cb2c:	4413      	add	r3, r2
 800cb2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800cb32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	00da      	lsls	r2, r3, #3
 800cb40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cb44:	4413      	add	r3, r2
 800cb46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cb4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cb4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cb52:	881b      	ldrh	r3, [r3, #0]
 800cb54:	b29b      	uxth	r3, r3
 800cb56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb5a:	b29a      	uxth	r2, r3
 800cb5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cb60:	801a      	strh	r2, [r3, #0]
 800cb62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb66:	2b3e      	cmp	r3, #62	; 0x3e
 800cb68:	d923      	bls.n	800cbb2 <USB_EPStartXfer+0x1628>
 800cb6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb6e:	095b      	lsrs	r3, r3, #5
 800cb70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cb74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb78:	f003 031f 	and.w	r3, r3, #31
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d104      	bne.n	800cb8a <USB_EPStartXfer+0x1600>
 800cb80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cb84:	3b01      	subs	r3, #1
 800cb86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cb8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cb8e:	881b      	ldrh	r3, [r3, #0]
 800cb90:	b29a      	uxth	r2, r3
 800cb92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cb96:	b29b      	uxth	r3, r3
 800cb98:	029b      	lsls	r3, r3, #10
 800cb9a:	b29b      	uxth	r3, r3
 800cb9c:	4313      	orrs	r3, r2
 800cb9e:	b29b      	uxth	r3, r3
 800cba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cba8:	b29a      	uxth	r2, r3
 800cbaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cbae:	801a      	strh	r2, [r3, #0]
 800cbb0:	e05c      	b.n	800cc6c <USB_EPStartXfer+0x16e2>
 800cbb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d10c      	bne.n	800cbd4 <USB_EPStartXfer+0x164a>
 800cbba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cbbe:	881b      	ldrh	r3, [r3, #0]
 800cbc0:	b29b      	uxth	r3, r3
 800cbc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbca:	b29a      	uxth	r2, r3
 800cbcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cbd0:	801a      	strh	r2, [r3, #0]
 800cbd2:	e04b      	b.n	800cc6c <USB_EPStartXfer+0x16e2>
 800cbd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbd8:	085b      	lsrs	r3, r3, #1
 800cbda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cbde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbe2:	f003 0301 	and.w	r3, r3, #1
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d004      	beq.n	800cbf4 <USB_EPStartXfer+0x166a>
 800cbea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cbee:	3301      	adds	r3, #1
 800cbf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cbf4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cbf8:	881b      	ldrh	r3, [r3, #0]
 800cbfa:	b29a      	uxth	r2, r3
 800cbfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	029b      	lsls	r3, r3, #10
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	4313      	orrs	r3, r2
 800cc08:	b29a      	uxth	r2, r3
 800cc0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cc0e:	801a      	strh	r2, [r3, #0]
 800cc10:	e02c      	b.n	800cc6c <USB_EPStartXfer+0x16e2>
 800cc12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	785b      	ldrb	r3, [r3, #1]
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d124      	bne.n	800cc6c <USB_EPStartXfer+0x16e2>
 800cc22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	461a      	mov	r2, r3
 800cc34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cc38:	4413      	add	r3, r2
 800cc3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cc3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	00da      	lsls	r2, r3, #3
 800cc4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cc50:	4413      	add	r3, r2
 800cc52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cc56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cc5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc5e:	b29a      	uxth	r2, r3
 800cc60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cc64:	801a      	strh	r2, [r3, #0]
 800cc66:	e001      	b.n	800cc6c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	e03a      	b.n	800cce2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cc6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	4413      	add	r3, r2
 800cc86:	881b      	ldrh	r3, [r3, #0]
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc92:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800cc96:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cc9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cc9e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800cca2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cca6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ccaa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ccae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ccb6:	681a      	ldr	r2, [r3, #0]
 800ccb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	009b      	lsls	r3, r3, #2
 800ccc6:	441a      	add	r2, r3
 800ccc8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ccd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ccd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ccd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cce0:	2300      	movs	r3, #0
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b085      	sub	sp, #20
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	785b      	ldrb	r3, [r3, #1]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d020      	beq.n	800cd40 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	009b      	lsls	r3, r3, #2
 800cd06:	4413      	add	r3, r2
 800cd08:	881b      	ldrh	r3, [r3, #0]
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd14:	81bb      	strh	r3, [r7, #12]
 800cd16:	89bb      	ldrh	r3, [r7, #12]
 800cd18:	f083 0310 	eor.w	r3, r3, #16
 800cd1c:	81bb      	strh	r3, [r7, #12]
 800cd1e:	687a      	ldr	r2, [r7, #4]
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	009b      	lsls	r3, r3, #2
 800cd26:	441a      	add	r2, r3
 800cd28:	89bb      	ldrh	r3, [r7, #12]
 800cd2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	8013      	strh	r3, [r2, #0]
 800cd3e:	e01f      	b.n	800cd80 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	009b      	lsls	r3, r3, #2
 800cd48:	4413      	add	r3, r2
 800cd4a:	881b      	ldrh	r3, [r3, #0]
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cd52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd56:	81fb      	strh	r3, [r7, #14]
 800cd58:	89fb      	ldrh	r3, [r7, #14]
 800cd5a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cd5e:	81fb      	strh	r3, [r7, #14]
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	441a      	add	r2, r3
 800cd6a:	89fb      	ldrh	r3, [r7, #14]
 800cd6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd7c:	b29b      	uxth	r3, r3
 800cd7e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cd80:	2300      	movs	r3, #0
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3714      	adds	r7, #20
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr

0800cd8e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cd8e:	b480      	push	{r7}
 800cd90:	b087      	sub	sp, #28
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
 800cd96:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	7b1b      	ldrb	r3, [r3, #12]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	f040 809d 	bne.w	800cedc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	785b      	ldrb	r3, [r3, #1]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d04c      	beq.n	800ce44 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cdaa:	687a      	ldr	r2, [r7, #4]
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	781b      	ldrb	r3, [r3, #0]
 800cdb0:	009b      	lsls	r3, r3, #2
 800cdb2:	4413      	add	r3, r2
 800cdb4:	881b      	ldrh	r3, [r3, #0]
 800cdb6:	823b      	strh	r3, [r7, #16]
 800cdb8:	8a3b      	ldrh	r3, [r7, #16]
 800cdba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d01b      	beq.n	800cdfa <USB_EPClearStall+0x6c>
 800cdc2:	687a      	ldr	r2, [r7, #4]
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	009b      	lsls	r3, r3, #2
 800cdca:	4413      	add	r3, r2
 800cdcc:	881b      	ldrh	r3, [r3, #0]
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cdd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdd8:	81fb      	strh	r3, [r7, #14]
 800cdda:	687a      	ldr	r2, [r7, #4]
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	009b      	lsls	r3, r3, #2
 800cde2:	441a      	add	r2, r3
 800cde4:	89fb      	ldrh	r3, [r7, #14]
 800cde6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cdea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cdee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdf2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	78db      	ldrb	r3, [r3, #3]
 800cdfe:	2b01      	cmp	r3, #1
 800ce00:	d06c      	beq.n	800cedc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	009b      	lsls	r3, r3, #2
 800ce0a:	4413      	add	r3, r2
 800ce0c:	881b      	ldrh	r3, [r3, #0]
 800ce0e:	b29b      	uxth	r3, r3
 800ce10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce18:	81bb      	strh	r3, [r7, #12]
 800ce1a:	89bb      	ldrh	r3, [r7, #12]
 800ce1c:	f083 0320 	eor.w	r3, r3, #32
 800ce20:	81bb      	strh	r3, [r7, #12]
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	441a      	add	r2, r3
 800ce2c:	89bb      	ldrh	r3, [r7, #12]
 800ce2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	8013      	strh	r3, [r2, #0]
 800ce42:	e04b      	b.n	800cedc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ce44:	687a      	ldr	r2, [r7, #4]
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	009b      	lsls	r3, r3, #2
 800ce4c:	4413      	add	r3, r2
 800ce4e:	881b      	ldrh	r3, [r3, #0]
 800ce50:	82fb      	strh	r3, [r7, #22]
 800ce52:	8afb      	ldrh	r3, [r7, #22]
 800ce54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d01b      	beq.n	800ce94 <USB_EPClearStall+0x106>
 800ce5c:	687a      	ldr	r2, [r7, #4]
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	009b      	lsls	r3, r3, #2
 800ce64:	4413      	add	r3, r2
 800ce66:	881b      	ldrh	r3, [r3, #0]
 800ce68:	b29b      	uxth	r3, r3
 800ce6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce72:	82bb      	strh	r3, [r7, #20]
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	781b      	ldrb	r3, [r3, #0]
 800ce7a:	009b      	lsls	r3, r3, #2
 800ce7c:	441a      	add	r2, r3
 800ce7e:	8abb      	ldrh	r3, [r7, #20]
 800ce80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ce8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce90:	b29b      	uxth	r3, r3
 800ce92:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ce94:	687a      	ldr	r2, [r7, #4]
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	009b      	lsls	r3, r3, #2
 800ce9c:	4413      	add	r3, r2
 800ce9e:	881b      	ldrh	r3, [r3, #0]
 800cea0:	b29b      	uxth	r3, r3
 800cea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ceaa:	827b      	strh	r3, [r7, #18]
 800ceac:	8a7b      	ldrh	r3, [r7, #18]
 800ceae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ceb2:	827b      	strh	r3, [r7, #18]
 800ceb4:	8a7b      	ldrh	r3, [r7, #18]
 800ceb6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ceba:	827b      	strh	r3, [r7, #18]
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	781b      	ldrb	r3, [r3, #0]
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	441a      	add	r2, r3
 800cec6:	8a7b      	ldrh	r3, [r7, #18]
 800cec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cecc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ced0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ced4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ced8:	b29b      	uxth	r3, r3
 800ceda:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800cedc:	2300      	movs	r3, #0
}
 800cede:	4618      	mov	r0, r3
 800cee0:	371c      	adds	r7, #28
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr

0800ceea <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ceea:	b480      	push	{r7}
 800ceec:	b083      	sub	sp, #12
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
 800cef2:	460b      	mov	r3, r1
 800cef4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800cef6:	78fb      	ldrb	r3, [r7, #3]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d103      	bne.n	800cf04 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2280      	movs	r2, #128	; 0x80
 800cf00:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800cf04:	2300      	movs	r3, #0
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	370c      	adds	r7, #12
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr

0800cf12 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800cf12:	b480      	push	{r7}
 800cf14:	b083      	sub	sp, #12
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf2a:	b29a      	uxth	r2, r3
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800cf32:	2300      	movs	r3, #0
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	370c      	adds	r7, #12
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr

0800cf40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b085      	sub	sp, #20
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800cf4e:	b29b      	uxth	r3, r3
 800cf50:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800cf52:	68fb      	ldr	r3, [r7, #12]
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3714      	adds	r7, #20
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b08b      	sub	sp, #44	; 0x2c
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	60b9      	str	r1, [r7, #8]
 800cf6a:	4611      	mov	r1, r2
 800cf6c:	461a      	mov	r2, r3
 800cf6e:	460b      	mov	r3, r1
 800cf70:	80fb      	strh	r3, [r7, #6]
 800cf72:	4613      	mov	r3, r2
 800cf74:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800cf76:	88bb      	ldrh	r3, [r7, #4]
 800cf78:	3301      	adds	r3, #1
 800cf7a:	085b      	lsrs	r3, r3, #1
 800cf7c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cf86:	88fa      	ldrh	r2, [r7, #6]
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	4413      	add	r3, r2
 800cf8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf90:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cf92:	69bb      	ldr	r3, [r7, #24]
 800cf94:	627b      	str	r3, [r7, #36]	; 0x24
 800cf96:	e01b      	b.n	800cfd0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800cf9e:	69fb      	ldr	r3, [r7, #28]
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	021b      	lsls	r3, r3, #8
 800cfa6:	b21a      	sxth	r2, r3
 800cfa8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cfac:	4313      	orrs	r3, r2
 800cfae:	b21b      	sxth	r3, r3
 800cfb0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800cfb2:	6a3b      	ldr	r3, [r7, #32]
 800cfb4:	8a7a      	ldrh	r2, [r7, #18]
 800cfb6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800cfb8:	6a3b      	ldr	r3, [r7, #32]
 800cfba:	3302      	adds	r3, #2
 800cfbc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800cfbe:	69fb      	ldr	r3, [r7, #28]
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800cfc4:	69fb      	ldr	r3, [r7, #28]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfcc:	3b01      	subs	r3, #1
 800cfce:	627b      	str	r3, [r7, #36]	; 0x24
 800cfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d1e0      	bne.n	800cf98 <USB_WritePMA+0x38>
  }
}
 800cfd6:	bf00      	nop
 800cfd8:	bf00      	nop
 800cfda:	372c      	adds	r7, #44	; 0x2c
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr

0800cfe4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b08b      	sub	sp, #44	; 0x2c
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	60f8      	str	r0, [r7, #12]
 800cfec:	60b9      	str	r1, [r7, #8]
 800cfee:	4611      	mov	r1, r2
 800cff0:	461a      	mov	r2, r3
 800cff2:	460b      	mov	r3, r1
 800cff4:	80fb      	strh	r3, [r7, #6]
 800cff6:	4613      	mov	r3, r2
 800cff8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800cffa:	88bb      	ldrh	r3, [r7, #4]
 800cffc:	085b      	lsrs	r3, r3, #1
 800cffe:	b29b      	uxth	r3, r3
 800d000:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d00a:	88fa      	ldrh	r2, [r7, #6]
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	4413      	add	r3, r2
 800d010:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d014:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d016:	69bb      	ldr	r3, [r7, #24]
 800d018:	627b      	str	r3, [r7, #36]	; 0x24
 800d01a:	e018      	b.n	800d04e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800d01c:	6a3b      	ldr	r3, [r7, #32]
 800d01e:	881b      	ldrh	r3, [r3, #0]
 800d020:	b29b      	uxth	r3, r3
 800d022:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d024:	6a3b      	ldr	r3, [r7, #32]
 800d026:	3302      	adds	r3, #2
 800d028:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	b2da      	uxtb	r2, r3
 800d02e:	69fb      	ldr	r3, [r7, #28]
 800d030:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d032:	69fb      	ldr	r3, [r7, #28]
 800d034:	3301      	adds	r3, #1
 800d036:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	0a1b      	lsrs	r3, r3, #8
 800d03c:	b2da      	uxtb	r2, r3
 800d03e:	69fb      	ldr	r3, [r7, #28]
 800d040:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d042:	69fb      	ldr	r3, [r7, #28]
 800d044:	3301      	adds	r3, #1
 800d046:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04a:	3b01      	subs	r3, #1
 800d04c:	627b      	str	r3, [r7, #36]	; 0x24
 800d04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d050:	2b00      	cmp	r3, #0
 800d052:	d1e3      	bne.n	800d01c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d054:	88bb      	ldrh	r3, [r7, #4]
 800d056:	f003 0301 	and.w	r3, r3, #1
 800d05a:	b29b      	uxth	r3, r3
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d007      	beq.n	800d070 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800d060:	6a3b      	ldr	r3, [r7, #32]
 800d062:	881b      	ldrh	r3, [r3, #0]
 800d064:	b29b      	uxth	r3, r3
 800d066:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	b2da      	uxtb	r2, r3
 800d06c:	69fb      	ldr	r3, [r7, #28]
 800d06e:	701a      	strb	r2, [r3, #0]
  }
}
 800d070:	bf00      	nop
 800d072:	372c      	adds	r7, #44	; 0x2c
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	460b      	mov	r3, r1
 800d086:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d088:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d08c:	f006 fe0e 	bl	8013cac <USBD_static_malloc>
 800d090:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d109      	bne.n	800d0ac <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	32b0      	adds	r2, #176	; 0xb0
 800d0a2:	2100      	movs	r1, #0
 800d0a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d0a8:	2302      	movs	r3, #2
 800d0aa:	e0d4      	b.n	800d256 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d0ac:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800d0b0:	2100      	movs	r1, #0
 800d0b2:	68f8      	ldr	r0, [r7, #12]
 800d0b4:	f007 f950 	bl	8014358 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	32b0      	adds	r2, #176	; 0xb0
 800d0c2:	68f9      	ldr	r1, [r7, #12]
 800d0c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	32b0      	adds	r2, #176	; 0xb0
 800d0d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	7c1b      	ldrb	r3, [r3, #16]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d138      	bne.n	800d156 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d0e4:	4b5e      	ldr	r3, [pc, #376]	; (800d260 <USBD_CDC_Init+0x1e4>)
 800d0e6:	7819      	ldrb	r1, [r3, #0]
 800d0e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d0ec:	2202      	movs	r2, #2
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f006 fc81 	bl	80139f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d0f4:	4b5a      	ldr	r3, [pc, #360]	; (800d260 <USBD_CDC_Init+0x1e4>)
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	f003 020f 	and.w	r2, r3, #15
 800d0fc:	6879      	ldr	r1, [r7, #4]
 800d0fe:	4613      	mov	r3, r2
 800d100:	009b      	lsls	r3, r3, #2
 800d102:	4413      	add	r3, r2
 800d104:	009b      	lsls	r3, r3, #2
 800d106:	440b      	add	r3, r1
 800d108:	3324      	adds	r3, #36	; 0x24
 800d10a:	2201      	movs	r2, #1
 800d10c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d10e:	4b55      	ldr	r3, [pc, #340]	; (800d264 <USBD_CDC_Init+0x1e8>)
 800d110:	7819      	ldrb	r1, [r3, #0]
 800d112:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d116:	2202      	movs	r2, #2
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f006 fc6c 	bl	80139f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d11e:	4b51      	ldr	r3, [pc, #324]	; (800d264 <USBD_CDC_Init+0x1e8>)
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	f003 020f 	and.w	r2, r3, #15
 800d126:	6879      	ldr	r1, [r7, #4]
 800d128:	4613      	mov	r3, r2
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	4413      	add	r3, r2
 800d12e:	009b      	lsls	r3, r3, #2
 800d130:	440b      	add	r3, r1
 800d132:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d136:	2201      	movs	r2, #1
 800d138:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d13a:	4b4b      	ldr	r3, [pc, #300]	; (800d268 <USBD_CDC_Init+0x1ec>)
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	f003 020f 	and.w	r2, r3, #15
 800d142:	6879      	ldr	r1, [r7, #4]
 800d144:	4613      	mov	r3, r2
 800d146:	009b      	lsls	r3, r3, #2
 800d148:	4413      	add	r3, r2
 800d14a:	009b      	lsls	r3, r3, #2
 800d14c:	440b      	add	r3, r1
 800d14e:	3326      	adds	r3, #38	; 0x26
 800d150:	2210      	movs	r2, #16
 800d152:	801a      	strh	r2, [r3, #0]
 800d154:	e035      	b.n	800d1c2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d156:	4b42      	ldr	r3, [pc, #264]	; (800d260 <USBD_CDC_Init+0x1e4>)
 800d158:	7819      	ldrb	r1, [r3, #0]
 800d15a:	2340      	movs	r3, #64	; 0x40
 800d15c:	2202      	movs	r2, #2
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f006 fc49 	bl	80139f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d164:	4b3e      	ldr	r3, [pc, #248]	; (800d260 <USBD_CDC_Init+0x1e4>)
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	f003 020f 	and.w	r2, r3, #15
 800d16c:	6879      	ldr	r1, [r7, #4]
 800d16e:	4613      	mov	r3, r2
 800d170:	009b      	lsls	r3, r3, #2
 800d172:	4413      	add	r3, r2
 800d174:	009b      	lsls	r3, r3, #2
 800d176:	440b      	add	r3, r1
 800d178:	3324      	adds	r3, #36	; 0x24
 800d17a:	2201      	movs	r2, #1
 800d17c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d17e:	4b39      	ldr	r3, [pc, #228]	; (800d264 <USBD_CDC_Init+0x1e8>)
 800d180:	7819      	ldrb	r1, [r3, #0]
 800d182:	2340      	movs	r3, #64	; 0x40
 800d184:	2202      	movs	r2, #2
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f006 fc35 	bl	80139f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d18c:	4b35      	ldr	r3, [pc, #212]	; (800d264 <USBD_CDC_Init+0x1e8>)
 800d18e:	781b      	ldrb	r3, [r3, #0]
 800d190:	f003 020f 	and.w	r2, r3, #15
 800d194:	6879      	ldr	r1, [r7, #4]
 800d196:	4613      	mov	r3, r2
 800d198:	009b      	lsls	r3, r3, #2
 800d19a:	4413      	add	r3, r2
 800d19c:	009b      	lsls	r3, r3, #2
 800d19e:	440b      	add	r3, r1
 800d1a0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d1a8:	4b2f      	ldr	r3, [pc, #188]	; (800d268 <USBD_CDC_Init+0x1ec>)
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	f003 020f 	and.w	r2, r3, #15
 800d1b0:	6879      	ldr	r1, [r7, #4]
 800d1b2:	4613      	mov	r3, r2
 800d1b4:	009b      	lsls	r3, r3, #2
 800d1b6:	4413      	add	r3, r2
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	440b      	add	r3, r1
 800d1bc:	3326      	adds	r3, #38	; 0x26
 800d1be:	2210      	movs	r2, #16
 800d1c0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d1c2:	4b29      	ldr	r3, [pc, #164]	; (800d268 <USBD_CDC_Init+0x1ec>)
 800d1c4:	7819      	ldrb	r1, [r3, #0]
 800d1c6:	2308      	movs	r3, #8
 800d1c8:	2203      	movs	r2, #3
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f006 fc13 	bl	80139f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d1d0:	4b25      	ldr	r3, [pc, #148]	; (800d268 <USBD_CDC_Init+0x1ec>)
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	f003 020f 	and.w	r2, r3, #15
 800d1d8:	6879      	ldr	r1, [r7, #4]
 800d1da:	4613      	mov	r3, r2
 800d1dc:	009b      	lsls	r3, r3, #2
 800d1de:	4413      	add	r3, r2
 800d1e0:	009b      	lsls	r3, r3, #2
 800d1e2:	440b      	add	r3, r1
 800d1e4:	3324      	adds	r3, #36	; 0x24
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	33b0      	adds	r3, #176	; 0xb0
 800d1fc:	009b      	lsls	r3, r3, #2
 800d1fe:	4413      	add	r3, r2
 800d200:	685b      	ldr	r3, [r3, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2200      	movs	r2, #0
 800d20a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2200      	movs	r2, #0
 800d212:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d101      	bne.n	800d224 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d220:	2302      	movs	r3, #2
 800d222:	e018      	b.n	800d256 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	7c1b      	ldrb	r3, [r3, #16]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d10a      	bne.n	800d242 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d22c:	4b0d      	ldr	r3, [pc, #52]	; (800d264 <USBD_CDC_Init+0x1e8>)
 800d22e:	7819      	ldrb	r1, [r3, #0]
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d236:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f006 fccb 	bl	8013bd6 <USBD_LL_PrepareReceive>
 800d240:	e008      	b.n	800d254 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d242:	4b08      	ldr	r3, [pc, #32]	; (800d264 <USBD_CDC_Init+0x1e8>)
 800d244:	7819      	ldrb	r1, [r3, #0]
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d24c:	2340      	movs	r3, #64	; 0x40
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f006 fcc1 	bl	8013bd6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d254:	2300      	movs	r3, #0
}
 800d256:	4618      	mov	r0, r3
 800d258:	3710      	adds	r7, #16
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	2000009f 	.word	0x2000009f
 800d264:	200000a0 	.word	0x200000a0
 800d268:	200000a1 	.word	0x200000a1

0800d26c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	460b      	mov	r3, r1
 800d276:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d278:	4b3a      	ldr	r3, [pc, #232]	; (800d364 <USBD_CDC_DeInit+0xf8>)
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	4619      	mov	r1, r3
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f006 fbdf 	bl	8013a42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d284:	4b37      	ldr	r3, [pc, #220]	; (800d364 <USBD_CDC_DeInit+0xf8>)
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	f003 020f 	and.w	r2, r3, #15
 800d28c:	6879      	ldr	r1, [r7, #4]
 800d28e:	4613      	mov	r3, r2
 800d290:	009b      	lsls	r3, r3, #2
 800d292:	4413      	add	r3, r2
 800d294:	009b      	lsls	r3, r3, #2
 800d296:	440b      	add	r3, r1
 800d298:	3324      	adds	r3, #36	; 0x24
 800d29a:	2200      	movs	r2, #0
 800d29c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d29e:	4b32      	ldr	r3, [pc, #200]	; (800d368 <USBD_CDC_DeInit+0xfc>)
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f006 fbcc 	bl	8013a42 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d2aa:	4b2f      	ldr	r3, [pc, #188]	; (800d368 <USBD_CDC_DeInit+0xfc>)
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	f003 020f 	and.w	r2, r3, #15
 800d2b2:	6879      	ldr	r1, [r7, #4]
 800d2b4:	4613      	mov	r3, r2
 800d2b6:	009b      	lsls	r3, r3, #2
 800d2b8:	4413      	add	r3, r2
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	440b      	add	r3, r1
 800d2be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d2c6:	4b29      	ldr	r3, [pc, #164]	; (800d36c <USBD_CDC_DeInit+0x100>)
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f006 fbb8 	bl	8013a42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d2d2:	4b26      	ldr	r3, [pc, #152]	; (800d36c <USBD_CDC_DeInit+0x100>)
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	f003 020f 	and.w	r2, r3, #15
 800d2da:	6879      	ldr	r1, [r7, #4]
 800d2dc:	4613      	mov	r3, r2
 800d2de:	009b      	lsls	r3, r3, #2
 800d2e0:	4413      	add	r3, r2
 800d2e2:	009b      	lsls	r3, r3, #2
 800d2e4:	440b      	add	r3, r1
 800d2e6:	3324      	adds	r3, #36	; 0x24
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d2ec:	4b1f      	ldr	r3, [pc, #124]	; (800d36c <USBD_CDC_DeInit+0x100>)
 800d2ee:	781b      	ldrb	r3, [r3, #0]
 800d2f0:	f003 020f 	and.w	r2, r3, #15
 800d2f4:	6879      	ldr	r1, [r7, #4]
 800d2f6:	4613      	mov	r3, r2
 800d2f8:	009b      	lsls	r3, r3, #2
 800d2fa:	4413      	add	r3, r2
 800d2fc:	009b      	lsls	r3, r3, #2
 800d2fe:	440b      	add	r3, r1
 800d300:	3326      	adds	r3, #38	; 0x26
 800d302:	2200      	movs	r2, #0
 800d304:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	32b0      	adds	r2, #176	; 0xb0
 800d310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d01f      	beq.n	800d358 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	33b0      	adds	r3, #176	; 0xb0
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	4413      	add	r3, r2
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	32b0      	adds	r2, #176	; 0xb0
 800d336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d33a:	4618      	mov	r0, r3
 800d33c:	f006 fcc4 	bl	8013cc8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	32b0      	adds	r2, #176	; 0xb0
 800d34a:	2100      	movs	r1, #0
 800d34c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2200      	movs	r2, #0
 800d354:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d358:	2300      	movs	r3, #0
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3708      	adds	r7, #8
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}
 800d362:	bf00      	nop
 800d364:	2000009f 	.word	0x2000009f
 800d368:	200000a0 	.word	0x200000a0
 800d36c:	200000a1 	.word	0x200000a1

0800d370 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b086      	sub	sp, #24
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	32b0      	adds	r2, #176	; 0xb0
 800d384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d388:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d38a:	2300      	movs	r3, #0
 800d38c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d38e:	2300      	movs	r3, #0
 800d390:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d392:	2300      	movs	r3, #0
 800d394:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d101      	bne.n	800d3a0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d39c:	2303      	movs	r3, #3
 800d39e:	e0bf      	b.n	800d520 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d050      	beq.n	800d44e <USBD_CDC_Setup+0xde>
 800d3ac:	2b20      	cmp	r3, #32
 800d3ae:	f040 80af 	bne.w	800d510 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	88db      	ldrh	r3, [r3, #6]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d03a      	beq.n	800d430 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	b25b      	sxtb	r3, r3
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	da1b      	bge.n	800d3fc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	33b0      	adds	r3, #176	; 0xb0
 800d3ce:	009b      	lsls	r3, r3, #2
 800d3d0:	4413      	add	r3, r2
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	689b      	ldr	r3, [r3, #8]
 800d3d6:	683a      	ldr	r2, [r7, #0]
 800d3d8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d3da:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d3dc:	683a      	ldr	r2, [r7, #0]
 800d3de:	88d2      	ldrh	r2, [r2, #6]
 800d3e0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	88db      	ldrh	r3, [r3, #6]
 800d3e6:	2b07      	cmp	r3, #7
 800d3e8:	bf28      	it	cs
 800d3ea:	2307      	movcs	r3, #7
 800d3ec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	89fa      	ldrh	r2, [r7, #14]
 800d3f2:	4619      	mov	r1, r3
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f001 fce1 	bl	800edbc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d3fa:	e090      	b.n	800d51e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	785a      	ldrb	r2, [r3, #1]
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	88db      	ldrh	r3, [r3, #6]
 800d40a:	2b3f      	cmp	r3, #63	; 0x3f
 800d40c:	d803      	bhi.n	800d416 <USBD_CDC_Setup+0xa6>
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	88db      	ldrh	r3, [r3, #6]
 800d412:	b2da      	uxtb	r2, r3
 800d414:	e000      	b.n	800d418 <USBD_CDC_Setup+0xa8>
 800d416:	2240      	movs	r2, #64	; 0x40
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d41e:	6939      	ldr	r1, [r7, #16]
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d426:	461a      	mov	r2, r3
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f001 fcf3 	bl	800ee14 <USBD_CtlPrepareRx>
      break;
 800d42e:	e076      	b.n	800d51e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d436:	687a      	ldr	r2, [r7, #4]
 800d438:	33b0      	adds	r3, #176	; 0xb0
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	4413      	add	r3, r2
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	689b      	ldr	r3, [r3, #8]
 800d442:	683a      	ldr	r2, [r7, #0]
 800d444:	7850      	ldrb	r0, [r2, #1]
 800d446:	2200      	movs	r2, #0
 800d448:	6839      	ldr	r1, [r7, #0]
 800d44a:	4798      	blx	r3
      break;
 800d44c:	e067      	b.n	800d51e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	785b      	ldrb	r3, [r3, #1]
 800d452:	2b0b      	cmp	r3, #11
 800d454:	d851      	bhi.n	800d4fa <USBD_CDC_Setup+0x18a>
 800d456:	a201      	add	r2, pc, #4	; (adr r2, 800d45c <USBD_CDC_Setup+0xec>)
 800d458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d45c:	0800d48d 	.word	0x0800d48d
 800d460:	0800d509 	.word	0x0800d509
 800d464:	0800d4fb 	.word	0x0800d4fb
 800d468:	0800d4fb 	.word	0x0800d4fb
 800d46c:	0800d4fb 	.word	0x0800d4fb
 800d470:	0800d4fb 	.word	0x0800d4fb
 800d474:	0800d4fb 	.word	0x0800d4fb
 800d478:	0800d4fb 	.word	0x0800d4fb
 800d47c:	0800d4fb 	.word	0x0800d4fb
 800d480:	0800d4fb 	.word	0x0800d4fb
 800d484:	0800d4b7 	.word	0x0800d4b7
 800d488:	0800d4e1 	.word	0x0800d4e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d492:	b2db      	uxtb	r3, r3
 800d494:	2b03      	cmp	r3, #3
 800d496:	d107      	bne.n	800d4a8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d498:	f107 030a 	add.w	r3, r7, #10
 800d49c:	2202      	movs	r2, #2
 800d49e:	4619      	mov	r1, r3
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f001 fc8b 	bl	800edbc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d4a6:	e032      	b.n	800d50e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d4a8:	6839      	ldr	r1, [r7, #0]
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f001 fc15 	bl	800ecda <USBD_CtlError>
            ret = USBD_FAIL;
 800d4b0:	2303      	movs	r3, #3
 800d4b2:	75fb      	strb	r3, [r7, #23]
          break;
 800d4b4:	e02b      	b.n	800d50e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4bc:	b2db      	uxtb	r3, r3
 800d4be:	2b03      	cmp	r3, #3
 800d4c0:	d107      	bne.n	800d4d2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d4c2:	f107 030d 	add.w	r3, r7, #13
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	4619      	mov	r1, r3
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f001 fc76 	bl	800edbc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d4d0:	e01d      	b.n	800d50e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d4d2:	6839      	ldr	r1, [r7, #0]
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f001 fc00 	bl	800ecda <USBD_CtlError>
            ret = USBD_FAIL;
 800d4da:	2303      	movs	r3, #3
 800d4dc:	75fb      	strb	r3, [r7, #23]
          break;
 800d4de:	e016      	b.n	800d50e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4e6:	b2db      	uxtb	r3, r3
 800d4e8:	2b03      	cmp	r3, #3
 800d4ea:	d00f      	beq.n	800d50c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d4ec:	6839      	ldr	r1, [r7, #0]
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f001 fbf3 	bl	800ecda <USBD_CtlError>
            ret = USBD_FAIL;
 800d4f4:	2303      	movs	r3, #3
 800d4f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d4f8:	e008      	b.n	800d50c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d4fa:	6839      	ldr	r1, [r7, #0]
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f001 fbec 	bl	800ecda <USBD_CtlError>
          ret = USBD_FAIL;
 800d502:	2303      	movs	r3, #3
 800d504:	75fb      	strb	r3, [r7, #23]
          break;
 800d506:	e002      	b.n	800d50e <USBD_CDC_Setup+0x19e>
          break;
 800d508:	bf00      	nop
 800d50a:	e008      	b.n	800d51e <USBD_CDC_Setup+0x1ae>
          break;
 800d50c:	bf00      	nop
      }
      break;
 800d50e:	e006      	b.n	800d51e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d510:	6839      	ldr	r1, [r7, #0]
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f001 fbe1 	bl	800ecda <USBD_CtlError>
      ret = USBD_FAIL;
 800d518:	2303      	movs	r3, #3
 800d51a:	75fb      	strb	r3, [r7, #23]
      break;
 800d51c:	bf00      	nop
  }

  return (uint8_t)ret;
 800d51e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d520:	4618      	mov	r0, r3
 800d522:	3718      	adds	r7, #24
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	460b      	mov	r3, r1
 800d532:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d53a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	32b0      	adds	r2, #176	; 0xb0
 800d546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d101      	bne.n	800d552 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d54e:	2303      	movs	r3, #3
 800d550:	e065      	b.n	800d61e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	32b0      	adds	r2, #176	; 0xb0
 800d55c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d560:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d562:	78fb      	ldrb	r3, [r7, #3]
 800d564:	f003 020f 	and.w	r2, r3, #15
 800d568:	6879      	ldr	r1, [r7, #4]
 800d56a:	4613      	mov	r3, r2
 800d56c:	009b      	lsls	r3, r3, #2
 800d56e:	4413      	add	r3, r2
 800d570:	009b      	lsls	r3, r3, #2
 800d572:	440b      	add	r3, r1
 800d574:	3318      	adds	r3, #24
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d02f      	beq.n	800d5dc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d57c:	78fb      	ldrb	r3, [r7, #3]
 800d57e:	f003 020f 	and.w	r2, r3, #15
 800d582:	6879      	ldr	r1, [r7, #4]
 800d584:	4613      	mov	r3, r2
 800d586:	009b      	lsls	r3, r3, #2
 800d588:	4413      	add	r3, r2
 800d58a:	009b      	lsls	r3, r3, #2
 800d58c:	440b      	add	r3, r1
 800d58e:	3318      	adds	r3, #24
 800d590:	681a      	ldr	r2, [r3, #0]
 800d592:	78fb      	ldrb	r3, [r7, #3]
 800d594:	f003 010f 	and.w	r1, r3, #15
 800d598:	68f8      	ldr	r0, [r7, #12]
 800d59a:	460b      	mov	r3, r1
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	440b      	add	r3, r1
 800d5a0:	00db      	lsls	r3, r3, #3
 800d5a2:	4403      	add	r3, r0
 800d5a4:	3338      	adds	r3, #56	; 0x38
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	fbb2 f1f3 	udiv	r1, r2, r3
 800d5ac:	fb01 f303 	mul.w	r3, r1, r3
 800d5b0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d112      	bne.n	800d5dc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d5b6:	78fb      	ldrb	r3, [r7, #3]
 800d5b8:	f003 020f 	and.w	r2, r3, #15
 800d5bc:	6879      	ldr	r1, [r7, #4]
 800d5be:	4613      	mov	r3, r2
 800d5c0:	009b      	lsls	r3, r3, #2
 800d5c2:	4413      	add	r3, r2
 800d5c4:	009b      	lsls	r3, r3, #2
 800d5c6:	440b      	add	r3, r1
 800d5c8:	3318      	adds	r3, #24
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d5ce:	78f9      	ldrb	r1, [r7, #3]
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f006 fadd 	bl	8013b94 <USBD_LL_Transmit>
 800d5da:	e01f      	b.n	800d61c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d5ea:	687a      	ldr	r2, [r7, #4]
 800d5ec:	33b0      	adds	r3, #176	; 0xb0
 800d5ee:	009b      	lsls	r3, r3, #2
 800d5f0:	4413      	add	r3, r2
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	691b      	ldr	r3, [r3, #16]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d010      	beq.n	800d61c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	33b0      	adds	r3, #176	; 0xb0
 800d604:	009b      	lsls	r3, r3, #2
 800d606:	4413      	add	r3, r2
 800d608:	685b      	ldr	r3, [r3, #4]
 800d60a:	691b      	ldr	r3, [r3, #16]
 800d60c:	68ba      	ldr	r2, [r7, #8]
 800d60e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d612:	68ba      	ldr	r2, [r7, #8]
 800d614:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d618:	78fa      	ldrb	r2, [r7, #3]
 800d61a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d61c:	2300      	movs	r3, #0
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3710      	adds	r7, #16
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}

0800d626 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d626:	b580      	push	{r7, lr}
 800d628:	b084      	sub	sp, #16
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	6078      	str	r0, [r7, #4]
 800d62e:	460b      	mov	r3, r1
 800d630:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	32b0      	adds	r2, #176	; 0xb0
 800d63c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d640:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	32b0      	adds	r2, #176	; 0xb0
 800d64c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d101      	bne.n	800d658 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d654:	2303      	movs	r3, #3
 800d656:	e01a      	b.n	800d68e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d658:	78fb      	ldrb	r3, [r7, #3]
 800d65a:	4619      	mov	r1, r3
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f006 fadb 	bl	8013c18 <USBD_LL_GetRxDataSize>
 800d662:	4602      	mov	r2, r0
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	33b0      	adds	r3, #176	; 0xb0
 800d674:	009b      	lsls	r3, r3, #2
 800d676:	4413      	add	r3, r2
 800d678:	685b      	ldr	r3, [r3, #4]
 800d67a:	68db      	ldr	r3, [r3, #12]
 800d67c:	68fa      	ldr	r2, [r7, #12]
 800d67e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d682:	68fa      	ldr	r2, [r7, #12]
 800d684:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d688:	4611      	mov	r1, r2
 800d68a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d68c:	2300      	movs	r3, #0
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3710      	adds	r7, #16
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}

0800d696 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d696:	b580      	push	{r7, lr}
 800d698:	b084      	sub	sp, #16
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	32b0      	adds	r2, #176	; 0xb0
 800d6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d101      	bne.n	800d6b8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d6b4:	2303      	movs	r3, #3
 800d6b6:	e025      	b.n	800d704 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d6be:	687a      	ldr	r2, [r7, #4]
 800d6c0:	33b0      	adds	r3, #176	; 0xb0
 800d6c2:	009b      	lsls	r3, r3, #2
 800d6c4:	4413      	add	r3, r2
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d01a      	beq.n	800d702 <USBD_CDC_EP0_RxReady+0x6c>
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d6d2:	2bff      	cmp	r3, #255	; 0xff
 800d6d4:	d015      	beq.n	800d702 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	33b0      	adds	r3, #176	; 0xb0
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	4413      	add	r3, r2
 800d6e4:	685b      	ldr	r3, [r3, #4]
 800d6e6:	689b      	ldr	r3, [r3, #8]
 800d6e8:	68fa      	ldr	r2, [r7, #12]
 800d6ea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d6ee:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d6f0:	68fa      	ldr	r2, [r7, #12]
 800d6f2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d6f6:	b292      	uxth	r2, r2
 800d6f8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	22ff      	movs	r2, #255	; 0xff
 800d6fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d702:	2300      	movs	r3, #0
}
 800d704:	4618      	mov	r0, r3
 800d706:	3710      	adds	r7, #16
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b086      	sub	sp, #24
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d714:	2182      	movs	r1, #130	; 0x82
 800d716:	4818      	ldr	r0, [pc, #96]	; (800d778 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d718:	f000 fc7d 	bl	800e016 <USBD_GetEpDesc>
 800d71c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d71e:	2101      	movs	r1, #1
 800d720:	4815      	ldr	r0, [pc, #84]	; (800d778 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d722:	f000 fc78 	bl	800e016 <USBD_GetEpDesc>
 800d726:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d728:	2181      	movs	r1, #129	; 0x81
 800d72a:	4813      	ldr	r0, [pc, #76]	; (800d778 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d72c:	f000 fc73 	bl	800e016 <USBD_GetEpDesc>
 800d730:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d002      	beq.n	800d73e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d738:	697b      	ldr	r3, [r7, #20]
 800d73a:	2210      	movs	r2, #16
 800d73c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d006      	beq.n	800d752 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	2200      	movs	r2, #0
 800d748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d74c:	711a      	strb	r2, [r3, #4]
 800d74e:	2200      	movs	r2, #0
 800d750:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d006      	beq.n	800d766 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	2200      	movs	r2, #0
 800d75c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d760:	711a      	strb	r2, [r3, #4]
 800d762:	2200      	movs	r2, #0
 800d764:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2243      	movs	r2, #67	; 0x43
 800d76a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d76c:	4b02      	ldr	r3, [pc, #8]	; (800d778 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3718      	adds	r7, #24
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
 800d776:	bf00      	nop
 800d778:	2000005c 	.word	0x2000005c

0800d77c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b086      	sub	sp, #24
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d784:	2182      	movs	r1, #130	; 0x82
 800d786:	4818      	ldr	r0, [pc, #96]	; (800d7e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d788:	f000 fc45 	bl	800e016 <USBD_GetEpDesc>
 800d78c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d78e:	2101      	movs	r1, #1
 800d790:	4815      	ldr	r0, [pc, #84]	; (800d7e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d792:	f000 fc40 	bl	800e016 <USBD_GetEpDesc>
 800d796:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d798:	2181      	movs	r1, #129	; 0x81
 800d79a:	4813      	ldr	r0, [pc, #76]	; (800d7e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d79c:	f000 fc3b 	bl	800e016 <USBD_GetEpDesc>
 800d7a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d002      	beq.n	800d7ae <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	2210      	movs	r2, #16
 800d7ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d006      	beq.n	800d7c2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	711a      	strb	r2, [r3, #4]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	f042 0202 	orr.w	r2, r2, #2
 800d7c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d006      	beq.n	800d7d6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	711a      	strb	r2, [r3, #4]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	f042 0202 	orr.w	r2, r2, #2
 800d7d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2243      	movs	r2, #67	; 0x43
 800d7da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d7dc:	4b02      	ldr	r3, [pc, #8]	; (800d7e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3718      	adds	r7, #24
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}
 800d7e6:	bf00      	nop
 800d7e8:	2000005c 	.word	0x2000005c

0800d7ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b086      	sub	sp, #24
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d7f4:	2182      	movs	r1, #130	; 0x82
 800d7f6:	4818      	ldr	r0, [pc, #96]	; (800d858 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d7f8:	f000 fc0d 	bl	800e016 <USBD_GetEpDesc>
 800d7fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d7fe:	2101      	movs	r1, #1
 800d800:	4815      	ldr	r0, [pc, #84]	; (800d858 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d802:	f000 fc08 	bl	800e016 <USBD_GetEpDesc>
 800d806:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d808:	2181      	movs	r1, #129	; 0x81
 800d80a:	4813      	ldr	r0, [pc, #76]	; (800d858 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d80c:	f000 fc03 	bl	800e016 <USBD_GetEpDesc>
 800d810:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d002      	beq.n	800d81e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	2210      	movs	r2, #16
 800d81c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d006      	beq.n	800d832 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	2200      	movs	r2, #0
 800d828:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d82c:	711a      	strb	r2, [r3, #4]
 800d82e:	2200      	movs	r2, #0
 800d830:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d006      	beq.n	800d846 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	2200      	movs	r2, #0
 800d83c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d840:	711a      	strb	r2, [r3, #4]
 800d842:	2200      	movs	r2, #0
 800d844:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2243      	movs	r2, #67	; 0x43
 800d84a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d84c:	4b02      	ldr	r3, [pc, #8]	; (800d858 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3718      	adds	r7, #24
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	2000005c 	.word	0x2000005c

0800d85c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b083      	sub	sp, #12
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	220a      	movs	r2, #10
 800d868:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d86a:	4b03      	ldr	r3, [pc, #12]	; (800d878 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	370c      	adds	r7, #12
 800d870:	46bd      	mov	sp, r7
 800d872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d876:	4770      	bx	lr
 800d878:	20000018 	.word	0x20000018

0800d87c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b083      	sub	sp, #12
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d101      	bne.n	800d890 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d88c:	2303      	movs	r3, #3
 800d88e:	e009      	b.n	800d8a4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d896:	687a      	ldr	r2, [r7, #4]
 800d898:	33b0      	adds	r3, #176	; 0xb0
 800d89a:	009b      	lsls	r3, r3, #2
 800d89c:	4413      	add	r3, r2
 800d89e:	683a      	ldr	r2, [r7, #0]
 800d8a0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d8a2:	2300      	movs	r3, #0
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	370c      	adds	r7, #12
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr

0800d8b0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b087      	sub	sp, #28
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	32b0      	adds	r2, #176	; 0xb0
 800d8c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8ca:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d101      	bne.n	800d8d6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d8d2:	2303      	movs	r3, #3
 800d8d4:	e008      	b.n	800d8e8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	68ba      	ldr	r2, [r7, #8]
 800d8da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	687a      	ldr	r2, [r7, #4]
 800d8e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d8e6:	2300      	movs	r3, #0
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	371c      	adds	r7, #28
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f2:	4770      	bx	lr

0800d8f4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b085      	sub	sp, #20
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	32b0      	adds	r2, #176	; 0xb0
 800d908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d90c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d101      	bne.n	800d918 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d914:	2303      	movs	r3, #3
 800d916:	e004      	b.n	800d922 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	683a      	ldr	r2, [r7, #0]
 800d91c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d920:	2300      	movs	r3, #0
}
 800d922:	4618      	mov	r0, r3
 800d924:	3714      	adds	r7, #20
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr
	...

0800d930 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b084      	sub	sp, #16
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	32b0      	adds	r2, #176	; 0xb0
 800d942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d946:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	32b0      	adds	r2, #176	; 0xb0
 800d952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d101      	bne.n	800d95e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d95a:	2303      	movs	r3, #3
 800d95c:	e018      	b.n	800d990 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	7c1b      	ldrb	r3, [r3, #16]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d10a      	bne.n	800d97c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d966:	4b0c      	ldr	r3, [pc, #48]	; (800d998 <USBD_CDC_ReceivePacket+0x68>)
 800d968:	7819      	ldrb	r1, [r3, #0]
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d970:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f006 f92e 	bl	8013bd6 <USBD_LL_PrepareReceive>
 800d97a:	e008      	b.n	800d98e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d97c:	4b06      	ldr	r3, [pc, #24]	; (800d998 <USBD_CDC_ReceivePacket+0x68>)
 800d97e:	7819      	ldrb	r1, [r3, #0]
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d986:	2340      	movs	r3, #64	; 0x40
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f006 f924 	bl	8013bd6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d98e:	2300      	movs	r3, #0
}
 800d990:	4618      	mov	r0, r3
 800d992:	3710      	adds	r7, #16
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}
 800d998:	200000a0 	.word	0x200000a0

0800d99c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b086      	sub	sp, #24
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	60f8      	str	r0, [r7, #12]
 800d9a4:	60b9      	str	r1, [r7, #8]
 800d9a6:	4613      	mov	r3, r2
 800d9a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d101      	bne.n	800d9b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d9b0:	2303      	movs	r3, #3
 800d9b2:	e01f      	b.n	800d9f4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d003      	beq.n	800d9da <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	68ba      	ldr	r2, [r7, #8]
 800d9d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	2201      	movs	r2, #1
 800d9de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	79fa      	ldrb	r2, [r7, #7]
 800d9e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d9e8:	68f8      	ldr	r0, [r7, #12]
 800d9ea:	f005 ff87 	bl	80138fc <USBD_LL_Init>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d9f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3718      	adds	r7, #24
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800da06:	2300      	movs	r3, #0
 800da08:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d101      	bne.n	800da14 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800da10:	2303      	movs	r3, #3
 800da12:	e025      	b.n	800da60 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	683a      	ldr	r2, [r7, #0]
 800da18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	32ae      	adds	r2, #174	; 0xae
 800da26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d00f      	beq.n	800da50 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	32ae      	adds	r2, #174	; 0xae
 800da3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da40:	f107 020e 	add.w	r2, r7, #14
 800da44:	4610      	mov	r0, r2
 800da46:	4798      	blx	r3
 800da48:	4602      	mov	r2, r0
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800da56:	1c5a      	adds	r2, r3, #1
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800da5e:	2300      	movs	r3, #0
}
 800da60:	4618      	mov	r0, r3
 800da62:	3710      	adds	r7, #16
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b082      	sub	sp, #8
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f005 ffa5 	bl	80139c0 <USBD_LL_Start>
 800da76:	4603      	mov	r3, r0
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3708      	adds	r7, #8
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800da80:	b480      	push	{r7}
 800da82:	b083      	sub	sp, #12
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800da88:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	370c      	adds	r7, #12
 800da8e:	46bd      	mov	sp, r7
 800da90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da94:	4770      	bx	lr

0800da96 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da96:	b580      	push	{r7, lr}
 800da98:	b084      	sub	sp, #16
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
 800da9e:	460b      	mov	r3, r1
 800daa0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800daa2:	2300      	movs	r3, #0
 800daa4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daac:	2b00      	cmp	r3, #0
 800daae:	d009      	beq.n	800dac4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	78fa      	ldrb	r2, [r7, #3]
 800daba:	4611      	mov	r1, r2
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	4798      	blx	r3
 800dac0:	4603      	mov	r3, r0
 800dac2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3710      	adds	r7, #16
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}

0800dace <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dace:	b580      	push	{r7, lr}
 800dad0:	b084      	sub	sp, #16
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	6078      	str	r0, [r7, #4]
 800dad6:	460b      	mov	r3, r1
 800dad8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dada:	2300      	movs	r3, #0
 800dadc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	78fa      	ldrb	r2, [r7, #3]
 800dae8:	4611      	mov	r1, r2
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	4798      	blx	r3
 800daee:	4603      	mov	r3, r0
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d001      	beq.n	800daf8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800daf4:	2303      	movs	r3, #3
 800daf6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800daf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3710      	adds	r7, #16
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}

0800db02 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800db02:	b580      	push	{r7, lr}
 800db04:	b084      	sub	sp, #16
 800db06:	af00      	add	r7, sp, #0
 800db08:	6078      	str	r0, [r7, #4]
 800db0a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800db12:	6839      	ldr	r1, [r7, #0]
 800db14:	4618      	mov	r0, r3
 800db16:	f001 f8a6 	bl	800ec66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2201      	movs	r2, #1
 800db1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800db28:	461a      	mov	r2, r3
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800db36:	f003 031f 	and.w	r3, r3, #31
 800db3a:	2b02      	cmp	r3, #2
 800db3c:	d01a      	beq.n	800db74 <USBD_LL_SetupStage+0x72>
 800db3e:	2b02      	cmp	r3, #2
 800db40:	d822      	bhi.n	800db88 <USBD_LL_SetupStage+0x86>
 800db42:	2b00      	cmp	r3, #0
 800db44:	d002      	beq.n	800db4c <USBD_LL_SetupStage+0x4a>
 800db46:	2b01      	cmp	r3, #1
 800db48:	d00a      	beq.n	800db60 <USBD_LL_SetupStage+0x5e>
 800db4a:	e01d      	b.n	800db88 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800db52:	4619      	mov	r1, r3
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f000 fad3 	bl	800e100 <USBD_StdDevReq>
 800db5a:	4603      	mov	r3, r0
 800db5c:	73fb      	strb	r3, [r7, #15]
      break;
 800db5e:	e020      	b.n	800dba2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800db66:	4619      	mov	r1, r3
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f000 fb3b 	bl	800e1e4 <USBD_StdItfReq>
 800db6e:	4603      	mov	r3, r0
 800db70:	73fb      	strb	r3, [r7, #15]
      break;
 800db72:	e016      	b.n	800dba2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800db7a:	4619      	mov	r1, r3
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f000 fb9d 	bl	800e2bc <USBD_StdEPReq>
 800db82:	4603      	mov	r3, r0
 800db84:	73fb      	strb	r3, [r7, #15]
      break;
 800db86:	e00c      	b.n	800dba2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800db8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800db92:	b2db      	uxtb	r3, r3
 800db94:	4619      	mov	r1, r3
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f005 ff72 	bl	8013a80 <USBD_LL_StallEP>
 800db9c:	4603      	mov	r3, r0
 800db9e:	73fb      	strb	r3, [r7, #15]
      break;
 800dba0:	bf00      	nop
  }

  return ret;
 800dba2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3710      	adds	r7, #16
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b086      	sub	sp, #24
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	60f8      	str	r0, [r7, #12]
 800dbb4:	460b      	mov	r3, r1
 800dbb6:	607a      	str	r2, [r7, #4]
 800dbb8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800dbbe:	7afb      	ldrb	r3, [r7, #11]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d16e      	bne.n	800dca2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800dbca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dbd2:	2b03      	cmp	r3, #3
 800dbd4:	f040 8098 	bne.w	800dd08 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	689a      	ldr	r2, [r3, #8]
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	68db      	ldr	r3, [r3, #12]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d913      	bls.n	800dc0c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	689a      	ldr	r2, [r3, #8]
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	68db      	ldr	r3, [r3, #12]
 800dbec:	1ad2      	subs	r2, r2, r3
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	68da      	ldr	r2, [r3, #12]
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	689b      	ldr	r3, [r3, #8]
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	bf28      	it	cs
 800dbfe:	4613      	movcs	r3, r2
 800dc00:	461a      	mov	r2, r3
 800dc02:	6879      	ldr	r1, [r7, #4]
 800dc04:	68f8      	ldr	r0, [r7, #12]
 800dc06:	f001 f922 	bl	800ee4e <USBD_CtlContinueRx>
 800dc0a:	e07d      	b.n	800dd08 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dc12:	f003 031f 	and.w	r3, r3, #31
 800dc16:	2b02      	cmp	r3, #2
 800dc18:	d014      	beq.n	800dc44 <USBD_LL_DataOutStage+0x98>
 800dc1a:	2b02      	cmp	r3, #2
 800dc1c:	d81d      	bhi.n	800dc5a <USBD_LL_DataOutStage+0xae>
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d002      	beq.n	800dc28 <USBD_LL_DataOutStage+0x7c>
 800dc22:	2b01      	cmp	r3, #1
 800dc24:	d003      	beq.n	800dc2e <USBD_LL_DataOutStage+0x82>
 800dc26:	e018      	b.n	800dc5a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	75bb      	strb	r3, [r7, #22]
            break;
 800dc2c:	e018      	b.n	800dc60 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	4619      	mov	r1, r3
 800dc38:	68f8      	ldr	r0, [r7, #12]
 800dc3a:	f000 f9d2 	bl	800dfe2 <USBD_CoreFindIF>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	75bb      	strb	r3, [r7, #22]
            break;
 800dc42:	e00d      	b.n	800dc60 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	68f8      	ldr	r0, [r7, #12]
 800dc50:	f000 f9d4 	bl	800dffc <USBD_CoreFindEP>
 800dc54:	4603      	mov	r3, r0
 800dc56:	75bb      	strb	r3, [r7, #22]
            break;
 800dc58:	e002      	b.n	800dc60 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	75bb      	strb	r3, [r7, #22]
            break;
 800dc5e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800dc60:	7dbb      	ldrb	r3, [r7, #22]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d119      	bne.n	800dc9a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc6c:	b2db      	uxtb	r3, r3
 800dc6e:	2b03      	cmp	r3, #3
 800dc70:	d113      	bne.n	800dc9a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800dc72:	7dba      	ldrb	r2, [r7, #22]
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	32ae      	adds	r2, #174	; 0xae
 800dc78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc7c:	691b      	ldr	r3, [r3, #16]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d00b      	beq.n	800dc9a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800dc82:	7dba      	ldrb	r2, [r7, #22]
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800dc8a:	7dba      	ldrb	r2, [r7, #22]
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	32ae      	adds	r2, #174	; 0xae
 800dc90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc94:	691b      	ldr	r3, [r3, #16]
 800dc96:	68f8      	ldr	r0, [r7, #12]
 800dc98:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dc9a:	68f8      	ldr	r0, [r7, #12]
 800dc9c:	f001 f8e8 	bl	800ee70 <USBD_CtlSendStatus>
 800dca0:	e032      	b.n	800dd08 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800dca2:	7afb      	ldrb	r3, [r7, #11]
 800dca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	4619      	mov	r1, r3
 800dcac:	68f8      	ldr	r0, [r7, #12]
 800dcae:	f000 f9a5 	bl	800dffc <USBD_CoreFindEP>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dcb6:	7dbb      	ldrb	r3, [r7, #22]
 800dcb8:	2bff      	cmp	r3, #255	; 0xff
 800dcba:	d025      	beq.n	800dd08 <USBD_LL_DataOutStage+0x15c>
 800dcbc:	7dbb      	ldrb	r3, [r7, #22]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d122      	bne.n	800dd08 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcc8:	b2db      	uxtb	r3, r3
 800dcca:	2b03      	cmp	r3, #3
 800dccc:	d117      	bne.n	800dcfe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800dcce:	7dba      	ldrb	r2, [r7, #22]
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	32ae      	adds	r2, #174	; 0xae
 800dcd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcd8:	699b      	ldr	r3, [r3, #24]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d00f      	beq.n	800dcfe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800dcde:	7dba      	ldrb	r2, [r7, #22]
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800dce6:	7dba      	ldrb	r2, [r7, #22]
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	32ae      	adds	r2, #174	; 0xae
 800dcec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcf0:	699b      	ldr	r3, [r3, #24]
 800dcf2:	7afa      	ldrb	r2, [r7, #11]
 800dcf4:	4611      	mov	r1, r2
 800dcf6:	68f8      	ldr	r0, [r7, #12]
 800dcf8:	4798      	blx	r3
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800dcfe:	7dfb      	ldrb	r3, [r7, #23]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d001      	beq.n	800dd08 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800dd04:	7dfb      	ldrb	r3, [r7, #23]
 800dd06:	e000      	b.n	800dd0a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800dd08:	2300      	movs	r3, #0
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3718      	adds	r7, #24
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}

0800dd12 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dd12:	b580      	push	{r7, lr}
 800dd14:	b086      	sub	sp, #24
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	60f8      	str	r0, [r7, #12]
 800dd1a:	460b      	mov	r3, r1
 800dd1c:	607a      	str	r2, [r7, #4]
 800dd1e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800dd20:	7afb      	ldrb	r3, [r7, #11]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d16f      	bne.n	800de06 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	3314      	adds	r3, #20
 800dd2a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dd32:	2b02      	cmp	r3, #2
 800dd34:	d15a      	bne.n	800ddec <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	689a      	ldr	r2, [r3, #8]
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	68db      	ldr	r3, [r3, #12]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d914      	bls.n	800dd6c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	689a      	ldr	r2, [r3, #8]
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	68db      	ldr	r3, [r3, #12]
 800dd4a:	1ad2      	subs	r2, r2, r3
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	689b      	ldr	r3, [r3, #8]
 800dd54:	461a      	mov	r2, r3
 800dd56:	6879      	ldr	r1, [r7, #4]
 800dd58:	68f8      	ldr	r0, [r7, #12]
 800dd5a:	f001 f84a 	bl	800edf2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd5e:	2300      	movs	r3, #0
 800dd60:	2200      	movs	r2, #0
 800dd62:	2100      	movs	r1, #0
 800dd64:	68f8      	ldr	r0, [r7, #12]
 800dd66:	f005 ff36 	bl	8013bd6 <USBD_LL_PrepareReceive>
 800dd6a:	e03f      	b.n	800ddec <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	68da      	ldr	r2, [r3, #12]
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	689b      	ldr	r3, [r3, #8]
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d11c      	bne.n	800ddb2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	685a      	ldr	r2, [r3, #4]
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d316      	bcc.n	800ddb2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	685a      	ldr	r2, [r3, #4]
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d20f      	bcs.n	800ddb2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dd92:	2200      	movs	r2, #0
 800dd94:	2100      	movs	r1, #0
 800dd96:	68f8      	ldr	r0, [r7, #12]
 800dd98:	f001 f82b 	bl	800edf2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dda4:	2300      	movs	r3, #0
 800dda6:	2200      	movs	r2, #0
 800dda8:	2100      	movs	r1, #0
 800ddaa:	68f8      	ldr	r0, [r7, #12]
 800ddac:	f005 ff13 	bl	8013bd6 <USBD_LL_PrepareReceive>
 800ddb0:	e01c      	b.n	800ddec <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddb8:	b2db      	uxtb	r3, r3
 800ddba:	2b03      	cmp	r3, #3
 800ddbc:	d10f      	bne.n	800ddde <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddc4:	68db      	ldr	r3, [r3, #12]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d009      	beq.n	800ddde <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2200      	movs	r2, #0
 800ddce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddd8:	68db      	ldr	r3, [r3, #12]
 800ddda:	68f8      	ldr	r0, [r7, #12]
 800dddc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ddde:	2180      	movs	r1, #128	; 0x80
 800dde0:	68f8      	ldr	r0, [r7, #12]
 800dde2:	f005 fe4d 	bl	8013a80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dde6:	68f8      	ldr	r0, [r7, #12]
 800dde8:	f001 f855 	bl	800ee96 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d03a      	beq.n	800de6c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ddf6:	68f8      	ldr	r0, [r7, #12]
 800ddf8:	f7ff fe42 	bl	800da80 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2200      	movs	r2, #0
 800de00:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800de04:	e032      	b.n	800de6c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800de06:	7afb      	ldrb	r3, [r7, #11]
 800de08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	4619      	mov	r1, r3
 800de10:	68f8      	ldr	r0, [r7, #12]
 800de12:	f000 f8f3 	bl	800dffc <USBD_CoreFindEP>
 800de16:	4603      	mov	r3, r0
 800de18:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800de1a:	7dfb      	ldrb	r3, [r7, #23]
 800de1c:	2bff      	cmp	r3, #255	; 0xff
 800de1e:	d025      	beq.n	800de6c <USBD_LL_DataInStage+0x15a>
 800de20:	7dfb      	ldrb	r3, [r7, #23]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d122      	bne.n	800de6c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	2b03      	cmp	r3, #3
 800de30:	d11c      	bne.n	800de6c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800de32:	7dfa      	ldrb	r2, [r7, #23]
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	32ae      	adds	r2, #174	; 0xae
 800de38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de3c:	695b      	ldr	r3, [r3, #20]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d014      	beq.n	800de6c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800de42:	7dfa      	ldrb	r2, [r7, #23]
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800de4a:	7dfa      	ldrb	r2, [r7, #23]
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	32ae      	adds	r2, #174	; 0xae
 800de50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de54:	695b      	ldr	r3, [r3, #20]
 800de56:	7afa      	ldrb	r2, [r7, #11]
 800de58:	4611      	mov	r1, r2
 800de5a:	68f8      	ldr	r0, [r7, #12]
 800de5c:	4798      	blx	r3
 800de5e:	4603      	mov	r3, r0
 800de60:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800de62:	7dbb      	ldrb	r3, [r7, #22]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d001      	beq.n	800de6c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800de68:	7dbb      	ldrb	r3, [r7, #22]
 800de6a:	e000      	b.n	800de6e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800de6c:	2300      	movs	r3, #0
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3718      	adds	r7, #24
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}

0800de76 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800de76:	b580      	push	{r7, lr}
 800de78:	b084      	sub	sp, #16
 800de7a:	af00      	add	r7, sp, #0
 800de7c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800de7e:	2300      	movs	r3, #0
 800de80:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2201      	movs	r2, #1
 800de86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2200      	movs	r2, #0
 800de8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2200      	movs	r2, #0
 800de96:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2200      	movs	r2, #0
 800de9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2200      	movs	r2, #0
 800dea4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d014      	beq.n	800dedc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800deb8:	685b      	ldr	r3, [r3, #4]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d00e      	beq.n	800dedc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dec4:	685b      	ldr	r3, [r3, #4]
 800dec6:	687a      	ldr	r2, [r7, #4]
 800dec8:	6852      	ldr	r2, [r2, #4]
 800deca:	b2d2      	uxtb	r2, r2
 800decc:	4611      	mov	r1, r2
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	4798      	blx	r3
 800ded2:	4603      	mov	r3, r0
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d001      	beq.n	800dedc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ded8:	2303      	movs	r3, #3
 800deda:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dedc:	2340      	movs	r3, #64	; 0x40
 800dede:	2200      	movs	r2, #0
 800dee0:	2100      	movs	r1, #0
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f005 fd87 	bl	80139f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2201      	movs	r2, #1
 800deec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2240      	movs	r2, #64	; 0x40
 800def4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800def8:	2340      	movs	r3, #64	; 0x40
 800defa:	2200      	movs	r2, #0
 800defc:	2180      	movs	r1, #128	; 0x80
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	f005 fd79 	bl	80139f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2201      	movs	r2, #1
 800df08:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2240      	movs	r2, #64	; 0x40
 800df0e:	621a      	str	r2, [r3, #32]

  return ret;
 800df10:	7bfb      	ldrb	r3, [r7, #15]
}
 800df12:	4618      	mov	r0, r3
 800df14:	3710      	adds	r7, #16
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}

0800df1a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800df1a:	b480      	push	{r7}
 800df1c:	b083      	sub	sp, #12
 800df1e:	af00      	add	r7, sp, #0
 800df20:	6078      	str	r0, [r7, #4]
 800df22:	460b      	mov	r3, r1
 800df24:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	78fa      	ldrb	r2, [r7, #3]
 800df2a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800df2c:	2300      	movs	r3, #0
}
 800df2e:	4618      	mov	r0, r3
 800df30:	370c      	adds	r7, #12
 800df32:	46bd      	mov	sp, r7
 800df34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df38:	4770      	bx	lr

0800df3a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800df3a:	b480      	push	{r7}
 800df3c:	b083      	sub	sp, #12
 800df3e:	af00      	add	r7, sp, #0
 800df40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	2b04      	cmp	r3, #4
 800df4c:	d006      	beq.n	800df5c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df54:	b2da      	uxtb	r2, r3
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2204      	movs	r2, #4
 800df60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800df64:	2300      	movs	r3, #0
}
 800df66:	4618      	mov	r0, r3
 800df68:	370c      	adds	r7, #12
 800df6a:	46bd      	mov	sp, r7
 800df6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df70:	4770      	bx	lr

0800df72 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800df72:	b480      	push	{r7}
 800df74:	b083      	sub	sp, #12
 800df76:	af00      	add	r7, sp, #0
 800df78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df80:	b2db      	uxtb	r3, r3
 800df82:	2b04      	cmp	r3, #4
 800df84:	d106      	bne.n	800df94 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800df8c:	b2da      	uxtb	r2, r3
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800df94:	2300      	movs	r3, #0
}
 800df96:	4618      	mov	r0, r3
 800df98:	370c      	adds	r7, #12
 800df9a:	46bd      	mov	sp, r7
 800df9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa0:	4770      	bx	lr

0800dfa2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dfa2:	b580      	push	{r7, lr}
 800dfa4:	b082      	sub	sp, #8
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	2b03      	cmp	r3, #3
 800dfb4:	d110      	bne.n	800dfd8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d00b      	beq.n	800dfd8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfc6:	69db      	ldr	r3, [r3, #28]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d005      	beq.n	800dfd8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfd2:	69db      	ldr	r3, [r3, #28]
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dfd8:	2300      	movs	r3, #0
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3708      	adds	r7, #8
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}

0800dfe2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dfe2:	b480      	push	{r7}
 800dfe4:	b083      	sub	sp, #12
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
 800dfea:	460b      	mov	r3, r1
 800dfec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dfee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	370c      	adds	r7, #12
 800dff4:	46bd      	mov	sp, r7
 800dff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffa:	4770      	bx	lr

0800dffc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dffc:	b480      	push	{r7}
 800dffe:	b083      	sub	sp, #12
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
 800e004:	460b      	mov	r3, r1
 800e006:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e008:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	370c      	adds	r7, #12
 800e00e:	46bd      	mov	sp, r7
 800e010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e014:	4770      	bx	lr

0800e016 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e016:	b580      	push	{r7, lr}
 800e018:	b086      	sub	sp, #24
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	6078      	str	r0, [r7, #4]
 800e01e:	460b      	mov	r3, r1
 800e020:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e02a:	2300      	movs	r3, #0
 800e02c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	885b      	ldrh	r3, [r3, #2]
 800e032:	b29a      	uxth	r2, r3
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	781b      	ldrb	r3, [r3, #0]
 800e038:	b29b      	uxth	r3, r3
 800e03a:	429a      	cmp	r2, r3
 800e03c:	d920      	bls.n	800e080 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	b29b      	uxth	r3, r3
 800e044:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e046:	e013      	b.n	800e070 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e048:	f107 030a 	add.w	r3, r7, #10
 800e04c:	4619      	mov	r1, r3
 800e04e:	6978      	ldr	r0, [r7, #20]
 800e050:	f000 f81b 	bl	800e08a <USBD_GetNextDesc>
 800e054:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	785b      	ldrb	r3, [r3, #1]
 800e05a:	2b05      	cmp	r3, #5
 800e05c:	d108      	bne.n	800e070 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	789b      	ldrb	r3, [r3, #2]
 800e066:	78fa      	ldrb	r2, [r7, #3]
 800e068:	429a      	cmp	r2, r3
 800e06a:	d008      	beq.n	800e07e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e06c:	2300      	movs	r3, #0
 800e06e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	885b      	ldrh	r3, [r3, #2]
 800e074:	b29a      	uxth	r2, r3
 800e076:	897b      	ldrh	r3, [r7, #10]
 800e078:	429a      	cmp	r2, r3
 800e07a:	d8e5      	bhi.n	800e048 <USBD_GetEpDesc+0x32>
 800e07c:	e000      	b.n	800e080 <USBD_GetEpDesc+0x6a>
          break;
 800e07e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e080:	693b      	ldr	r3, [r7, #16]
}
 800e082:	4618      	mov	r0, r3
 800e084:	3718      	adds	r7, #24
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}

0800e08a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e08a:	b480      	push	{r7}
 800e08c:	b085      	sub	sp, #20
 800e08e:	af00      	add	r7, sp, #0
 800e090:	6078      	str	r0, [r7, #4]
 800e092:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	881a      	ldrh	r2, [r3, #0]
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	781b      	ldrb	r3, [r3, #0]
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	4413      	add	r3, r2
 800e0a4:	b29a      	uxth	r2, r3
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	4413      	add	r3, r2
 800e0b4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3714      	adds	r7, #20
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c2:	4770      	bx	lr

0800e0c4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e0c4:	b480      	push	{r7}
 800e0c6:	b087      	sub	sp, #28
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	3301      	adds	r3, #1
 800e0da:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	781b      	ldrb	r3, [r3, #0]
 800e0e0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e0e2:	8a3b      	ldrh	r3, [r7, #16]
 800e0e4:	021b      	lsls	r3, r3, #8
 800e0e6:	b21a      	sxth	r2, r3
 800e0e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e0ec:	4313      	orrs	r3, r2
 800e0ee:	b21b      	sxth	r3, r3
 800e0f0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e0f2:	89fb      	ldrh	r3, [r7, #14]
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	371c      	adds	r7, #28
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr

0800e100 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e10a:	2300      	movs	r3, #0
 800e10c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e116:	2b40      	cmp	r3, #64	; 0x40
 800e118:	d005      	beq.n	800e126 <USBD_StdDevReq+0x26>
 800e11a:	2b40      	cmp	r3, #64	; 0x40
 800e11c:	d857      	bhi.n	800e1ce <USBD_StdDevReq+0xce>
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d00f      	beq.n	800e142 <USBD_StdDevReq+0x42>
 800e122:	2b20      	cmp	r3, #32
 800e124:	d153      	bne.n	800e1ce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	32ae      	adds	r2, #174	; 0xae
 800e130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e134:	689b      	ldr	r3, [r3, #8]
 800e136:	6839      	ldr	r1, [r7, #0]
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	4798      	blx	r3
 800e13c:	4603      	mov	r3, r0
 800e13e:	73fb      	strb	r3, [r7, #15]
      break;
 800e140:	e04a      	b.n	800e1d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	785b      	ldrb	r3, [r3, #1]
 800e146:	2b09      	cmp	r3, #9
 800e148:	d83b      	bhi.n	800e1c2 <USBD_StdDevReq+0xc2>
 800e14a:	a201      	add	r2, pc, #4	; (adr r2, 800e150 <USBD_StdDevReq+0x50>)
 800e14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e150:	0800e1a5 	.word	0x0800e1a5
 800e154:	0800e1b9 	.word	0x0800e1b9
 800e158:	0800e1c3 	.word	0x0800e1c3
 800e15c:	0800e1af 	.word	0x0800e1af
 800e160:	0800e1c3 	.word	0x0800e1c3
 800e164:	0800e183 	.word	0x0800e183
 800e168:	0800e179 	.word	0x0800e179
 800e16c:	0800e1c3 	.word	0x0800e1c3
 800e170:	0800e19b 	.word	0x0800e19b
 800e174:	0800e18d 	.word	0x0800e18d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e178:	6839      	ldr	r1, [r7, #0]
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f000 fa3c 	bl	800e5f8 <USBD_GetDescriptor>
          break;
 800e180:	e024      	b.n	800e1cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e182:	6839      	ldr	r1, [r7, #0]
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f000 fbcb 	bl	800e920 <USBD_SetAddress>
          break;
 800e18a:	e01f      	b.n	800e1cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e18c:	6839      	ldr	r1, [r7, #0]
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f000 fc0a 	bl	800e9a8 <USBD_SetConfig>
 800e194:	4603      	mov	r3, r0
 800e196:	73fb      	strb	r3, [r7, #15]
          break;
 800e198:	e018      	b.n	800e1cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e19a:	6839      	ldr	r1, [r7, #0]
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f000 fcad 	bl	800eafc <USBD_GetConfig>
          break;
 800e1a2:	e013      	b.n	800e1cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e1a4:	6839      	ldr	r1, [r7, #0]
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f000 fcde 	bl	800eb68 <USBD_GetStatus>
          break;
 800e1ac:	e00e      	b.n	800e1cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e1ae:	6839      	ldr	r1, [r7, #0]
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f000 fd0d 	bl	800ebd0 <USBD_SetFeature>
          break;
 800e1b6:	e009      	b.n	800e1cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e1b8:	6839      	ldr	r1, [r7, #0]
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f000 fd31 	bl	800ec22 <USBD_ClrFeature>
          break;
 800e1c0:	e004      	b.n	800e1cc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e1c2:	6839      	ldr	r1, [r7, #0]
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f000 fd88 	bl	800ecda <USBD_CtlError>
          break;
 800e1ca:	bf00      	nop
      }
      break;
 800e1cc:	e004      	b.n	800e1d8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e1ce:	6839      	ldr	r1, [r7, #0]
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f000 fd82 	bl	800ecda <USBD_CtlError>
      break;
 800e1d6:	bf00      	nop
  }

  return ret;
 800e1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3710      	adds	r7, #16
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}
 800e1e2:	bf00      	nop

0800e1e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b084      	sub	sp, #16
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
 800e1ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e1fa:	2b40      	cmp	r3, #64	; 0x40
 800e1fc:	d005      	beq.n	800e20a <USBD_StdItfReq+0x26>
 800e1fe:	2b40      	cmp	r3, #64	; 0x40
 800e200:	d852      	bhi.n	800e2a8 <USBD_StdItfReq+0xc4>
 800e202:	2b00      	cmp	r3, #0
 800e204:	d001      	beq.n	800e20a <USBD_StdItfReq+0x26>
 800e206:	2b20      	cmp	r3, #32
 800e208:	d14e      	bne.n	800e2a8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e210:	b2db      	uxtb	r3, r3
 800e212:	3b01      	subs	r3, #1
 800e214:	2b02      	cmp	r3, #2
 800e216:	d840      	bhi.n	800e29a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	889b      	ldrh	r3, [r3, #4]
 800e21c:	b2db      	uxtb	r3, r3
 800e21e:	2b01      	cmp	r3, #1
 800e220:	d836      	bhi.n	800e290 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	889b      	ldrh	r3, [r3, #4]
 800e226:	b2db      	uxtb	r3, r3
 800e228:	4619      	mov	r1, r3
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f7ff fed9 	bl	800dfe2 <USBD_CoreFindIF>
 800e230:	4603      	mov	r3, r0
 800e232:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e234:	7bbb      	ldrb	r3, [r7, #14]
 800e236:	2bff      	cmp	r3, #255	; 0xff
 800e238:	d01d      	beq.n	800e276 <USBD_StdItfReq+0x92>
 800e23a:	7bbb      	ldrb	r3, [r7, #14]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d11a      	bne.n	800e276 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e240:	7bba      	ldrb	r2, [r7, #14]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	32ae      	adds	r2, #174	; 0xae
 800e246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e24a:	689b      	ldr	r3, [r3, #8]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d00f      	beq.n	800e270 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e250:	7bba      	ldrb	r2, [r7, #14]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e258:	7bba      	ldrb	r2, [r7, #14]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	32ae      	adds	r2, #174	; 0xae
 800e25e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e262:	689b      	ldr	r3, [r3, #8]
 800e264:	6839      	ldr	r1, [r7, #0]
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	4798      	blx	r3
 800e26a:	4603      	mov	r3, r0
 800e26c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e26e:	e004      	b.n	800e27a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e270:	2303      	movs	r3, #3
 800e272:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e274:	e001      	b.n	800e27a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e276:	2303      	movs	r3, #3
 800e278:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	88db      	ldrh	r3, [r3, #6]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d110      	bne.n	800e2a4 <USBD_StdItfReq+0xc0>
 800e282:	7bfb      	ldrb	r3, [r7, #15]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d10d      	bne.n	800e2a4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f000 fdf1 	bl	800ee70 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e28e:	e009      	b.n	800e2a4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e290:	6839      	ldr	r1, [r7, #0]
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f000 fd21 	bl	800ecda <USBD_CtlError>
          break;
 800e298:	e004      	b.n	800e2a4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e29a:	6839      	ldr	r1, [r7, #0]
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f000 fd1c 	bl	800ecda <USBD_CtlError>
          break;
 800e2a2:	e000      	b.n	800e2a6 <USBD_StdItfReq+0xc2>
          break;
 800e2a4:	bf00      	nop
      }
      break;
 800e2a6:	e004      	b.n	800e2b2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e2a8:	6839      	ldr	r1, [r7, #0]
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f000 fd15 	bl	800ecda <USBD_CtlError>
      break;
 800e2b0:	bf00      	nop
  }

  return ret;
 800e2b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3710      	adds	r7, #16
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}

0800e2bc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b084      	sub	sp, #16
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	889b      	ldrh	r3, [r3, #4]
 800e2ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e2d8:	2b40      	cmp	r3, #64	; 0x40
 800e2da:	d007      	beq.n	800e2ec <USBD_StdEPReq+0x30>
 800e2dc:	2b40      	cmp	r3, #64	; 0x40
 800e2de:	f200 817f 	bhi.w	800e5e0 <USBD_StdEPReq+0x324>
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d02a      	beq.n	800e33c <USBD_StdEPReq+0x80>
 800e2e6:	2b20      	cmp	r3, #32
 800e2e8:	f040 817a 	bne.w	800e5e0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e2ec:	7bbb      	ldrb	r3, [r7, #14]
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f7ff fe83 	bl	800dffc <USBD_CoreFindEP>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e2fa:	7b7b      	ldrb	r3, [r7, #13]
 800e2fc:	2bff      	cmp	r3, #255	; 0xff
 800e2fe:	f000 8174 	beq.w	800e5ea <USBD_StdEPReq+0x32e>
 800e302:	7b7b      	ldrb	r3, [r7, #13]
 800e304:	2b00      	cmp	r3, #0
 800e306:	f040 8170 	bne.w	800e5ea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e30a:	7b7a      	ldrb	r2, [r7, #13]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e312:	7b7a      	ldrb	r2, [r7, #13]
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	32ae      	adds	r2, #174	; 0xae
 800e318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e31c:	689b      	ldr	r3, [r3, #8]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	f000 8163 	beq.w	800e5ea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e324:	7b7a      	ldrb	r2, [r7, #13]
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	32ae      	adds	r2, #174	; 0xae
 800e32a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e32e:	689b      	ldr	r3, [r3, #8]
 800e330:	6839      	ldr	r1, [r7, #0]
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	4798      	blx	r3
 800e336:	4603      	mov	r3, r0
 800e338:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e33a:	e156      	b.n	800e5ea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	785b      	ldrb	r3, [r3, #1]
 800e340:	2b03      	cmp	r3, #3
 800e342:	d008      	beq.n	800e356 <USBD_StdEPReq+0x9a>
 800e344:	2b03      	cmp	r3, #3
 800e346:	f300 8145 	bgt.w	800e5d4 <USBD_StdEPReq+0x318>
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	f000 809b 	beq.w	800e486 <USBD_StdEPReq+0x1ca>
 800e350:	2b01      	cmp	r3, #1
 800e352:	d03c      	beq.n	800e3ce <USBD_StdEPReq+0x112>
 800e354:	e13e      	b.n	800e5d4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e35c:	b2db      	uxtb	r3, r3
 800e35e:	2b02      	cmp	r3, #2
 800e360:	d002      	beq.n	800e368 <USBD_StdEPReq+0xac>
 800e362:	2b03      	cmp	r3, #3
 800e364:	d016      	beq.n	800e394 <USBD_StdEPReq+0xd8>
 800e366:	e02c      	b.n	800e3c2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e368:	7bbb      	ldrb	r3, [r7, #14]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d00d      	beq.n	800e38a <USBD_StdEPReq+0xce>
 800e36e:	7bbb      	ldrb	r3, [r7, #14]
 800e370:	2b80      	cmp	r3, #128	; 0x80
 800e372:	d00a      	beq.n	800e38a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e374:	7bbb      	ldrb	r3, [r7, #14]
 800e376:	4619      	mov	r1, r3
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f005 fb81 	bl	8013a80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e37e:	2180      	movs	r1, #128	; 0x80
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f005 fb7d 	bl	8013a80 <USBD_LL_StallEP>
 800e386:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e388:	e020      	b.n	800e3cc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e38a:	6839      	ldr	r1, [r7, #0]
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f000 fca4 	bl	800ecda <USBD_CtlError>
              break;
 800e392:	e01b      	b.n	800e3cc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	885b      	ldrh	r3, [r3, #2]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d10e      	bne.n	800e3ba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e39c:	7bbb      	ldrb	r3, [r7, #14]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d00b      	beq.n	800e3ba <USBD_StdEPReq+0xfe>
 800e3a2:	7bbb      	ldrb	r3, [r7, #14]
 800e3a4:	2b80      	cmp	r3, #128	; 0x80
 800e3a6:	d008      	beq.n	800e3ba <USBD_StdEPReq+0xfe>
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	88db      	ldrh	r3, [r3, #6]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d104      	bne.n	800e3ba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e3b0:	7bbb      	ldrb	r3, [r7, #14]
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f005 fb63 	bl	8013a80 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f000 fd58 	bl	800ee70 <USBD_CtlSendStatus>

              break;
 800e3c0:	e004      	b.n	800e3cc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e3c2:	6839      	ldr	r1, [r7, #0]
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f000 fc88 	bl	800ecda <USBD_CtlError>
              break;
 800e3ca:	bf00      	nop
          }
          break;
 800e3cc:	e107      	b.n	800e5de <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3d4:	b2db      	uxtb	r3, r3
 800e3d6:	2b02      	cmp	r3, #2
 800e3d8:	d002      	beq.n	800e3e0 <USBD_StdEPReq+0x124>
 800e3da:	2b03      	cmp	r3, #3
 800e3dc:	d016      	beq.n	800e40c <USBD_StdEPReq+0x150>
 800e3de:	e04b      	b.n	800e478 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e3e0:	7bbb      	ldrb	r3, [r7, #14]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d00d      	beq.n	800e402 <USBD_StdEPReq+0x146>
 800e3e6:	7bbb      	ldrb	r3, [r7, #14]
 800e3e8:	2b80      	cmp	r3, #128	; 0x80
 800e3ea:	d00a      	beq.n	800e402 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e3ec:	7bbb      	ldrb	r3, [r7, #14]
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f005 fb45 	bl	8013a80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e3f6:	2180      	movs	r1, #128	; 0x80
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	f005 fb41 	bl	8013a80 <USBD_LL_StallEP>
 800e3fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e400:	e040      	b.n	800e484 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e402:	6839      	ldr	r1, [r7, #0]
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f000 fc68 	bl	800ecda <USBD_CtlError>
              break;
 800e40a:	e03b      	b.n	800e484 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	885b      	ldrh	r3, [r3, #2]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d136      	bne.n	800e482 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e414:	7bbb      	ldrb	r3, [r7, #14]
 800e416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d004      	beq.n	800e428 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e41e:	7bbb      	ldrb	r3, [r7, #14]
 800e420:	4619      	mov	r1, r3
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f005 fb4b 	bl	8013abe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f000 fd21 	bl	800ee70 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e42e:	7bbb      	ldrb	r3, [r7, #14]
 800e430:	4619      	mov	r1, r3
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f7ff fde2 	bl	800dffc <USBD_CoreFindEP>
 800e438:	4603      	mov	r3, r0
 800e43a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e43c:	7b7b      	ldrb	r3, [r7, #13]
 800e43e:	2bff      	cmp	r3, #255	; 0xff
 800e440:	d01f      	beq.n	800e482 <USBD_StdEPReq+0x1c6>
 800e442:	7b7b      	ldrb	r3, [r7, #13]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d11c      	bne.n	800e482 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e448:	7b7a      	ldrb	r2, [r7, #13]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e450:	7b7a      	ldrb	r2, [r7, #13]
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	32ae      	adds	r2, #174	; 0xae
 800e456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e45a:	689b      	ldr	r3, [r3, #8]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d010      	beq.n	800e482 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e460:	7b7a      	ldrb	r2, [r7, #13]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	32ae      	adds	r2, #174	; 0xae
 800e466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e46a:	689b      	ldr	r3, [r3, #8]
 800e46c:	6839      	ldr	r1, [r7, #0]
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	4798      	blx	r3
 800e472:	4603      	mov	r3, r0
 800e474:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e476:	e004      	b.n	800e482 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e478:	6839      	ldr	r1, [r7, #0]
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f000 fc2d 	bl	800ecda <USBD_CtlError>
              break;
 800e480:	e000      	b.n	800e484 <USBD_StdEPReq+0x1c8>
              break;
 800e482:	bf00      	nop
          }
          break;
 800e484:	e0ab      	b.n	800e5de <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e48c:	b2db      	uxtb	r3, r3
 800e48e:	2b02      	cmp	r3, #2
 800e490:	d002      	beq.n	800e498 <USBD_StdEPReq+0x1dc>
 800e492:	2b03      	cmp	r3, #3
 800e494:	d032      	beq.n	800e4fc <USBD_StdEPReq+0x240>
 800e496:	e097      	b.n	800e5c8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e498:	7bbb      	ldrb	r3, [r7, #14]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d007      	beq.n	800e4ae <USBD_StdEPReq+0x1f2>
 800e49e:	7bbb      	ldrb	r3, [r7, #14]
 800e4a0:	2b80      	cmp	r3, #128	; 0x80
 800e4a2:	d004      	beq.n	800e4ae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e4a4:	6839      	ldr	r1, [r7, #0]
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f000 fc17 	bl	800ecda <USBD_CtlError>
                break;
 800e4ac:	e091      	b.n	800e5d2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e4ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	da0b      	bge.n	800e4ce <USBD_StdEPReq+0x212>
 800e4b6:	7bbb      	ldrb	r3, [r7, #14]
 800e4b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e4bc:	4613      	mov	r3, r2
 800e4be:	009b      	lsls	r3, r3, #2
 800e4c0:	4413      	add	r3, r2
 800e4c2:	009b      	lsls	r3, r3, #2
 800e4c4:	3310      	adds	r3, #16
 800e4c6:	687a      	ldr	r2, [r7, #4]
 800e4c8:	4413      	add	r3, r2
 800e4ca:	3304      	adds	r3, #4
 800e4cc:	e00b      	b.n	800e4e6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e4ce:	7bbb      	ldrb	r3, [r7, #14]
 800e4d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e4d4:	4613      	mov	r3, r2
 800e4d6:	009b      	lsls	r3, r3, #2
 800e4d8:	4413      	add	r3, r2
 800e4da:	009b      	lsls	r3, r3, #2
 800e4dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e4e0:	687a      	ldr	r2, [r7, #4]
 800e4e2:	4413      	add	r3, r2
 800e4e4:	3304      	adds	r3, #4
 800e4e6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	2202      	movs	r2, #2
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f000 fc61 	bl	800edbc <USBD_CtlSendData>
              break;
 800e4fa:	e06a      	b.n	800e5d2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e4fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e500:	2b00      	cmp	r3, #0
 800e502:	da11      	bge.n	800e528 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e504:	7bbb      	ldrb	r3, [r7, #14]
 800e506:	f003 020f 	and.w	r2, r3, #15
 800e50a:	6879      	ldr	r1, [r7, #4]
 800e50c:	4613      	mov	r3, r2
 800e50e:	009b      	lsls	r3, r3, #2
 800e510:	4413      	add	r3, r2
 800e512:	009b      	lsls	r3, r3, #2
 800e514:	440b      	add	r3, r1
 800e516:	3324      	adds	r3, #36	; 0x24
 800e518:	881b      	ldrh	r3, [r3, #0]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d117      	bne.n	800e54e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e51e:	6839      	ldr	r1, [r7, #0]
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f000 fbda 	bl	800ecda <USBD_CtlError>
                  break;
 800e526:	e054      	b.n	800e5d2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e528:	7bbb      	ldrb	r3, [r7, #14]
 800e52a:	f003 020f 	and.w	r2, r3, #15
 800e52e:	6879      	ldr	r1, [r7, #4]
 800e530:	4613      	mov	r3, r2
 800e532:	009b      	lsls	r3, r3, #2
 800e534:	4413      	add	r3, r2
 800e536:	009b      	lsls	r3, r3, #2
 800e538:	440b      	add	r3, r1
 800e53a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e53e:	881b      	ldrh	r3, [r3, #0]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d104      	bne.n	800e54e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e544:	6839      	ldr	r1, [r7, #0]
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f000 fbc7 	bl	800ecda <USBD_CtlError>
                  break;
 800e54c:	e041      	b.n	800e5d2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e54e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e552:	2b00      	cmp	r3, #0
 800e554:	da0b      	bge.n	800e56e <USBD_StdEPReq+0x2b2>
 800e556:	7bbb      	ldrb	r3, [r7, #14]
 800e558:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e55c:	4613      	mov	r3, r2
 800e55e:	009b      	lsls	r3, r3, #2
 800e560:	4413      	add	r3, r2
 800e562:	009b      	lsls	r3, r3, #2
 800e564:	3310      	adds	r3, #16
 800e566:	687a      	ldr	r2, [r7, #4]
 800e568:	4413      	add	r3, r2
 800e56a:	3304      	adds	r3, #4
 800e56c:	e00b      	b.n	800e586 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e56e:	7bbb      	ldrb	r3, [r7, #14]
 800e570:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e574:	4613      	mov	r3, r2
 800e576:	009b      	lsls	r3, r3, #2
 800e578:	4413      	add	r3, r2
 800e57a:	009b      	lsls	r3, r3, #2
 800e57c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e580:	687a      	ldr	r2, [r7, #4]
 800e582:	4413      	add	r3, r2
 800e584:	3304      	adds	r3, #4
 800e586:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e588:	7bbb      	ldrb	r3, [r7, #14]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d002      	beq.n	800e594 <USBD_StdEPReq+0x2d8>
 800e58e:	7bbb      	ldrb	r3, [r7, #14]
 800e590:	2b80      	cmp	r3, #128	; 0x80
 800e592:	d103      	bne.n	800e59c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	2200      	movs	r2, #0
 800e598:	601a      	str	r2, [r3, #0]
 800e59a:	e00e      	b.n	800e5ba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e59c:	7bbb      	ldrb	r3, [r7, #14]
 800e59e:	4619      	mov	r1, r3
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f005 faab 	bl	8013afc <USBD_LL_IsStallEP>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d003      	beq.n	800e5b4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	601a      	str	r2, [r3, #0]
 800e5b2:	e002      	b.n	800e5ba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	2202      	movs	r2, #2
 800e5be:	4619      	mov	r1, r3
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f000 fbfb 	bl	800edbc <USBD_CtlSendData>
              break;
 800e5c6:	e004      	b.n	800e5d2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e5c8:	6839      	ldr	r1, [r7, #0]
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f000 fb85 	bl	800ecda <USBD_CtlError>
              break;
 800e5d0:	bf00      	nop
          }
          break;
 800e5d2:	e004      	b.n	800e5de <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e5d4:	6839      	ldr	r1, [r7, #0]
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f000 fb7f 	bl	800ecda <USBD_CtlError>
          break;
 800e5dc:	bf00      	nop
      }
      break;
 800e5de:	e005      	b.n	800e5ec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e5e0:	6839      	ldr	r1, [r7, #0]
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f000 fb79 	bl	800ecda <USBD_CtlError>
      break;
 800e5e8:	e000      	b.n	800e5ec <USBD_StdEPReq+0x330>
      break;
 800e5ea:	bf00      	nop
  }

  return ret;
 800e5ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	3710      	adds	r7, #16
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}
	...

0800e5f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b084      	sub	sp, #16
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
 800e600:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e602:	2300      	movs	r3, #0
 800e604:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e606:	2300      	movs	r3, #0
 800e608:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e60a:	2300      	movs	r3, #0
 800e60c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	885b      	ldrh	r3, [r3, #2]
 800e612:	0a1b      	lsrs	r3, r3, #8
 800e614:	b29b      	uxth	r3, r3
 800e616:	3b01      	subs	r3, #1
 800e618:	2b0e      	cmp	r3, #14
 800e61a:	f200 8152 	bhi.w	800e8c2 <USBD_GetDescriptor+0x2ca>
 800e61e:	a201      	add	r2, pc, #4	; (adr r2, 800e624 <USBD_GetDescriptor+0x2c>)
 800e620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e624:	0800e695 	.word	0x0800e695
 800e628:	0800e6ad 	.word	0x0800e6ad
 800e62c:	0800e6ed 	.word	0x0800e6ed
 800e630:	0800e8c3 	.word	0x0800e8c3
 800e634:	0800e8c3 	.word	0x0800e8c3
 800e638:	0800e863 	.word	0x0800e863
 800e63c:	0800e88f 	.word	0x0800e88f
 800e640:	0800e8c3 	.word	0x0800e8c3
 800e644:	0800e8c3 	.word	0x0800e8c3
 800e648:	0800e8c3 	.word	0x0800e8c3
 800e64c:	0800e8c3 	.word	0x0800e8c3
 800e650:	0800e8c3 	.word	0x0800e8c3
 800e654:	0800e8c3 	.word	0x0800e8c3
 800e658:	0800e8c3 	.word	0x0800e8c3
 800e65c:	0800e661 	.word	0x0800e661
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e666:	69db      	ldr	r3, [r3, #28]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d00b      	beq.n	800e684 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e672:	69db      	ldr	r3, [r3, #28]
 800e674:	687a      	ldr	r2, [r7, #4]
 800e676:	7c12      	ldrb	r2, [r2, #16]
 800e678:	f107 0108 	add.w	r1, r7, #8
 800e67c:	4610      	mov	r0, r2
 800e67e:	4798      	blx	r3
 800e680:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e682:	e126      	b.n	800e8d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e684:	6839      	ldr	r1, [r7, #0]
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f000 fb27 	bl	800ecda <USBD_CtlError>
        err++;
 800e68c:	7afb      	ldrb	r3, [r7, #11]
 800e68e:	3301      	adds	r3, #1
 800e690:	72fb      	strb	r3, [r7, #11]
      break;
 800e692:	e11e      	b.n	800e8d2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	687a      	ldr	r2, [r7, #4]
 800e69e:	7c12      	ldrb	r2, [r2, #16]
 800e6a0:	f107 0108 	add.w	r1, r7, #8
 800e6a4:	4610      	mov	r0, r2
 800e6a6:	4798      	blx	r3
 800e6a8:	60f8      	str	r0, [r7, #12]
      break;
 800e6aa:	e112      	b.n	800e8d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	7c1b      	ldrb	r3, [r3, #16]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d10d      	bne.n	800e6d0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6bc:	f107 0208 	add.w	r2, r7, #8
 800e6c0:	4610      	mov	r0, r2
 800e6c2:	4798      	blx	r3
 800e6c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	2202      	movs	r2, #2
 800e6cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e6ce:	e100      	b.n	800e8d2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6d8:	f107 0208 	add.w	r2, r7, #8
 800e6dc:	4610      	mov	r0, r2
 800e6de:	4798      	blx	r3
 800e6e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	2202      	movs	r2, #2
 800e6e8:	701a      	strb	r2, [r3, #0]
      break;
 800e6ea:	e0f2      	b.n	800e8d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	885b      	ldrh	r3, [r3, #2]
 800e6f0:	b2db      	uxtb	r3, r3
 800e6f2:	2b05      	cmp	r3, #5
 800e6f4:	f200 80ac 	bhi.w	800e850 <USBD_GetDescriptor+0x258>
 800e6f8:	a201      	add	r2, pc, #4	; (adr r2, 800e700 <USBD_GetDescriptor+0x108>)
 800e6fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6fe:	bf00      	nop
 800e700:	0800e719 	.word	0x0800e719
 800e704:	0800e74d 	.word	0x0800e74d
 800e708:	0800e781 	.word	0x0800e781
 800e70c:	0800e7b5 	.word	0x0800e7b5
 800e710:	0800e7e9 	.word	0x0800e7e9
 800e714:	0800e81d 	.word	0x0800e81d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e71e:	685b      	ldr	r3, [r3, #4]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d00b      	beq.n	800e73c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e72a:	685b      	ldr	r3, [r3, #4]
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	7c12      	ldrb	r2, [r2, #16]
 800e730:	f107 0108 	add.w	r1, r7, #8
 800e734:	4610      	mov	r0, r2
 800e736:	4798      	blx	r3
 800e738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e73a:	e091      	b.n	800e860 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e73c:	6839      	ldr	r1, [r7, #0]
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f000 facb 	bl	800ecda <USBD_CtlError>
            err++;
 800e744:	7afb      	ldrb	r3, [r7, #11]
 800e746:	3301      	adds	r3, #1
 800e748:	72fb      	strb	r3, [r7, #11]
          break;
 800e74a:	e089      	b.n	800e860 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e752:	689b      	ldr	r3, [r3, #8]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d00b      	beq.n	800e770 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e75e:	689b      	ldr	r3, [r3, #8]
 800e760:	687a      	ldr	r2, [r7, #4]
 800e762:	7c12      	ldrb	r2, [r2, #16]
 800e764:	f107 0108 	add.w	r1, r7, #8
 800e768:	4610      	mov	r0, r2
 800e76a:	4798      	blx	r3
 800e76c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e76e:	e077      	b.n	800e860 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e770:	6839      	ldr	r1, [r7, #0]
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f000 fab1 	bl	800ecda <USBD_CtlError>
            err++;
 800e778:	7afb      	ldrb	r3, [r7, #11]
 800e77a:	3301      	adds	r3, #1
 800e77c:	72fb      	strb	r3, [r7, #11]
          break;
 800e77e:	e06f      	b.n	800e860 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e786:	68db      	ldr	r3, [r3, #12]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d00b      	beq.n	800e7a4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e792:	68db      	ldr	r3, [r3, #12]
 800e794:	687a      	ldr	r2, [r7, #4]
 800e796:	7c12      	ldrb	r2, [r2, #16]
 800e798:	f107 0108 	add.w	r1, r7, #8
 800e79c:	4610      	mov	r0, r2
 800e79e:	4798      	blx	r3
 800e7a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e7a2:	e05d      	b.n	800e860 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e7a4:	6839      	ldr	r1, [r7, #0]
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f000 fa97 	bl	800ecda <USBD_CtlError>
            err++;
 800e7ac:	7afb      	ldrb	r3, [r7, #11]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	72fb      	strb	r3, [r7, #11]
          break;
 800e7b2:	e055      	b.n	800e860 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7ba:	691b      	ldr	r3, [r3, #16]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d00b      	beq.n	800e7d8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7c6:	691b      	ldr	r3, [r3, #16]
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	7c12      	ldrb	r2, [r2, #16]
 800e7cc:	f107 0108 	add.w	r1, r7, #8
 800e7d0:	4610      	mov	r0, r2
 800e7d2:	4798      	blx	r3
 800e7d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e7d6:	e043      	b.n	800e860 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e7d8:	6839      	ldr	r1, [r7, #0]
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f000 fa7d 	bl	800ecda <USBD_CtlError>
            err++;
 800e7e0:	7afb      	ldrb	r3, [r7, #11]
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	72fb      	strb	r3, [r7, #11]
          break;
 800e7e6:	e03b      	b.n	800e860 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7ee:	695b      	ldr	r3, [r3, #20]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d00b      	beq.n	800e80c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7fa:	695b      	ldr	r3, [r3, #20]
 800e7fc:	687a      	ldr	r2, [r7, #4]
 800e7fe:	7c12      	ldrb	r2, [r2, #16]
 800e800:	f107 0108 	add.w	r1, r7, #8
 800e804:	4610      	mov	r0, r2
 800e806:	4798      	blx	r3
 800e808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e80a:	e029      	b.n	800e860 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e80c:	6839      	ldr	r1, [r7, #0]
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f000 fa63 	bl	800ecda <USBD_CtlError>
            err++;
 800e814:	7afb      	ldrb	r3, [r7, #11]
 800e816:	3301      	adds	r3, #1
 800e818:	72fb      	strb	r3, [r7, #11]
          break;
 800e81a:	e021      	b.n	800e860 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e822:	699b      	ldr	r3, [r3, #24]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d00b      	beq.n	800e840 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e82e:	699b      	ldr	r3, [r3, #24]
 800e830:	687a      	ldr	r2, [r7, #4]
 800e832:	7c12      	ldrb	r2, [r2, #16]
 800e834:	f107 0108 	add.w	r1, r7, #8
 800e838:	4610      	mov	r0, r2
 800e83a:	4798      	blx	r3
 800e83c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e83e:	e00f      	b.n	800e860 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e840:	6839      	ldr	r1, [r7, #0]
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f000 fa49 	bl	800ecda <USBD_CtlError>
            err++;
 800e848:	7afb      	ldrb	r3, [r7, #11]
 800e84a:	3301      	adds	r3, #1
 800e84c:	72fb      	strb	r3, [r7, #11]
          break;
 800e84e:	e007      	b.n	800e860 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e850:	6839      	ldr	r1, [r7, #0]
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f000 fa41 	bl	800ecda <USBD_CtlError>
          err++;
 800e858:	7afb      	ldrb	r3, [r7, #11]
 800e85a:	3301      	adds	r3, #1
 800e85c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e85e:	bf00      	nop
      }
      break;
 800e860:	e037      	b.n	800e8d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	7c1b      	ldrb	r3, [r3, #16]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d109      	bne.n	800e87e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e872:	f107 0208 	add.w	r2, r7, #8
 800e876:	4610      	mov	r0, r2
 800e878:	4798      	blx	r3
 800e87a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e87c:	e029      	b.n	800e8d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e87e:	6839      	ldr	r1, [r7, #0]
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f000 fa2a 	bl	800ecda <USBD_CtlError>
        err++;
 800e886:	7afb      	ldrb	r3, [r7, #11]
 800e888:	3301      	adds	r3, #1
 800e88a:	72fb      	strb	r3, [r7, #11]
      break;
 800e88c:	e021      	b.n	800e8d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	7c1b      	ldrb	r3, [r3, #16]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d10d      	bne.n	800e8b2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e89e:	f107 0208 	add.w	r2, r7, #8
 800e8a2:	4610      	mov	r0, r2
 800e8a4:	4798      	blx	r3
 800e8a6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	2207      	movs	r2, #7
 800e8ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e8b0:	e00f      	b.n	800e8d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e8b2:	6839      	ldr	r1, [r7, #0]
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f000 fa10 	bl	800ecda <USBD_CtlError>
        err++;
 800e8ba:	7afb      	ldrb	r3, [r7, #11]
 800e8bc:	3301      	adds	r3, #1
 800e8be:	72fb      	strb	r3, [r7, #11]
      break;
 800e8c0:	e007      	b.n	800e8d2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e8c2:	6839      	ldr	r1, [r7, #0]
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	f000 fa08 	bl	800ecda <USBD_CtlError>
      err++;
 800e8ca:	7afb      	ldrb	r3, [r7, #11]
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	72fb      	strb	r3, [r7, #11]
      break;
 800e8d0:	bf00      	nop
  }

  if (err != 0U)
 800e8d2:	7afb      	ldrb	r3, [r7, #11]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d11e      	bne.n	800e916 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	88db      	ldrh	r3, [r3, #6]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d016      	beq.n	800e90e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e8e0:	893b      	ldrh	r3, [r7, #8]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d00e      	beq.n	800e904 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	88da      	ldrh	r2, [r3, #6]
 800e8ea:	893b      	ldrh	r3, [r7, #8]
 800e8ec:	4293      	cmp	r3, r2
 800e8ee:	bf28      	it	cs
 800e8f0:	4613      	movcs	r3, r2
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e8f6:	893b      	ldrh	r3, [r7, #8]
 800e8f8:	461a      	mov	r2, r3
 800e8fa:	68f9      	ldr	r1, [r7, #12]
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f000 fa5d 	bl	800edbc <USBD_CtlSendData>
 800e902:	e009      	b.n	800e918 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e904:	6839      	ldr	r1, [r7, #0]
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f000 f9e7 	bl	800ecda <USBD_CtlError>
 800e90c:	e004      	b.n	800e918 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f000 faae 	bl	800ee70 <USBD_CtlSendStatus>
 800e914:	e000      	b.n	800e918 <USBD_GetDescriptor+0x320>
    return;
 800e916:	bf00      	nop
  }
}
 800e918:	3710      	adds	r7, #16
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop

0800e920 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b084      	sub	sp, #16
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	889b      	ldrh	r3, [r3, #4]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d131      	bne.n	800e996 <USBD_SetAddress+0x76>
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	88db      	ldrh	r3, [r3, #6]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d12d      	bne.n	800e996 <USBD_SetAddress+0x76>
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	885b      	ldrh	r3, [r3, #2]
 800e93e:	2b7f      	cmp	r3, #127	; 0x7f
 800e940:	d829      	bhi.n	800e996 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	885b      	ldrh	r3, [r3, #2]
 800e946:	b2db      	uxtb	r3, r3
 800e948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e94c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e954:	b2db      	uxtb	r3, r3
 800e956:	2b03      	cmp	r3, #3
 800e958:	d104      	bne.n	800e964 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e95a:	6839      	ldr	r1, [r7, #0]
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f000 f9bc 	bl	800ecda <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e962:	e01d      	b.n	800e9a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	7bfa      	ldrb	r2, [r7, #15]
 800e968:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e96c:	7bfb      	ldrb	r3, [r7, #15]
 800e96e:	4619      	mov	r1, r3
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f005 f8f0 	bl	8013b56 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f000 fa7a 	bl	800ee70 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e97c:	7bfb      	ldrb	r3, [r7, #15]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d004      	beq.n	800e98c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2202      	movs	r2, #2
 800e986:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e98a:	e009      	b.n	800e9a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2201      	movs	r2, #1
 800e990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e994:	e004      	b.n	800e9a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e996:	6839      	ldr	r1, [r7, #0]
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f000 f99e 	bl	800ecda <USBD_CtlError>
  }
}
 800e99e:	bf00      	nop
 800e9a0:	bf00      	nop
 800e9a2:	3710      	adds	r7, #16
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}

0800e9a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	885b      	ldrh	r3, [r3, #2]
 800e9ba:	b2da      	uxtb	r2, r3
 800e9bc:	4b4e      	ldr	r3, [pc, #312]	; (800eaf8 <USBD_SetConfig+0x150>)
 800e9be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e9c0:	4b4d      	ldr	r3, [pc, #308]	; (800eaf8 <USBD_SetConfig+0x150>)
 800e9c2:	781b      	ldrb	r3, [r3, #0]
 800e9c4:	2b01      	cmp	r3, #1
 800e9c6:	d905      	bls.n	800e9d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e9c8:	6839      	ldr	r1, [r7, #0]
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f000 f985 	bl	800ecda <USBD_CtlError>
    return USBD_FAIL;
 800e9d0:	2303      	movs	r3, #3
 800e9d2:	e08c      	b.n	800eaee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	2b02      	cmp	r3, #2
 800e9de:	d002      	beq.n	800e9e6 <USBD_SetConfig+0x3e>
 800e9e0:	2b03      	cmp	r3, #3
 800e9e2:	d029      	beq.n	800ea38 <USBD_SetConfig+0x90>
 800e9e4:	e075      	b.n	800ead2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e9e6:	4b44      	ldr	r3, [pc, #272]	; (800eaf8 <USBD_SetConfig+0x150>)
 800e9e8:	781b      	ldrb	r3, [r3, #0]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d020      	beq.n	800ea30 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e9ee:	4b42      	ldr	r3, [pc, #264]	; (800eaf8 <USBD_SetConfig+0x150>)
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	461a      	mov	r2, r3
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e9f8:	4b3f      	ldr	r3, [pc, #252]	; (800eaf8 <USBD_SetConfig+0x150>)
 800e9fa:	781b      	ldrb	r3, [r3, #0]
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f7ff f849 	bl	800da96 <USBD_SetClassConfig>
 800ea04:	4603      	mov	r3, r0
 800ea06:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ea08:	7bfb      	ldrb	r3, [r7, #15]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d008      	beq.n	800ea20 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ea0e:	6839      	ldr	r1, [r7, #0]
 800ea10:	6878      	ldr	r0, [r7, #4]
 800ea12:	f000 f962 	bl	800ecda <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2202      	movs	r2, #2
 800ea1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ea1e:	e065      	b.n	800eaec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f000 fa25 	bl	800ee70 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2203      	movs	r2, #3
 800ea2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ea2e:	e05d      	b.n	800eaec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f000 fa1d 	bl	800ee70 <USBD_CtlSendStatus>
      break;
 800ea36:	e059      	b.n	800eaec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ea38:	4b2f      	ldr	r3, [pc, #188]	; (800eaf8 <USBD_SetConfig+0x150>)
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d112      	bne.n	800ea66 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2202      	movs	r2, #2
 800ea44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ea48:	4b2b      	ldr	r3, [pc, #172]	; (800eaf8 <USBD_SetConfig+0x150>)
 800ea4a:	781b      	ldrb	r3, [r3, #0]
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ea52:	4b29      	ldr	r3, [pc, #164]	; (800eaf8 <USBD_SetConfig+0x150>)
 800ea54:	781b      	ldrb	r3, [r3, #0]
 800ea56:	4619      	mov	r1, r3
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f7ff f838 	bl	800dace <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f000 fa06 	bl	800ee70 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ea64:	e042      	b.n	800eaec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ea66:	4b24      	ldr	r3, [pc, #144]	; (800eaf8 <USBD_SetConfig+0x150>)
 800ea68:	781b      	ldrb	r3, [r3, #0]
 800ea6a:	461a      	mov	r2, r3
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	685b      	ldr	r3, [r3, #4]
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d02a      	beq.n	800eaca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	b2db      	uxtb	r3, r3
 800ea7a:	4619      	mov	r1, r3
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f7ff f826 	bl	800dace <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ea82:	4b1d      	ldr	r3, [pc, #116]	; (800eaf8 <USBD_SetConfig+0x150>)
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	461a      	mov	r2, r3
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ea8c:	4b1a      	ldr	r3, [pc, #104]	; (800eaf8 <USBD_SetConfig+0x150>)
 800ea8e:	781b      	ldrb	r3, [r3, #0]
 800ea90:	4619      	mov	r1, r3
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f7fe ffff 	bl	800da96 <USBD_SetClassConfig>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ea9c:	7bfb      	ldrb	r3, [r7, #15]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d00f      	beq.n	800eac2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800eaa2:	6839      	ldr	r1, [r7, #0]
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f000 f918 	bl	800ecda <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	685b      	ldr	r3, [r3, #4]
 800eaae:	b2db      	uxtb	r3, r3
 800eab0:	4619      	mov	r1, r3
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f7ff f80b 	bl	800dace <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2202      	movs	r2, #2
 800eabc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800eac0:	e014      	b.n	800eaec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f000 f9d4 	bl	800ee70 <USBD_CtlSendStatus>
      break;
 800eac8:	e010      	b.n	800eaec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f000 f9d0 	bl	800ee70 <USBD_CtlSendStatus>
      break;
 800ead0:	e00c      	b.n	800eaec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ead2:	6839      	ldr	r1, [r7, #0]
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f000 f900 	bl	800ecda <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eada:	4b07      	ldr	r3, [pc, #28]	; (800eaf8 <USBD_SetConfig+0x150>)
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	4619      	mov	r1, r3
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f7fe fff4 	bl	800dace <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800eae6:	2303      	movs	r3, #3
 800eae8:	73fb      	strb	r3, [r7, #15]
      break;
 800eaea:	bf00      	nop
  }

  return ret;
 800eaec:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3710      	adds	r7, #16
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	200008b4 	.word	0x200008b4

0800eafc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b082      	sub	sp, #8
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	88db      	ldrh	r3, [r3, #6]
 800eb0a:	2b01      	cmp	r3, #1
 800eb0c:	d004      	beq.n	800eb18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800eb0e:	6839      	ldr	r1, [r7, #0]
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f000 f8e2 	bl	800ecda <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800eb16:	e023      	b.n	800eb60 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb1e:	b2db      	uxtb	r3, r3
 800eb20:	2b02      	cmp	r3, #2
 800eb22:	dc02      	bgt.n	800eb2a <USBD_GetConfig+0x2e>
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	dc03      	bgt.n	800eb30 <USBD_GetConfig+0x34>
 800eb28:	e015      	b.n	800eb56 <USBD_GetConfig+0x5a>
 800eb2a:	2b03      	cmp	r3, #3
 800eb2c:	d00b      	beq.n	800eb46 <USBD_GetConfig+0x4a>
 800eb2e:	e012      	b.n	800eb56 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2200      	movs	r2, #0
 800eb34:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	3308      	adds	r3, #8
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	4619      	mov	r1, r3
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f000 f93c 	bl	800edbc <USBD_CtlSendData>
        break;
 800eb44:	e00c      	b.n	800eb60 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	3304      	adds	r3, #4
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	4619      	mov	r1, r3
 800eb4e:	6878      	ldr	r0, [r7, #4]
 800eb50:	f000 f934 	bl	800edbc <USBD_CtlSendData>
        break;
 800eb54:	e004      	b.n	800eb60 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800eb56:	6839      	ldr	r1, [r7, #0]
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f000 f8be 	bl	800ecda <USBD_CtlError>
        break;
 800eb5e:	bf00      	nop
}
 800eb60:	bf00      	nop
 800eb62:	3708      	adds	r7, #8
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b082      	sub	sp, #8
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb78:	b2db      	uxtb	r3, r3
 800eb7a:	3b01      	subs	r3, #1
 800eb7c:	2b02      	cmp	r3, #2
 800eb7e:	d81e      	bhi.n	800ebbe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	88db      	ldrh	r3, [r3, #6]
 800eb84:	2b02      	cmp	r3, #2
 800eb86:	d004      	beq.n	800eb92 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800eb88:	6839      	ldr	r1, [r7, #0]
 800eb8a:	6878      	ldr	r0, [r7, #4]
 800eb8c:	f000 f8a5 	bl	800ecda <USBD_CtlError>
        break;
 800eb90:	e01a      	b.n	800ebc8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2201      	movs	r2, #1
 800eb96:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d005      	beq.n	800ebae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	68db      	ldr	r3, [r3, #12]
 800eba6:	f043 0202 	orr.w	r2, r3, #2
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	330c      	adds	r3, #12
 800ebb2:	2202      	movs	r2, #2
 800ebb4:	4619      	mov	r1, r3
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f000 f900 	bl	800edbc <USBD_CtlSendData>
      break;
 800ebbc:	e004      	b.n	800ebc8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ebbe:	6839      	ldr	r1, [r7, #0]
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f000 f88a 	bl	800ecda <USBD_CtlError>
      break;
 800ebc6:	bf00      	nop
  }
}
 800ebc8:	bf00      	nop
 800ebca:	3708      	adds	r7, #8
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}

0800ebd0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b082      	sub	sp, #8
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	885b      	ldrh	r3, [r3, #2]
 800ebde:	2b01      	cmp	r3, #1
 800ebe0:	d107      	bne.n	800ebf2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f000 f940 	bl	800ee70 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ebf0:	e013      	b.n	800ec1a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	885b      	ldrh	r3, [r3, #2]
 800ebf6:	2b02      	cmp	r3, #2
 800ebf8:	d10b      	bne.n	800ec12 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	889b      	ldrh	r3, [r3, #4]
 800ebfe:	0a1b      	lsrs	r3, r3, #8
 800ec00:	b29b      	uxth	r3, r3
 800ec02:	b2da      	uxtb	r2, r3
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f000 f930 	bl	800ee70 <USBD_CtlSendStatus>
}
 800ec10:	e003      	b.n	800ec1a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ec12:	6839      	ldr	r1, [r7, #0]
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f000 f860 	bl	800ecda <USBD_CtlError>
}
 800ec1a:	bf00      	nop
 800ec1c:	3708      	adds	r7, #8
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}

0800ec22 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec22:	b580      	push	{r7, lr}
 800ec24:	b082      	sub	sp, #8
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	6078      	str	r0, [r7, #4]
 800ec2a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec32:	b2db      	uxtb	r3, r3
 800ec34:	3b01      	subs	r3, #1
 800ec36:	2b02      	cmp	r3, #2
 800ec38:	d80b      	bhi.n	800ec52 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	885b      	ldrh	r3, [r3, #2]
 800ec3e:	2b01      	cmp	r3, #1
 800ec40:	d10c      	bne.n	800ec5c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2200      	movs	r2, #0
 800ec46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	f000 f910 	bl	800ee70 <USBD_CtlSendStatus>
      }
      break;
 800ec50:	e004      	b.n	800ec5c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ec52:	6839      	ldr	r1, [r7, #0]
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f000 f840 	bl	800ecda <USBD_CtlError>
      break;
 800ec5a:	e000      	b.n	800ec5e <USBD_ClrFeature+0x3c>
      break;
 800ec5c:	bf00      	nop
  }
}
 800ec5e:	bf00      	nop
 800ec60:	3708      	adds	r7, #8
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}

0800ec66 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ec66:	b580      	push	{r7, lr}
 800ec68:	b084      	sub	sp, #16
 800ec6a:	af00      	add	r7, sp, #0
 800ec6c:	6078      	str	r0, [r7, #4]
 800ec6e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	781a      	ldrb	r2, [r3, #0]
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	3301      	adds	r3, #1
 800ec80:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	781a      	ldrb	r2, [r3, #0]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	3301      	adds	r3, #1
 800ec8e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ec90:	68f8      	ldr	r0, [r7, #12]
 800ec92:	f7ff fa17 	bl	800e0c4 <SWAPBYTE>
 800ec96:	4603      	mov	r3, r0
 800ec98:	461a      	mov	r2, r3
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	3301      	adds	r3, #1
 800eca2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	3301      	adds	r3, #1
 800eca8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ecaa:	68f8      	ldr	r0, [r7, #12]
 800ecac:	f7ff fa0a 	bl	800e0c4 <SWAPBYTE>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	461a      	mov	r2, r3
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	3301      	adds	r3, #1
 800ecbc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ecc4:	68f8      	ldr	r0, [r7, #12]
 800ecc6:	f7ff f9fd 	bl	800e0c4 <SWAPBYTE>
 800ecca:	4603      	mov	r3, r0
 800eccc:	461a      	mov	r2, r3
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	80da      	strh	r2, [r3, #6]
}
 800ecd2:	bf00      	nop
 800ecd4:	3710      	adds	r7, #16
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}

0800ecda <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecda:	b580      	push	{r7, lr}
 800ecdc:	b082      	sub	sp, #8
 800ecde:	af00      	add	r7, sp, #0
 800ece0:	6078      	str	r0, [r7, #4]
 800ece2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ece4:	2180      	movs	r1, #128	; 0x80
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f004 feca 	bl	8013a80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ecec:	2100      	movs	r1, #0
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f004 fec6 	bl	8013a80 <USBD_LL_StallEP>
}
 800ecf4:	bf00      	nop
 800ecf6:	3708      	adds	r7, #8
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}

0800ecfc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b086      	sub	sp, #24
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	60f8      	str	r0, [r7, #12]
 800ed04:	60b9      	str	r1, [r7, #8]
 800ed06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d036      	beq.n	800ed80 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ed16:	6938      	ldr	r0, [r7, #16]
 800ed18:	f000 f836 	bl	800ed88 <USBD_GetLen>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	3301      	adds	r3, #1
 800ed20:	b29b      	uxth	r3, r3
 800ed22:	005b      	lsls	r3, r3, #1
 800ed24:	b29a      	uxth	r2, r3
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ed2a:	7dfb      	ldrb	r3, [r7, #23]
 800ed2c:	68ba      	ldr	r2, [r7, #8]
 800ed2e:	4413      	add	r3, r2
 800ed30:	687a      	ldr	r2, [r7, #4]
 800ed32:	7812      	ldrb	r2, [r2, #0]
 800ed34:	701a      	strb	r2, [r3, #0]
  idx++;
 800ed36:	7dfb      	ldrb	r3, [r7, #23]
 800ed38:	3301      	adds	r3, #1
 800ed3a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ed3c:	7dfb      	ldrb	r3, [r7, #23]
 800ed3e:	68ba      	ldr	r2, [r7, #8]
 800ed40:	4413      	add	r3, r2
 800ed42:	2203      	movs	r2, #3
 800ed44:	701a      	strb	r2, [r3, #0]
  idx++;
 800ed46:	7dfb      	ldrb	r3, [r7, #23]
 800ed48:	3301      	adds	r3, #1
 800ed4a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ed4c:	e013      	b.n	800ed76 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ed4e:	7dfb      	ldrb	r3, [r7, #23]
 800ed50:	68ba      	ldr	r2, [r7, #8]
 800ed52:	4413      	add	r3, r2
 800ed54:	693a      	ldr	r2, [r7, #16]
 800ed56:	7812      	ldrb	r2, [r2, #0]
 800ed58:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	613b      	str	r3, [r7, #16]
    idx++;
 800ed60:	7dfb      	ldrb	r3, [r7, #23]
 800ed62:	3301      	adds	r3, #1
 800ed64:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ed66:	7dfb      	ldrb	r3, [r7, #23]
 800ed68:	68ba      	ldr	r2, [r7, #8]
 800ed6a:	4413      	add	r3, r2
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	701a      	strb	r2, [r3, #0]
    idx++;
 800ed70:	7dfb      	ldrb	r3, [r7, #23]
 800ed72:	3301      	adds	r3, #1
 800ed74:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	781b      	ldrb	r3, [r3, #0]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d1e7      	bne.n	800ed4e <USBD_GetString+0x52>
 800ed7e:	e000      	b.n	800ed82 <USBD_GetString+0x86>
    return;
 800ed80:	bf00      	nop
  }
}
 800ed82:	3718      	adds	r7, #24
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ed88:	b480      	push	{r7}
 800ed8a:	b085      	sub	sp, #20
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ed90:	2300      	movs	r3, #0
 800ed92:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ed98:	e005      	b.n	800eda6 <USBD_GetLen+0x1e>
  {
    len++;
 800ed9a:	7bfb      	ldrb	r3, [r7, #15]
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	3301      	adds	r3, #1
 800eda4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	781b      	ldrb	r3, [r3, #0]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d1f5      	bne.n	800ed9a <USBD_GetLen+0x12>
  }

  return len;
 800edae:	7bfb      	ldrb	r3, [r7, #15]
}
 800edb0:	4618      	mov	r0, r3
 800edb2:	3714      	adds	r7, #20
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr

0800edbc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b084      	sub	sp, #16
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	60f8      	str	r0, [r7, #12]
 800edc4:	60b9      	str	r1, [r7, #8]
 800edc6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	2202      	movs	r2, #2
 800edcc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	687a      	ldr	r2, [r7, #4]
 800edd4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	687a      	ldr	r2, [r7, #4]
 800edda:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	68ba      	ldr	r2, [r7, #8]
 800ede0:	2100      	movs	r1, #0
 800ede2:	68f8      	ldr	r0, [r7, #12]
 800ede4:	f004 fed6 	bl	8013b94 <USBD_LL_Transmit>

  return USBD_OK;
 800ede8:	2300      	movs	r3, #0
}
 800edea:	4618      	mov	r0, r3
 800edec:	3710      	adds	r7, #16
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}

0800edf2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800edf2:	b580      	push	{r7, lr}
 800edf4:	b084      	sub	sp, #16
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	60f8      	str	r0, [r7, #12]
 800edfa:	60b9      	str	r1, [r7, #8]
 800edfc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	68ba      	ldr	r2, [r7, #8]
 800ee02:	2100      	movs	r1, #0
 800ee04:	68f8      	ldr	r0, [r7, #12]
 800ee06:	f004 fec5 	bl	8013b94 <USBD_LL_Transmit>

  return USBD_OK;
 800ee0a:	2300      	movs	r3, #0
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3710      	adds	r7, #16
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}

0800ee14 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b084      	sub	sp, #16
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	60f8      	str	r0, [r7, #12]
 800ee1c:	60b9      	str	r1, [r7, #8]
 800ee1e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2203      	movs	r2, #3
 800ee24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	687a      	ldr	r2, [r7, #4]
 800ee2c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	687a      	ldr	r2, [r7, #4]
 800ee34:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	68ba      	ldr	r2, [r7, #8]
 800ee3c:	2100      	movs	r1, #0
 800ee3e:	68f8      	ldr	r0, [r7, #12]
 800ee40:	f004 fec9 	bl	8013bd6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ee44:	2300      	movs	r3, #0
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	3710      	adds	r7, #16
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}

0800ee4e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ee4e:	b580      	push	{r7, lr}
 800ee50:	b084      	sub	sp, #16
 800ee52:	af00      	add	r7, sp, #0
 800ee54:	60f8      	str	r0, [r7, #12]
 800ee56:	60b9      	str	r1, [r7, #8]
 800ee58:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	68ba      	ldr	r2, [r7, #8]
 800ee5e:	2100      	movs	r1, #0
 800ee60:	68f8      	ldr	r0, [r7, #12]
 800ee62:	f004 feb8 	bl	8013bd6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ee66:	2300      	movs	r3, #0
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	3710      	adds	r7, #16
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}

0800ee70 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b082      	sub	sp, #8
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2204      	movs	r2, #4
 800ee7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ee80:	2300      	movs	r3, #0
 800ee82:	2200      	movs	r2, #0
 800ee84:	2100      	movs	r1, #0
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f004 fe84 	bl	8013b94 <USBD_LL_Transmit>

  return USBD_OK;
 800ee8c:	2300      	movs	r3, #0
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3708      	adds	r7, #8
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}

0800ee96 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ee96:	b580      	push	{r7, lr}
 800ee98:	b082      	sub	sp, #8
 800ee9a:	af00      	add	r7, sp, #0
 800ee9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2205      	movs	r2, #5
 800eea2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eea6:	2300      	movs	r3, #0
 800eea8:	2200      	movs	r2, #0
 800eeaa:	2100      	movs	r1, #0
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f004 fe92 	bl	8013bd6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eeb2:	2300      	movs	r3, #0
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	3708      	adds	r7, #8
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}

0800eebc <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b088      	sub	sp, #32
 800eec0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800eec2:	2300      	movs	r3, #0
 800eec4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800eec6:	f107 0308 	add.w	r3, r7, #8
 800eeca:	2218      	movs	r2, #24
 800eecc:	2100      	movs	r1, #0
 800eece:	4618      	mov	r0, r3
 800eed0:	f001 f8d8 	bl	8010084 <Osal_MemSet>
  rq.ogf = 0x3f;
 800eed4:	233f      	movs	r3, #63	; 0x3f
 800eed6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800eed8:	2381      	movs	r3, #129	; 0x81
 800eeda:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800eedc:	1dfb      	adds	r3, r7, #7
 800eede:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800eee0:	2301      	movs	r3, #1
 800eee2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800eee4:	f107 0308 	add.w	r3, r7, #8
 800eee8:	2100      	movs	r1, #0
 800eeea:	4618      	mov	r0, r3
 800eeec:	f001 fb54 	bl	8010598 <hci_send_req>
 800eef0:	4603      	mov	r3, r0
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	da01      	bge.n	800eefa <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800eef6:	23ff      	movs	r3, #255	; 0xff
 800eef8:	e000      	b.n	800eefc <aci_gap_set_non_discoverable+0x40>
  return status;
 800eefa:	79fb      	ldrb	r3, [r7, #7]
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	3720      	adds	r7, #32
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800ef04:	b5b0      	push	{r4, r5, r7, lr}
 800ef06:	b0ce      	sub	sp, #312	; 0x138
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	4605      	mov	r5, r0
 800ef0c:	460c      	mov	r4, r1
 800ef0e:	4610      	mov	r0, r2
 800ef10:	4619      	mov	r1, r3
 800ef12:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ef16:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800ef1a:	462a      	mov	r2, r5
 800ef1c:	701a      	strb	r2, [r3, #0]
 800ef1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ef22:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ef26:	4622      	mov	r2, r4
 800ef28:	801a      	strh	r2, [r3, #0]
 800ef2a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ef2e:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800ef32:	4602      	mov	r2, r0
 800ef34:	801a      	strh	r2, [r3, #0]
 800ef36:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ef3a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800ef3e:	460a      	mov	r2, r1
 800ef40:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800ef42:	f107 0310 	add.w	r3, r7, #16
 800ef46:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800ef4a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800ef4e:	3308      	adds	r3, #8
 800ef50:	f107 0210 	add.w	r2, r7, #16
 800ef54:	4413      	add	r3, r2
 800ef56:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800ef5a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800ef5e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800ef62:	4413      	add	r3, r2
 800ef64:	3309      	adds	r3, #9
 800ef66:	f107 0210 	add.w	r2, r7, #16
 800ef6a:	4413      	add	r3, r2
 800ef6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ef70:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ef74:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ef78:	2200      	movs	r2, #0
 800ef7a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800ef82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ef86:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ef8a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800ef8e:	7812      	ldrb	r2, [r2, #0]
 800ef90:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ef92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ef96:	3301      	adds	r3, #1
 800ef98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800ef9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800efa0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800efa4:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800efa8:	8812      	ldrh	r2, [r2, #0]
 800efaa:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800efae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800efb2:	3302      	adds	r3, #2
 800efb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800efb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800efbc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800efc0:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800efc4:	8812      	ldrh	r2, [r2, #0]
 800efc6:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800efca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800efce:	3302      	adds	r3, #2
 800efd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800efd4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800efd8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800efdc:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800efe0:	7812      	ldrb	r2, [r2, #0]
 800efe2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800efe4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800efe8:	3301      	adds	r3, #1
 800efea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800efee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800eff2:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800eff6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800eff8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800effc:	3301      	adds	r3, #1
 800effe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800f002:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f006:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800f00a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800f00c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f010:	3301      	adds	r3, #1
 800f012:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800f016:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f01a:	3308      	adds	r3, #8
 800f01c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800f020:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800f024:	4618      	mov	r0, r3
 800f026:	f001 f81d 	bl	8010064 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800f02a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800f02e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800f032:	4413      	add	r3, r2
 800f034:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800f038:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f03c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800f040:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800f042:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f046:	3301      	adds	r3, #1
 800f048:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800f04c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f050:	3301      	adds	r3, #1
 800f052:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800f056:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800f05a:	4618      	mov	r0, r3
 800f05c:	f001 f802 	bl	8010064 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800f060:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800f064:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800f068:	4413      	add	r3, r2
 800f06a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800f06e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f072:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800f076:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800f078:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f07c:	3302      	adds	r3, #2
 800f07e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800f082:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f086:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800f08a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800f08c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f090:	3302      	adds	r3, #2
 800f092:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f096:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f09a:	2218      	movs	r2, #24
 800f09c:	2100      	movs	r1, #0
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f000 fff0 	bl	8010084 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f0a4:	233f      	movs	r3, #63	; 0x3f
 800f0a6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800f0aa:	2383      	movs	r3, #131	; 0x83
 800f0ac:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f0b0:	f107 0310 	add.w	r3, r7, #16
 800f0b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f0b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f0bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f0c0:	f107 030f 	add.w	r3, r7, #15
 800f0c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f0ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f0d2:	2100      	movs	r1, #0
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f001 fa5f 	bl	8010598 <hci_send_req>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	da01      	bge.n	800f0e4 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800f0e0:	23ff      	movs	r3, #255	; 0xff
 800f0e2:	e004      	b.n	800f0ee <aci_gap_set_discoverable+0x1ea>
  return status;
 800f0e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f0e8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f0ec:	781b      	ldrb	r3, [r3, #0]
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bdb0      	pop	{r4, r5, r7, pc}

0800f0f8 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b0cc      	sub	sp, #304	; 0x130
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	4602      	mov	r2, r0
 800f100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f104:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f108:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800f10a:	f107 0310 	add.w	r3, r7, #16
 800f10e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f116:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f11a:	2200      	movs	r2, #0
 800f11c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f11e:	2300      	movs	r3, #0
 800f120:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800f124:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f128:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f12c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800f130:	7812      	ldrb	r2, [r2, #0]
 800f132:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f134:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f138:	3301      	adds	r3, #1
 800f13a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f13e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f142:	2218      	movs	r2, #24
 800f144:	2100      	movs	r1, #0
 800f146:	4618      	mov	r0, r3
 800f148:	f000 ff9c 	bl	8010084 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f14c:	233f      	movs	r3, #63	; 0x3f
 800f14e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800f152:	2385      	movs	r3, #133	; 0x85
 800f154:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f158:	f107 0310 	add.w	r3, r7, #16
 800f15c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f160:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f164:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f168:	f107 030f 	add.w	r3, r7, #15
 800f16c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f170:	2301      	movs	r3, #1
 800f172:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f176:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f17a:	2100      	movs	r1, #0
 800f17c:	4618      	mov	r0, r3
 800f17e:	f001 fa0b 	bl	8010598 <hci_send_req>
 800f182:	4603      	mov	r3, r0
 800f184:	2b00      	cmp	r3, #0
 800f186:	da01      	bge.n	800f18c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800f188:	23ff      	movs	r3, #255	; 0xff
 800f18a:	e004      	b.n	800f196 <aci_gap_set_io_capability+0x9e>
  return status;
 800f18c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f190:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f194:	781b      	ldrb	r3, [r3, #0]
}
 800f196:	4618      	mov	r0, r3
 800f198:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}

0800f1a0 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800f1a0:	b5b0      	push	{r4, r5, r7, lr}
 800f1a2:	b0cc      	sub	sp, #304	; 0x130
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	4605      	mov	r5, r0
 800f1a8:	460c      	mov	r4, r1
 800f1aa:	4610      	mov	r0, r2
 800f1ac:	4619      	mov	r1, r3
 800f1ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f1b2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f1b6:	462a      	mov	r2, r5
 800f1b8:	701a      	strb	r2, [r3, #0]
 800f1ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f1be:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f1c2:	4622      	mov	r2, r4
 800f1c4:	701a      	strb	r2, [r3, #0]
 800f1c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f1ca:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800f1ce:	4602      	mov	r2, r0
 800f1d0:	701a      	strb	r2, [r3, #0]
 800f1d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f1d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f1da:	460a      	mov	r2, r1
 800f1dc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800f1de:	f107 0310 	add.w	r3, r7, #16
 800f1e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f1e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f1ea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800f1f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f1fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f200:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800f204:	7812      	ldrb	r2, [r2, #0]
 800f206:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f208:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f20c:	3301      	adds	r3, #1
 800f20e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800f212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f216:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f21a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800f21e:	7812      	ldrb	r2, [r2, #0]
 800f220:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f222:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f226:	3301      	adds	r3, #1
 800f228:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800f22c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f230:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f234:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800f238:	7812      	ldrb	r2, [r2, #0]
 800f23a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f23c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f240:	3301      	adds	r3, #1
 800f242:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800f246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f24a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f24e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800f252:	7812      	ldrb	r2, [r2, #0]
 800f254:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800f256:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f25a:	3301      	adds	r3, #1
 800f25c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800f260:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f264:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800f268:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800f26a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f26e:	3301      	adds	r3, #1
 800f270:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800f274:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f278:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800f27c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800f27e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f282:	3301      	adds	r3, #1
 800f284:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800f288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f28c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800f290:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800f292:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f296:	3301      	adds	r3, #1
 800f298:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800f29c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f2a0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800f2a4:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800f2a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f2ac:	3304      	adds	r3, #4
 800f2ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800f2b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f2b6:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800f2ba:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800f2bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f2c0:	3301      	adds	r3, #1
 800f2c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f2c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f2ca:	2218      	movs	r2, #24
 800f2cc:	2100      	movs	r1, #0
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f000 fed8 	bl	8010084 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f2d4:	233f      	movs	r3, #63	; 0x3f
 800f2d6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800f2da:	2386      	movs	r3, #134	; 0x86
 800f2dc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f2e0:	f107 0310 	add.w	r3, r7, #16
 800f2e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f2e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f2ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f2f0:	f107 030f 	add.w	r3, r7, #15
 800f2f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f2fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f302:	2100      	movs	r1, #0
 800f304:	4618      	mov	r0, r3
 800f306:	f001 f947 	bl	8010598 <hci_send_req>
 800f30a:	4603      	mov	r3, r0
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	da01      	bge.n	800f314 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800f310:	23ff      	movs	r3, #255	; 0xff
 800f312:	e004      	b.n	800f31e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800f314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f318:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f31c:	781b      	ldrb	r3, [r3, #0]
}
 800f31e:	4618      	mov	r0, r3
 800f320:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f324:	46bd      	mov	sp, r7
 800f326:	bdb0      	pop	{r4, r5, r7, pc}

0800f328 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b0cc      	sub	sp, #304	; 0x130
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	4602      	mov	r2, r0
 800f330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f334:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f338:	6019      	str	r1, [r3, #0]
 800f33a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f33e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f342:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800f344:	f107 0310 	add.w	r3, r7, #16
 800f348:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f34c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f350:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f354:	2200      	movs	r2, #0
 800f356:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f358:	2300      	movs	r3, #0
 800f35a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800f35e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f362:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f366:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800f36a:	8812      	ldrh	r2, [r2, #0]
 800f36c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f36e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f372:	3302      	adds	r3, #2
 800f374:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800f378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f37c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f380:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800f384:	6812      	ldr	r2, [r2, #0]
 800f386:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800f38a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f38e:	3304      	adds	r3, #4
 800f390:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f394:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f398:	2218      	movs	r2, #24
 800f39a:	2100      	movs	r1, #0
 800f39c:	4618      	mov	r0, r3
 800f39e:	f000 fe71 	bl	8010084 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f3a2:	233f      	movs	r3, #63	; 0x3f
 800f3a4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800f3a8:	2388      	movs	r3, #136	; 0x88
 800f3aa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f3ae:	f107 0310 	add.w	r3, r7, #16
 800f3b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f3b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f3ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f3be:	f107 030f 	add.w	r3, r7, #15
 800f3c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f3c6:	2301      	movs	r3, #1
 800f3c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f3cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f3d0:	2100      	movs	r1, #0
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f001 f8e0 	bl	8010598 <hci_send_req>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	da01      	bge.n	800f3e2 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800f3de:	23ff      	movs	r3, #255	; 0xff
 800f3e0:	e004      	b.n	800f3ec <aci_gap_pass_key_resp+0xc4>
  return status;
 800f3e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f3e6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f3ea:	781b      	ldrb	r3, [r3, #0]
}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}

0800f3f6 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800f3f6:	b590      	push	{r4, r7, lr}
 800f3f8:	b0cd      	sub	sp, #308	; 0x134
 800f3fa:	af00      	add	r7, sp, #0
 800f3fc:	4604      	mov	r4, r0
 800f3fe:	4608      	mov	r0, r1
 800f400:	4611      	mov	r1, r2
 800f402:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f406:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800f40a:	6013      	str	r3, [r2, #0]
 800f40c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f410:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f414:	4622      	mov	r2, r4
 800f416:	701a      	strb	r2, [r3, #0]
 800f418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f41c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f420:	4602      	mov	r2, r0
 800f422:	701a      	strb	r2, [r3, #0]
 800f424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f428:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800f42c:	460a      	mov	r2, r1
 800f42e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800f430:	f107 0310 	add.w	r3, r7, #16
 800f434:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800f438:	f107 0308 	add.w	r3, r7, #8
 800f43c:	2207      	movs	r2, #7
 800f43e:	2100      	movs	r1, #0
 800f440:	4618      	mov	r0, r3
 800f442:	f000 fe1f 	bl	8010084 <Osal_MemSet>
  int index_input = 0;
 800f446:	2300      	movs	r3, #0
 800f448:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800f44c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f450:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f454:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800f458:	7812      	ldrb	r2, [r2, #0]
 800f45a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f45c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f460:	3301      	adds	r3, #1
 800f462:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800f466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f46a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f46e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800f472:	7812      	ldrb	r2, [r2, #0]
 800f474:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f476:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f47a:	3301      	adds	r3, #1
 800f47c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800f480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f484:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f488:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800f48c:	7812      	ldrb	r2, [r2, #0]
 800f48e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f490:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f494:	3301      	adds	r3, #1
 800f496:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f49a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f49e:	2218      	movs	r2, #24
 800f4a0:	2100      	movs	r1, #0
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f000 fdee 	bl	8010084 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f4a8:	233f      	movs	r3, #63	; 0x3f
 800f4aa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800f4ae:	238a      	movs	r3, #138	; 0x8a
 800f4b0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f4b4:	f107 0310 	add.w	r3, r7, #16
 800f4b8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f4bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f4c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800f4c4:	f107 0308 	add.w	r3, r7, #8
 800f4c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800f4cc:	2307      	movs	r3, #7
 800f4ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f4d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f4d6:	2100      	movs	r1, #0
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f001 f85d 	bl	8010598 <hci_send_req>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	da01      	bge.n	800f4e8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800f4e4:	23ff      	movs	r3, #255	; 0xff
 800f4e6:	e02e      	b.n	800f546 <aci_gap_init+0x150>
  if ( resp.Status )
 800f4e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f4ec:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f4f0:	781b      	ldrb	r3, [r3, #0]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d005      	beq.n	800f502 <aci_gap_init+0x10c>
    return resp.Status;
 800f4f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f4fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	e021      	b.n	800f546 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800f502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f506:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f50a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f50e:	b29a      	uxth	r2, r3
 800f510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800f51c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f520:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f524:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f528:	b29a      	uxth	r2, r3
 800f52a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800f52e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800f530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f534:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f538:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800f53c:	b29a      	uxth	r2, r3
 800f53e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800f542:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800f544:	2300      	movs	r3, #0
}
 800f546:	4618      	mov	r0, r3
 800f548:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd90      	pop	{r4, r7, pc}

0800f550 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b0cc      	sub	sp, #304	; 0x130
 800f554:	af00      	add	r7, sp, #0
 800f556:	4602      	mov	r2, r0
 800f558:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f55c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f560:	6019      	str	r1, [r3, #0]
 800f562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f566:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f56a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800f56c:	f107 0310 	add.w	r3, r7, #16
 800f570:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f574:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f578:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f57c:	2200      	movs	r2, #0
 800f57e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f580:	2300      	movs	r3, #0
 800f582:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800f586:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f58a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f58e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800f592:	7812      	ldrb	r2, [r2, #0]
 800f594:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f596:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f59a:	3301      	adds	r3, #1
 800f59c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800f5a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f5a4:	1c58      	adds	r0, r3, #1
 800f5a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f5aa:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f5ae:	781a      	ldrb	r2, [r3, #0]
 800f5b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f5b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f5b8:	6819      	ldr	r1, [r3, #0]
 800f5ba:	f000 fd53 	bl	8010064 <Osal_MemCpy>
  index_input += AdvDataLen;
 800f5be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f5c2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f5c6:	781b      	ldrb	r3, [r3, #0]
 800f5c8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800f5cc:	4413      	add	r3, r2
 800f5ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f5d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f5d6:	2218      	movs	r2, #24
 800f5d8:	2100      	movs	r1, #0
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f000 fd52 	bl	8010084 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f5e0:	233f      	movs	r3, #63	; 0x3f
 800f5e2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800f5e6:	238e      	movs	r3, #142	; 0x8e
 800f5e8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f5ec:	f107 0310 	add.w	r3, r7, #16
 800f5f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f5f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f5f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f5fc:	f107 030f 	add.w	r3, r7, #15
 800f600:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f604:	2301      	movs	r3, #1
 800f606:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f60a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f60e:	2100      	movs	r1, #0
 800f610:	4618      	mov	r0, r3
 800f612:	f000 ffc1 	bl	8010598 <hci_send_req>
 800f616:	4603      	mov	r3, r0
 800f618:	2b00      	cmp	r3, #0
 800f61a:	da01      	bge.n	800f620 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800f61c:	23ff      	movs	r3, #255	; 0xff
 800f61e:	e004      	b.n	800f62a <aci_gap_update_adv_data+0xda>
  return status;
 800f620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f624:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f628:	781b      	ldrb	r3, [r3, #0]
}
 800f62a:	4618      	mov	r0, r3
 800f62c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}

0800f634 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b088      	sub	sp, #32
 800f638:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800f63a:	2300      	movs	r3, #0
 800f63c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f63e:	f107 0308 	add.w	r3, r7, #8
 800f642:	2218      	movs	r2, #24
 800f644:	2100      	movs	r1, #0
 800f646:	4618      	mov	r0, r3
 800f648:	f000 fd1c 	bl	8010084 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f64c:	233f      	movs	r3, #63	; 0x3f
 800f64e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800f650:	2392      	movs	r3, #146	; 0x92
 800f652:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f654:	1dfb      	adds	r3, r7, #7
 800f656:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f658:	2301      	movs	r3, #1
 800f65a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f65c:	f107 0308 	add.w	r3, r7, #8
 800f660:	2100      	movs	r1, #0
 800f662:	4618      	mov	r0, r3
 800f664:	f000 ff98 	bl	8010598 <hci_send_req>
 800f668:	4603      	mov	r3, r0
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	da01      	bge.n	800f672 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800f66e:	23ff      	movs	r3, #255	; 0xff
 800f670:	e000      	b.n	800f674 <aci_gap_configure_whitelist+0x40>
  return status;
 800f672:	79fb      	ldrb	r3, [r7, #7]
}
 800f674:	4618      	mov	r0, r3
 800f676:	3720      	adds	r7, #32
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}

0800f67c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b0cc      	sub	sp, #304	; 0x130
 800f680:	af00      	add	r7, sp, #0
 800f682:	4602      	mov	r2, r0
 800f684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f688:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f68c:	801a      	strh	r2, [r3, #0]
 800f68e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f692:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800f696:	460a      	mov	r2, r1
 800f698:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800f69a:	f107 0310 	add.w	r3, r7, #16
 800f69e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f6a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f6a6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800f6b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f6b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f6bc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800f6c0:	8812      	ldrh	r2, [r2, #0]
 800f6c2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f6c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f6c8:	3302      	adds	r3, #2
 800f6ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800f6ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f6d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f6d6:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800f6da:	7812      	ldrb	r2, [r2, #0]
 800f6dc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f6de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f6e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f6ec:	2218      	movs	r2, #24
 800f6ee:	2100      	movs	r1, #0
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f000 fcc7 	bl	8010084 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f6f6:	233f      	movs	r3, #63	; 0x3f
 800f6f8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800f6fc:	23a5      	movs	r3, #165	; 0xa5
 800f6fe:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f702:	f107 0310 	add.w	r3, r7, #16
 800f706:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f70a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f70e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f712:	f107 030f 	add.w	r3, r7, #15
 800f716:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f71a:	2301      	movs	r3, #1
 800f71c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f720:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f724:	2100      	movs	r1, #0
 800f726:	4618      	mov	r0, r3
 800f728:	f000 ff36 	bl	8010598 <hci_send_req>
 800f72c:	4603      	mov	r3, r0
 800f72e:	2b00      	cmp	r3, #0
 800f730:	da01      	bge.n	800f736 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800f732:	23ff      	movs	r3, #255	; 0xff
 800f734:	e004      	b.n	800f740 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800f736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f73a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f73e:	781b      	ldrb	r3, [r3, #0]
}
 800f740:	4618      	mov	r0, r3
 800f742:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}

0800f74a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800f74a:	b580      	push	{r7, lr}
 800f74c:	b088      	sub	sp, #32
 800f74e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800f750:	2300      	movs	r3, #0
 800f752:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f754:	f107 0308 	add.w	r3, r7, #8
 800f758:	2218      	movs	r2, #24
 800f75a:	2100      	movs	r1, #0
 800f75c:	4618      	mov	r0, r3
 800f75e:	f000 fc91 	bl	8010084 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f762:	233f      	movs	r3, #63	; 0x3f
 800f764:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800f766:	f240 1301 	movw	r3, #257	; 0x101
 800f76a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f76c:	1dfb      	adds	r3, r7, #7
 800f76e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f770:	2301      	movs	r3, #1
 800f772:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f774:	f107 0308 	add.w	r3, r7, #8
 800f778:	2100      	movs	r1, #0
 800f77a:	4618      	mov	r0, r3
 800f77c:	f000 ff0c 	bl	8010598 <hci_send_req>
 800f780:	4603      	mov	r3, r0
 800f782:	2b00      	cmp	r3, #0
 800f784:	da01      	bge.n	800f78a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800f786:	23ff      	movs	r3, #255	; 0xff
 800f788:	e000      	b.n	800f78c <aci_gatt_init+0x42>
  return status;
 800f78a:	79fb      	ldrb	r3, [r7, #7]
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3720      	adds	r7, #32
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}

0800f794 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800f794:	b590      	push	{r4, r7, lr}
 800f796:	b0cf      	sub	sp, #316	; 0x13c
 800f798:	af00      	add	r7, sp, #0
 800f79a:	4604      	mov	r4, r0
 800f79c:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800f7a0:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800f7a4:	6001      	str	r1, [r0, #0]
 800f7a6:	4610      	mov	r0, r2
 800f7a8:	4619      	mov	r1, r3
 800f7aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f7ae:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800f7b2:	4622      	mov	r2, r4
 800f7b4:	701a      	strb	r2, [r3, #0]
 800f7b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f7ba:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800f7be:	4602      	mov	r2, r0
 800f7c0:	701a      	strb	r2, [r3, #0]
 800f7c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f7c6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800f7ca:	460a      	mov	r2, r1
 800f7cc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800f7ce:	f107 0310 	add.w	r3, r7, #16
 800f7d2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800f7d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f7da:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800f7de:	781b      	ldrb	r3, [r3, #0]
 800f7e0:	2b01      	cmp	r3, #1
 800f7e2:	d00a      	beq.n	800f7fa <aci_gatt_add_service+0x66>
 800f7e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f7e8:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800f7ec:	781b      	ldrb	r3, [r3, #0]
 800f7ee:	2b02      	cmp	r3, #2
 800f7f0:	d101      	bne.n	800f7f6 <aci_gatt_add_service+0x62>
 800f7f2:	2311      	movs	r3, #17
 800f7f4:	e002      	b.n	800f7fc <aci_gatt_add_service+0x68>
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	e000      	b.n	800f7fc <aci_gatt_add_service+0x68>
 800f7fa:	2303      	movs	r3, #3
 800f7fc:	f107 0210 	add.w	r2, r7, #16
 800f800:	4413      	add	r3, r2
 800f802:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800f806:	f107 030c 	add.w	r3, r7, #12
 800f80a:	2203      	movs	r2, #3
 800f80c:	2100      	movs	r1, #0
 800f80e:	4618      	mov	r0, r3
 800f810:	f000 fc38 	bl	8010084 <Osal_MemSet>
  int index_input = 0;
 800f814:	2300      	movs	r3, #0
 800f816:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800f81a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f81e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800f822:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800f826:	7812      	ldrb	r2, [r2, #0]
 800f828:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f82a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f82e:	3301      	adds	r3, #1
 800f830:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800f834:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f838:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800f83c:	781b      	ldrb	r3, [r3, #0]
 800f83e:	2b01      	cmp	r3, #1
 800f840:	d002      	beq.n	800f848 <aci_gatt_add_service+0xb4>
 800f842:	2b02      	cmp	r3, #2
 800f844:	d004      	beq.n	800f850 <aci_gatt_add_service+0xbc>
 800f846:	e007      	b.n	800f858 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800f848:	2302      	movs	r3, #2
 800f84a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800f84e:	e005      	b.n	800f85c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800f850:	2310      	movs	r3, #16
 800f852:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800f856:	e001      	b.n	800f85c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800f858:	2397      	movs	r3, #151	; 0x97
 800f85a:	e06c      	b.n	800f936 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800f85c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f860:	1c58      	adds	r0, r3, #1
 800f862:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800f866:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f86a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800f86e:	6819      	ldr	r1, [r3, #0]
 800f870:	f000 fbf8 	bl	8010064 <Osal_MemCpy>
    index_input += size;
 800f874:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800f878:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800f87c:	4413      	add	r3, r2
 800f87e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800f882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f886:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800f88a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800f88e:	7812      	ldrb	r2, [r2, #0]
 800f890:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800f892:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f896:	3301      	adds	r3, #1
 800f898:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800f89c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f8a0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800f8a4:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800f8a8:	7812      	ldrb	r2, [r2, #0]
 800f8aa:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800f8ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f8b0:	3301      	adds	r3, #1
 800f8b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f8b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f8ba:	2218      	movs	r2, #24
 800f8bc:	2100      	movs	r1, #0
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f000 fbe0 	bl	8010084 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f8c4:	233f      	movs	r3, #63	; 0x3f
 800f8c6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800f8ca:	f44f 7381 	mov.w	r3, #258	; 0x102
 800f8ce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f8d2:	f107 0310 	add.w	r3, r7, #16
 800f8d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f8da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f8de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800f8e2:	f107 030c 	add.w	r3, r7, #12
 800f8e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800f8ea:	2303      	movs	r3, #3
 800f8ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f8f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f8f4:	2100      	movs	r1, #0
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f000 fe4e 	bl	8010598 <hci_send_req>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	da01      	bge.n	800f906 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800f902:	23ff      	movs	r3, #255	; 0xff
 800f904:	e017      	b.n	800f936 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800f906:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f90a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f90e:	781b      	ldrb	r3, [r3, #0]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d005      	beq.n	800f920 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800f914:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f918:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f91c:	781b      	ldrb	r3, [r3, #0]
 800f91e:	e00a      	b.n	800f936 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800f920:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f924:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f928:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f92c:	b29a      	uxth	r2, r3
 800f92e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f932:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800f934:	2300      	movs	r3, #0
}
 800f936:	4618      	mov	r0, r3
 800f938:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd90      	pop	{r4, r7, pc}

0800f940 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800f940:	b590      	push	{r4, r7, lr}
 800f942:	b0d1      	sub	sp, #324	; 0x144
 800f944:	af00      	add	r7, sp, #0
 800f946:	4604      	mov	r4, r0
 800f948:	4608      	mov	r0, r1
 800f94a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800f94e:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800f952:	600a      	str	r2, [r1, #0]
 800f954:	4619      	mov	r1, r3
 800f956:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f95a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800f95e:	4622      	mov	r2, r4
 800f960:	801a      	strh	r2, [r3, #0]
 800f962:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f966:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800f96a:	4602      	mov	r2, r0
 800f96c:	701a      	strb	r2, [r3, #0]
 800f96e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f972:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800f976:	460a      	mov	r2, r1
 800f978:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800f97a:	f107 0318 	add.w	r3, r7, #24
 800f97e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800f982:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f986:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	2b01      	cmp	r3, #1
 800f98e:	d00a      	beq.n	800f9a6 <aci_gatt_add_char+0x66>
 800f990:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f994:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800f998:	781b      	ldrb	r3, [r3, #0]
 800f99a:	2b02      	cmp	r3, #2
 800f99c:	d101      	bne.n	800f9a2 <aci_gatt_add_char+0x62>
 800f99e:	2313      	movs	r3, #19
 800f9a0:	e002      	b.n	800f9a8 <aci_gatt_add_char+0x68>
 800f9a2:	2303      	movs	r3, #3
 800f9a4:	e000      	b.n	800f9a8 <aci_gatt_add_char+0x68>
 800f9a6:	2305      	movs	r3, #5
 800f9a8:	f107 0218 	add.w	r2, r7, #24
 800f9ac:	4413      	add	r3, r2
 800f9ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800f9b2:	f107 0314 	add.w	r3, r7, #20
 800f9b6:	2203      	movs	r2, #3
 800f9b8:	2100      	movs	r1, #0
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f000 fb62 	bl	8010084 <Osal_MemSet>
  int index_input = 0;
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800f9c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f9ca:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800f9ce:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800f9d2:	8812      	ldrh	r2, [r2, #0]
 800f9d4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f9d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f9da:	3302      	adds	r3, #2
 800f9dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800f9e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f9e4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800f9e8:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800f9ec:	7812      	ldrb	r2, [r2, #0]
 800f9ee:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f9f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f9f4:	3301      	adds	r3, #1
 800f9f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800f9fa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f9fe:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800fa02:	781b      	ldrb	r3, [r3, #0]
 800fa04:	2b01      	cmp	r3, #1
 800fa06:	d002      	beq.n	800fa0e <aci_gatt_add_char+0xce>
 800fa08:	2b02      	cmp	r3, #2
 800fa0a:	d004      	beq.n	800fa16 <aci_gatt_add_char+0xd6>
 800fa0c:	e007      	b.n	800fa1e <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800fa0e:	2302      	movs	r3, #2
 800fa10:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800fa14:	e005      	b.n	800fa22 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800fa16:	2310      	movs	r3, #16
 800fa18:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800fa1c:	e001      	b.n	800fa22 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800fa1e:	2397      	movs	r3, #151	; 0x97
 800fa20:	e091      	b.n	800fb46 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800fa22:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800fa26:	1cd8      	adds	r0, r3, #3
 800fa28:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800fa2c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fa30:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800fa34:	6819      	ldr	r1, [r3, #0]
 800fa36:	f000 fb15 	bl	8010064 <Osal_MemCpy>
    index_input += size;
 800fa3a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800fa3e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800fa42:	4413      	add	r3, r2
 800fa44:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800fa48:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800fa4c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800fa50:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800fa54:	8812      	ldrh	r2, [r2, #0]
 800fa56:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800fa58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800fa5c:	3302      	adds	r3, #2
 800fa5e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800fa62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800fa66:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800fa6a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800fa6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800fa70:	3301      	adds	r3, #1
 800fa72:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800fa76:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800fa7a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800fa7e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800fa80:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800fa84:	3301      	adds	r3, #1
 800fa86:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800fa8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800fa8e:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800fa92:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800fa94:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800fa98:	3301      	adds	r3, #1
 800fa9a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800fa9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800faa2:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800faa6:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800faa8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800faac:	3301      	adds	r3, #1
 800faae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800fab2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800fab6:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800faba:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800fabc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800fac0:	3301      	adds	r3, #1
 800fac2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fac6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800faca:	2218      	movs	r2, #24
 800facc:	2100      	movs	r1, #0
 800face:	4618      	mov	r0, r3
 800fad0:	f000 fad8 	bl	8010084 <Osal_MemSet>
  rq.ogf = 0x3f;
 800fad4:	233f      	movs	r3, #63	; 0x3f
 800fad6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800fada:	f44f 7382 	mov.w	r3, #260	; 0x104
 800fade:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800fae2:	f107 0318 	add.w	r3, r7, #24
 800fae6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800faea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800faee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800faf2:	f107 0314 	add.w	r3, r7, #20
 800faf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800fafa:	2303      	movs	r3, #3
 800fafc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fb00:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800fb04:	2100      	movs	r1, #0
 800fb06:	4618      	mov	r0, r3
 800fb08:	f000 fd46 	bl	8010598 <hci_send_req>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	da01      	bge.n	800fb16 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800fb12:	23ff      	movs	r3, #255	; 0xff
 800fb14:	e017      	b.n	800fb46 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800fb16:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fb1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fb1e:	781b      	ldrb	r3, [r3, #0]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d005      	beq.n	800fb30 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800fb24:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fb28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fb2c:	781b      	ldrb	r3, [r3, #0]
 800fb2e:	e00a      	b.n	800fb46 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800fb30:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fb34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fb38:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fb3c:	b29a      	uxth	r2, r3
 800fb3e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800fb42:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800fb44:	2300      	movs	r3, #0
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd90      	pop	{r4, r7, pc}

0800fb50 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800fb50:	b5b0      	push	{r4, r5, r7, lr}
 800fb52:	b0cc      	sub	sp, #304	; 0x130
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	4605      	mov	r5, r0
 800fb58:	460c      	mov	r4, r1
 800fb5a:	4610      	mov	r0, r2
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb62:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fb66:	462a      	mov	r2, r5
 800fb68:	801a      	strh	r2, [r3, #0]
 800fb6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fb72:	4622      	mov	r2, r4
 800fb74:	801a      	strh	r2, [r3, #0]
 800fb76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb7a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800fb7e:	4602      	mov	r2, r0
 800fb80:	701a      	strb	r2, [r3, #0]
 800fb82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb86:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800fb8a:	460a      	mov	r2, r1
 800fb8c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800fb8e:	f107 0310 	add.w	r3, r7, #16
 800fb92:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800fb96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb9a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fb9e:	2200      	movs	r2, #0
 800fba0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fba2:	2300      	movs	r3, #0
 800fba4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800fba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fbac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fbb0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800fbb4:	8812      	ldrh	r2, [r2, #0]
 800fbb6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800fbb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fbbc:	3302      	adds	r3, #2
 800fbbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800fbc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fbc6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fbca:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800fbce:	8812      	ldrh	r2, [r2, #0]
 800fbd0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800fbd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fbd6:	3302      	adds	r3, #2
 800fbd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800fbdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fbe0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fbe4:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800fbe8:	7812      	ldrb	r2, [r2, #0]
 800fbea:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800fbec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fbf0:	3301      	adds	r3, #1
 800fbf2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800fbf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fbfa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fbfe:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800fc02:	7812      	ldrb	r2, [r2, #0]
 800fc04:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800fc06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fc0a:	3301      	adds	r3, #1
 800fc0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800fc10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fc14:	1d98      	adds	r0, r3, #6
 800fc16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fc1a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800fc1e:	781b      	ldrb	r3, [r3, #0]
 800fc20:	461a      	mov	r2, r3
 800fc22:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800fc26:	f000 fa1d 	bl	8010064 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800fc2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fc2e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800fc32:	781b      	ldrb	r3, [r3, #0]
 800fc34:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800fc38:	4413      	add	r3, r2
 800fc3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fc3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fc42:	2218      	movs	r2, #24
 800fc44:	2100      	movs	r1, #0
 800fc46:	4618      	mov	r0, r3
 800fc48:	f000 fa1c 	bl	8010084 <Osal_MemSet>
  rq.ogf = 0x3f;
 800fc4c:	233f      	movs	r3, #63	; 0x3f
 800fc4e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800fc52:	f44f 7383 	mov.w	r3, #262	; 0x106
 800fc56:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800fc5a:	f107 0310 	add.w	r3, r7, #16
 800fc5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800fc62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fc66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800fc6a:	f107 030f 	add.w	r3, r7, #15
 800fc6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800fc72:	2301      	movs	r3, #1
 800fc74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fc78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fc7c:	2100      	movs	r1, #0
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f000 fc8a 	bl	8010598 <hci_send_req>
 800fc84:	4603      	mov	r3, r0
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	da01      	bge.n	800fc8e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800fc8a:	23ff      	movs	r3, #255	; 0xff
 800fc8c:	e004      	b.n	800fc98 <aci_gatt_update_char_value+0x148>
  return status;
 800fc8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fc92:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fc96:	781b      	ldrb	r3, [r3, #0]
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bdb0      	pop	{r4, r5, r7, pc}

0800fca2 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800fca2:	b580      	push	{r7, lr}
 800fca4:	b0cc      	sub	sp, #304	; 0x130
 800fca6:	af00      	add	r7, sp, #0
 800fca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fcac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fcb0:	601a      	str	r2, [r3, #0]
 800fcb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fcb6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800fcba:	4602      	mov	r2, r0
 800fcbc:	701a      	strb	r2, [r3, #0]
 800fcbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fcc2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fcc6:	460a      	mov	r2, r1
 800fcc8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800fcca:	f107 0310 	add.w	r3, r7, #16
 800fcce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800fcd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fcd6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fcda:	2200      	movs	r2, #0
 800fcdc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fcde:	2300      	movs	r3, #0
 800fce0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800fce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fce8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fcec:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800fcf0:	7812      	ldrb	r2, [r2, #0]
 800fcf2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fcf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fcf8:	3301      	adds	r3, #1
 800fcfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800fcfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fd02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fd06:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800fd0a:	7812      	ldrb	r2, [r2, #0]
 800fd0c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800fd0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fd12:	3301      	adds	r3, #1
 800fd14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800fd18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fd1c:	1c98      	adds	r0, r3, #2
 800fd1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fd22:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fd26:	781a      	ldrb	r2, [r3, #0]
 800fd28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fd2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fd30:	6819      	ldr	r1, [r3, #0]
 800fd32:	f000 f997 	bl	8010064 <Osal_MemCpy>
  index_input += Length;
 800fd36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fd3a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fd3e:	781b      	ldrb	r3, [r3, #0]
 800fd40:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800fd44:	4413      	add	r3, r2
 800fd46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fd4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fd4e:	2218      	movs	r2, #24
 800fd50:	2100      	movs	r1, #0
 800fd52:	4618      	mov	r0, r3
 800fd54:	f000 f996 	bl	8010084 <Osal_MemSet>
  rq.ogf = 0x3f;
 800fd58:	233f      	movs	r3, #63	; 0x3f
 800fd5a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800fd5e:	230c      	movs	r3, #12
 800fd60:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800fd64:	f107 0310 	add.w	r3, r7, #16
 800fd68:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800fd6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fd70:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800fd74:	f107 030f 	add.w	r3, r7, #15
 800fd78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fd82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fd86:	2100      	movs	r1, #0
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f000 fc05 	bl	8010598 <hci_send_req>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	da01      	bge.n	800fd98 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800fd94:	23ff      	movs	r3, #255	; 0xff
 800fd96:	e004      	b.n	800fda2 <aci_hal_write_config_data+0x100>
  return status;
 800fd98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fd9c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fda0:	781b      	ldrb	r3, [r3, #0]
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}

0800fdac <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b0cc      	sub	sp, #304	; 0x130
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	4602      	mov	r2, r0
 800fdb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fdb8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800fdbc:	701a      	strb	r2, [r3, #0]
 800fdbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fdc2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fdc6:	460a      	mov	r2, r1
 800fdc8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800fdca:	f107 0310 	add.w	r3, r7, #16
 800fdce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800fdd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fdd6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fdda:	2200      	movs	r2, #0
 800fddc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fdde:	2300      	movs	r3, #0
 800fde0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800fde4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fde8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fdec:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800fdf0:	7812      	ldrb	r2, [r2, #0]
 800fdf2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fdf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fdf8:	3301      	adds	r3, #1
 800fdfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800fdfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fe02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fe06:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800fe0a:	7812      	ldrb	r2, [r2, #0]
 800fe0c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800fe0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fe12:	3301      	adds	r3, #1
 800fe14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fe18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fe1c:	2218      	movs	r2, #24
 800fe1e:	2100      	movs	r1, #0
 800fe20:	4618      	mov	r0, r3
 800fe22:	f000 f92f 	bl	8010084 <Osal_MemSet>
  rq.ogf = 0x3f;
 800fe26:	233f      	movs	r3, #63	; 0x3f
 800fe28:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800fe2c:	230f      	movs	r3, #15
 800fe2e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800fe32:	f107 0310 	add.w	r3, r7, #16
 800fe36:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800fe3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fe3e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800fe42:	f107 030f 	add.w	r3, r7, #15
 800fe46:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fe50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fe54:	2100      	movs	r1, #0
 800fe56:	4618      	mov	r0, r3
 800fe58:	f000 fb9e 	bl	8010598 <hci_send_req>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	da01      	bge.n	800fe66 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800fe62:	23ff      	movs	r3, #255	; 0xff
 800fe64:	e004      	b.n	800fe70 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800fe66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fe6a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fe6e:	781b      	ldrb	r3, [r3, #0]
}
 800fe70:	4618      	mov	r0, r3
 800fe72:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}

0800fe7a <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800fe7a:	b580      	push	{r7, lr}
 800fe7c:	b0cc      	sub	sp, #304	; 0x130
 800fe7e:	af00      	add	r7, sp, #0
 800fe80:	4602      	mov	r2, r0
 800fe82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fe86:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fe8a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800fe8c:	f107 0310 	add.w	r3, r7, #16
 800fe90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800fe94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fe98:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fea0:	2300      	movs	r3, #0
 800fea2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800fea6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800feaa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800feae:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800feb2:	8812      	ldrh	r2, [r2, #0]
 800feb4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800feb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800feba:	3302      	adds	r3, #2
 800febc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fec0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fec4:	2218      	movs	r2, #24
 800fec6:	2100      	movs	r1, #0
 800fec8:	4618      	mov	r0, r3
 800feca:	f000 f8db 	bl	8010084 <Osal_MemSet>
  rq.ogf = 0x3f;
 800fece:	233f      	movs	r3, #63	; 0x3f
 800fed0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800fed4:	2318      	movs	r3, #24
 800fed6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800feda:	f107 0310 	add.w	r3, r7, #16
 800fede:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800fee2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fee6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800feea:	f107 030f 	add.w	r3, r7, #15
 800feee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800fef2:	2301      	movs	r3, #1
 800fef4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fef8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fefc:	2100      	movs	r1, #0
 800fefe:	4618      	mov	r0, r3
 800ff00:	f000 fb4a 	bl	8010598 <hci_send_req>
 800ff04:	4603      	mov	r3, r0
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	da01      	bge.n	800ff0e <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800ff0a:	23ff      	movs	r3, #255	; 0xff
 800ff0c:	e004      	b.n	800ff18 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800ff0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ff12:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ff16:	781b      	ldrb	r3, [r3, #0]
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}

0800ff22 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800ff22:	b580      	push	{r7, lr}
 800ff24:	b088      	sub	sp, #32
 800ff26:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ff28:	2300      	movs	r3, #0
 800ff2a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ff2c:	f107 0308 	add.w	r3, r7, #8
 800ff30:	2218      	movs	r2, #24
 800ff32:	2100      	movs	r1, #0
 800ff34:	4618      	mov	r0, r3
 800ff36:	f000 f8a5 	bl	8010084 <Osal_MemSet>
  rq.ogf = 0x03;
 800ff3a:	2303      	movs	r3, #3
 800ff3c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800ff3e:	2303      	movs	r3, #3
 800ff40:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ff42:	1dfb      	adds	r3, r7, #7
 800ff44:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ff46:	2301      	movs	r3, #1
 800ff48:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ff4a:	f107 0308 	add.w	r3, r7, #8
 800ff4e:	2100      	movs	r1, #0
 800ff50:	4618      	mov	r0, r3
 800ff52:	f000 fb21 	bl	8010598 <hci_send_req>
 800ff56:	4603      	mov	r3, r0
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	da01      	bge.n	800ff60 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ff5c:	23ff      	movs	r3, #255	; 0xff
 800ff5e:	e000      	b.n	800ff62 <hci_reset+0x40>
  return status;
 800ff60:	79fb      	ldrb	r3, [r7, #7]
}
 800ff62:	4618      	mov	r0, r3
 800ff64:	3720      	adds	r7, #32
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}

0800ff6a <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800ff6a:	b590      	push	{r4, r7, lr}
 800ff6c:	b0cd      	sub	sp, #308	; 0x134
 800ff6e:	af00      	add	r7, sp, #0
 800ff70:	4604      	mov	r4, r0
 800ff72:	4608      	mov	r0, r1
 800ff74:	4611      	mov	r1, r2
 800ff76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ff7a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ff7e:	4622      	mov	r2, r4
 800ff80:	701a      	strb	r2, [r3, #0]
 800ff82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ff86:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ff8a:	4602      	mov	r2, r0
 800ff8c:	701a      	strb	r2, [r3, #0]
 800ff8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ff92:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800ff96:	460a      	mov	r2, r1
 800ff98:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800ff9a:	f107 0310 	add.w	r3, r7, #16
 800ff9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ffa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ffa6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ffaa:	2200      	movs	r2, #0
 800ffac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800ffb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ffb8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ffbc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800ffc0:	7812      	ldrb	r2, [r2, #0]
 800ffc2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ffc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ffc8:	3301      	adds	r3, #1
 800ffca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800ffce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ffd2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ffd6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ffda:	7812      	ldrb	r2, [r2, #0]
 800ffdc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ffde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ffe2:	3301      	adds	r3, #1
 800ffe4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800ffe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ffec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fff0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800fff4:	7812      	ldrb	r2, [r2, #0]
 800fff6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800fff8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fffc:	3301      	adds	r3, #1
 800fffe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010002:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010006:	2218      	movs	r2, #24
 8010008:	2100      	movs	r1, #0
 801000a:	4618      	mov	r0, r3
 801000c:	f000 f83a 	bl	8010084 <Osal_MemSet>
  rq.ogf = 0x08;
 8010010:	2308      	movs	r3, #8
 8010012:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8010016:	2331      	movs	r3, #49	; 0x31
 8010018:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801001c:	f107 0310 	add.w	r3, r7, #16
 8010020:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8010024:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010028:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801002c:	f107 030f 	add.w	r3, r7, #15
 8010030:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8010034:	2301      	movs	r3, #1
 8010036:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801003a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801003e:	2100      	movs	r1, #0
 8010040:	4618      	mov	r0, r3
 8010042:	f000 faa9 	bl	8010598 <hci_send_req>
 8010046:	4603      	mov	r3, r0
 8010048:	2b00      	cmp	r3, #0
 801004a:	da01      	bge.n	8010050 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 801004c:	23ff      	movs	r3, #255	; 0xff
 801004e:	e004      	b.n	801005a <hci_le_set_default_phy+0xf0>
  return status;
 8010050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010054:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010058:	781b      	ldrb	r3, [r3, #0]
}
 801005a:	4618      	mov	r0, r3
 801005c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8010060:	46bd      	mov	sp, r7
 8010062:	bd90      	pop	{r4, r7, pc}

08010064 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b084      	sub	sp, #16
 8010068:	af00      	add	r7, sp, #0
 801006a:	60f8      	str	r0, [r7, #12]
 801006c:	60b9      	str	r1, [r7, #8]
 801006e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8010070:	687a      	ldr	r2, [r7, #4]
 8010072:	68b9      	ldr	r1, [r7, #8]
 8010074:	68f8      	ldr	r0, [r7, #12]
 8010076:	f004 f961 	bl	801433c <memcpy>
 801007a:	4603      	mov	r3, r0
}
 801007c:	4618      	mov	r0, r3
 801007e:	3710      	adds	r7, #16
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}

08010084 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b084      	sub	sp, #16
 8010088:	af00      	add	r7, sp, #0
 801008a:	60f8      	str	r0, [r7, #12]
 801008c:	60b9      	str	r1, [r7, #8]
 801008e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8010090:	687a      	ldr	r2, [r7, #4]
 8010092:	68b9      	ldr	r1, [r7, #8]
 8010094:	68f8      	ldr	r0, [r7, #12]
 8010096:	f004 f95f 	bl	8014358 <memset>
 801009a:	4603      	mov	r3, r0
}
 801009c:	4618      	mov	r0, r3
 801009e:	3710      	adds	r7, #16
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}

080100a4 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80100a4:	b480      	push	{r7}
 80100a6:	af00      	add	r7, sp, #0
  return;
 80100a8:	bf00      	nop
}
 80100aa:	46bd      	mov	sp, r7
 80100ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b0:	4770      	bx	lr

080100b2 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80100b2:	b480      	push	{r7}
 80100b4:	af00      	add	r7, sp, #0
  return;
 80100b6:	bf00      	nop
}
 80100b8:	46bd      	mov	sp, r7
 80100ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100be:	4770      	bx	lr

080100c0 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80100c0:	b480      	push	{r7}
 80100c2:	af00      	add	r7, sp, #0
  return;
 80100c4:	bf00      	nop
}
 80100c6:	46bd      	mov	sp, r7
 80100c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100cc:	4770      	bx	lr

080100ce <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80100ce:	b480      	push	{r7}
 80100d0:	af00      	add	r7, sp, #0
  return;
 80100d2:	bf00      	nop
}
 80100d4:	46bd      	mov	sp, r7
 80100d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100da:	4770      	bx	lr

080100dc <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80100dc:	b480      	push	{r7}
 80100de:	af00      	add	r7, sp, #0
  return;
 80100e0:	bf00      	nop
}
 80100e2:	46bd      	mov	sp, r7
 80100e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e8:	4770      	bx	lr

080100ea <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80100ea:	b480      	push	{r7}
 80100ec:	af00      	add	r7, sp, #0
  return;
 80100ee:	bf00      	nop
}
 80100f0:	46bd      	mov	sp, r7
 80100f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f6:	4770      	bx	lr

080100f8 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80100f8:	b480      	push	{r7}
 80100fa:	af00      	add	r7, sp, #0
  return;
 80100fc:	bf00      	nop
}
 80100fe:	46bd      	mov	sp, r7
 8010100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010104:	4770      	bx	lr

08010106 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8010106:	b480      	push	{r7}
 8010108:	af00      	add	r7, sp, #0
  return;
 801010a:	bf00      	nop
}
 801010c:	46bd      	mov	sp, r7
 801010e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010112:	4770      	bx	lr

08010114 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8010114:	b480      	push	{r7}
 8010116:	af00      	add	r7, sp, #0
  return;
 8010118:	bf00      	nop
}
 801011a:	46bd      	mov	sp, r7
 801011c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010120:	4770      	bx	lr

08010122 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8010122:	b480      	push	{r7}
 8010124:	af00      	add	r7, sp, #0
  return;
 8010126:	bf00      	nop
}
 8010128:	46bd      	mov	sp, r7
 801012a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012e:	4770      	bx	lr

08010130 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8010130:	b480      	push	{r7}
 8010132:	af00      	add	r7, sp, #0
  return;
 8010134:	bf00      	nop
}
 8010136:	46bd      	mov	sp, r7
 8010138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013c:	4770      	bx	lr

0801013e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 801013e:	b480      	push	{r7}
 8010140:	af00      	add	r7, sp, #0
  return;
 8010142:	bf00      	nop
}
 8010144:	46bd      	mov	sp, r7
 8010146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014a:	4770      	bx	lr

0801014c <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 801014c:	b480      	push	{r7}
 801014e:	af00      	add	r7, sp, #0
  return;
 8010150:	bf00      	nop
}
 8010152:	46bd      	mov	sp, r7
 8010154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010158:	4770      	bx	lr

0801015a <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 801015a:	b480      	push	{r7}
 801015c:	af00      	add	r7, sp, #0
  return;
 801015e:	bf00      	nop
}
 8010160:	46bd      	mov	sp, r7
 8010162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010166:	4770      	bx	lr

08010168 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8010168:	b480      	push	{r7}
 801016a:	af00      	add	r7, sp, #0
  return;
 801016c:	bf00      	nop
}
 801016e:	46bd      	mov	sp, r7
 8010170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010174:	4770      	bx	lr

08010176 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8010176:	b480      	push	{r7}
 8010178:	af00      	add	r7, sp, #0
  return;
 801017a:	bf00      	nop
}
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr

08010184 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8010184:	b480      	push	{r7}
 8010186:	af00      	add	r7, sp, #0
  return;
 8010188:	bf00      	nop
}
 801018a:	46bd      	mov	sp, r7
 801018c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010190:	4770      	bx	lr
	...

08010194 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8010194:	b580      	push	{r7, lr}
 8010196:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8010198:	4b04      	ldr	r3, [pc, #16]	; (80101ac <SVCCTL_Init+0x18>)
 801019a:	2200      	movs	r2, #0
 801019c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 801019e:	4b04      	ldr	r3, [pc, #16]	; (80101b0 <SVCCTL_Init+0x1c>)
 80101a0:	2200      	movs	r2, #0
 80101a2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80101a4:	f000 f806 	bl	80101b4 <SVCCTL_SvcInit>

  return;
 80101a8:	bf00      	nop
}
 80101aa:	bd80      	pop	{r7, pc}
 80101ac:	200001d0 	.word	0x200001d0
 80101b0:	200001f0 	.word	0x200001f0

080101b4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	af00      	add	r7, sp, #0
  BAS_Init();
 80101b8:	f7ff ff74 	bl	80100a4 <BAS_Init>

  BLS_Init();
 80101bc:	f7ff ff79 	bl	80100b2 <BLS_Init>

  CRS_STM_Init();
 80101c0:	f7ff ff7e 	bl	80100c0 <CRS_STM_Init>

  DIS_Init();
 80101c4:	f7ff ff83 	bl	80100ce <DIS_Init>

  EDS_STM_Init();
 80101c8:	f7ff ff88 	bl	80100dc <EDS_STM_Init>

  HIDS_Init();
 80101cc:	f7ff ff8d 	bl	80100ea <HIDS_Init>

  HRS_Init();
 80101d0:	f7ff ff92 	bl	80100f8 <HRS_Init>

  HTS_Init();
 80101d4:	f7ff ff97 	bl	8010106 <HTS_Init>

  IAS_Init();
 80101d8:	f7ff ff9c 	bl	8010114 <IAS_Init>

  LLS_Init();
 80101dc:	f7ff ffa1 	bl	8010122 <LLS_Init>

  TPS_Init();
 80101e0:	f7ff ffa6 	bl	8010130 <TPS_Init>

  MOTENV_STM_Init();
 80101e4:	f7ff ffab 	bl	801013e <MOTENV_STM_Init>

  P2PS_STM_Init();
 80101e8:	f7ff ffb0 	bl	801014c <P2PS_STM_Init>

  ZDD_STM_Init();
 80101ec:	f7ff ffb5 	bl	801015a <ZDD_STM_Init>

  OTAS_STM_Init();
 80101f0:	f7ff ffba 	bl	8010168 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80101f4:	f7ff ffc6 	bl	8010184 <BVOPUS_STM_Init>

  MESH_Init();
 80101f8:	f7ff ffbd 	bl	8010176 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80101fc:	f002 faa8 	bl	8012750 <SVCCTL_InitCustomSvc>
  
  return;
 8010200:	bf00      	nop
}
 8010202:	bd80      	pop	{r7, pc}

08010204 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8010204:	b480      	push	{r7}
 8010206:	b083      	sub	sp, #12
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 801020c:	4b09      	ldr	r3, [pc, #36]	; (8010234 <SVCCTL_RegisterSvcHandler+0x30>)
 801020e:	7f1b      	ldrb	r3, [r3, #28]
 8010210:	4619      	mov	r1, r3
 8010212:	4a08      	ldr	r2, [pc, #32]	; (8010234 <SVCCTL_RegisterSvcHandler+0x30>)
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 801021a:	4b06      	ldr	r3, [pc, #24]	; (8010234 <SVCCTL_RegisterSvcHandler+0x30>)
 801021c:	7f1b      	ldrb	r3, [r3, #28]
 801021e:	3301      	adds	r3, #1
 8010220:	b2da      	uxtb	r2, r3
 8010222:	4b04      	ldr	r3, [pc, #16]	; (8010234 <SVCCTL_RegisterSvcHandler+0x30>)
 8010224:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8010226:	bf00      	nop
}
 8010228:	370c      	adds	r7, #12
 801022a:	46bd      	mov	sp, r7
 801022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010230:	4770      	bx	lr
 8010232:	bf00      	nop
 8010234:	200001d0 	.word	0x200001d0

08010238 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b086      	sub	sp, #24
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	3301      	adds	r3, #1
 8010244:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8010246:	2300      	movs	r3, #0
 8010248:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 801024a:	693b      	ldr	r3, [r7, #16]
 801024c:	781b      	ldrb	r3, [r3, #0]
 801024e:	2bff      	cmp	r3, #255	; 0xff
 8010250:	d125      	bne.n	801029e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8010252:	693b      	ldr	r3, [r7, #16]
 8010254:	3302      	adds	r3, #2
 8010256:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	881b      	ldrh	r3, [r3, #0]
 801025c:	b29b      	uxth	r3, r3
 801025e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010262:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010266:	d118      	bne.n	801029a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8010268:	2300      	movs	r3, #0
 801026a:	757b      	strb	r3, [r7, #21]
 801026c:	e00d      	b.n	801028a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 801026e:	7d7b      	ldrb	r3, [r7, #21]
 8010270:	4a1a      	ldr	r2, [pc, #104]	; (80102dc <SVCCTL_UserEvtRx+0xa4>)
 8010272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	4798      	blx	r3
 801027a:	4603      	mov	r3, r0
 801027c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 801027e:	7dfb      	ldrb	r3, [r7, #23]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d108      	bne.n	8010296 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8010284:	7d7b      	ldrb	r3, [r7, #21]
 8010286:	3301      	adds	r3, #1
 8010288:	757b      	strb	r3, [r7, #21]
 801028a:	4b14      	ldr	r3, [pc, #80]	; (80102dc <SVCCTL_UserEvtRx+0xa4>)
 801028c:	7f1b      	ldrb	r3, [r3, #28]
 801028e:	7d7a      	ldrb	r2, [r7, #21]
 8010290:	429a      	cmp	r2, r3
 8010292:	d3ec      	bcc.n	801026e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8010294:	e002      	b.n	801029c <SVCCTL_UserEvtRx+0x64>
              break;
 8010296:	bf00      	nop
          break;
 8010298:	e000      	b.n	801029c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 801029a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 801029c:	e000      	b.n	80102a0 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 801029e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 80102a0:	7dfb      	ldrb	r3, [r7, #23]
 80102a2:	2b02      	cmp	r3, #2
 80102a4:	d00f      	beq.n	80102c6 <SVCCTL_UserEvtRx+0x8e>
 80102a6:	2b02      	cmp	r3, #2
 80102a8:	dc10      	bgt.n	80102cc <SVCCTL_UserEvtRx+0x94>
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d002      	beq.n	80102b4 <SVCCTL_UserEvtRx+0x7c>
 80102ae:	2b01      	cmp	r3, #1
 80102b0:	d006      	beq.n	80102c0 <SVCCTL_UserEvtRx+0x88>
 80102b2:	e00b      	b.n	80102cc <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80102b4:	6878      	ldr	r0, [r7, #4]
 80102b6:	f000 ff7f 	bl	80111b8 <SVCCTL_App_Notification>
 80102ba:	4603      	mov	r3, r0
 80102bc:	75bb      	strb	r3, [r7, #22]
      break;
 80102be:	e008      	b.n	80102d2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80102c0:	2301      	movs	r3, #1
 80102c2:	75bb      	strb	r3, [r7, #22]
      break;
 80102c4:	e005      	b.n	80102d2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80102c6:	2300      	movs	r3, #0
 80102c8:	75bb      	strb	r3, [r7, #22]
      break;
 80102ca:	e002      	b.n	80102d2 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80102cc:	2301      	movs	r3, #1
 80102ce:	75bb      	strb	r3, [r7, #22]
      break;
 80102d0:	bf00      	nop
  }

  return (return_status);
 80102d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80102d4:	4618      	mov	r0, r3
 80102d6:	3718      	adds	r7, #24
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}
 80102dc:	200001d0 	.word	0x200001d0

080102e0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b088      	sub	sp, #32
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80102e8:	f107 030c 	add.w	r3, r7, #12
 80102ec:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80102f4:	69fb      	ldr	r3, [r7, #28]
 80102f6:	212e      	movs	r1, #46	; 0x2e
 80102f8:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80102fc:	f000 fae2 	bl	80108c4 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8010300:	69fb      	ldr	r3, [r7, #28]
 8010302:	330b      	adds	r3, #11
 8010304:	78db      	ldrb	r3, [r3, #3]
}
 8010306:	4618      	mov	r0, r3
 8010308:	3720      	adds	r7, #32
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}

0801030e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 801030e:	b580      	push	{r7, lr}
 8010310:	b088      	sub	sp, #32
 8010312:	af00      	add	r7, sp, #0
 8010314:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8010316:	f107 030c 	add.w	r3, r7, #12
 801031a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8010322:	69fb      	ldr	r3, [r7, #28]
 8010324:	210f      	movs	r1, #15
 8010326:	f64f 4068 	movw	r0, #64616	; 0xfc68
 801032a:	f000 facb 	bl	80108c4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 801032e:	69fb      	ldr	r3, [r7, #28]
 8010330:	330b      	adds	r3, #11
 8010332:	78db      	ldrb	r3, [r3, #3]
}
 8010334:	4618      	mov	r0, r3
 8010336:	3720      	adds	r7, #32
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}

0801033c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b088      	sub	sp, #32
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8010344:	f107 030c 	add.w	r3, r7, #12
 8010348:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 801034a:	69fb      	ldr	r3, [r7, #28]
 801034c:	687a      	ldr	r2, [r7, #4]
 801034e:	2110      	movs	r1, #16
 8010350:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8010354:	f000 fab6 	bl	80108c4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8010358:	69fb      	ldr	r3, [r7, #28]
 801035a:	330b      	adds	r3, #11
 801035c:	78db      	ldrb	r3, [r3, #3]
}
 801035e:	4618      	mov	r0, r3
 8010360:	3720      	adds	r7, #32
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}
	...

08010368 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8010368:	b480      	push	{r7}
 801036a:	b08b      	sub	sp, #44	; 0x2c
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8010370:	2300      	movs	r3, #0
 8010372:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8010374:	2300      	movs	r3, #0
 8010376:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8010378:	2300      	movs	r3, #0
 801037a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 801037c:	2300      	movs	r3, #0
 801037e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8010380:	2300      	movs	r3, #0
 8010382:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8010384:	2300      	movs	r3, #0
 8010386:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8010388:	2300      	movs	r3, #0
 801038a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 801038c:	2300      	movs	r3, #0
 801038e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8010390:	4b4a      	ldr	r3, [pc, #296]	; (80104bc <SHCI_GetWirelessFwInfo+0x154>)
 8010392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010394:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010398:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	009b      	lsls	r3, r3, #2
 801039e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80103a2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	4a44      	ldr	r2, [pc, #272]	; (80104c0 <SHCI_GetWirelessFwInfo+0x158>)
 80103b0:	4293      	cmp	r3, r2
 80103b2:	d10f      	bne.n	80103d4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	695b      	ldr	r3, [r3, #20]
 80103b8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80103ba:	68bb      	ldr	r3, [r7, #8]
 80103bc:	699b      	ldr	r3, [r3, #24]
 80103be:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	69db      	ldr	r3, [r3, #28]
 80103c4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	68db      	ldr	r3, [r3, #12]
 80103ca:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	691b      	ldr	r3, [r3, #16]
 80103d0:	617b      	str	r3, [r7, #20]
 80103d2:	e01a      	b.n	801040a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	009b      	lsls	r3, r3, #2
 80103d8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80103dc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80103e0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	691b      	ldr	r3, [r3, #16]
 80103e8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	695b      	ldr	r3, [r3, #20]
 80103f0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	699b      	ldr	r3, [r3, #24]
 80103f8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	685b      	ldr	r3, [r3, #4]
 8010400:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	689b      	ldr	r3, [r3, #8]
 8010408:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 801040a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801040c:	0e1b      	lsrs	r3, r3, #24
 801040e:	b2da      	uxtb	r2, r3
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8010414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010416:	0c1b      	lsrs	r3, r3, #16
 8010418:	b2da      	uxtb	r2, r3
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 801041e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010420:	0a1b      	lsrs	r3, r3, #8
 8010422:	b2da      	uxtb	r2, r3
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8010428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801042a:	091b      	lsrs	r3, r3, #4
 801042c:	b2db      	uxtb	r3, r3
 801042e:	f003 030f 	and.w	r3, r3, #15
 8010432:	b2da      	uxtb	r2, r3
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8010438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043a:	b2db      	uxtb	r3, r3
 801043c:	f003 030f 	and.w	r3, r3, #15
 8010440:	b2da      	uxtb	r2, r3
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8010446:	6a3b      	ldr	r3, [r7, #32]
 8010448:	0e1b      	lsrs	r3, r3, #24
 801044a:	b2da      	uxtb	r2, r3
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8010450:	6a3b      	ldr	r3, [r7, #32]
 8010452:	0c1b      	lsrs	r3, r3, #16
 8010454:	b2da      	uxtb	r2, r3
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 801045a:	6a3b      	ldr	r3, [r7, #32]
 801045c:	0a1b      	lsrs	r3, r3, #8
 801045e:	b2da      	uxtb	r2, r3
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8010464:	6a3b      	ldr	r3, [r7, #32]
 8010466:	b2da      	uxtb	r2, r3
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 801046c:	69fb      	ldr	r3, [r7, #28]
 801046e:	b2da      	uxtb	r2, r3
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8010474:	69bb      	ldr	r3, [r7, #24]
 8010476:	0e1b      	lsrs	r3, r3, #24
 8010478:	b2da      	uxtb	r2, r3
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801047e:	69bb      	ldr	r3, [r7, #24]
 8010480:	0c1b      	lsrs	r3, r3, #16
 8010482:	b2da      	uxtb	r2, r3
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8010488:	69bb      	ldr	r3, [r7, #24]
 801048a:	0a1b      	lsrs	r3, r3, #8
 801048c:	b2da      	uxtb	r2, r3
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	0e1b      	lsrs	r3, r3, #24
 8010496:	b2da      	uxtb	r2, r3
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 801049c:	697b      	ldr	r3, [r7, #20]
 801049e:	0c1b      	lsrs	r3, r3, #16
 80104a0:	b2da      	uxtb	r2, r3
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80104a6:	697b      	ldr	r3, [r7, #20]
 80104a8:	b2da      	uxtb	r2, r3
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80104ae:	2300      	movs	r3, #0
}
 80104b0:	4618      	mov	r0, r3
 80104b2:	372c      	adds	r7, #44	; 0x2c
 80104b4:	46bd      	mov	sp, r7
 80104b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ba:	4770      	bx	lr
 80104bc:	58004000 	.word	0x58004000
 80104c0:	a94656b9 	.word	0xa94656b9

080104c4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b082      	sub	sp, #8
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
 80104cc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	685b      	ldr	r3, [r3, #4]
 80104d2:	4a08      	ldr	r2, [pc, #32]	; (80104f4 <hci_init+0x30>)
 80104d4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80104d6:	4a08      	ldr	r2, [pc, #32]	; (80104f8 <hci_init+0x34>)
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80104dc:	4806      	ldr	r0, [pc, #24]	; (80104f8 <hci_init+0x34>)
 80104de:	f000 f973 	bl	80107c8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80104e2:	683b      	ldr	r3, [r7, #0]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	4618      	mov	r0, r3
 80104e8:	f000 f8d4 	bl	8010694 <TlInit>

  return;
 80104ec:	bf00      	nop
}
 80104ee:	3708      	adds	r7, #8
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}
 80104f4:	200008e0 	.word	0x200008e0
 80104f8:	200008b8 	.word	0x200008b8

080104fc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b084      	sub	sp, #16
 8010500:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8010502:	4822      	ldr	r0, [pc, #136]	; (801058c <hci_user_evt_proc+0x90>)
 8010504:	f000 fd28 	bl	8010f58 <LST_is_empty>
 8010508:	4603      	mov	r3, r0
 801050a:	2b00      	cmp	r3, #0
 801050c:	d12b      	bne.n	8010566 <hci_user_evt_proc+0x6a>
 801050e:	4b20      	ldr	r3, [pc, #128]	; (8010590 <hci_user_evt_proc+0x94>)
 8010510:	781b      	ldrb	r3, [r3, #0]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d027      	beq.n	8010566 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8010516:	f107 030c 	add.w	r3, r7, #12
 801051a:	4619      	mov	r1, r3
 801051c:	481b      	ldr	r0, [pc, #108]	; (801058c <hci_user_evt_proc+0x90>)
 801051e:	f000 fdaa 	bl	8011076 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8010522:	4b1c      	ldr	r3, [pc, #112]	; (8010594 <hci_user_evt_proc+0x98>)
 8010524:	69db      	ldr	r3, [r3, #28]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d00c      	beq.n	8010544 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 801052e:	2301      	movs	r3, #1
 8010530:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8010532:	4b18      	ldr	r3, [pc, #96]	; (8010594 <hci_user_evt_proc+0x98>)
 8010534:	69db      	ldr	r3, [r3, #28]
 8010536:	1d3a      	adds	r2, r7, #4
 8010538:	4610      	mov	r0, r2
 801053a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 801053c:	793a      	ldrb	r2, [r7, #4]
 801053e:	4b14      	ldr	r3, [pc, #80]	; (8010590 <hci_user_evt_proc+0x94>)
 8010540:	701a      	strb	r2, [r3, #0]
 8010542:	e002      	b.n	801054a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8010544:	4b12      	ldr	r3, [pc, #72]	; (8010590 <hci_user_evt_proc+0x94>)
 8010546:	2201      	movs	r2, #1
 8010548:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 801054a:	4b11      	ldr	r3, [pc, #68]	; (8010590 <hci_user_evt_proc+0x94>)
 801054c:	781b      	ldrb	r3, [r3, #0]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d004      	beq.n	801055c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	4618      	mov	r0, r3
 8010556:	f000 fc03 	bl	8010d60 <TL_MM_EvtDone>
 801055a:	e004      	b.n	8010566 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	4619      	mov	r1, r3
 8010560:	480a      	ldr	r0, [pc, #40]	; (801058c <hci_user_evt_proc+0x90>)
 8010562:	f000 fd1b 	bl	8010f9c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8010566:	4809      	ldr	r0, [pc, #36]	; (801058c <hci_user_evt_proc+0x90>)
 8010568:	f000 fcf6 	bl	8010f58 <LST_is_empty>
 801056c:	4603      	mov	r3, r0
 801056e:	2b00      	cmp	r3, #0
 8010570:	d107      	bne.n	8010582 <hci_user_evt_proc+0x86>
 8010572:	4b07      	ldr	r3, [pc, #28]	; (8010590 <hci_user_evt_proc+0x94>)
 8010574:	781b      	ldrb	r3, [r3, #0]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d003      	beq.n	8010582 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 801057a:	4804      	ldr	r0, [pc, #16]	; (801058c <hci_user_evt_proc+0x90>)
 801057c:	f001 f834 	bl	80115e8 <hci_notify_asynch_evt>
  }


  return;
 8010580:	bf00      	nop
 8010582:	bf00      	nop
}
 8010584:	3710      	adds	r7, #16
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}
 801058a:	bf00      	nop
 801058c:	200001f8 	.word	0x200001f8
 8010590:	20000204 	.word	0x20000204
 8010594:	200008b8 	.word	0x200008b8

08010598 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b088      	sub	sp, #32
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
 80105a0:	460b      	mov	r3, r1
 80105a2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80105a4:	2000      	movs	r0, #0
 80105a6:	f000 f8cb 	bl	8010740 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80105aa:	2300      	movs	r3, #0
 80105ac:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	885b      	ldrh	r3, [r3, #2]
 80105b2:	b21b      	sxth	r3, r3
 80105b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80105b8:	b21a      	sxth	r2, r3
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	881b      	ldrh	r3, [r3, #0]
 80105be:	029b      	lsls	r3, r3, #10
 80105c0:	b21b      	sxth	r3, r3
 80105c2:	4313      	orrs	r3, r2
 80105c4:	b21b      	sxth	r3, r3
 80105c6:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	68db      	ldr	r3, [r3, #12]
 80105cc:	b2d9      	uxtb	r1, r3
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	689a      	ldr	r2, [r3, #8]
 80105d2:	8bbb      	ldrh	r3, [r7, #28]
 80105d4:	4618      	mov	r0, r3
 80105d6:	f000 f88d 	bl	80106f4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80105da:	e04e      	b.n	801067a <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80105dc:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80105e0:	f001 f819 	bl	8011616 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80105e4:	e043      	b.n	801066e <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80105e6:	f107 030c 	add.w	r3, r7, #12
 80105ea:	4619      	mov	r1, r3
 80105ec:	4828      	ldr	r0, [pc, #160]	; (8010690 <hci_send_req+0xf8>)
 80105ee:	f000 fd42 	bl	8011076 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	7a5b      	ldrb	r3, [r3, #9]
 80105f6:	2b0f      	cmp	r3, #15
 80105f8:	d114      	bne.n	8010624 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	330b      	adds	r3, #11
 80105fe:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8010600:	693b      	ldr	r3, [r7, #16]
 8010602:	885b      	ldrh	r3, [r3, #2]
 8010604:	b29b      	uxth	r3, r3
 8010606:	8bba      	ldrh	r2, [r7, #28]
 8010608:	429a      	cmp	r2, r3
 801060a:	d104      	bne.n	8010616 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	691b      	ldr	r3, [r3, #16]
 8010610:	693a      	ldr	r2, [r7, #16]
 8010612:	7812      	ldrb	r2, [r2, #0]
 8010614:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8010616:	693b      	ldr	r3, [r7, #16]
 8010618:	785b      	ldrb	r3, [r3, #1]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d027      	beq.n	801066e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801061e:	2301      	movs	r3, #1
 8010620:	77fb      	strb	r3, [r7, #31]
 8010622:	e024      	b.n	801066e <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	330b      	adds	r3, #11
 8010628:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 801062a:	69bb      	ldr	r3, [r7, #24]
 801062c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010630:	b29b      	uxth	r3, r3
 8010632:	8bba      	ldrh	r2, [r7, #28]
 8010634:	429a      	cmp	r2, r3
 8010636:	d114      	bne.n	8010662 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	7a9b      	ldrb	r3, [r3, #10]
 801063c:	3b03      	subs	r3, #3
 801063e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	695a      	ldr	r2, [r3, #20]
 8010644:	7dfb      	ldrb	r3, [r7, #23]
 8010646:	429a      	cmp	r2, r3
 8010648:	bfa8      	it	ge
 801064a:	461a      	movge	r2, r3
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	6918      	ldr	r0, [r3, #16]
 8010654:	69bb      	ldr	r3, [r7, #24]
 8010656:	1cd9      	adds	r1, r3, #3
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	695b      	ldr	r3, [r3, #20]
 801065c:	461a      	mov	r2, r3
 801065e:	f003 fe6d 	bl	801433c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8010662:	69bb      	ldr	r3, [r7, #24]
 8010664:	781b      	ldrb	r3, [r3, #0]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d001      	beq.n	801066e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801066a:	2301      	movs	r3, #1
 801066c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 801066e:	4808      	ldr	r0, [pc, #32]	; (8010690 <hci_send_req+0xf8>)
 8010670:	f000 fc72 	bl	8010f58 <LST_is_empty>
 8010674:	4603      	mov	r3, r0
 8010676:	2b00      	cmp	r3, #0
 8010678:	d0b5      	beq.n	80105e6 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 801067a:	7ffb      	ldrb	r3, [r7, #31]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d0ad      	beq.n	80105dc <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8010680:	2001      	movs	r0, #1
 8010682:	f000 f85d 	bl	8010740 <NotifyCmdStatus>

  return 0;
 8010686:	2300      	movs	r3, #0
}
 8010688:	4618      	mov	r0, r3
 801068a:	3720      	adds	r7, #32
 801068c:	46bd      	mov	sp, r7
 801068e:	bd80      	pop	{r7, pc}
 8010690:	200008d8 	.word	0x200008d8

08010694 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b086      	sub	sp, #24
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 801069c:	480f      	ldr	r0, [pc, #60]	; (80106dc <TlInit+0x48>)
 801069e:	f000 fc4b 	bl	8010f38 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80106a2:	4a0f      	ldr	r2, [pc, #60]	; (80106e0 <TlInit+0x4c>)
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80106a8:	480e      	ldr	r0, [pc, #56]	; (80106e4 <TlInit+0x50>)
 80106aa:	f000 fc45 	bl	8010f38 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80106ae:	4b0e      	ldr	r3, [pc, #56]	; (80106e8 <TlInit+0x54>)
 80106b0:	2201      	movs	r2, #1
 80106b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80106b4:	4b0d      	ldr	r3, [pc, #52]	; (80106ec <TlInit+0x58>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d00a      	beq.n	80106d2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80106c0:	4b0b      	ldr	r3, [pc, #44]	; (80106f0 <TlInit+0x5c>)
 80106c2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80106c4:	4b09      	ldr	r3, [pc, #36]	; (80106ec <TlInit+0x58>)
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	f107 0208 	add.w	r2, r7, #8
 80106cc:	4610      	mov	r0, r2
 80106ce:	4798      	blx	r3
  }

  return;
 80106d0:	bf00      	nop
 80106d2:	bf00      	nop
}
 80106d4:	3718      	adds	r7, #24
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}
 80106da:	bf00      	nop
 80106dc:	200008d8 	.word	0x200008d8
 80106e0:	20000200 	.word	0x20000200
 80106e4:	200001f8 	.word	0x200001f8
 80106e8:	20000204 	.word	0x20000204
 80106ec:	200008b8 	.word	0x200008b8
 80106f0:	08010781 	.word	0x08010781

080106f4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b082      	sub	sp, #8
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	4603      	mov	r3, r0
 80106fc:	603a      	str	r2, [r7, #0]
 80106fe:	80fb      	strh	r3, [r7, #6]
 8010700:	460b      	mov	r3, r1
 8010702:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8010704:	4b0c      	ldr	r3, [pc, #48]	; (8010738 <SendCmd+0x44>)
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	88fa      	ldrh	r2, [r7, #6]
 801070a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 801070e:	4b0a      	ldr	r3, [pc, #40]	; (8010738 <SendCmd+0x44>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	797a      	ldrb	r2, [r7, #5]
 8010714:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8010716:	4b08      	ldr	r3, [pc, #32]	; (8010738 <SendCmd+0x44>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	330c      	adds	r3, #12
 801071c:	797a      	ldrb	r2, [r7, #5]
 801071e:	6839      	ldr	r1, [r7, #0]
 8010720:	4618      	mov	r0, r3
 8010722:	f003 fe0b 	bl	801433c <memcpy>

  hciContext.io.Send(0,0);
 8010726:	4b05      	ldr	r3, [pc, #20]	; (801073c <SendCmd+0x48>)
 8010728:	691b      	ldr	r3, [r3, #16]
 801072a:	2100      	movs	r1, #0
 801072c:	2000      	movs	r0, #0
 801072e:	4798      	blx	r3

  return;
 8010730:	bf00      	nop
}
 8010732:	3708      	adds	r7, #8
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}
 8010738:	20000200 	.word	0x20000200
 801073c:	200008b8 	.word	0x200008b8

08010740 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b082      	sub	sp, #8
 8010744:	af00      	add	r7, sp, #0
 8010746:	4603      	mov	r3, r0
 8010748:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 801074a:	79fb      	ldrb	r3, [r7, #7]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d108      	bne.n	8010762 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8010750:	4b0a      	ldr	r3, [pc, #40]	; (801077c <NotifyCmdStatus+0x3c>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d00d      	beq.n	8010774 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8010758:	4b08      	ldr	r3, [pc, #32]	; (801077c <NotifyCmdStatus+0x3c>)
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	2000      	movs	r0, #0
 801075e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8010760:	e008      	b.n	8010774 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8010762:	4b06      	ldr	r3, [pc, #24]	; (801077c <NotifyCmdStatus+0x3c>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d004      	beq.n	8010774 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 801076a:	4b04      	ldr	r3, [pc, #16]	; (801077c <NotifyCmdStatus+0x3c>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	2001      	movs	r0, #1
 8010770:	4798      	blx	r3
  return;
 8010772:	bf00      	nop
 8010774:	bf00      	nop
}
 8010776:	3708      	adds	r7, #8
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}
 801077c:	200008e0 	.word	0x200008e0

08010780 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b082      	sub	sp, #8
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	7a5b      	ldrb	r3, [r3, #9]
 801078c:	2b0f      	cmp	r3, #15
 801078e:	d003      	beq.n	8010798 <TlEvtReceived+0x18>
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	7a5b      	ldrb	r3, [r3, #9]
 8010794:	2b0e      	cmp	r3, #14
 8010796:	d107      	bne.n	80107a8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8010798:	6879      	ldr	r1, [r7, #4]
 801079a:	4809      	ldr	r0, [pc, #36]	; (80107c0 <TlEvtReceived+0x40>)
 801079c:	f000 fc24 	bl	8010fe8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80107a0:	2000      	movs	r0, #0
 80107a2:	f000 ff2d 	bl	8011600 <hci_cmd_resp_release>
 80107a6:	e006      	b.n	80107b6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80107a8:	6879      	ldr	r1, [r7, #4]
 80107aa:	4806      	ldr	r0, [pc, #24]	; (80107c4 <TlEvtReceived+0x44>)
 80107ac:	f000 fc1c 	bl	8010fe8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80107b0:	4804      	ldr	r0, [pc, #16]	; (80107c4 <TlEvtReceived+0x44>)
 80107b2:	f000 ff19 	bl	80115e8 <hci_notify_asynch_evt>
  }

  return;
 80107b6:	bf00      	nop
}
 80107b8:	3708      	adds	r7, #8
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}
 80107be:	bf00      	nop
 80107c0:	200008d8 	.word	0x200008d8
 80107c4:	200001f8 	.word	0x200001f8

080107c8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80107c8:	b480      	push	{r7}
 80107ca:	b083      	sub	sp, #12
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	4a05      	ldr	r2, [pc, #20]	; (80107e8 <hci_register_io_bus+0x20>)
 80107d4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	4a04      	ldr	r2, [pc, #16]	; (80107ec <hci_register_io_bus+0x24>)
 80107da:	611a      	str	r2, [r3, #16]

  return;
 80107dc:	bf00      	nop
}
 80107de:	370c      	adds	r7, #12
 80107e0:	46bd      	mov	sp, r7
 80107e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e6:	4770      	bx	lr
 80107e8:	08010ad9 	.word	0x08010ad9
 80107ec:	08010b41 	.word	0x08010b41

080107f0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b082      	sub	sp, #8
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	685b      	ldr	r3, [r3, #4]
 80107fe:	4a08      	ldr	r2, [pc, #32]	; (8010820 <shci_init+0x30>)
 8010800:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8010802:	4a08      	ldr	r2, [pc, #32]	; (8010824 <shci_init+0x34>)
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8010808:	4806      	ldr	r0, [pc, #24]	; (8010824 <shci_init+0x34>)
 801080a:	f000 f911 	bl	8010a30 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801080e:	683b      	ldr	r3, [r7, #0]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	4618      	mov	r0, r3
 8010814:	f000 f894 	bl	8010940 <TlInit>

  return;
 8010818:	bf00      	nop
}
 801081a:	3708      	adds	r7, #8
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}
 8010820:	20000904 	.word	0x20000904
 8010824:	200008e4 	.word	0x200008e4

08010828 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b084      	sub	sp, #16
 801082c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801082e:	4822      	ldr	r0, [pc, #136]	; (80108b8 <shci_user_evt_proc+0x90>)
 8010830:	f000 fb92 	bl	8010f58 <LST_is_empty>
 8010834:	4603      	mov	r3, r0
 8010836:	2b00      	cmp	r3, #0
 8010838:	d12b      	bne.n	8010892 <shci_user_evt_proc+0x6a>
 801083a:	4b20      	ldr	r3, [pc, #128]	; (80108bc <shci_user_evt_proc+0x94>)
 801083c:	781b      	ldrb	r3, [r3, #0]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d027      	beq.n	8010892 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8010842:	f107 030c 	add.w	r3, r7, #12
 8010846:	4619      	mov	r1, r3
 8010848:	481b      	ldr	r0, [pc, #108]	; (80108b8 <shci_user_evt_proc+0x90>)
 801084a:	f000 fc14 	bl	8011076 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 801084e:	4b1c      	ldr	r3, [pc, #112]	; (80108c0 <shci_user_evt_proc+0x98>)
 8010850:	69db      	ldr	r3, [r3, #28]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d00c      	beq.n	8010870 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 801085a:	2301      	movs	r3, #1
 801085c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 801085e:	4b18      	ldr	r3, [pc, #96]	; (80108c0 <shci_user_evt_proc+0x98>)
 8010860:	69db      	ldr	r3, [r3, #28]
 8010862:	1d3a      	adds	r2, r7, #4
 8010864:	4610      	mov	r0, r2
 8010866:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8010868:	793a      	ldrb	r2, [r7, #4]
 801086a:	4b14      	ldr	r3, [pc, #80]	; (80108bc <shci_user_evt_proc+0x94>)
 801086c:	701a      	strb	r2, [r3, #0]
 801086e:	e002      	b.n	8010876 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8010870:	4b12      	ldr	r3, [pc, #72]	; (80108bc <shci_user_evt_proc+0x94>)
 8010872:	2201      	movs	r2, #1
 8010874:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8010876:	4b11      	ldr	r3, [pc, #68]	; (80108bc <shci_user_evt_proc+0x94>)
 8010878:	781b      	ldrb	r3, [r3, #0]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d004      	beq.n	8010888 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	4618      	mov	r0, r3
 8010882:	f000 fa6d 	bl	8010d60 <TL_MM_EvtDone>
 8010886:	e004      	b.n	8010892 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	4619      	mov	r1, r3
 801088c:	480a      	ldr	r0, [pc, #40]	; (80108b8 <shci_user_evt_proc+0x90>)
 801088e:	f000 fb85 	bl	8010f9c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8010892:	4809      	ldr	r0, [pc, #36]	; (80108b8 <shci_user_evt_proc+0x90>)
 8010894:	f000 fb60 	bl	8010f58 <LST_is_empty>
 8010898:	4603      	mov	r3, r0
 801089a:	2b00      	cmp	r3, #0
 801089c:	d107      	bne.n	80108ae <shci_user_evt_proc+0x86>
 801089e:	4b07      	ldr	r3, [pc, #28]	; (80108bc <shci_user_evt_proc+0x94>)
 80108a0:	781b      	ldrb	r3, [r3, #0]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d003      	beq.n	80108ae <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80108a6:	4804      	ldr	r0, [pc, #16]	; (80108b8 <shci_user_evt_proc+0x90>)
 80108a8:	f7f0 fe1c 	bl	80014e4 <shci_notify_asynch_evt>
  }


  return;
 80108ac:	bf00      	nop
 80108ae:	bf00      	nop
}
 80108b0:	3710      	adds	r7, #16
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}
 80108b6:	bf00      	nop
 80108b8:	20000208 	.word	0x20000208
 80108bc:	20000218 	.word	0x20000218
 80108c0:	200008e4 	.word	0x200008e4

080108c4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b084      	sub	sp, #16
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	60ba      	str	r2, [r7, #8]
 80108cc:	607b      	str	r3, [r7, #4]
 80108ce:	4603      	mov	r3, r0
 80108d0:	81fb      	strh	r3, [r7, #14]
 80108d2:	460b      	mov	r3, r1
 80108d4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80108d6:	2000      	movs	r0, #0
 80108d8:	f000 f864 	bl	80109a4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80108dc:	4b16      	ldr	r3, [pc, #88]	; (8010938 <shci_send+0x74>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	89fa      	ldrh	r2, [r7, #14]
 80108e2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80108e6:	4b14      	ldr	r3, [pc, #80]	; (8010938 <shci_send+0x74>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	7b7a      	ldrb	r2, [r7, #13]
 80108ec:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80108ee:	4b12      	ldr	r3, [pc, #72]	; (8010938 <shci_send+0x74>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	330c      	adds	r3, #12
 80108f4:	7b7a      	ldrb	r2, [r7, #13]
 80108f6:	68b9      	ldr	r1, [r7, #8]
 80108f8:	4618      	mov	r0, r3
 80108fa:	f003 fd1f 	bl	801433c <memcpy>

  shciContext.io.Send(0,0);
 80108fe:	4b0f      	ldr	r3, [pc, #60]	; (801093c <shci_send+0x78>)
 8010900:	691b      	ldr	r3, [r3, #16]
 8010902:	2100      	movs	r1, #0
 8010904:	2000      	movs	r0, #0
 8010906:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8010908:	f248 00e8 	movw	r0, #33000	; 0x80e8
 801090c:	f7f0 fe02 	bl	8001514 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f103 0008 	add.w	r0, r3, #8
 8010916:	4b08      	ldr	r3, [pc, #32]	; (8010938 <shci_send+0x74>)
 8010918:	6819      	ldr	r1, [r3, #0]
 801091a:	4b07      	ldr	r3, [pc, #28]	; (8010938 <shci_send+0x74>)
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	789b      	ldrb	r3, [r3, #2]
 8010920:	3303      	adds	r3, #3
 8010922:	461a      	mov	r2, r3
 8010924:	f003 fd0a 	bl	801433c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8010928:	2001      	movs	r0, #1
 801092a:	f000 f83b 	bl	80109a4 <Cmd_SetStatus>

  return;
 801092e:	bf00      	nop
}
 8010930:	3710      	adds	r7, #16
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
 8010936:	bf00      	nop
 8010938:	20000214 	.word	0x20000214
 801093c:	200008e4 	.word	0x200008e4

08010940 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b086      	sub	sp, #24
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8010948:	4a10      	ldr	r2, [pc, #64]	; (801098c <TlInit+0x4c>)
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 801094e:	4810      	ldr	r0, [pc, #64]	; (8010990 <TlInit+0x50>)
 8010950:	f000 faf2 	bl	8010f38 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8010954:	2001      	movs	r0, #1
 8010956:	f000 f825 	bl	80109a4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 801095a:	4b0e      	ldr	r3, [pc, #56]	; (8010994 <TlInit+0x54>)
 801095c:	2201      	movs	r2, #1
 801095e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8010960:	4b0d      	ldr	r3, [pc, #52]	; (8010998 <TlInit+0x58>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d00c      	beq.n	8010982 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 801096c:	4b0b      	ldr	r3, [pc, #44]	; (801099c <TlInit+0x5c>)
 801096e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8010970:	4b0b      	ldr	r3, [pc, #44]	; (80109a0 <TlInit+0x60>)
 8010972:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8010974:	4b08      	ldr	r3, [pc, #32]	; (8010998 <TlInit+0x58>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	f107 020c 	add.w	r2, r7, #12
 801097c:	4610      	mov	r0, r2
 801097e:	4798      	blx	r3
  }

  return;
 8010980:	bf00      	nop
 8010982:	bf00      	nop
}
 8010984:	3718      	adds	r7, #24
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}
 801098a:	bf00      	nop
 801098c:	20000214 	.word	0x20000214
 8010990:	20000208 	.word	0x20000208
 8010994:	20000218 	.word	0x20000218
 8010998:	200008e4 	.word	0x200008e4
 801099c:	080109f5 	.word	0x080109f5
 80109a0:	08010a0d 	.word	0x08010a0d

080109a4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b082      	sub	sp, #8
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	4603      	mov	r3, r0
 80109ac:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80109ae:	79fb      	ldrb	r3, [r7, #7]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d10b      	bne.n	80109cc <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80109b4:	4b0d      	ldr	r3, [pc, #52]	; (80109ec <Cmd_SetStatus+0x48>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d003      	beq.n	80109c4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80109bc:	4b0b      	ldr	r3, [pc, #44]	; (80109ec <Cmd_SetStatus+0x48>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	2000      	movs	r0, #0
 80109c2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80109c4:	4b0a      	ldr	r3, [pc, #40]	; (80109f0 <Cmd_SetStatus+0x4c>)
 80109c6:	2200      	movs	r2, #0
 80109c8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80109ca:	e00b      	b.n	80109e4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80109cc:	4b08      	ldr	r3, [pc, #32]	; (80109f0 <Cmd_SetStatus+0x4c>)
 80109ce:	2201      	movs	r2, #1
 80109d0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80109d2:	4b06      	ldr	r3, [pc, #24]	; (80109ec <Cmd_SetStatus+0x48>)
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d004      	beq.n	80109e4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80109da:	4b04      	ldr	r3, [pc, #16]	; (80109ec <Cmd_SetStatus+0x48>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	2001      	movs	r0, #1
 80109e0:	4798      	blx	r3
  return;
 80109e2:	bf00      	nop
 80109e4:	bf00      	nop
}
 80109e6:	3708      	adds	r7, #8
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}
 80109ec:	20000904 	.word	0x20000904
 80109f0:	20000210 	.word	0x20000210

080109f4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b082      	sub	sp, #8
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80109fc:	2000      	movs	r0, #0
 80109fe:	f7f0 fd7e 	bl	80014fe <shci_cmd_resp_release>

  return;
 8010a02:	bf00      	nop
}
 8010a04:	3708      	adds	r7, #8
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}
	...

08010a0c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b082      	sub	sp, #8
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8010a14:	6879      	ldr	r1, [r7, #4]
 8010a16:	4805      	ldr	r0, [pc, #20]	; (8010a2c <TlUserEvtReceived+0x20>)
 8010a18:	f000 fae6 	bl	8010fe8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8010a1c:	4803      	ldr	r0, [pc, #12]	; (8010a2c <TlUserEvtReceived+0x20>)
 8010a1e:	f7f0 fd61 	bl	80014e4 <shci_notify_asynch_evt>

  return;
 8010a22:	bf00      	nop
}
 8010a24:	3708      	adds	r7, #8
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}
 8010a2a:	bf00      	nop
 8010a2c:	20000208 	.word	0x20000208

08010a30 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8010a30:	b480      	push	{r7}
 8010a32:	b083      	sub	sp, #12
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	4a05      	ldr	r2, [pc, #20]	; (8010a50 <shci_register_io_bus+0x20>)
 8010a3c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	4a04      	ldr	r2, [pc, #16]	; (8010a54 <shci_register_io_bus+0x24>)
 8010a42:	611a      	str	r2, [r3, #16]

  return;
 8010a44:	bf00      	nop
}
 8010a46:	370c      	adds	r7, #12
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4e:	4770      	bx	lr
 8010a50:	08010bed 	.word	0x08010bed
 8010a54:	08010c41 	.word	0x08010c41

08010a58 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8010a5c:	f002 fb62 	bl	8013124 <HW_IPCC_Enable>

  return;
 8010a60:	bf00      	nop
}
 8010a62:	bd80      	pop	{r7, pc}

08010a64 <TL_Init>:


void TL_Init( void )
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8010a68:	4b10      	ldr	r3, [pc, #64]	; (8010aac <TL_Init+0x48>)
 8010a6a:	4a11      	ldr	r2, [pc, #68]	; (8010ab0 <TL_Init+0x4c>)
 8010a6c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8010a6e:	4b0f      	ldr	r3, [pc, #60]	; (8010aac <TL_Init+0x48>)
 8010a70:	4a10      	ldr	r2, [pc, #64]	; (8010ab4 <TL_Init+0x50>)
 8010a72:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8010a74:	4b0d      	ldr	r3, [pc, #52]	; (8010aac <TL_Init+0x48>)
 8010a76:	4a10      	ldr	r2, [pc, #64]	; (8010ab8 <TL_Init+0x54>)
 8010a78:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8010a7a:	4b0c      	ldr	r3, [pc, #48]	; (8010aac <TL_Init+0x48>)
 8010a7c:	4a0f      	ldr	r2, [pc, #60]	; (8010abc <TL_Init+0x58>)
 8010a7e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8010a80:	4b0a      	ldr	r3, [pc, #40]	; (8010aac <TL_Init+0x48>)
 8010a82:	4a0f      	ldr	r2, [pc, #60]	; (8010ac0 <TL_Init+0x5c>)
 8010a84:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8010a86:	4b09      	ldr	r3, [pc, #36]	; (8010aac <TL_Init+0x48>)
 8010a88:	4a0e      	ldr	r2, [pc, #56]	; (8010ac4 <TL_Init+0x60>)
 8010a8a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8010a8c:	4b07      	ldr	r3, [pc, #28]	; (8010aac <TL_Init+0x48>)
 8010a8e:	4a0e      	ldr	r2, [pc, #56]	; (8010ac8 <TL_Init+0x64>)
 8010a90:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8010a92:	4b06      	ldr	r3, [pc, #24]	; (8010aac <TL_Init+0x48>)
 8010a94:	4a0d      	ldr	r2, [pc, #52]	; (8010acc <TL_Init+0x68>)
 8010a96:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8010a98:	4b04      	ldr	r3, [pc, #16]	; (8010aac <TL_Init+0x48>)
 8010a9a:	4a0d      	ldr	r2, [pc, #52]	; (8010ad0 <TL_Init+0x6c>)
 8010a9c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8010a9e:	4b03      	ldr	r3, [pc, #12]	; (8010aac <TL_Init+0x48>)
 8010aa0:	4a0c      	ldr	r2, [pc, #48]	; (8010ad4 <TL_Init+0x70>)
 8010aa2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8010aa4:	f002 fb52 	bl	801314c <HW_IPCC_Init>

  return;
 8010aa8:	bf00      	nop
}
 8010aaa:	bd80      	pop	{r7, pc}
 8010aac:	20030000 	.word	0x20030000
 8010ab0:	20030028 	.word	0x20030028
 8010ab4:	20030048 	.word	0x20030048
 8010ab8:	20030058 	.word	0x20030058
 8010abc:	20030068 	.word	0x20030068
 8010ac0:	20030070 	.word	0x20030070
 8010ac4:	20030078 	.word	0x20030078
 8010ac8:	20030080 	.word	0x20030080
 8010acc:	2003009c 	.word	0x2003009c
 8010ad0:	200300a0 	.word	0x200300a0
 8010ad4:	200300ac 	.word	0x200300ac

08010ad8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b084      	sub	sp, #16
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8010ae4:	4811      	ldr	r0, [pc, #68]	; (8010b2c <TL_BLE_Init+0x54>)
 8010ae6:	f000 fa27 	bl	8010f38 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8010aea:	4b11      	ldr	r3, [pc, #68]	; (8010b30 <TL_BLE_Init+0x58>)
 8010aec:	685b      	ldr	r3, [r3, #4]
 8010aee:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	689a      	ldr	r2, [r3, #8]
 8010af4:	68bb      	ldr	r3, [r7, #8]
 8010af6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	68da      	ldr	r2, [r3, #12]
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	4a0c      	ldr	r2, [pc, #48]	; (8010b34 <TL_BLE_Init+0x5c>)
 8010b04:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8010b06:	68bb      	ldr	r3, [r7, #8]
 8010b08:	4a08      	ldr	r2, [pc, #32]	; (8010b2c <TL_BLE_Init+0x54>)
 8010b0a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8010b0c:	f002 fb34 	bl	8013178 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	4a08      	ldr	r2, [pc, #32]	; (8010b38 <TL_BLE_Init+0x60>)
 8010b16:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	685b      	ldr	r3, [r3, #4]
 8010b1c:	4a07      	ldr	r2, [pc, #28]	; (8010b3c <TL_BLE_Init+0x64>)
 8010b1e:	6013      	str	r3, [r2, #0]

  return 0;
 8010b20:	2300      	movs	r3, #0
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3710      	adds	r7, #16
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}
 8010b2a:	bf00      	nop
 8010b2c:	200300c8 	.word	0x200300c8
 8010b30:	20030000 	.word	0x20030000
 8010b34:	20030a58 	.word	0x20030a58
 8010b38:	20000910 	.word	0x20000910
 8010b3c:	20000914 	.word	0x20000914

08010b40 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b082      	sub	sp, #8
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
 8010b48:	460b      	mov	r3, r1
 8010b4a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8010b4c:	4b09      	ldr	r3, [pc, #36]	; (8010b74 <TL_BLE_SendCmd+0x34>)
 8010b4e:	685b      	ldr	r3, [r3, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	2201      	movs	r2, #1
 8010b54:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8010b56:	4b07      	ldr	r3, [pc, #28]	; (8010b74 <TL_BLE_SendCmd+0x34>)
 8010b58:	685b      	ldr	r3, [r3, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	4619      	mov	r1, r3
 8010b5e:	2001      	movs	r0, #1
 8010b60:	f000 f96c 	bl	8010e3c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8010b64:	f002 fb12 	bl	801318c <HW_IPCC_BLE_SendCmd>

  return 0;
 8010b68:	2300      	movs	r3, #0
}
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	3708      	adds	r7, #8
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bd80      	pop	{r7, pc}
 8010b72:	bf00      	nop
 8010b74:	20030000 	.word	0x20030000

08010b78 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b082      	sub	sp, #8
 8010b7c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8010b7e:	e01c      	b.n	8010bba <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8010b80:	1d3b      	adds	r3, r7, #4
 8010b82:	4619      	mov	r1, r3
 8010b84:	4812      	ldr	r0, [pc, #72]	; (8010bd0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8010b86:	f000 fa76 	bl	8011076 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	7a5b      	ldrb	r3, [r3, #9]
 8010b8e:	2b0f      	cmp	r3, #15
 8010b90:	d003      	beq.n	8010b9a <HW_IPCC_BLE_RxEvtNot+0x22>
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	7a5b      	ldrb	r3, [r3, #9]
 8010b96:	2b0e      	cmp	r3, #14
 8010b98:	d105      	bne.n	8010ba6 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	4619      	mov	r1, r3
 8010b9e:	2002      	movs	r0, #2
 8010ba0:	f000 f94c 	bl	8010e3c <OutputDbgTrace>
 8010ba4:	e004      	b.n	8010bb0 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	4619      	mov	r1, r3
 8010baa:	2003      	movs	r0, #3
 8010bac:	f000 f946 	bl	8010e3c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8010bb0:	4b08      	ldr	r3, [pc, #32]	; (8010bd4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	687a      	ldr	r2, [r7, #4]
 8010bb6:	4610      	mov	r0, r2
 8010bb8:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8010bba:	4805      	ldr	r0, [pc, #20]	; (8010bd0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8010bbc:	f000 f9cc 	bl	8010f58 <LST_is_empty>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d0dc      	beq.n	8010b80 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8010bc6:	bf00      	nop
}
 8010bc8:	3708      	adds	r7, #8
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}
 8010bce:	bf00      	nop
 8010bd0:	200300c8 	.word	0x200300c8
 8010bd4:	20000910 	.word	0x20000910

08010bd8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8010bdc:	4b02      	ldr	r3, [pc, #8]	; (8010be8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	4798      	blx	r3

  return;
 8010be2:	bf00      	nop
}
 8010be4:	bd80      	pop	{r7, pc}
 8010be6:	bf00      	nop
 8010be8:	20000914 	.word	0x20000914

08010bec <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b084      	sub	sp, #16
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8010bf8:	480d      	ldr	r0, [pc, #52]	; (8010c30 <TL_SYS_Init+0x44>)
 8010bfa:	f000 f99d 	bl	8010f38 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8010bfe:	4b0d      	ldr	r3, [pc, #52]	; (8010c34 <TL_SYS_Init+0x48>)
 8010c00:	68db      	ldr	r3, [r3, #12]
 8010c02:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	689a      	ldr	r2, [r3, #8]
 8010c08:	68bb      	ldr	r3, [r7, #8]
 8010c0a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8010c0c:	68bb      	ldr	r3, [r7, #8]
 8010c0e:	4a08      	ldr	r2, [pc, #32]	; (8010c30 <TL_SYS_Init+0x44>)
 8010c10:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8010c12:	f002 fadd 	bl	80131d0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	4a07      	ldr	r2, [pc, #28]	; (8010c38 <TL_SYS_Init+0x4c>)
 8010c1c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	685b      	ldr	r3, [r3, #4]
 8010c22:	4a06      	ldr	r2, [pc, #24]	; (8010c3c <TL_SYS_Init+0x50>)
 8010c24:	6013      	str	r3, [r2, #0]

  return 0;
 8010c26:	2300      	movs	r3, #0
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3710      	adds	r7, #16
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}
 8010c30:	200300d0 	.word	0x200300d0
 8010c34:	20030000 	.word	0x20030000
 8010c38:	20000918 	.word	0x20000918
 8010c3c:	2000091c 	.word	0x2000091c

08010c40 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b082      	sub	sp, #8
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	460b      	mov	r3, r1
 8010c4a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8010c4c:	4b09      	ldr	r3, [pc, #36]	; (8010c74 <TL_SYS_SendCmd+0x34>)
 8010c4e:	68db      	ldr	r3, [r3, #12]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	2210      	movs	r2, #16
 8010c54:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8010c56:	4b07      	ldr	r3, [pc, #28]	; (8010c74 <TL_SYS_SendCmd+0x34>)
 8010c58:	68db      	ldr	r3, [r3, #12]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	4619      	mov	r1, r3
 8010c5e:	2004      	movs	r0, #4
 8010c60:	f000 f8ec 	bl	8010e3c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8010c64:	f002 fabe 	bl	80131e4 <HW_IPCC_SYS_SendCmd>

  return 0;
 8010c68:	2300      	movs	r3, #0
}
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3708      	adds	r7, #8
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}
 8010c72:	bf00      	nop
 8010c74:	20030000 	.word	0x20030000

08010c78 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8010c7c:	4b07      	ldr	r3, [pc, #28]	; (8010c9c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8010c7e:	68db      	ldr	r3, [r3, #12]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	4619      	mov	r1, r3
 8010c84:	2005      	movs	r0, #5
 8010c86:	f000 f8d9 	bl	8010e3c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8010c8a:	4b05      	ldr	r3, [pc, #20]	; (8010ca0 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	4a03      	ldr	r2, [pc, #12]	; (8010c9c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8010c90:	68d2      	ldr	r2, [r2, #12]
 8010c92:	6812      	ldr	r2, [r2, #0]
 8010c94:	4610      	mov	r0, r2
 8010c96:	4798      	blx	r3

  return;
 8010c98:	bf00      	nop
}
 8010c9a:	bd80      	pop	{r7, pc}
 8010c9c:	20030000 	.word	0x20030000
 8010ca0:	20000918 	.word	0x20000918

08010ca4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b082      	sub	sp, #8
 8010ca8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8010caa:	e00e      	b.n	8010cca <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8010cac:	1d3b      	adds	r3, r7, #4
 8010cae:	4619      	mov	r1, r3
 8010cb0:	480b      	ldr	r0, [pc, #44]	; (8010ce0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8010cb2:	f000 f9e0 	bl	8011076 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	4619      	mov	r1, r3
 8010cba:	2006      	movs	r0, #6
 8010cbc:	f000 f8be 	bl	8010e3c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8010cc0:	4b08      	ldr	r3, [pc, #32]	; (8010ce4 <HW_IPCC_SYS_EvtNot+0x40>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	687a      	ldr	r2, [r7, #4]
 8010cc6:	4610      	mov	r0, r2
 8010cc8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8010cca:	4805      	ldr	r0, [pc, #20]	; (8010ce0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8010ccc:	f000 f944 	bl	8010f58 <LST_is_empty>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d0ea      	beq.n	8010cac <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8010cd6:	bf00      	nop
}
 8010cd8:	3708      	adds	r7, #8
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd80      	pop	{r7, pc}
 8010cde:	bf00      	nop
 8010ce0:	200300d0 	.word	0x200300d0
 8010ce4:	2000091c 	.word	0x2000091c

08010ce8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b082      	sub	sp, #8
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8010cf0:	4817      	ldr	r0, [pc, #92]	; (8010d50 <TL_MM_Init+0x68>)
 8010cf2:	f000 f921 	bl	8010f38 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8010cf6:	4817      	ldr	r0, [pc, #92]	; (8010d54 <TL_MM_Init+0x6c>)
 8010cf8:	f000 f91e 	bl	8010f38 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8010cfc:	4b16      	ldr	r3, [pc, #88]	; (8010d58 <TL_MM_Init+0x70>)
 8010cfe:	691b      	ldr	r3, [r3, #16]
 8010d00:	4a16      	ldr	r2, [pc, #88]	; (8010d5c <TL_MM_Init+0x74>)
 8010d02:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8010d04:	4b15      	ldr	r3, [pc, #84]	; (8010d5c <TL_MM_Init+0x74>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	687a      	ldr	r2, [r7, #4]
 8010d0a:	6892      	ldr	r2, [r2, #8]
 8010d0c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8010d0e:	4b13      	ldr	r3, [pc, #76]	; (8010d5c <TL_MM_Init+0x74>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	687a      	ldr	r2, [r7, #4]
 8010d14:	68d2      	ldr	r2, [r2, #12]
 8010d16:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8010d18:	4b10      	ldr	r3, [pc, #64]	; (8010d5c <TL_MM_Init+0x74>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	4a0c      	ldr	r2, [pc, #48]	; (8010d50 <TL_MM_Init+0x68>)
 8010d1e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8010d20:	4b0e      	ldr	r3, [pc, #56]	; (8010d5c <TL_MM_Init+0x74>)
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	687a      	ldr	r2, [r7, #4]
 8010d26:	6812      	ldr	r2, [r2, #0]
 8010d28:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8010d2a:	4b0c      	ldr	r3, [pc, #48]	; (8010d5c <TL_MM_Init+0x74>)
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	687a      	ldr	r2, [r7, #4]
 8010d30:	6852      	ldr	r2, [r2, #4]
 8010d32:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8010d34:	4b09      	ldr	r3, [pc, #36]	; (8010d5c <TL_MM_Init+0x74>)
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	687a      	ldr	r2, [r7, #4]
 8010d3a:	6912      	ldr	r2, [r2, #16]
 8010d3c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8010d3e:	4b07      	ldr	r3, [pc, #28]	; (8010d5c <TL_MM_Init+0x74>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	687a      	ldr	r2, [r7, #4]
 8010d44:	6952      	ldr	r2, [r2, #20]
 8010d46:	619a      	str	r2, [r3, #24]

  return;
 8010d48:	bf00      	nop
}
 8010d4a:	3708      	adds	r7, #8
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}
 8010d50:	200300b8 	.word	0x200300b8
 8010d54:	20000908 	.word	0x20000908
 8010d58:	20030000 	.word	0x20030000
 8010d5c:	20000920 	.word	0x20000920

08010d60 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b082      	sub	sp, #8
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8010d68:	6879      	ldr	r1, [r7, #4]
 8010d6a:	4807      	ldr	r0, [pc, #28]	; (8010d88 <TL_MM_EvtDone+0x28>)
 8010d6c:	f000 f93c 	bl	8010fe8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8010d70:	6879      	ldr	r1, [r7, #4]
 8010d72:	2000      	movs	r0, #0
 8010d74:	f000 f862 	bl	8010e3c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8010d78:	4804      	ldr	r0, [pc, #16]	; (8010d8c <TL_MM_EvtDone+0x2c>)
 8010d7a:	f002 fa59 	bl	8013230 <HW_IPCC_MM_SendFreeBuf>

  return;
 8010d7e:	bf00      	nop
}
 8010d80:	3708      	adds	r7, #8
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}
 8010d86:	bf00      	nop
 8010d88:	20000908 	.word	0x20000908
 8010d8c:	08010d91 	.word	0x08010d91

08010d90 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b082      	sub	sp, #8
 8010d94:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8010d96:	e00c      	b.n	8010db2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8010d98:	1d3b      	adds	r3, r7, #4
 8010d9a:	4619      	mov	r1, r3
 8010d9c:	480a      	ldr	r0, [pc, #40]	; (8010dc8 <SendFreeBuf+0x38>)
 8010d9e:	f000 f96a 	bl	8011076 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8010da2:	4b0a      	ldr	r3, [pc, #40]	; (8010dcc <SendFreeBuf+0x3c>)
 8010da4:	691b      	ldr	r3, [r3, #16]
 8010da6:	691b      	ldr	r3, [r3, #16]
 8010da8:	687a      	ldr	r2, [r7, #4]
 8010daa:	4611      	mov	r1, r2
 8010dac:	4618      	mov	r0, r3
 8010dae:	f000 f91b 	bl	8010fe8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8010db2:	4805      	ldr	r0, [pc, #20]	; (8010dc8 <SendFreeBuf+0x38>)
 8010db4:	f000 f8d0 	bl	8010f58 <LST_is_empty>
 8010db8:	4603      	mov	r3, r0
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d0ec      	beq.n	8010d98 <SendFreeBuf+0x8>
  }

  return;
 8010dbe:	bf00      	nop
}
 8010dc0:	3708      	adds	r7, #8
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}
 8010dc6:	bf00      	nop
 8010dc8:	20000908 	.word	0x20000908
 8010dcc:	20030000 	.word	0x20030000

08010dd0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8010dd4:	4805      	ldr	r0, [pc, #20]	; (8010dec <TL_TRACES_Init+0x1c>)
 8010dd6:	f000 f8af 	bl	8010f38 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8010dda:	4b05      	ldr	r3, [pc, #20]	; (8010df0 <TL_TRACES_Init+0x20>)
 8010ddc:	695b      	ldr	r3, [r3, #20]
 8010dde:	4a03      	ldr	r2, [pc, #12]	; (8010dec <TL_TRACES_Init+0x1c>)
 8010de0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8010de2:	f002 fa5b 	bl	801329c <HW_IPCC_TRACES_Init>

  return;
 8010de6:	bf00      	nop
}
 8010de8:	bd80      	pop	{r7, pc}
 8010dea:	bf00      	nop
 8010dec:	200300c0 	.word	0x200300c0
 8010df0:	20030000 	.word	0x20030000

08010df4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b082      	sub	sp, #8
 8010df8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8010dfa:	e008      	b.n	8010e0e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8010dfc:	1d3b      	adds	r3, r7, #4
 8010dfe:	4619      	mov	r1, r3
 8010e00:	4808      	ldr	r0, [pc, #32]	; (8010e24 <HW_IPCC_TRACES_EvtNot+0x30>)
 8010e02:	f000 f938 	bl	8011076 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	4618      	mov	r0, r3
 8010e0a:	f000 f80d 	bl	8010e28 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8010e0e:	4805      	ldr	r0, [pc, #20]	; (8010e24 <HW_IPCC_TRACES_EvtNot+0x30>)
 8010e10:	f000 f8a2 	bl	8010f58 <LST_is_empty>
 8010e14:	4603      	mov	r3, r0
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d0f0      	beq.n	8010dfc <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8010e1a:	bf00      	nop
}
 8010e1c:	3708      	adds	r7, #8
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}
 8010e22:	bf00      	nop
 8010e24:	200300c0 	.word	0x200300c0

08010e28 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8010e28:	b480      	push	{r7}
 8010e2a:	b083      	sub	sp, #12
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8010e30:	bf00      	nop
 8010e32:	370c      	adds	r7, #12
 8010e34:	46bd      	mov	sp, r7
 8010e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3a:	4770      	bx	lr

08010e3c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8010e3c:	b480      	push	{r7}
 8010e3e:	b085      	sub	sp, #20
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	4603      	mov	r3, r0
 8010e44:	6039      	str	r1, [r7, #0]
 8010e46:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8010e48:	79fb      	ldrb	r3, [r7, #7]
 8010e4a:	2b06      	cmp	r3, #6
 8010e4c:	d845      	bhi.n	8010eda <OutputDbgTrace+0x9e>
 8010e4e:	a201      	add	r2, pc, #4	; (adr r2, 8010e54 <OutputDbgTrace+0x18>)
 8010e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e54:	08010e71 	.word	0x08010e71
 8010e58:	08010e95 	.word	0x08010e95
 8010e5c:	08010e9b 	.word	0x08010e9b
 8010e60:	08010eaf 	.word	0x08010eaf
 8010e64:	08010ebb 	.word	0x08010ebb
 8010e68:	08010ec1 	.word	0x08010ec1
 8010e6c:	08010ecf 	.word	0x08010ecf
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010e70:	683b      	ldr	r3, [r7, #0]
 8010e72:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	7a5b      	ldrb	r3, [r3, #9]
 8010e78:	2bff      	cmp	r3, #255	; 0xff
 8010e7a:	d005      	beq.n	8010e88 <OutputDbgTrace+0x4c>
 8010e7c:	2bff      	cmp	r3, #255	; 0xff
 8010e7e:	dc05      	bgt.n	8010e8c <OutputDbgTrace+0x50>
 8010e80:	2b0e      	cmp	r3, #14
 8010e82:	d005      	beq.n	8010e90 <OutputDbgTrace+0x54>
 8010e84:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8010e86:	e001      	b.n	8010e8c <OutputDbgTrace+0x50>
          break;
 8010e88:	bf00      	nop
 8010e8a:	e027      	b.n	8010edc <OutputDbgTrace+0xa0>
          break;
 8010e8c:	bf00      	nop
 8010e8e:	e025      	b.n	8010edc <OutputDbgTrace+0xa0>
          break;
 8010e90:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8010e92:	e023      	b.n	8010edc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8010e94:	683b      	ldr	r3, [r7, #0]
 8010e96:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8010e98:	e020      	b.n	8010edc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010e9a:	683b      	ldr	r3, [r7, #0]
 8010e9c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	7a5b      	ldrb	r3, [r3, #9]
 8010ea2:	2b0e      	cmp	r3, #14
 8010ea4:	d001      	beq.n	8010eaa <OutputDbgTrace+0x6e>
 8010ea6:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8010ea8:	e000      	b.n	8010eac <OutputDbgTrace+0x70>
          break;
 8010eaa:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010eac:	e016      	b.n	8010edc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010eae:	683b      	ldr	r3, [r7, #0]
 8010eb0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	7a5b      	ldrb	r3, [r3, #9]
 8010eb6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010eb8:	e010      	b.n	8010edc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8010ebe:	e00d      	b.n	8010edc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010ec0:	683b      	ldr	r3, [r7, #0]
 8010ec2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	7a5b      	ldrb	r3, [r3, #9]
 8010ec8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8010eca:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010ecc:	e006      	b.n	8010edc <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010ece:	683b      	ldr	r3, [r7, #0]
 8010ed0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	7a5b      	ldrb	r3, [r3, #9]
 8010ed6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010ed8:	e000      	b.n	8010edc <OutputDbgTrace+0xa0>

    default:
      break;
 8010eda:	bf00      	nop
  }

  return;
 8010edc:	bf00      	nop
}
 8010ede:	3714      	adds	r7, #20
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee6:	4770      	bx	lr

08010ee8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8010ee8:	b480      	push	{r7}
 8010eea:	b085      	sub	sp, #20
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	4603      	mov	r3, r0
 8010ef0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8010ef2:	4b0f      	ldr	r3, [pc, #60]	; (8010f30 <OTP_Read+0x48>)
 8010ef4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8010ef6:	e002      	b.n	8010efe <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	3b08      	subs	r3, #8
 8010efc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	3307      	adds	r3, #7
 8010f02:	781b      	ldrb	r3, [r3, #0]
 8010f04:	79fa      	ldrb	r2, [r7, #7]
 8010f06:	429a      	cmp	r2, r3
 8010f08:	d003      	beq.n	8010f12 <OTP_Read+0x2a>
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	4a09      	ldr	r2, [pc, #36]	; (8010f34 <OTP_Read+0x4c>)
 8010f0e:	4293      	cmp	r3, r2
 8010f10:	d1f2      	bne.n	8010ef8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	3307      	adds	r3, #7
 8010f16:	781b      	ldrb	r3, [r3, #0]
 8010f18:	79fa      	ldrb	r2, [r7, #7]
 8010f1a:	429a      	cmp	r2, r3
 8010f1c:	d001      	beq.n	8010f22 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8010f22:	68fb      	ldr	r3, [r7, #12]
}
 8010f24:	4618      	mov	r0, r3
 8010f26:	3714      	adds	r7, #20
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2e:	4770      	bx	lr
 8010f30:	1fff73f8 	.word	0x1fff73f8
 8010f34:	1fff7000 	.word	0x1fff7000

08010f38 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8010f38:	b480      	push	{r7}
 8010f3a:	b083      	sub	sp, #12
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	687a      	ldr	r2, [r7, #4]
 8010f44:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	687a      	ldr	r2, [r7, #4]
 8010f4a:	605a      	str	r2, [r3, #4]
}
 8010f4c:	bf00      	nop
 8010f4e:	370c      	adds	r7, #12
 8010f50:	46bd      	mov	sp, r7
 8010f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f56:	4770      	bx	lr

08010f58 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8010f58:	b480      	push	{r7}
 8010f5a:	b087      	sub	sp, #28
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f60:	f3ef 8310 	mrs	r3, PRIMASK
 8010f64:	60fb      	str	r3, [r7, #12]
  return(result);
 8010f66:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010f68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8010f6a:	b672      	cpsid	i
}
 8010f6c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	687a      	ldr	r2, [r7, #4]
 8010f74:	429a      	cmp	r2, r3
 8010f76:	d102      	bne.n	8010f7e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8010f78:	2301      	movs	r3, #1
 8010f7a:	75fb      	strb	r3, [r7, #23]
 8010f7c:	e001      	b.n	8010f82 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8010f7e:	2300      	movs	r3, #0
 8010f80:	75fb      	strb	r3, [r7, #23]
 8010f82:	693b      	ldr	r3, [r7, #16]
 8010f84:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	f383 8810 	msr	PRIMASK, r3
}
 8010f8c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8010f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	371c      	adds	r7, #28
 8010f94:	46bd      	mov	sp, r7
 8010f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9a:	4770      	bx	lr

08010f9c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8010f9c:	b480      	push	{r7}
 8010f9e:	b087      	sub	sp, #28
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
 8010fa4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8010faa:	60fb      	str	r3, [r7, #12]
  return(result);
 8010fac:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010fae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010fb0:	b672      	cpsid	i
}
 8010fb2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	681a      	ldr	r2, [r3, #0]
 8010fb8:	683b      	ldr	r3, [r7, #0]
 8010fba:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	687a      	ldr	r2, [r7, #4]
 8010fc0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	683a      	ldr	r2, [r7, #0]
 8010fc6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	683a      	ldr	r2, [r7, #0]
 8010fce:	605a      	str	r2, [r3, #4]
 8010fd0:	697b      	ldr	r3, [r7, #20]
 8010fd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010fd4:	693b      	ldr	r3, [r7, #16]
 8010fd6:	f383 8810 	msr	PRIMASK, r3
}
 8010fda:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010fdc:	bf00      	nop
 8010fde:	371c      	adds	r7, #28
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe6:	4770      	bx	lr

08010fe8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8010fe8:	b480      	push	{r7}
 8010fea:	b087      	sub	sp, #28
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
 8010ff0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8010ff6:	60fb      	str	r3, [r7, #12]
  return(result);
 8010ff8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010ffa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010ffc:	b672      	cpsid	i
}
 8010ffe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	687a      	ldr	r2, [r7, #4]
 8011004:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	685a      	ldr	r2, [r3, #4]
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	683a      	ldr	r2, [r7, #0]
 8011012:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8011014:	683b      	ldr	r3, [r7, #0]
 8011016:	685b      	ldr	r3, [r3, #4]
 8011018:	683a      	ldr	r2, [r7, #0]
 801101a:	601a      	str	r2, [r3, #0]
 801101c:	697b      	ldr	r3, [r7, #20]
 801101e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011020:	693b      	ldr	r3, [r7, #16]
 8011022:	f383 8810 	msr	PRIMASK, r3
}
 8011026:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8011028:	bf00      	nop
 801102a:	371c      	adds	r7, #28
 801102c:	46bd      	mov	sp, r7
 801102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011032:	4770      	bx	lr

08011034 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8011034:	b480      	push	{r7}
 8011036:	b087      	sub	sp, #28
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801103c:	f3ef 8310 	mrs	r3, PRIMASK
 8011040:	60fb      	str	r3, [r7, #12]
  return(result);
 8011042:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011044:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011046:	b672      	cpsid	i
}
 8011048:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	685b      	ldr	r3, [r3, #4]
 801104e:	687a      	ldr	r2, [r7, #4]
 8011050:	6812      	ldr	r2, [r2, #0]
 8011052:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	687a      	ldr	r2, [r7, #4]
 801105a:	6852      	ldr	r2, [r2, #4]
 801105c:	605a      	str	r2, [r3, #4]
 801105e:	697b      	ldr	r3, [r7, #20]
 8011060:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011062:	693b      	ldr	r3, [r7, #16]
 8011064:	f383 8810 	msr	PRIMASK, r3
}
 8011068:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801106a:	bf00      	nop
 801106c:	371c      	adds	r7, #28
 801106e:	46bd      	mov	sp, r7
 8011070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011074:	4770      	bx	lr

08011076 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8011076:	b580      	push	{r7, lr}
 8011078:	b086      	sub	sp, #24
 801107a:	af00      	add	r7, sp, #0
 801107c:	6078      	str	r0, [r7, #4]
 801107e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011080:	f3ef 8310 	mrs	r3, PRIMASK
 8011084:	60fb      	str	r3, [r7, #12]
  return(result);
 8011086:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011088:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801108a:	b672      	cpsid	i
}
 801108c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	681a      	ldr	r2, [r3, #0]
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	4618      	mov	r0, r3
 801109c:	f7ff ffca 	bl	8011034 <LST_remove_node>
 80110a0:	697b      	ldr	r3, [r7, #20]
 80110a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	f383 8810 	msr	PRIMASK, r3
}
 80110aa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80110ac:	bf00      	nop
 80110ae:	3718      	adds	r7, #24
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}

080110b4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80110b4:	b480      	push	{r7}
 80110b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80110b8:	4b03      	ldr	r3, [pc, #12]	; (80110c8 <LL_FLASH_GetUDN+0x14>)
 80110ba:	681b      	ldr	r3, [r3, #0]
}
 80110bc:	4618      	mov	r0, r3
 80110be:	46bd      	mov	sp, r7
 80110c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c4:	4770      	bx	lr
 80110c6:	bf00      	nop
 80110c8:	1fff7580 	.word	0x1fff7580

080110cc <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80110cc:	b480      	push	{r7}
 80110ce:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80110d0:	4b03      	ldr	r3, [pc, #12]	; (80110e0 <LL_FLASH_GetDeviceID+0x14>)
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	b2db      	uxtb	r3, r3
}
 80110d6:	4618      	mov	r0, r3
 80110d8:	46bd      	mov	sp, r7
 80110da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110de:	4770      	bx	lr
 80110e0:	1fff7584 	.word	0x1fff7584

080110e4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80110e4:	b480      	push	{r7}
 80110e6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80110e8:	4b03      	ldr	r3, [pc, #12]	; (80110f8 <LL_FLASH_GetSTCompanyID+0x14>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	0a1b      	lsrs	r3, r3, #8
}
 80110ee:	4618      	mov	r0, r3
 80110f0:	46bd      	mov	sp, r7
 80110f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f6:	4770      	bx	lr
 80110f8:	1fff7584 	.word	0x1fff7584

080110fc <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80110fc:	b5b0      	push	{r4, r5, r7, lr}
 80110fe:	b090      	sub	sp, #64	; 0x40
 8011100:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8011102:	2392      	movs	r3, #146	; 0x92
 8011104:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8011108:	4b27      	ldr	r3, [pc, #156]	; (80111a8 <APP_BLE_Init+0xac>)
 801110a:	1d3c      	adds	r4, r7, #4
 801110c:	461d      	mov	r5, r3
 801110e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011114:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801111a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801111e:	c403      	stmia	r4!, {r0, r1}
 8011120:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8011122:	f000 f909 	bl	8011338 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8011126:	2101      	movs	r1, #1
 8011128:	2002      	movs	r0, #2
 801112a:	f002 fe1b 	bl	8013d64 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 801112e:	4a1f      	ldr	r2, [pc, #124]	; (80111ac <APP_BLE_Init+0xb0>)
 8011130:	2100      	movs	r1, #0
 8011132:	2002      	movs	r0, #2
 8011134:	f002 ff42 	bl	8013fbc <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8011138:	1d3b      	adds	r3, r7, #4
 801113a:	4618      	mov	r0, r3
 801113c:	f7ff f8d0 	bl	80102e0 <SHCI_C2_BLE_Init>
 8011140:	4603      	mov	r3, r0
 8011142:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8011146:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801114a:	2b00      	cmp	r3, #0
 801114c:	d001      	beq.n	8011152 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 801114e:	f7f0 fe1f 	bl	8001d90 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8011152:	f000 f907 	bl	8011364 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8011156:	f7ff f81d 	bl	8010194 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 801115a:	4b15      	ldr	r3, [pc, #84]	; (80111b0 <APP_BLE_Init+0xb4>)
 801115c:	2200      	movs	r2, #0
 801115e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8011162:	4b13      	ldr	r3, [pc, #76]	; (80111b0 <APP_BLE_Init+0xb4>)
 8011164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011168:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 801116a:	4a12      	ldr	r2, [pc, #72]	; (80111b4 <APP_BLE_Init+0xb8>)
 801116c:	2100      	movs	r1, #0
 801116e:	2001      	movs	r0, #1
 8011170:	f002 ff24 	bl	8013fbc <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8011174:	2006      	movs	r0, #6
 8011176:	f7fe fe80 	bl	800fe7a <aci_hal_set_radio_activity_mask>
 801117a:	4603      	mov	r3, r0
 801117c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8011180:	f000 fb10 	bl	80117a4 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8011184:	4b0a      	ldr	r3, [pc, #40]	; (80111b0 <APP_BLE_Init+0xb4>)
 8011186:	2200      	movs	r2, #0
 8011188:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 801118a:	4b09      	ldr	r3, [pc, #36]	; (80111b0 <APP_BLE_Init+0xb4>)
 801118c:	2200      	movs	r2, #0
 801118e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8011190:	2001      	movs	r0, #1
 8011192:	f000 f99b 	bl	80114cc <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */
  //Ejecutar Task 1
  UTIL_SEQ_SetTask( 1<< CFG_TASK_MAIN, CFG_SCH_PRIO_0);
 8011196:	2100      	movs	r1, #0
 8011198:	2004      	movs	r0, #4
 801119a:	f002 ff31 	bl	8014000 <UTIL_SEQ_SetTask>
  /* USER CODE END APP_BLE_Init_2 */

  return;
 801119e:	bf00      	nop
}
 80111a0:	3740      	adds	r7, #64	; 0x40
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bdb0      	pop	{r4, r5, r7, pc}
 80111a6:	bf00      	nop
 80111a8:	08016ebc 	.word	0x08016ebc
 80111ac:	080104fd 	.word	0x080104fd
 80111b0:	2000092c 	.word	0x2000092c
 80111b4:	080115b5 	.word	0x080115b5

080111b8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b08a      	sub	sp, #40	; 0x28
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 80111c0:	2392      	movs	r3, #146	; 0x92
 80111c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	3301      	adds	r3, #1
 80111ca:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 80111cc:	6a3b      	ldr	r3, [r7, #32]
 80111ce:	781b      	ldrb	r3, [r3, #0]
 80111d0:	2bff      	cmp	r3, #255	; 0xff
 80111d2:	d053      	beq.n	801127c <SVCCTL_App_Notification+0xc4>
 80111d4:	2bff      	cmp	r3, #255	; 0xff
 80111d6:	f300 80a1 	bgt.w	801131c <SVCCTL_App_Notification+0x164>
 80111da:	2b05      	cmp	r3, #5
 80111dc:	d002      	beq.n	80111e4 <SVCCTL_App_Notification+0x2c>
 80111de:	2b3e      	cmp	r3, #62	; 0x3e
 80111e0:	d020      	beq.n	8011224 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80111e2:	e09b      	b.n	801131c <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80111e4:	6a3b      	ldr	r3, [r7, #32]
 80111e6:	3302      	adds	r3, #2
 80111e8:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80111f0:	b29a      	uxth	r2, r3
 80111f2:	4b4e      	ldr	r3, [pc, #312]	; (801132c <SVCCTL_App_Notification+0x174>)
 80111f4:	8adb      	ldrh	r3, [r3, #22]
 80111f6:	429a      	cmp	r2, r3
 80111f8:	d106      	bne.n	8011208 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80111fa:	4b4c      	ldr	r3, [pc, #304]	; (801132c <SVCCTL_App_Notification+0x174>)
 80111fc:	2200      	movs	r2, #0
 80111fe:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8011200:	4b4a      	ldr	r3, [pc, #296]	; (801132c <SVCCTL_App_Notification+0x174>)
 8011202:	2200      	movs	r2, #0
 8011204:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8011208:	2001      	movs	r0, #1
 801120a:	f000 f95f 	bl	80114cc <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 801120e:	4b48      	ldr	r3, [pc, #288]	; (8011330 <SVCCTL_App_Notification+0x178>)
 8011210:	2201      	movs	r2, #1
 8011212:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8011214:	4b45      	ldr	r3, [pc, #276]	; (801132c <SVCCTL_App_Notification+0x174>)
 8011216:	8ada      	ldrh	r2, [r3, #22]
 8011218:	4b45      	ldr	r3, [pc, #276]	; (8011330 <SVCCTL_App_Notification+0x178>)
 801121a:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 801121c:	4844      	ldr	r0, [pc, #272]	; (8011330 <SVCCTL_App_Notification+0x178>)
 801121e:	f000 faad 	bl	801177c <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8011222:	e07e      	b.n	8011322 <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8011224:	6a3b      	ldr	r3, [r7, #32]
 8011226:	3302      	adds	r3, #2
 8011228:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 801122a:	697b      	ldr	r3, [r7, #20]
 801122c:	781b      	ldrb	r3, [r3, #0]
 801122e:	2b01      	cmp	r3, #1
 8011230:	d001      	beq.n	8011236 <SVCCTL_App_Notification+0x7e>
 8011232:	2b03      	cmp	r3, #3
          break;
 8011234:	e021      	b.n	801127a <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8011236:	697b      	ldr	r3, [r7, #20]
 8011238:	3301      	adds	r3, #1
 801123a:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 801123c:	4b3b      	ldr	r3, [pc, #236]	; (801132c <SVCCTL_App_Notification+0x174>)
 801123e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011242:	2b04      	cmp	r3, #4
 8011244:	d104      	bne.n	8011250 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8011246:	4b39      	ldr	r3, [pc, #228]	; (801132c <SVCCTL_App_Notification+0x174>)
 8011248:	2206      	movs	r2, #6
 801124a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 801124e:	e003      	b.n	8011258 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8011250:	4b36      	ldr	r3, [pc, #216]	; (801132c <SVCCTL_App_Notification+0x174>)
 8011252:	2205      	movs	r2, #5
 8011254:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8011258:	693b      	ldr	r3, [r7, #16]
 801125a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801125e:	b29a      	uxth	r2, r3
 8011260:	4b32      	ldr	r3, [pc, #200]	; (801132c <SVCCTL_App_Notification+0x174>)
 8011262:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8011264:	4b32      	ldr	r3, [pc, #200]	; (8011330 <SVCCTL_App_Notification+0x178>)
 8011266:	2200      	movs	r2, #0
 8011268:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 801126a:	4b30      	ldr	r3, [pc, #192]	; (801132c <SVCCTL_App_Notification+0x174>)
 801126c:	8ada      	ldrh	r2, [r3, #22]
 801126e:	4b30      	ldr	r3, [pc, #192]	; (8011330 <SVCCTL_App_Notification+0x178>)
 8011270:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8011272:	482f      	ldr	r0, [pc, #188]	; (8011330 <SVCCTL_App_Notification+0x178>)
 8011274:	f000 fa82 	bl	801177c <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8011278:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 801127a:	e052      	b.n	8011322 <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 801127c:	6a3b      	ldr	r3, [r7, #32]
 801127e:	3302      	adds	r3, #2
 8011280:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8011282:	69fb      	ldr	r3, [r7, #28]
 8011284:	881b      	ldrh	r3, [r3, #0]
 8011286:	b29b      	uxth	r3, r3
 8011288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801128c:	d040      	beq.n	8011310 <SVCCTL_App_Notification+0x158>
 801128e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011292:	dc45      	bgt.n	8011320 <SVCCTL_App_Notification+0x168>
 8011294:	2b04      	cmp	r3, #4
 8011296:	d03d      	beq.n	8011314 <SVCCTL_App_Notification+0x15c>
 8011298:	2b04      	cmp	r3, #4
 801129a:	db41      	blt.n	8011320 <SVCCTL_App_Notification+0x168>
 801129c:	f240 420a 	movw	r2, #1034	; 0x40a
 80112a0:	4293      	cmp	r3, r2
 80112a2:	dc3d      	bgt.n	8011320 <SVCCTL_App_Notification+0x168>
 80112a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80112a8:	dd3a      	ble.n	8011320 <SVCCTL_App_Notification+0x168>
 80112aa:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 80112ae:	2b09      	cmp	r3, #9
 80112b0:	d836      	bhi.n	8011320 <SVCCTL_App_Notification+0x168>
 80112b2:	a201      	add	r2, pc, #4	; (adr r2, 80112b8 <SVCCTL_App_Notification+0x100>)
 80112b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112b8:	08011309 	.word	0x08011309
 80112bc:	080112e1 	.word	0x080112e1
 80112c0:	08011321 	.word	0x08011321
 80112c4:	08011321 	.word	0x08011321
 80112c8:	08011321 	.word	0x08011321
 80112cc:	08011321 	.word	0x08011321
 80112d0:	08011319 	.word	0x08011319
 80112d4:	08011321 	.word	0x08011321
 80112d8:	080112f5 	.word	0x080112f5
 80112dc:	08011319 	.word	0x08011319
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80112e0:	4b12      	ldr	r3, [pc, #72]	; (801132c <SVCCTL_App_Notification+0x174>)
 80112e2:	8adb      	ldrh	r3, [r3, #22]
 80112e4:	4913      	ldr	r1, [pc, #76]	; (8011334 <SVCCTL_App_Notification+0x17c>)
 80112e6:	4618      	mov	r0, r3
 80112e8:	f7fe f81e 	bl	800f328 <aci_gap_pass_key_resp>
 80112ec:	4603      	mov	r3, r0
 80112ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80112f2:	e012      	b.n	801131a <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 80112f4:	4b0d      	ldr	r3, [pc, #52]	; (801132c <SVCCTL_App_Notification+0x174>)
 80112f6:	8adb      	ldrh	r3, [r3, #22]
 80112f8:	2101      	movs	r1, #1
 80112fa:	4618      	mov	r0, r3
 80112fc:	f7fe f9be 	bl	800f67c <aci_gap_numeric_comparison_value_confirm_yesno>
 8011300:	4603      	mov	r3, r0
 8011302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8011306:	e008      	b.n	801131a <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8011308:	69fb      	ldr	r3, [r7, #28]
 801130a:	3302      	adds	r3, #2
 801130c:	61bb      	str	r3, [r7, #24]
          break;
 801130e:	e004      	b.n	801131a <SVCCTL_App_Notification+0x162>
          break;
 8011310:	bf00      	nop
 8011312:	e005      	b.n	8011320 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8011314:	bf00      	nop
 8011316:	e003      	b.n	8011320 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8011318:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 801131a:	e001      	b.n	8011320 <SVCCTL_App_Notification+0x168>
      break;
 801131c:	bf00      	nop
 801131e:	e000      	b.n	8011322 <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8011320:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8011322:	2301      	movs	r3, #1
}
 8011324:	4618      	mov	r0, r3
 8011326:	3728      	adds	r7, #40	; 0x28
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}
 801132c:	2000092c 	.word	0x2000092c
 8011330:	200009b0 	.word	0x200009b0
 8011334:	0001b207 	.word	0x0001b207

08011338 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b082      	sub	sp, #8
 801133c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 801133e:	4b06      	ldr	r3, [pc, #24]	; (8011358 <Ble_Tl_Init+0x20>)
 8011340:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8011342:	4b06      	ldr	r3, [pc, #24]	; (801135c <Ble_Tl_Init+0x24>)
 8011344:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8011346:	463b      	mov	r3, r7
 8011348:	4619      	mov	r1, r3
 801134a:	4805      	ldr	r0, [pc, #20]	; (8011360 <Ble_Tl_Init+0x28>)
 801134c:	f7ff f8ba 	bl	80104c4 <hci_init>

  return;
 8011350:	bf00      	nop
}
 8011352:	3708      	adds	r7, #8
 8011354:	46bd      	mov	sp, r7
 8011356:	bd80      	pop	{r7, pc}
 8011358:	200300d8 	.word	0x200300d8
 801135c:	08011665 	.word	0x08011665
 8011360:	0801162d 	.word	0x0801162d

08011364 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8011364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011366:	b08d      	sub	sp, #52	; 0x34
 8011368:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 801136a:	2300      	movs	r3, #0
 801136c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801136e:	2392      	movs	r3, #146	; 0x92
 8011370:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8011372:	f7fe fdd6 	bl	800ff22 <hci_reset>
 8011376:	4603      	mov	r3, r0
 8011378:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 801137a:	f000 f8d7 	bl	801152c <BleGetBdAddress>
 801137e:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8011380:	693a      	ldr	r2, [r7, #16]
 8011382:	2106      	movs	r1, #6
 8011384:	2000      	movs	r0, #0
 8011386:	f7fe fc8c 	bl	800fca2 <aci_hal_write_config_data>
 801138a:	4603      	mov	r3, r0
 801138c:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 801138e:	4a4a      	ldr	r2, [pc, #296]	; (80114b8 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8011390:	2110      	movs	r1, #16
 8011392:	2018      	movs	r0, #24
 8011394:	f7fe fc85 	bl	800fca2 <aci_hal_write_config_data>
 8011398:	4603      	mov	r3, r0
 801139a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 801139c:	4a47      	ldr	r2, [pc, #284]	; (80114bc <Ble_Hci_Gap_Gatt_Init+0x158>)
 801139e:	2110      	movs	r1, #16
 80113a0:	2008      	movs	r0, #8
 80113a2:	f7fe fc7e 	bl	800fca2 <aci_hal_write_config_data>
 80113a6:	4603      	mov	r3, r0
 80113a8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80113aa:	2117      	movs	r1, #23
 80113ac:	2001      	movs	r0, #1
 80113ae:	f7fe fcfd 	bl	800fdac <aci_hal_set_tx_power_level>
 80113b2:	4603      	mov	r3, r0
 80113b4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80113b6:	f7fe f9c8 	bl	800f74a <aci_gatt_init>
 80113ba:	4603      	mov	r3, r0
 80113bc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80113be:	2300      	movs	r3, #0
 80113c0:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80113c2:	7bfb      	ldrb	r3, [r7, #15]
 80113c4:	f043 0301 	orr.w	r3, r3, #1
 80113c8:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 80113ca:	7bfb      	ldrb	r3, [r7, #15]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d01f      	beq.n	8011410 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 80113d0:	4b3b      	ldr	r3, [pc, #236]	; (80114c0 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 80113d2:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80113d4:	1dba      	adds	r2, r7, #6
 80113d6:	7bf8      	ldrb	r0, [r7, #15]
 80113d8:	1cbb      	adds	r3, r7, #2
 80113da:	9301      	str	r3, [sp, #4]
 80113dc:	1d3b      	adds	r3, r7, #4
 80113de:	9300      	str	r3, [sp, #0]
 80113e0:	4613      	mov	r3, r2
 80113e2:	2207      	movs	r2, #7
 80113e4:	2100      	movs	r1, #0
 80113e6:	f7fe f806 	bl	800f3f6 <aci_gap_init>
 80113ea:	4603      	mov	r3, r0
 80113ec:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80113ee:	88fc      	ldrh	r4, [r7, #6]
 80113f0:	88bd      	ldrh	r5, [r7, #4]
 80113f2:	68b8      	ldr	r0, [r7, #8]
 80113f4:	f7ee fec4 	bl	8000180 <strlen>
 80113f8:	4603      	mov	r3, r0
 80113fa:	b2da      	uxtb	r2, r3
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	9300      	str	r3, [sp, #0]
 8011400:	4613      	mov	r3, r2
 8011402:	2200      	movs	r2, #0
 8011404:	4629      	mov	r1, r5
 8011406:	4620      	mov	r0, r4
 8011408:	f7fe fba2 	bl	800fb50 <aci_gatt_update_char_value>
 801140c:	4603      	mov	r3, r0
 801140e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8011410:	88f8      	ldrh	r0, [r7, #6]
 8011412:	8879      	ldrh	r1, [r7, #2]
 8011414:	463b      	mov	r3, r7
 8011416:	9300      	str	r3, [sp, #0]
 8011418:	2302      	movs	r3, #2
 801141a:	2200      	movs	r2, #0
 801141c:	f7fe fb98 	bl	800fb50 <aci_gatt_update_char_value>
 8011420:	4603      	mov	r3, r0
 8011422:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8011424:	2202      	movs	r2, #2
 8011426:	2102      	movs	r1, #2
 8011428:	2000      	movs	r0, #0
 801142a:	f7fe fd9e 	bl	800ff6a <hci_le_set_default_phy>
 801142e:	4603      	mov	r3, r0
 8011430:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8011432:	4b24      	ldr	r3, [pc, #144]	; (80114c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011434:	2203      	movs	r2, #3
 8011436:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8011438:	4b22      	ldr	r3, [pc, #136]	; (80114c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801143a:	781b      	ldrb	r3, [r3, #0]
 801143c:	4618      	mov	r0, r3
 801143e:	f7fd fe5b 	bl	800f0f8 <aci_gap_set_io_capability>
 8011442:	4603      	mov	r3, r0
 8011444:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8011446:	4b1f      	ldr	r3, [pc, #124]	; (80114c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011448:	2200      	movs	r2, #0
 801144a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 801144c:	4b1d      	ldr	r3, [pc, #116]	; (80114c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801144e:	2208      	movs	r2, #8
 8011450:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8011452:	4b1c      	ldr	r3, [pc, #112]	; (80114c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011454:	2210      	movs	r2, #16
 8011456:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8011458:	4b1a      	ldr	r3, [pc, #104]	; (80114c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801145a:	2200      	movs	r2, #0
 801145c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 801145e:	4b19      	ldr	r3, [pc, #100]	; (80114c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011460:	4a19      	ldr	r2, [pc, #100]	; (80114c8 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8011462:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8011464:	4b17      	ldr	r3, [pc, #92]	; (80114c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011466:	2201      	movs	r2, #1
 8011468:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 801146a:	4b16      	ldr	r3, [pc, #88]	; (80114c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801146c:	789c      	ldrb	r4, [r3, #2]
 801146e:	4b15      	ldr	r3, [pc, #84]	; (80114c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011470:	785d      	ldrb	r5, [r3, #1]
 8011472:	4b14      	ldr	r3, [pc, #80]	; (80114c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011474:	791b      	ldrb	r3, [r3, #4]
 8011476:	4a13      	ldr	r2, [pc, #76]	; (80114c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011478:	7952      	ldrb	r2, [r2, #5]
 801147a:	4912      	ldr	r1, [pc, #72]	; (80114c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801147c:	78c9      	ldrb	r1, [r1, #3]
 801147e:	4811      	ldr	r0, [pc, #68]	; (80114c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011480:	6880      	ldr	r0, [r0, #8]
 8011482:	2600      	movs	r6, #0
 8011484:	9604      	str	r6, [sp, #16]
 8011486:	9003      	str	r0, [sp, #12]
 8011488:	9102      	str	r1, [sp, #8]
 801148a:	9201      	str	r2, [sp, #4]
 801148c:	9300      	str	r3, [sp, #0]
 801148e:	2300      	movs	r3, #0
 8011490:	2201      	movs	r2, #1
 8011492:	4629      	mov	r1, r5
 8011494:	4620      	mov	r0, r4
 8011496:	f7fd fe83 	bl	800f1a0 <aci_gap_set_authentication_requirement>
 801149a:	4603      	mov	r3, r0
 801149c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 801149e:	4b09      	ldr	r3, [pc, #36]	; (80114c4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80114a0:	789b      	ldrb	r3, [r3, #2]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d003      	beq.n	80114ae <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 80114a6:	f7fe f8c5 	bl	800f634 <aci_gap_configure_whitelist>
 80114aa:	4603      	mov	r3, r0
 80114ac:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 80114ae:	bf00      	nop
 80114b0:	371c      	adds	r7, #28
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114b6:	bf00      	nop
 80114b8:	08017a24 	.word	0x08017a24
 80114bc:	08017a34 	.word	0x08017a34
 80114c0:	08016ef8 	.word	0x08016ef8
 80114c4:	2000092c 	.word	0x2000092c
 80114c8:	0001b207 	.word	0x0001b207

080114cc <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b08c      	sub	sp, #48	; 0x30
 80114d0:	af08      	add	r7, sp, #32
 80114d2:	4603      	mov	r3, r0
 80114d4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80114d6:	2392      	movs	r3, #146	; 0x92
 80114d8:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80114da:	4a12      	ldr	r2, [pc, #72]	; (8011524 <Adv_Request+0x58>)
 80114dc:	79fb      	ldrb	r3, [r7, #7]
 80114de:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 80114e2:	2300      	movs	r3, #0
 80114e4:	9306      	str	r3, [sp, #24]
 80114e6:	2300      	movs	r3, #0
 80114e8:	9305      	str	r3, [sp, #20]
 80114ea:	2300      	movs	r3, #0
 80114ec:	9304      	str	r3, [sp, #16]
 80114ee:	2300      	movs	r3, #0
 80114f0:	9303      	str	r3, [sp, #12]
 80114f2:	2300      	movs	r3, #0
 80114f4:	9302      	str	r3, [sp, #8]
 80114f6:	2300      	movs	r3, #0
 80114f8:	9301      	str	r3, [sp, #4]
 80114fa:	2300      	movs	r3, #0
 80114fc:	9300      	str	r3, [sp, #0]
 80114fe:	2300      	movs	r3, #0
 8011500:	22a0      	movs	r2, #160	; 0xa0
 8011502:	2180      	movs	r1, #128	; 0x80
 8011504:	2000      	movs	r0, #0
 8011506:	f7fd fcfd 	bl	800ef04 <aci_gap_set_discoverable>
 801150a:	4603      	mov	r3, r0
 801150c:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 801150e:	4906      	ldr	r1, [pc, #24]	; (8011528 <Adv_Request+0x5c>)
 8011510:	2012      	movs	r0, #18
 8011512:	f7fe f81d 	bl	800f550 <aci_gap_update_adv_data>
 8011516:	4603      	mov	r3, r0
 8011518:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 801151a:	bf00      	nop
}
 801151c:	3710      	adds	r7, #16
 801151e:	46bd      	mov	sp, r7
 8011520:	bd80      	pop	{r7, pc}
 8011522:	bf00      	nop
 8011524:	2000092c 	.word	0x2000092c
 8011528:	200000a4 	.word	0x200000a4

0801152c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b086      	sub	sp, #24
 8011530:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8011532:	f7ff fdbf 	bl	80110b4 <LL_FLASH_GetUDN>
 8011536:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8011538:	693b      	ldr	r3, [r7, #16]
 801153a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801153e:	d023      	beq.n	8011588 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8011540:	f7ff fdd0 	bl	80110e4 <LL_FLASH_GetSTCompanyID>
 8011544:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8011546:	f7ff fdc1 	bl	80110cc <LL_FLASH_GetDeviceID>
 801154a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 801154c:	693b      	ldr	r3, [r7, #16]
 801154e:	b2da      	uxtb	r2, r3
 8011550:	4b16      	ldr	r3, [pc, #88]	; (80115ac <BleGetBdAddress+0x80>)
 8011552:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8011554:	693b      	ldr	r3, [r7, #16]
 8011556:	0a1b      	lsrs	r3, r3, #8
 8011558:	b2da      	uxtb	r2, r3
 801155a:	4b14      	ldr	r3, [pc, #80]	; (80115ac <BleGetBdAddress+0x80>)
 801155c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	b2da      	uxtb	r2, r3
 8011562:	4b12      	ldr	r3, [pc, #72]	; (80115ac <BleGetBdAddress+0x80>)
 8011564:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	b2da      	uxtb	r2, r3
 801156a:	4b10      	ldr	r3, [pc, #64]	; (80115ac <BleGetBdAddress+0x80>)
 801156c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	0a1b      	lsrs	r3, r3, #8
 8011572:	b2da      	uxtb	r2, r3
 8011574:	4b0d      	ldr	r3, [pc, #52]	; (80115ac <BleGetBdAddress+0x80>)
 8011576:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8011578:	68bb      	ldr	r3, [r7, #8]
 801157a:	0c1b      	lsrs	r3, r3, #16
 801157c:	b2da      	uxtb	r2, r3
 801157e:	4b0b      	ldr	r3, [pc, #44]	; (80115ac <BleGetBdAddress+0x80>)
 8011580:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8011582:	4b0a      	ldr	r3, [pc, #40]	; (80115ac <BleGetBdAddress+0x80>)
 8011584:	617b      	str	r3, [r7, #20]
 8011586:	e00b      	b.n	80115a0 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8011588:	2000      	movs	r0, #0
 801158a:	f7ff fcad 	bl	8010ee8 <OTP_Read>
 801158e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d002      	beq.n	801159c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	617b      	str	r3, [r7, #20]
 801159a:	e001      	b.n	80115a0 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 801159c:	4b04      	ldr	r3, [pc, #16]	; (80115b0 <BleGetBdAddress+0x84>)
 801159e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80115a0:	697b      	ldr	r3, [r7, #20]
}
 80115a2:	4618      	mov	r0, r3
 80115a4:	3718      	adds	r7, #24
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}
 80115aa:	bf00      	nop
 80115ac:	20000924 	.word	0x20000924
 80115b0:	08017a1c 	.word	0x08017a1c

080115b4 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b082      	sub	sp, #8
 80115b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80115ba:	4b0a      	ldr	r3, [pc, #40]	; (80115e4 <Adv_Cancel+0x30>)
 80115bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80115c0:	2b05      	cmp	r3, #5
 80115c2:	d00a      	beq.n	80115da <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80115c4:	2392      	movs	r3, #146	; 0x92
 80115c6:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80115c8:	f7fd fc78 	bl	800eebc <aci_gap_set_non_discoverable>
 80115cc:	4603      	mov	r3, r0
 80115ce:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80115d0:	4b04      	ldr	r3, [pc, #16]	; (80115e4 <Adv_Cancel+0x30>)
 80115d2:	2200      	movs	r2, #0
 80115d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 80115d8:	bf00      	nop
 80115da:	bf00      	nop
}
 80115dc:	3708      	adds	r7, #8
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd80      	pop	{r7, pc}
 80115e2:	bf00      	nop
 80115e4:	2000092c 	.word	0x2000092c

080115e8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b082      	sub	sp, #8
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80115f0:	2100      	movs	r1, #0
 80115f2:	2002      	movs	r0, #2
 80115f4:	f002 fd04 	bl	8014000 <UTIL_SEQ_SetTask>

  return;
 80115f8:	bf00      	nop
}
 80115fa:	3708      	adds	r7, #8
 80115fc:	46bd      	mov	sp, r7
 80115fe:	bd80      	pop	{r7, pc}

08011600 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b082      	sub	sp, #8
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8011608:	2001      	movs	r0, #1
 801160a:	f002 fd65 	bl	80140d8 <UTIL_SEQ_SetEvt>

  return;
 801160e:	bf00      	nop
}
 8011610:	3708      	adds	r7, #8
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}

08011616 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8011616:	b580      	push	{r7, lr}
 8011618:	b082      	sub	sp, #8
 801161a:	af00      	add	r7, sp, #0
 801161c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 801161e:	2001      	movs	r0, #1
 8011620:	f002 fd7a 	bl	8014118 <UTIL_SEQ_WaitEvt>

  return;
 8011624:	bf00      	nop
}
 8011626:	3708      	adds	r7, #8
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}

0801162c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b084      	sub	sp, #16
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	685b      	ldr	r3, [r3, #4]
 801163c:	3308      	adds	r3, #8
 801163e:	4618      	mov	r0, r3
 8011640:	f7fe fdfa 	bl	8010238 <SVCCTL_UserEvtRx>
 8011644:	4603      	mov	r3, r0
 8011646:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8011648:	7afb      	ldrb	r3, [r7, #11]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d003      	beq.n	8011656 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	2201      	movs	r2, #1
 8011652:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8011654:	e003      	b.n	801165e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	2200      	movs	r2, #0
 801165a:	701a      	strb	r2, [r3, #0]
  return;
 801165c:	bf00      	nop
}
 801165e:	3710      	adds	r7, #16
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}

08011664 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b084      	sub	sp, #16
 8011668:	af00      	add	r7, sp, #0
 801166a:	4603      	mov	r3, r0
 801166c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 801166e:	79fb      	ldrb	r3, [r7, #7]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d002      	beq.n	801167a <BLE_StatusNot+0x16>
 8011674:	2b01      	cmp	r3, #1
 8011676:	d006      	beq.n	8011686 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8011678:	e00b      	b.n	8011692 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 801167a:	23ff      	movs	r3, #255	; 0xff
 801167c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 801167e:	68f8      	ldr	r0, [r7, #12]
 8011680:	f002 fcea 	bl	8014058 <UTIL_SEQ_PauseTask>
      break;
 8011684:	e005      	b.n	8011692 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8011686:	23ff      	movs	r3, #255	; 0xff
 8011688:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 801168a:	68f8      	ldr	r0, [r7, #12]
 801168c:	f002 fd04 	bl	8014098 <UTIL_SEQ_ResumeTask>
      break;
 8011690:	bf00      	nop
  }

  return;
 8011692:	bf00      	nop
}
 8011694:	3710      	adds	r7, #16
 8011696:	46bd      	mov	sp, r7
 8011698:	bd80      	pop	{r7, pc}
	...

0801169c <task_main>:
/* By default, the first task that runs is this one.
 *
 *
 * */
void task_main(void)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	af00      	add	r7, sp, #0
	//Initialize temp/hum sensor
	sht3x_init(&sht3x_handle);
 80116a0:	4830      	ldr	r0, [pc, #192]	; (8011764 <task_main+0xc8>)
 80116a2:	f7f0 fc17 	bl	8001ed4 <sht3x_init>

	//Check if battery was done charging
	if(battery_completed == 1)
 80116a6:	4b30      	ldr	r3, [pc, #192]	; (8011768 <task_main+0xcc>)
 80116a8:	781b      	ldrb	r3, [r3, #0]
 80116aa:	2b01      	cmp	r3, #1
 80116ac:	d124      	bne.n	80116f8 <task_main+0x5c>
	{
		SSD1306_Clear();
 80116ae:	f7f0 fef4 	bl	800249a <SSD1306_Clear>
		SSD1306_GotoXY(15, 5);
 80116b2:	2105      	movs	r1, #5
 80116b4:	200f      	movs	r0, #15
 80116b6:	f7f0 fe35 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("Battery full", &Font_7x10, 1);
 80116ba:	2201      	movs	r2, #1
 80116bc:	492b      	ldr	r1, [pc, #172]	; (801176c <task_main+0xd0>)
 80116be:	482c      	ldr	r0, [pc, #176]	; (8011770 <task_main+0xd4>)
 80116c0:	f7f0 fec6 	bl	8002450 <SSD1306_Puts>
		SSD1306_GotoXY(5, 15);
 80116c4:	210f      	movs	r1, #15
 80116c6:	2005      	movs	r0, #5
 80116c8:	f7f0 fe2c 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("Unplug USB", &Font_7x10, 1);
 80116cc:	2201      	movs	r2, #1
 80116ce:	4927      	ldr	r1, [pc, #156]	; (801176c <task_main+0xd0>)
 80116d0:	4828      	ldr	r0, [pc, #160]	; (8011774 <task_main+0xd8>)
 80116d2:	f7f0 febd 	bl	8002450 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80116d6:	f7f0 fd7f 	bl	80021d8 <SSD1306_UpdateScreen>
		HAL_Delay(3000);
 80116da:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80116de:	f7ef fec0 	bl	8001462 <HAL_Delay>

		SSD1306_Clear();
 80116e2:	f7f0 feda 	bl	800249a <SSD1306_Clear>
		HAL_GPIO_WritePin(GPIOA, RGB_GREEN_Pin, GPIO_PIN_RESET);
 80116e6:	2200      	movs	r2, #0
 80116e8:	2110      	movs	r1, #16
 80116ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80116ee:	f7f3 fbaf 	bl	8004e50 <HAL_GPIO_WritePin>
		battery_completed = 0;
 80116f2:	4b1d      	ldr	r3, [pc, #116]	; (8011768 <task_main+0xcc>)
 80116f4:	2200      	movs	r2, #0
 80116f6:	701a      	strb	r2, [r3, #0]
	}

	if(menu_counter == 0)
 80116f8:	4b1f      	ldr	r3, [pc, #124]	; (8011778 <task_main+0xdc>)
 80116fa:	781b      	ldrb	r3, [r3, #0]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d106      	bne.n	801170e <task_main+0x72>
	{
		DisplayMenu_Function();
 8011700:	f000 f87a 	bl	80117f8 <DisplayMenu_Function>
		UTIL_SEQ_SetTask(1 << CFG_TASK_MAIN, CFG_SCH_PRIO_0);
 8011704:	2100      	movs	r1, #0
 8011706:	2004      	movs	r0, #4
 8011708:	f002 fc7a 	bl	8014000 <UTIL_SEQ_SetTask>
	{
		HAL_Delay(500);
		SSD1306_Clear();
		UTIL_SEQ_SetTask(1 << CFG_TASK_SEND_VALUES, CFG_SCH_PRIO_0);
	}
}
 801170c:	e027      	b.n	801175e <task_main+0xc2>
	else if(menu_counter == 1)
 801170e:	4b1a      	ldr	r3, [pc, #104]	; (8011778 <task_main+0xdc>)
 8011710:	781b      	ldrb	r3, [r3, #0]
 8011712:	2b01      	cmp	r3, #1
 8011714:	d106      	bne.n	8011724 <task_main+0x88>
		SSD1306_Clear();
 8011716:	f7f0 fec0 	bl	800249a <SSD1306_Clear>
		UTIL_SEQ_SetTask(1 << CFG_TASK_MAIN_2, CFG_SCH_PRIO_0);
 801171a:	2100      	movs	r1, #0
 801171c:	2010      	movs	r0, #16
 801171e:	f002 fc6f 	bl	8014000 <UTIL_SEQ_SetTask>
}
 8011722:	e01c      	b.n	801175e <task_main+0xc2>
	else if(menu_counter == 2)
 8011724:	4b14      	ldr	r3, [pc, #80]	; (8011778 <task_main+0xdc>)
 8011726:	781b      	ldrb	r3, [r3, #0]
 8011728:	2b02      	cmp	r3, #2
 801172a:	d10a      	bne.n	8011742 <task_main+0xa6>
		HAL_Delay(500);
 801172c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011730:	f7ef fe97 	bl	8001462 <HAL_Delay>
		SSD1306_Clear();
 8011734:	f7f0 feb1 	bl	800249a <SSD1306_Clear>
		UTIL_SEQ_SetTask(1 << CFG_TASK_READ_TEMP_HUM, CFG_SCH_PRIO_0);
 8011738:	2100      	movs	r1, #0
 801173a:	2008      	movs	r0, #8
 801173c:	f002 fc60 	bl	8014000 <UTIL_SEQ_SetTask>
}
 8011740:	e00d      	b.n	801175e <task_main+0xc2>
	else if(menu_counter == 3)
 8011742:	4b0d      	ldr	r3, [pc, #52]	; (8011778 <task_main+0xdc>)
 8011744:	781b      	ldrb	r3, [r3, #0]
 8011746:	2b03      	cmp	r3, #3
 8011748:	d109      	bne.n	801175e <task_main+0xc2>
		HAL_Delay(500);
 801174a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801174e:	f7ef fe88 	bl	8001462 <HAL_Delay>
		SSD1306_Clear();
 8011752:	f7f0 fea2 	bl	800249a <SSD1306_Clear>
		UTIL_SEQ_SetTask(1 << CFG_TASK_SEND_VALUES, CFG_SCH_PRIO_0);
 8011756:	2100      	movs	r1, #0
 8011758:	2020      	movs	r0, #32
 801175a:	f002 fc51 	bl	8014000 <UTIL_SEQ_SetTask>
}
 801175e:	bf00      	nop
 8011760:	bd80      	pop	{r7, pc}
 8011762:	bf00      	nop
 8011764:	200000e8 	.word	0x200000e8
 8011768:	200004a0 	.word	0x200004a0
 801176c:	20000004 	.word	0x20000004
 8011770:	08016f70 	.word	0x08016f70
 8011774:	08016f80 	.word	0x08016f80
 8011778:	20000aac 	.word	0x20000aac

0801177c <Custom_APP_Notification>:
}

/* We don't use this funtion, please do not edit
 * */
void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 801177c:	b480      	push	{r7}
 801177e:	b083      	sub	sp, #12
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	781b      	ldrb	r3, [r3, #0]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d002      	beq.n	8011792 <Custom_APP_Notification+0x16>
 801178c:	2b01      	cmp	r3, #1
 801178e:	d002      	beq.n	8011796 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8011790:	e002      	b.n	8011798 <Custom_APP_Notification+0x1c>
      break;
 8011792:	bf00      	nop
 8011794:	e000      	b.n	8011798 <Custom_APP_Notification+0x1c>
      break;
 8011796:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8011798:	bf00      	nop
}
 801179a:	370c      	adds	r7, #12
 801179c:	46bd      	mov	sp, r7
 801179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a2:	4770      	bx	lr

080117a4 <Custom_APP_Init>:
/* This functions is the app initialization which checks the current state of the battery first, then creates the following tasks
 * that run with the use of the scheduler. Every task has a name and a priority. For this case every task has a different name, but
 * the same priority, so they don't interfiere with eachother. Do not edit this function!
*/
void Custom_APP_Init(void)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	  //Check if battery has sufficient charge
	  Battery_Percentage();
 80117a8:	f000 fefa 	bl	80125a0 <Battery_Percentage>

	  //Task 1
	  UTIL_SEQ_RegTask( 1 << CFG_TASK_MAIN, UTIL_SEQ_RFU, task_main);
 80117ac:	4a0d      	ldr	r2, [pc, #52]	; (80117e4 <Custom_APP_Init+0x40>)
 80117ae:	2100      	movs	r1, #0
 80117b0:	2004      	movs	r0, #4
 80117b2:	f002 fc03 	bl	8013fbc <UTIL_SEQ_RegTask>

	  //Task 2
	  UTIL_SEQ_RegTask( 1 << CFG_TASK_READ_TEMP_HUM, UTIL_SEQ_RFU, TempHum_Function);
 80117b6:	4a0c      	ldr	r2, [pc, #48]	; (80117e8 <Custom_APP_Init+0x44>)
 80117b8:	2100      	movs	r1, #0
 80117ba:	2008      	movs	r0, #8
 80117bc:	f002 fbfe 	bl	8013fbc <UTIL_SEQ_RegTask>

	  //Task 3
	  UTIL_SEQ_RegTask( 1 << CFG_TASK_MAIN_2, UTIL_SEQ_RFU, Amplification_Function);
 80117c0:	4a0a      	ldr	r2, [pc, #40]	; (80117ec <Custom_APP_Init+0x48>)
 80117c2:	2100      	movs	r1, #0
 80117c4:	2010      	movs	r0, #16
 80117c6:	f002 fbf9 	bl	8013fbc <UTIL_SEQ_RegTask>

	  //Task 4
	  UTIL_SEQ_RegTask( 1 << CFG_TASK_SEND_VALUES, UTIL_SEQ_RFU, SendValues_Function);
 80117ca:	4a09      	ldr	r2, [pc, #36]	; (80117f0 <Custom_APP_Init+0x4c>)
 80117cc:	2100      	movs	r1, #0
 80117ce:	2020      	movs	r0, #32
 80117d0:	f002 fbf4 	bl	8013fbc <UTIL_SEQ_RegTask>

	  //Task 5
	  UTIL_SEQ_RegTask( 1 << CFG_TASK_SHOW_VALUES, UTIL_SEQ_RFU, ShowValues_Function);
 80117d4:	4a07      	ldr	r2, [pc, #28]	; (80117f4 <Custom_APP_Init+0x50>)
 80117d6:	2100      	movs	r1, #0
 80117d8:	2040      	movs	r0, #64	; 0x40
 80117da:	f002 fbef 	bl	8013fbc <UTIL_SEQ_RegTask>
  /* USER CODE END CUSTOM_APP_Init */
  return;
 80117de:	bf00      	nop
}
 80117e0:	bd80      	pop	{r7, pc}
 80117e2:	bf00      	nop
 80117e4:	0801169d 	.word	0x0801169d
 80117e8:	08011a6d 	.word	0x08011a6d
 80117ec:	0801191d 	.word	0x0801191d
 80117f0:	08011f99 	.word	0x08011f99
 80117f4:	08011c91 	.word	0x08011c91

080117f8 <DisplayMenu_Function>:

/* USER CODE BEGIN FD */
void DisplayMenu_Function(void)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b082      	sub	sp, #8
 80117fc:	af00      	add	r7, sp, #0
	//Se presiona boton 1
	if((HAL_GPIO_ReadPin(BUTT_2_GPIO_Port, BUTT_2_Pin) == GPIO_PIN_RESET))
 80117fe:	2110      	movs	r1, #16
 8011800:	483c      	ldr	r0, [pc, #240]	; (80118f4 <DisplayMenu_Function+0xfc>)
 8011802:	f7f3 fb0d 	bl	8004e20 <HAL_GPIO_ReadPin>
 8011806:	4603      	mov	r3, r0
 8011808:	2b00      	cmp	r3, #0
 801180a:	d113      	bne.n	8011834 <DisplayMenu_Function+0x3c>
	{
		//SSD1306_Clear();
		if (selected_main >= 2)
 801180c:	4b3a      	ldr	r3, [pc, #232]	; (80118f8 <DisplayMenu_Function+0x100>)
 801180e:	781b      	ldrb	r3, [r3, #0]
 8011810:	2b01      	cmp	r3, #1
 8011812:	d905      	bls.n	8011820 <DisplayMenu_Function+0x28>
		{
			SSD1306_Clear();
 8011814:	f7f0 fe41 	bl	800249a <SSD1306_Clear>
			selected_main = 0;
 8011818:	4b37      	ldr	r3, [pc, #220]	; (80118f8 <DisplayMenu_Function+0x100>)
 801181a:	2200      	movs	r2, #0
 801181c:	701a      	strb	r2, [r3, #0]
 801181e:	e009      	b.n	8011834 <DisplayMenu_Function+0x3c>
		}
		else
		{
			HAL_Delay(500);
 8011820:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011824:	f7ef fe1d 	bl	8001462 <HAL_Delay>
			selected_main++;
 8011828:	4b33      	ldr	r3, [pc, #204]	; (80118f8 <DisplayMenu_Function+0x100>)
 801182a:	781b      	ldrb	r3, [r3, #0]
 801182c:	3301      	adds	r3, #1
 801182e:	b2da      	uxtb	r2, r3
 8011830:	4b31      	ldr	r3, [pc, #196]	; (80118f8 <DisplayMenu_Function+0x100>)
 8011832:	701a      	strb	r2, [r3, #0]
		}
	}

	//Se presiona boton 2
	if((HAL_GPIO_ReadPin(BUTT_1_GPIO_Port, BUTT_1_Pin) == GPIO_PIN_RESET))
 8011834:	2102      	movs	r1, #2
 8011836:	4831      	ldr	r0, [pc, #196]	; (80118fc <DisplayMenu_Function+0x104>)
 8011838:	f7f3 faf2 	bl	8004e20 <HAL_GPIO_ReadPin>
 801183c:	4603      	mov	r3, r0
 801183e:	2b00      	cmp	r3, #0
 8011840:	d109      	bne.n	8011856 <DisplayMenu_Function+0x5e>
	{
		HAL_Delay(500);
 8011842:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011846:	f7ef fe0c 	bl	8001462 <HAL_Delay>
		entered_main = selected_main + 1;
 801184a:	4b2b      	ldr	r3, [pc, #172]	; (80118f8 <DisplayMenu_Function+0x100>)
 801184c:	781b      	ldrb	r3, [r3, #0]
 801184e:	3301      	adds	r3, #1
 8011850:	b2da      	uxtb	r2, r3
 8011852:	4b2b      	ldr	r3, [pc, #172]	; (8011900 <DisplayMenu_Function+0x108>)
 8011854:	701a      	strb	r2, [r3, #0]
	}

	//No se presiona ningun boton y solo se muestra el menu inicial
	if (entered_main == 0)
 8011856:	4b2a      	ldr	r3, [pc, #168]	; (8011900 <DisplayMenu_Function+0x108>)
 8011858:	781b      	ldrb	r3, [r3, #0]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d128      	bne.n	80118b0 <DisplayMenu_Function+0xb8>
	{
		SSD1306_GotoXY(1, 0);
 801185e:	2100      	movs	r1, #0
 8011860:	2001      	movs	r0, #1
 8011862:	f7f0 fd5f 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("SNAP Menu", &Font_7x10, 1);
 8011866:	2201      	movs	r2, #1
 8011868:	4926      	ldr	r1, [pc, #152]	; (8011904 <DisplayMenu_Function+0x10c>)
 801186a:	4827      	ldr	r0, [pc, #156]	; (8011908 <DisplayMenu_Function+0x110>)
 801186c:	f7f0 fdf0 	bl	8002450 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8011870:	f7f0 fcb2 	bl	80021d8 <SSD1306_UpdateScreen>
		for (uint8_t i = 0; i <= 2; i++)
 8011874:	2300      	movs	r3, #0
 8011876:	71fb      	strb	r3, [r7, #7]
 8011878:	e016      	b.n	80118a8 <DisplayMenu_Function+0xb0>
		{
			if (i == selected_main)
 801187a:	4b1f      	ldr	r3, [pc, #124]	; (80118f8 <DisplayMenu_Function+0x100>)
 801187c:	781b      	ldrb	r3, [r3, #0]
 801187e:	79fa      	ldrb	r2, [r7, #7]
 8011880:	429a      	cmp	r2, r3
 8011882:	d10e      	bne.n	80118a2 <DisplayMenu_Function+0xaa>
			{
				SSD1306_GotoXY(1, 30);
 8011884:	211e      	movs	r1, #30
 8011886:	2001      	movs	r0, #1
 8011888:	f7f0 fd4c 	bl	8002324 <SSD1306_GotoXY>
				SSD1306_Puts(options_menu[i], &Font_7x10, 0);
 801188c:	79fb      	ldrb	r3, [r7, #7]
 801188e:	4a1f      	ldr	r2, [pc, #124]	; (801190c <DisplayMenu_Function+0x114>)
 8011890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011894:	2200      	movs	r2, #0
 8011896:	491b      	ldr	r1, [pc, #108]	; (8011904 <DisplayMenu_Function+0x10c>)
 8011898:	4618      	mov	r0, r3
 801189a:	f7f0 fdd9 	bl	8002450 <SSD1306_Puts>
				SSD1306_UpdateScreen();
 801189e:	f7f0 fc9b 	bl	80021d8 <SSD1306_UpdateScreen>
		for (uint8_t i = 0; i <= 2; i++)
 80118a2:	79fb      	ldrb	r3, [r7, #7]
 80118a4:	3301      	adds	r3, #1
 80118a6:	71fb      	strb	r3, [r7, #7]
 80118a8:	79fb      	ldrb	r3, [r7, #7]
 80118aa:	2b02      	cmp	r3, #2
 80118ac:	d9e5      	bls.n	801187a <DisplayMenu_Function+0x82>
	//Ingresa a la funcion de enviar datos a APP
	else if (entered_main == 3)
	{
		menu_counter = 3;
	}
}
 80118ae:	e01c      	b.n	80118ea <DisplayMenu_Function+0xf2>
	else if (entered_main == 1)
 80118b0:	4b13      	ldr	r3, [pc, #76]	; (8011900 <DisplayMenu_Function+0x108>)
 80118b2:	781b      	ldrb	r3, [r3, #0]
 80118b4:	2b01      	cmp	r3, #1
 80118b6:	d109      	bne.n	80118cc <DisplayMenu_Function+0xd4>
		menu_counter = 1;
 80118b8:	4b15      	ldr	r3, [pc, #84]	; (8011910 <DisplayMenu_Function+0x118>)
 80118ba:	2201      	movs	r2, #1
 80118bc:	701a      	strb	r2, [r3, #0]
		entered_second = 0;
 80118be:	4b15      	ldr	r3, [pc, #84]	; (8011914 <DisplayMenu_Function+0x11c>)
 80118c0:	2200      	movs	r2, #0
 80118c2:	701a      	strb	r2, [r3, #0]
		selected_second = 0;
 80118c4:	4b14      	ldr	r3, [pc, #80]	; (8011918 <DisplayMenu_Function+0x120>)
 80118c6:	2200      	movs	r2, #0
 80118c8:	701a      	strb	r2, [r3, #0]
}
 80118ca:	e00e      	b.n	80118ea <DisplayMenu_Function+0xf2>
	else if (entered_main == 2)
 80118cc:	4b0c      	ldr	r3, [pc, #48]	; (8011900 <DisplayMenu_Function+0x108>)
 80118ce:	781b      	ldrb	r3, [r3, #0]
 80118d0:	2b02      	cmp	r3, #2
 80118d2:	d103      	bne.n	80118dc <DisplayMenu_Function+0xe4>
		menu_counter = 2;
 80118d4:	4b0e      	ldr	r3, [pc, #56]	; (8011910 <DisplayMenu_Function+0x118>)
 80118d6:	2202      	movs	r2, #2
 80118d8:	701a      	strb	r2, [r3, #0]
}
 80118da:	e006      	b.n	80118ea <DisplayMenu_Function+0xf2>
	else if (entered_main == 3)
 80118dc:	4b08      	ldr	r3, [pc, #32]	; (8011900 <DisplayMenu_Function+0x108>)
 80118de:	781b      	ldrb	r3, [r3, #0]
 80118e0:	2b03      	cmp	r3, #3
 80118e2:	d102      	bne.n	80118ea <DisplayMenu_Function+0xf2>
		menu_counter = 3;
 80118e4:	4b0a      	ldr	r3, [pc, #40]	; (8011910 <DisplayMenu_Function+0x118>)
 80118e6:	2203      	movs	r2, #3
 80118e8:	701a      	strb	r2, [r3, #0]
}
 80118ea:	bf00      	nop
 80118ec:	3708      	adds	r7, #8
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}
 80118f2:	bf00      	nop
 80118f4:	48001000 	.word	0x48001000
 80118f8:	20000aad 	.word	0x20000aad
 80118fc:	48000400 	.word	0x48000400
 8011900:	20000ab0 	.word	0x20000ab0
 8011904:	20000004 	.word	0x20000004
 8011908:	08016f8c 	.word	0x08016f8c
 801190c:	200000cc 	.word	0x200000cc
 8011910:	20000aac 	.word	0x20000aac
 8011914:	20000aaf 	.word	0x20000aaf
 8011918:	20000aae 	.word	0x20000aae

0801191c <Amplification_Function>:

void Amplification_Function(void)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b082      	sub	sp, #8
 8011920:	af00      	add	r7, sp, #0
	//Se presiona boton 1
	if((HAL_GPIO_ReadPin(BUTT_2_GPIO_Port, BUTT_2_Pin) == GPIO_PIN_RESET))
 8011922:	2110      	movs	r1, #16
 8011924:	4847      	ldr	r0, [pc, #284]	; (8011a44 <Amplification_Function+0x128>)
 8011926:	f7f3 fa7b 	bl	8004e20 <HAL_GPIO_ReadPin>
 801192a:	4603      	mov	r3, r0
 801192c:	2b00      	cmp	r3, #0
 801192e:	d113      	bne.n	8011958 <Amplification_Function+0x3c>
	{
		//SSD1306_Clear();
		if (selected_second >= 3)
 8011930:	4b45      	ldr	r3, [pc, #276]	; (8011a48 <Amplification_Function+0x12c>)
 8011932:	781b      	ldrb	r3, [r3, #0]
 8011934:	2b02      	cmp	r3, #2
 8011936:	d905      	bls.n	8011944 <Amplification_Function+0x28>
		{
			SSD1306_Clear();
 8011938:	f7f0 fdaf 	bl	800249a <SSD1306_Clear>
			selected_second = 0;
 801193c:	4b42      	ldr	r3, [pc, #264]	; (8011a48 <Amplification_Function+0x12c>)
 801193e:	2200      	movs	r2, #0
 8011940:	701a      	strb	r2, [r3, #0]
 8011942:	e009      	b.n	8011958 <Amplification_Function+0x3c>
		}
		else
		{
			HAL_Delay(500);
 8011944:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011948:	f7ef fd8b 	bl	8001462 <HAL_Delay>
			selected_second++;
 801194c:	4b3e      	ldr	r3, [pc, #248]	; (8011a48 <Amplification_Function+0x12c>)
 801194e:	781b      	ldrb	r3, [r3, #0]
 8011950:	3301      	adds	r3, #1
 8011952:	b2da      	uxtb	r2, r3
 8011954:	4b3c      	ldr	r3, [pc, #240]	; (8011a48 <Amplification_Function+0x12c>)
 8011956:	701a      	strb	r2, [r3, #0]
		}
	}

	//Se presiona boton 2
	if((HAL_GPIO_ReadPin(BUTT_1_GPIO_Port, BUTT_1_Pin) == GPIO_PIN_RESET))
 8011958:	2102      	movs	r1, #2
 801195a:	483c      	ldr	r0, [pc, #240]	; (8011a4c <Amplification_Function+0x130>)
 801195c:	f7f3 fa60 	bl	8004e20 <HAL_GPIO_ReadPin>
 8011960:	4603      	mov	r3, r0
 8011962:	2b00      	cmp	r3, #0
 8011964:	d109      	bne.n	801197a <Amplification_Function+0x5e>
	{
		HAL_Delay(500);
 8011966:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801196a:	f7ef fd7a 	bl	8001462 <HAL_Delay>
		entered_second = selected_second + 1;
 801196e:	4b36      	ldr	r3, [pc, #216]	; (8011a48 <Amplification_Function+0x12c>)
 8011970:	781b      	ldrb	r3, [r3, #0]
 8011972:	3301      	adds	r3, #1
 8011974:	b2da      	uxtb	r2, r3
 8011976:	4b36      	ldr	r3, [pc, #216]	; (8011a50 <Amplification_Function+0x134>)
 8011978:	701a      	strb	r2, [r3, #0]
	}

	if (entered_second == 0)
 801197a:	4b35      	ldr	r3, [pc, #212]	; (8011a50 <Amplification_Function+0x134>)
 801197c:	781b      	ldrb	r3, [r3, #0]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d127      	bne.n	80119d2 <Amplification_Function+0xb6>
	{
		SSD1306_GotoXY (1, 0);
 8011982:	2100      	movs	r1, #0
 8011984:	2001      	movs	r0, #1
 8011986:	f7f0 fccd 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("Choose nutrient", &Font_7x10, 1);
 801198a:	2201      	movs	r2, #1
 801198c:	4931      	ldr	r1, [pc, #196]	; (8011a54 <Amplification_Function+0x138>)
 801198e:	4832      	ldr	r0, [pc, #200]	; (8011a58 <Amplification_Function+0x13c>)
 8011990:	f7f0 fd5e 	bl	8002450 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8011994:	f7f0 fc20 	bl	80021d8 <SSD1306_UpdateScreen>
		for (uint8_t i = 0; i <= 3; i++)
 8011998:	2300      	movs	r3, #0
 801199a:	71fb      	strb	r3, [r7, #7]
 801199c:	e016      	b.n	80119cc <Amplification_Function+0xb0>
		{
			if (i == selected_second)
 801199e:	4b2a      	ldr	r3, [pc, #168]	; (8011a48 <Amplification_Function+0x12c>)
 80119a0:	781b      	ldrb	r3, [r3, #0]
 80119a2:	79fa      	ldrb	r2, [r7, #7]
 80119a4:	429a      	cmp	r2, r3
 80119a6:	d10e      	bne.n	80119c6 <Amplification_Function+0xaa>
			{
				SSD1306_GotoXY(1, 30);
 80119a8:	211e      	movs	r1, #30
 80119aa:	2001      	movs	r0, #1
 80119ac:	f7f0 fcba 	bl	8002324 <SSD1306_GotoXY>
				SSD1306_Puts(options_elements[i], &Font_7x10, 0);
 80119b0:	79fb      	ldrb	r3, [r7, #7]
 80119b2:	4a2a      	ldr	r2, [pc, #168]	; (8011a5c <Amplification_Function+0x140>)
 80119b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119b8:	2200      	movs	r2, #0
 80119ba:	4926      	ldr	r1, [pc, #152]	; (8011a54 <Amplification_Function+0x138>)
 80119bc:	4618      	mov	r0, r3
 80119be:	f7f0 fd47 	bl	8002450 <SSD1306_Puts>
				SSD1306_UpdateScreen();
 80119c2:	f7f0 fc09 	bl	80021d8 <SSD1306_UpdateScreen>
		for (uint8_t i = 0; i <= 3; i++)
 80119c6:	79fb      	ldrb	r3, [r7, #7]
 80119c8:	3301      	adds	r3, #1
 80119ca:	71fb      	strb	r3, [r7, #7]
 80119cc:	79fb      	ldrb	r3, [r7, #7]
 80119ce:	2b03      	cmp	r3, #3
 80119d0:	d9e5      	bls.n	801199e <Amplification_Function+0x82>
			}
		}
	}

	//Phosphorus
	if (entered_second == 1)
 80119d2:	4b1f      	ldr	r3, [pc, #124]	; (8011a50 <Amplification_Function+0x134>)
 80119d4:	781b      	ldrb	r3, [r3, #0]
 80119d6:	2b01      	cmp	r3, #1
 80119d8:	d106      	bne.n	80119e8 <Amplification_Function+0xcc>
	{
		MeasureChemical_Function(GPIOA, LED_WP7_EN_Pin);
 80119da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80119de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80119e2:	f000 f8cd 	bl	8011b80 <MeasureChemical_Function>
 80119e6:	e025      	b.n	8011a34 <Amplification_Function+0x118>
	}

	//Potasium
	else if (entered_second == 2)
 80119e8:	4b19      	ldr	r3, [pc, #100]	; (8011a50 <Amplification_Function+0x134>)
 80119ea:	781b      	ldrb	r3, [r3, #0]
 80119ec:	2b02      	cmp	r3, #2
 80119ee:	d104      	bne.n	80119fa <Amplification_Function+0xde>
	{
		MeasureChemical_Function(GPIOB, LED_4273_EN_Pin);
 80119f0:	2110      	movs	r1, #16
 80119f2:	4816      	ldr	r0, [pc, #88]	; (8011a4c <Amplification_Function+0x130>)
 80119f4:	f000 f8c4 	bl	8011b80 <MeasureChemical_Function>
 80119f8:	e01c      	b.n	8011a34 <Amplification_Function+0x118>
	}

	//Nitrogen
	else if (entered_second == 3)
 80119fa:	4b15      	ldr	r3, [pc, #84]	; (8011a50 <Amplification_Function+0x134>)
 80119fc:	781b      	ldrb	r3, [r3, #0]
 80119fe:	2b03      	cmp	r3, #3
 8011a00:	d104      	bne.n	8011a0c <Amplification_Function+0xf0>
	{
		MeasureChemical_Function(GPIOB, LED_4261_EN_Pin);
 8011a02:	2120      	movs	r1, #32
 8011a04:	4811      	ldr	r0, [pc, #68]	; (8011a4c <Amplification_Function+0x130>)
 8011a06:	f000 f8bb 	bl	8011b80 <MeasureChemical_Function>
 8011a0a:	e013      	b.n	8011a34 <Amplification_Function+0x118>
	}

	//Return
	else if (entered_second == 4)
 8011a0c:	4b10      	ldr	r3, [pc, #64]	; (8011a50 <Amplification_Function+0x134>)
 8011a0e:	781b      	ldrb	r3, [r3, #0]
 8011a10:	2b04      	cmp	r3, #4
 8011a12:	d10f      	bne.n	8011a34 <Amplification_Function+0x118>
	{
		menu_counter = 0;
 8011a14:	4b12      	ldr	r3, [pc, #72]	; (8011a60 <Amplification_Function+0x144>)
 8011a16:	2200      	movs	r2, #0
 8011a18:	701a      	strb	r2, [r3, #0]
		entered_main = 0;
 8011a1a:	4b12      	ldr	r3, [pc, #72]	; (8011a64 <Amplification_Function+0x148>)
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	701a      	strb	r2, [r3, #0]
		selected_main = 0;
 8011a20:	4b11      	ldr	r3, [pc, #68]	; (8011a68 <Amplification_Function+0x14c>)
 8011a22:	2200      	movs	r2, #0
 8011a24:	701a      	strb	r2, [r3, #0]
		SSD1306_Clear();
 8011a26:	f7f0 fd38 	bl	800249a <SSD1306_Clear>
		UTIL_SEQ_SetTask(1 << CFG_TASK_MAIN, CFG_SCH_PRIO_0);
 8011a2a:	2100      	movs	r1, #0
 8011a2c:	2004      	movs	r0, #4
 8011a2e:	f002 fae7 	bl	8014000 <UTIL_SEQ_SetTask>
		return;
 8011a32:	e004      	b.n	8011a3e <Amplification_Function+0x122>
	}

	UTIL_SEQ_SetTask(1 << CFG_TASK_MAIN_2, CFG_SCH_PRIO_0);
 8011a34:	2100      	movs	r1, #0
 8011a36:	2010      	movs	r0, #16
 8011a38:	f002 fae2 	bl	8014000 <UTIL_SEQ_SetTask>
	return;
 8011a3c:	bf00      	nop
}
 8011a3e:	3708      	adds	r7, #8
 8011a40:	46bd      	mov	sp, r7
 8011a42:	bd80      	pop	{r7, pc}
 8011a44:	48001000 	.word	0x48001000
 8011a48:	20000aae 	.word	0x20000aae
 8011a4c:	48000400 	.word	0x48000400
 8011a50:	20000aaf 	.word	0x20000aaf
 8011a54:	20000004 	.word	0x20000004
 8011a58:	08016f98 	.word	0x08016f98
 8011a5c:	200000d8 	.word	0x200000d8
 8011a60:	20000aac 	.word	0x20000aac
 8011a64:	20000ab0 	.word	0x20000ab0
 8011a68:	20000aad 	.word	0x20000aad

08011a6c <TempHum_Function>:

void TempHum_Function(void)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(BUTT_1_GPIO_Port, BUTT_1_Pin) == GPIO_PIN_RESET)
 8011a70:	2102      	movs	r1, #2
 8011a72:	4837      	ldr	r0, [pc, #220]	; (8011b50 <TempHum_Function+0xe4>)
 8011a74:	f7f3 f9d4 	bl	8004e20 <HAL_GPIO_ReadPin>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d113      	bne.n	8011aa6 <TempHum_Function+0x3a>
	{
		entered_main = 0;
 8011a7e:	4b35      	ldr	r3, [pc, #212]	; (8011b54 <TempHum_Function+0xe8>)
 8011a80:	2200      	movs	r2, #0
 8011a82:	701a      	strb	r2, [r3, #0]
		selected_main = 0;
 8011a84:	4b34      	ldr	r3, [pc, #208]	; (8011b58 <TempHum_Function+0xec>)
 8011a86:	2200      	movs	r2, #0
 8011a88:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << CFG_TASK_MAIN, CFG_SCH_PRIO_0);
 8011a8a:	2100      	movs	r1, #0
 8011a8c:	2004      	movs	r0, #4
 8011a8e:	f002 fab7 	bl	8014000 <UTIL_SEQ_SetTask>
		menu_counter = 0;
 8011a92:	4b32      	ldr	r3, [pc, #200]	; (8011b5c <TempHum_Function+0xf0>)
 8011a94:	2200      	movs	r2, #0
 8011a96:	701a      	strb	r2, [r3, #0]
		SSD1306_Clear();
 8011a98:	f7f0 fcff 	bl	800249a <SSD1306_Clear>
		HAL_Delay(1000);
 8011a9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011aa0:	f7ef fcdf 	bl	8001462 <HAL_Delay>
		//Custom_STM_App_Update_Char(CUSTOM_STM_HUM , &UpdateCharData[2]);

		//Repeats Task
		UTIL_SEQ_SetTask(1 << CFG_TASK_READ_TEMP_HUM, CFG_SCH_PRIO_0);
	}
}
 8011aa4:	e051      	b.n	8011b4a <TempHum_Function+0xde>
		SSD1306_GotoXY(1, 0);
 8011aa6:	2100      	movs	r1, #0
 8011aa8:	2001      	movs	r0, #1
 8011aaa:	f7f0 fc3b 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("Back", &Font_7x10, 0);
 8011aae:	2200      	movs	r2, #0
 8011ab0:	492b      	ldr	r1, [pc, #172]	; (8011b60 <TempHum_Function+0xf4>)
 8011ab2:	482c      	ldr	r0, [pc, #176]	; (8011b64 <TempHum_Function+0xf8>)
 8011ab4:	f7f0 fccc 	bl	8002450 <SSD1306_Puts>
		SSD1306_GotoXY(29,0);
 8011ab8:	2100      	movs	r1, #0
 8011aba:	201d      	movs	r0, #29
 8011abc:	f7f0 fc32 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("Temperature", &Font_7x10, 1);
 8011ac0:	2201      	movs	r2, #1
 8011ac2:	4927      	ldr	r1, [pc, #156]	; (8011b60 <TempHum_Function+0xf4>)
 8011ac4:	4828      	ldr	r0, [pc, #160]	; (8011b68 <TempHum_Function+0xfc>)
 8011ac6:	f7f0 fcc3 	bl	8002450 <SSD1306_Puts>
		SSD1306_GotoXY(35,35);
 8011aca:	2123      	movs	r1, #35	; 0x23
 8011acc:	2023      	movs	r0, #35	; 0x23
 8011ace:	f7f0 fc29 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("Humidity", &Font_7x10, 1);
 8011ad2:	2201      	movs	r2, #1
 8011ad4:	4922      	ldr	r1, [pc, #136]	; (8011b60 <TempHum_Function+0xf4>)
 8011ad6:	4825      	ldr	r0, [pc, #148]	; (8011b6c <TempHum_Function+0x100>)
 8011ad8:	f7f0 fcba 	bl	8002450 <SSD1306_Puts>
		sht3x_read_temperature_and_humidity(&sht3x_handle, &temperature, &humidity);
 8011adc:	4a24      	ldr	r2, [pc, #144]	; (8011b70 <TempHum_Function+0x104>)
 8011ade:	4925      	ldr	r1, [pc, #148]	; (8011b74 <TempHum_Function+0x108>)
 8011ae0:	4825      	ldr	r0, [pc, #148]	; (8011b78 <TempHum_Function+0x10c>)
 8011ae2:	f7f0 fa37 	bl	8001f54 <sht3x_read_temperature_and_humidity>
		SSD1306_GotoXY(1, 20);
 8011ae6:	2114      	movs	r1, #20
 8011ae8:	2001      	movs	r0, #1
 8011aea:	f7f0 fc1b 	bl	8002324 <SSD1306_GotoXY>
		gcvt(temperature, 3, buf);
 8011aee:	4b21      	ldr	r3, [pc, #132]	; (8011b74 <TempHum_Function+0x108>)
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	4618      	mov	r0, r3
 8011af4:	f7ee fd00 	bl	80004f8 <__aeabi_f2d>
 8011af8:	4602      	mov	r2, r0
 8011afa:	460b      	mov	r3, r1
 8011afc:	491f      	ldr	r1, [pc, #124]	; (8011b7c <TempHum_Function+0x110>)
 8011afe:	2003      	movs	r0, #3
 8011b00:	ec43 2b10 	vmov	d0, r2, r3
 8011b04:	f002 fbba 	bl	801427c <gcvt>
		SSD1306_Puts(buf, &Font_7x10, 1);
 8011b08:	2201      	movs	r2, #1
 8011b0a:	4915      	ldr	r1, [pc, #84]	; (8011b60 <TempHum_Function+0xf4>)
 8011b0c:	481b      	ldr	r0, [pc, #108]	; (8011b7c <TempHum_Function+0x110>)
 8011b0e:	f7f0 fc9f 	bl	8002450 <SSD1306_Puts>
		SSD1306_GotoXY(1, 45);
 8011b12:	212d      	movs	r1, #45	; 0x2d
 8011b14:	2001      	movs	r0, #1
 8011b16:	f7f0 fc05 	bl	8002324 <SSD1306_GotoXY>
		gcvt(humidity, 3, buf);
 8011b1a:	4b15      	ldr	r3, [pc, #84]	; (8011b70 <TempHum_Function+0x104>)
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f7ee fcea 	bl	80004f8 <__aeabi_f2d>
 8011b24:	4602      	mov	r2, r0
 8011b26:	460b      	mov	r3, r1
 8011b28:	4914      	ldr	r1, [pc, #80]	; (8011b7c <TempHum_Function+0x110>)
 8011b2a:	2003      	movs	r0, #3
 8011b2c:	ec43 2b10 	vmov	d0, r2, r3
 8011b30:	f002 fba4 	bl	801427c <gcvt>
		SSD1306_Puts(buf, &Font_7x10, 1);
 8011b34:	2201      	movs	r2, #1
 8011b36:	490a      	ldr	r1, [pc, #40]	; (8011b60 <TempHum_Function+0xf4>)
 8011b38:	4810      	ldr	r0, [pc, #64]	; (8011b7c <TempHum_Function+0x110>)
 8011b3a:	f7f0 fc89 	bl	8002450 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8011b3e:	f7f0 fb4b 	bl	80021d8 <SSD1306_UpdateScreen>
		UTIL_SEQ_SetTask(1 << CFG_TASK_READ_TEMP_HUM, CFG_SCH_PRIO_0);
 8011b42:	2100      	movs	r1, #0
 8011b44:	2008      	movs	r0, #8
 8011b46:	f002 fa5b 	bl	8014000 <UTIL_SEQ_SetTask>
}
 8011b4a:	bf00      	nop
 8011b4c:	bd80      	pop	{r7, pc}
 8011b4e:	bf00      	nop
 8011b50:	48000400 	.word	0x48000400
 8011b54:	20000ab0 	.word	0x20000ab0
 8011b58:	20000aad 	.word	0x20000aad
 8011b5c:	20000aac 	.word	0x20000aac
 8011b60:	20000004 	.word	0x20000004
 8011b64:	08016fa8 	.word	0x08016fa8
 8011b68:	08016fb0 	.word	0x08016fb0
 8011b6c:	08016fbc 	.word	0x08016fbc
 8011b70:	200000b8 	.word	0x200000b8
 8011b74:	200000bc 	.word	0x200000bc
 8011b78:	200000e8 	.word	0x200000e8
 8011b7c:	20000dac 	.word	0x20000dac

08011b80 <MeasureChemical_Function>:

void MeasureChemical_Function(GPIO_TypeDef *GPIO_Port, uint16_t GPIO_Pin)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b082      	sub	sp, #8
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
 8011b88:	460b      	mov	r3, r1
 8011b8a:	807b      	strh	r3, [r7, #2]
	if(total_measures < 15){
 8011b8c:	4b36      	ldr	r3, [pc, #216]	; (8011c68 <MeasureChemical_Function+0xe8>)
 8011b8e:	781b      	ldrb	r3, [r3, #0]
 8011b90:	2b0e      	cmp	r3, #14
 8011b92:	d849      	bhi.n	8011c28 <MeasureChemical_Function+0xa8>
		//Wait for user input
		WaitUser_Function();
 8011b94:	f000 fb16 	bl	80121c4 <WaitUser_Function>

		//Turn on selected LED
		HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_SET);
 8011b98:	887b      	ldrh	r3, [r7, #2]
 8011b9a:	2201      	movs	r2, #1
 8011b9c:	4619      	mov	r1, r3
 8011b9e:	6878      	ldr	r0, [r7, #4]
 8011ba0:	f7f3 f956 	bl	8004e50 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8011ba4:	2064      	movs	r0, #100	; 0x64
 8011ba6:	f7ef fc5c 	bl	8001462 <HAL_Delay>

		//Check if selected LED is in correct position
		ADCCheck_Function();
 8011baa:	f000 fccd 	bl	8012548 <ADCCheck_Function>

		if(adc_value[0] > 500)
 8011bae:	4b2f      	ldr	r3, [pc, #188]	; (8011c6c <MeasureChemical_Function+0xec>)
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8011bb6:	d91e      	bls.n	8011bf6 <MeasureChemical_Function+0x76>
		{
			//Funcion que pide al usuario colocar la prueba blanca en la ranura
			Sample_Function("White", 1);
 8011bb8:	2101      	movs	r1, #1
 8011bba:	482d      	ldr	r0, [pc, #180]	; (8011c70 <MeasureChemical_Function+0xf0>)
 8011bbc:	f000 fb74 	bl	80122a8 <Sample_Function>

			//Funcion que pide al usuario colocar la prueba real en la ranura
			Sample_Function("Real", 2);
 8011bc0:	2102      	movs	r1, #2
 8011bc2:	482c      	ldr	r0, [pc, #176]	; (8011c74 <MeasureChemical_Function+0xf4>)
 8011bc4:	f000 fb70 	bl	80122a8 <Sample_Function>

			//Turn off selected LED & reset variables for returning to Menu
			HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_RESET);
 8011bc8:	887b      	ldrh	r3, [r7, #2]
 8011bca:	2200      	movs	r2, #0
 8011bcc:	4619      	mov	r1, r3
 8011bce:	6878      	ldr	r0, [r7, #4]
 8011bd0:	f7f3 f93e 	bl	8004e50 <HAL_GPIO_WritePin>
			entered_main = 0;
 8011bd4:	4b28      	ldr	r3, [pc, #160]	; (8011c78 <MeasureChemical_Function+0xf8>)
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	701a      	strb	r2, [r3, #0]
			selected_main = 0;
 8011bda:	4b28      	ldr	r3, [pc, #160]	; (8011c7c <MeasureChemical_Function+0xfc>)
 8011bdc:	2200      	movs	r2, #0
 8011bde:	701a      	strb	r2, [r3, #0]
			selected_second = 0;
 8011be0:	4b27      	ldr	r3, [pc, #156]	; (8011c80 <MeasureChemical_Function+0x100>)
 8011be2:	2200      	movs	r2, #0
 8011be4:	701a      	strb	r2, [r3, #0]
			entered_second = 0;
 8011be6:	4b27      	ldr	r3, [pc, #156]	; (8011c84 <MeasureChemical_Function+0x104>)
 8011be8:	2200      	movs	r2, #0
 8011bea:	701a      	strb	r2, [r3, #0]

			//TODO:Mostrar el valor en pantalla y guardar en memoria
			UTIL_SEQ_SetTask(1 << CFG_TASK_SHOW_VALUES, CFG_SCH_PRIO_0);
 8011bec:	2100      	movs	r1, #0
 8011bee:	2040      	movs	r0, #64	; 0x40
 8011bf0:	f002 fa06 	bl	8014000 <UTIL_SEQ_SetTask>
			return;
 8011bf4:	e034      	b.n	8011c60 <MeasureChemical_Function+0xe0>
		}

		else
		{
			//Turn off selected LED
			HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_RESET);
 8011bf6:	887b      	ldrh	r3, [r7, #2]
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	4619      	mov	r1, r3
 8011bfc:	6878      	ldr	r0, [r7, #4]
 8011bfe:	f7f3 f927 	bl	8004e50 <HAL_GPIO_WritePin>

			//Error al escoger led
			ChemicalError_Function();
 8011c02:	f000 fb25 	bl	8012250 <ChemicalError_Function>
			entered_main = 0;
 8011c06:	4b1c      	ldr	r3, [pc, #112]	; (8011c78 <MeasureChemical_Function+0xf8>)
 8011c08:	2200      	movs	r2, #0
 8011c0a:	701a      	strb	r2, [r3, #0]
			selected_main = 0;
 8011c0c:	4b1b      	ldr	r3, [pc, #108]	; (8011c7c <MeasureChemical_Function+0xfc>)
 8011c0e:	2200      	movs	r2, #0
 8011c10:	701a      	strb	r2, [r3, #0]
			selected_second = 0;
 8011c12:	4b1b      	ldr	r3, [pc, #108]	; (8011c80 <MeasureChemical_Function+0x100>)
 8011c14:	2200      	movs	r2, #0
 8011c16:	701a      	strb	r2, [r3, #0]
			entered_second = 0;
 8011c18:	4b1a      	ldr	r3, [pc, #104]	; (8011c84 <MeasureChemical_Function+0x104>)
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask(1 << CFG_TASK_MAIN, CFG_SCH_PRIO_0);
 8011c1e:	2100      	movs	r1, #0
 8011c20:	2004      	movs	r0, #4
 8011c22:	f002 f9ed 	bl	8014000 <UTIL_SEQ_SetTask>
			return;
 8011c26:	e01b      	b.n	8011c60 <MeasureChemical_Function+0xe0>
		}
	}

	else{

		SSD1306_GotoXY(0,10);
 8011c28:	210a      	movs	r1, #10
 8011c2a:	2000      	movs	r0, #0
 8011c2c:	f7f0 fb7a 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("Memory full", &Font_7x10, 1);
 8011c30:	2201      	movs	r2, #1
 8011c32:	4915      	ldr	r1, [pc, #84]	; (8011c88 <MeasureChemical_Function+0x108>)
 8011c34:	4815      	ldr	r0, [pc, #84]	; (8011c8c <MeasureChemical_Function+0x10c>)
 8011c36:	f7f0 fc0b 	bl	8002450 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8011c3a:	f7f0 facd 	bl	80021d8 <SSD1306_UpdateScreen>
		entered_main = 0;
 8011c3e:	4b0e      	ldr	r3, [pc, #56]	; (8011c78 <MeasureChemical_Function+0xf8>)
 8011c40:	2200      	movs	r2, #0
 8011c42:	701a      	strb	r2, [r3, #0]
		selected_main = 0;
 8011c44:	4b0d      	ldr	r3, [pc, #52]	; (8011c7c <MeasureChemical_Function+0xfc>)
 8011c46:	2200      	movs	r2, #0
 8011c48:	701a      	strb	r2, [r3, #0]
		selected_second = 0;
 8011c4a:	4b0d      	ldr	r3, [pc, #52]	; (8011c80 <MeasureChemical_Function+0x100>)
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	701a      	strb	r2, [r3, #0]
		entered_second = 0;
 8011c50:	4b0c      	ldr	r3, [pc, #48]	; (8011c84 <MeasureChemical_Function+0x104>)
 8011c52:	2200      	movs	r2, #0
 8011c54:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << CFG_TASK_MAIN, CFG_SCH_PRIO_0);
 8011c56:	2100      	movs	r1, #0
 8011c58:	2004      	movs	r0, #4
 8011c5a:	f002 f9d1 	bl	8014000 <UTIL_SEQ_SetTask>
		return;
 8011c5e:	bf00      	nop
	}
	return;
}
 8011c60:	3708      	adds	r7, #8
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bd80      	pop	{r7, pc}
 8011c66:	bf00      	nop
 8011c68:	200000b6 	.word	0x200000b6
 8011c6c:	20000ab4 	.word	0x20000ab4
 8011c70:	08016fc8 	.word	0x08016fc8
 8011c74:	08016fd0 	.word	0x08016fd0
 8011c78:	20000ab0 	.word	0x20000ab0
 8011c7c:	20000aad 	.word	0x20000aad
 8011c80:	20000aae 	.word	0x20000aae
 8011c84:	20000aaf 	.word	0x20000aaf
 8011c88:	20000004 	.word	0x20000004
 8011c8c:	08016fd8 	.word	0x08016fd8

08011c90 <ShowValues_Function>:

void ShowValues_Function(void){
 8011c90:	b598      	push	{r3, r4, r7, lr}
 8011c92:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(BUTT_1_GPIO_Port, BUTT_1_Pin) == GPIO_PIN_RESET)
 8011c94:	2102      	movs	r1, #2
 8011c96:	48aa      	ldr	r0, [pc, #680]	; (8011f40 <ShowValues_Function+0x2b0>)
 8011c98:	f7f3 f8c2 	bl	8004e20 <HAL_GPIO_ReadPin>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d12d      	bne.n	8011cfe <ShowValues_Function+0x6e>
	{

		SSD1306_GotoXY(15, 5);
 8011ca2:	2105      	movs	r1, #5
 8011ca4:	200f      	movs	r0, #15
 8011ca6:	f7f0 fb3d 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("Data saved", &Font_7x10, 1);
 8011caa:	2201      	movs	r2, #1
 8011cac:	49a5      	ldr	r1, [pc, #660]	; (8011f44 <ShowValues_Function+0x2b4>)
 8011cae:	48a6      	ldr	r0, [pc, #664]	; (8011f48 <ShowValues_Function+0x2b8>)
 8011cb0:	f7f0 fbce 	bl	8002450 <SSD1306_Puts>
		SSD1306_GotoXY(5, 15);
 8011cb4:	210f      	movs	r1, #15
 8011cb6:	2005      	movs	r0, #5
 8011cb8:	f7f0 fb34 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("in memory", &Font_7x10, 1);
 8011cbc:	2201      	movs	r2, #1
 8011cbe:	49a1      	ldr	r1, [pc, #644]	; (8011f44 <ShowValues_Function+0x2b4>)
 8011cc0:	48a2      	ldr	r0, [pc, #648]	; (8011f4c <ShowValues_Function+0x2bc>)
 8011cc2:	f7f0 fbc5 	bl	8002450 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8011cc6:	f7f0 fa87 	bl	80021d8 <SSD1306_UpdateScreen>
		HAL_Delay(3000);
 8011cca:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8011cce:	f7ef fbc8 	bl	8001462 <HAL_Delay>

		menu_counter = 0;
 8011cd2:	4b9f      	ldr	r3, [pc, #636]	; (8011f50 <ShowValues_Function+0x2c0>)
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	701a      	strb	r2, [r3, #0]
		entered_main = 0;
 8011cd8:	4b9e      	ldr	r3, [pc, #632]	; (8011f54 <ShowValues_Function+0x2c4>)
 8011cda:	2200      	movs	r2, #0
 8011cdc:	701a      	strb	r2, [r3, #0]
		selected_main = 0;
 8011cde:	4b9e      	ldr	r3, [pc, #632]	; (8011f58 <ShowValues_Function+0x2c8>)
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	701a      	strb	r2, [r3, #0]
		total_measures++;
 8011ce4:	4b9d      	ldr	r3, [pc, #628]	; (8011f5c <ShowValues_Function+0x2cc>)
 8011ce6:	781b      	ldrb	r3, [r3, #0]
 8011ce8:	3301      	adds	r3, #1
 8011cea:	b2da      	uxtb	r2, r3
 8011cec:	4b9b      	ldr	r3, [pc, #620]	; (8011f5c <ShowValues_Function+0x2cc>)
 8011cee:	701a      	strb	r2, [r3, #0]
		SSD1306_Clear();
 8011cf0:	f7f0 fbd3 	bl	800249a <SSD1306_Clear>

		UTIL_SEQ_SetTask(1 << CFG_TASK_MAIN, CFG_SCH_PRIO_0);
 8011cf4:	2100      	movs	r1, #0
 8011cf6:	2004      	movs	r0, #4
 8011cf8:	f002 f982 	bl	8014000 <UTIL_SEQ_SetTask>
		array_values[total_measures][5] = id_nut;

		//Repeats Task
		UTIL_SEQ_SetTask(1 << CFG_TASK_SHOW_VALUES, CFG_SCH_PRIO_0);
	}
}
 8011cfc:	e11d      	b.n	8011f3a <ShowValues_Function+0x2aa>
		SSD1306_Clear();
 8011cfe:	f7f0 fbcc 	bl	800249a <SSD1306_Clear>
		SSD1306_GotoXY(1, 1);
 8011d02:	2101      	movs	r1, #1
 8011d04:	2001      	movs	r0, #1
 8011d06:	f7f0 fb0d 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("Back", &Font_7x10, 0);
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	498d      	ldr	r1, [pc, #564]	; (8011f44 <ShowValues_Function+0x2b4>)
 8011d0e:	4894      	ldr	r0, [pc, #592]	; (8011f60 <ShowValues_Function+0x2d0>)
 8011d10:	f7f0 fb9e 	bl	8002450 <SSD1306_Puts>
		SSD1306_GotoXY(0,10);
 8011d14:	210a      	movs	r1, #10
 8011d16:	2000      	movs	r0, #0
 8011d18:	f7f0 fb04 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("Abs & voltage", &Font_7x10, 1);
 8011d1c:	2201      	movs	r2, #1
 8011d1e:	4989      	ldr	r1, [pc, #548]	; (8011f44 <ShowValues_Function+0x2b4>)
 8011d20:	4890      	ldr	r0, [pc, #576]	; (8011f64 <ShowValues_Function+0x2d4>)
 8011d22:	f7f0 fb95 	bl	8002450 <SSD1306_Puts>
		SSD1306_GotoXY(0,20);
 8011d26:	2114      	movs	r1, #20
 8011d28:	2000      	movs	r0, #0
 8011d2a:	f7f0 fafb 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("Current", &Font_7x10, 1);
 8011d2e:	2201      	movs	r2, #1
 8011d30:	4984      	ldr	r1, [pc, #528]	; (8011f44 <ShowValues_Function+0x2b4>)
 8011d32:	488d      	ldr	r0, [pc, #564]	; (8011f68 <ShowValues_Function+0x2d8>)
 8011d34:	f7f0 fb8c 	bl	8002450 <SSD1306_Puts>
		SSD1306_GotoXY(1, 15);
 8011d38:	210f      	movs	r1, #15
 8011d3a:	2001      	movs	r0, #1
 8011d3c:	f7f0 faf2 	bl	8002324 <SSD1306_GotoXY>
		gcvt(absorbance, 3, buf);
 8011d40:	4b8a      	ldr	r3, [pc, #552]	; (8011f6c <ShowValues_Function+0x2dc>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	4618      	mov	r0, r3
 8011d46:	f7ee fbd7 	bl	80004f8 <__aeabi_f2d>
 8011d4a:	4602      	mov	r2, r0
 8011d4c:	460b      	mov	r3, r1
 8011d4e:	4988      	ldr	r1, [pc, #544]	; (8011f70 <ShowValues_Function+0x2e0>)
 8011d50:	2003      	movs	r0, #3
 8011d52:	ec43 2b10 	vmov	d0, r2, r3
 8011d56:	f002 fa91 	bl	801427c <gcvt>
		SSD1306_Puts(buf, &Font_7x10, 1);
 8011d5a:	2201      	movs	r2, #1
 8011d5c:	4979      	ldr	r1, [pc, #484]	; (8011f44 <ShowValues_Function+0x2b4>)
 8011d5e:	4884      	ldr	r0, [pc, #528]	; (8011f70 <ShowValues_Function+0x2e0>)
 8011d60:	f7f0 fb76 	bl	8002450 <SSD1306_Puts>
		SSD1306_GotoXY(1, 25);
 8011d64:	2119      	movs	r1, #25
 8011d66:	2001      	movs	r0, #1
 8011d68:	f7f0 fadc 	bl	8002324 <SSD1306_GotoXY>
		gcvt(voltage_sensor, 3, buf);
 8011d6c:	4b81      	ldr	r3, [pc, #516]	; (8011f74 <ShowValues_Function+0x2e4>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	4618      	mov	r0, r3
 8011d72:	f7ee fbc1 	bl	80004f8 <__aeabi_f2d>
 8011d76:	4602      	mov	r2, r0
 8011d78:	460b      	mov	r3, r1
 8011d7a:	497d      	ldr	r1, [pc, #500]	; (8011f70 <ShowValues_Function+0x2e0>)
 8011d7c:	2003      	movs	r0, #3
 8011d7e:	ec43 2b10 	vmov	d0, r2, r3
 8011d82:	f002 fa7b 	bl	801427c <gcvt>
		SSD1306_Puts(buf, &Font_7x10, 1);
 8011d86:	2201      	movs	r2, #1
 8011d88:	496e      	ldr	r1, [pc, #440]	; (8011f44 <ShowValues_Function+0x2b4>)
 8011d8a:	4879      	ldr	r0, [pc, #484]	; (8011f70 <ShowValues_Function+0x2e0>)
 8011d8c:	f7f0 fb60 	bl	8002450 <SSD1306_Puts>
		SSD1306_GotoXY(30, 25);
 8011d90:	2119      	movs	r1, #25
 8011d92:	201e      	movs	r0, #30
 8011d94:	f7f0 fac6 	bl	8002324 <SSD1306_GotoXY>
		gcvt(current_sensor, 3, buf);
 8011d98:	4b77      	ldr	r3, [pc, #476]	; (8011f78 <ShowValues_Function+0x2e8>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f7ee fbab 	bl	80004f8 <__aeabi_f2d>
 8011da2:	4602      	mov	r2, r0
 8011da4:	460b      	mov	r3, r1
 8011da6:	4972      	ldr	r1, [pc, #456]	; (8011f70 <ShowValues_Function+0x2e0>)
 8011da8:	2003      	movs	r0, #3
 8011daa:	ec43 2b10 	vmov	d0, r2, r3
 8011dae:	f002 fa65 	bl	801427c <gcvt>
		SSD1306_Puts(buf, &Font_7x10, 1);
 8011db2:	2201      	movs	r2, #1
 8011db4:	4963      	ldr	r1, [pc, #396]	; (8011f44 <ShowValues_Function+0x2b4>)
 8011db6:	486e      	ldr	r0, [pc, #440]	; (8011f70 <ShowValues_Function+0x2e0>)
 8011db8:	f7f0 fb4a 	bl	8002450 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8011dbc:	f7f0 fa0c 	bl	80021d8 <SSD1306_UpdateScreen>
		HAL_Delay(2000);
 8011dc0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8011dc4:	f7ef fb4d 	bl	8001462 <HAL_Delay>
		SSD1306_Clear();
 8011dc8:	f7f0 fb67 	bl	800249a <SSD1306_Clear>
		SSD1306_GotoXY(1, 1);
 8011dcc:	2101      	movs	r1, #1
 8011dce:	2001      	movs	r0, #1
 8011dd0:	f7f0 faa8 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("Back", &Font_7x10, 0);
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	495b      	ldr	r1, [pc, #364]	; (8011f44 <ShowValues_Function+0x2b4>)
 8011dd8:	4861      	ldr	r0, [pc, #388]	; (8011f60 <ShowValues_Function+0x2d0>)
 8011dda:	f7f0 fb39 	bl	8002450 <SSD1306_Puts>
		SSD1306_GotoXY(29,0);
 8011dde:	2100      	movs	r1, #0
 8011de0:	201d      	movs	r0, #29
 8011de2:	f7f0 fa9f 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("Temperature", &Font_7x10, 1);
 8011de6:	2201      	movs	r2, #1
 8011de8:	4956      	ldr	r1, [pc, #344]	; (8011f44 <ShowValues_Function+0x2b4>)
 8011dea:	4864      	ldr	r0, [pc, #400]	; (8011f7c <ShowValues_Function+0x2ec>)
 8011dec:	f7f0 fb30 	bl	8002450 <SSD1306_Puts>
		SSD1306_GotoXY(35,35);
 8011df0:	2123      	movs	r1, #35	; 0x23
 8011df2:	2023      	movs	r0, #35	; 0x23
 8011df4:	f7f0 fa96 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("Humidity", &Font_7x10, 1);
 8011df8:	2201      	movs	r2, #1
 8011dfa:	4952      	ldr	r1, [pc, #328]	; (8011f44 <ShowValues_Function+0x2b4>)
 8011dfc:	4860      	ldr	r0, [pc, #384]	; (8011f80 <ShowValues_Function+0x2f0>)
 8011dfe:	f7f0 fb27 	bl	8002450 <SSD1306_Puts>
		sht3x_read_temperature_and_humidity(&sht3x_handle, &temperature, &humidity);
 8011e02:	4a60      	ldr	r2, [pc, #384]	; (8011f84 <ShowValues_Function+0x2f4>)
 8011e04:	4960      	ldr	r1, [pc, #384]	; (8011f88 <ShowValues_Function+0x2f8>)
 8011e06:	4861      	ldr	r0, [pc, #388]	; (8011f8c <ShowValues_Function+0x2fc>)
 8011e08:	f7f0 f8a4 	bl	8001f54 <sht3x_read_temperature_and_humidity>
		SSD1306_GotoXY(1, 20);
 8011e0c:	2114      	movs	r1, #20
 8011e0e:	2001      	movs	r0, #1
 8011e10:	f7f0 fa88 	bl	8002324 <SSD1306_GotoXY>
		gcvt(temperature, 3, buf);
 8011e14:	4b5c      	ldr	r3, [pc, #368]	; (8011f88 <ShowValues_Function+0x2f8>)
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	4618      	mov	r0, r3
 8011e1a:	f7ee fb6d 	bl	80004f8 <__aeabi_f2d>
 8011e1e:	4602      	mov	r2, r0
 8011e20:	460b      	mov	r3, r1
 8011e22:	4953      	ldr	r1, [pc, #332]	; (8011f70 <ShowValues_Function+0x2e0>)
 8011e24:	2003      	movs	r0, #3
 8011e26:	ec43 2b10 	vmov	d0, r2, r3
 8011e2a:	f002 fa27 	bl	801427c <gcvt>
		SSD1306_Puts(buf, &Font_7x10, 1);
 8011e2e:	2201      	movs	r2, #1
 8011e30:	4944      	ldr	r1, [pc, #272]	; (8011f44 <ShowValues_Function+0x2b4>)
 8011e32:	484f      	ldr	r0, [pc, #316]	; (8011f70 <ShowValues_Function+0x2e0>)
 8011e34:	f7f0 fb0c 	bl	8002450 <SSD1306_Puts>
		SSD1306_GotoXY(1, 45);
 8011e38:	212d      	movs	r1, #45	; 0x2d
 8011e3a:	2001      	movs	r0, #1
 8011e3c:	f7f0 fa72 	bl	8002324 <SSD1306_GotoXY>
		gcvt(humidity, 3, buf);
 8011e40:	4b50      	ldr	r3, [pc, #320]	; (8011f84 <ShowValues_Function+0x2f4>)
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	4618      	mov	r0, r3
 8011e46:	f7ee fb57 	bl	80004f8 <__aeabi_f2d>
 8011e4a:	4602      	mov	r2, r0
 8011e4c:	460b      	mov	r3, r1
 8011e4e:	4948      	ldr	r1, [pc, #288]	; (8011f70 <ShowValues_Function+0x2e0>)
 8011e50:	2003      	movs	r0, #3
 8011e52:	ec43 2b10 	vmov	d0, r2, r3
 8011e56:	f002 fa11 	bl	801427c <gcvt>
		SSD1306_Puts(buf, &Font_7x10, 1);
 8011e5a:	2201      	movs	r2, #1
 8011e5c:	4939      	ldr	r1, [pc, #228]	; (8011f44 <ShowValues_Function+0x2b4>)
 8011e5e:	4844      	ldr	r0, [pc, #272]	; (8011f70 <ShowValues_Function+0x2e0>)
 8011e60:	f7f0 faf6 	bl	8002450 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8011e64:	f7f0 f9b8 	bl	80021d8 <SSD1306_UpdateScreen>
		array_values[total_measures][0] = voltage_sensor;
 8011e68:	4b42      	ldr	r3, [pc, #264]	; (8011f74 <ShowValues_Function+0x2e4>)
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	4a3b      	ldr	r2, [pc, #236]	; (8011f5c <ShowValues_Function+0x2cc>)
 8011e6e:	7812      	ldrb	r2, [r2, #0]
 8011e70:	4614      	mov	r4, r2
 8011e72:	4618      	mov	r0, r3
 8011e74:	f7ee fb40 	bl	80004f8 <__aeabi_f2d>
 8011e78:	4a45      	ldr	r2, [pc, #276]	; (8011f90 <ShowValues_Function+0x300>)
 8011e7a:	4623      	mov	r3, r4
 8011e7c:	005b      	lsls	r3, r3, #1
 8011e7e:	4423      	add	r3, r4
 8011e80:	011b      	lsls	r3, r3, #4
 8011e82:	4413      	add	r3, r2
 8011e84:	e9c3 0100 	strd	r0, r1, [r3]
		array_values[total_measures][1] = current_sensor;
 8011e88:	4b3b      	ldr	r3, [pc, #236]	; (8011f78 <ShowValues_Function+0x2e8>)
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	4a33      	ldr	r2, [pc, #204]	; (8011f5c <ShowValues_Function+0x2cc>)
 8011e8e:	7812      	ldrb	r2, [r2, #0]
 8011e90:	4614      	mov	r4, r2
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7ee fb30 	bl	80004f8 <__aeabi_f2d>
 8011e98:	4a3d      	ldr	r2, [pc, #244]	; (8011f90 <ShowValues_Function+0x300>)
 8011e9a:	4623      	mov	r3, r4
 8011e9c:	005b      	lsls	r3, r3, #1
 8011e9e:	4423      	add	r3, r4
 8011ea0:	011b      	lsls	r3, r3, #4
 8011ea2:	4413      	add	r3, r2
 8011ea4:	3308      	adds	r3, #8
 8011ea6:	e9c3 0100 	strd	r0, r1, [r3]
		array_values[total_measures][2] = temperature;
 8011eaa:	4b37      	ldr	r3, [pc, #220]	; (8011f88 <ShowValues_Function+0x2f8>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	4a2b      	ldr	r2, [pc, #172]	; (8011f5c <ShowValues_Function+0x2cc>)
 8011eb0:	7812      	ldrb	r2, [r2, #0]
 8011eb2:	4614      	mov	r4, r2
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	f7ee fb1f 	bl	80004f8 <__aeabi_f2d>
 8011eba:	4a35      	ldr	r2, [pc, #212]	; (8011f90 <ShowValues_Function+0x300>)
 8011ebc:	4623      	mov	r3, r4
 8011ebe:	005b      	lsls	r3, r3, #1
 8011ec0:	4423      	add	r3, r4
 8011ec2:	011b      	lsls	r3, r3, #4
 8011ec4:	4413      	add	r3, r2
 8011ec6:	3310      	adds	r3, #16
 8011ec8:	e9c3 0100 	strd	r0, r1, [r3]
		array_values[total_measures][3] = humidity;
 8011ecc:	4b2d      	ldr	r3, [pc, #180]	; (8011f84 <ShowValues_Function+0x2f4>)
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	4a22      	ldr	r2, [pc, #136]	; (8011f5c <ShowValues_Function+0x2cc>)
 8011ed2:	7812      	ldrb	r2, [r2, #0]
 8011ed4:	4614      	mov	r4, r2
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f7ee fb0e 	bl	80004f8 <__aeabi_f2d>
 8011edc:	4a2c      	ldr	r2, [pc, #176]	; (8011f90 <ShowValues_Function+0x300>)
 8011ede:	4623      	mov	r3, r4
 8011ee0:	005b      	lsls	r3, r3, #1
 8011ee2:	4423      	add	r3, r4
 8011ee4:	011b      	lsls	r3, r3, #4
 8011ee6:	4413      	add	r3, r2
 8011ee8:	3318      	adds	r3, #24
 8011eea:	e9c3 0100 	strd	r0, r1, [r3]
		array_values[total_measures][4] = absorbance;
 8011eee:	4b1f      	ldr	r3, [pc, #124]	; (8011f6c <ShowValues_Function+0x2dc>)
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	4a1a      	ldr	r2, [pc, #104]	; (8011f5c <ShowValues_Function+0x2cc>)
 8011ef4:	7812      	ldrb	r2, [r2, #0]
 8011ef6:	4614      	mov	r4, r2
 8011ef8:	4618      	mov	r0, r3
 8011efa:	f7ee fafd 	bl	80004f8 <__aeabi_f2d>
 8011efe:	4a24      	ldr	r2, [pc, #144]	; (8011f90 <ShowValues_Function+0x300>)
 8011f00:	4623      	mov	r3, r4
 8011f02:	005b      	lsls	r3, r3, #1
 8011f04:	4423      	add	r3, r4
 8011f06:	011b      	lsls	r3, r3, #4
 8011f08:	4413      	add	r3, r2
 8011f0a:	3320      	adds	r3, #32
 8011f0c:	e9c3 0100 	strd	r0, r1, [r3]
		array_values[total_measures][5] = id_nut;
 8011f10:	4b20      	ldr	r3, [pc, #128]	; (8011f94 <ShowValues_Function+0x304>)
 8011f12:	781b      	ldrb	r3, [r3, #0]
 8011f14:	4a11      	ldr	r2, [pc, #68]	; (8011f5c <ShowValues_Function+0x2cc>)
 8011f16:	7812      	ldrb	r2, [r2, #0]
 8011f18:	4614      	mov	r4, r2
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f7ee faca 	bl	80004b4 <__aeabi_ui2d>
 8011f20:	4a1b      	ldr	r2, [pc, #108]	; (8011f90 <ShowValues_Function+0x300>)
 8011f22:	4623      	mov	r3, r4
 8011f24:	005b      	lsls	r3, r3, #1
 8011f26:	4423      	add	r3, r4
 8011f28:	011b      	lsls	r3, r3, #4
 8011f2a:	4413      	add	r3, r2
 8011f2c:	3328      	adds	r3, #40	; 0x28
 8011f2e:	e9c3 0100 	strd	r0, r1, [r3]
		UTIL_SEQ_SetTask(1 << CFG_TASK_SHOW_VALUES, CFG_SCH_PRIO_0);
 8011f32:	2100      	movs	r1, #0
 8011f34:	2040      	movs	r0, #64	; 0x40
 8011f36:	f002 f863 	bl	8014000 <UTIL_SEQ_SetTask>
}
 8011f3a:	bf00      	nop
 8011f3c:	bd98      	pop	{r3, r4, r7, pc}
 8011f3e:	bf00      	nop
 8011f40:	48000400 	.word	0x48000400
 8011f44:	20000004 	.word	0x20000004
 8011f48:	08016fe4 	.word	0x08016fe4
 8011f4c:	08016ff0 	.word	0x08016ff0
 8011f50:	20000aac 	.word	0x20000aac
 8011f54:	20000ab0 	.word	0x20000ab0
 8011f58:	20000aad 	.word	0x20000aad
 8011f5c:	200000b6 	.word	0x200000b6
 8011f60:	08016fa8 	.word	0x08016fa8
 8011f64:	08016ffc 	.word	0x08016ffc
 8011f68:	0801700c 	.word	0x0801700c
 8011f6c:	20000da0 	.word	0x20000da0
 8011f70:	20000dac 	.word	0x20000dac
 8011f74:	20000da4 	.word	0x20000da4
 8011f78:	20000da8 	.word	0x20000da8
 8011f7c:	08016fb0 	.word	0x08016fb0
 8011f80:	08016fbc 	.word	0x08016fbc
 8011f84:	200000b8 	.word	0x200000b8
 8011f88:	200000bc 	.word	0x200000bc
 8011f8c:	200000e8 	.word	0x200000e8
 8011f90:	20000ac0 	.word	0x20000ac0
 8011f94:	20000ab2 	.word	0x20000ab2

08011f98 <SendValues_Function>:
 * First it checks if a measure has been made usign the device. If the device has not made any measurements, it will show on screen
 * that there is no data saved on memory. Once a measurement is made, the device will start passing the array values too the BT cache.
 * Once the APP returns a ACK, the screen will show a "data sent" message and the task scheduler will return to the main
 * menu.
*/
void SendValues_Function(void){
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	af00      	add	r7, sp, #0
	//Verify if user has measure data
	if(total_measures > 0 || acknowledge == 1){
 8011f9c:	4b77      	ldr	r3, [pc, #476]	; (801217c <SendValues_Function+0x1e4>)
 8011f9e:	781b      	ldrb	r3, [r3, #0]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d104      	bne.n	8011fae <SendValues_Function+0x16>
 8011fa4:	4b76      	ldr	r3, [pc, #472]	; (8012180 <SendValues_Function+0x1e8>)
 8011fa6:	781b      	ldrb	r3, [r3, #0]
 8011fa8:	2b01      	cmp	r3, #1
 8011faa:	f040 80c6 	bne.w	801213a <SendValues_Function+0x1a2>
		//Verify if all values have been read
		if(acknowledge == 1){
 8011fae:	4b74      	ldr	r3, [pc, #464]	; (8012180 <SendValues_Function+0x1e8>)
 8011fb0:	781b      	ldrb	r3, [r3, #0]
 8011fb2:	2b01      	cmp	r3, #1
 8011fb4:	d12d      	bne.n	8012012 <SendValues_Function+0x7a>

			//Show on screen info has been sent
			SSD1306_Clear();
 8011fb6:	f7f0 fa70 	bl	800249a <SSD1306_Clear>
			SSD1306_GotoXY(0,30);
 8011fba:	211e      	movs	r1, #30
 8011fbc:	2000      	movs	r0, #0
 8011fbe:	f7f0 f9b1 	bl	8002324 <SSD1306_GotoXY>
			SSD1306_Puts("Data sent!", &Font_7x10, 1);
 8011fc2:	2201      	movs	r2, #1
 8011fc4:	496f      	ldr	r1, [pc, #444]	; (8012184 <SendValues_Function+0x1ec>)
 8011fc6:	4870      	ldr	r0, [pc, #448]	; (8012188 <SendValues_Function+0x1f0>)
 8011fc8:	f7f0 fa42 	bl	8002450 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8011fcc:	f7f0 f904 	bl	80021d8 <SSD1306_UpdateScreen>
			memset(array_values, 0, sizeof array_values);
 8011fd0:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8011fd4:	2100      	movs	r1, #0
 8011fd6:	486d      	ldr	r0, [pc, #436]	; (801218c <SendValues_Function+0x1f4>)
 8011fd8:	f002 f9be 	bl	8014358 <memset>

			HAL_Delay(2000);
 8011fdc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8011fe0:	f7ef fa3f 	bl	8001462 <HAL_Delay>

			total_measures = 0;
 8011fe4:	4b65      	ldr	r3, [pc, #404]	; (801217c <SendValues_Function+0x1e4>)
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	701a      	strb	r2, [r3, #0]
			menu_counter = 0;
 8011fea:	4b69      	ldr	r3, [pc, #420]	; (8012190 <SendValues_Function+0x1f8>)
 8011fec:	2200      	movs	r2, #0
 8011fee:	701a      	strb	r2, [r3, #0]
			entered_main = 0;
 8011ff0:	4b68      	ldr	r3, [pc, #416]	; (8012194 <SendValues_Function+0x1fc>)
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	701a      	strb	r2, [r3, #0]
			selected_main = 0;
 8011ff6:	4b68      	ldr	r3, [pc, #416]	; (8012198 <SendValues_Function+0x200>)
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	701a      	strb	r2, [r3, #0]
			HAL_Delay(5000);
 8011ffc:	f241 3088 	movw	r0, #5000	; 0x1388
 8012000:	f7ef fa2f 	bl	8001462 <HAL_Delay>
			SSD1306_Clear();
 8012004:	f7f0 fa49 	bl	800249a <SSD1306_Clear>
			UTIL_SEQ_SetTask(1 << CFG_TASK_MAIN, CFG_SCH_PRIO_0);
 8012008:	2100      	movs	r1, #0
 801200a:	2004      	movs	r0, #4
 801200c:	f001 fff8 	bl	8014000 <UTIL_SEQ_SetTask>
			return;
 8012010:	e0b2      	b.n	8012178 <SendValues_Function+0x1e0>
		}

		else{
			//Show on screen BT is being used to send the data
			SSD1306_GotoXY(0,30);
 8012012:	211e      	movs	r1, #30
 8012014:	2000      	movs	r0, #0
 8012016:	f7f0 f985 	bl	8002324 <SSD1306_GotoXY>
			SSD1306_Puts("Sending...", &Font_7x10, 1);
 801201a:	2201      	movs	r2, #1
 801201c:	4959      	ldr	r1, [pc, #356]	; (8012184 <SendValues_Function+0x1ec>)
 801201e:	485f      	ldr	r0, [pc, #380]	; (801219c <SendValues_Function+0x204>)
 8012020:	f7f0 fa16 	bl	8002450 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8012024:	f7f0 f8d8 	bl	80021d8 <SSD1306_UpdateScreen>

			//Pasar por todas las mediciones disponibles (sin usar, para futuras pruebas)
			//for(uint8_t i = total_measures; i > 0; i--){  //Changed i to 0 in array

			//Pasar info temporal al BT (siete variables)
			UpdateCharData[0] = (uint8_t) array_values[0][1]*100; 	//voltage_sensor
 8012028:	4b58      	ldr	r3, [pc, #352]	; (801218c <SendValues_Function+0x1f4>)
 801202a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801202e:	4610      	mov	r0, r2
 8012030:	4619      	mov	r1, r3
 8012032:	f7ee fd91 	bl	8000b58 <__aeabi_d2uiz>
 8012036:	4603      	mov	r3, r0
 8012038:	b2db      	uxtb	r3, r3
 801203a:	461a      	mov	r2, r3
 801203c:	0092      	lsls	r2, r2, #2
 801203e:	4413      	add	r3, r2
 8012040:	461a      	mov	r2, r3
 8012042:	0091      	lsls	r1, r2, #2
 8012044:	461a      	mov	r2, r3
 8012046:	460b      	mov	r3, r1
 8012048:	4413      	add	r3, r2
 801204a:	009b      	lsls	r3, r3, #2
 801204c:	b2da      	uxtb	r2, r3
 801204e:	4b54      	ldr	r3, [pc, #336]	; (80121a0 <SendValues_Function+0x208>)
 8012050:	701a      	strb	r2, [r3, #0]
			Custom_STM_App_Update_Char(CUSTOM_STM_VOL_SEN, &UpdateCharData[0]);
 8012052:	4953      	ldr	r1, [pc, #332]	; (80121a0 <SendValues_Function+0x208>)
 8012054:	2000      	movs	r0, #0
 8012056:	f000 fe25 	bl	8012ca4 <Custom_STM_App_Update_Char>
			UpdateCharData[1] = (uint8_t) array_values[0][2]*100; 	//current_sensor
 801205a:	4b4c      	ldr	r3, [pc, #304]	; (801218c <SendValues_Function+0x1f4>)
 801205c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8012060:	4610      	mov	r0, r2
 8012062:	4619      	mov	r1, r3
 8012064:	f7ee fd78 	bl	8000b58 <__aeabi_d2uiz>
 8012068:	4603      	mov	r3, r0
 801206a:	b2db      	uxtb	r3, r3
 801206c:	461a      	mov	r2, r3
 801206e:	0092      	lsls	r2, r2, #2
 8012070:	4413      	add	r3, r2
 8012072:	461a      	mov	r2, r3
 8012074:	0091      	lsls	r1, r2, #2
 8012076:	461a      	mov	r2, r3
 8012078:	460b      	mov	r3, r1
 801207a:	4413      	add	r3, r2
 801207c:	009b      	lsls	r3, r3, #2
 801207e:	b2da      	uxtb	r2, r3
 8012080:	4b47      	ldr	r3, [pc, #284]	; (80121a0 <SendValues_Function+0x208>)
 8012082:	705a      	strb	r2, [r3, #1]
			Custom_STM_App_Update_Char(CUSTOM_STM_CU_SEN, &UpdateCharData[1]);
 8012084:	4947      	ldr	r1, [pc, #284]	; (80121a4 <SendValues_Function+0x20c>)
 8012086:	2001      	movs	r0, #1
 8012088:	f000 fe0c 	bl	8012ca4 <Custom_STM_App_Update_Char>
			UpdateCharData[2] = (uint8_t) array_values[0][3];		//temp
 801208c:	4b3f      	ldr	r3, [pc, #252]	; (801218c <SendValues_Function+0x1f4>)
 801208e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8012092:	4610      	mov	r0, r2
 8012094:	4619      	mov	r1, r3
 8012096:	f7ee fd5f 	bl	8000b58 <__aeabi_d2uiz>
 801209a:	4603      	mov	r3, r0
 801209c:	b2da      	uxtb	r2, r3
 801209e:	4b40      	ldr	r3, [pc, #256]	; (80121a0 <SendValues_Function+0x208>)
 80120a0:	709a      	strb	r2, [r3, #2]
			Custom_STM_App_Update_Char(CUSTOM_STM_TEMP, &UpdateCharData[2]);
 80120a2:	4941      	ldr	r1, [pc, #260]	; (80121a8 <SendValues_Function+0x210>)
 80120a4:	2002      	movs	r0, #2
 80120a6:	f000 fdfd 	bl	8012ca4 <Custom_STM_App_Update_Char>
			UpdateCharData[3] = (uint8_t) array_values[0][4];		//hum
 80120aa:	4b38      	ldr	r3, [pc, #224]	; (801218c <SendValues_Function+0x1f4>)
 80120ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80120b0:	4610      	mov	r0, r2
 80120b2:	4619      	mov	r1, r3
 80120b4:	f7ee fd50 	bl	8000b58 <__aeabi_d2uiz>
 80120b8:	4603      	mov	r3, r0
 80120ba:	b2da      	uxtb	r2, r3
 80120bc:	4b38      	ldr	r3, [pc, #224]	; (80121a0 <SendValues_Function+0x208>)
 80120be:	70da      	strb	r2, [r3, #3]
			Custom_STM_App_Update_Char(CUSTOM_STM_HUM, &UpdateCharData[3]);
 80120c0:	493a      	ldr	r1, [pc, #232]	; (80121ac <SendValues_Function+0x214>)
 80120c2:	2003      	movs	r0, #3
 80120c4:	f000 fdee 	bl	8012ca4 <Custom_STM_App_Update_Char>
			UpdateCharData[4] = (uint8_t) array_values[0][5]*100;	//abs
 80120c8:	4b30      	ldr	r3, [pc, #192]	; (801218c <SendValues_Function+0x1f4>)
 80120ca:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80120ce:	4610      	mov	r0, r2
 80120d0:	4619      	mov	r1, r3
 80120d2:	f7ee fd41 	bl	8000b58 <__aeabi_d2uiz>
 80120d6:	4603      	mov	r3, r0
 80120d8:	b2db      	uxtb	r3, r3
 80120da:	461a      	mov	r2, r3
 80120dc:	0092      	lsls	r2, r2, #2
 80120de:	4413      	add	r3, r2
 80120e0:	461a      	mov	r2, r3
 80120e2:	0091      	lsls	r1, r2, #2
 80120e4:	461a      	mov	r2, r3
 80120e6:	460b      	mov	r3, r1
 80120e8:	4413      	add	r3, r2
 80120ea:	009b      	lsls	r3, r3, #2
 80120ec:	b2da      	uxtb	r2, r3
 80120ee:	4b2c      	ldr	r3, [pc, #176]	; (80121a0 <SendValues_Function+0x208>)
 80120f0:	711a      	strb	r2, [r3, #4]
			Custom_STM_App_Update_Char(CUSTOM_STM_ABS, &UpdateCharData[4]);
 80120f2:	492f      	ldr	r1, [pc, #188]	; (80121b0 <SendValues_Function+0x218>)
 80120f4:	2005      	movs	r0, #5
 80120f6:	f000 fdd5 	bl	8012ca4 <Custom_STM_App_Update_Char>
			//UpdateCharData[5] = (uint8_t) device_ID;				//deviceID
			Custom_STM_App_Update_Char(CUSTOM_STM_ID_EXTRA, device_ID);
 80120fa:	492e      	ldr	r1, [pc, #184]	; (80121b4 <SendValues_Function+0x21c>)
 80120fc:	2007      	movs	r0, #7
 80120fe:	f000 fdd1 	bl	8012ca4 <Custom_STM_App_Update_Char>
			UpdateCharData[6] = (uint8_t) array_values[0][6];		//id_nut
 8012102:	4b22      	ldr	r3, [pc, #136]	; (801218c <SendValues_Function+0x1f4>)
 8012104:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8012108:	4610      	mov	r0, r2
 801210a:	4619      	mov	r1, r3
 801210c:	f7ee fd24 	bl	8000b58 <__aeabi_d2uiz>
 8012110:	4603      	mov	r3, r0
 8012112:	b2da      	uxtb	r2, r3
 8012114:	4b22      	ldr	r3, [pc, #136]	; (80121a0 <SendValues_Function+0x208>)
 8012116:	719a      	strb	r2, [r3, #6]
			Custom_STM_App_Update_Char(CUSTOM_STM_ID_NUT, &UpdateCharData[6]);
 8012118:	4927      	ldr	r1, [pc, #156]	; (80121b8 <SendValues_Function+0x220>)
 801211a:	2006      	movs	r0, #6
 801211c:	f000 fdc2 	bl	8012ca4 <Custom_STM_App_Update_Char>
			UpdateCharData[7] = (uint8_t) total_measures;			//measures remaining
 8012120:	4b16      	ldr	r3, [pc, #88]	; (801217c <SendValues_Function+0x1e4>)
 8012122:	781a      	ldrb	r2, [r3, #0]
 8012124:	4b1e      	ldr	r3, [pc, #120]	; (80121a0 <SendValues_Function+0x208>)
 8012126:	71da      	strb	r2, [r3, #7]
			Custom_STM_App_Update_Char(CUSTOM_STM_NUM_VAR, &UpdateCharData[7]);
 8012128:	4924      	ldr	r1, [pc, #144]	; (80121bc <SendValues_Function+0x224>)
 801212a:	2004      	movs	r0, #4
 801212c:	f000 fdba 	bl	8012ca4 <Custom_STM_App_Update_Char>

			//Repeats task
			UTIL_SEQ_SetTask(1 << CFG_TASK_SEND_VALUES, CFG_SCH_PRIO_0);
 8012130:	2100      	movs	r1, #0
 8012132:	2020      	movs	r0, #32
 8012134:	f001 ff64 	bl	8014000 <UTIL_SEQ_SetTask>
			return;
 8012138:	e01e      	b.n	8012178 <SendValues_Function+0x1e0>
		}
	}

	else{
		//No data stored on memory; return to main menu
		SSD1306_GotoXY(0,30);
 801213a:	211e      	movs	r1, #30
 801213c:	2000      	movs	r0, #0
 801213e:	f7f0 f8f1 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("No data on memory", &Font_7x10, 1);
 8012142:	2201      	movs	r2, #1
 8012144:	490f      	ldr	r1, [pc, #60]	; (8012184 <SendValues_Function+0x1ec>)
 8012146:	481e      	ldr	r0, [pc, #120]	; (80121c0 <SendValues_Function+0x228>)
 8012148:	f7f0 f982 	bl	8002450 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 801214c:	f7f0 f844 	bl	80021d8 <SSD1306_UpdateScreen>

		HAL_Delay(2000);
 8012150:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8012154:	f7ef f985 	bl	8001462 <HAL_Delay>

		menu_counter = 0;
 8012158:	4b0d      	ldr	r3, [pc, #52]	; (8012190 <SendValues_Function+0x1f8>)
 801215a:	2200      	movs	r2, #0
 801215c:	701a      	strb	r2, [r3, #0]
		entered_main = 0;
 801215e:	4b0d      	ldr	r3, [pc, #52]	; (8012194 <SendValues_Function+0x1fc>)
 8012160:	2200      	movs	r2, #0
 8012162:	701a      	strb	r2, [r3, #0]
		selected_main = 0;
 8012164:	4b0c      	ldr	r3, [pc, #48]	; (8012198 <SendValues_Function+0x200>)
 8012166:	2200      	movs	r2, #0
 8012168:	701a      	strb	r2, [r3, #0]
		SSD1306_Clear();
 801216a:	f7f0 f996 	bl	800249a <SSD1306_Clear>
		UTIL_SEQ_SetTask(1 << CFG_TASK_MAIN, CFG_SCH_PRIO_0);
 801216e:	2100      	movs	r1, #0
 8012170:	2004      	movs	r0, #4
 8012172:	f001 ff45 	bl	8014000 <UTIL_SEQ_SetTask>
		return;
 8012176:	bf00      	nop
	}
}
 8012178:	bd80      	pop	{r7, pc}
 801217a:	bf00      	nop
 801217c:	200000b6 	.word	0x200000b6
 8012180:	20000aab 	.word	0x20000aab
 8012184:	20000004 	.word	0x20000004
 8012188:	08017014 	.word	0x08017014
 801218c:	20000ac0 	.word	0x20000ac0
 8012190:	20000aac 	.word	0x20000aac
 8012194:	20000ab0 	.word	0x20000ab0
 8012198:	20000aad 	.word	0x20000aad
 801219c:	08017020 	.word	0x08017020
 80121a0:	200009b4 	.word	0x200009b4
 80121a4:	200009b5 	.word	0x200009b5
 80121a8:	200009b6 	.word	0x200009b6
 80121ac:	200009b7 	.word	0x200009b7
 80121b0:	200009b8 	.word	0x200009b8
 80121b4:	200000c0 	.word	0x200000c0
 80121b8:	200009ba 	.word	0x200009ba
 80121bc:	200009bb 	.word	0x200009bb
 80121c0:	0801702c 	.word	0x0801702c

080121c4 <WaitUser_Function>:

/* /Function to show on screen to moce the lever to chosen LED
 * */
void WaitUser_Function(void)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 80121c8:	f7f0 f967 	bl	800249a <SSD1306_Clear>
	HAL_Delay(500);
 80121cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80121d0:	f7ef f947 	bl	8001462 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, BUTT_1_Pin) == GPIO_PIN_SET){
 80121d4:	e025      	b.n	8012222 <WaitUser_Function+0x5e>
		SSD1306_GotoXY(15, 5);
 80121d6:	2105      	movs	r1, #5
 80121d8:	200f      	movs	r0, #15
 80121da:	f7f0 f8a3 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("Move lever", &Font_7x10, 1);
 80121de:	2201      	movs	r2, #1
 80121e0:	4915      	ldr	r1, [pc, #84]	; (8012238 <WaitUser_Function+0x74>)
 80121e2:	4816      	ldr	r0, [pc, #88]	; (801223c <WaitUser_Function+0x78>)
 80121e4:	f7f0 f934 	bl	8002450 <SSD1306_Puts>
		SSD1306_GotoXY(15, 15);
 80121e8:	210f      	movs	r1, #15
 80121ea:	200f      	movs	r0, #15
 80121ec:	f7f0 f89a 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("to chosen LED", &Font_7x10, 1);
 80121f0:	2201      	movs	r2, #1
 80121f2:	4911      	ldr	r1, [pc, #68]	; (8012238 <WaitUser_Function+0x74>)
 80121f4:	4812      	ldr	r0, [pc, #72]	; (8012240 <WaitUser_Function+0x7c>)
 80121f6:	f7f0 f92b 	bl	8002450 <SSD1306_Puts>
		SSD1306_GotoXY(15, 25);
 80121fa:	2119      	movs	r1, #25
 80121fc:	200f      	movs	r0, #15
 80121fe:	f7f0 f891 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("Press 2", &Font_7x10, 1);
 8012202:	2201      	movs	r2, #1
 8012204:	490c      	ldr	r1, [pc, #48]	; (8012238 <WaitUser_Function+0x74>)
 8012206:	480f      	ldr	r0, [pc, #60]	; (8012244 <WaitUser_Function+0x80>)
 8012208:	f7f0 f922 	bl	8002450 <SSD1306_Puts>
		SSD1306_GotoXY(15, 35);
 801220c:	2123      	movs	r1, #35	; 0x23
 801220e:	200f      	movs	r0, #15
 8012210:	f7f0 f888 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("to continue", &Font_7x10, 1);
 8012214:	2201      	movs	r2, #1
 8012216:	4908      	ldr	r1, [pc, #32]	; (8012238 <WaitUser_Function+0x74>)
 8012218:	480b      	ldr	r0, [pc, #44]	; (8012248 <WaitUser_Function+0x84>)
 801221a:	f7f0 f919 	bl	8002450 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 801221e:	f7ef ffdb 	bl	80021d8 <SSD1306_UpdateScreen>
	while(HAL_GPIO_ReadPin(GPIOB, BUTT_1_Pin) == GPIO_PIN_SET){
 8012222:	2102      	movs	r1, #2
 8012224:	4809      	ldr	r0, [pc, #36]	; (801224c <WaitUser_Function+0x88>)
 8012226:	f7f2 fdfb 	bl	8004e20 <HAL_GPIO_ReadPin>
 801222a:	4603      	mov	r3, r0
 801222c:	2b01      	cmp	r3, #1
 801222e:	d0d2      	beq.n	80121d6 <WaitUser_Function+0x12>
	}
}
 8012230:	bf00      	nop
 8012232:	bf00      	nop
 8012234:	bd80      	pop	{r7, pc}
 8012236:	bf00      	nop
 8012238:	20000004 	.word	0x20000004
 801223c:	08017040 	.word	0x08017040
 8012240:	0801704c 	.word	0x0801704c
 8012244:	0801705c 	.word	0x0801705c
 8012248:	08017064 	.word	0x08017064
 801224c:	48000400 	.word	0x48000400

08012250 <ChemicalError_Function>:

/* Function to show on screen that selected LED has wrongfully been selected
 * */
void ChemicalError_Function(void)
{
 8012250:	b580      	push	{r7, lr}
 8012252:	af00      	add	r7, sp, #0
	//Show on screen
	SSD1306_Clear();
 8012254:	f7f0 f921 	bl	800249a <SSD1306_Clear>
	SSD1306_GotoXY(25, 15);
 8012258:	210f      	movs	r1, #15
 801225a:	2019      	movs	r0, #25
 801225c:	f7f0 f862 	bl	8002324 <SSD1306_GotoXY>
	SSD1306_Puts("Wrong LED", &Font_7x10, 1);
 8012260:	2201      	movs	r2, #1
 8012262:	490c      	ldr	r1, [pc, #48]	; (8012294 <ChemicalError_Function+0x44>)
 8012264:	480c      	ldr	r0, [pc, #48]	; (8012298 <ChemicalError_Function+0x48>)
 8012266:	f7f0 f8f3 	bl	8002450 <SSD1306_Puts>
	SSD1306_GotoXY(10, 45);
 801226a:	212d      	movs	r1, #45	; 0x2d
 801226c:	200a      	movs	r0, #10
 801226e:	f7f0 f859 	bl	8002324 <SSD1306_GotoXY>
	SSD1306_Puts("Try again please", &Font_7x10, 1);
 8012272:	2201      	movs	r2, #1
 8012274:	4907      	ldr	r1, [pc, #28]	; (8012294 <ChemicalError_Function+0x44>)
 8012276:	4809      	ldr	r0, [pc, #36]	; (801229c <ChemicalError_Function+0x4c>)
 8012278:	f7f0 f8ea 	bl	8002450 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 801227c:	f7ef ffac 	bl	80021d8 <SSD1306_UpdateScreen>

	HAL_Delay(3000);
 8012280:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8012284:	f7ef f8ed 	bl	8001462 <HAL_Delay>
	entered_second = 4;
 8012288:	4b05      	ldr	r3, [pc, #20]	; (80122a0 <ChemicalError_Function+0x50>)
 801228a:	2204      	movs	r2, #4
 801228c:	701a      	strb	r2, [r3, #0]
}
 801228e:	bf00      	nop
 8012290:	bd80      	pop	{r7, pc}
 8012292:	bf00      	nop
 8012294:	20000004 	.word	0x20000004
 8012298:	08017070 	.word	0x08017070
 801229c:	0801707c 	.word	0x0801707c
 80122a0:	20000aaf 	.word	0x20000aaf
 80122a4:	00000000 	.word	0x00000000

080122a8 <Sample_Function>:

//Funcion para obtener los valores de voltaje y corriente y las absorbacias (falta probar y corregir probablemente toda la funcion)///
void Sample_Function(char* str, uint8_t sample_type)
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b084      	sub	sp, #16
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	60f8      	str	r0, [r7, #12]
 80122b0:	460b      	mov	r3, r1
 80122b2:	72fb      	strb	r3, [r7, #11]
	SSD1306_Clear();
 80122b4:	f7f0 f8f1 	bl	800249a <SSD1306_Clear>
	HAL_Delay(500);
 80122b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80122bc:	f7ef f8d1 	bl	8001462 <HAL_Delay>

	while(HAL_GPIO_ReadPin(GPIOB, BUTT_1_Pin) == GPIO_PIN_SET)
 80122c0:	e032      	b.n	8012328 <Sample_Function+0x80>
	{
		SSD1306_GotoXY(15, 5);
 80122c2:	2105      	movs	r1, #5
 80122c4:	200f      	movs	r0, #15
 80122c6:	f7f0 f82d 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("Put sample", &Font_7x10, 1);
 80122ca:	2201      	movs	r2, #1
 80122cc:	498c      	ldr	r1, [pc, #560]	; (8012500 <Sample_Function+0x258>)
 80122ce:	488d      	ldr	r0, [pc, #564]	; (8012504 <Sample_Function+0x25c>)
 80122d0:	f7f0 f8be 	bl	8002450 <SSD1306_Puts>
		SSD1306_GotoXY(15, 15);
 80122d4:	210f      	movs	r1, #15
 80122d6:	200f      	movs	r0, #15
 80122d8:	f7f0 f824 	bl	8002324 <SSD1306_GotoXY>
		switch(sample_type)
 80122dc:	7afb      	ldrb	r3, [r7, #11]
 80122de:	2b01      	cmp	r3, #1
 80122e0:	d002      	beq.n	80122e8 <Sample_Function+0x40>
 80122e2:	2b02      	cmp	r3, #2
 80122e4:	d006      	beq.n	80122f4 <Sample_Function+0x4c>
 80122e6:	e00b      	b.n	8012300 <Sample_Function+0x58>
		{
		case 1:
			SSD1306_Puts(str, &Font_7x10, 1);
 80122e8:	2201      	movs	r2, #1
 80122ea:	4985      	ldr	r1, [pc, #532]	; (8012500 <Sample_Function+0x258>)
 80122ec:	68f8      	ldr	r0, [r7, #12]
 80122ee:	f7f0 f8af 	bl	8002450 <SSD1306_Puts>
			break;
 80122f2:	e005      	b.n	8012300 <Sample_Function+0x58>

		case 2:
			SSD1306_Puts(str, &Font_7x10, 1);
 80122f4:	2201      	movs	r2, #1
 80122f6:	4982      	ldr	r1, [pc, #520]	; (8012500 <Sample_Function+0x258>)
 80122f8:	68f8      	ldr	r0, [r7, #12]
 80122fa:	f7f0 f8a9 	bl	8002450 <SSD1306_Puts>
			break;
 80122fe:	bf00      	nop
		}
		//SSD1306_Puts(str, &Font_7x10, 1);
		SSD1306_GotoXY(15, 25);
 8012300:	2119      	movs	r1, #25
 8012302:	200f      	movs	r0, #15
 8012304:	f7f0 f80e 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("Press 2", &Font_7x10, 1);
 8012308:	2201      	movs	r2, #1
 801230a:	497d      	ldr	r1, [pc, #500]	; (8012500 <Sample_Function+0x258>)
 801230c:	487e      	ldr	r0, [pc, #504]	; (8012508 <Sample_Function+0x260>)
 801230e:	f7f0 f89f 	bl	8002450 <SSD1306_Puts>
		SSD1306_GotoXY(15, 35);
 8012312:	2123      	movs	r1, #35	; 0x23
 8012314:	200f      	movs	r0, #15
 8012316:	f7f0 f805 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("to resume", &Font_7x10, 1);
 801231a:	2201      	movs	r2, #1
 801231c:	4978      	ldr	r1, [pc, #480]	; (8012500 <Sample_Function+0x258>)
 801231e:	487b      	ldr	r0, [pc, #492]	; (801250c <Sample_Function+0x264>)
 8012320:	f7f0 f896 	bl	8002450 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8012324:	f7ef ff58 	bl	80021d8 <SSD1306_UpdateScreen>
	while(HAL_GPIO_ReadPin(GPIOB, BUTT_1_Pin) == GPIO_PIN_SET)
 8012328:	2102      	movs	r1, #2
 801232a:	4879      	ldr	r0, [pc, #484]	; (8012510 <Sample_Function+0x268>)
 801232c:	f7f2 fd78 	bl	8004e20 <HAL_GPIO_ReadPin>
 8012330:	4603      	mov	r3, r0
 8012332:	2b01      	cmp	r3, #1
 8012334:	d0c5      	beq.n	80122c2 <Sample_Function+0x1a>
	}

	//PWM voltage to 1.5V
	TIM2->CCR1 = 34492;
 8012336:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801233a:	f248 62bc 	movw	r2, #34492	; 0x86bc
 801233e:	635a      	str	r2, [r3, #52]	; 0x34

	//Start TIM, ADC and get ADC value[0]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8012340:	2100      	movs	r1, #0
 8012342:	4874      	ldr	r0, [pc, #464]	; (8012514 <Sample_Function+0x26c>)
 8012344:	f7f7 fbd8 	bl	8009af8 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, adc_value, 2);
 8012348:	2202      	movs	r2, #2
 801234a:	4973      	ldr	r1, [pc, #460]	; (8012518 <Sample_Function+0x270>)
 801234c:	4873      	ldr	r0, [pc, #460]	; (801251c <Sample_Function+0x274>)
 801234e:	f7f1 f8cf 	bl	80034f0 <HAL_ADC_Start_DMA>

	//Find ideal PWM value
	while (adc_value[0] > 2200 || adc_value[0] < 2100)
 8012352:	e03c      	b.n	80123ce <Sample_Function+0x126>
	{
		HAL_ADC_Start_DMA(&hadc1, adc_value, 2);
 8012354:	2202      	movs	r2, #2
 8012356:	4970      	ldr	r1, [pc, #448]	; (8012518 <Sample_Function+0x270>)
 8012358:	4870      	ldr	r0, [pc, #448]	; (801251c <Sample_Function+0x274>)
 801235a:	f7f1 f8c9 	bl	80034f0 <HAL_ADC_Start_DMA>
		if (adc_value[0] <= 2101)
 801235e:	4b6e      	ldr	r3, [pc, #440]	; (8012518 <Sample_Function+0x270>)
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	f640 0235 	movw	r2, #2101	; 0x835
 8012366:	4293      	cmp	r3, r2
 8012368:	d814      	bhi.n	8012394 <Sample_Function+0xec>
		{
			//PWM++
			TIM2->CCR1 += 100;
 801236a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801236e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012370:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012374:	3364      	adds	r3, #100	; 0x64
 8012376:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8012378:	2100      	movs	r1, #0
 801237a:	4866      	ldr	r0, [pc, #408]	; (8012514 <Sample_Function+0x26c>)
 801237c:	f7f7 fbbc 	bl	8009af8 <HAL_TIM_PWM_Start>
			if(TIM2->CCR1 > 65565)
 8012380:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012386:	4a66      	ldr	r2, [pc, #408]	; (8012520 <Sample_Function+0x278>)
 8012388:	4293      	cmp	r3, r2
 801238a:	d91c      	bls.n	80123c6 <Sample_Function+0x11e>
			{
				done_1 = 1;
 801238c:	4b65      	ldr	r3, [pc, #404]	; (8012524 <Sample_Function+0x27c>)
 801238e:	2201      	movs	r2, #1
 8012390:	701a      	strb	r2, [r3, #0]
 8012392:	e018      	b.n	80123c6 <Sample_Function+0x11e>
			}
		}
		else if(adc_value[0] >= 2199)
 8012394:	4b60      	ldr	r3, [pc, #384]	; (8012518 <Sample_Function+0x270>)
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	f640 0296 	movw	r2, #2198	; 0x896
 801239c:	4293      	cmp	r3, r2
 801239e:	d912      	bls.n	80123c6 <Sample_Function+0x11e>
		{
			//PWM--
			TIM2->CCR1 -= 100;
 80123a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80123a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80123aa:	3b64      	subs	r3, #100	; 0x64
 80123ac:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80123ae:	2100      	movs	r1, #0
 80123b0:	4858      	ldr	r0, [pc, #352]	; (8012514 <Sample_Function+0x26c>)
 80123b2:	f7f7 fba1 	bl	8009af8 <HAL_TIM_PWM_Start>
			if(TIM2->CCR1 < 200)
 80123b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80123ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123bc:	2bc7      	cmp	r3, #199	; 0xc7
 80123be:	d802      	bhi.n	80123c6 <Sample_Function+0x11e>
			{
				done_1 = 1;
 80123c0:	4b58      	ldr	r3, [pc, #352]	; (8012524 <Sample_Function+0x27c>)
 80123c2:	2201      	movs	r2, #1
 80123c4:	701a      	strb	r2, [r3, #0]
			}
		}

		if(done_1 == 1)
 80123c6:	4b57      	ldr	r3, [pc, #348]	; (8012524 <Sample_Function+0x27c>)
 80123c8:	781b      	ldrb	r3, [r3, #0]
 80123ca:	2b01      	cmp	r3, #1
 80123cc:	d00c      	beq.n	80123e8 <Sample_Function+0x140>
	while (adc_value[0] > 2200 || adc_value[0] < 2100)
 80123ce:	4b52      	ldr	r3, [pc, #328]	; (8012518 <Sample_Function+0x270>)
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	f640 0298 	movw	r2, #2200	; 0x898
 80123d6:	4293      	cmp	r3, r2
 80123d8:	d8bc      	bhi.n	8012354 <Sample_Function+0xac>
 80123da:	4b4f      	ldr	r3, [pc, #316]	; (8012518 <Sample_Function+0x270>)
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	f640 0233 	movw	r2, #2099	; 0x833
 80123e2:	4293      	cmp	r3, r2
 80123e4:	d9b6      	bls.n	8012354 <Sample_Function+0xac>
 80123e6:	e000      	b.n	80123ea <Sample_Function+0x142>
		{
			break;
 80123e8:	bf00      	nop
		}
	}

	//Turn off ADC and PWM
	HAL_ADC_Stop_DMA(&hadc1);
 80123ea:	484c      	ldr	r0, [pc, #304]	; (801251c <Sample_Function+0x274>)
 80123ec:	f7f1 f904 	bl	80035f8 <HAL_ADC_Stop_DMA>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80123f0:	2100      	movs	r1, #0
 80123f2:	4848      	ldr	r0, [pc, #288]	; (8012514 <Sample_Function+0x26c>)
 80123f4:	f7f7 fc5a 	bl	8009cac <HAL_TIM_PWM_Stop>

	switch(sample_type)
 80123f8:	7afb      	ldrb	r3, [r7, #11]
 80123fa:	2b01      	cmp	r3, #1
 80123fc:	d002      	beq.n	8012404 <Sample_Function+0x15c>
 80123fe:	2b02      	cmp	r3, #2
 8012400:	d02b      	beq.n	801245a <Sample_Function+0x1b2>
		UpdateCharData[1] = (uint8_t) absorbance;
		Custom_STM_App_Update_Char(CUSTOM_STM_ABS, &UpdateCharData[1]);
		break;
	}

	return;
 8012402:	e072      	b.n	80124ea <Sample_Function+0x242>
		voltage_lin = 2.99*adc_value[0]/4095;
 8012404:	4b44      	ldr	r3, [pc, #272]	; (8012518 <Sample_Function+0x270>)
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	4618      	mov	r0, r3
 801240a:	f7ee f853 	bl	80004b4 <__aeabi_ui2d>
 801240e:	a338      	add	r3, pc, #224	; (adr r3, 80124f0 <Sample_Function+0x248>)
 8012410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012414:	f7ee f8c8 	bl	80005a8 <__aeabi_dmul>
 8012418:	4602      	mov	r2, r0
 801241a:	460b      	mov	r3, r1
 801241c:	4610      	mov	r0, r2
 801241e:	4619      	mov	r1, r3
 8012420:	a335      	add	r3, pc, #212	; (adr r3, 80124f8 <Sample_Function+0x250>)
 8012422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012426:	f7ee f9e9 	bl	80007fc <__aeabi_ddiv>
 801242a:	4602      	mov	r2, r0
 801242c:	460b      	mov	r3, r1
 801242e:	4610      	mov	r0, r2
 8012430:	4619      	mov	r1, r3
 8012432:	f7ee fbb1 	bl	8000b98 <__aeabi_d2f>
 8012436:	4603      	mov	r3, r0
 8012438:	4a3b      	ldr	r2, [pc, #236]	; (8012528 <Sample_Function+0x280>)
 801243a:	6013      	str	r3, [r2, #0]
		val_lineal = (A * voltage_lin) - B; //TODO Corregir
 801243c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 801252c <Sample_Function+0x284>
 8012440:	4b39      	ldr	r3, [pc, #228]	; (8012528 <Sample_Function+0x280>)
 8012442:	edd3 7a00 	vldr	s15, [r3]
 8012446:	ee67 7a27 	vmul.f32	s15, s14, s15
 801244a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8012530 <Sample_Function+0x288>
 801244e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012452:	4b38      	ldr	r3, [pc, #224]	; (8012534 <Sample_Function+0x28c>)
 8012454:	edc3 7a00 	vstr	s15, [r3]
		break;
 8012458:	e046      	b.n	80124e8 <Sample_Function+0x240>
		voltage_log = 2.99*adc_value[0]/4095;
 801245a:	4b2f      	ldr	r3, [pc, #188]	; (8012518 <Sample_Function+0x270>)
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	4618      	mov	r0, r3
 8012460:	f7ee f828 	bl	80004b4 <__aeabi_ui2d>
 8012464:	a322      	add	r3, pc, #136	; (adr r3, 80124f0 <Sample_Function+0x248>)
 8012466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801246a:	f7ee f89d 	bl	80005a8 <__aeabi_dmul>
 801246e:	4602      	mov	r2, r0
 8012470:	460b      	mov	r3, r1
 8012472:	4610      	mov	r0, r2
 8012474:	4619      	mov	r1, r3
 8012476:	a320      	add	r3, pc, #128	; (adr r3, 80124f8 <Sample_Function+0x250>)
 8012478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801247c:	f7ee f9be 	bl	80007fc <__aeabi_ddiv>
 8012480:	4602      	mov	r2, r0
 8012482:	460b      	mov	r3, r1
 8012484:	4610      	mov	r0, r2
 8012486:	4619      	mov	r1, r3
 8012488:	f7ee fb86 	bl	8000b98 <__aeabi_d2f>
 801248c:	4603      	mov	r3, r0
 801248e:	4a2a      	ldr	r2, [pc, #168]	; (8012538 <Sample_Function+0x290>)
 8012490:	6013      	str	r3, [r2, #0]
		absorbance = log(voltage_log / val_lineal);
 8012492:	4b29      	ldr	r3, [pc, #164]	; (8012538 <Sample_Function+0x290>)
 8012494:	ed93 7a00 	vldr	s14, [r3]
 8012498:	4b26      	ldr	r3, [pc, #152]	; (8012534 <Sample_Function+0x28c>)
 801249a:	edd3 7a00 	vldr	s15, [r3]
 801249e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80124a2:	ee16 0a90 	vmov	r0, s13
 80124a6:	f7ee f827 	bl	80004f8 <__aeabi_f2d>
 80124aa:	4602      	mov	r2, r0
 80124ac:	460b      	mov	r3, r1
 80124ae:	ec43 2b10 	vmov	d0, r2, r3
 80124b2:	f004 fa95 	bl	80169e0 <log>
 80124b6:	ec53 2b10 	vmov	r2, r3, d0
 80124ba:	4610      	mov	r0, r2
 80124bc:	4619      	mov	r1, r3
 80124be:	f7ee fb6b 	bl	8000b98 <__aeabi_d2f>
 80124c2:	4603      	mov	r3, r0
 80124c4:	4a1d      	ldr	r2, [pc, #116]	; (801253c <Sample_Function+0x294>)
 80124c6:	6013      	str	r3, [r2, #0]
		UpdateCharData[1] = (uint8_t) absorbance;
 80124c8:	4b1c      	ldr	r3, [pc, #112]	; (801253c <Sample_Function+0x294>)
 80124ca:	edd3 7a00 	vldr	s15, [r3]
 80124ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80124d2:	edc7 7a01 	vstr	s15, [r7, #4]
 80124d6:	793b      	ldrb	r3, [r7, #4]
 80124d8:	b2da      	uxtb	r2, r3
 80124da:	4b19      	ldr	r3, [pc, #100]	; (8012540 <Sample_Function+0x298>)
 80124dc:	705a      	strb	r2, [r3, #1]
		Custom_STM_App_Update_Char(CUSTOM_STM_ABS, &UpdateCharData[1]);
 80124de:	4919      	ldr	r1, [pc, #100]	; (8012544 <Sample_Function+0x29c>)
 80124e0:	2005      	movs	r0, #5
 80124e2:	f000 fbdf 	bl	8012ca4 <Custom_STM_App_Update_Char>
		break;
 80124e6:	bf00      	nop
	return;
 80124e8:	bf00      	nop
}
 80124ea:	3710      	adds	r7, #16
 80124ec:	46bd      	mov	sp, r7
 80124ee:	bd80      	pop	{r7, pc}
 80124f0:	1eb851ec 	.word	0x1eb851ec
 80124f4:	4007eb85 	.word	0x4007eb85
 80124f8:	00000000 	.word	0x00000000
 80124fc:	40affe00 	.word	0x40affe00
 8012500:	20000004 	.word	0x20000004
 8012504:	08017090 	.word	0x08017090
 8012508:	0801705c 	.word	0x0801705c
 801250c:	0801709c 	.word	0x0801709c
 8012510:	48000400 	.word	0x48000400
 8012514:	20000454 	.word	0x20000454
 8012518:	20000ab4 	.word	0x20000ab4
 801251c:	200002dc 	.word	0x200002dc
 8012520:	0001001d 	.word	0x0001001d
 8012524:	20000ab1 	.word	0x20000ab1
 8012528:	20000d94 	.word	0x20000d94
 801252c:	404b0aec 	.word	0x404b0aec
 8012530:	406a7903 	.word	0x406a7903
 8012534:	20000d9c 	.word	0x20000d9c
 8012538:	20000d98 	.word	0x20000d98
 801253c:	20000da0 	.word	0x20000da0
 8012540:	200009b4 	.word	0x200009b4
 8012544:	200009b5 	.word	0x200009b5

08012548 <ADCCheck_Function>:
/*
 * This function tests if the LEDs are working properly by tunrning ON the PWM of both the PWM_VREF and PWM_LEDs. Then it turns on the
 * ADC for a brief period an finally turns OFF both PWMs. The value of the ADC is stored in adc_value[0].
 * */
void ADCCheck_Function(void)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	af00      	add	r7, sp, #0
	//Start PWM, PHT & OPAMP
	TIM2->CCR1 = 65535; //Max Value
 801254c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012550:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012554:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //PWM_VREF on
 8012556:	2100      	movs	r1, #0
 8012558:	480e      	ldr	r0, [pc, #56]	; (8012594 <ADCCheck_Function+0x4c>)
 801255a:	f7f7 facd 	bl	8009af8 <HAL_TIM_PWM_Start>

	TIM2->CCR2 = 65535; //Max Value
 801255e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012566:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //PWM_LEDs on
 8012568:	2104      	movs	r1, #4
 801256a:	480a      	ldr	r0, [pc, #40]	; (8012594 <ADCCheck_Function+0x4c>)
 801256c:	f7f7 fac4 	bl	8009af8 <HAL_TIM_PWM_Start>

	HAL_ADC_Start_DMA(&hadc1, adc_value, 2); //Read value to check LED
 8012570:	2202      	movs	r2, #2
 8012572:	4909      	ldr	r1, [pc, #36]	; (8012598 <ADCCheck_Function+0x50>)
 8012574:	4809      	ldr	r0, [pc, #36]	; (801259c <ADCCheck_Function+0x54>)
 8012576:	f7f0 ffbb 	bl	80034f0 <HAL_ADC_Start_DMA>

	//100 seconds delay for debugging purposes
	//HAL_Delay(100000);

	//Turn off PWM and ADC
	HAL_ADC_Stop_DMA(&hadc1);
 801257a:	4808      	ldr	r0, [pc, #32]	; (801259c <ADCCheck_Function+0x54>)
 801257c:	f7f1 f83c 	bl	80035f8 <HAL_ADC_Stop_DMA>

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); //PWM_VREF OFF
 8012580:	2100      	movs	r1, #0
 8012582:	4804      	ldr	r0, [pc, #16]	; (8012594 <ADCCheck_Function+0x4c>)
 8012584:	f7f7 fb92 	bl	8009cac <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2); //PWM_LEDs OFF
 8012588:	2104      	movs	r1, #4
 801258a:	4802      	ldr	r0, [pc, #8]	; (8012594 <ADCCheck_Function+0x4c>)
 801258c:	f7f7 fb8e 	bl	8009cac <HAL_TIM_PWM_Stop>
}
 8012590:	bf00      	nop
 8012592:	bd80      	pop	{r7, pc}
 8012594:	20000454 	.word	0x20000454
 8012598:	20000ab4 	.word	0x20000ab4
 801259c:	200002dc 	.word	0x200002dc

080125a0 <Battery_Percentage>:
 * checks the value. If this value is greater than 1.64 it means there is enough battery left for the device to work properly. IF this
 * value is lower than 1.64 the screen will show "Low battery, Plug charger" to indicate to the user that there is no more battery left.
 * The device will remain on hold until the value changes to be greater than 1.64
 * */
void Battery_Percentage(void)
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	af00      	add	r7, sp, #0
	//Obtain battery value by ADC
	HAL_ADC_Start_DMA(&hadc1, adc_value, 2);
 80125a4:	2202      	movs	r2, #2
 80125a6:	4932      	ldr	r1, [pc, #200]	; (8012670 <Battery_Percentage+0xd0>)
 80125a8:	4832      	ldr	r0, [pc, #200]	; (8012674 <Battery_Percentage+0xd4>)
 80125aa:	f7f0 ffa1 	bl	80034f0 <HAL_ADC_Start_DMA>
	HAL_Delay(100);
 80125ae:	2064      	movs	r0, #100	; 0x64
 80125b0:	f7ee ff57 	bl	8001462 <HAL_Delay>

	//Voltage calculation
	batt_percentage = 2.99*adc_value[1]/4095;
 80125b4:	4b2e      	ldr	r3, [pc, #184]	; (8012670 <Battery_Percentage+0xd0>)
 80125b6:	685b      	ldr	r3, [r3, #4]
 80125b8:	4618      	mov	r0, r3
 80125ba:	f7ed ff7b 	bl	80004b4 <__aeabi_ui2d>
 80125be:	a326      	add	r3, pc, #152	; (adr r3, 8012658 <Battery_Percentage+0xb8>)
 80125c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c4:	f7ed fff0 	bl	80005a8 <__aeabi_dmul>
 80125c8:	4602      	mov	r2, r0
 80125ca:	460b      	mov	r3, r1
 80125cc:	4610      	mov	r0, r2
 80125ce:	4619      	mov	r1, r3
 80125d0:	a323      	add	r3, pc, #140	; (adr r3, 8012660 <Battery_Percentage+0xc0>)
 80125d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125d6:	f7ee f911 	bl	80007fc <__aeabi_ddiv>
 80125da:	4602      	mov	r2, r0
 80125dc:	460b      	mov	r3, r1
 80125de:	4610      	mov	r0, r2
 80125e0:	4619      	mov	r1, r3
 80125e2:	f7ee fad9 	bl	8000b98 <__aeabi_d2f>
 80125e6:	4603      	mov	r3, r0
 80125e8:	4a23      	ldr	r2, [pc, #140]	; (8012678 <Battery_Percentage+0xd8>)
 80125ea:	6013      	str	r3, [r2, #0]

	//Show value on screen
	if(batt_percentage <= 1.64)
 80125ec:	4b22      	ldr	r3, [pc, #136]	; (8012678 <Battery_Percentage+0xd8>)
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	4618      	mov	r0, r3
 80125f2:	f7ed ff81 	bl	80004f8 <__aeabi_f2d>
 80125f6:	a31c      	add	r3, pc, #112	; (adr r3, 8012668 <Battery_Percentage+0xc8>)
 80125f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125fc:	f7ee fa50 	bl	8000aa0 <__aeabi_dcmple>
 8012600:	4603      	mov	r3, r0
 8012602:	2b00      	cmp	r3, #0
 8012604:	d100      	bne.n	8012608 <Battery_Percentage+0x68>
		SSD1306_UpdateScreen();
		battery_completed = 1;
		HAL_Delay(2000);
	}

	return;
 8012606:	e025      	b.n	8012654 <Battery_Percentage+0xb4>
		SSD1306_Clear();
 8012608:	f7ef ff47 	bl	800249a <SSD1306_Clear>
		HAL_GPIO_WritePin(GPIOA, RGB_RED_Pin, GPIO_PIN_SET);
 801260c:	2201      	movs	r2, #1
 801260e:	2104      	movs	r1, #4
 8012610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012614:	f7f2 fc1c 	bl	8004e50 <HAL_GPIO_WritePin>
		SSD1306_Clear();
 8012618:	f7ef ff3f 	bl	800249a <SSD1306_Clear>
		SSD1306_GotoXY(15, 15);
 801261c:	210f      	movs	r1, #15
 801261e:	200f      	movs	r0, #15
 8012620:	f7ef fe80 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("Low battery", &Font_7x10, 1);
 8012624:	2201      	movs	r2, #1
 8012626:	4915      	ldr	r1, [pc, #84]	; (801267c <Battery_Percentage+0xdc>)
 8012628:	4815      	ldr	r0, [pc, #84]	; (8012680 <Battery_Percentage+0xe0>)
 801262a:	f7ef ff11 	bl	8002450 <SSD1306_Puts>
		SSD1306_GotoXY(15, 45);
 801262e:	212d      	movs	r1, #45	; 0x2d
 8012630:	200f      	movs	r0, #15
 8012632:	f7ef fe77 	bl	8002324 <SSD1306_GotoXY>
		SSD1306_Puts("Plug charger", &Font_7x10, 1);
 8012636:	2201      	movs	r2, #1
 8012638:	4910      	ldr	r1, [pc, #64]	; (801267c <Battery_Percentage+0xdc>)
 801263a:	4812      	ldr	r0, [pc, #72]	; (8012684 <Battery_Percentage+0xe4>)
 801263c:	f7ef ff08 	bl	8002450 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8012640:	f7ef fdca 	bl	80021d8 <SSD1306_UpdateScreen>
		battery_completed = 1;
 8012644:	4b10      	ldr	r3, [pc, #64]	; (8012688 <Battery_Percentage+0xe8>)
 8012646:	2201      	movs	r2, #1
 8012648:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2000);
 801264a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801264e:	f7ee ff08 	bl	8001462 <HAL_Delay>
	return;
 8012652:	bf00      	nop
}
 8012654:	bd80      	pop	{r7, pc}
 8012656:	bf00      	nop
 8012658:	1eb851ec 	.word	0x1eb851ec
 801265c:	4007eb85 	.word	0x4007eb85
 8012660:	00000000 	.word	0x00000000
 8012664:	40affe00 	.word	0x40affe00
 8012668:	a3d70a3d 	.word	0xa3d70a3d
 801266c:	3ffa3d70 	.word	0x3ffa3d70
 8012670:	20000ab4 	.word	0x20000ab4
 8012674:	200002dc 	.word	0x200002dc
 8012678:	20000d90 	.word	0x20000d90
 801267c:	20000004 	.word	0x20000004
 8012680:	080170a8 	.word	0x080170a8
 8012684:	080170b4 	.word	0x080170b4
 8012688:	200004a0 	.word	0x200004a0

0801268c <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b08a      	sub	sp, #40	; 0x28
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8012694:	2300      	movs	r3, #0
 8012696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	3301      	adds	r3, #1
 801269e:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 80126a0:	6a3b      	ldr	r3, [r7, #32]
 80126a2:	781b      	ldrb	r3, [r3, #0]
 80126a4:	2bff      	cmp	r3, #255	; 0xff
 80126a6:	d146      	bne.n	8012736 <Custom_STM_Event_Handler+0xaa>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80126a8:	6a3b      	ldr	r3, [r7, #32]
 80126aa:	3302      	adds	r3, #2
 80126ac:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 80126ae:	69fb      	ldr	r3, [r7, #28]
 80126b0:	881b      	ldrh	r3, [r3, #0]
 80126b2:	b29b      	uxth	r3, r3
 80126b4:	f640 4214 	movw	r2, #3092	; 0xc14
 80126b8:	4293      	cmp	r3, r2
 80126ba:	d036      	beq.n	801272a <Custom_STM_Event_Handler+0x9e>
 80126bc:	f640 4214 	movw	r2, #3092	; 0xc14
 80126c0:	4293      	cmp	r3, r2
 80126c2:	dc34      	bgt.n	801272e <Custom_STM_Event_Handler+0xa2>
 80126c4:	f640 4201 	movw	r2, #3073	; 0xc01
 80126c8:	4293      	cmp	r3, r2
 80126ca:	d003      	beq.n	80126d4 <Custom_STM_Event_Handler+0x48>
 80126cc:	f640 4213 	movw	r2, #3091	; 0xc13
 80126d0:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 80126d2:	e02f      	b.n	8012734 <Custom_STM_Event_Handler+0xa8>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80126d4:	69fb      	ldr	r3, [r7, #28]
 80126d6:	3302      	adds	r3, #2
 80126d8:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomAckHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80126da:	69bb      	ldr	r3, [r7, #24]
 80126dc:	885b      	ldrh	r3, [r3, #2]
 80126de:	b29b      	uxth	r3, r3
 80126e0:	461a      	mov	r2, r3
 80126e2:	4b18      	ldr	r3, [pc, #96]	; (8012744 <Custom_STM_Event_Handler+0xb8>)
 80126e4:	8adb      	ldrh	r3, [r3, #22]
 80126e6:	3301      	adds	r3, #1
 80126e8:	429a      	cmp	r2, r3
 80126ea:	d122      	bne.n	8012732 <Custom_STM_Event_Handler+0xa6>
            return_value = SVCCTL_EvtAckFlowEnable;
 80126ec:	2301      	movs	r3, #1
 80126ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            HAL_GPIO_TogglePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin);
 80126f2:	2110      	movs	r1, #16
 80126f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80126f8:	f7f2 fbc2 	bl	8004e80 <HAL_GPIO_TogglePin>
            HAL_Delay(500);
 80126fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8012700:	f7ee feaf 	bl	8001462 <HAL_Delay>
            acknowledge = 1;
 8012704:	4b10      	ldr	r3, [pc, #64]	; (8012748 <Custom_STM_Event_Handler+0xbc>)
 8012706:	2201      	movs	r2, #1
 8012708:	701a      	strb	r2, [r3, #0]
            total_measures--;
 801270a:	4b10      	ldr	r3, [pc, #64]	; (801274c <Custom_STM_Event_Handler+0xc0>)
 801270c:	781b      	ldrb	r3, [r3, #0]
 801270e:	3b01      	subs	r3, #1
 8012710:	b2da      	uxtb	r2, r3
 8012712:	4b0e      	ldr	r3, [pc, #56]	; (801274c <Custom_STM_Event_Handler+0xc0>)
 8012714:	701a      	strb	r2, [r3, #0]
			Custom_STM_App_Update_Char(CUSTOM_STM_NUM_VAR, &total_measures);
 8012716:	490d      	ldr	r1, [pc, #52]	; (801274c <Custom_STM_Event_Handler+0xc0>)
 8012718:	2004      	movs	r0, #4
 801271a:	f000 fac3 	bl	8012ca4 <Custom_STM_App_Update_Char>
            HAL_GPIO_TogglePin(RGB_GREEN_GPIO_Port, RGB_GREEN_Pin);
 801271e:	2110      	movs	r1, #16
 8012720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012724:	f7f2 fbac 	bl	8004e80 <HAL_GPIO_TogglePin>
          break;
 8012728:	e003      	b.n	8012732 <Custom_STM_Event_Handler+0xa6>
          break;
 801272a:	bf00      	nop
 801272c:	e004      	b.n	8012738 <Custom_STM_Event_Handler+0xac>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 801272e:	bf00      	nop
 8012730:	e002      	b.n	8012738 <Custom_STM_Event_Handler+0xac>
          break;
 8012732:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8012734:	e000      	b.n	8012738 <Custom_STM_Event_Handler+0xac>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8012736:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8012738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 801273c:	4618      	mov	r0, r3
 801273e:	3728      	adds	r7, #40	; 0x28
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}
 8012744:	20000db8 	.word	0x20000db8
 8012748:	20000aab 	.word	0x20000aab
 801274c:	200000b6 	.word	0x200000b6

08012750 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b08c      	sub	sp, #48	; 0x30
 8012754:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8012756:	2392      	movs	r3, #146	; 0x92
 8012758:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 801275a:	48d8      	ldr	r0, [pc, #864]	; (8012abc <SVCCTL_InitCustomSvc+0x36c>)
 801275c:	f7fd fd52 	bl	8010204 <SVCCTL_RegisterSvcHandler>
   *                                2 for TEMP +
   *                                2 for HUM +
   *                              = 9
   */

  COPY_SNAP_SVC_UUID(uuid.Char_UUID_128);
 8012760:	238f      	movs	r3, #143	; 0x8f
 8012762:	713b      	strb	r3, [r7, #4]
 8012764:	23e5      	movs	r3, #229	; 0xe5
 8012766:	717b      	strb	r3, [r7, #5]
 8012768:	23b3      	movs	r3, #179	; 0xb3
 801276a:	71bb      	strb	r3, [r7, #6]
 801276c:	23d5      	movs	r3, #213	; 0xd5
 801276e:	71fb      	strb	r3, [r7, #7]
 8012770:	232e      	movs	r3, #46	; 0x2e
 8012772:	723b      	strb	r3, [r7, #8]
 8012774:	237f      	movs	r3, #127	; 0x7f
 8012776:	727b      	strb	r3, [r7, #9]
 8012778:	234a      	movs	r3, #74	; 0x4a
 801277a:	72bb      	strb	r3, [r7, #10]
 801277c:	2398      	movs	r3, #152	; 0x98
 801277e:	72fb      	strb	r3, [r7, #11]
 8012780:	232a      	movs	r3, #42	; 0x2a
 8012782:	733b      	strb	r3, [r7, #12]
 8012784:	2348      	movs	r3, #72	; 0x48
 8012786:	737b      	strb	r3, [r7, #13]
 8012788:	237a      	movs	r3, #122	; 0x7a
 801278a:	73bb      	strb	r3, [r7, #14]
 801278c:	23cc      	movs	r3, #204	; 0xcc
 801278e:	73fb      	strb	r3, [r7, #15]
 8012790:	2340      	movs	r3, #64	; 0x40
 8012792:	743b      	strb	r3, [r7, #16]
 8012794:	2300      	movs	r3, #0
 8012796:	747b      	strb	r3, [r7, #17]
 8012798:	2300      	movs	r3, #0
 801279a:	74bb      	strb	r3, [r7, #18]
 801279c:	2300      	movs	r3, #0
 801279e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 80127a0:	1d39      	adds	r1, r7, #4
 80127a2:	4bc7      	ldr	r3, [pc, #796]	; (8012ac0 <SVCCTL_InitCustomSvc+0x370>)
 80127a4:	9300      	str	r3, [sp, #0]
 80127a6:	2309      	movs	r3, #9
 80127a8:	2201      	movs	r2, #1
 80127aa:	2002      	movs	r0, #2
 80127ac:	f7fc fff2 	bl	800f794 <aci_gatt_add_service>
 80127b0:	4603      	mov	r3, r0
 80127b2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  VOLTAGE_SENSOR
   */
  COPY_VOLTAGE_SENSOR_UUID(uuid.Char_UUID_128);
 80127b4:	2319      	movs	r3, #25
 80127b6:	713b      	strb	r3, [r7, #4]
 80127b8:	23ed      	movs	r3, #237	; 0xed
 80127ba:	717b      	strb	r3, [r7, #5]
 80127bc:	2382      	movs	r3, #130	; 0x82
 80127be:	71bb      	strb	r3, [r7, #6]
 80127c0:	23ae      	movs	r3, #174	; 0xae
 80127c2:	71fb      	strb	r3, [r7, #7]
 80127c4:	23ed      	movs	r3, #237	; 0xed
 80127c6:	723b      	strb	r3, [r7, #8]
 80127c8:	2321      	movs	r3, #33	; 0x21
 80127ca:	727b      	strb	r3, [r7, #9]
 80127cc:	234c      	movs	r3, #76	; 0x4c
 80127ce:	72bb      	strb	r3, [r7, #10]
 80127d0:	239d      	movs	r3, #157	; 0x9d
 80127d2:	72fb      	strb	r3, [r7, #11]
 80127d4:	2341      	movs	r3, #65	; 0x41
 80127d6:	733b      	strb	r3, [r7, #12]
 80127d8:	2345      	movs	r3, #69	; 0x45
 80127da:	737b      	strb	r3, [r7, #13]
 80127dc:	2322      	movs	r3, #34	; 0x22
 80127de:	73bb      	strb	r3, [r7, #14]
 80127e0:	238e      	movs	r3, #142	; 0x8e
 80127e2:	73fb      	strb	r3, [r7, #15]
 80127e4:	2341      	movs	r3, #65	; 0x41
 80127e6:	743b      	strb	r3, [r7, #16]
 80127e8:	2300      	movs	r3, #0
 80127ea:	747b      	strb	r3, [r7, #17]
 80127ec:	2300      	movs	r3, #0
 80127ee:	74bb      	strb	r3, [r7, #18]
 80127f0:	2300      	movs	r3, #0
 80127f2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomSnapHdle,
 80127f4:	4bb2      	ldr	r3, [pc, #712]	; (8012ac0 <SVCCTL_InitCustomSvc+0x370>)
 80127f6:	8818      	ldrh	r0, [r3, #0]
 80127f8:	4bb2      	ldr	r3, [pc, #712]	; (8012ac4 <SVCCTL_InitCustomSvc+0x374>)
 80127fa:	781b      	ldrb	r3, [r3, #0]
 80127fc:	b29b      	uxth	r3, r3
 80127fe:	1d3a      	adds	r2, r7, #4
 8012800:	49b1      	ldr	r1, [pc, #708]	; (8012ac8 <SVCCTL_InitCustomSvc+0x378>)
 8012802:	9105      	str	r1, [sp, #20]
 8012804:	2100      	movs	r1, #0
 8012806:	9104      	str	r1, [sp, #16]
 8012808:	2110      	movs	r1, #16
 801280a:	9103      	str	r1, [sp, #12]
 801280c:	2100      	movs	r1, #0
 801280e:	9102      	str	r1, [sp, #8]
 8012810:	2102      	movs	r1, #2
 8012812:	9101      	str	r1, [sp, #4]
 8012814:	2102      	movs	r1, #2
 8012816:	9100      	str	r1, [sp, #0]
 8012818:	2102      	movs	r1, #2
 801281a:	f7fd f891 	bl	800f940 <aci_gatt_add_char>
 801281e:	4603      	mov	r3, r0
 8012820:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : VOL_SEN \n\r");
  }
  /**
   *  CURRENT_SENSOR
   */
  COPY_CURRENT_SENSOR_UUID(uuid.Char_UUID_128);
 8012822:	2319      	movs	r3, #25
 8012824:	713b      	strb	r3, [r7, #4]
 8012826:	23ed      	movs	r3, #237	; 0xed
 8012828:	717b      	strb	r3, [r7, #5]
 801282a:	2382      	movs	r3, #130	; 0x82
 801282c:	71bb      	strb	r3, [r7, #6]
 801282e:	23ae      	movs	r3, #174	; 0xae
 8012830:	71fb      	strb	r3, [r7, #7]
 8012832:	23ed      	movs	r3, #237	; 0xed
 8012834:	723b      	strb	r3, [r7, #8]
 8012836:	2321      	movs	r3, #33	; 0x21
 8012838:	727b      	strb	r3, [r7, #9]
 801283a:	234c      	movs	r3, #76	; 0x4c
 801283c:	72bb      	strb	r3, [r7, #10]
 801283e:	239d      	movs	r3, #157	; 0x9d
 8012840:	72fb      	strb	r3, [r7, #11]
 8012842:	2341      	movs	r3, #65	; 0x41
 8012844:	733b      	strb	r3, [r7, #12]
 8012846:	2345      	movs	r3, #69	; 0x45
 8012848:	737b      	strb	r3, [r7, #13]
 801284a:	2322      	movs	r3, #34	; 0x22
 801284c:	73bb      	strb	r3, [r7, #14]
 801284e:	238e      	movs	r3, #142	; 0x8e
 8012850:	73fb      	strb	r3, [r7, #15]
 8012852:	2342      	movs	r3, #66	; 0x42
 8012854:	743b      	strb	r3, [r7, #16]
 8012856:	2300      	movs	r3, #0
 8012858:	747b      	strb	r3, [r7, #17]
 801285a:	2300      	movs	r3, #0
 801285c:	74bb      	strb	r3, [r7, #18]
 801285e:	2300      	movs	r3, #0
 8012860:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomSnapHdle,
 8012862:	4b97      	ldr	r3, [pc, #604]	; (8012ac0 <SVCCTL_InitCustomSvc+0x370>)
 8012864:	8818      	ldrh	r0, [r3, #0]
 8012866:	4b99      	ldr	r3, [pc, #612]	; (8012acc <SVCCTL_InitCustomSvc+0x37c>)
 8012868:	781b      	ldrb	r3, [r3, #0]
 801286a:	b29b      	uxth	r3, r3
 801286c:	1d3a      	adds	r2, r7, #4
 801286e:	4998      	ldr	r1, [pc, #608]	; (8012ad0 <SVCCTL_InitCustomSvc+0x380>)
 8012870:	9105      	str	r1, [sp, #20]
 8012872:	2100      	movs	r1, #0
 8012874:	9104      	str	r1, [sp, #16]
 8012876:	2110      	movs	r1, #16
 8012878:	9103      	str	r1, [sp, #12]
 801287a:	2100      	movs	r1, #0
 801287c:	9102      	str	r1, [sp, #8]
 801287e:	2102      	movs	r1, #2
 8012880:	9101      	str	r1, [sp, #4]
 8012882:	2102      	movs	r1, #2
 8012884:	9100      	str	r1, [sp, #0]
 8012886:	2102      	movs	r1, #2
 8012888:	f7fd f85a 	bl	800f940 <aci_gatt_add_char>
 801288c:	4603      	mov	r3, r0
 801288e:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : CU_SEN \n\r");
  }
  /**
   *  TEMP
   */
  COPY_TEMP_UUID(uuid.Char_UUID_128);
 8012890:	2319      	movs	r3, #25
 8012892:	713b      	strb	r3, [r7, #4]
 8012894:	23ed      	movs	r3, #237	; 0xed
 8012896:	717b      	strb	r3, [r7, #5]
 8012898:	2382      	movs	r3, #130	; 0x82
 801289a:	71bb      	strb	r3, [r7, #6]
 801289c:	23ae      	movs	r3, #174	; 0xae
 801289e:	71fb      	strb	r3, [r7, #7]
 80128a0:	23ed      	movs	r3, #237	; 0xed
 80128a2:	723b      	strb	r3, [r7, #8]
 80128a4:	2321      	movs	r3, #33	; 0x21
 80128a6:	727b      	strb	r3, [r7, #9]
 80128a8:	234c      	movs	r3, #76	; 0x4c
 80128aa:	72bb      	strb	r3, [r7, #10]
 80128ac:	239d      	movs	r3, #157	; 0x9d
 80128ae:	72fb      	strb	r3, [r7, #11]
 80128b0:	2341      	movs	r3, #65	; 0x41
 80128b2:	733b      	strb	r3, [r7, #12]
 80128b4:	2345      	movs	r3, #69	; 0x45
 80128b6:	737b      	strb	r3, [r7, #13]
 80128b8:	2322      	movs	r3, #34	; 0x22
 80128ba:	73bb      	strb	r3, [r7, #14]
 80128bc:	238e      	movs	r3, #142	; 0x8e
 80128be:	73fb      	strb	r3, [r7, #15]
 80128c0:	2343      	movs	r3, #67	; 0x43
 80128c2:	743b      	strb	r3, [r7, #16]
 80128c4:	2300      	movs	r3, #0
 80128c6:	747b      	strb	r3, [r7, #17]
 80128c8:	2300      	movs	r3, #0
 80128ca:	74bb      	strb	r3, [r7, #18]
 80128cc:	2300      	movs	r3, #0
 80128ce:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomSnapHdle,
 80128d0:	4b7b      	ldr	r3, [pc, #492]	; (8012ac0 <SVCCTL_InitCustomSvc+0x370>)
 80128d2:	8818      	ldrh	r0, [r3, #0]
 80128d4:	4b7f      	ldr	r3, [pc, #508]	; (8012ad4 <SVCCTL_InitCustomSvc+0x384>)
 80128d6:	781b      	ldrb	r3, [r3, #0]
 80128d8:	b29b      	uxth	r3, r3
 80128da:	1d3a      	adds	r2, r7, #4
 80128dc:	497e      	ldr	r1, [pc, #504]	; (8012ad8 <SVCCTL_InitCustomSvc+0x388>)
 80128de:	9105      	str	r1, [sp, #20]
 80128e0:	2100      	movs	r1, #0
 80128e2:	9104      	str	r1, [sp, #16]
 80128e4:	2110      	movs	r1, #16
 80128e6:	9103      	str	r1, [sp, #12]
 80128e8:	2100      	movs	r1, #0
 80128ea:	9102      	str	r1, [sp, #8]
 80128ec:	2102      	movs	r1, #2
 80128ee:	9101      	str	r1, [sp, #4]
 80128f0:	2102      	movs	r1, #2
 80128f2:	9100      	str	r1, [sp, #0]
 80128f4:	2102      	movs	r1, #2
 80128f6:	f7fd f823 	bl	800f940 <aci_gatt_add_char>
 80128fa:	4603      	mov	r3, r0
 80128fc:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : TEMP \n\r");
  }
  /**
   *  HUM
   */
  COPY_HUM_UUID(uuid.Char_UUID_128);
 80128fe:	2319      	movs	r3, #25
 8012900:	713b      	strb	r3, [r7, #4]
 8012902:	23ed      	movs	r3, #237	; 0xed
 8012904:	717b      	strb	r3, [r7, #5]
 8012906:	2382      	movs	r3, #130	; 0x82
 8012908:	71bb      	strb	r3, [r7, #6]
 801290a:	23ae      	movs	r3, #174	; 0xae
 801290c:	71fb      	strb	r3, [r7, #7]
 801290e:	23ed      	movs	r3, #237	; 0xed
 8012910:	723b      	strb	r3, [r7, #8]
 8012912:	2321      	movs	r3, #33	; 0x21
 8012914:	727b      	strb	r3, [r7, #9]
 8012916:	234c      	movs	r3, #76	; 0x4c
 8012918:	72bb      	strb	r3, [r7, #10]
 801291a:	239d      	movs	r3, #157	; 0x9d
 801291c:	72fb      	strb	r3, [r7, #11]
 801291e:	2341      	movs	r3, #65	; 0x41
 8012920:	733b      	strb	r3, [r7, #12]
 8012922:	2345      	movs	r3, #69	; 0x45
 8012924:	737b      	strb	r3, [r7, #13]
 8012926:	2322      	movs	r3, #34	; 0x22
 8012928:	73bb      	strb	r3, [r7, #14]
 801292a:	238e      	movs	r3, #142	; 0x8e
 801292c:	73fb      	strb	r3, [r7, #15]
 801292e:	2344      	movs	r3, #68	; 0x44
 8012930:	743b      	strb	r3, [r7, #16]
 8012932:	2300      	movs	r3, #0
 8012934:	747b      	strb	r3, [r7, #17]
 8012936:	2300      	movs	r3, #0
 8012938:	74bb      	strb	r3, [r7, #18]
 801293a:	2300      	movs	r3, #0
 801293c:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomSnapHdle,
 801293e:	4b60      	ldr	r3, [pc, #384]	; (8012ac0 <SVCCTL_InitCustomSvc+0x370>)
 8012940:	8818      	ldrh	r0, [r3, #0]
 8012942:	4b66      	ldr	r3, [pc, #408]	; (8012adc <SVCCTL_InitCustomSvc+0x38c>)
 8012944:	781b      	ldrb	r3, [r3, #0]
 8012946:	b29b      	uxth	r3, r3
 8012948:	1d3a      	adds	r2, r7, #4
 801294a:	4965      	ldr	r1, [pc, #404]	; (8012ae0 <SVCCTL_InitCustomSvc+0x390>)
 801294c:	9105      	str	r1, [sp, #20]
 801294e:	2100      	movs	r1, #0
 8012950:	9104      	str	r1, [sp, #16]
 8012952:	2110      	movs	r1, #16
 8012954:	9103      	str	r1, [sp, #12]
 8012956:	2100      	movs	r1, #0
 8012958:	9102      	str	r1, [sp, #8]
 801295a:	2102      	movs	r1, #2
 801295c:	9101      	str	r1, [sp, #4]
 801295e:	2102      	movs	r1, #2
 8012960:	9100      	str	r1, [sp, #0]
 8012962:	2102      	movs	r1, #2
 8012964:	f7fc ffec 	bl	800f940 <aci_gatt_add_char>
 8012968:	4603      	mov	r3, r0
 801296a:	75fb      	strb	r3, [r7, #23]
   *                                2 for ID_NUTRIENT +
   *                                2 for ID_DISP_EXTRA +
   *                              = 9
   */

  COPY_SNAP_SVC_2_UUID(uuid.Char_UUID_128);
 801296c:	238f      	movs	r3, #143	; 0x8f
 801296e:	713b      	strb	r3, [r7, #4]
 8012970:	23e5      	movs	r3, #229	; 0xe5
 8012972:	717b      	strb	r3, [r7, #5]
 8012974:	23b3      	movs	r3, #179	; 0xb3
 8012976:	71bb      	strb	r3, [r7, #6]
 8012978:	23d5      	movs	r3, #213	; 0xd5
 801297a:	71fb      	strb	r3, [r7, #7]
 801297c:	232e      	movs	r3, #46	; 0x2e
 801297e:	723b      	strb	r3, [r7, #8]
 8012980:	237f      	movs	r3, #127	; 0x7f
 8012982:	727b      	strb	r3, [r7, #9]
 8012984:	234a      	movs	r3, #74	; 0x4a
 8012986:	72bb      	strb	r3, [r7, #10]
 8012988:	2398      	movs	r3, #152	; 0x98
 801298a:	72fb      	strb	r3, [r7, #11]
 801298c:	232a      	movs	r3, #42	; 0x2a
 801298e:	733b      	strb	r3, [r7, #12]
 8012990:	2348      	movs	r3, #72	; 0x48
 8012992:	737b      	strb	r3, [r7, #13]
 8012994:	237a      	movs	r3, #122	; 0x7a
 8012996:	73bb      	strb	r3, [r7, #14]
 8012998:	23cc      	movs	r3, #204	; 0xcc
 801299a:	73fb      	strb	r3, [r7, #15]
 801299c:	2340      	movs	r3, #64	; 0x40
 801299e:	743b      	strb	r3, [r7, #16]
 80129a0:	2301      	movs	r3, #1
 80129a2:	747b      	strb	r3, [r7, #17]
 80129a4:	2300      	movs	r3, #0
 80129a6:	74bb      	strb	r3, [r7, #18]
 80129a8:	2300      	movs	r3, #0
 80129aa:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 80129ac:	1d39      	adds	r1, r7, #4
 80129ae:	4b4d      	ldr	r3, [pc, #308]	; (8012ae4 <SVCCTL_InitCustomSvc+0x394>)
 80129b0:	9300      	str	r3, [sp, #0]
 80129b2:	2309      	movs	r3, #9
 80129b4:	2201      	movs	r2, #1
 80129b6:	2002      	movs	r0, #2
 80129b8:	f7fc feec 	bl	800f794 <aci_gatt_add_service>
 80129bc:	4603      	mov	r3, r0
 80129be:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  NUMBER_VAR
   */
  COPY_NUMBER_VAR_UUID(uuid.Char_UUID_128);
 80129c0:	2319      	movs	r3, #25
 80129c2:	713b      	strb	r3, [r7, #4]
 80129c4:	23ed      	movs	r3, #237	; 0xed
 80129c6:	717b      	strb	r3, [r7, #5]
 80129c8:	2382      	movs	r3, #130	; 0x82
 80129ca:	71bb      	strb	r3, [r7, #6]
 80129cc:	23ae      	movs	r3, #174	; 0xae
 80129ce:	71fb      	strb	r3, [r7, #7]
 80129d0:	23ed      	movs	r3, #237	; 0xed
 80129d2:	723b      	strb	r3, [r7, #8]
 80129d4:	2321      	movs	r3, #33	; 0x21
 80129d6:	727b      	strb	r3, [r7, #9]
 80129d8:	234c      	movs	r3, #76	; 0x4c
 80129da:	72bb      	strb	r3, [r7, #10]
 80129dc:	239d      	movs	r3, #157	; 0x9d
 80129de:	72fb      	strb	r3, [r7, #11]
 80129e0:	2341      	movs	r3, #65	; 0x41
 80129e2:	733b      	strb	r3, [r7, #12]
 80129e4:	2345      	movs	r3, #69	; 0x45
 80129e6:	737b      	strb	r3, [r7, #13]
 80129e8:	2322      	movs	r3, #34	; 0x22
 80129ea:	73bb      	strb	r3, [r7, #14]
 80129ec:	238e      	movs	r3, #142	; 0x8e
 80129ee:	73fb      	strb	r3, [r7, #15]
 80129f0:	2341      	movs	r3, #65	; 0x41
 80129f2:	743b      	strb	r3, [r7, #16]
 80129f4:	2301      	movs	r3, #1
 80129f6:	747b      	strb	r3, [r7, #17]
 80129f8:	2300      	movs	r3, #0
 80129fa:	74bb      	strb	r3, [r7, #18]
 80129fc:	2300      	movs	r3, #0
 80129fe:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomSnap_1Hdle,
 8012a00:	4b2f      	ldr	r3, [pc, #188]	; (8012ac0 <SVCCTL_InitCustomSvc+0x370>)
 8012a02:	8958      	ldrh	r0, [r3, #10]
 8012a04:	4b38      	ldr	r3, [pc, #224]	; (8012ae8 <SVCCTL_InitCustomSvc+0x398>)
 8012a06:	781b      	ldrb	r3, [r3, #0]
 8012a08:	b29b      	uxth	r3, r3
 8012a0a:	1d3a      	adds	r2, r7, #4
 8012a0c:	4937      	ldr	r1, [pc, #220]	; (8012aec <SVCCTL_InitCustomSvc+0x39c>)
 8012a0e:	9105      	str	r1, [sp, #20]
 8012a10:	2100      	movs	r1, #0
 8012a12:	9104      	str	r1, [sp, #16]
 8012a14:	2110      	movs	r1, #16
 8012a16:	9103      	str	r1, [sp, #12]
 8012a18:	2100      	movs	r1, #0
 8012a1a:	9102      	str	r1, [sp, #8]
 8012a1c:	2100      	movs	r1, #0
 8012a1e:	9101      	str	r1, [sp, #4]
 8012a20:	2102      	movs	r1, #2
 8012a22:	9100      	str	r1, [sp, #0]
 8012a24:	2102      	movs	r1, #2
 8012a26:	f7fc ff8b 	bl	800f940 <aci_gatt_add_char>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : NUM_VAR \n\r");
  }
  /**
   *  ABSORBANCE
   */
  COPY_ABSORBANCE_UUID(uuid.Char_UUID_128);
 8012a2e:	2319      	movs	r3, #25
 8012a30:	713b      	strb	r3, [r7, #4]
 8012a32:	23ed      	movs	r3, #237	; 0xed
 8012a34:	717b      	strb	r3, [r7, #5]
 8012a36:	2382      	movs	r3, #130	; 0x82
 8012a38:	71bb      	strb	r3, [r7, #6]
 8012a3a:	23ae      	movs	r3, #174	; 0xae
 8012a3c:	71fb      	strb	r3, [r7, #7]
 8012a3e:	23ed      	movs	r3, #237	; 0xed
 8012a40:	723b      	strb	r3, [r7, #8]
 8012a42:	2321      	movs	r3, #33	; 0x21
 8012a44:	727b      	strb	r3, [r7, #9]
 8012a46:	234c      	movs	r3, #76	; 0x4c
 8012a48:	72bb      	strb	r3, [r7, #10]
 8012a4a:	239d      	movs	r3, #157	; 0x9d
 8012a4c:	72fb      	strb	r3, [r7, #11]
 8012a4e:	2341      	movs	r3, #65	; 0x41
 8012a50:	733b      	strb	r3, [r7, #12]
 8012a52:	2345      	movs	r3, #69	; 0x45
 8012a54:	737b      	strb	r3, [r7, #13]
 8012a56:	2322      	movs	r3, #34	; 0x22
 8012a58:	73bb      	strb	r3, [r7, #14]
 8012a5a:	238e      	movs	r3, #142	; 0x8e
 8012a5c:	73fb      	strb	r3, [r7, #15]
 8012a5e:	2342      	movs	r3, #66	; 0x42
 8012a60:	743b      	strb	r3, [r7, #16]
 8012a62:	2301      	movs	r3, #1
 8012a64:	747b      	strb	r3, [r7, #17]
 8012a66:	2300      	movs	r3, #0
 8012a68:	74bb      	strb	r3, [r7, #18]
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomSnap_1Hdle,
 8012a6e:	4b14      	ldr	r3, [pc, #80]	; (8012ac0 <SVCCTL_InitCustomSvc+0x370>)
 8012a70:	8958      	ldrh	r0, [r3, #10]
 8012a72:	4b1f      	ldr	r3, [pc, #124]	; (8012af0 <SVCCTL_InitCustomSvc+0x3a0>)
 8012a74:	781b      	ldrb	r3, [r3, #0]
 8012a76:	b29b      	uxth	r3, r3
 8012a78:	1d3a      	adds	r2, r7, #4
 8012a7a:	491e      	ldr	r1, [pc, #120]	; (8012af4 <SVCCTL_InitCustomSvc+0x3a4>)
 8012a7c:	9105      	str	r1, [sp, #20]
 8012a7e:	2100      	movs	r1, #0
 8012a80:	9104      	str	r1, [sp, #16]
 8012a82:	2110      	movs	r1, #16
 8012a84:	9103      	str	r1, [sp, #12]
 8012a86:	2100      	movs	r1, #0
 8012a88:	9102      	str	r1, [sp, #8]
 8012a8a:	2100      	movs	r1, #0
 8012a8c:	9101      	str	r1, [sp, #4]
 8012a8e:	2102      	movs	r1, #2
 8012a90:	9100      	str	r1, [sp, #0]
 8012a92:	2102      	movs	r1, #2
 8012a94:	f7fc ff54 	bl	800f940 <aci_gatt_add_char>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ABS \n\r");
  }
  /**
   *  ID_NUTRIENT
   */
  COPY_ID_NUTRIENT_UUID(uuid.Char_UUID_128);
 8012a9c:	2319      	movs	r3, #25
 8012a9e:	713b      	strb	r3, [r7, #4]
 8012aa0:	23ed      	movs	r3, #237	; 0xed
 8012aa2:	717b      	strb	r3, [r7, #5]
 8012aa4:	2382      	movs	r3, #130	; 0x82
 8012aa6:	71bb      	strb	r3, [r7, #6]
 8012aa8:	23ae      	movs	r3, #174	; 0xae
 8012aaa:	71fb      	strb	r3, [r7, #7]
 8012aac:	23ed      	movs	r3, #237	; 0xed
 8012aae:	723b      	strb	r3, [r7, #8]
 8012ab0:	2321      	movs	r3, #33	; 0x21
 8012ab2:	727b      	strb	r3, [r7, #9]
 8012ab4:	234c      	movs	r3, #76	; 0x4c
 8012ab6:	72bb      	strb	r3, [r7, #10]
 8012ab8:	e01e      	b.n	8012af8 <SVCCTL_InitCustomSvc+0x3a8>
 8012aba:	bf00      	nop
 8012abc:	0801268d 	.word	0x0801268d
 8012ac0:	20000db8 	.word	0x20000db8
 8012ac4:	200000f0 	.word	0x200000f0
 8012ac8:	20000dba 	.word	0x20000dba
 8012acc:	200000f1 	.word	0x200000f1
 8012ad0:	20000dbc 	.word	0x20000dbc
 8012ad4:	200000f2 	.word	0x200000f2
 8012ad8:	20000dbe 	.word	0x20000dbe
 8012adc:	200000f3 	.word	0x200000f3
 8012ae0:	20000dc0 	.word	0x20000dc0
 8012ae4:	20000dc2 	.word	0x20000dc2
 8012ae8:	200000f4 	.word	0x200000f4
 8012aec:	20000dc4 	.word	0x20000dc4
 8012af0:	200000f5 	.word	0x200000f5
 8012af4:	20000dc6 	.word	0x20000dc6
 8012af8:	239d      	movs	r3, #157	; 0x9d
 8012afa:	72fb      	strb	r3, [r7, #11]
 8012afc:	2341      	movs	r3, #65	; 0x41
 8012afe:	733b      	strb	r3, [r7, #12]
 8012b00:	2345      	movs	r3, #69	; 0x45
 8012b02:	737b      	strb	r3, [r7, #13]
 8012b04:	2322      	movs	r3, #34	; 0x22
 8012b06:	73bb      	strb	r3, [r7, #14]
 8012b08:	238e      	movs	r3, #142	; 0x8e
 8012b0a:	73fb      	strb	r3, [r7, #15]
 8012b0c:	2343      	movs	r3, #67	; 0x43
 8012b0e:	743b      	strb	r3, [r7, #16]
 8012b10:	2301      	movs	r3, #1
 8012b12:	747b      	strb	r3, [r7, #17]
 8012b14:	2300      	movs	r3, #0
 8012b16:	74bb      	strb	r3, [r7, #18]
 8012b18:	2300      	movs	r3, #0
 8012b1a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomSnap_1Hdle,
 8012b1c:	4b59      	ldr	r3, [pc, #356]	; (8012c84 <SVCCTL_InitCustomSvc+0x534>)
 8012b1e:	8958      	ldrh	r0, [r3, #10]
 8012b20:	4b59      	ldr	r3, [pc, #356]	; (8012c88 <SVCCTL_InitCustomSvc+0x538>)
 8012b22:	781b      	ldrb	r3, [r3, #0]
 8012b24:	b29b      	uxth	r3, r3
 8012b26:	1d3a      	adds	r2, r7, #4
 8012b28:	4958      	ldr	r1, [pc, #352]	; (8012c8c <SVCCTL_InitCustomSvc+0x53c>)
 8012b2a:	9105      	str	r1, [sp, #20]
 8012b2c:	2100      	movs	r1, #0
 8012b2e:	9104      	str	r1, [sp, #16]
 8012b30:	2110      	movs	r1, #16
 8012b32:	9103      	str	r1, [sp, #12]
 8012b34:	2100      	movs	r1, #0
 8012b36:	9102      	str	r1, [sp, #8]
 8012b38:	2100      	movs	r1, #0
 8012b3a:	9101      	str	r1, [sp, #4]
 8012b3c:	2102      	movs	r1, #2
 8012b3e:	9100      	str	r1, [sp, #0]
 8012b40:	2102      	movs	r1, #2
 8012b42:	f7fc fefd 	bl	800f940 <aci_gatt_add_char>
 8012b46:	4603      	mov	r3, r0
 8012b48:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ID_NUT \n\r");
  }
  /**
   *  ID_DISP_EXTRA
   */
  COPY_ID_DISP_EXTRA_UUID(uuid.Char_UUID_128);
 8012b4a:	2319      	movs	r3, #25
 8012b4c:	713b      	strb	r3, [r7, #4]
 8012b4e:	23ed      	movs	r3, #237	; 0xed
 8012b50:	717b      	strb	r3, [r7, #5]
 8012b52:	2382      	movs	r3, #130	; 0x82
 8012b54:	71bb      	strb	r3, [r7, #6]
 8012b56:	23ae      	movs	r3, #174	; 0xae
 8012b58:	71fb      	strb	r3, [r7, #7]
 8012b5a:	23ed      	movs	r3, #237	; 0xed
 8012b5c:	723b      	strb	r3, [r7, #8]
 8012b5e:	2321      	movs	r3, #33	; 0x21
 8012b60:	727b      	strb	r3, [r7, #9]
 8012b62:	234c      	movs	r3, #76	; 0x4c
 8012b64:	72bb      	strb	r3, [r7, #10]
 8012b66:	239d      	movs	r3, #157	; 0x9d
 8012b68:	72fb      	strb	r3, [r7, #11]
 8012b6a:	2341      	movs	r3, #65	; 0x41
 8012b6c:	733b      	strb	r3, [r7, #12]
 8012b6e:	2345      	movs	r3, #69	; 0x45
 8012b70:	737b      	strb	r3, [r7, #13]
 8012b72:	2322      	movs	r3, #34	; 0x22
 8012b74:	73bb      	strb	r3, [r7, #14]
 8012b76:	238e      	movs	r3, #142	; 0x8e
 8012b78:	73fb      	strb	r3, [r7, #15]
 8012b7a:	2344      	movs	r3, #68	; 0x44
 8012b7c:	743b      	strb	r3, [r7, #16]
 8012b7e:	2301      	movs	r3, #1
 8012b80:	747b      	strb	r3, [r7, #17]
 8012b82:	2300      	movs	r3, #0
 8012b84:	74bb      	strb	r3, [r7, #18]
 8012b86:	2300      	movs	r3, #0
 8012b88:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomSnap_1Hdle,
 8012b8a:	4b3e      	ldr	r3, [pc, #248]	; (8012c84 <SVCCTL_InitCustomSvc+0x534>)
 8012b8c:	8958      	ldrh	r0, [r3, #10]
 8012b8e:	4b40      	ldr	r3, [pc, #256]	; (8012c90 <SVCCTL_InitCustomSvc+0x540>)
 8012b90:	781b      	ldrb	r3, [r3, #0]
 8012b92:	b29b      	uxth	r3, r3
 8012b94:	1d3a      	adds	r2, r7, #4
 8012b96:	493f      	ldr	r1, [pc, #252]	; (8012c94 <SVCCTL_InitCustomSvc+0x544>)
 8012b98:	9105      	str	r1, [sp, #20]
 8012b9a:	2100      	movs	r1, #0
 8012b9c:	9104      	str	r1, [sp, #16]
 8012b9e:	2110      	movs	r1, #16
 8012ba0:	9103      	str	r1, [sp, #12]
 8012ba2:	2100      	movs	r1, #0
 8012ba4:	9102      	str	r1, [sp, #8]
 8012ba6:	2100      	movs	r1, #0
 8012ba8:	9101      	str	r1, [sp, #4]
 8012baa:	2102      	movs	r1, #2
 8012bac:	9100      	str	r1, [sp, #0]
 8012bae:	2102      	movs	r1, #2
 8012bb0:	f7fc fec6 	bl	800f940 <aci_gatt_add_char>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	75fb      	strb	r3, [r7, #23]
   * service_max_attribute_record = 1 for SNAP_SVC_3 +
   *                                2 for Acknowledge +
   *                              = 3
   */

  COPY_SNAP_SVC_3_UUID(uuid.Char_UUID_128);
 8012bb8:	238f      	movs	r3, #143	; 0x8f
 8012bba:	713b      	strb	r3, [r7, #4]
 8012bbc:	23e5      	movs	r3, #229	; 0xe5
 8012bbe:	717b      	strb	r3, [r7, #5]
 8012bc0:	23b3      	movs	r3, #179	; 0xb3
 8012bc2:	71bb      	strb	r3, [r7, #6]
 8012bc4:	23d5      	movs	r3, #213	; 0xd5
 8012bc6:	71fb      	strb	r3, [r7, #7]
 8012bc8:	232e      	movs	r3, #46	; 0x2e
 8012bca:	723b      	strb	r3, [r7, #8]
 8012bcc:	237f      	movs	r3, #127	; 0x7f
 8012bce:	727b      	strb	r3, [r7, #9]
 8012bd0:	234a      	movs	r3, #74	; 0x4a
 8012bd2:	72bb      	strb	r3, [r7, #10]
 8012bd4:	2398      	movs	r3, #152	; 0x98
 8012bd6:	72fb      	strb	r3, [r7, #11]
 8012bd8:	232a      	movs	r3, #42	; 0x2a
 8012bda:	733b      	strb	r3, [r7, #12]
 8012bdc:	2348      	movs	r3, #72	; 0x48
 8012bde:	737b      	strb	r3, [r7, #13]
 8012be0:	237a      	movs	r3, #122	; 0x7a
 8012be2:	73bb      	strb	r3, [r7, #14]
 8012be4:	23cc      	movs	r3, #204	; 0xcc
 8012be6:	73fb      	strb	r3, [r7, #15]
 8012be8:	2340      	movs	r3, #64	; 0x40
 8012bea:	743b      	strb	r3, [r7, #16]
 8012bec:	2302      	movs	r3, #2
 8012bee:	747b      	strb	r3, [r7, #17]
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	74bb      	strb	r3, [r7, #18]
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8012bf8:	1d39      	adds	r1, r7, #4
 8012bfa:	4b27      	ldr	r3, [pc, #156]	; (8012c98 <SVCCTL_InitCustomSvc+0x548>)
 8012bfc:	9300      	str	r3, [sp, #0]
 8012bfe:	2303      	movs	r3, #3
 8012c00:	2201      	movs	r2, #1
 8012c02:	2002      	movs	r0, #2
 8012c04:	f7fc fdc6 	bl	800f794 <aci_gatt_add_service>
 8012c08:	4603      	mov	r3, r0
 8012c0a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  Acknowledge
   */
  COPY_ACKNOWLEDGE_UUID(uuid.Char_UUID_128);
 8012c0c:	2301      	movs	r3, #1
 8012c0e:	713b      	strb	r3, [r7, #4]
 8012c10:	2300      	movs	r3, #0
 8012c12:	717b      	strb	r3, [r7, #5]
 8012c14:	2300      	movs	r3, #0
 8012c16:	71bb      	strb	r3, [r7, #6]
 8012c18:	2300      	movs	r3, #0
 8012c1a:	71fb      	strb	r3, [r7, #7]
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	723b      	strb	r3, [r7, #8]
 8012c20:	2300      	movs	r3, #0
 8012c22:	727b      	strb	r3, [r7, #9]
 8012c24:	2300      	movs	r3, #0
 8012c26:	72bb      	strb	r3, [r7, #10]
 8012c28:	2300      	movs	r3, #0
 8012c2a:	72fb      	strb	r3, [r7, #11]
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	733b      	strb	r3, [r7, #12]
 8012c30:	2300      	movs	r3, #0
 8012c32:	737b      	strb	r3, [r7, #13]
 8012c34:	2300      	movs	r3, #0
 8012c36:	73bb      	strb	r3, [r7, #14]
 8012c38:	2300      	movs	r3, #0
 8012c3a:	73fb      	strb	r3, [r7, #15]
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	743b      	strb	r3, [r7, #16]
 8012c40:	2300      	movs	r3, #0
 8012c42:	747b      	strb	r3, [r7, #17]
 8012c44:	2341      	movs	r3, #65	; 0x41
 8012c46:	74bb      	strb	r3, [r7, #18]
 8012c48:	2302      	movs	r3, #2
 8012c4a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomSnap_2Hdle,
 8012c4c:	4b0d      	ldr	r3, [pc, #52]	; (8012c84 <SVCCTL_InitCustomSvc+0x534>)
 8012c4e:	8a98      	ldrh	r0, [r3, #20]
 8012c50:	4b12      	ldr	r3, [pc, #72]	; (8012c9c <SVCCTL_InitCustomSvc+0x54c>)
 8012c52:	781b      	ldrb	r3, [r3, #0]
 8012c54:	b29b      	uxth	r3, r3
 8012c56:	1d3a      	adds	r2, r7, #4
 8012c58:	4911      	ldr	r1, [pc, #68]	; (8012ca0 <SVCCTL_InitCustomSvc+0x550>)
 8012c5a:	9105      	str	r1, [sp, #20]
 8012c5c:	2100      	movs	r1, #0
 8012c5e:	9104      	str	r1, [sp, #16]
 8012c60:	2110      	movs	r1, #16
 8012c62:	9103      	str	r1, [sp, #12]
 8012c64:	2101      	movs	r1, #1
 8012c66:	9102      	str	r1, [sp, #8]
 8012c68:	2100      	movs	r1, #0
 8012c6a:	9101      	str	r1, [sp, #4]
 8012c6c:	2108      	movs	r1, #8
 8012c6e:	9100      	str	r1, [sp, #0]
 8012c70:	2102      	movs	r1, #2
 8012c72:	f7fc fe65 	bl	800f940 <aci_gatt_add_char>
 8012c76:	4603      	mov	r3, r0
 8012c78:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8012c7a:	bf00      	nop
}
 8012c7c:	3718      	adds	r7, #24
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bd80      	pop	{r7, pc}
 8012c82:	bf00      	nop
 8012c84:	20000db8 	.word	0x20000db8
 8012c88:	200000f6 	.word	0x200000f6
 8012c8c:	20000dc8 	.word	0x20000dc8
 8012c90:	200000f7 	.word	0x200000f7
 8012c94:	20000dca 	.word	0x20000dca
 8012c98:	20000dcc 	.word	0x20000dcc
 8012c9c:	200000f8 	.word	0x200000f8
 8012ca0:	20000dce 	.word	0x20000dce

08012ca4 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b086      	sub	sp, #24
 8012ca8:	af02      	add	r7, sp, #8
 8012caa:	4603      	mov	r3, r0
 8012cac:	6039      	str	r1, [r7, #0]
 8012cae:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8012cb0:	2392      	movs	r3, #146	; 0x92
 8012cb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8012cb4:	79fb      	ldrb	r3, [r7, #7]
 8012cb6:	2b08      	cmp	r3, #8
 8012cb8:	f200 809d 	bhi.w	8012df6 <Custom_STM_App_Update_Char+0x152>
 8012cbc:	a201      	add	r2, pc, #4	; (adr r2, 8012cc4 <Custom_STM_App_Update_Char+0x20>)
 8012cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cc2:	bf00      	nop
 8012cc4:	08012ce9 	.word	0x08012ce9
 8012cc8:	08012d07 	.word	0x08012d07
 8012ccc:	08012d25 	.word	0x08012d25
 8012cd0:	08012d43 	.word	0x08012d43
 8012cd4:	08012d61 	.word	0x08012d61
 8012cd8:	08012d7f 	.word	0x08012d7f
 8012cdc:	08012d9d 	.word	0x08012d9d
 8012ce0:	08012dbb 	.word	0x08012dbb
 8012ce4:	08012dd9 	.word	0x08012dd9
  {

    case CUSTOM_STM_VOL_SEN:
      ret = aci_gatt_update_char_value(CustomContext.CustomSnapHdle,
 8012ce8:	4b46      	ldr	r3, [pc, #280]	; (8012e04 <Custom_STM_App_Update_Char+0x160>)
 8012cea:	8818      	ldrh	r0, [r3, #0]
 8012cec:	4b45      	ldr	r3, [pc, #276]	; (8012e04 <Custom_STM_App_Update_Char+0x160>)
 8012cee:	8859      	ldrh	r1, [r3, #2]
 8012cf0:	4b45      	ldr	r3, [pc, #276]	; (8012e08 <Custom_STM_App_Update_Char+0x164>)
 8012cf2:	781a      	ldrb	r2, [r3, #0]
 8012cf4:	683b      	ldr	r3, [r7, #0]
 8012cf6:	9300      	str	r3, [sp, #0]
 8012cf8:	4613      	mov	r3, r2
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	f7fc ff28 	bl	800fb50 <aci_gatt_update_char_value>
 8012d00:	4603      	mov	r3, r0
 8012d02:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value VOL_SEN command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 8012d04:	e078      	b.n	8012df8 <Custom_STM_App_Update_Char+0x154>

    case CUSTOM_STM_CU_SEN:
      ret = aci_gatt_update_char_value(CustomContext.CustomSnapHdle,
 8012d06:	4b3f      	ldr	r3, [pc, #252]	; (8012e04 <Custom_STM_App_Update_Char+0x160>)
 8012d08:	8818      	ldrh	r0, [r3, #0]
 8012d0a:	4b3e      	ldr	r3, [pc, #248]	; (8012e04 <Custom_STM_App_Update_Char+0x160>)
 8012d0c:	8899      	ldrh	r1, [r3, #4]
 8012d0e:	4b3f      	ldr	r3, [pc, #252]	; (8012e0c <Custom_STM_App_Update_Char+0x168>)
 8012d10:	781a      	ldrb	r2, [r3, #0]
 8012d12:	683b      	ldr	r3, [r7, #0]
 8012d14:	9300      	str	r3, [sp, #0]
 8012d16:	4613      	mov	r3, r2
 8012d18:	2200      	movs	r2, #0
 8012d1a:	f7fc ff19 	bl	800fb50 <aci_gatt_update_char_value>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value CU_SEN command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;
 8012d22:	e069      	b.n	8012df8 <Custom_STM_App_Update_Char+0x154>

    case CUSTOM_STM_TEMP:
      ret = aci_gatt_update_char_value(CustomContext.CustomSnapHdle,
 8012d24:	4b37      	ldr	r3, [pc, #220]	; (8012e04 <Custom_STM_App_Update_Char+0x160>)
 8012d26:	8818      	ldrh	r0, [r3, #0]
 8012d28:	4b36      	ldr	r3, [pc, #216]	; (8012e04 <Custom_STM_App_Update_Char+0x160>)
 8012d2a:	88d9      	ldrh	r1, [r3, #6]
 8012d2c:	4b38      	ldr	r3, [pc, #224]	; (8012e10 <Custom_STM_App_Update_Char+0x16c>)
 8012d2e:	781a      	ldrb	r2, [r3, #0]
 8012d30:	683b      	ldr	r3, [r7, #0]
 8012d32:	9300      	str	r3, [sp, #0]
 8012d34:	4613      	mov	r3, r2
 8012d36:	2200      	movs	r2, #0
 8012d38:	f7fc ff0a 	bl	800fb50 <aci_gatt_update_char_value>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value TEMP command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_3*/
      break;
 8012d40:	e05a      	b.n	8012df8 <Custom_STM_App_Update_Char+0x154>

    case CUSTOM_STM_HUM:
      ret = aci_gatt_update_char_value(CustomContext.CustomSnapHdle,
 8012d42:	4b30      	ldr	r3, [pc, #192]	; (8012e04 <Custom_STM_App_Update_Char+0x160>)
 8012d44:	8818      	ldrh	r0, [r3, #0]
 8012d46:	4b2f      	ldr	r3, [pc, #188]	; (8012e04 <Custom_STM_App_Update_Char+0x160>)
 8012d48:	8919      	ldrh	r1, [r3, #8]
 8012d4a:	4b32      	ldr	r3, [pc, #200]	; (8012e14 <Custom_STM_App_Update_Char+0x170>)
 8012d4c:	781a      	ldrb	r2, [r3, #0]
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	9300      	str	r3, [sp, #0]
 8012d52:	4613      	mov	r3, r2
 8012d54:	2200      	movs	r2, #0
 8012d56:	f7fc fefb 	bl	800fb50 <aci_gatt_update_char_value>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value HUM command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_4*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_4*/
      break;
 8012d5e:	e04b      	b.n	8012df8 <Custom_STM_App_Update_Char+0x154>

    case CUSTOM_STM_NUM_VAR:
      ret = aci_gatt_update_char_value(CustomContext.CustomSnap_1Hdle,
 8012d60:	4b28      	ldr	r3, [pc, #160]	; (8012e04 <Custom_STM_App_Update_Char+0x160>)
 8012d62:	8958      	ldrh	r0, [r3, #10]
 8012d64:	4b27      	ldr	r3, [pc, #156]	; (8012e04 <Custom_STM_App_Update_Char+0x160>)
 8012d66:	8999      	ldrh	r1, [r3, #12]
 8012d68:	4b2b      	ldr	r3, [pc, #172]	; (8012e18 <Custom_STM_App_Update_Char+0x174>)
 8012d6a:	781a      	ldrb	r2, [r3, #0]
 8012d6c:	683b      	ldr	r3, [r7, #0]
 8012d6e:	9300      	str	r3, [sp, #0]
 8012d70:	4613      	mov	r3, r2
 8012d72:	2200      	movs	r2, #0
 8012d74:	f7fc feec 	bl	800fb50 <aci_gatt_update_char_value>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value NUM_VAR command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_1*/
      break;
 8012d7c:	e03c      	b.n	8012df8 <Custom_STM_App_Update_Char+0x154>

    case CUSTOM_STM_ABS:
      ret = aci_gatt_update_char_value(CustomContext.CustomSnap_1Hdle,
 8012d7e:	4b21      	ldr	r3, [pc, #132]	; (8012e04 <Custom_STM_App_Update_Char+0x160>)
 8012d80:	8958      	ldrh	r0, [r3, #10]
 8012d82:	4b20      	ldr	r3, [pc, #128]	; (8012e04 <Custom_STM_App_Update_Char+0x160>)
 8012d84:	89d9      	ldrh	r1, [r3, #14]
 8012d86:	4b25      	ldr	r3, [pc, #148]	; (8012e1c <Custom_STM_App_Update_Char+0x178>)
 8012d88:	781a      	ldrb	r2, [r3, #0]
 8012d8a:	683b      	ldr	r3, [r7, #0]
 8012d8c:	9300      	str	r3, [sp, #0]
 8012d8e:	4613      	mov	r3, r2
 8012d90:	2200      	movs	r2, #0
 8012d92:	f7fc fedd 	bl	800fb50 <aci_gatt_update_char_value>
 8012d96:	4603      	mov	r3, r0
 8012d98:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ABS command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_2*/
      break;
 8012d9a:	e02d      	b.n	8012df8 <Custom_STM_App_Update_Char+0x154>

    case CUSTOM_STM_ID_NUT:
      ret = aci_gatt_update_char_value(CustomContext.CustomSnap_1Hdle,
 8012d9c:	4b19      	ldr	r3, [pc, #100]	; (8012e04 <Custom_STM_App_Update_Char+0x160>)
 8012d9e:	8958      	ldrh	r0, [r3, #10]
 8012da0:	4b18      	ldr	r3, [pc, #96]	; (8012e04 <Custom_STM_App_Update_Char+0x160>)
 8012da2:	8a19      	ldrh	r1, [r3, #16]
 8012da4:	4b1e      	ldr	r3, [pc, #120]	; (8012e20 <Custom_STM_App_Update_Char+0x17c>)
 8012da6:	781a      	ldrb	r2, [r3, #0]
 8012da8:	683b      	ldr	r3, [r7, #0]
 8012daa:	9300      	str	r3, [sp, #0]
 8012dac:	4613      	mov	r3, r2
 8012dae:	2200      	movs	r2, #0
 8012db0:	f7fc fece 	bl	800fb50 <aci_gatt_update_char_value>
 8012db4:	4603      	mov	r3, r0
 8012db6:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ID_NUT command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_3*/
      break;
 8012db8:	e01e      	b.n	8012df8 <Custom_STM_App_Update_Char+0x154>

    case CUSTOM_STM_ID_EXTRA:
      ret = aci_gatt_update_char_value(CustomContext.CustomSnap_1Hdle,
 8012dba:	4b12      	ldr	r3, [pc, #72]	; (8012e04 <Custom_STM_App_Update_Char+0x160>)
 8012dbc:	8958      	ldrh	r0, [r3, #10]
 8012dbe:	4b11      	ldr	r3, [pc, #68]	; (8012e04 <Custom_STM_App_Update_Char+0x160>)
 8012dc0:	8a59      	ldrh	r1, [r3, #18]
 8012dc2:	4b18      	ldr	r3, [pc, #96]	; (8012e24 <Custom_STM_App_Update_Char+0x180>)
 8012dc4:	781a      	ldrb	r2, [r3, #0]
 8012dc6:	683b      	ldr	r3, [r7, #0]
 8012dc8:	9300      	str	r3, [sp, #0]
 8012dca:	4613      	mov	r3, r2
 8012dcc:	2200      	movs	r2, #0
 8012dce:	f7fc febf 	bl	800fb50 <aci_gatt_update_char_value>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ID_EXTRA command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_4*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_4*/
      break;
 8012dd6:	e00f      	b.n	8012df8 <Custom_STM_App_Update_Char+0x154>

    case CUSTOM_STM_ACK:
      ret = aci_gatt_update_char_value(CustomContext.CustomSnap_2Hdle,
 8012dd8:	4b0a      	ldr	r3, [pc, #40]	; (8012e04 <Custom_STM_App_Update_Char+0x160>)
 8012dda:	8a98      	ldrh	r0, [r3, #20]
 8012ddc:	4b09      	ldr	r3, [pc, #36]	; (8012e04 <Custom_STM_App_Update_Char+0x160>)
 8012dde:	8ad9      	ldrh	r1, [r3, #22]
 8012de0:	4b11      	ldr	r3, [pc, #68]	; (8012e28 <Custom_STM_App_Update_Char+0x184>)
 8012de2:	781a      	ldrb	r2, [r3, #0]
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	9300      	str	r3, [sp, #0]
 8012de8:	4613      	mov	r3, r2
 8012dea:	2200      	movs	r2, #0
 8012dec:	f7fc feb0 	bl	800fb50 <aci_gatt_update_char_value>
 8012df0:	4603      	mov	r3, r0
 8012df2:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ACK command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_3_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_3_Char_1*/
      break;
 8012df4:	e000      	b.n	8012df8 <Custom_STM_App_Update_Char+0x154>

    default:
      break;
 8012df6:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8012df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	3710      	adds	r7, #16
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bd80      	pop	{r7, pc}
 8012e02:	bf00      	nop
 8012e04:	20000db8 	.word	0x20000db8
 8012e08:	200000f0 	.word	0x200000f0
 8012e0c:	200000f1 	.word	0x200000f1
 8012e10:	200000f2 	.word	0x200000f2
 8012e14:	200000f3 	.word	0x200000f3
 8012e18:	200000f4 	.word	0x200000f4
 8012e1c:	200000f5 	.word	0x200000f5
 8012e20:	200000f6 	.word	0x200000f6
 8012e24:	200000f7 	.word	0x200000f7
 8012e28:	200000f8 	.word	0x200000f8

08012e2c <LL_PWR_EnableBootC2>:
{
 8012e2c:	b480      	push	{r7}
 8012e2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8012e30:	4b05      	ldr	r3, [pc, #20]	; (8012e48 <LL_PWR_EnableBootC2+0x1c>)
 8012e32:	68db      	ldr	r3, [r3, #12]
 8012e34:	4a04      	ldr	r2, [pc, #16]	; (8012e48 <LL_PWR_EnableBootC2+0x1c>)
 8012e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012e3a:	60d3      	str	r3, [r2, #12]
}
 8012e3c:	bf00      	nop
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e44:	4770      	bx	lr
 8012e46:	bf00      	nop
 8012e48:	58000400 	.word	0x58000400

08012e4c <LL_C2_EXTI_EnableEvent_32_63>:
{
 8012e4c:	b480      	push	{r7}
 8012e4e:	b083      	sub	sp, #12
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8012e54:	4b06      	ldr	r3, [pc, #24]	; (8012e70 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8012e56:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8012e5a:	4905      	ldr	r1, [pc, #20]	; (8012e70 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	4313      	orrs	r3, r2
 8012e60:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8012e64:	bf00      	nop
 8012e66:	370c      	adds	r7, #12
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6e:	4770      	bx	lr
 8012e70:	58000800 	.word	0x58000800

08012e74 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8012e74:	b480      	push	{r7}
 8012e76:	b083      	sub	sp, #12
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8012e7c:	4b05      	ldr	r3, [pc, #20]	; (8012e94 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8012e7e:	6a1a      	ldr	r2, [r3, #32]
 8012e80:	4904      	ldr	r1, [pc, #16]	; (8012e94 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	4313      	orrs	r3, r2
 8012e86:	620b      	str	r3, [r1, #32]
}
 8012e88:	bf00      	nop
 8012e8a:	370c      	adds	r7, #12
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e92:	4770      	bx	lr
 8012e94:	58000800 	.word	0x58000800

08012e98 <LL_AHB3_GRP1_EnableClock>:
{
 8012e98:	b480      	push	{r7}
 8012e9a:	b085      	sub	sp, #20
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8012ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012ea4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012ea6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	4313      	orrs	r3, r2
 8012eae:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8012eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012eb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	4013      	ands	r3, r2
 8012eba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
}
 8012ebe:	bf00      	nop
 8012ec0:	3714      	adds	r7, #20
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec8:	4770      	bx	lr

08012eca <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8012eca:	b480      	push	{r7}
 8012ecc:	b085      	sub	sp, #20
 8012ece:	af00      	add	r7, sp, #0
 8012ed0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8012ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012ed6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8012eda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	4313      	orrs	r3, r2
 8012ee2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8012ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012eea:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	4013      	ands	r3, r2
 8012ef2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012ef4:	68fb      	ldr	r3, [r7, #12]
}
 8012ef6:	bf00      	nop
 8012ef8:	3714      	adds	r7, #20
 8012efa:	46bd      	mov	sp, r7
 8012efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f00:	4770      	bx	lr

08012f02 <LL_C1_IPCC_EnableIT_TXF>:
{
 8012f02:	b480      	push	{r7}
 8012f04:	b083      	sub	sp, #12
 8012f06:	af00      	add	r7, sp, #0
 8012f08:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	601a      	str	r2, [r3, #0]
}
 8012f16:	bf00      	nop
 8012f18:	370c      	adds	r7, #12
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f20:	4770      	bx	lr

08012f22 <LL_C1_IPCC_EnableIT_RXO>:
{
 8012f22:	b480      	push	{r7}
 8012f24:	b083      	sub	sp, #12
 8012f26:	af00      	add	r7, sp, #0
 8012f28:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	f043 0201 	orr.w	r2, r3, #1
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	601a      	str	r2, [r3, #0]
}
 8012f36:	bf00      	nop
 8012f38:	370c      	adds	r7, #12
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f40:	4770      	bx	lr

08012f42 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8012f42:	b480      	push	{r7}
 8012f44:	b083      	sub	sp, #12
 8012f46:	af00      	add	r7, sp, #0
 8012f48:	6078      	str	r0, [r7, #4]
 8012f4a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	685a      	ldr	r2, [r3, #4]
 8012f50:	683b      	ldr	r3, [r7, #0]
 8012f52:	041b      	lsls	r3, r3, #16
 8012f54:	43db      	mvns	r3, r3
 8012f56:	401a      	ands	r2, r3
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	605a      	str	r2, [r3, #4]
}
 8012f5c:	bf00      	nop
 8012f5e:	370c      	adds	r7, #12
 8012f60:	46bd      	mov	sp, r7
 8012f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f66:	4770      	bx	lr

08012f68 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8012f68:	b480      	push	{r7}
 8012f6a:	b083      	sub	sp, #12
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
 8012f70:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	685a      	ldr	r2, [r3, #4]
 8012f76:	683b      	ldr	r3, [r7, #0]
 8012f78:	041b      	lsls	r3, r3, #16
 8012f7a:	431a      	orrs	r2, r3
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	605a      	str	r2, [r3, #4]
}
 8012f80:	bf00      	nop
 8012f82:	370c      	adds	r7, #12
 8012f84:	46bd      	mov	sp, r7
 8012f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8a:	4770      	bx	lr

08012f8c <LL_C1_IPCC_EnableReceiveChannel>:
{
 8012f8c:	b480      	push	{r7}
 8012f8e:	b083      	sub	sp, #12
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
 8012f94:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	685a      	ldr	r2, [r3, #4]
 8012f9a:	683b      	ldr	r3, [r7, #0]
 8012f9c:	43db      	mvns	r3, r3
 8012f9e:	401a      	ands	r2, r3
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	605a      	str	r2, [r3, #4]
}
 8012fa4:	bf00      	nop
 8012fa6:	370c      	adds	r7, #12
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fae:	4770      	bx	lr

08012fb0 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8012fb0:	b480      	push	{r7}
 8012fb2:	b083      	sub	sp, #12
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
 8012fb8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	683a      	ldr	r2, [r7, #0]
 8012fbe:	609a      	str	r2, [r3, #8]
}
 8012fc0:	bf00      	nop
 8012fc2:	370c      	adds	r7, #12
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fca:	4770      	bx	lr

08012fcc <LL_C1_IPCC_SetFlag_CHx>:
{
 8012fcc:	b480      	push	{r7}
 8012fce:	b083      	sub	sp, #12
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
 8012fd4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8012fd6:	683b      	ldr	r3, [r7, #0]
 8012fd8:	041a      	lsls	r2, r3, #16
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	609a      	str	r2, [r3, #8]
}
 8012fde:	bf00      	nop
 8012fe0:	370c      	adds	r7, #12
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe8:	4770      	bx	lr

08012fea <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8012fea:	b480      	push	{r7}
 8012fec:	b083      	sub	sp, #12
 8012fee:	af00      	add	r7, sp, #0
 8012ff0:	6078      	str	r0, [r7, #4]
 8012ff2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	68da      	ldr	r2, [r3, #12]
 8012ff8:	683b      	ldr	r3, [r7, #0]
 8012ffa:	4013      	ands	r3, r2
 8012ffc:	683a      	ldr	r2, [r7, #0]
 8012ffe:	429a      	cmp	r2, r3
 8013000:	d101      	bne.n	8013006 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8013002:	2301      	movs	r3, #1
 8013004:	e000      	b.n	8013008 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8013006:	2300      	movs	r3, #0
}
 8013008:	4618      	mov	r0, r3
 801300a:	370c      	adds	r7, #12
 801300c:	46bd      	mov	sp, r7
 801300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013012:	4770      	bx	lr

08013014 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8013014:	b480      	push	{r7}
 8013016:	b083      	sub	sp, #12
 8013018:	af00      	add	r7, sp, #0
 801301a:	6078      	str	r0, [r7, #4]
 801301c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	69da      	ldr	r2, [r3, #28]
 8013022:	683b      	ldr	r3, [r7, #0]
 8013024:	4013      	ands	r3, r2
 8013026:	683a      	ldr	r2, [r7, #0]
 8013028:	429a      	cmp	r2, r3
 801302a:	d101      	bne.n	8013030 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 801302c:	2301      	movs	r3, #1
 801302e:	e000      	b.n	8013032 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8013030:	2300      	movs	r3, #0
}
 8013032:	4618      	mov	r0, r3
 8013034:	370c      	adds	r7, #12
 8013036:	46bd      	mov	sp, r7
 8013038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303c:	4770      	bx	lr
	...

08013040 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8013040:	b580      	push	{r7, lr}
 8013042:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8013044:	2102      	movs	r1, #2
 8013046:	4819      	ldr	r0, [pc, #100]	; (80130ac <HW_IPCC_Rx_Handler+0x6c>)
 8013048:	f7ff ffe4 	bl	8013014 <LL_C2_IPCC_IsActiveFlag_CHx>
 801304c:	4603      	mov	r3, r0
 801304e:	2b00      	cmp	r3, #0
 8013050:	d009      	beq.n	8013066 <HW_IPCC_Rx_Handler+0x26>
 8013052:	4b16      	ldr	r3, [pc, #88]	; (80130ac <HW_IPCC_Rx_Handler+0x6c>)
 8013054:	685b      	ldr	r3, [r3, #4]
 8013056:	43db      	mvns	r3, r3
 8013058:	f003 0302 	and.w	r3, r3, #2
 801305c:	2b00      	cmp	r3, #0
 801305e:	d002      	beq.n	8013066 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8013060:	f000 f8da 	bl	8013218 <HW_IPCC_SYS_EvtHandler>
 8013064:	e01f      	b.n	80130a6 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8013066:	2101      	movs	r1, #1
 8013068:	4810      	ldr	r0, [pc, #64]	; (80130ac <HW_IPCC_Rx_Handler+0x6c>)
 801306a:	f7ff ffd3 	bl	8013014 <LL_C2_IPCC_IsActiveFlag_CHx>
 801306e:	4603      	mov	r3, r0
 8013070:	2b00      	cmp	r3, #0
 8013072:	d008      	beq.n	8013086 <HW_IPCC_Rx_Handler+0x46>
 8013074:	4b0d      	ldr	r3, [pc, #52]	; (80130ac <HW_IPCC_Rx_Handler+0x6c>)
 8013076:	685b      	ldr	r3, [r3, #4]
 8013078:	f003 0301 	and.w	r3, r3, #1
 801307c:	2b00      	cmp	r3, #0
 801307e:	d102      	bne.n	8013086 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8013080:	f000 f88e 	bl	80131a0 <HW_IPCC_BLE_EvtHandler>
 8013084:	e00f      	b.n	80130a6 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8013086:	2108      	movs	r1, #8
 8013088:	4808      	ldr	r0, [pc, #32]	; (80130ac <HW_IPCC_Rx_Handler+0x6c>)
 801308a:	f7ff ffc3 	bl	8013014 <LL_C2_IPCC_IsActiveFlag_CHx>
 801308e:	4603      	mov	r3, r0
 8013090:	2b00      	cmp	r3, #0
 8013092:	d009      	beq.n	80130a8 <HW_IPCC_Rx_Handler+0x68>
 8013094:	4b05      	ldr	r3, [pc, #20]	; (80130ac <HW_IPCC_Rx_Handler+0x6c>)
 8013096:	685b      	ldr	r3, [r3, #4]
 8013098:	43db      	mvns	r3, r3
 801309a:	f003 0308 	and.w	r3, r3, #8
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d002      	beq.n	80130a8 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80130a2:	f000 f905 	bl	80132b0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80130a6:	bf00      	nop
 80130a8:	bf00      	nop
}
 80130aa:	bd80      	pop	{r7, pc}
 80130ac:	58000c00 	.word	0x58000c00

080130b0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80130b4:	2102      	movs	r1, #2
 80130b6:	481a      	ldr	r0, [pc, #104]	; (8013120 <HW_IPCC_Tx_Handler+0x70>)
 80130b8:	f7ff ff97 	bl	8012fea <LL_C1_IPCC_IsActiveFlag_CHx>
 80130bc:	4603      	mov	r3, r0
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d109      	bne.n	80130d6 <HW_IPCC_Tx_Handler+0x26>
 80130c2:	4b17      	ldr	r3, [pc, #92]	; (8013120 <HW_IPCC_Tx_Handler+0x70>)
 80130c4:	685b      	ldr	r3, [r3, #4]
 80130c6:	43db      	mvns	r3, r3
 80130c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d002      	beq.n	80130d6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80130d0:	f000 f896 	bl	8013200 <HW_IPCC_SYS_CmdEvtHandler>
 80130d4:	e020      	b.n	8013118 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80130d6:	2108      	movs	r1, #8
 80130d8:	4811      	ldr	r0, [pc, #68]	; (8013120 <HW_IPCC_Tx_Handler+0x70>)
 80130da:	f7ff ff86 	bl	8012fea <LL_C1_IPCC_IsActiveFlag_CHx>
 80130de:	4603      	mov	r3, r0
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d109      	bne.n	80130f8 <HW_IPCC_Tx_Handler+0x48>
 80130e4:	4b0e      	ldr	r3, [pc, #56]	; (8013120 <HW_IPCC_Tx_Handler+0x70>)
 80130e6:	685b      	ldr	r3, [r3, #4]
 80130e8:	43db      	mvns	r3, r3
 80130ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d002      	beq.n	80130f8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 80130f2:	f000 f8bf 	bl	8013274 <HW_IPCC_MM_FreeBufHandler>
 80130f6:	e00f      	b.n	8013118 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80130f8:	2120      	movs	r1, #32
 80130fa:	4809      	ldr	r0, [pc, #36]	; (8013120 <HW_IPCC_Tx_Handler+0x70>)
 80130fc:	f7ff ff75 	bl	8012fea <LL_C1_IPCC_IsActiveFlag_CHx>
 8013100:	4603      	mov	r3, r0
 8013102:	2b00      	cmp	r3, #0
 8013104:	d109      	bne.n	801311a <HW_IPCC_Tx_Handler+0x6a>
 8013106:	4b06      	ldr	r3, [pc, #24]	; (8013120 <HW_IPCC_Tx_Handler+0x70>)
 8013108:	685b      	ldr	r3, [r3, #4]
 801310a:	43db      	mvns	r3, r3
 801310c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013110:	2b00      	cmp	r3, #0
 8013112:	d002      	beq.n	801311a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8013114:	f000 f850 	bl	80131b8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8013118:	bf00      	nop
 801311a:	bf00      	nop
}
 801311c:	bd80      	pop	{r7, pc}
 801311e:	bf00      	nop
 8013120:	58000c00 	.word	0x58000c00

08013124 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8013124:	b580      	push	{r7, lr}
 8013126:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8013128:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801312c:	f7ff fecd 	bl	8012eca <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8013130:	f44f 7000 	mov.w	r0, #512	; 0x200
 8013134:	f7ff fe9e 	bl	8012e74 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8013138:	f44f 7000 	mov.w	r0, #512	; 0x200
 801313c:	f7ff fe86 	bl	8012e4c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8013140:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8013142:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8013144:	f7ff fe72 	bl	8012e2c <LL_PWR_EnableBootC2>

  return;
 8013148:	bf00      	nop
}
 801314a:	bd80      	pop	{r7, pc}

0801314c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 801314c:	b580      	push	{r7, lr}
 801314e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8013150:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8013154:	f7ff fea0 	bl	8012e98 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8013158:	4806      	ldr	r0, [pc, #24]	; (8013174 <HW_IPCC_Init+0x28>)
 801315a:	f7ff fee2 	bl	8012f22 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 801315e:	4805      	ldr	r0, [pc, #20]	; (8013174 <HW_IPCC_Init+0x28>)
 8013160:	f7ff fecf 	bl	8012f02 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8013164:	202c      	movs	r0, #44	; 0x2c
 8013166:	f7f1 f9e8 	bl	800453a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 801316a:	202d      	movs	r0, #45	; 0x2d
 801316c:	f7f1 f9e5 	bl	800453a <HAL_NVIC_EnableIRQ>

  return;
 8013170:	bf00      	nop
}
 8013172:	bd80      	pop	{r7, pc}
 8013174:	58000c00 	.word	0x58000c00

08013178 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8013178:	b580      	push	{r7, lr}
 801317a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 801317c:	2101      	movs	r1, #1
 801317e:	4802      	ldr	r0, [pc, #8]	; (8013188 <HW_IPCC_BLE_Init+0x10>)
 8013180:	f7ff ff04 	bl	8012f8c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8013184:	bf00      	nop
}
 8013186:	bd80      	pop	{r7, pc}
 8013188:	58000c00 	.word	0x58000c00

0801318c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 801318c:	b580      	push	{r7, lr}
 801318e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8013190:	2101      	movs	r1, #1
 8013192:	4802      	ldr	r0, [pc, #8]	; (801319c <HW_IPCC_BLE_SendCmd+0x10>)
 8013194:	f7ff ff1a 	bl	8012fcc <LL_C1_IPCC_SetFlag_CHx>

  return;
 8013198:	bf00      	nop
}
 801319a:	bd80      	pop	{r7, pc}
 801319c:	58000c00 	.word	0x58000c00

080131a0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80131a0:	b580      	push	{r7, lr}
 80131a2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80131a4:	f7fd fce8 	bl	8010b78 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80131a8:	2101      	movs	r1, #1
 80131aa:	4802      	ldr	r0, [pc, #8]	; (80131b4 <HW_IPCC_BLE_EvtHandler+0x14>)
 80131ac:	f7ff ff00 	bl	8012fb0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80131b0:	bf00      	nop
}
 80131b2:	bd80      	pop	{r7, pc}
 80131b4:	58000c00 	.word	0x58000c00

080131b8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80131bc:	2120      	movs	r1, #32
 80131be:	4803      	ldr	r0, [pc, #12]	; (80131cc <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80131c0:	f7ff fed2 	bl	8012f68 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80131c4:	f7fd fd08 	bl	8010bd8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80131c8:	bf00      	nop
}
 80131ca:	bd80      	pop	{r7, pc}
 80131cc:	58000c00 	.word	0x58000c00

080131d0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80131d4:	2102      	movs	r1, #2
 80131d6:	4802      	ldr	r0, [pc, #8]	; (80131e0 <HW_IPCC_SYS_Init+0x10>)
 80131d8:	f7ff fed8 	bl	8012f8c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80131dc:	bf00      	nop
}
 80131de:	bd80      	pop	{r7, pc}
 80131e0:	58000c00 	.word	0x58000c00

080131e4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80131e4:	b580      	push	{r7, lr}
 80131e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80131e8:	2102      	movs	r1, #2
 80131ea:	4804      	ldr	r0, [pc, #16]	; (80131fc <HW_IPCC_SYS_SendCmd+0x18>)
 80131ec:	f7ff feee 	bl	8012fcc <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80131f0:	2102      	movs	r1, #2
 80131f2:	4802      	ldr	r0, [pc, #8]	; (80131fc <HW_IPCC_SYS_SendCmd+0x18>)
 80131f4:	f7ff fea5 	bl	8012f42 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80131f8:	bf00      	nop
}
 80131fa:	bd80      	pop	{r7, pc}
 80131fc:	58000c00 	.word	0x58000c00

08013200 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8013200:	b580      	push	{r7, lr}
 8013202:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8013204:	2102      	movs	r1, #2
 8013206:	4803      	ldr	r0, [pc, #12]	; (8013214 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8013208:	f7ff feae 	bl	8012f68 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 801320c:	f7fd fd34 	bl	8010c78 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8013210:	bf00      	nop
}
 8013212:	bd80      	pop	{r7, pc}
 8013214:	58000c00 	.word	0x58000c00

08013218 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8013218:	b580      	push	{r7, lr}
 801321a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 801321c:	f7fd fd42 	bl	8010ca4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8013220:	2102      	movs	r1, #2
 8013222:	4802      	ldr	r0, [pc, #8]	; (801322c <HW_IPCC_SYS_EvtHandler+0x14>)
 8013224:	f7ff fec4 	bl	8012fb0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8013228:	bf00      	nop
}
 801322a:	bd80      	pop	{r7, pc}
 801322c:	58000c00 	.word	0x58000c00

08013230 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b082      	sub	sp, #8
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8013238:	2108      	movs	r1, #8
 801323a:	480c      	ldr	r0, [pc, #48]	; (801326c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801323c:	f7ff fed5 	bl	8012fea <LL_C1_IPCC_IsActiveFlag_CHx>
 8013240:	4603      	mov	r3, r0
 8013242:	2b00      	cmp	r3, #0
 8013244:	d007      	beq.n	8013256 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8013246:	4a0a      	ldr	r2, [pc, #40]	; (8013270 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801324c:	2108      	movs	r1, #8
 801324e:	4807      	ldr	r0, [pc, #28]	; (801326c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8013250:	f7ff fe77 	bl	8012f42 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8013254:	e006      	b.n	8013264 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801325a:	2108      	movs	r1, #8
 801325c:	4803      	ldr	r0, [pc, #12]	; (801326c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801325e:	f7ff feb5 	bl	8012fcc <LL_C1_IPCC_SetFlag_CHx>
  return;
 8013262:	bf00      	nop
}
 8013264:	3708      	adds	r7, #8
 8013266:	46bd      	mov	sp, r7
 8013268:	bd80      	pop	{r7, pc}
 801326a:	bf00      	nop
 801326c:	58000c00 	.word	0x58000c00
 8013270:	20000dd0 	.word	0x20000dd0

08013274 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8013274:	b580      	push	{r7, lr}
 8013276:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8013278:	2108      	movs	r1, #8
 801327a:	4806      	ldr	r0, [pc, #24]	; (8013294 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801327c:	f7ff fe74 	bl	8012f68 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8013280:	4b05      	ldr	r3, [pc, #20]	; (8013298 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8013286:	2108      	movs	r1, #8
 8013288:	4802      	ldr	r0, [pc, #8]	; (8013294 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801328a:	f7ff fe9f 	bl	8012fcc <LL_C1_IPCC_SetFlag_CHx>

  return;
 801328e:	bf00      	nop
}
 8013290:	bd80      	pop	{r7, pc}
 8013292:	bf00      	nop
 8013294:	58000c00 	.word	0x58000c00
 8013298:	20000dd0 	.word	0x20000dd0

0801329c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 801329c:	b580      	push	{r7, lr}
 801329e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80132a0:	2108      	movs	r1, #8
 80132a2:	4802      	ldr	r0, [pc, #8]	; (80132ac <HW_IPCC_TRACES_Init+0x10>)
 80132a4:	f7ff fe72 	bl	8012f8c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80132a8:	bf00      	nop
}
 80132aa:	bd80      	pop	{r7, pc}
 80132ac:	58000c00 	.word	0x58000c00

080132b0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80132b4:	f7fd fd9e 	bl	8010df4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80132b8:	2108      	movs	r1, #8
 80132ba:	4802      	ldr	r0, [pc, #8]	; (80132c4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80132bc:	f7ff fe78 	bl	8012fb0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80132c0:	bf00      	nop
}
 80132c2:	bd80      	pop	{r7, pc}
 80132c4:	58000c00 	.word	0x58000c00

080132c8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80132cc:	2200      	movs	r2, #0
 80132ce:	4912      	ldr	r1, [pc, #72]	; (8013318 <MX_USB_Device_Init+0x50>)
 80132d0:	4812      	ldr	r0, [pc, #72]	; (801331c <MX_USB_Device_Init+0x54>)
 80132d2:	f7fa fb63 	bl	800d99c <USBD_Init>
 80132d6:	4603      	mov	r3, r0
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d001      	beq.n	80132e0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80132dc:	f7ee fd58 	bl	8001d90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80132e0:	490f      	ldr	r1, [pc, #60]	; (8013320 <MX_USB_Device_Init+0x58>)
 80132e2:	480e      	ldr	r0, [pc, #56]	; (801331c <MX_USB_Device_Init+0x54>)
 80132e4:	f7fa fb8a 	bl	800d9fc <USBD_RegisterClass>
 80132e8:	4603      	mov	r3, r0
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d001      	beq.n	80132f2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80132ee:	f7ee fd4f 	bl	8001d90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80132f2:	490c      	ldr	r1, [pc, #48]	; (8013324 <MX_USB_Device_Init+0x5c>)
 80132f4:	4809      	ldr	r0, [pc, #36]	; (801331c <MX_USB_Device_Init+0x54>)
 80132f6:	f7fa fac1 	bl	800d87c <USBD_CDC_RegisterInterface>
 80132fa:	4603      	mov	r3, r0
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d001      	beq.n	8013304 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8013300:	f7ee fd46 	bl	8001d90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8013304:	4805      	ldr	r0, [pc, #20]	; (801331c <MX_USB_Device_Init+0x54>)
 8013306:	f7fa fbaf 	bl	800da68 <USBD_Start>
 801330a:	4603      	mov	r3, r0
 801330c:	2b00      	cmp	r3, #0
 801330e:	d001      	beq.n	8013314 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8013310:	f7ee fd3e 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8013314:	bf00      	nop
 8013316:	bd80      	pop	{r7, pc}
 8013318:	20000110 	.word	0x20000110
 801331c:	20000dd4 	.word	0x20000dd4
 8013320:	20000024 	.word	0x20000024
 8013324:	200000fc 	.word	0x200000fc

08013328 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013328:	b580      	push	{r7, lr}
 801332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801332c:	2200      	movs	r2, #0
 801332e:	4905      	ldr	r1, [pc, #20]	; (8013344 <CDC_Init_FS+0x1c>)
 8013330:	4805      	ldr	r0, [pc, #20]	; (8013348 <CDC_Init_FS+0x20>)
 8013332:	f7fa fabd 	bl	800d8b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013336:	4905      	ldr	r1, [pc, #20]	; (801334c <CDC_Init_FS+0x24>)
 8013338:	4803      	ldr	r0, [pc, #12]	; (8013348 <CDC_Init_FS+0x20>)
 801333a:	f7fa fadb 	bl	800d8f4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801333e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013340:	4618      	mov	r0, r3
 8013342:	bd80      	pop	{r7, pc}
 8013344:	200018b0 	.word	0x200018b0
 8013348:	20000dd4 	.word	0x20000dd4
 801334c:	200010b0 	.word	0x200010b0

08013350 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013350:	b480      	push	{r7}
 8013352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013354:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013356:	4618      	mov	r0, r3
 8013358:	46bd      	mov	sp, r7
 801335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335e:	4770      	bx	lr

08013360 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013360:	b480      	push	{r7}
 8013362:	b083      	sub	sp, #12
 8013364:	af00      	add	r7, sp, #0
 8013366:	4603      	mov	r3, r0
 8013368:	6039      	str	r1, [r7, #0]
 801336a:	71fb      	strb	r3, [r7, #7]
 801336c:	4613      	mov	r3, r2
 801336e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013370:	79fb      	ldrb	r3, [r7, #7]
 8013372:	2b23      	cmp	r3, #35	; 0x23
 8013374:	d84a      	bhi.n	801340c <CDC_Control_FS+0xac>
 8013376:	a201      	add	r2, pc, #4	; (adr r2, 801337c <CDC_Control_FS+0x1c>)
 8013378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801337c:	0801340d 	.word	0x0801340d
 8013380:	0801340d 	.word	0x0801340d
 8013384:	0801340d 	.word	0x0801340d
 8013388:	0801340d 	.word	0x0801340d
 801338c:	0801340d 	.word	0x0801340d
 8013390:	0801340d 	.word	0x0801340d
 8013394:	0801340d 	.word	0x0801340d
 8013398:	0801340d 	.word	0x0801340d
 801339c:	0801340d 	.word	0x0801340d
 80133a0:	0801340d 	.word	0x0801340d
 80133a4:	0801340d 	.word	0x0801340d
 80133a8:	0801340d 	.word	0x0801340d
 80133ac:	0801340d 	.word	0x0801340d
 80133b0:	0801340d 	.word	0x0801340d
 80133b4:	0801340d 	.word	0x0801340d
 80133b8:	0801340d 	.word	0x0801340d
 80133bc:	0801340d 	.word	0x0801340d
 80133c0:	0801340d 	.word	0x0801340d
 80133c4:	0801340d 	.word	0x0801340d
 80133c8:	0801340d 	.word	0x0801340d
 80133cc:	0801340d 	.word	0x0801340d
 80133d0:	0801340d 	.word	0x0801340d
 80133d4:	0801340d 	.word	0x0801340d
 80133d8:	0801340d 	.word	0x0801340d
 80133dc:	0801340d 	.word	0x0801340d
 80133e0:	0801340d 	.word	0x0801340d
 80133e4:	0801340d 	.word	0x0801340d
 80133e8:	0801340d 	.word	0x0801340d
 80133ec:	0801340d 	.word	0x0801340d
 80133f0:	0801340d 	.word	0x0801340d
 80133f4:	0801340d 	.word	0x0801340d
 80133f8:	0801340d 	.word	0x0801340d
 80133fc:	0801340d 	.word	0x0801340d
 8013400:	0801340d 	.word	0x0801340d
 8013404:	0801340d 	.word	0x0801340d
 8013408:	0801340d 	.word	0x0801340d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801340c:	bf00      	nop
  }

  return (USBD_OK);
 801340e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013410:	4618      	mov	r0, r3
 8013412:	370c      	adds	r7, #12
 8013414:	46bd      	mov	sp, r7
 8013416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801341a:	4770      	bx	lr

0801341c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b082      	sub	sp, #8
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
 8013424:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8013426:	6879      	ldr	r1, [r7, #4]
 8013428:	4805      	ldr	r0, [pc, #20]	; (8013440 <CDC_Receive_FS+0x24>)
 801342a:	f7fa fa63 	bl	800d8f4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801342e:	4804      	ldr	r0, [pc, #16]	; (8013440 <CDC_Receive_FS+0x24>)
 8013430:	f7fa fa7e 	bl	800d930 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013434:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013436:	4618      	mov	r0, r3
 8013438:	3708      	adds	r7, #8
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}
 801343e:	bf00      	nop
 8013440:	20000dd4 	.word	0x20000dd4

08013444 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013444:	b480      	push	{r7}
 8013446:	b087      	sub	sp, #28
 8013448:	af00      	add	r7, sp, #0
 801344a:	60f8      	str	r0, [r7, #12]
 801344c:	60b9      	str	r1, [r7, #8]
 801344e:	4613      	mov	r3, r2
 8013450:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013452:	2300      	movs	r3, #0
 8013454:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8013456:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801345a:	4618      	mov	r0, r3
 801345c:	371c      	adds	r7, #28
 801345e:	46bd      	mov	sp, r7
 8013460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013464:	4770      	bx	lr
	...

08013468 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013468:	b480      	push	{r7}
 801346a:	b083      	sub	sp, #12
 801346c:	af00      	add	r7, sp, #0
 801346e:	4603      	mov	r3, r0
 8013470:	6039      	str	r1, [r7, #0]
 8013472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8013474:	683b      	ldr	r3, [r7, #0]
 8013476:	2212      	movs	r2, #18
 8013478:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801347a:	4b03      	ldr	r3, [pc, #12]	; (8013488 <USBD_CDC_DeviceDescriptor+0x20>)
}
 801347c:	4618      	mov	r0, r3
 801347e:	370c      	adds	r7, #12
 8013480:	46bd      	mov	sp, r7
 8013482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013486:	4770      	bx	lr
 8013488:	20000130 	.word	0x20000130

0801348c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801348c:	b480      	push	{r7}
 801348e:	b083      	sub	sp, #12
 8013490:	af00      	add	r7, sp, #0
 8013492:	4603      	mov	r3, r0
 8013494:	6039      	str	r1, [r7, #0]
 8013496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	2204      	movs	r2, #4
 801349c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801349e:	4b03      	ldr	r3, [pc, #12]	; (80134ac <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80134a0:	4618      	mov	r0, r3
 80134a2:	370c      	adds	r7, #12
 80134a4:	46bd      	mov	sp, r7
 80134a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134aa:	4770      	bx	lr
 80134ac:	20000144 	.word	0x20000144

080134b0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b082      	sub	sp, #8
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	4603      	mov	r3, r0
 80134b8:	6039      	str	r1, [r7, #0]
 80134ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80134bc:	79fb      	ldrb	r3, [r7, #7]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d105      	bne.n	80134ce <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80134c2:	683a      	ldr	r2, [r7, #0]
 80134c4:	4907      	ldr	r1, [pc, #28]	; (80134e4 <USBD_CDC_ProductStrDescriptor+0x34>)
 80134c6:	4808      	ldr	r0, [pc, #32]	; (80134e8 <USBD_CDC_ProductStrDescriptor+0x38>)
 80134c8:	f7fb fc18 	bl	800ecfc <USBD_GetString>
 80134cc:	e004      	b.n	80134d8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80134ce:	683a      	ldr	r2, [r7, #0]
 80134d0:	4904      	ldr	r1, [pc, #16]	; (80134e4 <USBD_CDC_ProductStrDescriptor+0x34>)
 80134d2:	4805      	ldr	r0, [pc, #20]	; (80134e8 <USBD_CDC_ProductStrDescriptor+0x38>)
 80134d4:	f7fb fc12 	bl	800ecfc <USBD_GetString>
  }
  return USBD_StrDesc;
 80134d8:	4b02      	ldr	r3, [pc, #8]	; (80134e4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80134da:	4618      	mov	r0, r3
 80134dc:	3708      	adds	r7, #8
 80134de:	46bd      	mov	sp, r7
 80134e0:	bd80      	pop	{r7, pc}
 80134e2:	bf00      	nop
 80134e4:	200020b0 	.word	0x200020b0
 80134e8:	080170c4 	.word	0x080170c4

080134ec <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b082      	sub	sp, #8
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	4603      	mov	r3, r0
 80134f4:	6039      	str	r1, [r7, #0]
 80134f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80134f8:	683a      	ldr	r2, [r7, #0]
 80134fa:	4904      	ldr	r1, [pc, #16]	; (801350c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80134fc:	4804      	ldr	r0, [pc, #16]	; (8013510 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80134fe:	f7fb fbfd 	bl	800ecfc <USBD_GetString>
  return USBD_StrDesc;
 8013502:	4b02      	ldr	r3, [pc, #8]	; (801350c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8013504:	4618      	mov	r0, r3
 8013506:	3708      	adds	r7, #8
 8013508:	46bd      	mov	sp, r7
 801350a:	bd80      	pop	{r7, pc}
 801350c:	200020b0 	.word	0x200020b0
 8013510:	080170d0 	.word	0x080170d0

08013514 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013514:	b580      	push	{r7, lr}
 8013516:	b082      	sub	sp, #8
 8013518:	af00      	add	r7, sp, #0
 801351a:	4603      	mov	r3, r0
 801351c:	6039      	str	r1, [r7, #0]
 801351e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	221a      	movs	r2, #26
 8013524:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013526:	f000 f843 	bl	80135b0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801352a:	4b02      	ldr	r3, [pc, #8]	; (8013534 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 801352c:	4618      	mov	r0, r3
 801352e:	3708      	adds	r7, #8
 8013530:	46bd      	mov	sp, r7
 8013532:	bd80      	pop	{r7, pc}
 8013534:	20000148 	.word	0x20000148

08013538 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b082      	sub	sp, #8
 801353c:	af00      	add	r7, sp, #0
 801353e:	4603      	mov	r3, r0
 8013540:	6039      	str	r1, [r7, #0]
 8013542:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013544:	79fb      	ldrb	r3, [r7, #7]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d105      	bne.n	8013556 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801354a:	683a      	ldr	r2, [r7, #0]
 801354c:	4907      	ldr	r1, [pc, #28]	; (801356c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801354e:	4808      	ldr	r0, [pc, #32]	; (8013570 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8013550:	f7fb fbd4 	bl	800ecfc <USBD_GetString>
 8013554:	e004      	b.n	8013560 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8013556:	683a      	ldr	r2, [r7, #0]
 8013558:	4904      	ldr	r1, [pc, #16]	; (801356c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801355a:	4805      	ldr	r0, [pc, #20]	; (8013570 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801355c:	f7fb fbce 	bl	800ecfc <USBD_GetString>
  }
  return USBD_StrDesc;
 8013560:	4b02      	ldr	r3, [pc, #8]	; (801356c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8013562:	4618      	mov	r0, r3
 8013564:	3708      	adds	r7, #8
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}
 801356a:	bf00      	nop
 801356c:	200020b0 	.word	0x200020b0
 8013570:	080170d8 	.word	0x080170d8

08013574 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013574:	b580      	push	{r7, lr}
 8013576:	b082      	sub	sp, #8
 8013578:	af00      	add	r7, sp, #0
 801357a:	4603      	mov	r3, r0
 801357c:	6039      	str	r1, [r7, #0]
 801357e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013580:	79fb      	ldrb	r3, [r7, #7]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d105      	bne.n	8013592 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8013586:	683a      	ldr	r2, [r7, #0]
 8013588:	4907      	ldr	r1, [pc, #28]	; (80135a8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801358a:	4808      	ldr	r0, [pc, #32]	; (80135ac <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801358c:	f7fb fbb6 	bl	800ecfc <USBD_GetString>
 8013590:	e004      	b.n	801359c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8013592:	683a      	ldr	r2, [r7, #0]
 8013594:	4904      	ldr	r1, [pc, #16]	; (80135a8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8013596:	4805      	ldr	r0, [pc, #20]	; (80135ac <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8013598:	f7fb fbb0 	bl	800ecfc <USBD_GetString>
  }
  return USBD_StrDesc;
 801359c:	4b02      	ldr	r3, [pc, #8]	; (80135a8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801359e:	4618      	mov	r0, r3
 80135a0:	3708      	adds	r7, #8
 80135a2:	46bd      	mov	sp, r7
 80135a4:	bd80      	pop	{r7, pc}
 80135a6:	bf00      	nop
 80135a8:	200020b0 	.word	0x200020b0
 80135ac:	080170e4 	.word	0x080170e4

080135b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b084      	sub	sp, #16
 80135b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80135b6:	4b0f      	ldr	r3, [pc, #60]	; (80135f4 <Get_SerialNum+0x44>)
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80135bc:	4b0e      	ldr	r3, [pc, #56]	; (80135f8 <Get_SerialNum+0x48>)
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80135c2:	4b0e      	ldr	r3, [pc, #56]	; (80135fc <Get_SerialNum+0x4c>)
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80135c8:	68fa      	ldr	r2, [r7, #12]
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	4413      	add	r3, r2
 80135ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d009      	beq.n	80135ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80135d6:	2208      	movs	r2, #8
 80135d8:	4909      	ldr	r1, [pc, #36]	; (8013600 <Get_SerialNum+0x50>)
 80135da:	68f8      	ldr	r0, [r7, #12]
 80135dc:	f000 f814 	bl	8013608 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80135e0:	2204      	movs	r2, #4
 80135e2:	4908      	ldr	r1, [pc, #32]	; (8013604 <Get_SerialNum+0x54>)
 80135e4:	68b8      	ldr	r0, [r7, #8]
 80135e6:	f000 f80f 	bl	8013608 <IntToUnicode>
  }
}
 80135ea:	bf00      	nop
 80135ec:	3710      	adds	r7, #16
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bd80      	pop	{r7, pc}
 80135f2:	bf00      	nop
 80135f4:	1fff7590 	.word	0x1fff7590
 80135f8:	1fff7594 	.word	0x1fff7594
 80135fc:	1fff7598 	.word	0x1fff7598
 8013600:	2000014a 	.word	0x2000014a
 8013604:	2000015a 	.word	0x2000015a

08013608 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013608:	b480      	push	{r7}
 801360a:	b087      	sub	sp, #28
 801360c:	af00      	add	r7, sp, #0
 801360e:	60f8      	str	r0, [r7, #12]
 8013610:	60b9      	str	r1, [r7, #8]
 8013612:	4613      	mov	r3, r2
 8013614:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013616:	2300      	movs	r3, #0
 8013618:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801361a:	2300      	movs	r3, #0
 801361c:	75fb      	strb	r3, [r7, #23]
 801361e:	e027      	b.n	8013670 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	0f1b      	lsrs	r3, r3, #28
 8013624:	2b09      	cmp	r3, #9
 8013626:	d80b      	bhi.n	8013640 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	0f1b      	lsrs	r3, r3, #28
 801362c:	b2da      	uxtb	r2, r3
 801362e:	7dfb      	ldrb	r3, [r7, #23]
 8013630:	005b      	lsls	r3, r3, #1
 8013632:	4619      	mov	r1, r3
 8013634:	68bb      	ldr	r3, [r7, #8]
 8013636:	440b      	add	r3, r1
 8013638:	3230      	adds	r2, #48	; 0x30
 801363a:	b2d2      	uxtb	r2, r2
 801363c:	701a      	strb	r2, [r3, #0]
 801363e:	e00a      	b.n	8013656 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	0f1b      	lsrs	r3, r3, #28
 8013644:	b2da      	uxtb	r2, r3
 8013646:	7dfb      	ldrb	r3, [r7, #23]
 8013648:	005b      	lsls	r3, r3, #1
 801364a:	4619      	mov	r1, r3
 801364c:	68bb      	ldr	r3, [r7, #8]
 801364e:	440b      	add	r3, r1
 8013650:	3237      	adds	r2, #55	; 0x37
 8013652:	b2d2      	uxtb	r2, r2
 8013654:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	011b      	lsls	r3, r3, #4
 801365a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801365c:	7dfb      	ldrb	r3, [r7, #23]
 801365e:	005b      	lsls	r3, r3, #1
 8013660:	3301      	adds	r3, #1
 8013662:	68ba      	ldr	r2, [r7, #8]
 8013664:	4413      	add	r3, r2
 8013666:	2200      	movs	r2, #0
 8013668:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801366a:	7dfb      	ldrb	r3, [r7, #23]
 801366c:	3301      	adds	r3, #1
 801366e:	75fb      	strb	r3, [r7, #23]
 8013670:	7dfa      	ldrb	r2, [r7, #23]
 8013672:	79fb      	ldrb	r3, [r7, #7]
 8013674:	429a      	cmp	r2, r3
 8013676:	d3d3      	bcc.n	8013620 <IntToUnicode+0x18>
  }
}
 8013678:	bf00      	nop
 801367a:	bf00      	nop
 801367c:	371c      	adds	r7, #28
 801367e:	46bd      	mov	sp, r7
 8013680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013684:	4770      	bx	lr

08013686 <LL_AHB2_GRP1_EnableClock>:
{
 8013686:	b480      	push	{r7}
 8013688:	b085      	sub	sp, #20
 801368a:	af00      	add	r7, sp, #0
 801368c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801368e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013692:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013694:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	4313      	orrs	r3, r2
 801369c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801369e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80136a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	4013      	ands	r3, r2
 80136a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80136aa:	68fb      	ldr	r3, [r7, #12]
}
 80136ac:	bf00      	nop
 80136ae:	3714      	adds	r7, #20
 80136b0:	46bd      	mov	sp, r7
 80136b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b6:	4770      	bx	lr

080136b8 <LL_APB1_GRP1_EnableClock>:
{
 80136b8:	b480      	push	{r7}
 80136ba:	b085      	sub	sp, #20
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80136c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80136c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80136c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	4313      	orrs	r3, r2
 80136ce:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80136d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80136d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	4013      	ands	r3, r2
 80136da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80136dc:	68fb      	ldr	r3, [r7, #12]
}
 80136de:	bf00      	nop
 80136e0:	3714      	adds	r7, #20
 80136e2:	46bd      	mov	sp, r7
 80136e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e8:	4770      	bx	lr
	...

080136ec <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b09c      	sub	sp, #112	; 0x70
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80136f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80136f8:	2200      	movs	r2, #0
 80136fa:	601a      	str	r2, [r3, #0]
 80136fc:	605a      	str	r2, [r3, #4]
 80136fe:	609a      	str	r2, [r3, #8]
 8013700:	60da      	str	r2, [r3, #12]
 8013702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013704:	f107 030c 	add.w	r3, r7, #12
 8013708:	2250      	movs	r2, #80	; 0x50
 801370a:	2100      	movs	r1, #0
 801370c:	4618      	mov	r0, r3
 801370e:	f000 fe23 	bl	8014358 <memset>
  if(pcdHandle->Instance==USB)
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	4a23      	ldr	r2, [pc, #140]	; (80137a4 <HAL_PCD_MspInit+0xb8>)
 8013718:	4293      	cmp	r3, r2
 801371a:	d13e      	bne.n	801379a <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801371c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013720:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8013722:	2318      	movs	r3, #24
 8013724:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8013726:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801372a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 801372c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013730:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV8;
 8013732:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8013736:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8013738:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801373c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 801373e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8013742:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013744:	f107 030c 	add.w	r3, r7, #12
 8013748:	4618      	mov	r0, r3
 801374a:	f7f5 fcf3 	bl	8009134 <HAL_RCCEx_PeriphCLKConfig>
 801374e:	4603      	mov	r3, r0
 8013750:	2b00      	cmp	r3, #0
 8013752:	d001      	beq.n	8013758 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8013754:	f7ee fb1c 	bl	8001d90 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013758:	2001      	movs	r0, #1
 801375a:	f7ff ff94 	bl	8013686 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801375e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013762:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013764:	2302      	movs	r3, #2
 8013766:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013768:	2300      	movs	r3, #0
 801376a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801376c:	2300      	movs	r3, #0
 801376e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8013770:	230a      	movs	r3, #10
 8013772:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013774:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013778:	4619      	mov	r1, r3
 801377a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801377e:	f7f1 f9e7 	bl	8004b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8013782:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8013786:	f7ff ff97 	bl	80136b8 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 801378a:	2200      	movs	r2, #0
 801378c:	2100      	movs	r1, #0
 801378e:	2014      	movs	r0, #20
 8013790:	f7f0 feb9 	bl	8004506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8013794:	2014      	movs	r0, #20
 8013796:	f7f0 fed0 	bl	800453a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801379a:	bf00      	nop
 801379c:	3770      	adds	r7, #112	; 0x70
 801379e:	46bd      	mov	sp, r7
 80137a0:	bd80      	pop	{r7, pc}
 80137a2:	bf00      	nop
 80137a4:	40006800 	.word	0x40006800

080137a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b082      	sub	sp, #8
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80137bc:	4619      	mov	r1, r3
 80137be:	4610      	mov	r0, r2
 80137c0:	f7fa f99f 	bl	800db02 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80137c4:	bf00      	nop
 80137c6:	3708      	adds	r7, #8
 80137c8:	46bd      	mov	sp, r7
 80137ca:	bd80      	pop	{r7, pc}

080137cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b082      	sub	sp, #8
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
 80137d4:	460b      	mov	r3, r1
 80137d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80137de:	78fa      	ldrb	r2, [r7, #3]
 80137e0:	6879      	ldr	r1, [r7, #4]
 80137e2:	4613      	mov	r3, r2
 80137e4:	009b      	lsls	r3, r3, #2
 80137e6:	4413      	add	r3, r2
 80137e8:	00db      	lsls	r3, r3, #3
 80137ea:	440b      	add	r3, r1
 80137ec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80137f0:	681a      	ldr	r2, [r3, #0]
 80137f2:	78fb      	ldrb	r3, [r7, #3]
 80137f4:	4619      	mov	r1, r3
 80137f6:	f7fa f9d9 	bl	800dbac <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80137fa:	bf00      	nop
 80137fc:	3708      	adds	r7, #8
 80137fe:	46bd      	mov	sp, r7
 8013800:	bd80      	pop	{r7, pc}

08013802 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013802:	b580      	push	{r7, lr}
 8013804:	b082      	sub	sp, #8
 8013806:	af00      	add	r7, sp, #0
 8013808:	6078      	str	r0, [r7, #4]
 801380a:	460b      	mov	r3, r1
 801380c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8013814:	78fa      	ldrb	r2, [r7, #3]
 8013816:	6879      	ldr	r1, [r7, #4]
 8013818:	4613      	mov	r3, r2
 801381a:	009b      	lsls	r3, r3, #2
 801381c:	4413      	add	r3, r2
 801381e:	00db      	lsls	r3, r3, #3
 8013820:	440b      	add	r3, r1
 8013822:	333c      	adds	r3, #60	; 0x3c
 8013824:	681a      	ldr	r2, [r3, #0]
 8013826:	78fb      	ldrb	r3, [r7, #3]
 8013828:	4619      	mov	r1, r3
 801382a:	f7fa fa72 	bl	800dd12 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801382e:	bf00      	nop
 8013830:	3708      	adds	r7, #8
 8013832:	46bd      	mov	sp, r7
 8013834:	bd80      	pop	{r7, pc}

08013836 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013836:	b580      	push	{r7, lr}
 8013838:	b082      	sub	sp, #8
 801383a:	af00      	add	r7, sp, #0
 801383c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8013844:	4618      	mov	r0, r3
 8013846:	f7fa fbac 	bl	800dfa2 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801384a:	bf00      	nop
 801384c:	3708      	adds	r7, #8
 801384e:	46bd      	mov	sp, r7
 8013850:	bd80      	pop	{r7, pc}

08013852 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013852:	b580      	push	{r7, lr}
 8013854:	b084      	sub	sp, #16
 8013856:	af00      	add	r7, sp, #0
 8013858:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801385a:	2301      	movs	r3, #1
 801385c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	689b      	ldr	r3, [r3, #8]
 8013862:	2b02      	cmp	r3, #2
 8013864:	d001      	beq.n	801386a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8013866:	f7ee fa93 	bl	8001d90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8013870:	7bfa      	ldrb	r2, [r7, #15]
 8013872:	4611      	mov	r1, r2
 8013874:	4618      	mov	r0, r3
 8013876:	f7fa fb50 	bl	800df1a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8013880:	4618      	mov	r0, r3
 8013882:	f7fa faf8 	bl	800de76 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8013886:	bf00      	nop
 8013888:	3710      	adds	r7, #16
 801388a:	46bd      	mov	sp, r7
 801388c:	bd80      	pop	{r7, pc}
	...

08013890 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013890:	b580      	push	{r7, lr}
 8013892:	b082      	sub	sp, #8
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801389e:	4618      	mov	r0, r3
 80138a0:	f7fa fb4b 	bl	800df3a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	699b      	ldr	r3, [r3, #24]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d005      	beq.n	80138b8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80138ac:	4b04      	ldr	r3, [pc, #16]	; (80138c0 <HAL_PCD_SuspendCallback+0x30>)
 80138ae:	691b      	ldr	r3, [r3, #16]
 80138b0:	4a03      	ldr	r2, [pc, #12]	; (80138c0 <HAL_PCD_SuspendCallback+0x30>)
 80138b2:	f043 0306 	orr.w	r3, r3, #6
 80138b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80138b8:	bf00      	nop
 80138ba:	3708      	adds	r7, #8
 80138bc:	46bd      	mov	sp, r7
 80138be:	bd80      	pop	{r7, pc}
 80138c0:	e000ed00 	.word	0xe000ed00

080138c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b082      	sub	sp, #8
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	699b      	ldr	r3, [r3, #24]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d007      	beq.n	80138e4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80138d4:	4b08      	ldr	r3, [pc, #32]	; (80138f8 <HAL_PCD_ResumeCallback+0x34>)
 80138d6:	691b      	ldr	r3, [r3, #16]
 80138d8:	4a07      	ldr	r2, [pc, #28]	; (80138f8 <HAL_PCD_ResumeCallback+0x34>)
 80138da:	f023 0306 	bic.w	r3, r3, #6
 80138de:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80138e0:	f000 f9fc 	bl	8013cdc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80138ea:	4618      	mov	r0, r3
 80138ec:	f7fa fb41 	bl	800df72 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80138f0:	bf00      	nop
 80138f2:	3708      	adds	r7, #8
 80138f4:	46bd      	mov	sp, r7
 80138f6:	bd80      	pop	{r7, pc}
 80138f8:	e000ed00 	.word	0xe000ed00

080138fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b082      	sub	sp, #8
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8013904:	4a2c      	ldr	r2, [pc, #176]	; (80139b8 <USBD_LL_Init+0xbc>)
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	4a2a      	ldr	r2, [pc, #168]	; (80139b8 <USBD_LL_Init+0xbc>)
 8013910:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8013914:	f7f4 f90c 	bl	8007b30 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8013918:	4b27      	ldr	r3, [pc, #156]	; (80139b8 <USBD_LL_Init+0xbc>)
 801391a:	4a28      	ldr	r2, [pc, #160]	; (80139bc <USBD_LL_Init+0xc0>)
 801391c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801391e:	4b26      	ldr	r3, [pc, #152]	; (80139b8 <USBD_LL_Init+0xbc>)
 8013920:	2208      	movs	r2, #8
 8013922:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8013924:	4b24      	ldr	r3, [pc, #144]	; (80139b8 <USBD_LL_Init+0xbc>)
 8013926:	2202      	movs	r2, #2
 8013928:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801392a:	4b23      	ldr	r3, [pc, #140]	; (80139b8 <USBD_LL_Init+0xbc>)
 801392c:	2202      	movs	r2, #2
 801392e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8013930:	4b21      	ldr	r3, [pc, #132]	; (80139b8 <USBD_LL_Init+0xbc>)
 8013932:	2200      	movs	r2, #0
 8013934:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8013936:	4b20      	ldr	r3, [pc, #128]	; (80139b8 <USBD_LL_Init+0xbc>)
 8013938:	2200      	movs	r2, #0
 801393a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801393c:	4b1e      	ldr	r3, [pc, #120]	; (80139b8 <USBD_LL_Init+0xbc>)
 801393e:	2200      	movs	r2, #0
 8013940:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8013942:	4b1d      	ldr	r3, [pc, #116]	; (80139b8 <USBD_LL_Init+0xbc>)
 8013944:	2200      	movs	r2, #0
 8013946:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8013948:	481b      	ldr	r0, [pc, #108]	; (80139b8 <USBD_LL_Init+0xbc>)
 801394a:	f7f2 fb8f 	bl	800606c <HAL_PCD_Init>
 801394e:	4603      	mov	r3, r0
 8013950:	2b00      	cmp	r3, #0
 8013952:	d001      	beq.n	8013958 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8013954:	f7ee fa1c 	bl	8001d90 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801395e:	2318      	movs	r3, #24
 8013960:	2200      	movs	r2, #0
 8013962:	2100      	movs	r1, #0
 8013964:	f7f4 f858 	bl	8007a18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801396e:	2358      	movs	r3, #88	; 0x58
 8013970:	2200      	movs	r2, #0
 8013972:	2180      	movs	r1, #128	; 0x80
 8013974:	f7f4 f850 	bl	8007a18 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801397e:	23c0      	movs	r3, #192	; 0xc0
 8013980:	2200      	movs	r2, #0
 8013982:	2181      	movs	r1, #129	; 0x81
 8013984:	f7f4 f848 	bl	8007a18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801398e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8013992:	2200      	movs	r2, #0
 8013994:	2101      	movs	r1, #1
 8013996:	f7f4 f83f 	bl	8007a18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80139a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80139a4:	2200      	movs	r2, #0
 80139a6:	2182      	movs	r1, #130	; 0x82
 80139a8:	f7f4 f836 	bl	8007a18 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80139ac:	2300      	movs	r3, #0
}
 80139ae:	4618      	mov	r0, r3
 80139b0:	3708      	adds	r7, #8
 80139b2:	46bd      	mov	sp, r7
 80139b4:	bd80      	pop	{r7, pc}
 80139b6:	bf00      	nop
 80139b8:	200022b0 	.word	0x200022b0
 80139bc:	40006800 	.word	0x40006800

080139c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b084      	sub	sp, #16
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80139c8:	2300      	movs	r3, #0
 80139ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80139cc:	2300      	movs	r3, #0
 80139ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80139d6:	4618      	mov	r0, r3
 80139d8:	f7f2 fc21 	bl	800621e <HAL_PCD_Start>
 80139dc:	4603      	mov	r3, r0
 80139de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80139e0:	7bfb      	ldrb	r3, [r7, #15]
 80139e2:	4618      	mov	r0, r3
 80139e4:	f000 f980 	bl	8013ce8 <USBD_Get_USB_Status>
 80139e8:	4603      	mov	r3, r0
 80139ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80139ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80139ee:	4618      	mov	r0, r3
 80139f0:	3710      	adds	r7, #16
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}

080139f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80139f6:	b580      	push	{r7, lr}
 80139f8:	b084      	sub	sp, #16
 80139fa:	af00      	add	r7, sp, #0
 80139fc:	6078      	str	r0, [r7, #4]
 80139fe:	4608      	mov	r0, r1
 8013a00:	4611      	mov	r1, r2
 8013a02:	461a      	mov	r2, r3
 8013a04:	4603      	mov	r3, r0
 8013a06:	70fb      	strb	r3, [r7, #3]
 8013a08:	460b      	mov	r3, r1
 8013a0a:	70bb      	strb	r3, [r7, #2]
 8013a0c:	4613      	mov	r3, r2
 8013a0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a10:	2300      	movs	r3, #0
 8013a12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a14:	2300      	movs	r3, #0
 8013a16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013a1e:	78bb      	ldrb	r3, [r7, #2]
 8013a20:	883a      	ldrh	r2, [r7, #0]
 8013a22:	78f9      	ldrb	r1, [r7, #3]
 8013a24:	f7f2 fd69 	bl	80064fa <HAL_PCD_EP_Open>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013a2c:	7bfb      	ldrb	r3, [r7, #15]
 8013a2e:	4618      	mov	r0, r3
 8013a30:	f000 f95a 	bl	8013ce8 <USBD_Get_USB_Status>
 8013a34:	4603      	mov	r3, r0
 8013a36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013a38:	7bbb      	ldrb	r3, [r7, #14]
}
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	3710      	adds	r7, #16
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bd80      	pop	{r7, pc}

08013a42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013a42:	b580      	push	{r7, lr}
 8013a44:	b084      	sub	sp, #16
 8013a46:	af00      	add	r7, sp, #0
 8013a48:	6078      	str	r0, [r7, #4]
 8013a4a:	460b      	mov	r3, r1
 8013a4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a4e:	2300      	movs	r3, #0
 8013a50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a52:	2300      	movs	r3, #0
 8013a54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013a5c:	78fa      	ldrb	r2, [r7, #3]
 8013a5e:	4611      	mov	r1, r2
 8013a60:	4618      	mov	r0, r3
 8013a62:	f7f2 fda7 	bl	80065b4 <HAL_PCD_EP_Close>
 8013a66:	4603      	mov	r3, r0
 8013a68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013a6a:	7bfb      	ldrb	r3, [r7, #15]
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	f000 f93b 	bl	8013ce8 <USBD_Get_USB_Status>
 8013a72:	4603      	mov	r3, r0
 8013a74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013a76:	7bbb      	ldrb	r3, [r7, #14]
}
 8013a78:	4618      	mov	r0, r3
 8013a7a:	3710      	adds	r7, #16
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}

08013a80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b084      	sub	sp, #16
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
 8013a88:	460b      	mov	r3, r1
 8013a8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a90:	2300      	movs	r3, #0
 8013a92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013a9a:	78fa      	ldrb	r2, [r7, #3]
 8013a9c:	4611      	mov	r1, r2
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	f7f2 fe50 	bl	8006744 <HAL_PCD_EP_SetStall>
 8013aa4:	4603      	mov	r3, r0
 8013aa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013aa8:	7bfb      	ldrb	r3, [r7, #15]
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f000 f91c 	bl	8013ce8 <USBD_Get_USB_Status>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013ab4:	7bbb      	ldrb	r3, [r7, #14]
}
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	3710      	adds	r7, #16
 8013aba:	46bd      	mov	sp, r7
 8013abc:	bd80      	pop	{r7, pc}

08013abe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013abe:	b580      	push	{r7, lr}
 8013ac0:	b084      	sub	sp, #16
 8013ac2:	af00      	add	r7, sp, #0
 8013ac4:	6078      	str	r0, [r7, #4]
 8013ac6:	460b      	mov	r3, r1
 8013ac8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013aca:	2300      	movs	r3, #0
 8013acc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ace:	2300      	movs	r3, #0
 8013ad0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013ad8:	78fa      	ldrb	r2, [r7, #3]
 8013ada:	4611      	mov	r1, r2
 8013adc:	4618      	mov	r0, r3
 8013ade:	f7f2 fe83 	bl	80067e8 <HAL_PCD_EP_ClrStall>
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013ae6:	7bfb      	ldrb	r3, [r7, #15]
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f000 f8fd 	bl	8013ce8 <USBD_Get_USB_Status>
 8013aee:	4603      	mov	r3, r0
 8013af0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013af2:	7bbb      	ldrb	r3, [r7, #14]
}
 8013af4:	4618      	mov	r0, r3
 8013af6:	3710      	adds	r7, #16
 8013af8:	46bd      	mov	sp, r7
 8013afa:	bd80      	pop	{r7, pc}

08013afc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013afc:	b480      	push	{r7}
 8013afe:	b085      	sub	sp, #20
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
 8013b04:	460b      	mov	r3, r1
 8013b06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013b0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013b10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	da0c      	bge.n	8013b32 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013b18:	78fb      	ldrb	r3, [r7, #3]
 8013b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013b1e:	68f9      	ldr	r1, [r7, #12]
 8013b20:	1c5a      	adds	r2, r3, #1
 8013b22:	4613      	mov	r3, r2
 8013b24:	009b      	lsls	r3, r3, #2
 8013b26:	4413      	add	r3, r2
 8013b28:	00db      	lsls	r3, r3, #3
 8013b2a:	440b      	add	r3, r1
 8013b2c:	3302      	adds	r3, #2
 8013b2e:	781b      	ldrb	r3, [r3, #0]
 8013b30:	e00b      	b.n	8013b4a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013b32:	78fb      	ldrb	r3, [r7, #3]
 8013b34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013b38:	68f9      	ldr	r1, [r7, #12]
 8013b3a:	4613      	mov	r3, r2
 8013b3c:	009b      	lsls	r3, r3, #2
 8013b3e:	4413      	add	r3, r2
 8013b40:	00db      	lsls	r3, r3, #3
 8013b42:	440b      	add	r3, r1
 8013b44:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8013b48:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	3714      	adds	r7, #20
 8013b4e:	46bd      	mov	sp, r7
 8013b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b54:	4770      	bx	lr

08013b56 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013b56:	b580      	push	{r7, lr}
 8013b58:	b084      	sub	sp, #16
 8013b5a:	af00      	add	r7, sp, #0
 8013b5c:	6078      	str	r0, [r7, #4]
 8013b5e:	460b      	mov	r3, r1
 8013b60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b62:	2300      	movs	r3, #0
 8013b64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b66:	2300      	movs	r3, #0
 8013b68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013b70:	78fa      	ldrb	r2, [r7, #3]
 8013b72:	4611      	mov	r1, r2
 8013b74:	4618      	mov	r0, r3
 8013b76:	f7f2 fc9b 	bl	80064b0 <HAL_PCD_SetAddress>
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013b7e:	7bfb      	ldrb	r3, [r7, #15]
 8013b80:	4618      	mov	r0, r3
 8013b82:	f000 f8b1 	bl	8013ce8 <USBD_Get_USB_Status>
 8013b86:	4603      	mov	r3, r0
 8013b88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013b8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	3710      	adds	r7, #16
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bd80      	pop	{r7, pc}

08013b94 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b086      	sub	sp, #24
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	60f8      	str	r0, [r7, #12]
 8013b9c:	607a      	str	r2, [r7, #4]
 8013b9e:	603b      	str	r3, [r7, #0]
 8013ba0:	460b      	mov	r3, r1
 8013ba2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ba8:	2300      	movs	r3, #0
 8013baa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013bb2:	7af9      	ldrb	r1, [r7, #11]
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	687a      	ldr	r2, [r7, #4]
 8013bb8:	f7f2 fd8d 	bl	80066d6 <HAL_PCD_EP_Transmit>
 8013bbc:	4603      	mov	r3, r0
 8013bbe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013bc0:	7dfb      	ldrb	r3, [r7, #23]
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f000 f890 	bl	8013ce8 <USBD_Get_USB_Status>
 8013bc8:	4603      	mov	r3, r0
 8013bca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013bcc:	7dbb      	ldrb	r3, [r7, #22]
}
 8013bce:	4618      	mov	r0, r3
 8013bd0:	3718      	adds	r7, #24
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	bd80      	pop	{r7, pc}

08013bd6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013bd6:	b580      	push	{r7, lr}
 8013bd8:	b086      	sub	sp, #24
 8013bda:	af00      	add	r7, sp, #0
 8013bdc:	60f8      	str	r0, [r7, #12]
 8013bde:	607a      	str	r2, [r7, #4]
 8013be0:	603b      	str	r3, [r7, #0]
 8013be2:	460b      	mov	r3, r1
 8013be4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013be6:	2300      	movs	r3, #0
 8013be8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013bea:	2300      	movs	r3, #0
 8013bec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013bf4:	7af9      	ldrb	r1, [r7, #11]
 8013bf6:	683b      	ldr	r3, [r7, #0]
 8013bf8:	687a      	ldr	r2, [r7, #4]
 8013bfa:	f7f2 fd23 	bl	8006644 <HAL_PCD_EP_Receive>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013c02:	7dfb      	ldrb	r3, [r7, #23]
 8013c04:	4618      	mov	r0, r3
 8013c06:	f000 f86f 	bl	8013ce8 <USBD_Get_USB_Status>
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013c0e:	7dbb      	ldrb	r3, [r7, #22]
}
 8013c10:	4618      	mov	r0, r3
 8013c12:	3718      	adds	r7, #24
 8013c14:	46bd      	mov	sp, r7
 8013c16:	bd80      	pop	{r7, pc}

08013c18 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b082      	sub	sp, #8
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	6078      	str	r0, [r7, #4]
 8013c20:	460b      	mov	r3, r1
 8013c22:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013c2a:	78fa      	ldrb	r2, [r7, #3]
 8013c2c:	4611      	mov	r1, r2
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f7f2 fd39 	bl	80066a6 <HAL_PCD_EP_GetRxCount>
 8013c34:	4603      	mov	r3, r0
}
 8013c36:	4618      	mov	r0, r3
 8013c38:	3708      	adds	r7, #8
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	bd80      	pop	{r7, pc}
	...

08013c40 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b082      	sub	sp, #8
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
 8013c48:	460b      	mov	r3, r1
 8013c4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8013c4c:	78fb      	ldrb	r3, [r7, #3]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d002      	beq.n	8013c58 <HAL_PCDEx_LPM_Callback+0x18>
 8013c52:	2b01      	cmp	r3, #1
 8013c54:	d013      	beq.n	8013c7e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8013c56:	e023      	b.n	8013ca0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	699b      	ldr	r3, [r3, #24]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d007      	beq.n	8013c70 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013c60:	f000 f83c 	bl	8013cdc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013c64:	4b10      	ldr	r3, [pc, #64]	; (8013ca8 <HAL_PCDEx_LPM_Callback+0x68>)
 8013c66:	691b      	ldr	r3, [r3, #16]
 8013c68:	4a0f      	ldr	r2, [pc, #60]	; (8013ca8 <HAL_PCDEx_LPM_Callback+0x68>)
 8013c6a:	f023 0306 	bic.w	r3, r3, #6
 8013c6e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8013c76:	4618      	mov	r0, r3
 8013c78:	f7fa f97b 	bl	800df72 <USBD_LL_Resume>
    break;
 8013c7c:	e010      	b.n	8013ca0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8013c84:	4618      	mov	r0, r3
 8013c86:	f7fa f958 	bl	800df3a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	699b      	ldr	r3, [r3, #24]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d005      	beq.n	8013c9e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013c92:	4b05      	ldr	r3, [pc, #20]	; (8013ca8 <HAL_PCDEx_LPM_Callback+0x68>)
 8013c94:	691b      	ldr	r3, [r3, #16]
 8013c96:	4a04      	ldr	r2, [pc, #16]	; (8013ca8 <HAL_PCDEx_LPM_Callback+0x68>)
 8013c98:	f043 0306 	orr.w	r3, r3, #6
 8013c9c:	6113      	str	r3, [r2, #16]
    break;
 8013c9e:	bf00      	nop
}
 8013ca0:	bf00      	nop
 8013ca2:	3708      	adds	r7, #8
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	bd80      	pop	{r7, pc}
 8013ca8:	e000ed00 	.word	0xe000ed00

08013cac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013cac:	b480      	push	{r7}
 8013cae:	b083      	sub	sp, #12
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013cb4:	4b03      	ldr	r3, [pc, #12]	; (8013cc4 <USBD_static_malloc+0x18>)
}
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	370c      	adds	r7, #12
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc0:	4770      	bx	lr
 8013cc2:	bf00      	nop
 8013cc4:	200025a4 	.word	0x200025a4

08013cc8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013cc8:	b480      	push	{r7}
 8013cca:	b083      	sub	sp, #12
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8013cd0:	bf00      	nop
 8013cd2:	370c      	adds	r7, #12
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cda:	4770      	bx	lr

08013cdc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8013ce0:	f7ed fd96 	bl	8001810 <SystemClock_Config>
}
 8013ce4:	bf00      	nop
 8013ce6:	bd80      	pop	{r7, pc}

08013ce8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013ce8:	b480      	push	{r7}
 8013cea:	b085      	sub	sp, #20
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	4603      	mov	r3, r0
 8013cf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013cf6:	79fb      	ldrb	r3, [r7, #7]
 8013cf8:	2b03      	cmp	r3, #3
 8013cfa:	d817      	bhi.n	8013d2c <USBD_Get_USB_Status+0x44>
 8013cfc:	a201      	add	r2, pc, #4	; (adr r2, 8013d04 <USBD_Get_USB_Status+0x1c>)
 8013cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d02:	bf00      	nop
 8013d04:	08013d15 	.word	0x08013d15
 8013d08:	08013d1b 	.word	0x08013d1b
 8013d0c:	08013d21 	.word	0x08013d21
 8013d10:	08013d27 	.word	0x08013d27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013d14:	2300      	movs	r3, #0
 8013d16:	73fb      	strb	r3, [r7, #15]
    break;
 8013d18:	e00b      	b.n	8013d32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013d1a:	2303      	movs	r3, #3
 8013d1c:	73fb      	strb	r3, [r7, #15]
    break;
 8013d1e:	e008      	b.n	8013d32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013d20:	2301      	movs	r3, #1
 8013d22:	73fb      	strb	r3, [r7, #15]
    break;
 8013d24:	e005      	b.n	8013d32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013d26:	2303      	movs	r3, #3
 8013d28:	73fb      	strb	r3, [r7, #15]
    break;
 8013d2a:	e002      	b.n	8013d32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013d2c:	2303      	movs	r3, #3
 8013d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8013d30:	bf00      	nop
  }
  return usb_status;
 8013d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d34:	4618      	mov	r0, r3
 8013d36:	3714      	adds	r7, #20
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3e:	4770      	bx	lr

08013d40 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8013d40:	b480      	push	{r7}
 8013d42:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8013d44:	4b05      	ldr	r3, [pc, #20]	; (8013d5c <UTIL_LPM_Init+0x1c>)
 8013d46:	2200      	movs	r2, #0
 8013d48:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8013d4a:	4b05      	ldr	r3, [pc, #20]	; (8013d60 <UTIL_LPM_Init+0x20>)
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8013d50:	bf00      	nop
 8013d52:	46bd      	mov	sp, r7
 8013d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d58:	4770      	bx	lr
 8013d5a:	bf00      	nop
 8013d5c:	200027c4 	.word	0x200027c4
 8013d60:	200027c8 	.word	0x200027c8

08013d64 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8013d64:	b480      	push	{r7}
 8013d66:	b087      	sub	sp, #28
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]
 8013d6c:	460b      	mov	r3, r1
 8013d6e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013d70:	f3ef 8310 	mrs	r3, PRIMASK
 8013d74:	613b      	str	r3, [r7, #16]
  return(result);
 8013d76:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8013d78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013d7a:	b672      	cpsid	i
}
 8013d7c:	bf00      	nop
  
  switch(state)
 8013d7e:	78fb      	ldrb	r3, [r7, #3]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d008      	beq.n	8013d96 <UTIL_LPM_SetOffMode+0x32>
 8013d84:	2b01      	cmp	r3, #1
 8013d86:	d10e      	bne.n	8013da6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8013d88:	4b0d      	ldr	r3, [pc, #52]	; (8013dc0 <UTIL_LPM_SetOffMode+0x5c>)
 8013d8a:	681a      	ldr	r2, [r3, #0]
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	4313      	orrs	r3, r2
 8013d90:	4a0b      	ldr	r2, [pc, #44]	; (8013dc0 <UTIL_LPM_SetOffMode+0x5c>)
 8013d92:	6013      	str	r3, [r2, #0]
      break;
 8013d94:	e008      	b.n	8013da8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	43da      	mvns	r2, r3
 8013d9a:	4b09      	ldr	r3, [pc, #36]	; (8013dc0 <UTIL_LPM_SetOffMode+0x5c>)
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	4013      	ands	r3, r2
 8013da0:	4a07      	ldr	r2, [pc, #28]	; (8013dc0 <UTIL_LPM_SetOffMode+0x5c>)
 8013da2:	6013      	str	r3, [r2, #0]
      break;
 8013da4:	e000      	b.n	8013da8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8013da6:	bf00      	nop
 8013da8:	697b      	ldr	r3, [r7, #20]
 8013daa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	f383 8810 	msr	PRIMASK, r3
}
 8013db2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8013db4:	bf00      	nop
 8013db6:	371c      	adds	r7, #28
 8013db8:	46bd      	mov	sp, r7
 8013dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbe:	4770      	bx	lr
 8013dc0:	200027c8 	.word	0x200027c8

08013dc4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b090      	sub	sp, #64	; 0x40
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8013dcc:	4b73      	ldr	r3, [pc, #460]	; (8013f9c <UTIL_SEQ_Run+0x1d8>)
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8013dd2:	4b72      	ldr	r3, [pc, #456]	; (8013f9c <UTIL_SEQ_Run+0x1d8>)
 8013dd4:	681a      	ldr	r2, [r3, #0]
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	4013      	ands	r3, r2
 8013dda:	4a70      	ldr	r2, [pc, #448]	; (8013f9c <UTIL_SEQ_Run+0x1d8>)
 8013ddc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8013dde:	4b70      	ldr	r3, [pc, #448]	; (8013fa0 <UTIL_SEQ_Run+0x1dc>)
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8013de4:	4b6f      	ldr	r3, [pc, #444]	; (8013fa4 <UTIL_SEQ_Run+0x1e0>)
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8013dea:	4b6f      	ldr	r3, [pc, #444]	; (8013fa8 <UTIL_SEQ_Run+0x1e4>)
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8013df0:	4b6e      	ldr	r3, [pc, #440]	; (8013fac <UTIL_SEQ_Run+0x1e8>)
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8013df6:	e08d      	b.n	8013f14 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8013df8:	2300      	movs	r3, #0
 8013dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8013dfc:	e002      	b.n	8013e04 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8013dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e00:	3301      	adds	r3, #1
 8013e02:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8013e04:	4a6a      	ldr	r2, [pc, #424]	; (8013fb0 <UTIL_SEQ_Run+0x1ec>)
 8013e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e08:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e0e:	401a      	ands	r2, r3
 8013e10:	4b62      	ldr	r3, [pc, #392]	; (8013f9c <UTIL_SEQ_Run+0x1d8>)
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	4013      	ands	r3, r2
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d0f1      	beq.n	8013dfe <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8013e1a:	4a65      	ldr	r2, [pc, #404]	; (8013fb0 <UTIL_SEQ_Run+0x1ec>)
 8013e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e1e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e24:	401a      	ands	r2, r3
 8013e26:	4b5d      	ldr	r3, [pc, #372]	; (8013f9c <UTIL_SEQ_Run+0x1d8>)
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	4013      	ands	r3, r2
 8013e2c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8013e2e:	4a60      	ldr	r2, [pc, #384]	; (8013fb0 <UTIL_SEQ_Run+0x1ec>)
 8013e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e32:	00db      	lsls	r3, r3, #3
 8013e34:	4413      	add	r3, r2
 8013e36:	685a      	ldr	r2, [r3, #4]
 8013e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e3a:	4013      	ands	r3, r2
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d106      	bne.n	8013e4e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8013e40:	4a5b      	ldr	r2, [pc, #364]	; (8013fb0 <UTIL_SEQ_Run+0x1ec>)
 8013e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e44:	00db      	lsls	r3, r3, #3
 8013e46:	4413      	add	r3, r2
 8013e48:	f04f 32ff 	mov.w	r2, #4294967295
 8013e4c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8013e4e:	4a58      	ldr	r2, [pc, #352]	; (8013fb0 <UTIL_SEQ_Run+0x1ec>)
 8013e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e52:	00db      	lsls	r3, r3, #3
 8013e54:	4413      	add	r3, r2
 8013e56:	685a      	ldr	r2, [r3, #4]
 8013e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e5a:	4013      	ands	r3, r2
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	f000 f9b3 	bl	80141c8 <SEQ_BitPosition>
 8013e62:	4603      	mov	r3, r0
 8013e64:	461a      	mov	r2, r3
 8013e66:	4b53      	ldr	r3, [pc, #332]	; (8013fb4 <UTIL_SEQ_Run+0x1f0>)
 8013e68:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8013e6a:	4a51      	ldr	r2, [pc, #324]	; (8013fb0 <UTIL_SEQ_Run+0x1ec>)
 8013e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e6e:	00db      	lsls	r3, r3, #3
 8013e70:	4413      	add	r3, r2
 8013e72:	685a      	ldr	r2, [r3, #4]
 8013e74:	4b4f      	ldr	r3, [pc, #316]	; (8013fb4 <UTIL_SEQ_Run+0x1f0>)
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	2101      	movs	r1, #1
 8013e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8013e7e:	43db      	mvns	r3, r3
 8013e80:	401a      	ands	r2, r3
 8013e82:	494b      	ldr	r1, [pc, #300]	; (8013fb0 <UTIL_SEQ_Run+0x1ec>)
 8013e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e86:	00db      	lsls	r3, r3, #3
 8013e88:	440b      	add	r3, r1
 8013e8a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8013e90:	61bb      	str	r3, [r7, #24]
  return(result);
 8013e92:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013e94:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8013e96:	b672      	cpsid	i
}
 8013e98:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8013e9a:	4b46      	ldr	r3, [pc, #280]	; (8013fb4 <UTIL_SEQ_Run+0x1f0>)
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	2201      	movs	r2, #1
 8013ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8013ea4:	43da      	mvns	r2, r3
 8013ea6:	4b3e      	ldr	r3, [pc, #248]	; (8013fa0 <UTIL_SEQ_Run+0x1dc>)
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	4013      	ands	r3, r2
 8013eac:	4a3c      	ldr	r2, [pc, #240]	; (8013fa0 <UTIL_SEQ_Run+0x1dc>)
 8013eae:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8013eb0:	2302      	movs	r3, #2
 8013eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013eb4:	e013      	b.n	8013ede <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8013eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013eb8:	3b01      	subs	r3, #1
 8013eba:	4a3d      	ldr	r2, [pc, #244]	; (8013fb0 <UTIL_SEQ_Run+0x1ec>)
 8013ebc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8013ec0:	4b3c      	ldr	r3, [pc, #240]	; (8013fb4 <UTIL_SEQ_Run+0x1f0>)
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	2201      	movs	r2, #1
 8013ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8013eca:	43da      	mvns	r2, r3
 8013ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ece:	3b01      	subs	r3, #1
 8013ed0:	400a      	ands	r2, r1
 8013ed2:	4937      	ldr	r1, [pc, #220]	; (8013fb0 <UTIL_SEQ_Run+0x1ec>)
 8013ed4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8013ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013eda:	3b01      	subs	r3, #1
 8013edc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d1e8      	bne.n	8013eb6 <UTIL_SEQ_Run+0xf2>
 8013ee4:	6a3b      	ldr	r3, [r7, #32]
 8013ee6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ee8:	697b      	ldr	r3, [r7, #20]
 8013eea:	f383 8810 	msr	PRIMASK, r3
}
 8013eee:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8013ef0:	4b30      	ldr	r3, [pc, #192]	; (8013fb4 <UTIL_SEQ_Run+0x1f0>)
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	4a30      	ldr	r2, [pc, #192]	; (8013fb8 <UTIL_SEQ_Run+0x1f4>)
 8013ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013efa:	4798      	blx	r3

    local_taskset = TaskSet;
 8013efc:	4b28      	ldr	r3, [pc, #160]	; (8013fa0 <UTIL_SEQ_Run+0x1dc>)
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8013f02:	4b28      	ldr	r3, [pc, #160]	; (8013fa4 <UTIL_SEQ_Run+0x1e0>)
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8013f08:	4b27      	ldr	r3, [pc, #156]	; (8013fa8 <UTIL_SEQ_Run+0x1e4>)
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8013f0e:	4b27      	ldr	r3, [pc, #156]	; (8013fac <UTIL_SEQ_Run+0x1e8>)
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8013f14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f18:	401a      	ands	r2, r3
 8013f1a:	4b20      	ldr	r3, [pc, #128]	; (8013f9c <UTIL_SEQ_Run+0x1d8>)
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	4013      	ands	r3, r2
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d005      	beq.n	8013f30 <UTIL_SEQ_Run+0x16c>
 8013f24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f28:	4013      	ands	r3, r2
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	f43f af64 	beq.w	8013df8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8013f30:	4b20      	ldr	r3, [pc, #128]	; (8013fb4 <UTIL_SEQ_Run+0x1f0>)
 8013f32:	f04f 32ff 	mov.w	r2, #4294967295
 8013f36:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8013f38:	f000 f938 	bl	80141ac <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8013f40:	613b      	str	r3, [r7, #16]
  return(result);
 8013f42:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8013f44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8013f46:	b672      	cpsid	i
}
 8013f48:	bf00      	nop
  local_taskset = TaskSet;
 8013f4a:	4b15      	ldr	r3, [pc, #84]	; (8013fa0 <UTIL_SEQ_Run+0x1dc>)
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8013f50:	4b14      	ldr	r3, [pc, #80]	; (8013fa4 <UTIL_SEQ_Run+0x1e0>)
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8013f56:	4b14      	ldr	r3, [pc, #80]	; (8013fa8 <UTIL_SEQ_Run+0x1e4>)
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8013f5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f60:	401a      	ands	r2, r3
 8013f62:	4b0e      	ldr	r3, [pc, #56]	; (8013f9c <UTIL_SEQ_Run+0x1d8>)
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	4013      	ands	r3, r2
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d107      	bne.n	8013f7c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8013f6c:	4b0f      	ldr	r3, [pc, #60]	; (8013fac <UTIL_SEQ_Run+0x1e8>)
 8013f6e:	681a      	ldr	r2, [r3, #0]
 8013f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f72:	4013      	ands	r3, r2
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d101      	bne.n	8013f7c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8013f78:	f7ed faa0 	bl	80014bc <UTIL_SEQ_Idle>
 8013f7c:	69fb      	ldr	r3, [r7, #28]
 8013f7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	f383 8810 	msr	PRIMASK, r3
}
 8013f86:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8013f88:	f000 f917 	bl	80141ba <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8013f8c:	4a03      	ldr	r2, [pc, #12]	; (8013f9c <UTIL_SEQ_Run+0x1d8>)
 8013f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f90:	6013      	str	r3, [r2, #0]

  return;
 8013f92:	bf00      	nop
}
 8013f94:	3740      	adds	r7, #64	; 0x40
 8013f96:	46bd      	mov	sp, r7
 8013f98:	bd80      	pop	{r7, pc}
 8013f9a:	bf00      	nop
 8013f9c:	20000168 	.word	0x20000168
 8013fa0:	200027cc 	.word	0x200027cc
 8013fa4:	200027d0 	.word	0x200027d0
 8013fa8:	20000164 	.word	0x20000164
 8013fac:	200027d4 	.word	0x200027d4
 8013fb0:	2000285c 	.word	0x2000285c
 8013fb4:	200027d8 	.word	0x200027d8
 8013fb8:	200027dc 	.word	0x200027dc

08013fbc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b088      	sub	sp, #32
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	60f8      	str	r0, [r7, #12]
 8013fc4:	60b9      	str	r1, [r7, #8]
 8013fc6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8013fcc:	617b      	str	r3, [r7, #20]
  return(result);
 8013fce:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8013fd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8013fd2:	b672      	cpsid	i
}
 8013fd4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8013fd6:	68f8      	ldr	r0, [r7, #12]
 8013fd8:	f000 f8f6 	bl	80141c8 <SEQ_BitPosition>
 8013fdc:	4603      	mov	r3, r0
 8013fde:	4619      	mov	r1, r3
 8013fe0:	4a06      	ldr	r2, [pc, #24]	; (8013ffc <UTIL_SEQ_RegTask+0x40>)
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8013fe8:	69fb      	ldr	r3, [r7, #28]
 8013fea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013fec:	69bb      	ldr	r3, [r7, #24]
 8013fee:	f383 8810 	msr	PRIMASK, r3
}
 8013ff2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8013ff4:	bf00      	nop
}
 8013ff6:	3720      	adds	r7, #32
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	bd80      	pop	{r7, pc}
 8013ffc:	200027dc 	.word	0x200027dc

08014000 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8014000:	b480      	push	{r7}
 8014002:	b087      	sub	sp, #28
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
 8014008:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801400a:	f3ef 8310 	mrs	r3, PRIMASK
 801400e:	60fb      	str	r3, [r7, #12]
  return(result);
 8014010:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8014012:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014014:	b672      	cpsid	i
}
 8014016:	bf00      	nop

  TaskSet |= TaskId_bm;
 8014018:	4b0d      	ldr	r3, [pc, #52]	; (8014050 <UTIL_SEQ_SetTask+0x50>)
 801401a:	681a      	ldr	r2, [r3, #0]
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	4313      	orrs	r3, r2
 8014020:	4a0b      	ldr	r2, [pc, #44]	; (8014050 <UTIL_SEQ_SetTask+0x50>)
 8014022:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8014024:	4a0b      	ldr	r2, [pc, #44]	; (8014054 <UTIL_SEQ_SetTask+0x54>)
 8014026:	683b      	ldr	r3, [r7, #0]
 8014028:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	431a      	orrs	r2, r3
 8014030:	4908      	ldr	r1, [pc, #32]	; (8014054 <UTIL_SEQ_SetTask+0x54>)
 8014032:	683b      	ldr	r3, [r7, #0]
 8014034:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8014038:	697b      	ldr	r3, [r7, #20]
 801403a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801403c:	693b      	ldr	r3, [r7, #16]
 801403e:	f383 8810 	msr	PRIMASK, r3
}
 8014042:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8014044:	bf00      	nop
}
 8014046:	371c      	adds	r7, #28
 8014048:	46bd      	mov	sp, r7
 801404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404e:	4770      	bx	lr
 8014050:	200027cc 	.word	0x200027cc
 8014054:	2000285c 	.word	0x2000285c

08014058 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8014058:	b480      	push	{r7}
 801405a:	b087      	sub	sp, #28
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014060:	f3ef 8310 	mrs	r3, PRIMASK
 8014064:	60fb      	str	r3, [r7, #12]
  return(result);
 8014066:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8014068:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801406a:	b672      	cpsid	i
}
 801406c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	43da      	mvns	r2, r3
 8014072:	4b08      	ldr	r3, [pc, #32]	; (8014094 <UTIL_SEQ_PauseTask+0x3c>)
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	4013      	ands	r3, r2
 8014078:	4a06      	ldr	r2, [pc, #24]	; (8014094 <UTIL_SEQ_PauseTask+0x3c>)
 801407a:	6013      	str	r3, [r2, #0]
 801407c:	697b      	ldr	r3, [r7, #20]
 801407e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014080:	693b      	ldr	r3, [r7, #16]
 8014082:	f383 8810 	msr	PRIMASK, r3
}
 8014086:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8014088:	bf00      	nop
}
 801408a:	371c      	adds	r7, #28
 801408c:	46bd      	mov	sp, r7
 801408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014092:	4770      	bx	lr
 8014094:	20000164 	.word	0x20000164

08014098 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8014098:	b480      	push	{r7}
 801409a:	b087      	sub	sp, #28
 801409c:	af00      	add	r7, sp, #0
 801409e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80140a0:	f3ef 8310 	mrs	r3, PRIMASK
 80140a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80140a6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80140a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80140aa:	b672      	cpsid	i
}
 80140ac:	bf00      	nop

  TaskMask |= TaskId_bm;
 80140ae:	4b09      	ldr	r3, [pc, #36]	; (80140d4 <UTIL_SEQ_ResumeTask+0x3c>)
 80140b0:	681a      	ldr	r2, [r3, #0]
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	4313      	orrs	r3, r2
 80140b6:	4a07      	ldr	r2, [pc, #28]	; (80140d4 <UTIL_SEQ_ResumeTask+0x3c>)
 80140b8:	6013      	str	r3, [r2, #0]
 80140ba:	697b      	ldr	r3, [r7, #20]
 80140bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80140be:	693b      	ldr	r3, [r7, #16]
 80140c0:	f383 8810 	msr	PRIMASK, r3
}
 80140c4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80140c6:	bf00      	nop
}
 80140c8:	371c      	adds	r7, #28
 80140ca:	46bd      	mov	sp, r7
 80140cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d0:	4770      	bx	lr
 80140d2:	bf00      	nop
 80140d4:	20000164 	.word	0x20000164

080140d8 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80140d8:	b480      	push	{r7}
 80140da:	b087      	sub	sp, #28
 80140dc:	af00      	add	r7, sp, #0
 80140de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80140e0:	f3ef 8310 	mrs	r3, PRIMASK
 80140e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80140e6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80140e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80140ea:	b672      	cpsid	i
}
 80140ec:	bf00      	nop

  EvtSet |= EvtId_bm;
 80140ee:	4b09      	ldr	r3, [pc, #36]	; (8014114 <UTIL_SEQ_SetEvt+0x3c>)
 80140f0:	681a      	ldr	r2, [r3, #0]
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	4313      	orrs	r3, r2
 80140f6:	4a07      	ldr	r2, [pc, #28]	; (8014114 <UTIL_SEQ_SetEvt+0x3c>)
 80140f8:	6013      	str	r3, [r2, #0]
 80140fa:	697b      	ldr	r3, [r7, #20]
 80140fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80140fe:	693b      	ldr	r3, [r7, #16]
 8014100:	f383 8810 	msr	PRIMASK, r3
}
 8014104:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8014106:	bf00      	nop
}
 8014108:	371c      	adds	r7, #28
 801410a:	46bd      	mov	sp, r7
 801410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014110:	4770      	bx	lr
 8014112:	bf00      	nop
 8014114:	200027d0 	.word	0x200027d0

08014118 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b088      	sub	sp, #32
 801411c:	af00      	add	r7, sp, #0
 801411e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8014120:	4b1f      	ldr	r3, [pc, #124]	; (80141a0 <UTIL_SEQ_WaitEvt+0x88>)
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8014126:	4b1e      	ldr	r3, [pc, #120]	; (80141a0 <UTIL_SEQ_WaitEvt+0x88>)
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801412e:	d102      	bne.n	8014136 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8014130:	2300      	movs	r3, #0
 8014132:	61fb      	str	r3, [r7, #28]
 8014134:	e005      	b.n	8014142 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8014136:	4b1a      	ldr	r3, [pc, #104]	; (80141a0 <UTIL_SEQ_WaitEvt+0x88>)
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	2201      	movs	r2, #1
 801413c:	fa02 f303 	lsl.w	r3, r2, r3
 8014140:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8014142:	4b18      	ldr	r3, [pc, #96]	; (80141a4 <UTIL_SEQ_WaitEvt+0x8c>)
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8014148:	4a16      	ldr	r2, [pc, #88]	; (80141a4 <UTIL_SEQ_WaitEvt+0x8c>)
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 801414e:	e003      	b.n	8014158 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8014150:	6879      	ldr	r1, [r7, #4]
 8014152:	69f8      	ldr	r0, [r7, #28]
 8014154:	f7ed f9b9 	bl	80014ca <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8014158:	4b13      	ldr	r3, [pc, #76]	; (80141a8 <UTIL_SEQ_WaitEvt+0x90>)
 801415a:	681a      	ldr	r2, [r3, #0]
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	4013      	ands	r3, r2
 8014160:	2b00      	cmp	r3, #0
 8014162:	d0f5      	beq.n	8014150 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8014164:	4a0e      	ldr	r2, [pc, #56]	; (80141a0 <UTIL_SEQ_WaitEvt+0x88>)
 8014166:	69bb      	ldr	r3, [r7, #24]
 8014168:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801416a:	f3ef 8310 	mrs	r3, PRIMASK
 801416e:	60bb      	str	r3, [r7, #8]
  return(result);
 8014170:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8014172:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8014174:	b672      	cpsid	i
}
 8014176:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	43da      	mvns	r2, r3
 801417c:	4b0a      	ldr	r3, [pc, #40]	; (80141a8 <UTIL_SEQ_WaitEvt+0x90>)
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	4013      	ands	r3, r2
 8014182:	4a09      	ldr	r2, [pc, #36]	; (80141a8 <UTIL_SEQ_WaitEvt+0x90>)
 8014184:	6013      	str	r3, [r2, #0]
 8014186:	693b      	ldr	r3, [r7, #16]
 8014188:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	f383 8810 	msr	PRIMASK, r3
}
 8014190:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8014192:	4a04      	ldr	r2, [pc, #16]	; (80141a4 <UTIL_SEQ_WaitEvt+0x8c>)
 8014194:	697b      	ldr	r3, [r7, #20]
 8014196:	6013      	str	r3, [r2, #0]
  return;
 8014198:	bf00      	nop
}
 801419a:	3720      	adds	r7, #32
 801419c:	46bd      	mov	sp, r7
 801419e:	bd80      	pop	{r7, pc}
 80141a0:	200027d8 	.word	0x200027d8
 80141a4:	200027d4 	.word	0x200027d4
 80141a8:	200027d0 	.word	0x200027d0

080141ac <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80141ac:	b480      	push	{r7}
 80141ae:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80141b0:	bf00      	nop
}
 80141b2:	46bd      	mov	sp, r7
 80141b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b8:	4770      	bx	lr

080141ba <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80141ba:	b480      	push	{r7}
 80141bc:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80141be:	bf00      	nop
}
 80141c0:	46bd      	mov	sp, r7
 80141c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c6:	4770      	bx	lr

080141c8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80141c8:	b480      	push	{r7}
 80141ca:	b085      	sub	sp, #20
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80141d0:	2300      	movs	r3, #0
 80141d2:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80141d8:	68bb      	ldr	r3, [r7, #8]
 80141da:	0c1b      	lsrs	r3, r3, #16
 80141dc:	041b      	lsls	r3, r3, #16
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d104      	bne.n	80141ec <SEQ_BitPosition+0x24>
 80141e2:	2310      	movs	r3, #16
 80141e4:	73fb      	strb	r3, [r7, #15]
 80141e6:	68bb      	ldr	r3, [r7, #8]
 80141e8:	041b      	lsls	r3, r3, #16
 80141ea:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80141ec:	68bb      	ldr	r3, [r7, #8]
 80141ee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d105      	bne.n	8014202 <SEQ_BitPosition+0x3a>
 80141f6:	7bfb      	ldrb	r3, [r7, #15]
 80141f8:	3308      	adds	r3, #8
 80141fa:	73fb      	strb	r3, [r7, #15]
 80141fc:	68bb      	ldr	r3, [r7, #8]
 80141fe:	021b      	lsls	r3, r3, #8
 8014200:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8014202:	68bb      	ldr	r3, [r7, #8]
 8014204:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8014208:	2b00      	cmp	r3, #0
 801420a:	d105      	bne.n	8014218 <SEQ_BitPosition+0x50>
 801420c:	7bfb      	ldrb	r3, [r7, #15]
 801420e:	3304      	adds	r3, #4
 8014210:	73fb      	strb	r3, [r7, #15]
 8014212:	68bb      	ldr	r3, [r7, #8]
 8014214:	011b      	lsls	r3, r3, #4
 8014216:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8014218:	68bb      	ldr	r3, [r7, #8]
 801421a:	0f1b      	lsrs	r3, r3, #28
 801421c:	4a07      	ldr	r2, [pc, #28]	; (801423c <SEQ_BitPosition+0x74>)
 801421e:	5cd2      	ldrb	r2, [r2, r3]
 8014220:	7bfb      	ldrb	r3, [r7, #15]
 8014222:	4413      	add	r3, r2
 8014224:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8014226:	7bfb      	ldrb	r3, [r7, #15]
 8014228:	f1c3 031f 	rsb	r3, r3, #31
 801422c:	b2db      	uxtb	r3, r3
}
 801422e:	4618      	mov	r0, r3
 8014230:	3714      	adds	r7, #20
 8014232:	46bd      	mov	sp, r7
 8014234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014238:	4770      	bx	lr
 801423a:	bf00      	nop
 801423c:	08017a44 	.word	0x08017a44

08014240 <__assert_func>:
 8014240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014242:	4614      	mov	r4, r2
 8014244:	461a      	mov	r2, r3
 8014246:	4b09      	ldr	r3, [pc, #36]	; (801426c <__assert_func+0x2c>)
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	4605      	mov	r5, r0
 801424c:	68d8      	ldr	r0, [r3, #12]
 801424e:	b14c      	cbz	r4, 8014264 <__assert_func+0x24>
 8014250:	4b07      	ldr	r3, [pc, #28]	; (8014270 <__assert_func+0x30>)
 8014252:	9100      	str	r1, [sp, #0]
 8014254:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014258:	4906      	ldr	r1, [pc, #24]	; (8014274 <__assert_func+0x34>)
 801425a:	462b      	mov	r3, r5
 801425c:	f000 f838 	bl	80142d0 <fiprintf>
 8014260:	f000 fc30 	bl	8014ac4 <abort>
 8014264:	4b04      	ldr	r3, [pc, #16]	; (8014278 <__assert_func+0x38>)
 8014266:	461c      	mov	r4, r3
 8014268:	e7f3      	b.n	8014252 <__assert_func+0x12>
 801426a:	bf00      	nop
 801426c:	2000016c 	.word	0x2000016c
 8014270:	08017a54 	.word	0x08017a54
 8014274:	08017a61 	.word	0x08017a61
 8014278:	08017a8f 	.word	0x08017a8f

0801427c <gcvt>:
 801427c:	b530      	push	{r4, r5, lr}
 801427e:	2200      	movs	r2, #0
 8014280:	b085      	sub	sp, #20
 8014282:	460c      	mov	r4, r1
 8014284:	4605      	mov	r5, r0
 8014286:	2300      	movs	r3, #0
 8014288:	ec51 0b10 	vmov	r0, r1, d0
 801428c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014290:	f7ec fbfc 	bl	8000a8c <__aeabi_dcmplt>
 8014294:	ed9d 0b02 	vldr	d0, [sp, #8]
 8014298:	4622      	mov	r2, r4
 801429a:	b118      	cbz	r0, 80142a4 <gcvt+0x28>
 801429c:	232d      	movs	r3, #45	; 0x2d
 801429e:	f802 3b01 	strb.w	r3, [r2], #1
 80142a2:	3d01      	subs	r5, #1
 80142a4:	2300      	movs	r3, #0
 80142a6:	4806      	ldr	r0, [pc, #24]	; (80142c0 <gcvt+0x44>)
 80142a8:	9300      	str	r3, [sp, #0]
 80142aa:	4629      	mov	r1, r5
 80142ac:	2367      	movs	r3, #103	; 0x67
 80142ae:	6800      	ldr	r0, [r0, #0]
 80142b0:	f000 fc86 	bl	8014bc0 <_gcvt>
 80142b4:	2800      	cmp	r0, #0
 80142b6:	bf14      	ite	ne
 80142b8:	4620      	movne	r0, r4
 80142ba:	2000      	moveq	r0, #0
 80142bc:	b005      	add	sp, #20
 80142be:	bd30      	pop	{r4, r5, pc}
 80142c0:	2000016c 	.word	0x2000016c

080142c4 <__errno>:
 80142c4:	4b01      	ldr	r3, [pc, #4]	; (80142cc <__errno+0x8>)
 80142c6:	6818      	ldr	r0, [r3, #0]
 80142c8:	4770      	bx	lr
 80142ca:	bf00      	nop
 80142cc:	2000016c 	.word	0x2000016c

080142d0 <fiprintf>:
 80142d0:	b40e      	push	{r1, r2, r3}
 80142d2:	b503      	push	{r0, r1, lr}
 80142d4:	4601      	mov	r1, r0
 80142d6:	ab03      	add	r3, sp, #12
 80142d8:	4805      	ldr	r0, [pc, #20]	; (80142f0 <fiprintf+0x20>)
 80142da:	f853 2b04 	ldr.w	r2, [r3], #4
 80142de:	6800      	ldr	r0, [r0, #0]
 80142e0:	9301      	str	r3, [sp, #4]
 80142e2:	f000 f86b 	bl	80143bc <_vfiprintf_r>
 80142e6:	b002      	add	sp, #8
 80142e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80142ec:	b003      	add	sp, #12
 80142ee:	4770      	bx	lr
 80142f0:	2000016c 	.word	0x2000016c

080142f4 <__libc_init_array>:
 80142f4:	b570      	push	{r4, r5, r6, lr}
 80142f6:	4d0d      	ldr	r5, [pc, #52]	; (801432c <__libc_init_array+0x38>)
 80142f8:	4c0d      	ldr	r4, [pc, #52]	; (8014330 <__libc_init_array+0x3c>)
 80142fa:	1b64      	subs	r4, r4, r5
 80142fc:	10a4      	asrs	r4, r4, #2
 80142fe:	2600      	movs	r6, #0
 8014300:	42a6      	cmp	r6, r4
 8014302:	d109      	bne.n	8014318 <__libc_init_array+0x24>
 8014304:	4d0b      	ldr	r5, [pc, #44]	; (8014334 <__libc_init_array+0x40>)
 8014306:	4c0c      	ldr	r4, [pc, #48]	; (8014338 <__libc_init_array+0x44>)
 8014308:	f002 fd6e 	bl	8016de8 <_init>
 801430c:	1b64      	subs	r4, r4, r5
 801430e:	10a4      	asrs	r4, r4, #2
 8014310:	2600      	movs	r6, #0
 8014312:	42a6      	cmp	r6, r4
 8014314:	d105      	bne.n	8014322 <__libc_init_array+0x2e>
 8014316:	bd70      	pop	{r4, r5, r6, pc}
 8014318:	f855 3b04 	ldr.w	r3, [r5], #4
 801431c:	4798      	blx	r3
 801431e:	3601      	adds	r6, #1
 8014320:	e7ee      	b.n	8014300 <__libc_init_array+0xc>
 8014322:	f855 3b04 	ldr.w	r3, [r5], #4
 8014326:	4798      	blx	r3
 8014328:	3601      	adds	r6, #1
 801432a:	e7f2      	b.n	8014312 <__libc_init_array+0x1e>
 801432c:	08017d18 	.word	0x08017d18
 8014330:	08017d18 	.word	0x08017d18
 8014334:	08017d18 	.word	0x08017d18
 8014338:	08017d1c 	.word	0x08017d1c

0801433c <memcpy>:
 801433c:	440a      	add	r2, r1
 801433e:	4291      	cmp	r1, r2
 8014340:	f100 33ff 	add.w	r3, r0, #4294967295
 8014344:	d100      	bne.n	8014348 <memcpy+0xc>
 8014346:	4770      	bx	lr
 8014348:	b510      	push	{r4, lr}
 801434a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801434e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014352:	4291      	cmp	r1, r2
 8014354:	d1f9      	bne.n	801434a <memcpy+0xe>
 8014356:	bd10      	pop	{r4, pc}

08014358 <memset>:
 8014358:	4402      	add	r2, r0
 801435a:	4603      	mov	r3, r0
 801435c:	4293      	cmp	r3, r2
 801435e:	d100      	bne.n	8014362 <memset+0xa>
 8014360:	4770      	bx	lr
 8014362:	f803 1b01 	strb.w	r1, [r3], #1
 8014366:	e7f9      	b.n	801435c <memset+0x4>

08014368 <__sfputc_r>:
 8014368:	6893      	ldr	r3, [r2, #8]
 801436a:	3b01      	subs	r3, #1
 801436c:	2b00      	cmp	r3, #0
 801436e:	b410      	push	{r4}
 8014370:	6093      	str	r3, [r2, #8]
 8014372:	da08      	bge.n	8014386 <__sfputc_r+0x1e>
 8014374:	6994      	ldr	r4, [r2, #24]
 8014376:	42a3      	cmp	r3, r4
 8014378:	db01      	blt.n	801437e <__sfputc_r+0x16>
 801437a:	290a      	cmp	r1, #10
 801437c:	d103      	bne.n	8014386 <__sfputc_r+0x1e>
 801437e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014382:	f000 badf 	b.w	8014944 <__swbuf_r>
 8014386:	6813      	ldr	r3, [r2, #0]
 8014388:	1c58      	adds	r0, r3, #1
 801438a:	6010      	str	r0, [r2, #0]
 801438c:	7019      	strb	r1, [r3, #0]
 801438e:	4608      	mov	r0, r1
 8014390:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014394:	4770      	bx	lr

08014396 <__sfputs_r>:
 8014396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014398:	4606      	mov	r6, r0
 801439a:	460f      	mov	r7, r1
 801439c:	4614      	mov	r4, r2
 801439e:	18d5      	adds	r5, r2, r3
 80143a0:	42ac      	cmp	r4, r5
 80143a2:	d101      	bne.n	80143a8 <__sfputs_r+0x12>
 80143a4:	2000      	movs	r0, #0
 80143a6:	e007      	b.n	80143b8 <__sfputs_r+0x22>
 80143a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143ac:	463a      	mov	r2, r7
 80143ae:	4630      	mov	r0, r6
 80143b0:	f7ff ffda 	bl	8014368 <__sfputc_r>
 80143b4:	1c43      	adds	r3, r0, #1
 80143b6:	d1f3      	bne.n	80143a0 <__sfputs_r+0xa>
 80143b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080143bc <_vfiprintf_r>:
 80143bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143c0:	460d      	mov	r5, r1
 80143c2:	b09d      	sub	sp, #116	; 0x74
 80143c4:	4614      	mov	r4, r2
 80143c6:	4698      	mov	r8, r3
 80143c8:	4606      	mov	r6, r0
 80143ca:	b118      	cbz	r0, 80143d4 <_vfiprintf_r+0x18>
 80143cc:	6983      	ldr	r3, [r0, #24]
 80143ce:	b90b      	cbnz	r3, 80143d4 <_vfiprintf_r+0x18>
 80143d0:	f000 fdd0 	bl	8014f74 <__sinit>
 80143d4:	4b89      	ldr	r3, [pc, #548]	; (80145fc <_vfiprintf_r+0x240>)
 80143d6:	429d      	cmp	r5, r3
 80143d8:	d11b      	bne.n	8014412 <_vfiprintf_r+0x56>
 80143da:	6875      	ldr	r5, [r6, #4]
 80143dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80143de:	07d9      	lsls	r1, r3, #31
 80143e0:	d405      	bmi.n	80143ee <_vfiprintf_r+0x32>
 80143e2:	89ab      	ldrh	r3, [r5, #12]
 80143e4:	059a      	lsls	r2, r3, #22
 80143e6:	d402      	bmi.n	80143ee <_vfiprintf_r+0x32>
 80143e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80143ea:	f000 fe61 	bl	80150b0 <__retarget_lock_acquire_recursive>
 80143ee:	89ab      	ldrh	r3, [r5, #12]
 80143f0:	071b      	lsls	r3, r3, #28
 80143f2:	d501      	bpl.n	80143f8 <_vfiprintf_r+0x3c>
 80143f4:	692b      	ldr	r3, [r5, #16]
 80143f6:	b9eb      	cbnz	r3, 8014434 <_vfiprintf_r+0x78>
 80143f8:	4629      	mov	r1, r5
 80143fa:	4630      	mov	r0, r6
 80143fc:	f000 faf4 	bl	80149e8 <__swsetup_r>
 8014400:	b1c0      	cbz	r0, 8014434 <_vfiprintf_r+0x78>
 8014402:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014404:	07dc      	lsls	r4, r3, #31
 8014406:	d50e      	bpl.n	8014426 <_vfiprintf_r+0x6a>
 8014408:	f04f 30ff 	mov.w	r0, #4294967295
 801440c:	b01d      	add	sp, #116	; 0x74
 801440e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014412:	4b7b      	ldr	r3, [pc, #492]	; (8014600 <_vfiprintf_r+0x244>)
 8014414:	429d      	cmp	r5, r3
 8014416:	d101      	bne.n	801441c <_vfiprintf_r+0x60>
 8014418:	68b5      	ldr	r5, [r6, #8]
 801441a:	e7df      	b.n	80143dc <_vfiprintf_r+0x20>
 801441c:	4b79      	ldr	r3, [pc, #484]	; (8014604 <_vfiprintf_r+0x248>)
 801441e:	429d      	cmp	r5, r3
 8014420:	bf08      	it	eq
 8014422:	68f5      	ldreq	r5, [r6, #12]
 8014424:	e7da      	b.n	80143dc <_vfiprintf_r+0x20>
 8014426:	89ab      	ldrh	r3, [r5, #12]
 8014428:	0598      	lsls	r0, r3, #22
 801442a:	d4ed      	bmi.n	8014408 <_vfiprintf_r+0x4c>
 801442c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801442e:	f000 fe40 	bl	80150b2 <__retarget_lock_release_recursive>
 8014432:	e7e9      	b.n	8014408 <_vfiprintf_r+0x4c>
 8014434:	2300      	movs	r3, #0
 8014436:	9309      	str	r3, [sp, #36]	; 0x24
 8014438:	2320      	movs	r3, #32
 801443a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801443e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014442:	2330      	movs	r3, #48	; 0x30
 8014444:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014608 <_vfiprintf_r+0x24c>
 8014448:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801444c:	f04f 0901 	mov.w	r9, #1
 8014450:	4623      	mov	r3, r4
 8014452:	469a      	mov	sl, r3
 8014454:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014458:	b10a      	cbz	r2, 801445e <_vfiprintf_r+0xa2>
 801445a:	2a25      	cmp	r2, #37	; 0x25
 801445c:	d1f9      	bne.n	8014452 <_vfiprintf_r+0x96>
 801445e:	ebba 0b04 	subs.w	fp, sl, r4
 8014462:	d00b      	beq.n	801447c <_vfiprintf_r+0xc0>
 8014464:	465b      	mov	r3, fp
 8014466:	4622      	mov	r2, r4
 8014468:	4629      	mov	r1, r5
 801446a:	4630      	mov	r0, r6
 801446c:	f7ff ff93 	bl	8014396 <__sfputs_r>
 8014470:	3001      	adds	r0, #1
 8014472:	f000 80aa 	beq.w	80145ca <_vfiprintf_r+0x20e>
 8014476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014478:	445a      	add	r2, fp
 801447a:	9209      	str	r2, [sp, #36]	; 0x24
 801447c:	f89a 3000 	ldrb.w	r3, [sl]
 8014480:	2b00      	cmp	r3, #0
 8014482:	f000 80a2 	beq.w	80145ca <_vfiprintf_r+0x20e>
 8014486:	2300      	movs	r3, #0
 8014488:	f04f 32ff 	mov.w	r2, #4294967295
 801448c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014490:	f10a 0a01 	add.w	sl, sl, #1
 8014494:	9304      	str	r3, [sp, #16]
 8014496:	9307      	str	r3, [sp, #28]
 8014498:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801449c:	931a      	str	r3, [sp, #104]	; 0x68
 801449e:	4654      	mov	r4, sl
 80144a0:	2205      	movs	r2, #5
 80144a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144a6:	4858      	ldr	r0, [pc, #352]	; (8014608 <_vfiprintf_r+0x24c>)
 80144a8:	f7eb fe72 	bl	8000190 <memchr>
 80144ac:	9a04      	ldr	r2, [sp, #16]
 80144ae:	b9d8      	cbnz	r0, 80144e8 <_vfiprintf_r+0x12c>
 80144b0:	06d1      	lsls	r1, r2, #27
 80144b2:	bf44      	itt	mi
 80144b4:	2320      	movmi	r3, #32
 80144b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80144ba:	0713      	lsls	r3, r2, #28
 80144bc:	bf44      	itt	mi
 80144be:	232b      	movmi	r3, #43	; 0x2b
 80144c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80144c4:	f89a 3000 	ldrb.w	r3, [sl]
 80144c8:	2b2a      	cmp	r3, #42	; 0x2a
 80144ca:	d015      	beq.n	80144f8 <_vfiprintf_r+0x13c>
 80144cc:	9a07      	ldr	r2, [sp, #28]
 80144ce:	4654      	mov	r4, sl
 80144d0:	2000      	movs	r0, #0
 80144d2:	f04f 0c0a 	mov.w	ip, #10
 80144d6:	4621      	mov	r1, r4
 80144d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80144dc:	3b30      	subs	r3, #48	; 0x30
 80144de:	2b09      	cmp	r3, #9
 80144e0:	d94e      	bls.n	8014580 <_vfiprintf_r+0x1c4>
 80144e2:	b1b0      	cbz	r0, 8014512 <_vfiprintf_r+0x156>
 80144e4:	9207      	str	r2, [sp, #28]
 80144e6:	e014      	b.n	8014512 <_vfiprintf_r+0x156>
 80144e8:	eba0 0308 	sub.w	r3, r0, r8
 80144ec:	fa09 f303 	lsl.w	r3, r9, r3
 80144f0:	4313      	orrs	r3, r2
 80144f2:	9304      	str	r3, [sp, #16]
 80144f4:	46a2      	mov	sl, r4
 80144f6:	e7d2      	b.n	801449e <_vfiprintf_r+0xe2>
 80144f8:	9b03      	ldr	r3, [sp, #12]
 80144fa:	1d19      	adds	r1, r3, #4
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	9103      	str	r1, [sp, #12]
 8014500:	2b00      	cmp	r3, #0
 8014502:	bfbb      	ittet	lt
 8014504:	425b      	neglt	r3, r3
 8014506:	f042 0202 	orrlt.w	r2, r2, #2
 801450a:	9307      	strge	r3, [sp, #28]
 801450c:	9307      	strlt	r3, [sp, #28]
 801450e:	bfb8      	it	lt
 8014510:	9204      	strlt	r2, [sp, #16]
 8014512:	7823      	ldrb	r3, [r4, #0]
 8014514:	2b2e      	cmp	r3, #46	; 0x2e
 8014516:	d10c      	bne.n	8014532 <_vfiprintf_r+0x176>
 8014518:	7863      	ldrb	r3, [r4, #1]
 801451a:	2b2a      	cmp	r3, #42	; 0x2a
 801451c:	d135      	bne.n	801458a <_vfiprintf_r+0x1ce>
 801451e:	9b03      	ldr	r3, [sp, #12]
 8014520:	1d1a      	adds	r2, r3, #4
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	9203      	str	r2, [sp, #12]
 8014526:	2b00      	cmp	r3, #0
 8014528:	bfb8      	it	lt
 801452a:	f04f 33ff 	movlt.w	r3, #4294967295
 801452e:	3402      	adds	r4, #2
 8014530:	9305      	str	r3, [sp, #20]
 8014532:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014618 <_vfiprintf_r+0x25c>
 8014536:	7821      	ldrb	r1, [r4, #0]
 8014538:	2203      	movs	r2, #3
 801453a:	4650      	mov	r0, sl
 801453c:	f7eb fe28 	bl	8000190 <memchr>
 8014540:	b140      	cbz	r0, 8014554 <_vfiprintf_r+0x198>
 8014542:	2340      	movs	r3, #64	; 0x40
 8014544:	eba0 000a 	sub.w	r0, r0, sl
 8014548:	fa03 f000 	lsl.w	r0, r3, r0
 801454c:	9b04      	ldr	r3, [sp, #16]
 801454e:	4303      	orrs	r3, r0
 8014550:	3401      	adds	r4, #1
 8014552:	9304      	str	r3, [sp, #16]
 8014554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014558:	482c      	ldr	r0, [pc, #176]	; (801460c <_vfiprintf_r+0x250>)
 801455a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801455e:	2206      	movs	r2, #6
 8014560:	f7eb fe16 	bl	8000190 <memchr>
 8014564:	2800      	cmp	r0, #0
 8014566:	d03f      	beq.n	80145e8 <_vfiprintf_r+0x22c>
 8014568:	4b29      	ldr	r3, [pc, #164]	; (8014610 <_vfiprintf_r+0x254>)
 801456a:	bb1b      	cbnz	r3, 80145b4 <_vfiprintf_r+0x1f8>
 801456c:	9b03      	ldr	r3, [sp, #12]
 801456e:	3307      	adds	r3, #7
 8014570:	f023 0307 	bic.w	r3, r3, #7
 8014574:	3308      	adds	r3, #8
 8014576:	9303      	str	r3, [sp, #12]
 8014578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801457a:	443b      	add	r3, r7
 801457c:	9309      	str	r3, [sp, #36]	; 0x24
 801457e:	e767      	b.n	8014450 <_vfiprintf_r+0x94>
 8014580:	fb0c 3202 	mla	r2, ip, r2, r3
 8014584:	460c      	mov	r4, r1
 8014586:	2001      	movs	r0, #1
 8014588:	e7a5      	b.n	80144d6 <_vfiprintf_r+0x11a>
 801458a:	2300      	movs	r3, #0
 801458c:	3401      	adds	r4, #1
 801458e:	9305      	str	r3, [sp, #20]
 8014590:	4619      	mov	r1, r3
 8014592:	f04f 0c0a 	mov.w	ip, #10
 8014596:	4620      	mov	r0, r4
 8014598:	f810 2b01 	ldrb.w	r2, [r0], #1
 801459c:	3a30      	subs	r2, #48	; 0x30
 801459e:	2a09      	cmp	r2, #9
 80145a0:	d903      	bls.n	80145aa <_vfiprintf_r+0x1ee>
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d0c5      	beq.n	8014532 <_vfiprintf_r+0x176>
 80145a6:	9105      	str	r1, [sp, #20]
 80145a8:	e7c3      	b.n	8014532 <_vfiprintf_r+0x176>
 80145aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80145ae:	4604      	mov	r4, r0
 80145b0:	2301      	movs	r3, #1
 80145b2:	e7f0      	b.n	8014596 <_vfiprintf_r+0x1da>
 80145b4:	ab03      	add	r3, sp, #12
 80145b6:	9300      	str	r3, [sp, #0]
 80145b8:	462a      	mov	r2, r5
 80145ba:	4b16      	ldr	r3, [pc, #88]	; (8014614 <_vfiprintf_r+0x258>)
 80145bc:	a904      	add	r1, sp, #16
 80145be:	4630      	mov	r0, r6
 80145c0:	f3af 8000 	nop.w
 80145c4:	4607      	mov	r7, r0
 80145c6:	1c78      	adds	r0, r7, #1
 80145c8:	d1d6      	bne.n	8014578 <_vfiprintf_r+0x1bc>
 80145ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80145cc:	07d9      	lsls	r1, r3, #31
 80145ce:	d405      	bmi.n	80145dc <_vfiprintf_r+0x220>
 80145d0:	89ab      	ldrh	r3, [r5, #12]
 80145d2:	059a      	lsls	r2, r3, #22
 80145d4:	d402      	bmi.n	80145dc <_vfiprintf_r+0x220>
 80145d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80145d8:	f000 fd6b 	bl	80150b2 <__retarget_lock_release_recursive>
 80145dc:	89ab      	ldrh	r3, [r5, #12]
 80145de:	065b      	lsls	r3, r3, #25
 80145e0:	f53f af12 	bmi.w	8014408 <_vfiprintf_r+0x4c>
 80145e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80145e6:	e711      	b.n	801440c <_vfiprintf_r+0x50>
 80145e8:	ab03      	add	r3, sp, #12
 80145ea:	9300      	str	r3, [sp, #0]
 80145ec:	462a      	mov	r2, r5
 80145ee:	4b09      	ldr	r3, [pc, #36]	; (8014614 <_vfiprintf_r+0x258>)
 80145f0:	a904      	add	r1, sp, #16
 80145f2:	4630      	mov	r0, r6
 80145f4:	f000 f880 	bl	80146f8 <_printf_i>
 80145f8:	e7e4      	b.n	80145c4 <_vfiprintf_r+0x208>
 80145fa:	bf00      	nop
 80145fc:	08017ae8 	.word	0x08017ae8
 8014600:	08017b08 	.word	0x08017b08
 8014604:	08017ac8 	.word	0x08017ac8
 8014608:	08017a94 	.word	0x08017a94
 801460c:	08017a9e 	.word	0x08017a9e
 8014610:	00000000 	.word	0x00000000
 8014614:	08014397 	.word	0x08014397
 8014618:	08017a9a 	.word	0x08017a9a

0801461c <_printf_common>:
 801461c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014620:	4616      	mov	r6, r2
 8014622:	4699      	mov	r9, r3
 8014624:	688a      	ldr	r2, [r1, #8]
 8014626:	690b      	ldr	r3, [r1, #16]
 8014628:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801462c:	4293      	cmp	r3, r2
 801462e:	bfb8      	it	lt
 8014630:	4613      	movlt	r3, r2
 8014632:	6033      	str	r3, [r6, #0]
 8014634:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014638:	4607      	mov	r7, r0
 801463a:	460c      	mov	r4, r1
 801463c:	b10a      	cbz	r2, 8014642 <_printf_common+0x26>
 801463e:	3301      	adds	r3, #1
 8014640:	6033      	str	r3, [r6, #0]
 8014642:	6823      	ldr	r3, [r4, #0]
 8014644:	0699      	lsls	r1, r3, #26
 8014646:	bf42      	ittt	mi
 8014648:	6833      	ldrmi	r3, [r6, #0]
 801464a:	3302      	addmi	r3, #2
 801464c:	6033      	strmi	r3, [r6, #0]
 801464e:	6825      	ldr	r5, [r4, #0]
 8014650:	f015 0506 	ands.w	r5, r5, #6
 8014654:	d106      	bne.n	8014664 <_printf_common+0x48>
 8014656:	f104 0a19 	add.w	sl, r4, #25
 801465a:	68e3      	ldr	r3, [r4, #12]
 801465c:	6832      	ldr	r2, [r6, #0]
 801465e:	1a9b      	subs	r3, r3, r2
 8014660:	42ab      	cmp	r3, r5
 8014662:	dc26      	bgt.n	80146b2 <_printf_common+0x96>
 8014664:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014668:	1e13      	subs	r3, r2, #0
 801466a:	6822      	ldr	r2, [r4, #0]
 801466c:	bf18      	it	ne
 801466e:	2301      	movne	r3, #1
 8014670:	0692      	lsls	r2, r2, #26
 8014672:	d42b      	bmi.n	80146cc <_printf_common+0xb0>
 8014674:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014678:	4649      	mov	r1, r9
 801467a:	4638      	mov	r0, r7
 801467c:	47c0      	blx	r8
 801467e:	3001      	adds	r0, #1
 8014680:	d01e      	beq.n	80146c0 <_printf_common+0xa4>
 8014682:	6823      	ldr	r3, [r4, #0]
 8014684:	68e5      	ldr	r5, [r4, #12]
 8014686:	6832      	ldr	r2, [r6, #0]
 8014688:	f003 0306 	and.w	r3, r3, #6
 801468c:	2b04      	cmp	r3, #4
 801468e:	bf08      	it	eq
 8014690:	1aad      	subeq	r5, r5, r2
 8014692:	68a3      	ldr	r3, [r4, #8]
 8014694:	6922      	ldr	r2, [r4, #16]
 8014696:	bf0c      	ite	eq
 8014698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801469c:	2500      	movne	r5, #0
 801469e:	4293      	cmp	r3, r2
 80146a0:	bfc4      	itt	gt
 80146a2:	1a9b      	subgt	r3, r3, r2
 80146a4:	18ed      	addgt	r5, r5, r3
 80146a6:	2600      	movs	r6, #0
 80146a8:	341a      	adds	r4, #26
 80146aa:	42b5      	cmp	r5, r6
 80146ac:	d11a      	bne.n	80146e4 <_printf_common+0xc8>
 80146ae:	2000      	movs	r0, #0
 80146b0:	e008      	b.n	80146c4 <_printf_common+0xa8>
 80146b2:	2301      	movs	r3, #1
 80146b4:	4652      	mov	r2, sl
 80146b6:	4649      	mov	r1, r9
 80146b8:	4638      	mov	r0, r7
 80146ba:	47c0      	blx	r8
 80146bc:	3001      	adds	r0, #1
 80146be:	d103      	bne.n	80146c8 <_printf_common+0xac>
 80146c0:	f04f 30ff 	mov.w	r0, #4294967295
 80146c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146c8:	3501      	adds	r5, #1
 80146ca:	e7c6      	b.n	801465a <_printf_common+0x3e>
 80146cc:	18e1      	adds	r1, r4, r3
 80146ce:	1c5a      	adds	r2, r3, #1
 80146d0:	2030      	movs	r0, #48	; 0x30
 80146d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80146d6:	4422      	add	r2, r4
 80146d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80146dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80146e0:	3302      	adds	r3, #2
 80146e2:	e7c7      	b.n	8014674 <_printf_common+0x58>
 80146e4:	2301      	movs	r3, #1
 80146e6:	4622      	mov	r2, r4
 80146e8:	4649      	mov	r1, r9
 80146ea:	4638      	mov	r0, r7
 80146ec:	47c0      	blx	r8
 80146ee:	3001      	adds	r0, #1
 80146f0:	d0e6      	beq.n	80146c0 <_printf_common+0xa4>
 80146f2:	3601      	adds	r6, #1
 80146f4:	e7d9      	b.n	80146aa <_printf_common+0x8e>
	...

080146f8 <_printf_i>:
 80146f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80146fc:	7e0f      	ldrb	r7, [r1, #24]
 80146fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014700:	2f78      	cmp	r7, #120	; 0x78
 8014702:	4691      	mov	r9, r2
 8014704:	4680      	mov	r8, r0
 8014706:	460c      	mov	r4, r1
 8014708:	469a      	mov	sl, r3
 801470a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801470e:	d807      	bhi.n	8014720 <_printf_i+0x28>
 8014710:	2f62      	cmp	r7, #98	; 0x62
 8014712:	d80a      	bhi.n	801472a <_printf_i+0x32>
 8014714:	2f00      	cmp	r7, #0
 8014716:	f000 80d8 	beq.w	80148ca <_printf_i+0x1d2>
 801471a:	2f58      	cmp	r7, #88	; 0x58
 801471c:	f000 80a3 	beq.w	8014866 <_printf_i+0x16e>
 8014720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014724:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014728:	e03a      	b.n	80147a0 <_printf_i+0xa8>
 801472a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801472e:	2b15      	cmp	r3, #21
 8014730:	d8f6      	bhi.n	8014720 <_printf_i+0x28>
 8014732:	a101      	add	r1, pc, #4	; (adr r1, 8014738 <_printf_i+0x40>)
 8014734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014738:	08014791 	.word	0x08014791
 801473c:	080147a5 	.word	0x080147a5
 8014740:	08014721 	.word	0x08014721
 8014744:	08014721 	.word	0x08014721
 8014748:	08014721 	.word	0x08014721
 801474c:	08014721 	.word	0x08014721
 8014750:	080147a5 	.word	0x080147a5
 8014754:	08014721 	.word	0x08014721
 8014758:	08014721 	.word	0x08014721
 801475c:	08014721 	.word	0x08014721
 8014760:	08014721 	.word	0x08014721
 8014764:	080148b1 	.word	0x080148b1
 8014768:	080147d5 	.word	0x080147d5
 801476c:	08014893 	.word	0x08014893
 8014770:	08014721 	.word	0x08014721
 8014774:	08014721 	.word	0x08014721
 8014778:	080148d3 	.word	0x080148d3
 801477c:	08014721 	.word	0x08014721
 8014780:	080147d5 	.word	0x080147d5
 8014784:	08014721 	.word	0x08014721
 8014788:	08014721 	.word	0x08014721
 801478c:	0801489b 	.word	0x0801489b
 8014790:	682b      	ldr	r3, [r5, #0]
 8014792:	1d1a      	adds	r2, r3, #4
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	602a      	str	r2, [r5, #0]
 8014798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801479c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80147a0:	2301      	movs	r3, #1
 80147a2:	e0a3      	b.n	80148ec <_printf_i+0x1f4>
 80147a4:	6820      	ldr	r0, [r4, #0]
 80147a6:	6829      	ldr	r1, [r5, #0]
 80147a8:	0606      	lsls	r6, r0, #24
 80147aa:	f101 0304 	add.w	r3, r1, #4
 80147ae:	d50a      	bpl.n	80147c6 <_printf_i+0xce>
 80147b0:	680e      	ldr	r6, [r1, #0]
 80147b2:	602b      	str	r3, [r5, #0]
 80147b4:	2e00      	cmp	r6, #0
 80147b6:	da03      	bge.n	80147c0 <_printf_i+0xc8>
 80147b8:	232d      	movs	r3, #45	; 0x2d
 80147ba:	4276      	negs	r6, r6
 80147bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80147c0:	485e      	ldr	r0, [pc, #376]	; (801493c <_printf_i+0x244>)
 80147c2:	230a      	movs	r3, #10
 80147c4:	e019      	b.n	80147fa <_printf_i+0x102>
 80147c6:	680e      	ldr	r6, [r1, #0]
 80147c8:	602b      	str	r3, [r5, #0]
 80147ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80147ce:	bf18      	it	ne
 80147d0:	b236      	sxthne	r6, r6
 80147d2:	e7ef      	b.n	80147b4 <_printf_i+0xbc>
 80147d4:	682b      	ldr	r3, [r5, #0]
 80147d6:	6820      	ldr	r0, [r4, #0]
 80147d8:	1d19      	adds	r1, r3, #4
 80147da:	6029      	str	r1, [r5, #0]
 80147dc:	0601      	lsls	r1, r0, #24
 80147de:	d501      	bpl.n	80147e4 <_printf_i+0xec>
 80147e0:	681e      	ldr	r6, [r3, #0]
 80147e2:	e002      	b.n	80147ea <_printf_i+0xf2>
 80147e4:	0646      	lsls	r6, r0, #25
 80147e6:	d5fb      	bpl.n	80147e0 <_printf_i+0xe8>
 80147e8:	881e      	ldrh	r6, [r3, #0]
 80147ea:	4854      	ldr	r0, [pc, #336]	; (801493c <_printf_i+0x244>)
 80147ec:	2f6f      	cmp	r7, #111	; 0x6f
 80147ee:	bf0c      	ite	eq
 80147f0:	2308      	moveq	r3, #8
 80147f2:	230a      	movne	r3, #10
 80147f4:	2100      	movs	r1, #0
 80147f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80147fa:	6865      	ldr	r5, [r4, #4]
 80147fc:	60a5      	str	r5, [r4, #8]
 80147fe:	2d00      	cmp	r5, #0
 8014800:	bfa2      	ittt	ge
 8014802:	6821      	ldrge	r1, [r4, #0]
 8014804:	f021 0104 	bicge.w	r1, r1, #4
 8014808:	6021      	strge	r1, [r4, #0]
 801480a:	b90e      	cbnz	r6, 8014810 <_printf_i+0x118>
 801480c:	2d00      	cmp	r5, #0
 801480e:	d04d      	beq.n	80148ac <_printf_i+0x1b4>
 8014810:	4615      	mov	r5, r2
 8014812:	fbb6 f1f3 	udiv	r1, r6, r3
 8014816:	fb03 6711 	mls	r7, r3, r1, r6
 801481a:	5dc7      	ldrb	r7, [r0, r7]
 801481c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014820:	4637      	mov	r7, r6
 8014822:	42bb      	cmp	r3, r7
 8014824:	460e      	mov	r6, r1
 8014826:	d9f4      	bls.n	8014812 <_printf_i+0x11a>
 8014828:	2b08      	cmp	r3, #8
 801482a:	d10b      	bne.n	8014844 <_printf_i+0x14c>
 801482c:	6823      	ldr	r3, [r4, #0]
 801482e:	07de      	lsls	r6, r3, #31
 8014830:	d508      	bpl.n	8014844 <_printf_i+0x14c>
 8014832:	6923      	ldr	r3, [r4, #16]
 8014834:	6861      	ldr	r1, [r4, #4]
 8014836:	4299      	cmp	r1, r3
 8014838:	bfde      	ittt	le
 801483a:	2330      	movle	r3, #48	; 0x30
 801483c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014840:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014844:	1b52      	subs	r2, r2, r5
 8014846:	6122      	str	r2, [r4, #16]
 8014848:	f8cd a000 	str.w	sl, [sp]
 801484c:	464b      	mov	r3, r9
 801484e:	aa03      	add	r2, sp, #12
 8014850:	4621      	mov	r1, r4
 8014852:	4640      	mov	r0, r8
 8014854:	f7ff fee2 	bl	801461c <_printf_common>
 8014858:	3001      	adds	r0, #1
 801485a:	d14c      	bne.n	80148f6 <_printf_i+0x1fe>
 801485c:	f04f 30ff 	mov.w	r0, #4294967295
 8014860:	b004      	add	sp, #16
 8014862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014866:	4835      	ldr	r0, [pc, #212]	; (801493c <_printf_i+0x244>)
 8014868:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801486c:	6829      	ldr	r1, [r5, #0]
 801486e:	6823      	ldr	r3, [r4, #0]
 8014870:	f851 6b04 	ldr.w	r6, [r1], #4
 8014874:	6029      	str	r1, [r5, #0]
 8014876:	061d      	lsls	r5, r3, #24
 8014878:	d514      	bpl.n	80148a4 <_printf_i+0x1ac>
 801487a:	07df      	lsls	r7, r3, #31
 801487c:	bf44      	itt	mi
 801487e:	f043 0320 	orrmi.w	r3, r3, #32
 8014882:	6023      	strmi	r3, [r4, #0]
 8014884:	b91e      	cbnz	r6, 801488e <_printf_i+0x196>
 8014886:	6823      	ldr	r3, [r4, #0]
 8014888:	f023 0320 	bic.w	r3, r3, #32
 801488c:	6023      	str	r3, [r4, #0]
 801488e:	2310      	movs	r3, #16
 8014890:	e7b0      	b.n	80147f4 <_printf_i+0xfc>
 8014892:	6823      	ldr	r3, [r4, #0]
 8014894:	f043 0320 	orr.w	r3, r3, #32
 8014898:	6023      	str	r3, [r4, #0]
 801489a:	2378      	movs	r3, #120	; 0x78
 801489c:	4828      	ldr	r0, [pc, #160]	; (8014940 <_printf_i+0x248>)
 801489e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80148a2:	e7e3      	b.n	801486c <_printf_i+0x174>
 80148a4:	0659      	lsls	r1, r3, #25
 80148a6:	bf48      	it	mi
 80148a8:	b2b6      	uxthmi	r6, r6
 80148aa:	e7e6      	b.n	801487a <_printf_i+0x182>
 80148ac:	4615      	mov	r5, r2
 80148ae:	e7bb      	b.n	8014828 <_printf_i+0x130>
 80148b0:	682b      	ldr	r3, [r5, #0]
 80148b2:	6826      	ldr	r6, [r4, #0]
 80148b4:	6961      	ldr	r1, [r4, #20]
 80148b6:	1d18      	adds	r0, r3, #4
 80148b8:	6028      	str	r0, [r5, #0]
 80148ba:	0635      	lsls	r5, r6, #24
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	d501      	bpl.n	80148c4 <_printf_i+0x1cc>
 80148c0:	6019      	str	r1, [r3, #0]
 80148c2:	e002      	b.n	80148ca <_printf_i+0x1d2>
 80148c4:	0670      	lsls	r0, r6, #25
 80148c6:	d5fb      	bpl.n	80148c0 <_printf_i+0x1c8>
 80148c8:	8019      	strh	r1, [r3, #0]
 80148ca:	2300      	movs	r3, #0
 80148cc:	6123      	str	r3, [r4, #16]
 80148ce:	4615      	mov	r5, r2
 80148d0:	e7ba      	b.n	8014848 <_printf_i+0x150>
 80148d2:	682b      	ldr	r3, [r5, #0]
 80148d4:	1d1a      	adds	r2, r3, #4
 80148d6:	602a      	str	r2, [r5, #0]
 80148d8:	681d      	ldr	r5, [r3, #0]
 80148da:	6862      	ldr	r2, [r4, #4]
 80148dc:	2100      	movs	r1, #0
 80148de:	4628      	mov	r0, r5
 80148e0:	f7eb fc56 	bl	8000190 <memchr>
 80148e4:	b108      	cbz	r0, 80148ea <_printf_i+0x1f2>
 80148e6:	1b40      	subs	r0, r0, r5
 80148e8:	6060      	str	r0, [r4, #4]
 80148ea:	6863      	ldr	r3, [r4, #4]
 80148ec:	6123      	str	r3, [r4, #16]
 80148ee:	2300      	movs	r3, #0
 80148f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80148f4:	e7a8      	b.n	8014848 <_printf_i+0x150>
 80148f6:	6923      	ldr	r3, [r4, #16]
 80148f8:	462a      	mov	r2, r5
 80148fa:	4649      	mov	r1, r9
 80148fc:	4640      	mov	r0, r8
 80148fe:	47d0      	blx	sl
 8014900:	3001      	adds	r0, #1
 8014902:	d0ab      	beq.n	801485c <_printf_i+0x164>
 8014904:	6823      	ldr	r3, [r4, #0]
 8014906:	079b      	lsls	r3, r3, #30
 8014908:	d413      	bmi.n	8014932 <_printf_i+0x23a>
 801490a:	68e0      	ldr	r0, [r4, #12]
 801490c:	9b03      	ldr	r3, [sp, #12]
 801490e:	4298      	cmp	r0, r3
 8014910:	bfb8      	it	lt
 8014912:	4618      	movlt	r0, r3
 8014914:	e7a4      	b.n	8014860 <_printf_i+0x168>
 8014916:	2301      	movs	r3, #1
 8014918:	4632      	mov	r2, r6
 801491a:	4649      	mov	r1, r9
 801491c:	4640      	mov	r0, r8
 801491e:	47d0      	blx	sl
 8014920:	3001      	adds	r0, #1
 8014922:	d09b      	beq.n	801485c <_printf_i+0x164>
 8014924:	3501      	adds	r5, #1
 8014926:	68e3      	ldr	r3, [r4, #12]
 8014928:	9903      	ldr	r1, [sp, #12]
 801492a:	1a5b      	subs	r3, r3, r1
 801492c:	42ab      	cmp	r3, r5
 801492e:	dcf2      	bgt.n	8014916 <_printf_i+0x21e>
 8014930:	e7eb      	b.n	801490a <_printf_i+0x212>
 8014932:	2500      	movs	r5, #0
 8014934:	f104 0619 	add.w	r6, r4, #25
 8014938:	e7f5      	b.n	8014926 <_printf_i+0x22e>
 801493a:	bf00      	nop
 801493c:	08017aa5 	.word	0x08017aa5
 8014940:	08017ab6 	.word	0x08017ab6

08014944 <__swbuf_r>:
 8014944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014946:	460e      	mov	r6, r1
 8014948:	4614      	mov	r4, r2
 801494a:	4605      	mov	r5, r0
 801494c:	b118      	cbz	r0, 8014956 <__swbuf_r+0x12>
 801494e:	6983      	ldr	r3, [r0, #24]
 8014950:	b90b      	cbnz	r3, 8014956 <__swbuf_r+0x12>
 8014952:	f000 fb0f 	bl	8014f74 <__sinit>
 8014956:	4b21      	ldr	r3, [pc, #132]	; (80149dc <__swbuf_r+0x98>)
 8014958:	429c      	cmp	r4, r3
 801495a:	d12b      	bne.n	80149b4 <__swbuf_r+0x70>
 801495c:	686c      	ldr	r4, [r5, #4]
 801495e:	69a3      	ldr	r3, [r4, #24]
 8014960:	60a3      	str	r3, [r4, #8]
 8014962:	89a3      	ldrh	r3, [r4, #12]
 8014964:	071a      	lsls	r2, r3, #28
 8014966:	d52f      	bpl.n	80149c8 <__swbuf_r+0x84>
 8014968:	6923      	ldr	r3, [r4, #16]
 801496a:	b36b      	cbz	r3, 80149c8 <__swbuf_r+0x84>
 801496c:	6923      	ldr	r3, [r4, #16]
 801496e:	6820      	ldr	r0, [r4, #0]
 8014970:	1ac0      	subs	r0, r0, r3
 8014972:	6963      	ldr	r3, [r4, #20]
 8014974:	b2f6      	uxtb	r6, r6
 8014976:	4283      	cmp	r3, r0
 8014978:	4637      	mov	r7, r6
 801497a:	dc04      	bgt.n	8014986 <__swbuf_r+0x42>
 801497c:	4621      	mov	r1, r4
 801497e:	4628      	mov	r0, r5
 8014980:	f000 fa64 	bl	8014e4c <_fflush_r>
 8014984:	bb30      	cbnz	r0, 80149d4 <__swbuf_r+0x90>
 8014986:	68a3      	ldr	r3, [r4, #8]
 8014988:	3b01      	subs	r3, #1
 801498a:	60a3      	str	r3, [r4, #8]
 801498c:	6823      	ldr	r3, [r4, #0]
 801498e:	1c5a      	adds	r2, r3, #1
 8014990:	6022      	str	r2, [r4, #0]
 8014992:	701e      	strb	r6, [r3, #0]
 8014994:	6963      	ldr	r3, [r4, #20]
 8014996:	3001      	adds	r0, #1
 8014998:	4283      	cmp	r3, r0
 801499a:	d004      	beq.n	80149a6 <__swbuf_r+0x62>
 801499c:	89a3      	ldrh	r3, [r4, #12]
 801499e:	07db      	lsls	r3, r3, #31
 80149a0:	d506      	bpl.n	80149b0 <__swbuf_r+0x6c>
 80149a2:	2e0a      	cmp	r6, #10
 80149a4:	d104      	bne.n	80149b0 <__swbuf_r+0x6c>
 80149a6:	4621      	mov	r1, r4
 80149a8:	4628      	mov	r0, r5
 80149aa:	f000 fa4f 	bl	8014e4c <_fflush_r>
 80149ae:	b988      	cbnz	r0, 80149d4 <__swbuf_r+0x90>
 80149b0:	4638      	mov	r0, r7
 80149b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149b4:	4b0a      	ldr	r3, [pc, #40]	; (80149e0 <__swbuf_r+0x9c>)
 80149b6:	429c      	cmp	r4, r3
 80149b8:	d101      	bne.n	80149be <__swbuf_r+0x7a>
 80149ba:	68ac      	ldr	r4, [r5, #8]
 80149bc:	e7cf      	b.n	801495e <__swbuf_r+0x1a>
 80149be:	4b09      	ldr	r3, [pc, #36]	; (80149e4 <__swbuf_r+0xa0>)
 80149c0:	429c      	cmp	r4, r3
 80149c2:	bf08      	it	eq
 80149c4:	68ec      	ldreq	r4, [r5, #12]
 80149c6:	e7ca      	b.n	801495e <__swbuf_r+0x1a>
 80149c8:	4621      	mov	r1, r4
 80149ca:	4628      	mov	r0, r5
 80149cc:	f000 f80c 	bl	80149e8 <__swsetup_r>
 80149d0:	2800      	cmp	r0, #0
 80149d2:	d0cb      	beq.n	801496c <__swbuf_r+0x28>
 80149d4:	f04f 37ff 	mov.w	r7, #4294967295
 80149d8:	e7ea      	b.n	80149b0 <__swbuf_r+0x6c>
 80149da:	bf00      	nop
 80149dc:	08017ae8 	.word	0x08017ae8
 80149e0:	08017b08 	.word	0x08017b08
 80149e4:	08017ac8 	.word	0x08017ac8

080149e8 <__swsetup_r>:
 80149e8:	4b32      	ldr	r3, [pc, #200]	; (8014ab4 <__swsetup_r+0xcc>)
 80149ea:	b570      	push	{r4, r5, r6, lr}
 80149ec:	681d      	ldr	r5, [r3, #0]
 80149ee:	4606      	mov	r6, r0
 80149f0:	460c      	mov	r4, r1
 80149f2:	b125      	cbz	r5, 80149fe <__swsetup_r+0x16>
 80149f4:	69ab      	ldr	r3, [r5, #24]
 80149f6:	b913      	cbnz	r3, 80149fe <__swsetup_r+0x16>
 80149f8:	4628      	mov	r0, r5
 80149fa:	f000 fabb 	bl	8014f74 <__sinit>
 80149fe:	4b2e      	ldr	r3, [pc, #184]	; (8014ab8 <__swsetup_r+0xd0>)
 8014a00:	429c      	cmp	r4, r3
 8014a02:	d10f      	bne.n	8014a24 <__swsetup_r+0x3c>
 8014a04:	686c      	ldr	r4, [r5, #4]
 8014a06:	89a3      	ldrh	r3, [r4, #12]
 8014a08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014a0c:	0719      	lsls	r1, r3, #28
 8014a0e:	d42c      	bmi.n	8014a6a <__swsetup_r+0x82>
 8014a10:	06dd      	lsls	r5, r3, #27
 8014a12:	d411      	bmi.n	8014a38 <__swsetup_r+0x50>
 8014a14:	2309      	movs	r3, #9
 8014a16:	6033      	str	r3, [r6, #0]
 8014a18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014a1c:	81a3      	strh	r3, [r4, #12]
 8014a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8014a22:	e03e      	b.n	8014aa2 <__swsetup_r+0xba>
 8014a24:	4b25      	ldr	r3, [pc, #148]	; (8014abc <__swsetup_r+0xd4>)
 8014a26:	429c      	cmp	r4, r3
 8014a28:	d101      	bne.n	8014a2e <__swsetup_r+0x46>
 8014a2a:	68ac      	ldr	r4, [r5, #8]
 8014a2c:	e7eb      	b.n	8014a06 <__swsetup_r+0x1e>
 8014a2e:	4b24      	ldr	r3, [pc, #144]	; (8014ac0 <__swsetup_r+0xd8>)
 8014a30:	429c      	cmp	r4, r3
 8014a32:	bf08      	it	eq
 8014a34:	68ec      	ldreq	r4, [r5, #12]
 8014a36:	e7e6      	b.n	8014a06 <__swsetup_r+0x1e>
 8014a38:	0758      	lsls	r0, r3, #29
 8014a3a:	d512      	bpl.n	8014a62 <__swsetup_r+0x7a>
 8014a3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a3e:	b141      	cbz	r1, 8014a52 <__swsetup_r+0x6a>
 8014a40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a44:	4299      	cmp	r1, r3
 8014a46:	d002      	beq.n	8014a4e <__swsetup_r+0x66>
 8014a48:	4630      	mov	r0, r6
 8014a4a:	f000 ff51 	bl	80158f0 <_free_r>
 8014a4e:	2300      	movs	r3, #0
 8014a50:	6363      	str	r3, [r4, #52]	; 0x34
 8014a52:	89a3      	ldrh	r3, [r4, #12]
 8014a54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014a58:	81a3      	strh	r3, [r4, #12]
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	6063      	str	r3, [r4, #4]
 8014a5e:	6923      	ldr	r3, [r4, #16]
 8014a60:	6023      	str	r3, [r4, #0]
 8014a62:	89a3      	ldrh	r3, [r4, #12]
 8014a64:	f043 0308 	orr.w	r3, r3, #8
 8014a68:	81a3      	strh	r3, [r4, #12]
 8014a6a:	6923      	ldr	r3, [r4, #16]
 8014a6c:	b94b      	cbnz	r3, 8014a82 <__swsetup_r+0x9a>
 8014a6e:	89a3      	ldrh	r3, [r4, #12]
 8014a70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014a78:	d003      	beq.n	8014a82 <__swsetup_r+0x9a>
 8014a7a:	4621      	mov	r1, r4
 8014a7c:	4630      	mov	r0, r6
 8014a7e:	f000 fb3f 	bl	8015100 <__smakebuf_r>
 8014a82:	89a0      	ldrh	r0, [r4, #12]
 8014a84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014a88:	f010 0301 	ands.w	r3, r0, #1
 8014a8c:	d00a      	beq.n	8014aa4 <__swsetup_r+0xbc>
 8014a8e:	2300      	movs	r3, #0
 8014a90:	60a3      	str	r3, [r4, #8]
 8014a92:	6963      	ldr	r3, [r4, #20]
 8014a94:	425b      	negs	r3, r3
 8014a96:	61a3      	str	r3, [r4, #24]
 8014a98:	6923      	ldr	r3, [r4, #16]
 8014a9a:	b943      	cbnz	r3, 8014aae <__swsetup_r+0xc6>
 8014a9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014aa0:	d1ba      	bne.n	8014a18 <__swsetup_r+0x30>
 8014aa2:	bd70      	pop	{r4, r5, r6, pc}
 8014aa4:	0781      	lsls	r1, r0, #30
 8014aa6:	bf58      	it	pl
 8014aa8:	6963      	ldrpl	r3, [r4, #20]
 8014aaa:	60a3      	str	r3, [r4, #8]
 8014aac:	e7f4      	b.n	8014a98 <__swsetup_r+0xb0>
 8014aae:	2000      	movs	r0, #0
 8014ab0:	e7f7      	b.n	8014aa2 <__swsetup_r+0xba>
 8014ab2:	bf00      	nop
 8014ab4:	2000016c 	.word	0x2000016c
 8014ab8:	08017ae8 	.word	0x08017ae8
 8014abc:	08017b08 	.word	0x08017b08
 8014ac0:	08017ac8 	.word	0x08017ac8

08014ac4 <abort>:
 8014ac4:	b508      	push	{r3, lr}
 8014ac6:	2006      	movs	r0, #6
 8014ac8:	f001 f82a 	bl	8015b20 <raise>
 8014acc:	2001      	movs	r0, #1
 8014ace:	f7ed ffbb 	bl	8002a48 <_exit>

08014ad2 <print_e>:
 8014ad2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ad4:	b087      	sub	sp, #28
 8014ad6:	ec43 2b10 	vmov	d0, r2, r3
 8014ada:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8014adc:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8014ae0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8014ae2:	ab04      	add	r3, sp, #16
 8014ae4:	9301      	str	r3, [sp, #4]
 8014ae6:	ab03      	add	r3, sp, #12
 8014ae8:	9300      	str	r3, [sp, #0]
 8014aea:	1c62      	adds	r2, r4, #1
 8014aec:	ab05      	add	r3, sp, #20
 8014aee:	460f      	mov	r7, r1
 8014af0:	2102      	movs	r1, #2
 8014af2:	f001 f92d 	bl	8015d50 <_dtoa_r>
 8014af6:	9a05      	ldr	r2, [sp, #20]
 8014af8:	f242 730f 	movw	r3, #9999	; 0x270f
 8014afc:	429a      	cmp	r2, r3
 8014afe:	d105      	bne.n	8014b0c <print_e+0x3a>
 8014b00:	4601      	mov	r1, r0
 8014b02:	4638      	mov	r0, r7
 8014b04:	f001 f86b 	bl	8015bde <strcpy>
 8014b08:	b007      	add	sp, #28
 8014b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b0c:	463b      	mov	r3, r7
 8014b0e:	7801      	ldrb	r1, [r0, #0]
 8014b10:	f803 1b01 	strb.w	r1, [r3], #1
 8014b14:	2c00      	cmp	r4, #0
 8014b16:	bfc8      	it	gt
 8014b18:	2501      	movgt	r5, #1
 8014b1a:	212e      	movs	r1, #46	; 0x2e
 8014b1c:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8014b20:	b10f      	cbz	r7, 8014b26 <print_e+0x54>
 8014b22:	2c00      	cmp	r4, #0
 8014b24:	dc37      	bgt.n	8014b96 <print_e+0xc4>
 8014b26:	2e67      	cmp	r6, #103	; 0x67
 8014b28:	d046      	beq.n	8014bb8 <print_e+0xe6>
 8014b2a:	2e47      	cmp	r6, #71	; 0x47
 8014b2c:	d046      	beq.n	8014bbc <print_e+0xea>
 8014b2e:	212e      	movs	r1, #46	; 0x2e
 8014b30:	2030      	movs	r0, #48	; 0x30
 8014b32:	2c00      	cmp	r4, #0
 8014b34:	dc38      	bgt.n	8014ba8 <print_e+0xd6>
 8014b36:	1e51      	subs	r1, r2, #1
 8014b38:	2900      	cmp	r1, #0
 8014b3a:	bfb8      	it	lt
 8014b3c:	f1c2 0201 	rsblt	r2, r2, #1
 8014b40:	4618      	mov	r0, r3
 8014b42:	9105      	str	r1, [sp, #20]
 8014b44:	bfac      	ite	ge
 8014b46:	222b      	movge	r2, #43	; 0x2b
 8014b48:	9205      	strlt	r2, [sp, #20]
 8014b4a:	f800 6b02 	strb.w	r6, [r0], #2
 8014b4e:	bfa8      	it	ge
 8014b50:	705a      	strbge	r2, [r3, #1]
 8014b52:	9a05      	ldr	r2, [sp, #20]
 8014b54:	bfbc      	itt	lt
 8014b56:	212d      	movlt	r1, #45	; 0x2d
 8014b58:	7059      	strblt	r1, [r3, #1]
 8014b5a:	2a63      	cmp	r2, #99	; 0x63
 8014b5c:	dd0b      	ble.n	8014b76 <print_e+0xa4>
 8014b5e:	2164      	movs	r1, #100	; 0x64
 8014b60:	fb92 f1f1 	sdiv	r1, r2, r1
 8014b64:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8014b68:	1cd8      	adds	r0, r3, #3
 8014b6a:	709c      	strb	r4, [r3, #2]
 8014b6c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8014b70:	fb03 2201 	mla	r2, r3, r1, r2
 8014b74:	9205      	str	r2, [sp, #20]
 8014b76:	9b05      	ldr	r3, [sp, #20]
 8014b78:	220a      	movs	r2, #10
 8014b7a:	fb93 f2f2 	sdiv	r2, r3, r2
 8014b7e:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8014b82:	7001      	strb	r1, [r0, #0]
 8014b84:	f06f 0109 	mvn.w	r1, #9
 8014b88:	fb01 3302 	mla	r3, r1, r2, r3
 8014b8c:	3330      	adds	r3, #48	; 0x30
 8014b8e:	7043      	strb	r3, [r0, #1]
 8014b90:	2300      	movs	r3, #0
 8014b92:	7083      	strb	r3, [r0, #2]
 8014b94:	e7b8      	b.n	8014b08 <print_e+0x36>
 8014b96:	b10d      	cbz	r5, 8014b9c <print_e+0xca>
 8014b98:	f803 1b01 	strb.w	r1, [r3], #1
 8014b9c:	7805      	ldrb	r5, [r0, #0]
 8014b9e:	f803 5b01 	strb.w	r5, [r3], #1
 8014ba2:	3c01      	subs	r4, #1
 8014ba4:	2500      	movs	r5, #0
 8014ba6:	e7b9      	b.n	8014b1c <print_e+0x4a>
 8014ba8:	b10d      	cbz	r5, 8014bae <print_e+0xdc>
 8014baa:	f803 1b01 	strb.w	r1, [r3], #1
 8014bae:	f803 0b01 	strb.w	r0, [r3], #1
 8014bb2:	3c01      	subs	r4, #1
 8014bb4:	2500      	movs	r5, #0
 8014bb6:	e7bc      	b.n	8014b32 <print_e+0x60>
 8014bb8:	2665      	movs	r6, #101	; 0x65
 8014bba:	e7bc      	b.n	8014b36 <print_e+0x64>
 8014bbc:	2645      	movs	r6, #69	; 0x45
 8014bbe:	e7ba      	b.n	8014b36 <print_e+0x64>

08014bc0 <_gcvt>:
 8014bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bc4:	ec55 4b10 	vmov	r4, r5, d0
 8014bc8:	b088      	sub	sp, #32
 8014bca:	4681      	mov	r9, r0
 8014bcc:	4688      	mov	r8, r1
 8014bce:	4616      	mov	r6, r2
 8014bd0:	469a      	mov	sl, r3
 8014bd2:	ee10 0a10 	vmov	r0, s0
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	2300      	movs	r3, #0
 8014bda:	4629      	mov	r1, r5
 8014bdc:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8014bde:	f7eb ff55 	bl	8000a8c <__aeabi_dcmplt>
 8014be2:	b110      	cbz	r0, 8014bea <_gcvt+0x2a>
 8014be4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8014be8:	461d      	mov	r5, r3
 8014bea:	2200      	movs	r2, #0
 8014bec:	2300      	movs	r3, #0
 8014bee:	4620      	mov	r0, r4
 8014bf0:	4629      	mov	r1, r5
 8014bf2:	f7eb ff41 	bl	8000a78 <__aeabi_dcmpeq>
 8014bf6:	b138      	cbz	r0, 8014c08 <_gcvt+0x48>
 8014bf8:	2330      	movs	r3, #48	; 0x30
 8014bfa:	7033      	strb	r3, [r6, #0]
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	7073      	strb	r3, [r6, #1]
 8014c00:	4630      	mov	r0, r6
 8014c02:	b008      	add	sp, #32
 8014c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c08:	a34b      	add	r3, pc, #300	; (adr r3, 8014d38 <_gcvt+0x178>)
 8014c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c0e:	4620      	mov	r0, r4
 8014c10:	4629      	mov	r1, r5
 8014c12:	f7eb ff45 	bl	8000aa0 <__aeabi_dcmple>
 8014c16:	b158      	cbz	r0, 8014c30 <_gcvt+0x70>
 8014c18:	f108 31ff 	add.w	r1, r8, #4294967295
 8014c1c:	9100      	str	r1, [sp, #0]
 8014c1e:	e9cd a701 	strd	sl, r7, [sp, #4]
 8014c22:	4622      	mov	r2, r4
 8014c24:	462b      	mov	r3, r5
 8014c26:	4631      	mov	r1, r6
 8014c28:	4648      	mov	r0, r9
 8014c2a:	f7ff ff52 	bl	8014ad2 <print_e>
 8014c2e:	e7e7      	b.n	8014c00 <_gcvt+0x40>
 8014c30:	4640      	mov	r0, r8
 8014c32:	f000 fe29 	bl	8015888 <_mprec_log10>
 8014c36:	4622      	mov	r2, r4
 8014c38:	ec51 0b10 	vmov	r0, r1, d0
 8014c3c:	462b      	mov	r3, r5
 8014c3e:	f7eb ff2f 	bl	8000aa0 <__aeabi_dcmple>
 8014c42:	2800      	cmp	r0, #0
 8014c44:	d1e8      	bne.n	8014c18 <_gcvt+0x58>
 8014c46:	ab07      	add	r3, sp, #28
 8014c48:	9301      	str	r3, [sp, #4]
 8014c4a:	ab06      	add	r3, sp, #24
 8014c4c:	9300      	str	r3, [sp, #0]
 8014c4e:	4642      	mov	r2, r8
 8014c50:	ab05      	add	r3, sp, #20
 8014c52:	ec45 4b10 	vmov	d0, r4, r5
 8014c56:	2102      	movs	r1, #2
 8014c58:	4648      	mov	r0, r9
 8014c5a:	f001 f879 	bl	8015d50 <_dtoa_r>
 8014c5e:	9a05      	ldr	r2, [sp, #20]
 8014c60:	f242 730f 	movw	r3, #9999	; 0x270f
 8014c64:	429a      	cmp	r2, r3
 8014c66:	d00e      	beq.n	8014c86 <_gcvt+0xc6>
 8014c68:	4633      	mov	r3, r6
 8014c6a:	44b0      	add	r8, r6
 8014c6c:	4605      	mov	r5, r0
 8014c6e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8014c72:	9c05      	ldr	r4, [sp, #20]
 8014c74:	eba8 0203 	sub.w	r2, r8, r3
 8014c78:	b109      	cbz	r1, 8014c7e <_gcvt+0xbe>
 8014c7a:	2c00      	cmp	r4, #0
 8014c7c:	dc08      	bgt.n	8014c90 <_gcvt+0xd0>
 8014c7e:	2100      	movs	r1, #0
 8014c80:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8014c84:	e00d      	b.n	8014ca2 <_gcvt+0xe2>
 8014c86:	4601      	mov	r1, r0
 8014c88:	4630      	mov	r0, r6
 8014c8a:	f000 ffa8 	bl	8015bde <strcpy>
 8014c8e:	e7b7      	b.n	8014c00 <_gcvt+0x40>
 8014c90:	3c01      	subs	r4, #1
 8014c92:	f803 1b01 	strb.w	r1, [r3], #1
 8014c96:	9405      	str	r4, [sp, #20]
 8014c98:	e7e8      	b.n	8014c6c <_gcvt+0xac>
 8014c9a:	f803 cb01 	strb.w	ip, [r3], #1
 8014c9e:	3a01      	subs	r2, #1
 8014ca0:	2101      	movs	r1, #1
 8014ca2:	2c00      	cmp	r4, #0
 8014ca4:	4620      	mov	r0, r4
 8014ca6:	dc2a      	bgt.n	8014cfe <_gcvt+0x13e>
 8014ca8:	b101      	cbz	r1, 8014cac <_gcvt+0xec>
 8014caa:	9405      	str	r4, [sp, #20]
 8014cac:	b90f      	cbnz	r7, 8014cb2 <_gcvt+0xf2>
 8014cae:	7829      	ldrb	r1, [r5, #0]
 8014cb0:	b311      	cbz	r1, 8014cf8 <_gcvt+0x138>
 8014cb2:	42b3      	cmp	r3, r6
 8014cb4:	bf04      	itt	eq
 8014cb6:	2130      	moveq	r1, #48	; 0x30
 8014cb8:	f803 1b01 	strbeq.w	r1, [r3], #1
 8014cbc:	212e      	movs	r1, #46	; 0x2e
 8014cbe:	7019      	strb	r1, [r3, #0]
 8014cc0:	9905      	ldr	r1, [sp, #20]
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	2400      	movs	r4, #0
 8014cc6:	eba1 0c03 	sub.w	ip, r1, r3
 8014cca:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8014cce:	eb1c 0f00 	cmn.w	ip, r0
 8014cd2:	d41c      	bmi.n	8014d0e <_gcvt+0x14e>
 8014cd4:	2900      	cmp	r1, #0
 8014cd6:	f1c1 0000 	rsb	r0, r1, #0
 8014cda:	bfc8      	it	gt
 8014cdc:	2000      	movgt	r0, #0
 8014cde:	f100 0c01 	add.w	ip, r0, #1
 8014ce2:	4463      	add	r3, ip
 8014ce4:	4401      	add	r1, r0
 8014ce6:	b104      	cbz	r4, 8014cea <_gcvt+0x12a>
 8014ce8:	9105      	str	r1, [sp, #20]
 8014cea:	1e69      	subs	r1, r5, #1
 8014cec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014cf0:	b108      	cbz	r0, 8014cf6 <_gcvt+0x136>
 8014cf2:	2a00      	cmp	r2, #0
 8014cf4:	dc0f      	bgt.n	8014d16 <_gcvt+0x156>
 8014cf6:	b9df      	cbnz	r7, 8014d30 <_gcvt+0x170>
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	701a      	strb	r2, [r3, #0]
 8014cfc:	e780      	b.n	8014c00 <_gcvt+0x40>
 8014cfe:	2a00      	cmp	r2, #0
 8014d00:	f104 34ff 	add.w	r4, r4, #4294967295
 8014d04:	dcc9      	bgt.n	8014c9a <_gcvt+0xda>
 8014d06:	2900      	cmp	r1, #0
 8014d08:	d0d0      	beq.n	8014cac <_gcvt+0xec>
 8014d0a:	9005      	str	r0, [sp, #20]
 8014d0c:	e7ce      	b.n	8014cac <_gcvt+0xec>
 8014d0e:	f800 ef01 	strb.w	lr, [r0, #1]!
 8014d12:	2401      	movs	r4, #1
 8014d14:	e7db      	b.n	8014cce <_gcvt+0x10e>
 8014d16:	f803 0b01 	strb.w	r0, [r3], #1
 8014d1a:	3a01      	subs	r2, #1
 8014d1c:	e7e6      	b.n	8014cec <_gcvt+0x12c>
 8014d1e:	f801 5b01 	strb.w	r5, [r1], #1
 8014d22:	1a60      	subs	r0, r4, r1
 8014d24:	2800      	cmp	r0, #0
 8014d26:	dcfa      	bgt.n	8014d1e <_gcvt+0x15e>
 8014d28:	2a00      	cmp	r2, #0
 8014d2a:	bfa8      	it	ge
 8014d2c:	189b      	addge	r3, r3, r2
 8014d2e:	e7e3      	b.n	8014cf8 <_gcvt+0x138>
 8014d30:	4619      	mov	r1, r3
 8014d32:	189c      	adds	r4, r3, r2
 8014d34:	2530      	movs	r5, #48	; 0x30
 8014d36:	e7f4      	b.n	8014d22 <_gcvt+0x162>
 8014d38:	eb1c432d 	.word	0xeb1c432d
 8014d3c:	3f1a36e2 	.word	0x3f1a36e2

08014d40 <__sflush_r>:
 8014d40:	898a      	ldrh	r2, [r1, #12]
 8014d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d46:	4605      	mov	r5, r0
 8014d48:	0710      	lsls	r0, r2, #28
 8014d4a:	460c      	mov	r4, r1
 8014d4c:	d458      	bmi.n	8014e00 <__sflush_r+0xc0>
 8014d4e:	684b      	ldr	r3, [r1, #4]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	dc05      	bgt.n	8014d60 <__sflush_r+0x20>
 8014d54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	dc02      	bgt.n	8014d60 <__sflush_r+0x20>
 8014d5a:	2000      	movs	r0, #0
 8014d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014d62:	2e00      	cmp	r6, #0
 8014d64:	d0f9      	beq.n	8014d5a <__sflush_r+0x1a>
 8014d66:	2300      	movs	r3, #0
 8014d68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014d6c:	682f      	ldr	r7, [r5, #0]
 8014d6e:	602b      	str	r3, [r5, #0]
 8014d70:	d032      	beq.n	8014dd8 <__sflush_r+0x98>
 8014d72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014d74:	89a3      	ldrh	r3, [r4, #12]
 8014d76:	075a      	lsls	r2, r3, #29
 8014d78:	d505      	bpl.n	8014d86 <__sflush_r+0x46>
 8014d7a:	6863      	ldr	r3, [r4, #4]
 8014d7c:	1ac0      	subs	r0, r0, r3
 8014d7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014d80:	b10b      	cbz	r3, 8014d86 <__sflush_r+0x46>
 8014d82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014d84:	1ac0      	subs	r0, r0, r3
 8014d86:	2300      	movs	r3, #0
 8014d88:	4602      	mov	r2, r0
 8014d8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014d8c:	6a21      	ldr	r1, [r4, #32]
 8014d8e:	4628      	mov	r0, r5
 8014d90:	47b0      	blx	r6
 8014d92:	1c43      	adds	r3, r0, #1
 8014d94:	89a3      	ldrh	r3, [r4, #12]
 8014d96:	d106      	bne.n	8014da6 <__sflush_r+0x66>
 8014d98:	6829      	ldr	r1, [r5, #0]
 8014d9a:	291d      	cmp	r1, #29
 8014d9c:	d82c      	bhi.n	8014df8 <__sflush_r+0xb8>
 8014d9e:	4a2a      	ldr	r2, [pc, #168]	; (8014e48 <__sflush_r+0x108>)
 8014da0:	40ca      	lsrs	r2, r1
 8014da2:	07d6      	lsls	r6, r2, #31
 8014da4:	d528      	bpl.n	8014df8 <__sflush_r+0xb8>
 8014da6:	2200      	movs	r2, #0
 8014da8:	6062      	str	r2, [r4, #4]
 8014daa:	04d9      	lsls	r1, r3, #19
 8014dac:	6922      	ldr	r2, [r4, #16]
 8014dae:	6022      	str	r2, [r4, #0]
 8014db0:	d504      	bpl.n	8014dbc <__sflush_r+0x7c>
 8014db2:	1c42      	adds	r2, r0, #1
 8014db4:	d101      	bne.n	8014dba <__sflush_r+0x7a>
 8014db6:	682b      	ldr	r3, [r5, #0]
 8014db8:	b903      	cbnz	r3, 8014dbc <__sflush_r+0x7c>
 8014dba:	6560      	str	r0, [r4, #84]	; 0x54
 8014dbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014dbe:	602f      	str	r7, [r5, #0]
 8014dc0:	2900      	cmp	r1, #0
 8014dc2:	d0ca      	beq.n	8014d5a <__sflush_r+0x1a>
 8014dc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014dc8:	4299      	cmp	r1, r3
 8014dca:	d002      	beq.n	8014dd2 <__sflush_r+0x92>
 8014dcc:	4628      	mov	r0, r5
 8014dce:	f000 fd8f 	bl	80158f0 <_free_r>
 8014dd2:	2000      	movs	r0, #0
 8014dd4:	6360      	str	r0, [r4, #52]	; 0x34
 8014dd6:	e7c1      	b.n	8014d5c <__sflush_r+0x1c>
 8014dd8:	6a21      	ldr	r1, [r4, #32]
 8014dda:	2301      	movs	r3, #1
 8014ddc:	4628      	mov	r0, r5
 8014dde:	47b0      	blx	r6
 8014de0:	1c41      	adds	r1, r0, #1
 8014de2:	d1c7      	bne.n	8014d74 <__sflush_r+0x34>
 8014de4:	682b      	ldr	r3, [r5, #0]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d0c4      	beq.n	8014d74 <__sflush_r+0x34>
 8014dea:	2b1d      	cmp	r3, #29
 8014dec:	d001      	beq.n	8014df2 <__sflush_r+0xb2>
 8014dee:	2b16      	cmp	r3, #22
 8014df0:	d101      	bne.n	8014df6 <__sflush_r+0xb6>
 8014df2:	602f      	str	r7, [r5, #0]
 8014df4:	e7b1      	b.n	8014d5a <__sflush_r+0x1a>
 8014df6:	89a3      	ldrh	r3, [r4, #12]
 8014df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014dfc:	81a3      	strh	r3, [r4, #12]
 8014dfe:	e7ad      	b.n	8014d5c <__sflush_r+0x1c>
 8014e00:	690f      	ldr	r7, [r1, #16]
 8014e02:	2f00      	cmp	r7, #0
 8014e04:	d0a9      	beq.n	8014d5a <__sflush_r+0x1a>
 8014e06:	0793      	lsls	r3, r2, #30
 8014e08:	680e      	ldr	r6, [r1, #0]
 8014e0a:	bf08      	it	eq
 8014e0c:	694b      	ldreq	r3, [r1, #20]
 8014e0e:	600f      	str	r7, [r1, #0]
 8014e10:	bf18      	it	ne
 8014e12:	2300      	movne	r3, #0
 8014e14:	eba6 0807 	sub.w	r8, r6, r7
 8014e18:	608b      	str	r3, [r1, #8]
 8014e1a:	f1b8 0f00 	cmp.w	r8, #0
 8014e1e:	dd9c      	ble.n	8014d5a <__sflush_r+0x1a>
 8014e20:	6a21      	ldr	r1, [r4, #32]
 8014e22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014e24:	4643      	mov	r3, r8
 8014e26:	463a      	mov	r2, r7
 8014e28:	4628      	mov	r0, r5
 8014e2a:	47b0      	blx	r6
 8014e2c:	2800      	cmp	r0, #0
 8014e2e:	dc06      	bgt.n	8014e3e <__sflush_r+0xfe>
 8014e30:	89a3      	ldrh	r3, [r4, #12]
 8014e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e36:	81a3      	strh	r3, [r4, #12]
 8014e38:	f04f 30ff 	mov.w	r0, #4294967295
 8014e3c:	e78e      	b.n	8014d5c <__sflush_r+0x1c>
 8014e3e:	4407      	add	r7, r0
 8014e40:	eba8 0800 	sub.w	r8, r8, r0
 8014e44:	e7e9      	b.n	8014e1a <__sflush_r+0xda>
 8014e46:	bf00      	nop
 8014e48:	20400001 	.word	0x20400001

08014e4c <_fflush_r>:
 8014e4c:	b538      	push	{r3, r4, r5, lr}
 8014e4e:	690b      	ldr	r3, [r1, #16]
 8014e50:	4605      	mov	r5, r0
 8014e52:	460c      	mov	r4, r1
 8014e54:	b913      	cbnz	r3, 8014e5c <_fflush_r+0x10>
 8014e56:	2500      	movs	r5, #0
 8014e58:	4628      	mov	r0, r5
 8014e5a:	bd38      	pop	{r3, r4, r5, pc}
 8014e5c:	b118      	cbz	r0, 8014e66 <_fflush_r+0x1a>
 8014e5e:	6983      	ldr	r3, [r0, #24]
 8014e60:	b90b      	cbnz	r3, 8014e66 <_fflush_r+0x1a>
 8014e62:	f000 f887 	bl	8014f74 <__sinit>
 8014e66:	4b14      	ldr	r3, [pc, #80]	; (8014eb8 <_fflush_r+0x6c>)
 8014e68:	429c      	cmp	r4, r3
 8014e6a:	d11b      	bne.n	8014ea4 <_fflush_r+0x58>
 8014e6c:	686c      	ldr	r4, [r5, #4]
 8014e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d0ef      	beq.n	8014e56 <_fflush_r+0xa>
 8014e76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014e78:	07d0      	lsls	r0, r2, #31
 8014e7a:	d404      	bmi.n	8014e86 <_fflush_r+0x3a>
 8014e7c:	0599      	lsls	r1, r3, #22
 8014e7e:	d402      	bmi.n	8014e86 <_fflush_r+0x3a>
 8014e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014e82:	f000 f915 	bl	80150b0 <__retarget_lock_acquire_recursive>
 8014e86:	4628      	mov	r0, r5
 8014e88:	4621      	mov	r1, r4
 8014e8a:	f7ff ff59 	bl	8014d40 <__sflush_r>
 8014e8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014e90:	07da      	lsls	r2, r3, #31
 8014e92:	4605      	mov	r5, r0
 8014e94:	d4e0      	bmi.n	8014e58 <_fflush_r+0xc>
 8014e96:	89a3      	ldrh	r3, [r4, #12]
 8014e98:	059b      	lsls	r3, r3, #22
 8014e9a:	d4dd      	bmi.n	8014e58 <_fflush_r+0xc>
 8014e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014e9e:	f000 f908 	bl	80150b2 <__retarget_lock_release_recursive>
 8014ea2:	e7d9      	b.n	8014e58 <_fflush_r+0xc>
 8014ea4:	4b05      	ldr	r3, [pc, #20]	; (8014ebc <_fflush_r+0x70>)
 8014ea6:	429c      	cmp	r4, r3
 8014ea8:	d101      	bne.n	8014eae <_fflush_r+0x62>
 8014eaa:	68ac      	ldr	r4, [r5, #8]
 8014eac:	e7df      	b.n	8014e6e <_fflush_r+0x22>
 8014eae:	4b04      	ldr	r3, [pc, #16]	; (8014ec0 <_fflush_r+0x74>)
 8014eb0:	429c      	cmp	r4, r3
 8014eb2:	bf08      	it	eq
 8014eb4:	68ec      	ldreq	r4, [r5, #12]
 8014eb6:	e7da      	b.n	8014e6e <_fflush_r+0x22>
 8014eb8:	08017ae8 	.word	0x08017ae8
 8014ebc:	08017b08 	.word	0x08017b08
 8014ec0:	08017ac8 	.word	0x08017ac8

08014ec4 <std>:
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	b510      	push	{r4, lr}
 8014ec8:	4604      	mov	r4, r0
 8014eca:	e9c0 3300 	strd	r3, r3, [r0]
 8014ece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014ed2:	6083      	str	r3, [r0, #8]
 8014ed4:	8181      	strh	r1, [r0, #12]
 8014ed6:	6643      	str	r3, [r0, #100]	; 0x64
 8014ed8:	81c2      	strh	r2, [r0, #14]
 8014eda:	6183      	str	r3, [r0, #24]
 8014edc:	4619      	mov	r1, r3
 8014ede:	2208      	movs	r2, #8
 8014ee0:	305c      	adds	r0, #92	; 0x5c
 8014ee2:	f7ff fa39 	bl	8014358 <memset>
 8014ee6:	4b05      	ldr	r3, [pc, #20]	; (8014efc <std+0x38>)
 8014ee8:	6263      	str	r3, [r4, #36]	; 0x24
 8014eea:	4b05      	ldr	r3, [pc, #20]	; (8014f00 <std+0x3c>)
 8014eec:	62a3      	str	r3, [r4, #40]	; 0x28
 8014eee:	4b05      	ldr	r3, [pc, #20]	; (8014f04 <std+0x40>)
 8014ef0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014ef2:	4b05      	ldr	r3, [pc, #20]	; (8014f08 <std+0x44>)
 8014ef4:	6224      	str	r4, [r4, #32]
 8014ef6:	6323      	str	r3, [r4, #48]	; 0x30
 8014ef8:	bd10      	pop	{r4, pc}
 8014efa:	bf00      	nop
 8014efc:	08015b59 	.word	0x08015b59
 8014f00:	08015b7b 	.word	0x08015b7b
 8014f04:	08015bb3 	.word	0x08015bb3
 8014f08:	08015bd7 	.word	0x08015bd7

08014f0c <_cleanup_r>:
 8014f0c:	4901      	ldr	r1, [pc, #4]	; (8014f14 <_cleanup_r+0x8>)
 8014f0e:	f000 b8af 	b.w	8015070 <_fwalk_reent>
 8014f12:	bf00      	nop
 8014f14:	08014e4d 	.word	0x08014e4d

08014f18 <__sfmoreglue>:
 8014f18:	b570      	push	{r4, r5, r6, lr}
 8014f1a:	2268      	movs	r2, #104	; 0x68
 8014f1c:	1e4d      	subs	r5, r1, #1
 8014f1e:	4355      	muls	r5, r2
 8014f20:	460e      	mov	r6, r1
 8014f22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014f26:	f000 fd4f 	bl	80159c8 <_malloc_r>
 8014f2a:	4604      	mov	r4, r0
 8014f2c:	b140      	cbz	r0, 8014f40 <__sfmoreglue+0x28>
 8014f2e:	2100      	movs	r1, #0
 8014f30:	e9c0 1600 	strd	r1, r6, [r0]
 8014f34:	300c      	adds	r0, #12
 8014f36:	60a0      	str	r0, [r4, #8]
 8014f38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014f3c:	f7ff fa0c 	bl	8014358 <memset>
 8014f40:	4620      	mov	r0, r4
 8014f42:	bd70      	pop	{r4, r5, r6, pc}

08014f44 <__sfp_lock_acquire>:
 8014f44:	4801      	ldr	r0, [pc, #4]	; (8014f4c <__sfp_lock_acquire+0x8>)
 8014f46:	f000 b8b3 	b.w	80150b0 <__retarget_lock_acquire_recursive>
 8014f4a:	bf00      	nop
 8014f4c:	2000286d 	.word	0x2000286d

08014f50 <__sfp_lock_release>:
 8014f50:	4801      	ldr	r0, [pc, #4]	; (8014f58 <__sfp_lock_release+0x8>)
 8014f52:	f000 b8ae 	b.w	80150b2 <__retarget_lock_release_recursive>
 8014f56:	bf00      	nop
 8014f58:	2000286d 	.word	0x2000286d

08014f5c <__sinit_lock_acquire>:
 8014f5c:	4801      	ldr	r0, [pc, #4]	; (8014f64 <__sinit_lock_acquire+0x8>)
 8014f5e:	f000 b8a7 	b.w	80150b0 <__retarget_lock_acquire_recursive>
 8014f62:	bf00      	nop
 8014f64:	2000286e 	.word	0x2000286e

08014f68 <__sinit_lock_release>:
 8014f68:	4801      	ldr	r0, [pc, #4]	; (8014f70 <__sinit_lock_release+0x8>)
 8014f6a:	f000 b8a2 	b.w	80150b2 <__retarget_lock_release_recursive>
 8014f6e:	bf00      	nop
 8014f70:	2000286e 	.word	0x2000286e

08014f74 <__sinit>:
 8014f74:	b510      	push	{r4, lr}
 8014f76:	4604      	mov	r4, r0
 8014f78:	f7ff fff0 	bl	8014f5c <__sinit_lock_acquire>
 8014f7c:	69a3      	ldr	r3, [r4, #24]
 8014f7e:	b11b      	cbz	r3, 8014f88 <__sinit+0x14>
 8014f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f84:	f7ff bff0 	b.w	8014f68 <__sinit_lock_release>
 8014f88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014f8c:	6523      	str	r3, [r4, #80]	; 0x50
 8014f8e:	4b13      	ldr	r3, [pc, #76]	; (8014fdc <__sinit+0x68>)
 8014f90:	4a13      	ldr	r2, [pc, #76]	; (8014fe0 <__sinit+0x6c>)
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	62a2      	str	r2, [r4, #40]	; 0x28
 8014f96:	42a3      	cmp	r3, r4
 8014f98:	bf04      	itt	eq
 8014f9a:	2301      	moveq	r3, #1
 8014f9c:	61a3      	streq	r3, [r4, #24]
 8014f9e:	4620      	mov	r0, r4
 8014fa0:	f000 f820 	bl	8014fe4 <__sfp>
 8014fa4:	6060      	str	r0, [r4, #4]
 8014fa6:	4620      	mov	r0, r4
 8014fa8:	f000 f81c 	bl	8014fe4 <__sfp>
 8014fac:	60a0      	str	r0, [r4, #8]
 8014fae:	4620      	mov	r0, r4
 8014fb0:	f000 f818 	bl	8014fe4 <__sfp>
 8014fb4:	2200      	movs	r2, #0
 8014fb6:	60e0      	str	r0, [r4, #12]
 8014fb8:	2104      	movs	r1, #4
 8014fba:	6860      	ldr	r0, [r4, #4]
 8014fbc:	f7ff ff82 	bl	8014ec4 <std>
 8014fc0:	68a0      	ldr	r0, [r4, #8]
 8014fc2:	2201      	movs	r2, #1
 8014fc4:	2109      	movs	r1, #9
 8014fc6:	f7ff ff7d 	bl	8014ec4 <std>
 8014fca:	68e0      	ldr	r0, [r4, #12]
 8014fcc:	2202      	movs	r2, #2
 8014fce:	2112      	movs	r1, #18
 8014fd0:	f7ff ff78 	bl	8014ec4 <std>
 8014fd4:	2301      	movs	r3, #1
 8014fd6:	61a3      	str	r3, [r4, #24]
 8014fd8:	e7d2      	b.n	8014f80 <__sinit+0xc>
 8014fda:	bf00      	nop
 8014fdc:	08017a90 	.word	0x08017a90
 8014fe0:	08014f0d 	.word	0x08014f0d

08014fe4 <__sfp>:
 8014fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fe6:	4607      	mov	r7, r0
 8014fe8:	f7ff ffac 	bl	8014f44 <__sfp_lock_acquire>
 8014fec:	4b1e      	ldr	r3, [pc, #120]	; (8015068 <__sfp+0x84>)
 8014fee:	681e      	ldr	r6, [r3, #0]
 8014ff0:	69b3      	ldr	r3, [r6, #24]
 8014ff2:	b913      	cbnz	r3, 8014ffa <__sfp+0x16>
 8014ff4:	4630      	mov	r0, r6
 8014ff6:	f7ff ffbd 	bl	8014f74 <__sinit>
 8014ffa:	3648      	adds	r6, #72	; 0x48
 8014ffc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015000:	3b01      	subs	r3, #1
 8015002:	d503      	bpl.n	801500c <__sfp+0x28>
 8015004:	6833      	ldr	r3, [r6, #0]
 8015006:	b30b      	cbz	r3, 801504c <__sfp+0x68>
 8015008:	6836      	ldr	r6, [r6, #0]
 801500a:	e7f7      	b.n	8014ffc <__sfp+0x18>
 801500c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015010:	b9d5      	cbnz	r5, 8015048 <__sfp+0x64>
 8015012:	4b16      	ldr	r3, [pc, #88]	; (801506c <__sfp+0x88>)
 8015014:	60e3      	str	r3, [r4, #12]
 8015016:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801501a:	6665      	str	r5, [r4, #100]	; 0x64
 801501c:	f000 f847 	bl	80150ae <__retarget_lock_init_recursive>
 8015020:	f7ff ff96 	bl	8014f50 <__sfp_lock_release>
 8015024:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015028:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801502c:	6025      	str	r5, [r4, #0]
 801502e:	61a5      	str	r5, [r4, #24]
 8015030:	2208      	movs	r2, #8
 8015032:	4629      	mov	r1, r5
 8015034:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015038:	f7ff f98e 	bl	8014358 <memset>
 801503c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015040:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015044:	4620      	mov	r0, r4
 8015046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015048:	3468      	adds	r4, #104	; 0x68
 801504a:	e7d9      	b.n	8015000 <__sfp+0x1c>
 801504c:	2104      	movs	r1, #4
 801504e:	4638      	mov	r0, r7
 8015050:	f7ff ff62 	bl	8014f18 <__sfmoreglue>
 8015054:	4604      	mov	r4, r0
 8015056:	6030      	str	r0, [r6, #0]
 8015058:	2800      	cmp	r0, #0
 801505a:	d1d5      	bne.n	8015008 <__sfp+0x24>
 801505c:	f7ff ff78 	bl	8014f50 <__sfp_lock_release>
 8015060:	230c      	movs	r3, #12
 8015062:	603b      	str	r3, [r7, #0]
 8015064:	e7ee      	b.n	8015044 <__sfp+0x60>
 8015066:	bf00      	nop
 8015068:	08017a90 	.word	0x08017a90
 801506c:	ffff0001 	.word	0xffff0001

08015070 <_fwalk_reent>:
 8015070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015074:	4606      	mov	r6, r0
 8015076:	4688      	mov	r8, r1
 8015078:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801507c:	2700      	movs	r7, #0
 801507e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015082:	f1b9 0901 	subs.w	r9, r9, #1
 8015086:	d505      	bpl.n	8015094 <_fwalk_reent+0x24>
 8015088:	6824      	ldr	r4, [r4, #0]
 801508a:	2c00      	cmp	r4, #0
 801508c:	d1f7      	bne.n	801507e <_fwalk_reent+0xe>
 801508e:	4638      	mov	r0, r7
 8015090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015094:	89ab      	ldrh	r3, [r5, #12]
 8015096:	2b01      	cmp	r3, #1
 8015098:	d907      	bls.n	80150aa <_fwalk_reent+0x3a>
 801509a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801509e:	3301      	adds	r3, #1
 80150a0:	d003      	beq.n	80150aa <_fwalk_reent+0x3a>
 80150a2:	4629      	mov	r1, r5
 80150a4:	4630      	mov	r0, r6
 80150a6:	47c0      	blx	r8
 80150a8:	4307      	orrs	r7, r0
 80150aa:	3568      	adds	r5, #104	; 0x68
 80150ac:	e7e9      	b.n	8015082 <_fwalk_reent+0x12>

080150ae <__retarget_lock_init_recursive>:
 80150ae:	4770      	bx	lr

080150b0 <__retarget_lock_acquire_recursive>:
 80150b0:	4770      	bx	lr

080150b2 <__retarget_lock_release_recursive>:
 80150b2:	4770      	bx	lr

080150b4 <__swhatbuf_r>:
 80150b4:	b570      	push	{r4, r5, r6, lr}
 80150b6:	460e      	mov	r6, r1
 80150b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150bc:	2900      	cmp	r1, #0
 80150be:	b096      	sub	sp, #88	; 0x58
 80150c0:	4614      	mov	r4, r2
 80150c2:	461d      	mov	r5, r3
 80150c4:	da08      	bge.n	80150d8 <__swhatbuf_r+0x24>
 80150c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80150ca:	2200      	movs	r2, #0
 80150cc:	602a      	str	r2, [r5, #0]
 80150ce:	061a      	lsls	r2, r3, #24
 80150d0:	d410      	bmi.n	80150f4 <__swhatbuf_r+0x40>
 80150d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80150d6:	e00e      	b.n	80150f6 <__swhatbuf_r+0x42>
 80150d8:	466a      	mov	r2, sp
 80150da:	f001 fc27 	bl	801692c <_fstat_r>
 80150de:	2800      	cmp	r0, #0
 80150e0:	dbf1      	blt.n	80150c6 <__swhatbuf_r+0x12>
 80150e2:	9a01      	ldr	r2, [sp, #4]
 80150e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80150e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80150ec:	425a      	negs	r2, r3
 80150ee:	415a      	adcs	r2, r3
 80150f0:	602a      	str	r2, [r5, #0]
 80150f2:	e7ee      	b.n	80150d2 <__swhatbuf_r+0x1e>
 80150f4:	2340      	movs	r3, #64	; 0x40
 80150f6:	2000      	movs	r0, #0
 80150f8:	6023      	str	r3, [r4, #0]
 80150fa:	b016      	add	sp, #88	; 0x58
 80150fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08015100 <__smakebuf_r>:
 8015100:	898b      	ldrh	r3, [r1, #12]
 8015102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015104:	079d      	lsls	r5, r3, #30
 8015106:	4606      	mov	r6, r0
 8015108:	460c      	mov	r4, r1
 801510a:	d507      	bpl.n	801511c <__smakebuf_r+0x1c>
 801510c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015110:	6023      	str	r3, [r4, #0]
 8015112:	6123      	str	r3, [r4, #16]
 8015114:	2301      	movs	r3, #1
 8015116:	6163      	str	r3, [r4, #20]
 8015118:	b002      	add	sp, #8
 801511a:	bd70      	pop	{r4, r5, r6, pc}
 801511c:	ab01      	add	r3, sp, #4
 801511e:	466a      	mov	r2, sp
 8015120:	f7ff ffc8 	bl	80150b4 <__swhatbuf_r>
 8015124:	9900      	ldr	r1, [sp, #0]
 8015126:	4605      	mov	r5, r0
 8015128:	4630      	mov	r0, r6
 801512a:	f000 fc4d 	bl	80159c8 <_malloc_r>
 801512e:	b948      	cbnz	r0, 8015144 <__smakebuf_r+0x44>
 8015130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015134:	059a      	lsls	r2, r3, #22
 8015136:	d4ef      	bmi.n	8015118 <__smakebuf_r+0x18>
 8015138:	f023 0303 	bic.w	r3, r3, #3
 801513c:	f043 0302 	orr.w	r3, r3, #2
 8015140:	81a3      	strh	r3, [r4, #12]
 8015142:	e7e3      	b.n	801510c <__smakebuf_r+0xc>
 8015144:	4b0d      	ldr	r3, [pc, #52]	; (801517c <__smakebuf_r+0x7c>)
 8015146:	62b3      	str	r3, [r6, #40]	; 0x28
 8015148:	89a3      	ldrh	r3, [r4, #12]
 801514a:	6020      	str	r0, [r4, #0]
 801514c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015150:	81a3      	strh	r3, [r4, #12]
 8015152:	9b00      	ldr	r3, [sp, #0]
 8015154:	6163      	str	r3, [r4, #20]
 8015156:	9b01      	ldr	r3, [sp, #4]
 8015158:	6120      	str	r0, [r4, #16]
 801515a:	b15b      	cbz	r3, 8015174 <__smakebuf_r+0x74>
 801515c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015160:	4630      	mov	r0, r6
 8015162:	f001 fbf5 	bl	8016950 <_isatty_r>
 8015166:	b128      	cbz	r0, 8015174 <__smakebuf_r+0x74>
 8015168:	89a3      	ldrh	r3, [r4, #12]
 801516a:	f023 0303 	bic.w	r3, r3, #3
 801516e:	f043 0301 	orr.w	r3, r3, #1
 8015172:	81a3      	strh	r3, [r4, #12]
 8015174:	89a0      	ldrh	r0, [r4, #12]
 8015176:	4305      	orrs	r5, r0
 8015178:	81a5      	strh	r5, [r4, #12]
 801517a:	e7cd      	b.n	8015118 <__smakebuf_r+0x18>
 801517c:	08014f0d 	.word	0x08014f0d

08015180 <_Balloc>:
 8015180:	b570      	push	{r4, r5, r6, lr}
 8015182:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015184:	4604      	mov	r4, r0
 8015186:	460d      	mov	r5, r1
 8015188:	b976      	cbnz	r6, 80151a8 <_Balloc+0x28>
 801518a:	2010      	movs	r0, #16
 801518c:	f001 fc02 	bl	8016994 <malloc>
 8015190:	4602      	mov	r2, r0
 8015192:	6260      	str	r0, [r4, #36]	; 0x24
 8015194:	b920      	cbnz	r0, 80151a0 <_Balloc+0x20>
 8015196:	4b18      	ldr	r3, [pc, #96]	; (80151f8 <_Balloc+0x78>)
 8015198:	4818      	ldr	r0, [pc, #96]	; (80151fc <_Balloc+0x7c>)
 801519a:	2166      	movs	r1, #102	; 0x66
 801519c:	f7ff f850 	bl	8014240 <__assert_func>
 80151a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80151a4:	6006      	str	r6, [r0, #0]
 80151a6:	60c6      	str	r6, [r0, #12]
 80151a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80151aa:	68f3      	ldr	r3, [r6, #12]
 80151ac:	b183      	cbz	r3, 80151d0 <_Balloc+0x50>
 80151ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80151b0:	68db      	ldr	r3, [r3, #12]
 80151b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80151b6:	b9b8      	cbnz	r0, 80151e8 <_Balloc+0x68>
 80151b8:	2101      	movs	r1, #1
 80151ba:	fa01 f605 	lsl.w	r6, r1, r5
 80151be:	1d72      	adds	r2, r6, #5
 80151c0:	0092      	lsls	r2, r2, #2
 80151c2:	4620      	mov	r0, r4
 80151c4:	f000 fb7e 	bl	80158c4 <_calloc_r>
 80151c8:	b160      	cbz	r0, 80151e4 <_Balloc+0x64>
 80151ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80151ce:	e00e      	b.n	80151ee <_Balloc+0x6e>
 80151d0:	2221      	movs	r2, #33	; 0x21
 80151d2:	2104      	movs	r1, #4
 80151d4:	4620      	mov	r0, r4
 80151d6:	f000 fb75 	bl	80158c4 <_calloc_r>
 80151da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80151dc:	60f0      	str	r0, [r6, #12]
 80151de:	68db      	ldr	r3, [r3, #12]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d1e4      	bne.n	80151ae <_Balloc+0x2e>
 80151e4:	2000      	movs	r0, #0
 80151e6:	bd70      	pop	{r4, r5, r6, pc}
 80151e8:	6802      	ldr	r2, [r0, #0]
 80151ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80151ee:	2300      	movs	r3, #0
 80151f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80151f4:	e7f7      	b.n	80151e6 <_Balloc+0x66>
 80151f6:	bf00      	nop
 80151f8:	08017b28 	.word	0x08017b28
 80151fc:	08017b3f 	.word	0x08017b3f

08015200 <_Bfree>:
 8015200:	b570      	push	{r4, r5, r6, lr}
 8015202:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015204:	4605      	mov	r5, r0
 8015206:	460c      	mov	r4, r1
 8015208:	b976      	cbnz	r6, 8015228 <_Bfree+0x28>
 801520a:	2010      	movs	r0, #16
 801520c:	f001 fbc2 	bl	8016994 <malloc>
 8015210:	4602      	mov	r2, r0
 8015212:	6268      	str	r0, [r5, #36]	; 0x24
 8015214:	b920      	cbnz	r0, 8015220 <_Bfree+0x20>
 8015216:	4b09      	ldr	r3, [pc, #36]	; (801523c <_Bfree+0x3c>)
 8015218:	4809      	ldr	r0, [pc, #36]	; (8015240 <_Bfree+0x40>)
 801521a:	218a      	movs	r1, #138	; 0x8a
 801521c:	f7ff f810 	bl	8014240 <__assert_func>
 8015220:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015224:	6006      	str	r6, [r0, #0]
 8015226:	60c6      	str	r6, [r0, #12]
 8015228:	b13c      	cbz	r4, 801523a <_Bfree+0x3a>
 801522a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801522c:	6862      	ldr	r2, [r4, #4]
 801522e:	68db      	ldr	r3, [r3, #12]
 8015230:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015234:	6021      	str	r1, [r4, #0]
 8015236:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801523a:	bd70      	pop	{r4, r5, r6, pc}
 801523c:	08017b28 	.word	0x08017b28
 8015240:	08017b3f 	.word	0x08017b3f

08015244 <__multadd>:
 8015244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015248:	690d      	ldr	r5, [r1, #16]
 801524a:	4607      	mov	r7, r0
 801524c:	460c      	mov	r4, r1
 801524e:	461e      	mov	r6, r3
 8015250:	f101 0c14 	add.w	ip, r1, #20
 8015254:	2000      	movs	r0, #0
 8015256:	f8dc 3000 	ldr.w	r3, [ip]
 801525a:	b299      	uxth	r1, r3
 801525c:	fb02 6101 	mla	r1, r2, r1, r6
 8015260:	0c1e      	lsrs	r6, r3, #16
 8015262:	0c0b      	lsrs	r3, r1, #16
 8015264:	fb02 3306 	mla	r3, r2, r6, r3
 8015268:	b289      	uxth	r1, r1
 801526a:	3001      	adds	r0, #1
 801526c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015270:	4285      	cmp	r5, r0
 8015272:	f84c 1b04 	str.w	r1, [ip], #4
 8015276:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801527a:	dcec      	bgt.n	8015256 <__multadd+0x12>
 801527c:	b30e      	cbz	r6, 80152c2 <__multadd+0x7e>
 801527e:	68a3      	ldr	r3, [r4, #8]
 8015280:	42ab      	cmp	r3, r5
 8015282:	dc19      	bgt.n	80152b8 <__multadd+0x74>
 8015284:	6861      	ldr	r1, [r4, #4]
 8015286:	4638      	mov	r0, r7
 8015288:	3101      	adds	r1, #1
 801528a:	f7ff ff79 	bl	8015180 <_Balloc>
 801528e:	4680      	mov	r8, r0
 8015290:	b928      	cbnz	r0, 801529e <__multadd+0x5a>
 8015292:	4602      	mov	r2, r0
 8015294:	4b0c      	ldr	r3, [pc, #48]	; (80152c8 <__multadd+0x84>)
 8015296:	480d      	ldr	r0, [pc, #52]	; (80152cc <__multadd+0x88>)
 8015298:	21b5      	movs	r1, #181	; 0xb5
 801529a:	f7fe ffd1 	bl	8014240 <__assert_func>
 801529e:	6922      	ldr	r2, [r4, #16]
 80152a0:	3202      	adds	r2, #2
 80152a2:	f104 010c 	add.w	r1, r4, #12
 80152a6:	0092      	lsls	r2, r2, #2
 80152a8:	300c      	adds	r0, #12
 80152aa:	f7ff f847 	bl	801433c <memcpy>
 80152ae:	4621      	mov	r1, r4
 80152b0:	4638      	mov	r0, r7
 80152b2:	f7ff ffa5 	bl	8015200 <_Bfree>
 80152b6:	4644      	mov	r4, r8
 80152b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80152bc:	3501      	adds	r5, #1
 80152be:	615e      	str	r6, [r3, #20]
 80152c0:	6125      	str	r5, [r4, #16]
 80152c2:	4620      	mov	r0, r4
 80152c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152c8:	08017b9b 	.word	0x08017b9b
 80152cc:	08017b3f 	.word	0x08017b3f

080152d0 <__hi0bits>:
 80152d0:	0c03      	lsrs	r3, r0, #16
 80152d2:	041b      	lsls	r3, r3, #16
 80152d4:	b9d3      	cbnz	r3, 801530c <__hi0bits+0x3c>
 80152d6:	0400      	lsls	r0, r0, #16
 80152d8:	2310      	movs	r3, #16
 80152da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80152de:	bf04      	itt	eq
 80152e0:	0200      	lsleq	r0, r0, #8
 80152e2:	3308      	addeq	r3, #8
 80152e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80152e8:	bf04      	itt	eq
 80152ea:	0100      	lsleq	r0, r0, #4
 80152ec:	3304      	addeq	r3, #4
 80152ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80152f2:	bf04      	itt	eq
 80152f4:	0080      	lsleq	r0, r0, #2
 80152f6:	3302      	addeq	r3, #2
 80152f8:	2800      	cmp	r0, #0
 80152fa:	db05      	blt.n	8015308 <__hi0bits+0x38>
 80152fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015300:	f103 0301 	add.w	r3, r3, #1
 8015304:	bf08      	it	eq
 8015306:	2320      	moveq	r3, #32
 8015308:	4618      	mov	r0, r3
 801530a:	4770      	bx	lr
 801530c:	2300      	movs	r3, #0
 801530e:	e7e4      	b.n	80152da <__hi0bits+0xa>

08015310 <__lo0bits>:
 8015310:	6803      	ldr	r3, [r0, #0]
 8015312:	f013 0207 	ands.w	r2, r3, #7
 8015316:	4601      	mov	r1, r0
 8015318:	d00b      	beq.n	8015332 <__lo0bits+0x22>
 801531a:	07da      	lsls	r2, r3, #31
 801531c:	d423      	bmi.n	8015366 <__lo0bits+0x56>
 801531e:	0798      	lsls	r0, r3, #30
 8015320:	bf49      	itett	mi
 8015322:	085b      	lsrmi	r3, r3, #1
 8015324:	089b      	lsrpl	r3, r3, #2
 8015326:	2001      	movmi	r0, #1
 8015328:	600b      	strmi	r3, [r1, #0]
 801532a:	bf5c      	itt	pl
 801532c:	600b      	strpl	r3, [r1, #0]
 801532e:	2002      	movpl	r0, #2
 8015330:	4770      	bx	lr
 8015332:	b298      	uxth	r0, r3
 8015334:	b9a8      	cbnz	r0, 8015362 <__lo0bits+0x52>
 8015336:	0c1b      	lsrs	r3, r3, #16
 8015338:	2010      	movs	r0, #16
 801533a:	b2da      	uxtb	r2, r3
 801533c:	b90a      	cbnz	r2, 8015342 <__lo0bits+0x32>
 801533e:	3008      	adds	r0, #8
 8015340:	0a1b      	lsrs	r3, r3, #8
 8015342:	071a      	lsls	r2, r3, #28
 8015344:	bf04      	itt	eq
 8015346:	091b      	lsreq	r3, r3, #4
 8015348:	3004      	addeq	r0, #4
 801534a:	079a      	lsls	r2, r3, #30
 801534c:	bf04      	itt	eq
 801534e:	089b      	lsreq	r3, r3, #2
 8015350:	3002      	addeq	r0, #2
 8015352:	07da      	lsls	r2, r3, #31
 8015354:	d403      	bmi.n	801535e <__lo0bits+0x4e>
 8015356:	085b      	lsrs	r3, r3, #1
 8015358:	f100 0001 	add.w	r0, r0, #1
 801535c:	d005      	beq.n	801536a <__lo0bits+0x5a>
 801535e:	600b      	str	r3, [r1, #0]
 8015360:	4770      	bx	lr
 8015362:	4610      	mov	r0, r2
 8015364:	e7e9      	b.n	801533a <__lo0bits+0x2a>
 8015366:	2000      	movs	r0, #0
 8015368:	4770      	bx	lr
 801536a:	2020      	movs	r0, #32
 801536c:	4770      	bx	lr
	...

08015370 <__i2b>:
 8015370:	b510      	push	{r4, lr}
 8015372:	460c      	mov	r4, r1
 8015374:	2101      	movs	r1, #1
 8015376:	f7ff ff03 	bl	8015180 <_Balloc>
 801537a:	4602      	mov	r2, r0
 801537c:	b928      	cbnz	r0, 801538a <__i2b+0x1a>
 801537e:	4b05      	ldr	r3, [pc, #20]	; (8015394 <__i2b+0x24>)
 8015380:	4805      	ldr	r0, [pc, #20]	; (8015398 <__i2b+0x28>)
 8015382:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015386:	f7fe ff5b 	bl	8014240 <__assert_func>
 801538a:	2301      	movs	r3, #1
 801538c:	6144      	str	r4, [r0, #20]
 801538e:	6103      	str	r3, [r0, #16]
 8015390:	bd10      	pop	{r4, pc}
 8015392:	bf00      	nop
 8015394:	08017b9b 	.word	0x08017b9b
 8015398:	08017b3f 	.word	0x08017b3f

0801539c <__multiply>:
 801539c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153a0:	4691      	mov	r9, r2
 80153a2:	690a      	ldr	r2, [r1, #16]
 80153a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80153a8:	429a      	cmp	r2, r3
 80153aa:	bfb8      	it	lt
 80153ac:	460b      	movlt	r3, r1
 80153ae:	460c      	mov	r4, r1
 80153b0:	bfbc      	itt	lt
 80153b2:	464c      	movlt	r4, r9
 80153b4:	4699      	movlt	r9, r3
 80153b6:	6927      	ldr	r7, [r4, #16]
 80153b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80153bc:	68a3      	ldr	r3, [r4, #8]
 80153be:	6861      	ldr	r1, [r4, #4]
 80153c0:	eb07 060a 	add.w	r6, r7, sl
 80153c4:	42b3      	cmp	r3, r6
 80153c6:	b085      	sub	sp, #20
 80153c8:	bfb8      	it	lt
 80153ca:	3101      	addlt	r1, #1
 80153cc:	f7ff fed8 	bl	8015180 <_Balloc>
 80153d0:	b930      	cbnz	r0, 80153e0 <__multiply+0x44>
 80153d2:	4602      	mov	r2, r0
 80153d4:	4b44      	ldr	r3, [pc, #272]	; (80154e8 <__multiply+0x14c>)
 80153d6:	4845      	ldr	r0, [pc, #276]	; (80154ec <__multiply+0x150>)
 80153d8:	f240 115d 	movw	r1, #349	; 0x15d
 80153dc:	f7fe ff30 	bl	8014240 <__assert_func>
 80153e0:	f100 0514 	add.w	r5, r0, #20
 80153e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80153e8:	462b      	mov	r3, r5
 80153ea:	2200      	movs	r2, #0
 80153ec:	4543      	cmp	r3, r8
 80153ee:	d321      	bcc.n	8015434 <__multiply+0x98>
 80153f0:	f104 0314 	add.w	r3, r4, #20
 80153f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80153f8:	f109 0314 	add.w	r3, r9, #20
 80153fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015400:	9202      	str	r2, [sp, #8]
 8015402:	1b3a      	subs	r2, r7, r4
 8015404:	3a15      	subs	r2, #21
 8015406:	f022 0203 	bic.w	r2, r2, #3
 801540a:	3204      	adds	r2, #4
 801540c:	f104 0115 	add.w	r1, r4, #21
 8015410:	428f      	cmp	r7, r1
 8015412:	bf38      	it	cc
 8015414:	2204      	movcc	r2, #4
 8015416:	9201      	str	r2, [sp, #4]
 8015418:	9a02      	ldr	r2, [sp, #8]
 801541a:	9303      	str	r3, [sp, #12]
 801541c:	429a      	cmp	r2, r3
 801541e:	d80c      	bhi.n	801543a <__multiply+0x9e>
 8015420:	2e00      	cmp	r6, #0
 8015422:	dd03      	ble.n	801542c <__multiply+0x90>
 8015424:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015428:	2b00      	cmp	r3, #0
 801542a:	d05a      	beq.n	80154e2 <__multiply+0x146>
 801542c:	6106      	str	r6, [r0, #16]
 801542e:	b005      	add	sp, #20
 8015430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015434:	f843 2b04 	str.w	r2, [r3], #4
 8015438:	e7d8      	b.n	80153ec <__multiply+0x50>
 801543a:	f8b3 a000 	ldrh.w	sl, [r3]
 801543e:	f1ba 0f00 	cmp.w	sl, #0
 8015442:	d024      	beq.n	801548e <__multiply+0xf2>
 8015444:	f104 0e14 	add.w	lr, r4, #20
 8015448:	46a9      	mov	r9, r5
 801544a:	f04f 0c00 	mov.w	ip, #0
 801544e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015452:	f8d9 1000 	ldr.w	r1, [r9]
 8015456:	fa1f fb82 	uxth.w	fp, r2
 801545a:	b289      	uxth	r1, r1
 801545c:	fb0a 110b 	mla	r1, sl, fp, r1
 8015460:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015464:	f8d9 2000 	ldr.w	r2, [r9]
 8015468:	4461      	add	r1, ip
 801546a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801546e:	fb0a c20b 	mla	r2, sl, fp, ip
 8015472:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015476:	b289      	uxth	r1, r1
 8015478:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801547c:	4577      	cmp	r7, lr
 801547e:	f849 1b04 	str.w	r1, [r9], #4
 8015482:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015486:	d8e2      	bhi.n	801544e <__multiply+0xb2>
 8015488:	9a01      	ldr	r2, [sp, #4]
 801548a:	f845 c002 	str.w	ip, [r5, r2]
 801548e:	9a03      	ldr	r2, [sp, #12]
 8015490:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015494:	3304      	adds	r3, #4
 8015496:	f1b9 0f00 	cmp.w	r9, #0
 801549a:	d020      	beq.n	80154de <__multiply+0x142>
 801549c:	6829      	ldr	r1, [r5, #0]
 801549e:	f104 0c14 	add.w	ip, r4, #20
 80154a2:	46ae      	mov	lr, r5
 80154a4:	f04f 0a00 	mov.w	sl, #0
 80154a8:	f8bc b000 	ldrh.w	fp, [ip]
 80154ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80154b0:	fb09 220b 	mla	r2, r9, fp, r2
 80154b4:	4492      	add	sl, r2
 80154b6:	b289      	uxth	r1, r1
 80154b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80154bc:	f84e 1b04 	str.w	r1, [lr], #4
 80154c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80154c4:	f8be 1000 	ldrh.w	r1, [lr]
 80154c8:	0c12      	lsrs	r2, r2, #16
 80154ca:	fb09 1102 	mla	r1, r9, r2, r1
 80154ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80154d2:	4567      	cmp	r7, ip
 80154d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80154d8:	d8e6      	bhi.n	80154a8 <__multiply+0x10c>
 80154da:	9a01      	ldr	r2, [sp, #4]
 80154dc:	50a9      	str	r1, [r5, r2]
 80154de:	3504      	adds	r5, #4
 80154e0:	e79a      	b.n	8015418 <__multiply+0x7c>
 80154e2:	3e01      	subs	r6, #1
 80154e4:	e79c      	b.n	8015420 <__multiply+0x84>
 80154e6:	bf00      	nop
 80154e8:	08017b9b 	.word	0x08017b9b
 80154ec:	08017b3f 	.word	0x08017b3f

080154f0 <__pow5mult>:
 80154f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154f4:	4615      	mov	r5, r2
 80154f6:	f012 0203 	ands.w	r2, r2, #3
 80154fa:	4606      	mov	r6, r0
 80154fc:	460f      	mov	r7, r1
 80154fe:	d007      	beq.n	8015510 <__pow5mult+0x20>
 8015500:	4c25      	ldr	r4, [pc, #148]	; (8015598 <__pow5mult+0xa8>)
 8015502:	3a01      	subs	r2, #1
 8015504:	2300      	movs	r3, #0
 8015506:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801550a:	f7ff fe9b 	bl	8015244 <__multadd>
 801550e:	4607      	mov	r7, r0
 8015510:	10ad      	asrs	r5, r5, #2
 8015512:	d03d      	beq.n	8015590 <__pow5mult+0xa0>
 8015514:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015516:	b97c      	cbnz	r4, 8015538 <__pow5mult+0x48>
 8015518:	2010      	movs	r0, #16
 801551a:	f001 fa3b 	bl	8016994 <malloc>
 801551e:	4602      	mov	r2, r0
 8015520:	6270      	str	r0, [r6, #36]	; 0x24
 8015522:	b928      	cbnz	r0, 8015530 <__pow5mult+0x40>
 8015524:	4b1d      	ldr	r3, [pc, #116]	; (801559c <__pow5mult+0xac>)
 8015526:	481e      	ldr	r0, [pc, #120]	; (80155a0 <__pow5mult+0xb0>)
 8015528:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801552c:	f7fe fe88 	bl	8014240 <__assert_func>
 8015530:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015534:	6004      	str	r4, [r0, #0]
 8015536:	60c4      	str	r4, [r0, #12]
 8015538:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801553c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015540:	b94c      	cbnz	r4, 8015556 <__pow5mult+0x66>
 8015542:	f240 2171 	movw	r1, #625	; 0x271
 8015546:	4630      	mov	r0, r6
 8015548:	f7ff ff12 	bl	8015370 <__i2b>
 801554c:	2300      	movs	r3, #0
 801554e:	f8c8 0008 	str.w	r0, [r8, #8]
 8015552:	4604      	mov	r4, r0
 8015554:	6003      	str	r3, [r0, #0]
 8015556:	f04f 0900 	mov.w	r9, #0
 801555a:	07eb      	lsls	r3, r5, #31
 801555c:	d50a      	bpl.n	8015574 <__pow5mult+0x84>
 801555e:	4639      	mov	r1, r7
 8015560:	4622      	mov	r2, r4
 8015562:	4630      	mov	r0, r6
 8015564:	f7ff ff1a 	bl	801539c <__multiply>
 8015568:	4639      	mov	r1, r7
 801556a:	4680      	mov	r8, r0
 801556c:	4630      	mov	r0, r6
 801556e:	f7ff fe47 	bl	8015200 <_Bfree>
 8015572:	4647      	mov	r7, r8
 8015574:	106d      	asrs	r5, r5, #1
 8015576:	d00b      	beq.n	8015590 <__pow5mult+0xa0>
 8015578:	6820      	ldr	r0, [r4, #0]
 801557a:	b938      	cbnz	r0, 801558c <__pow5mult+0x9c>
 801557c:	4622      	mov	r2, r4
 801557e:	4621      	mov	r1, r4
 8015580:	4630      	mov	r0, r6
 8015582:	f7ff ff0b 	bl	801539c <__multiply>
 8015586:	6020      	str	r0, [r4, #0]
 8015588:	f8c0 9000 	str.w	r9, [r0]
 801558c:	4604      	mov	r4, r0
 801558e:	e7e4      	b.n	801555a <__pow5mult+0x6a>
 8015590:	4638      	mov	r0, r7
 8015592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015596:	bf00      	nop
 8015598:	08017ca0 	.word	0x08017ca0
 801559c:	08017b28 	.word	0x08017b28
 80155a0:	08017b3f 	.word	0x08017b3f

080155a4 <__lshift>:
 80155a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155a8:	460c      	mov	r4, r1
 80155aa:	6849      	ldr	r1, [r1, #4]
 80155ac:	6923      	ldr	r3, [r4, #16]
 80155ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80155b2:	68a3      	ldr	r3, [r4, #8]
 80155b4:	4607      	mov	r7, r0
 80155b6:	4691      	mov	r9, r2
 80155b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80155bc:	f108 0601 	add.w	r6, r8, #1
 80155c0:	42b3      	cmp	r3, r6
 80155c2:	db0b      	blt.n	80155dc <__lshift+0x38>
 80155c4:	4638      	mov	r0, r7
 80155c6:	f7ff fddb 	bl	8015180 <_Balloc>
 80155ca:	4605      	mov	r5, r0
 80155cc:	b948      	cbnz	r0, 80155e2 <__lshift+0x3e>
 80155ce:	4602      	mov	r2, r0
 80155d0:	4b2a      	ldr	r3, [pc, #168]	; (801567c <__lshift+0xd8>)
 80155d2:	482b      	ldr	r0, [pc, #172]	; (8015680 <__lshift+0xdc>)
 80155d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80155d8:	f7fe fe32 	bl	8014240 <__assert_func>
 80155dc:	3101      	adds	r1, #1
 80155de:	005b      	lsls	r3, r3, #1
 80155e0:	e7ee      	b.n	80155c0 <__lshift+0x1c>
 80155e2:	2300      	movs	r3, #0
 80155e4:	f100 0114 	add.w	r1, r0, #20
 80155e8:	f100 0210 	add.w	r2, r0, #16
 80155ec:	4618      	mov	r0, r3
 80155ee:	4553      	cmp	r3, sl
 80155f0:	db37      	blt.n	8015662 <__lshift+0xbe>
 80155f2:	6920      	ldr	r0, [r4, #16]
 80155f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80155f8:	f104 0314 	add.w	r3, r4, #20
 80155fc:	f019 091f 	ands.w	r9, r9, #31
 8015600:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015604:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015608:	d02f      	beq.n	801566a <__lshift+0xc6>
 801560a:	f1c9 0e20 	rsb	lr, r9, #32
 801560e:	468a      	mov	sl, r1
 8015610:	f04f 0c00 	mov.w	ip, #0
 8015614:	681a      	ldr	r2, [r3, #0]
 8015616:	fa02 f209 	lsl.w	r2, r2, r9
 801561a:	ea42 020c 	orr.w	r2, r2, ip
 801561e:	f84a 2b04 	str.w	r2, [sl], #4
 8015622:	f853 2b04 	ldr.w	r2, [r3], #4
 8015626:	4298      	cmp	r0, r3
 8015628:	fa22 fc0e 	lsr.w	ip, r2, lr
 801562c:	d8f2      	bhi.n	8015614 <__lshift+0x70>
 801562e:	1b03      	subs	r3, r0, r4
 8015630:	3b15      	subs	r3, #21
 8015632:	f023 0303 	bic.w	r3, r3, #3
 8015636:	3304      	adds	r3, #4
 8015638:	f104 0215 	add.w	r2, r4, #21
 801563c:	4290      	cmp	r0, r2
 801563e:	bf38      	it	cc
 8015640:	2304      	movcc	r3, #4
 8015642:	f841 c003 	str.w	ip, [r1, r3]
 8015646:	f1bc 0f00 	cmp.w	ip, #0
 801564a:	d001      	beq.n	8015650 <__lshift+0xac>
 801564c:	f108 0602 	add.w	r6, r8, #2
 8015650:	3e01      	subs	r6, #1
 8015652:	4638      	mov	r0, r7
 8015654:	612e      	str	r6, [r5, #16]
 8015656:	4621      	mov	r1, r4
 8015658:	f7ff fdd2 	bl	8015200 <_Bfree>
 801565c:	4628      	mov	r0, r5
 801565e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015662:	f842 0f04 	str.w	r0, [r2, #4]!
 8015666:	3301      	adds	r3, #1
 8015668:	e7c1      	b.n	80155ee <__lshift+0x4a>
 801566a:	3904      	subs	r1, #4
 801566c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015670:	f841 2f04 	str.w	r2, [r1, #4]!
 8015674:	4298      	cmp	r0, r3
 8015676:	d8f9      	bhi.n	801566c <__lshift+0xc8>
 8015678:	e7ea      	b.n	8015650 <__lshift+0xac>
 801567a:	bf00      	nop
 801567c:	08017b9b 	.word	0x08017b9b
 8015680:	08017b3f 	.word	0x08017b3f

08015684 <__mcmp>:
 8015684:	b530      	push	{r4, r5, lr}
 8015686:	6902      	ldr	r2, [r0, #16]
 8015688:	690c      	ldr	r4, [r1, #16]
 801568a:	1b12      	subs	r2, r2, r4
 801568c:	d10e      	bne.n	80156ac <__mcmp+0x28>
 801568e:	f100 0314 	add.w	r3, r0, #20
 8015692:	3114      	adds	r1, #20
 8015694:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015698:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801569c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80156a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80156a4:	42a5      	cmp	r5, r4
 80156a6:	d003      	beq.n	80156b0 <__mcmp+0x2c>
 80156a8:	d305      	bcc.n	80156b6 <__mcmp+0x32>
 80156aa:	2201      	movs	r2, #1
 80156ac:	4610      	mov	r0, r2
 80156ae:	bd30      	pop	{r4, r5, pc}
 80156b0:	4283      	cmp	r3, r0
 80156b2:	d3f3      	bcc.n	801569c <__mcmp+0x18>
 80156b4:	e7fa      	b.n	80156ac <__mcmp+0x28>
 80156b6:	f04f 32ff 	mov.w	r2, #4294967295
 80156ba:	e7f7      	b.n	80156ac <__mcmp+0x28>

080156bc <__mdiff>:
 80156bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156c0:	460c      	mov	r4, r1
 80156c2:	4606      	mov	r6, r0
 80156c4:	4611      	mov	r1, r2
 80156c6:	4620      	mov	r0, r4
 80156c8:	4690      	mov	r8, r2
 80156ca:	f7ff ffdb 	bl	8015684 <__mcmp>
 80156ce:	1e05      	subs	r5, r0, #0
 80156d0:	d110      	bne.n	80156f4 <__mdiff+0x38>
 80156d2:	4629      	mov	r1, r5
 80156d4:	4630      	mov	r0, r6
 80156d6:	f7ff fd53 	bl	8015180 <_Balloc>
 80156da:	b930      	cbnz	r0, 80156ea <__mdiff+0x2e>
 80156dc:	4b3a      	ldr	r3, [pc, #232]	; (80157c8 <__mdiff+0x10c>)
 80156de:	4602      	mov	r2, r0
 80156e0:	f240 2132 	movw	r1, #562	; 0x232
 80156e4:	4839      	ldr	r0, [pc, #228]	; (80157cc <__mdiff+0x110>)
 80156e6:	f7fe fdab 	bl	8014240 <__assert_func>
 80156ea:	2301      	movs	r3, #1
 80156ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80156f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156f4:	bfa4      	itt	ge
 80156f6:	4643      	movge	r3, r8
 80156f8:	46a0      	movge	r8, r4
 80156fa:	4630      	mov	r0, r6
 80156fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015700:	bfa6      	itte	ge
 8015702:	461c      	movge	r4, r3
 8015704:	2500      	movge	r5, #0
 8015706:	2501      	movlt	r5, #1
 8015708:	f7ff fd3a 	bl	8015180 <_Balloc>
 801570c:	b920      	cbnz	r0, 8015718 <__mdiff+0x5c>
 801570e:	4b2e      	ldr	r3, [pc, #184]	; (80157c8 <__mdiff+0x10c>)
 8015710:	4602      	mov	r2, r0
 8015712:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015716:	e7e5      	b.n	80156e4 <__mdiff+0x28>
 8015718:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801571c:	6926      	ldr	r6, [r4, #16]
 801571e:	60c5      	str	r5, [r0, #12]
 8015720:	f104 0914 	add.w	r9, r4, #20
 8015724:	f108 0514 	add.w	r5, r8, #20
 8015728:	f100 0e14 	add.w	lr, r0, #20
 801572c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015730:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015734:	f108 0210 	add.w	r2, r8, #16
 8015738:	46f2      	mov	sl, lr
 801573a:	2100      	movs	r1, #0
 801573c:	f859 3b04 	ldr.w	r3, [r9], #4
 8015740:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015744:	fa1f f883 	uxth.w	r8, r3
 8015748:	fa11 f18b 	uxtah	r1, r1, fp
 801574c:	0c1b      	lsrs	r3, r3, #16
 801574e:	eba1 0808 	sub.w	r8, r1, r8
 8015752:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015756:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801575a:	fa1f f888 	uxth.w	r8, r8
 801575e:	1419      	asrs	r1, r3, #16
 8015760:	454e      	cmp	r6, r9
 8015762:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015766:	f84a 3b04 	str.w	r3, [sl], #4
 801576a:	d8e7      	bhi.n	801573c <__mdiff+0x80>
 801576c:	1b33      	subs	r3, r6, r4
 801576e:	3b15      	subs	r3, #21
 8015770:	f023 0303 	bic.w	r3, r3, #3
 8015774:	3304      	adds	r3, #4
 8015776:	3415      	adds	r4, #21
 8015778:	42a6      	cmp	r6, r4
 801577a:	bf38      	it	cc
 801577c:	2304      	movcc	r3, #4
 801577e:	441d      	add	r5, r3
 8015780:	4473      	add	r3, lr
 8015782:	469e      	mov	lr, r3
 8015784:	462e      	mov	r6, r5
 8015786:	4566      	cmp	r6, ip
 8015788:	d30e      	bcc.n	80157a8 <__mdiff+0xec>
 801578a:	f10c 0203 	add.w	r2, ip, #3
 801578e:	1b52      	subs	r2, r2, r5
 8015790:	f022 0203 	bic.w	r2, r2, #3
 8015794:	3d03      	subs	r5, #3
 8015796:	45ac      	cmp	ip, r5
 8015798:	bf38      	it	cc
 801579a:	2200      	movcc	r2, #0
 801579c:	441a      	add	r2, r3
 801579e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80157a2:	b17b      	cbz	r3, 80157c4 <__mdiff+0x108>
 80157a4:	6107      	str	r7, [r0, #16]
 80157a6:	e7a3      	b.n	80156f0 <__mdiff+0x34>
 80157a8:	f856 8b04 	ldr.w	r8, [r6], #4
 80157ac:	fa11 f288 	uxtah	r2, r1, r8
 80157b0:	1414      	asrs	r4, r2, #16
 80157b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80157b6:	b292      	uxth	r2, r2
 80157b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80157bc:	f84e 2b04 	str.w	r2, [lr], #4
 80157c0:	1421      	asrs	r1, r4, #16
 80157c2:	e7e0      	b.n	8015786 <__mdiff+0xca>
 80157c4:	3f01      	subs	r7, #1
 80157c6:	e7ea      	b.n	801579e <__mdiff+0xe2>
 80157c8:	08017b9b 	.word	0x08017b9b
 80157cc:	08017b3f 	.word	0x08017b3f

080157d0 <__d2b>:
 80157d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80157d4:	4689      	mov	r9, r1
 80157d6:	2101      	movs	r1, #1
 80157d8:	ec57 6b10 	vmov	r6, r7, d0
 80157dc:	4690      	mov	r8, r2
 80157de:	f7ff fccf 	bl	8015180 <_Balloc>
 80157e2:	4604      	mov	r4, r0
 80157e4:	b930      	cbnz	r0, 80157f4 <__d2b+0x24>
 80157e6:	4602      	mov	r2, r0
 80157e8:	4b25      	ldr	r3, [pc, #148]	; (8015880 <__d2b+0xb0>)
 80157ea:	4826      	ldr	r0, [pc, #152]	; (8015884 <__d2b+0xb4>)
 80157ec:	f240 310a 	movw	r1, #778	; 0x30a
 80157f0:	f7fe fd26 	bl	8014240 <__assert_func>
 80157f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80157f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80157fc:	bb35      	cbnz	r5, 801584c <__d2b+0x7c>
 80157fe:	2e00      	cmp	r6, #0
 8015800:	9301      	str	r3, [sp, #4]
 8015802:	d028      	beq.n	8015856 <__d2b+0x86>
 8015804:	4668      	mov	r0, sp
 8015806:	9600      	str	r6, [sp, #0]
 8015808:	f7ff fd82 	bl	8015310 <__lo0bits>
 801580c:	9900      	ldr	r1, [sp, #0]
 801580e:	b300      	cbz	r0, 8015852 <__d2b+0x82>
 8015810:	9a01      	ldr	r2, [sp, #4]
 8015812:	f1c0 0320 	rsb	r3, r0, #32
 8015816:	fa02 f303 	lsl.w	r3, r2, r3
 801581a:	430b      	orrs	r3, r1
 801581c:	40c2      	lsrs	r2, r0
 801581e:	6163      	str	r3, [r4, #20]
 8015820:	9201      	str	r2, [sp, #4]
 8015822:	9b01      	ldr	r3, [sp, #4]
 8015824:	61a3      	str	r3, [r4, #24]
 8015826:	2b00      	cmp	r3, #0
 8015828:	bf14      	ite	ne
 801582a:	2202      	movne	r2, #2
 801582c:	2201      	moveq	r2, #1
 801582e:	6122      	str	r2, [r4, #16]
 8015830:	b1d5      	cbz	r5, 8015868 <__d2b+0x98>
 8015832:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015836:	4405      	add	r5, r0
 8015838:	f8c9 5000 	str.w	r5, [r9]
 801583c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015840:	f8c8 0000 	str.w	r0, [r8]
 8015844:	4620      	mov	r0, r4
 8015846:	b003      	add	sp, #12
 8015848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801584c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015850:	e7d5      	b.n	80157fe <__d2b+0x2e>
 8015852:	6161      	str	r1, [r4, #20]
 8015854:	e7e5      	b.n	8015822 <__d2b+0x52>
 8015856:	a801      	add	r0, sp, #4
 8015858:	f7ff fd5a 	bl	8015310 <__lo0bits>
 801585c:	9b01      	ldr	r3, [sp, #4]
 801585e:	6163      	str	r3, [r4, #20]
 8015860:	2201      	movs	r2, #1
 8015862:	6122      	str	r2, [r4, #16]
 8015864:	3020      	adds	r0, #32
 8015866:	e7e3      	b.n	8015830 <__d2b+0x60>
 8015868:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801586c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015870:	f8c9 0000 	str.w	r0, [r9]
 8015874:	6918      	ldr	r0, [r3, #16]
 8015876:	f7ff fd2b 	bl	80152d0 <__hi0bits>
 801587a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801587e:	e7df      	b.n	8015840 <__d2b+0x70>
 8015880:	08017b9b 	.word	0x08017b9b
 8015884:	08017b3f 	.word	0x08017b3f

08015888 <_mprec_log10>:
 8015888:	2817      	cmp	r0, #23
 801588a:	b5d0      	push	{r4, r6, r7, lr}
 801588c:	4604      	mov	r4, r0
 801588e:	dc07      	bgt.n	80158a0 <_mprec_log10+0x18>
 8015890:	4809      	ldr	r0, [pc, #36]	; (80158b8 <_mprec_log10+0x30>)
 8015892:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8015896:	e9d4 0100 	ldrd	r0, r1, [r4]
 801589a:	ec41 0b10 	vmov	d0, r0, r1
 801589e:	bdd0      	pop	{r4, r6, r7, pc}
 80158a0:	4906      	ldr	r1, [pc, #24]	; (80158bc <_mprec_log10+0x34>)
 80158a2:	4f07      	ldr	r7, [pc, #28]	; (80158c0 <_mprec_log10+0x38>)
 80158a4:	2000      	movs	r0, #0
 80158a6:	2600      	movs	r6, #0
 80158a8:	4632      	mov	r2, r6
 80158aa:	463b      	mov	r3, r7
 80158ac:	f7ea fe7c 	bl	80005a8 <__aeabi_dmul>
 80158b0:	3c01      	subs	r4, #1
 80158b2:	d1f9      	bne.n	80158a8 <_mprec_log10+0x20>
 80158b4:	e7f1      	b.n	801589a <_mprec_log10+0x12>
 80158b6:	bf00      	nop
 80158b8:	08017bd8 	.word	0x08017bd8
 80158bc:	3ff00000 	.word	0x3ff00000
 80158c0:	40240000 	.word	0x40240000

080158c4 <_calloc_r>:
 80158c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80158c6:	fba1 2402 	umull	r2, r4, r1, r2
 80158ca:	b94c      	cbnz	r4, 80158e0 <_calloc_r+0x1c>
 80158cc:	4611      	mov	r1, r2
 80158ce:	9201      	str	r2, [sp, #4]
 80158d0:	f000 f87a 	bl	80159c8 <_malloc_r>
 80158d4:	9a01      	ldr	r2, [sp, #4]
 80158d6:	4605      	mov	r5, r0
 80158d8:	b930      	cbnz	r0, 80158e8 <_calloc_r+0x24>
 80158da:	4628      	mov	r0, r5
 80158dc:	b003      	add	sp, #12
 80158de:	bd30      	pop	{r4, r5, pc}
 80158e0:	220c      	movs	r2, #12
 80158e2:	6002      	str	r2, [r0, #0]
 80158e4:	2500      	movs	r5, #0
 80158e6:	e7f8      	b.n	80158da <_calloc_r+0x16>
 80158e8:	4621      	mov	r1, r4
 80158ea:	f7fe fd35 	bl	8014358 <memset>
 80158ee:	e7f4      	b.n	80158da <_calloc_r+0x16>

080158f0 <_free_r>:
 80158f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80158f2:	2900      	cmp	r1, #0
 80158f4:	d044      	beq.n	8015980 <_free_r+0x90>
 80158f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80158fa:	9001      	str	r0, [sp, #4]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	f1a1 0404 	sub.w	r4, r1, #4
 8015902:	bfb8      	it	lt
 8015904:	18e4      	addlt	r4, r4, r3
 8015906:	f001 f84d 	bl	80169a4 <__malloc_lock>
 801590a:	4a1e      	ldr	r2, [pc, #120]	; (8015984 <_free_r+0x94>)
 801590c:	9801      	ldr	r0, [sp, #4]
 801590e:	6813      	ldr	r3, [r2, #0]
 8015910:	b933      	cbnz	r3, 8015920 <_free_r+0x30>
 8015912:	6063      	str	r3, [r4, #4]
 8015914:	6014      	str	r4, [r2, #0]
 8015916:	b003      	add	sp, #12
 8015918:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801591c:	f001 b848 	b.w	80169b0 <__malloc_unlock>
 8015920:	42a3      	cmp	r3, r4
 8015922:	d908      	bls.n	8015936 <_free_r+0x46>
 8015924:	6825      	ldr	r5, [r4, #0]
 8015926:	1961      	adds	r1, r4, r5
 8015928:	428b      	cmp	r3, r1
 801592a:	bf01      	itttt	eq
 801592c:	6819      	ldreq	r1, [r3, #0]
 801592e:	685b      	ldreq	r3, [r3, #4]
 8015930:	1949      	addeq	r1, r1, r5
 8015932:	6021      	streq	r1, [r4, #0]
 8015934:	e7ed      	b.n	8015912 <_free_r+0x22>
 8015936:	461a      	mov	r2, r3
 8015938:	685b      	ldr	r3, [r3, #4]
 801593a:	b10b      	cbz	r3, 8015940 <_free_r+0x50>
 801593c:	42a3      	cmp	r3, r4
 801593e:	d9fa      	bls.n	8015936 <_free_r+0x46>
 8015940:	6811      	ldr	r1, [r2, #0]
 8015942:	1855      	adds	r5, r2, r1
 8015944:	42a5      	cmp	r5, r4
 8015946:	d10b      	bne.n	8015960 <_free_r+0x70>
 8015948:	6824      	ldr	r4, [r4, #0]
 801594a:	4421      	add	r1, r4
 801594c:	1854      	adds	r4, r2, r1
 801594e:	42a3      	cmp	r3, r4
 8015950:	6011      	str	r1, [r2, #0]
 8015952:	d1e0      	bne.n	8015916 <_free_r+0x26>
 8015954:	681c      	ldr	r4, [r3, #0]
 8015956:	685b      	ldr	r3, [r3, #4]
 8015958:	6053      	str	r3, [r2, #4]
 801595a:	4421      	add	r1, r4
 801595c:	6011      	str	r1, [r2, #0]
 801595e:	e7da      	b.n	8015916 <_free_r+0x26>
 8015960:	d902      	bls.n	8015968 <_free_r+0x78>
 8015962:	230c      	movs	r3, #12
 8015964:	6003      	str	r3, [r0, #0]
 8015966:	e7d6      	b.n	8015916 <_free_r+0x26>
 8015968:	6825      	ldr	r5, [r4, #0]
 801596a:	1961      	adds	r1, r4, r5
 801596c:	428b      	cmp	r3, r1
 801596e:	bf04      	itt	eq
 8015970:	6819      	ldreq	r1, [r3, #0]
 8015972:	685b      	ldreq	r3, [r3, #4]
 8015974:	6063      	str	r3, [r4, #4]
 8015976:	bf04      	itt	eq
 8015978:	1949      	addeq	r1, r1, r5
 801597a:	6021      	streq	r1, [r4, #0]
 801597c:	6054      	str	r4, [r2, #4]
 801597e:	e7ca      	b.n	8015916 <_free_r+0x26>
 8015980:	b003      	add	sp, #12
 8015982:	bd30      	pop	{r4, r5, pc}
 8015984:	20002870 	.word	0x20002870

08015988 <sbrk_aligned>:
 8015988:	b570      	push	{r4, r5, r6, lr}
 801598a:	4e0e      	ldr	r6, [pc, #56]	; (80159c4 <sbrk_aligned+0x3c>)
 801598c:	460c      	mov	r4, r1
 801598e:	6831      	ldr	r1, [r6, #0]
 8015990:	4605      	mov	r5, r0
 8015992:	b911      	cbnz	r1, 801599a <sbrk_aligned+0x12>
 8015994:	f000 f88c 	bl	8015ab0 <_sbrk_r>
 8015998:	6030      	str	r0, [r6, #0]
 801599a:	4621      	mov	r1, r4
 801599c:	4628      	mov	r0, r5
 801599e:	f000 f887 	bl	8015ab0 <_sbrk_r>
 80159a2:	1c43      	adds	r3, r0, #1
 80159a4:	d00a      	beq.n	80159bc <sbrk_aligned+0x34>
 80159a6:	1cc4      	adds	r4, r0, #3
 80159a8:	f024 0403 	bic.w	r4, r4, #3
 80159ac:	42a0      	cmp	r0, r4
 80159ae:	d007      	beq.n	80159c0 <sbrk_aligned+0x38>
 80159b0:	1a21      	subs	r1, r4, r0
 80159b2:	4628      	mov	r0, r5
 80159b4:	f000 f87c 	bl	8015ab0 <_sbrk_r>
 80159b8:	3001      	adds	r0, #1
 80159ba:	d101      	bne.n	80159c0 <sbrk_aligned+0x38>
 80159bc:	f04f 34ff 	mov.w	r4, #4294967295
 80159c0:	4620      	mov	r0, r4
 80159c2:	bd70      	pop	{r4, r5, r6, pc}
 80159c4:	20002874 	.word	0x20002874

080159c8 <_malloc_r>:
 80159c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159cc:	1ccd      	adds	r5, r1, #3
 80159ce:	f025 0503 	bic.w	r5, r5, #3
 80159d2:	3508      	adds	r5, #8
 80159d4:	2d0c      	cmp	r5, #12
 80159d6:	bf38      	it	cc
 80159d8:	250c      	movcc	r5, #12
 80159da:	2d00      	cmp	r5, #0
 80159dc:	4607      	mov	r7, r0
 80159de:	db01      	blt.n	80159e4 <_malloc_r+0x1c>
 80159e0:	42a9      	cmp	r1, r5
 80159e2:	d905      	bls.n	80159f0 <_malloc_r+0x28>
 80159e4:	230c      	movs	r3, #12
 80159e6:	603b      	str	r3, [r7, #0]
 80159e8:	2600      	movs	r6, #0
 80159ea:	4630      	mov	r0, r6
 80159ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159f0:	4e2e      	ldr	r6, [pc, #184]	; (8015aac <_malloc_r+0xe4>)
 80159f2:	f000 ffd7 	bl	80169a4 <__malloc_lock>
 80159f6:	6833      	ldr	r3, [r6, #0]
 80159f8:	461c      	mov	r4, r3
 80159fa:	bb34      	cbnz	r4, 8015a4a <_malloc_r+0x82>
 80159fc:	4629      	mov	r1, r5
 80159fe:	4638      	mov	r0, r7
 8015a00:	f7ff ffc2 	bl	8015988 <sbrk_aligned>
 8015a04:	1c43      	adds	r3, r0, #1
 8015a06:	4604      	mov	r4, r0
 8015a08:	d14d      	bne.n	8015aa6 <_malloc_r+0xde>
 8015a0a:	6834      	ldr	r4, [r6, #0]
 8015a0c:	4626      	mov	r6, r4
 8015a0e:	2e00      	cmp	r6, #0
 8015a10:	d140      	bne.n	8015a94 <_malloc_r+0xcc>
 8015a12:	6823      	ldr	r3, [r4, #0]
 8015a14:	4631      	mov	r1, r6
 8015a16:	4638      	mov	r0, r7
 8015a18:	eb04 0803 	add.w	r8, r4, r3
 8015a1c:	f000 f848 	bl	8015ab0 <_sbrk_r>
 8015a20:	4580      	cmp	r8, r0
 8015a22:	d13a      	bne.n	8015a9a <_malloc_r+0xd2>
 8015a24:	6821      	ldr	r1, [r4, #0]
 8015a26:	3503      	adds	r5, #3
 8015a28:	1a6d      	subs	r5, r5, r1
 8015a2a:	f025 0503 	bic.w	r5, r5, #3
 8015a2e:	3508      	adds	r5, #8
 8015a30:	2d0c      	cmp	r5, #12
 8015a32:	bf38      	it	cc
 8015a34:	250c      	movcc	r5, #12
 8015a36:	4629      	mov	r1, r5
 8015a38:	4638      	mov	r0, r7
 8015a3a:	f7ff ffa5 	bl	8015988 <sbrk_aligned>
 8015a3e:	3001      	adds	r0, #1
 8015a40:	d02b      	beq.n	8015a9a <_malloc_r+0xd2>
 8015a42:	6823      	ldr	r3, [r4, #0]
 8015a44:	442b      	add	r3, r5
 8015a46:	6023      	str	r3, [r4, #0]
 8015a48:	e00e      	b.n	8015a68 <_malloc_r+0xa0>
 8015a4a:	6822      	ldr	r2, [r4, #0]
 8015a4c:	1b52      	subs	r2, r2, r5
 8015a4e:	d41e      	bmi.n	8015a8e <_malloc_r+0xc6>
 8015a50:	2a0b      	cmp	r2, #11
 8015a52:	d916      	bls.n	8015a82 <_malloc_r+0xba>
 8015a54:	1961      	adds	r1, r4, r5
 8015a56:	42a3      	cmp	r3, r4
 8015a58:	6025      	str	r5, [r4, #0]
 8015a5a:	bf18      	it	ne
 8015a5c:	6059      	strne	r1, [r3, #4]
 8015a5e:	6863      	ldr	r3, [r4, #4]
 8015a60:	bf08      	it	eq
 8015a62:	6031      	streq	r1, [r6, #0]
 8015a64:	5162      	str	r2, [r4, r5]
 8015a66:	604b      	str	r3, [r1, #4]
 8015a68:	4638      	mov	r0, r7
 8015a6a:	f104 060b 	add.w	r6, r4, #11
 8015a6e:	f000 ff9f 	bl	80169b0 <__malloc_unlock>
 8015a72:	f026 0607 	bic.w	r6, r6, #7
 8015a76:	1d23      	adds	r3, r4, #4
 8015a78:	1af2      	subs	r2, r6, r3
 8015a7a:	d0b6      	beq.n	80159ea <_malloc_r+0x22>
 8015a7c:	1b9b      	subs	r3, r3, r6
 8015a7e:	50a3      	str	r3, [r4, r2]
 8015a80:	e7b3      	b.n	80159ea <_malloc_r+0x22>
 8015a82:	6862      	ldr	r2, [r4, #4]
 8015a84:	42a3      	cmp	r3, r4
 8015a86:	bf0c      	ite	eq
 8015a88:	6032      	streq	r2, [r6, #0]
 8015a8a:	605a      	strne	r2, [r3, #4]
 8015a8c:	e7ec      	b.n	8015a68 <_malloc_r+0xa0>
 8015a8e:	4623      	mov	r3, r4
 8015a90:	6864      	ldr	r4, [r4, #4]
 8015a92:	e7b2      	b.n	80159fa <_malloc_r+0x32>
 8015a94:	4634      	mov	r4, r6
 8015a96:	6876      	ldr	r6, [r6, #4]
 8015a98:	e7b9      	b.n	8015a0e <_malloc_r+0x46>
 8015a9a:	230c      	movs	r3, #12
 8015a9c:	603b      	str	r3, [r7, #0]
 8015a9e:	4638      	mov	r0, r7
 8015aa0:	f000 ff86 	bl	80169b0 <__malloc_unlock>
 8015aa4:	e7a1      	b.n	80159ea <_malloc_r+0x22>
 8015aa6:	6025      	str	r5, [r4, #0]
 8015aa8:	e7de      	b.n	8015a68 <_malloc_r+0xa0>
 8015aaa:	bf00      	nop
 8015aac:	20002870 	.word	0x20002870

08015ab0 <_sbrk_r>:
 8015ab0:	b538      	push	{r3, r4, r5, lr}
 8015ab2:	4d06      	ldr	r5, [pc, #24]	; (8015acc <_sbrk_r+0x1c>)
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	4604      	mov	r4, r0
 8015ab8:	4608      	mov	r0, r1
 8015aba:	602b      	str	r3, [r5, #0]
 8015abc:	f7ed f83c 	bl	8002b38 <_sbrk>
 8015ac0:	1c43      	adds	r3, r0, #1
 8015ac2:	d102      	bne.n	8015aca <_sbrk_r+0x1a>
 8015ac4:	682b      	ldr	r3, [r5, #0]
 8015ac6:	b103      	cbz	r3, 8015aca <_sbrk_r+0x1a>
 8015ac8:	6023      	str	r3, [r4, #0]
 8015aca:	bd38      	pop	{r3, r4, r5, pc}
 8015acc:	20002878 	.word	0x20002878

08015ad0 <_raise_r>:
 8015ad0:	291f      	cmp	r1, #31
 8015ad2:	b538      	push	{r3, r4, r5, lr}
 8015ad4:	4604      	mov	r4, r0
 8015ad6:	460d      	mov	r5, r1
 8015ad8:	d904      	bls.n	8015ae4 <_raise_r+0x14>
 8015ada:	2316      	movs	r3, #22
 8015adc:	6003      	str	r3, [r0, #0]
 8015ade:	f04f 30ff 	mov.w	r0, #4294967295
 8015ae2:	bd38      	pop	{r3, r4, r5, pc}
 8015ae4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015ae6:	b112      	cbz	r2, 8015aee <_raise_r+0x1e>
 8015ae8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015aec:	b94b      	cbnz	r3, 8015b02 <_raise_r+0x32>
 8015aee:	4620      	mov	r0, r4
 8015af0:	f000 f830 	bl	8015b54 <_getpid_r>
 8015af4:	462a      	mov	r2, r5
 8015af6:	4601      	mov	r1, r0
 8015af8:	4620      	mov	r0, r4
 8015afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015afe:	f000 b817 	b.w	8015b30 <_kill_r>
 8015b02:	2b01      	cmp	r3, #1
 8015b04:	d00a      	beq.n	8015b1c <_raise_r+0x4c>
 8015b06:	1c59      	adds	r1, r3, #1
 8015b08:	d103      	bne.n	8015b12 <_raise_r+0x42>
 8015b0a:	2316      	movs	r3, #22
 8015b0c:	6003      	str	r3, [r0, #0]
 8015b0e:	2001      	movs	r0, #1
 8015b10:	e7e7      	b.n	8015ae2 <_raise_r+0x12>
 8015b12:	2400      	movs	r4, #0
 8015b14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015b18:	4628      	mov	r0, r5
 8015b1a:	4798      	blx	r3
 8015b1c:	2000      	movs	r0, #0
 8015b1e:	e7e0      	b.n	8015ae2 <_raise_r+0x12>

08015b20 <raise>:
 8015b20:	4b02      	ldr	r3, [pc, #8]	; (8015b2c <raise+0xc>)
 8015b22:	4601      	mov	r1, r0
 8015b24:	6818      	ldr	r0, [r3, #0]
 8015b26:	f7ff bfd3 	b.w	8015ad0 <_raise_r>
 8015b2a:	bf00      	nop
 8015b2c:	2000016c 	.word	0x2000016c

08015b30 <_kill_r>:
 8015b30:	b538      	push	{r3, r4, r5, lr}
 8015b32:	4d07      	ldr	r5, [pc, #28]	; (8015b50 <_kill_r+0x20>)
 8015b34:	2300      	movs	r3, #0
 8015b36:	4604      	mov	r4, r0
 8015b38:	4608      	mov	r0, r1
 8015b3a:	4611      	mov	r1, r2
 8015b3c:	602b      	str	r3, [r5, #0]
 8015b3e:	f7ec ff73 	bl	8002a28 <_kill>
 8015b42:	1c43      	adds	r3, r0, #1
 8015b44:	d102      	bne.n	8015b4c <_kill_r+0x1c>
 8015b46:	682b      	ldr	r3, [r5, #0]
 8015b48:	b103      	cbz	r3, 8015b4c <_kill_r+0x1c>
 8015b4a:	6023      	str	r3, [r4, #0]
 8015b4c:	bd38      	pop	{r3, r4, r5, pc}
 8015b4e:	bf00      	nop
 8015b50:	20002878 	.word	0x20002878

08015b54 <_getpid_r>:
 8015b54:	f7ec bf60 	b.w	8002a18 <_getpid>

08015b58 <__sread>:
 8015b58:	b510      	push	{r4, lr}
 8015b5a:	460c      	mov	r4, r1
 8015b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b60:	f000 ff2c 	bl	80169bc <_read_r>
 8015b64:	2800      	cmp	r0, #0
 8015b66:	bfab      	itete	ge
 8015b68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015b6a:	89a3      	ldrhlt	r3, [r4, #12]
 8015b6c:	181b      	addge	r3, r3, r0
 8015b6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015b72:	bfac      	ite	ge
 8015b74:	6563      	strge	r3, [r4, #84]	; 0x54
 8015b76:	81a3      	strhlt	r3, [r4, #12]
 8015b78:	bd10      	pop	{r4, pc}

08015b7a <__swrite>:
 8015b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b7e:	461f      	mov	r7, r3
 8015b80:	898b      	ldrh	r3, [r1, #12]
 8015b82:	05db      	lsls	r3, r3, #23
 8015b84:	4605      	mov	r5, r0
 8015b86:	460c      	mov	r4, r1
 8015b88:	4616      	mov	r6, r2
 8015b8a:	d505      	bpl.n	8015b98 <__swrite+0x1e>
 8015b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b90:	2302      	movs	r3, #2
 8015b92:	2200      	movs	r2, #0
 8015b94:	f000 feec 	bl	8016970 <_lseek_r>
 8015b98:	89a3      	ldrh	r3, [r4, #12]
 8015b9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015ba2:	81a3      	strh	r3, [r4, #12]
 8015ba4:	4632      	mov	r2, r6
 8015ba6:	463b      	mov	r3, r7
 8015ba8:	4628      	mov	r0, r5
 8015baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015bae:	f000 b81f 	b.w	8015bf0 <_write_r>

08015bb2 <__sseek>:
 8015bb2:	b510      	push	{r4, lr}
 8015bb4:	460c      	mov	r4, r1
 8015bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bba:	f000 fed9 	bl	8016970 <_lseek_r>
 8015bbe:	1c43      	adds	r3, r0, #1
 8015bc0:	89a3      	ldrh	r3, [r4, #12]
 8015bc2:	bf15      	itete	ne
 8015bc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8015bc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015bca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015bce:	81a3      	strheq	r3, [r4, #12]
 8015bd0:	bf18      	it	ne
 8015bd2:	81a3      	strhne	r3, [r4, #12]
 8015bd4:	bd10      	pop	{r4, pc}

08015bd6 <__sclose>:
 8015bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bda:	f000 b81b 	b.w	8015c14 <_close_r>

08015bde <strcpy>:
 8015bde:	4603      	mov	r3, r0
 8015be0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015be4:	f803 2b01 	strb.w	r2, [r3], #1
 8015be8:	2a00      	cmp	r2, #0
 8015bea:	d1f9      	bne.n	8015be0 <strcpy+0x2>
 8015bec:	4770      	bx	lr
	...

08015bf0 <_write_r>:
 8015bf0:	b538      	push	{r3, r4, r5, lr}
 8015bf2:	4d07      	ldr	r5, [pc, #28]	; (8015c10 <_write_r+0x20>)
 8015bf4:	4604      	mov	r4, r0
 8015bf6:	4608      	mov	r0, r1
 8015bf8:	4611      	mov	r1, r2
 8015bfa:	2200      	movs	r2, #0
 8015bfc:	602a      	str	r2, [r5, #0]
 8015bfe:	461a      	mov	r2, r3
 8015c00:	f7ec ff49 	bl	8002a96 <_write>
 8015c04:	1c43      	adds	r3, r0, #1
 8015c06:	d102      	bne.n	8015c0e <_write_r+0x1e>
 8015c08:	682b      	ldr	r3, [r5, #0]
 8015c0a:	b103      	cbz	r3, 8015c0e <_write_r+0x1e>
 8015c0c:	6023      	str	r3, [r4, #0]
 8015c0e:	bd38      	pop	{r3, r4, r5, pc}
 8015c10:	20002878 	.word	0x20002878

08015c14 <_close_r>:
 8015c14:	b538      	push	{r3, r4, r5, lr}
 8015c16:	4d06      	ldr	r5, [pc, #24]	; (8015c30 <_close_r+0x1c>)
 8015c18:	2300      	movs	r3, #0
 8015c1a:	4604      	mov	r4, r0
 8015c1c:	4608      	mov	r0, r1
 8015c1e:	602b      	str	r3, [r5, #0]
 8015c20:	f7ec ff55 	bl	8002ace <_close>
 8015c24:	1c43      	adds	r3, r0, #1
 8015c26:	d102      	bne.n	8015c2e <_close_r+0x1a>
 8015c28:	682b      	ldr	r3, [r5, #0]
 8015c2a:	b103      	cbz	r3, 8015c2e <_close_r+0x1a>
 8015c2c:	6023      	str	r3, [r4, #0]
 8015c2e:	bd38      	pop	{r3, r4, r5, pc}
 8015c30:	20002878 	.word	0x20002878

08015c34 <quorem>:
 8015c34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c38:	6903      	ldr	r3, [r0, #16]
 8015c3a:	690c      	ldr	r4, [r1, #16]
 8015c3c:	42a3      	cmp	r3, r4
 8015c3e:	4607      	mov	r7, r0
 8015c40:	f2c0 8081 	blt.w	8015d46 <quorem+0x112>
 8015c44:	3c01      	subs	r4, #1
 8015c46:	f101 0814 	add.w	r8, r1, #20
 8015c4a:	f100 0514 	add.w	r5, r0, #20
 8015c4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015c52:	9301      	str	r3, [sp, #4]
 8015c54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015c58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015c5c:	3301      	adds	r3, #1
 8015c5e:	429a      	cmp	r2, r3
 8015c60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015c64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015c68:	fbb2 f6f3 	udiv	r6, r2, r3
 8015c6c:	d331      	bcc.n	8015cd2 <quorem+0x9e>
 8015c6e:	f04f 0e00 	mov.w	lr, #0
 8015c72:	4640      	mov	r0, r8
 8015c74:	46ac      	mov	ip, r5
 8015c76:	46f2      	mov	sl, lr
 8015c78:	f850 2b04 	ldr.w	r2, [r0], #4
 8015c7c:	b293      	uxth	r3, r2
 8015c7e:	fb06 e303 	mla	r3, r6, r3, lr
 8015c82:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015c86:	b29b      	uxth	r3, r3
 8015c88:	ebaa 0303 	sub.w	r3, sl, r3
 8015c8c:	f8dc a000 	ldr.w	sl, [ip]
 8015c90:	0c12      	lsrs	r2, r2, #16
 8015c92:	fa13 f38a 	uxtah	r3, r3, sl
 8015c96:	fb06 e202 	mla	r2, r6, r2, lr
 8015c9a:	9300      	str	r3, [sp, #0]
 8015c9c:	9b00      	ldr	r3, [sp, #0]
 8015c9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015ca2:	b292      	uxth	r2, r2
 8015ca4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8015ca8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015cac:	f8bd 3000 	ldrh.w	r3, [sp]
 8015cb0:	4581      	cmp	r9, r0
 8015cb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015cb6:	f84c 3b04 	str.w	r3, [ip], #4
 8015cba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015cbe:	d2db      	bcs.n	8015c78 <quorem+0x44>
 8015cc0:	f855 300b 	ldr.w	r3, [r5, fp]
 8015cc4:	b92b      	cbnz	r3, 8015cd2 <quorem+0x9e>
 8015cc6:	9b01      	ldr	r3, [sp, #4]
 8015cc8:	3b04      	subs	r3, #4
 8015cca:	429d      	cmp	r5, r3
 8015ccc:	461a      	mov	r2, r3
 8015cce:	d32e      	bcc.n	8015d2e <quorem+0xfa>
 8015cd0:	613c      	str	r4, [r7, #16]
 8015cd2:	4638      	mov	r0, r7
 8015cd4:	f7ff fcd6 	bl	8015684 <__mcmp>
 8015cd8:	2800      	cmp	r0, #0
 8015cda:	db24      	blt.n	8015d26 <quorem+0xf2>
 8015cdc:	3601      	adds	r6, #1
 8015cde:	4628      	mov	r0, r5
 8015ce0:	f04f 0c00 	mov.w	ip, #0
 8015ce4:	f858 2b04 	ldr.w	r2, [r8], #4
 8015ce8:	f8d0 e000 	ldr.w	lr, [r0]
 8015cec:	b293      	uxth	r3, r2
 8015cee:	ebac 0303 	sub.w	r3, ip, r3
 8015cf2:	0c12      	lsrs	r2, r2, #16
 8015cf4:	fa13 f38e 	uxtah	r3, r3, lr
 8015cf8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015cfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015d00:	b29b      	uxth	r3, r3
 8015d02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015d06:	45c1      	cmp	r9, r8
 8015d08:	f840 3b04 	str.w	r3, [r0], #4
 8015d0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015d10:	d2e8      	bcs.n	8015ce4 <quorem+0xb0>
 8015d12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015d16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015d1a:	b922      	cbnz	r2, 8015d26 <quorem+0xf2>
 8015d1c:	3b04      	subs	r3, #4
 8015d1e:	429d      	cmp	r5, r3
 8015d20:	461a      	mov	r2, r3
 8015d22:	d30a      	bcc.n	8015d3a <quorem+0x106>
 8015d24:	613c      	str	r4, [r7, #16]
 8015d26:	4630      	mov	r0, r6
 8015d28:	b003      	add	sp, #12
 8015d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d2e:	6812      	ldr	r2, [r2, #0]
 8015d30:	3b04      	subs	r3, #4
 8015d32:	2a00      	cmp	r2, #0
 8015d34:	d1cc      	bne.n	8015cd0 <quorem+0x9c>
 8015d36:	3c01      	subs	r4, #1
 8015d38:	e7c7      	b.n	8015cca <quorem+0x96>
 8015d3a:	6812      	ldr	r2, [r2, #0]
 8015d3c:	3b04      	subs	r3, #4
 8015d3e:	2a00      	cmp	r2, #0
 8015d40:	d1f0      	bne.n	8015d24 <quorem+0xf0>
 8015d42:	3c01      	subs	r4, #1
 8015d44:	e7eb      	b.n	8015d1e <quorem+0xea>
 8015d46:	2000      	movs	r0, #0
 8015d48:	e7ee      	b.n	8015d28 <quorem+0xf4>
 8015d4a:	0000      	movs	r0, r0
 8015d4c:	0000      	movs	r0, r0
	...

08015d50 <_dtoa_r>:
 8015d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d54:	ed2d 8b04 	vpush	{d8-d9}
 8015d58:	ec57 6b10 	vmov	r6, r7, d0
 8015d5c:	b093      	sub	sp, #76	; 0x4c
 8015d5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015d60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015d64:	9106      	str	r1, [sp, #24]
 8015d66:	ee10 aa10 	vmov	sl, s0
 8015d6a:	4604      	mov	r4, r0
 8015d6c:	9209      	str	r2, [sp, #36]	; 0x24
 8015d6e:	930c      	str	r3, [sp, #48]	; 0x30
 8015d70:	46bb      	mov	fp, r7
 8015d72:	b975      	cbnz	r5, 8015d92 <_dtoa_r+0x42>
 8015d74:	2010      	movs	r0, #16
 8015d76:	f000 fe0d 	bl	8016994 <malloc>
 8015d7a:	4602      	mov	r2, r0
 8015d7c:	6260      	str	r0, [r4, #36]	; 0x24
 8015d7e:	b920      	cbnz	r0, 8015d8a <_dtoa_r+0x3a>
 8015d80:	4ba7      	ldr	r3, [pc, #668]	; (8016020 <_dtoa_r+0x2d0>)
 8015d82:	21ea      	movs	r1, #234	; 0xea
 8015d84:	48a7      	ldr	r0, [pc, #668]	; (8016024 <_dtoa_r+0x2d4>)
 8015d86:	f7fe fa5b 	bl	8014240 <__assert_func>
 8015d8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015d8e:	6005      	str	r5, [r0, #0]
 8015d90:	60c5      	str	r5, [r0, #12]
 8015d92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015d94:	6819      	ldr	r1, [r3, #0]
 8015d96:	b151      	cbz	r1, 8015dae <_dtoa_r+0x5e>
 8015d98:	685a      	ldr	r2, [r3, #4]
 8015d9a:	604a      	str	r2, [r1, #4]
 8015d9c:	2301      	movs	r3, #1
 8015d9e:	4093      	lsls	r3, r2
 8015da0:	608b      	str	r3, [r1, #8]
 8015da2:	4620      	mov	r0, r4
 8015da4:	f7ff fa2c 	bl	8015200 <_Bfree>
 8015da8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015daa:	2200      	movs	r2, #0
 8015dac:	601a      	str	r2, [r3, #0]
 8015dae:	1e3b      	subs	r3, r7, #0
 8015db0:	bfaa      	itet	ge
 8015db2:	2300      	movge	r3, #0
 8015db4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8015db8:	f8c8 3000 	strge.w	r3, [r8]
 8015dbc:	4b9a      	ldr	r3, [pc, #616]	; (8016028 <_dtoa_r+0x2d8>)
 8015dbe:	bfbc      	itt	lt
 8015dc0:	2201      	movlt	r2, #1
 8015dc2:	f8c8 2000 	strlt.w	r2, [r8]
 8015dc6:	ea33 030b 	bics.w	r3, r3, fp
 8015dca:	d11b      	bne.n	8015e04 <_dtoa_r+0xb4>
 8015dcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015dce:	f242 730f 	movw	r3, #9999	; 0x270f
 8015dd2:	6013      	str	r3, [r2, #0]
 8015dd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015dd8:	4333      	orrs	r3, r6
 8015dda:	f000 8592 	beq.w	8016902 <_dtoa_r+0xbb2>
 8015dde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015de0:	b963      	cbnz	r3, 8015dfc <_dtoa_r+0xac>
 8015de2:	4b92      	ldr	r3, [pc, #584]	; (801602c <_dtoa_r+0x2dc>)
 8015de4:	e022      	b.n	8015e2c <_dtoa_r+0xdc>
 8015de6:	4b92      	ldr	r3, [pc, #584]	; (8016030 <_dtoa_r+0x2e0>)
 8015de8:	9301      	str	r3, [sp, #4]
 8015dea:	3308      	adds	r3, #8
 8015dec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015dee:	6013      	str	r3, [r2, #0]
 8015df0:	9801      	ldr	r0, [sp, #4]
 8015df2:	b013      	add	sp, #76	; 0x4c
 8015df4:	ecbd 8b04 	vpop	{d8-d9}
 8015df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dfc:	4b8b      	ldr	r3, [pc, #556]	; (801602c <_dtoa_r+0x2dc>)
 8015dfe:	9301      	str	r3, [sp, #4]
 8015e00:	3303      	adds	r3, #3
 8015e02:	e7f3      	b.n	8015dec <_dtoa_r+0x9c>
 8015e04:	2200      	movs	r2, #0
 8015e06:	2300      	movs	r3, #0
 8015e08:	4650      	mov	r0, sl
 8015e0a:	4659      	mov	r1, fp
 8015e0c:	f7ea fe34 	bl	8000a78 <__aeabi_dcmpeq>
 8015e10:	ec4b ab19 	vmov	d9, sl, fp
 8015e14:	4680      	mov	r8, r0
 8015e16:	b158      	cbz	r0, 8015e30 <_dtoa_r+0xe0>
 8015e18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015e1a:	2301      	movs	r3, #1
 8015e1c:	6013      	str	r3, [r2, #0]
 8015e1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	f000 856b 	beq.w	80168fc <_dtoa_r+0xbac>
 8015e26:	4883      	ldr	r0, [pc, #524]	; (8016034 <_dtoa_r+0x2e4>)
 8015e28:	6018      	str	r0, [r3, #0]
 8015e2a:	1e43      	subs	r3, r0, #1
 8015e2c:	9301      	str	r3, [sp, #4]
 8015e2e:	e7df      	b.n	8015df0 <_dtoa_r+0xa0>
 8015e30:	ec4b ab10 	vmov	d0, sl, fp
 8015e34:	aa10      	add	r2, sp, #64	; 0x40
 8015e36:	a911      	add	r1, sp, #68	; 0x44
 8015e38:	4620      	mov	r0, r4
 8015e3a:	f7ff fcc9 	bl	80157d0 <__d2b>
 8015e3e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8015e42:	ee08 0a10 	vmov	s16, r0
 8015e46:	2d00      	cmp	r5, #0
 8015e48:	f000 8084 	beq.w	8015f54 <_dtoa_r+0x204>
 8015e4c:	ee19 3a90 	vmov	r3, s19
 8015e50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015e54:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8015e58:	4656      	mov	r6, sl
 8015e5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8015e5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015e62:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8015e66:	4b74      	ldr	r3, [pc, #464]	; (8016038 <_dtoa_r+0x2e8>)
 8015e68:	2200      	movs	r2, #0
 8015e6a:	4630      	mov	r0, r6
 8015e6c:	4639      	mov	r1, r7
 8015e6e:	f7ea f9e3 	bl	8000238 <__aeabi_dsub>
 8015e72:	a365      	add	r3, pc, #404	; (adr r3, 8016008 <_dtoa_r+0x2b8>)
 8015e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e78:	f7ea fb96 	bl	80005a8 <__aeabi_dmul>
 8015e7c:	a364      	add	r3, pc, #400	; (adr r3, 8016010 <_dtoa_r+0x2c0>)
 8015e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e82:	f7ea f9db 	bl	800023c <__adddf3>
 8015e86:	4606      	mov	r6, r0
 8015e88:	4628      	mov	r0, r5
 8015e8a:	460f      	mov	r7, r1
 8015e8c:	f7ea fb22 	bl	80004d4 <__aeabi_i2d>
 8015e90:	a361      	add	r3, pc, #388	; (adr r3, 8016018 <_dtoa_r+0x2c8>)
 8015e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e96:	f7ea fb87 	bl	80005a8 <__aeabi_dmul>
 8015e9a:	4602      	mov	r2, r0
 8015e9c:	460b      	mov	r3, r1
 8015e9e:	4630      	mov	r0, r6
 8015ea0:	4639      	mov	r1, r7
 8015ea2:	f7ea f9cb 	bl	800023c <__adddf3>
 8015ea6:	4606      	mov	r6, r0
 8015ea8:	460f      	mov	r7, r1
 8015eaa:	f7ea fe2d 	bl	8000b08 <__aeabi_d2iz>
 8015eae:	2200      	movs	r2, #0
 8015eb0:	9000      	str	r0, [sp, #0]
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	4630      	mov	r0, r6
 8015eb6:	4639      	mov	r1, r7
 8015eb8:	f7ea fde8 	bl	8000a8c <__aeabi_dcmplt>
 8015ebc:	b150      	cbz	r0, 8015ed4 <_dtoa_r+0x184>
 8015ebe:	9800      	ldr	r0, [sp, #0]
 8015ec0:	f7ea fb08 	bl	80004d4 <__aeabi_i2d>
 8015ec4:	4632      	mov	r2, r6
 8015ec6:	463b      	mov	r3, r7
 8015ec8:	f7ea fdd6 	bl	8000a78 <__aeabi_dcmpeq>
 8015ecc:	b910      	cbnz	r0, 8015ed4 <_dtoa_r+0x184>
 8015ece:	9b00      	ldr	r3, [sp, #0]
 8015ed0:	3b01      	subs	r3, #1
 8015ed2:	9300      	str	r3, [sp, #0]
 8015ed4:	9b00      	ldr	r3, [sp, #0]
 8015ed6:	2b16      	cmp	r3, #22
 8015ed8:	d85a      	bhi.n	8015f90 <_dtoa_r+0x240>
 8015eda:	9a00      	ldr	r2, [sp, #0]
 8015edc:	4b57      	ldr	r3, [pc, #348]	; (801603c <_dtoa_r+0x2ec>)
 8015ede:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ee6:	ec51 0b19 	vmov	r0, r1, d9
 8015eea:	f7ea fdcf 	bl	8000a8c <__aeabi_dcmplt>
 8015eee:	2800      	cmp	r0, #0
 8015ef0:	d050      	beq.n	8015f94 <_dtoa_r+0x244>
 8015ef2:	9b00      	ldr	r3, [sp, #0]
 8015ef4:	3b01      	subs	r3, #1
 8015ef6:	9300      	str	r3, [sp, #0]
 8015ef8:	2300      	movs	r3, #0
 8015efa:	930b      	str	r3, [sp, #44]	; 0x2c
 8015efc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015efe:	1b5d      	subs	r5, r3, r5
 8015f00:	1e6b      	subs	r3, r5, #1
 8015f02:	9305      	str	r3, [sp, #20]
 8015f04:	bf45      	ittet	mi
 8015f06:	f1c5 0301 	rsbmi	r3, r5, #1
 8015f0a:	9304      	strmi	r3, [sp, #16]
 8015f0c:	2300      	movpl	r3, #0
 8015f0e:	2300      	movmi	r3, #0
 8015f10:	bf4c      	ite	mi
 8015f12:	9305      	strmi	r3, [sp, #20]
 8015f14:	9304      	strpl	r3, [sp, #16]
 8015f16:	9b00      	ldr	r3, [sp, #0]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	db3d      	blt.n	8015f98 <_dtoa_r+0x248>
 8015f1c:	9b05      	ldr	r3, [sp, #20]
 8015f1e:	9a00      	ldr	r2, [sp, #0]
 8015f20:	920a      	str	r2, [sp, #40]	; 0x28
 8015f22:	4413      	add	r3, r2
 8015f24:	9305      	str	r3, [sp, #20]
 8015f26:	2300      	movs	r3, #0
 8015f28:	9307      	str	r3, [sp, #28]
 8015f2a:	9b06      	ldr	r3, [sp, #24]
 8015f2c:	2b09      	cmp	r3, #9
 8015f2e:	f200 8089 	bhi.w	8016044 <_dtoa_r+0x2f4>
 8015f32:	2b05      	cmp	r3, #5
 8015f34:	bfc4      	itt	gt
 8015f36:	3b04      	subgt	r3, #4
 8015f38:	9306      	strgt	r3, [sp, #24]
 8015f3a:	9b06      	ldr	r3, [sp, #24]
 8015f3c:	f1a3 0302 	sub.w	r3, r3, #2
 8015f40:	bfcc      	ite	gt
 8015f42:	2500      	movgt	r5, #0
 8015f44:	2501      	movle	r5, #1
 8015f46:	2b03      	cmp	r3, #3
 8015f48:	f200 8087 	bhi.w	801605a <_dtoa_r+0x30a>
 8015f4c:	e8df f003 	tbb	[pc, r3]
 8015f50:	59383a2d 	.word	0x59383a2d
 8015f54:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8015f58:	441d      	add	r5, r3
 8015f5a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015f5e:	2b20      	cmp	r3, #32
 8015f60:	bfc1      	itttt	gt
 8015f62:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015f66:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8015f6a:	fa0b f303 	lslgt.w	r3, fp, r3
 8015f6e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8015f72:	bfda      	itte	le
 8015f74:	f1c3 0320 	rsble	r3, r3, #32
 8015f78:	fa06 f003 	lslle.w	r0, r6, r3
 8015f7c:	4318      	orrgt	r0, r3
 8015f7e:	f7ea fa99 	bl	80004b4 <__aeabi_ui2d>
 8015f82:	2301      	movs	r3, #1
 8015f84:	4606      	mov	r6, r0
 8015f86:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8015f8a:	3d01      	subs	r5, #1
 8015f8c:	930e      	str	r3, [sp, #56]	; 0x38
 8015f8e:	e76a      	b.n	8015e66 <_dtoa_r+0x116>
 8015f90:	2301      	movs	r3, #1
 8015f92:	e7b2      	b.n	8015efa <_dtoa_r+0x1aa>
 8015f94:	900b      	str	r0, [sp, #44]	; 0x2c
 8015f96:	e7b1      	b.n	8015efc <_dtoa_r+0x1ac>
 8015f98:	9b04      	ldr	r3, [sp, #16]
 8015f9a:	9a00      	ldr	r2, [sp, #0]
 8015f9c:	1a9b      	subs	r3, r3, r2
 8015f9e:	9304      	str	r3, [sp, #16]
 8015fa0:	4253      	negs	r3, r2
 8015fa2:	9307      	str	r3, [sp, #28]
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	930a      	str	r3, [sp, #40]	; 0x28
 8015fa8:	e7bf      	b.n	8015f2a <_dtoa_r+0x1da>
 8015faa:	2300      	movs	r3, #0
 8015fac:	9308      	str	r3, [sp, #32]
 8015fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	dc55      	bgt.n	8016060 <_dtoa_r+0x310>
 8015fb4:	2301      	movs	r3, #1
 8015fb6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015fba:	461a      	mov	r2, r3
 8015fbc:	9209      	str	r2, [sp, #36]	; 0x24
 8015fbe:	e00c      	b.n	8015fda <_dtoa_r+0x28a>
 8015fc0:	2301      	movs	r3, #1
 8015fc2:	e7f3      	b.n	8015fac <_dtoa_r+0x25c>
 8015fc4:	2300      	movs	r3, #0
 8015fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015fc8:	9308      	str	r3, [sp, #32]
 8015fca:	9b00      	ldr	r3, [sp, #0]
 8015fcc:	4413      	add	r3, r2
 8015fce:	9302      	str	r3, [sp, #8]
 8015fd0:	3301      	adds	r3, #1
 8015fd2:	2b01      	cmp	r3, #1
 8015fd4:	9303      	str	r3, [sp, #12]
 8015fd6:	bfb8      	it	lt
 8015fd8:	2301      	movlt	r3, #1
 8015fda:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015fdc:	2200      	movs	r2, #0
 8015fde:	6042      	str	r2, [r0, #4]
 8015fe0:	2204      	movs	r2, #4
 8015fe2:	f102 0614 	add.w	r6, r2, #20
 8015fe6:	429e      	cmp	r6, r3
 8015fe8:	6841      	ldr	r1, [r0, #4]
 8015fea:	d93d      	bls.n	8016068 <_dtoa_r+0x318>
 8015fec:	4620      	mov	r0, r4
 8015fee:	f7ff f8c7 	bl	8015180 <_Balloc>
 8015ff2:	9001      	str	r0, [sp, #4]
 8015ff4:	2800      	cmp	r0, #0
 8015ff6:	d13b      	bne.n	8016070 <_dtoa_r+0x320>
 8015ff8:	4b11      	ldr	r3, [pc, #68]	; (8016040 <_dtoa_r+0x2f0>)
 8015ffa:	4602      	mov	r2, r0
 8015ffc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8016000:	e6c0      	b.n	8015d84 <_dtoa_r+0x34>
 8016002:	2301      	movs	r3, #1
 8016004:	e7df      	b.n	8015fc6 <_dtoa_r+0x276>
 8016006:	bf00      	nop
 8016008:	636f4361 	.word	0x636f4361
 801600c:	3fd287a7 	.word	0x3fd287a7
 8016010:	8b60c8b3 	.word	0x8b60c8b3
 8016014:	3fc68a28 	.word	0x3fc68a28
 8016018:	509f79fb 	.word	0x509f79fb
 801601c:	3fd34413 	.word	0x3fd34413
 8016020:	08017b28 	.word	0x08017b28
 8016024:	08017cbb 	.word	0x08017cbb
 8016028:	7ff00000 	.word	0x7ff00000
 801602c:	08017cb5 	.word	0x08017cb5
 8016030:	08017cac 	.word	0x08017cac
 8016034:	08017cba 	.word	0x08017cba
 8016038:	3ff80000 	.word	0x3ff80000
 801603c:	08017bd8 	.word	0x08017bd8
 8016040:	08017b9b 	.word	0x08017b9b
 8016044:	2501      	movs	r5, #1
 8016046:	2300      	movs	r3, #0
 8016048:	9306      	str	r3, [sp, #24]
 801604a:	9508      	str	r5, [sp, #32]
 801604c:	f04f 33ff 	mov.w	r3, #4294967295
 8016050:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016054:	2200      	movs	r2, #0
 8016056:	2312      	movs	r3, #18
 8016058:	e7b0      	b.n	8015fbc <_dtoa_r+0x26c>
 801605a:	2301      	movs	r3, #1
 801605c:	9308      	str	r3, [sp, #32]
 801605e:	e7f5      	b.n	801604c <_dtoa_r+0x2fc>
 8016060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016062:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016066:	e7b8      	b.n	8015fda <_dtoa_r+0x28a>
 8016068:	3101      	adds	r1, #1
 801606a:	6041      	str	r1, [r0, #4]
 801606c:	0052      	lsls	r2, r2, #1
 801606e:	e7b8      	b.n	8015fe2 <_dtoa_r+0x292>
 8016070:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016072:	9a01      	ldr	r2, [sp, #4]
 8016074:	601a      	str	r2, [r3, #0]
 8016076:	9b03      	ldr	r3, [sp, #12]
 8016078:	2b0e      	cmp	r3, #14
 801607a:	f200 809d 	bhi.w	80161b8 <_dtoa_r+0x468>
 801607e:	2d00      	cmp	r5, #0
 8016080:	f000 809a 	beq.w	80161b8 <_dtoa_r+0x468>
 8016084:	9b00      	ldr	r3, [sp, #0]
 8016086:	2b00      	cmp	r3, #0
 8016088:	dd32      	ble.n	80160f0 <_dtoa_r+0x3a0>
 801608a:	4ab7      	ldr	r2, [pc, #732]	; (8016368 <_dtoa_r+0x618>)
 801608c:	f003 030f 	and.w	r3, r3, #15
 8016090:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016094:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016098:	9b00      	ldr	r3, [sp, #0]
 801609a:	05d8      	lsls	r0, r3, #23
 801609c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80160a0:	d516      	bpl.n	80160d0 <_dtoa_r+0x380>
 80160a2:	4bb2      	ldr	r3, [pc, #712]	; (801636c <_dtoa_r+0x61c>)
 80160a4:	ec51 0b19 	vmov	r0, r1, d9
 80160a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80160ac:	f7ea fba6 	bl	80007fc <__aeabi_ddiv>
 80160b0:	f007 070f 	and.w	r7, r7, #15
 80160b4:	4682      	mov	sl, r0
 80160b6:	468b      	mov	fp, r1
 80160b8:	2503      	movs	r5, #3
 80160ba:	4eac      	ldr	r6, [pc, #688]	; (801636c <_dtoa_r+0x61c>)
 80160bc:	b957      	cbnz	r7, 80160d4 <_dtoa_r+0x384>
 80160be:	4642      	mov	r2, r8
 80160c0:	464b      	mov	r3, r9
 80160c2:	4650      	mov	r0, sl
 80160c4:	4659      	mov	r1, fp
 80160c6:	f7ea fb99 	bl	80007fc <__aeabi_ddiv>
 80160ca:	4682      	mov	sl, r0
 80160cc:	468b      	mov	fp, r1
 80160ce:	e028      	b.n	8016122 <_dtoa_r+0x3d2>
 80160d0:	2502      	movs	r5, #2
 80160d2:	e7f2      	b.n	80160ba <_dtoa_r+0x36a>
 80160d4:	07f9      	lsls	r1, r7, #31
 80160d6:	d508      	bpl.n	80160ea <_dtoa_r+0x39a>
 80160d8:	4640      	mov	r0, r8
 80160da:	4649      	mov	r1, r9
 80160dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80160e0:	f7ea fa62 	bl	80005a8 <__aeabi_dmul>
 80160e4:	3501      	adds	r5, #1
 80160e6:	4680      	mov	r8, r0
 80160e8:	4689      	mov	r9, r1
 80160ea:	107f      	asrs	r7, r7, #1
 80160ec:	3608      	adds	r6, #8
 80160ee:	e7e5      	b.n	80160bc <_dtoa_r+0x36c>
 80160f0:	f000 809b 	beq.w	801622a <_dtoa_r+0x4da>
 80160f4:	9b00      	ldr	r3, [sp, #0]
 80160f6:	4f9d      	ldr	r7, [pc, #628]	; (801636c <_dtoa_r+0x61c>)
 80160f8:	425e      	negs	r6, r3
 80160fa:	4b9b      	ldr	r3, [pc, #620]	; (8016368 <_dtoa_r+0x618>)
 80160fc:	f006 020f 	and.w	r2, r6, #15
 8016100:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016108:	ec51 0b19 	vmov	r0, r1, d9
 801610c:	f7ea fa4c 	bl	80005a8 <__aeabi_dmul>
 8016110:	1136      	asrs	r6, r6, #4
 8016112:	4682      	mov	sl, r0
 8016114:	468b      	mov	fp, r1
 8016116:	2300      	movs	r3, #0
 8016118:	2502      	movs	r5, #2
 801611a:	2e00      	cmp	r6, #0
 801611c:	d17a      	bne.n	8016214 <_dtoa_r+0x4c4>
 801611e:	2b00      	cmp	r3, #0
 8016120:	d1d3      	bne.n	80160ca <_dtoa_r+0x37a>
 8016122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016124:	2b00      	cmp	r3, #0
 8016126:	f000 8082 	beq.w	801622e <_dtoa_r+0x4de>
 801612a:	4b91      	ldr	r3, [pc, #580]	; (8016370 <_dtoa_r+0x620>)
 801612c:	2200      	movs	r2, #0
 801612e:	4650      	mov	r0, sl
 8016130:	4659      	mov	r1, fp
 8016132:	f7ea fcab 	bl	8000a8c <__aeabi_dcmplt>
 8016136:	2800      	cmp	r0, #0
 8016138:	d079      	beq.n	801622e <_dtoa_r+0x4de>
 801613a:	9b03      	ldr	r3, [sp, #12]
 801613c:	2b00      	cmp	r3, #0
 801613e:	d076      	beq.n	801622e <_dtoa_r+0x4de>
 8016140:	9b02      	ldr	r3, [sp, #8]
 8016142:	2b00      	cmp	r3, #0
 8016144:	dd36      	ble.n	80161b4 <_dtoa_r+0x464>
 8016146:	9b00      	ldr	r3, [sp, #0]
 8016148:	4650      	mov	r0, sl
 801614a:	4659      	mov	r1, fp
 801614c:	1e5f      	subs	r7, r3, #1
 801614e:	2200      	movs	r2, #0
 8016150:	4b88      	ldr	r3, [pc, #544]	; (8016374 <_dtoa_r+0x624>)
 8016152:	f7ea fa29 	bl	80005a8 <__aeabi_dmul>
 8016156:	9e02      	ldr	r6, [sp, #8]
 8016158:	4682      	mov	sl, r0
 801615a:	468b      	mov	fp, r1
 801615c:	3501      	adds	r5, #1
 801615e:	4628      	mov	r0, r5
 8016160:	f7ea f9b8 	bl	80004d4 <__aeabi_i2d>
 8016164:	4652      	mov	r2, sl
 8016166:	465b      	mov	r3, fp
 8016168:	f7ea fa1e 	bl	80005a8 <__aeabi_dmul>
 801616c:	4b82      	ldr	r3, [pc, #520]	; (8016378 <_dtoa_r+0x628>)
 801616e:	2200      	movs	r2, #0
 8016170:	f7ea f864 	bl	800023c <__adddf3>
 8016174:	46d0      	mov	r8, sl
 8016176:	46d9      	mov	r9, fp
 8016178:	4682      	mov	sl, r0
 801617a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801617e:	2e00      	cmp	r6, #0
 8016180:	d158      	bne.n	8016234 <_dtoa_r+0x4e4>
 8016182:	4b7e      	ldr	r3, [pc, #504]	; (801637c <_dtoa_r+0x62c>)
 8016184:	2200      	movs	r2, #0
 8016186:	4640      	mov	r0, r8
 8016188:	4649      	mov	r1, r9
 801618a:	f7ea f855 	bl	8000238 <__aeabi_dsub>
 801618e:	4652      	mov	r2, sl
 8016190:	465b      	mov	r3, fp
 8016192:	4680      	mov	r8, r0
 8016194:	4689      	mov	r9, r1
 8016196:	f7ea fc97 	bl	8000ac8 <__aeabi_dcmpgt>
 801619a:	2800      	cmp	r0, #0
 801619c:	f040 8295 	bne.w	80166ca <_dtoa_r+0x97a>
 80161a0:	4652      	mov	r2, sl
 80161a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80161a6:	4640      	mov	r0, r8
 80161a8:	4649      	mov	r1, r9
 80161aa:	f7ea fc6f 	bl	8000a8c <__aeabi_dcmplt>
 80161ae:	2800      	cmp	r0, #0
 80161b0:	f040 8289 	bne.w	80166c6 <_dtoa_r+0x976>
 80161b4:	ec5b ab19 	vmov	sl, fp, d9
 80161b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	f2c0 8148 	blt.w	8016450 <_dtoa_r+0x700>
 80161c0:	9a00      	ldr	r2, [sp, #0]
 80161c2:	2a0e      	cmp	r2, #14
 80161c4:	f300 8144 	bgt.w	8016450 <_dtoa_r+0x700>
 80161c8:	4b67      	ldr	r3, [pc, #412]	; (8016368 <_dtoa_r+0x618>)
 80161ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80161ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80161d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	f280 80d5 	bge.w	8016384 <_dtoa_r+0x634>
 80161da:	9b03      	ldr	r3, [sp, #12]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	f300 80d1 	bgt.w	8016384 <_dtoa_r+0x634>
 80161e2:	f040 826f 	bne.w	80166c4 <_dtoa_r+0x974>
 80161e6:	4b65      	ldr	r3, [pc, #404]	; (801637c <_dtoa_r+0x62c>)
 80161e8:	2200      	movs	r2, #0
 80161ea:	4640      	mov	r0, r8
 80161ec:	4649      	mov	r1, r9
 80161ee:	f7ea f9db 	bl	80005a8 <__aeabi_dmul>
 80161f2:	4652      	mov	r2, sl
 80161f4:	465b      	mov	r3, fp
 80161f6:	f7ea fc5d 	bl	8000ab4 <__aeabi_dcmpge>
 80161fa:	9e03      	ldr	r6, [sp, #12]
 80161fc:	4637      	mov	r7, r6
 80161fe:	2800      	cmp	r0, #0
 8016200:	f040 8245 	bne.w	801668e <_dtoa_r+0x93e>
 8016204:	9d01      	ldr	r5, [sp, #4]
 8016206:	2331      	movs	r3, #49	; 0x31
 8016208:	f805 3b01 	strb.w	r3, [r5], #1
 801620c:	9b00      	ldr	r3, [sp, #0]
 801620e:	3301      	adds	r3, #1
 8016210:	9300      	str	r3, [sp, #0]
 8016212:	e240      	b.n	8016696 <_dtoa_r+0x946>
 8016214:	07f2      	lsls	r2, r6, #31
 8016216:	d505      	bpl.n	8016224 <_dtoa_r+0x4d4>
 8016218:	e9d7 2300 	ldrd	r2, r3, [r7]
 801621c:	f7ea f9c4 	bl	80005a8 <__aeabi_dmul>
 8016220:	3501      	adds	r5, #1
 8016222:	2301      	movs	r3, #1
 8016224:	1076      	asrs	r6, r6, #1
 8016226:	3708      	adds	r7, #8
 8016228:	e777      	b.n	801611a <_dtoa_r+0x3ca>
 801622a:	2502      	movs	r5, #2
 801622c:	e779      	b.n	8016122 <_dtoa_r+0x3d2>
 801622e:	9f00      	ldr	r7, [sp, #0]
 8016230:	9e03      	ldr	r6, [sp, #12]
 8016232:	e794      	b.n	801615e <_dtoa_r+0x40e>
 8016234:	9901      	ldr	r1, [sp, #4]
 8016236:	4b4c      	ldr	r3, [pc, #304]	; (8016368 <_dtoa_r+0x618>)
 8016238:	4431      	add	r1, r6
 801623a:	910d      	str	r1, [sp, #52]	; 0x34
 801623c:	9908      	ldr	r1, [sp, #32]
 801623e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8016242:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016246:	2900      	cmp	r1, #0
 8016248:	d043      	beq.n	80162d2 <_dtoa_r+0x582>
 801624a:	494d      	ldr	r1, [pc, #308]	; (8016380 <_dtoa_r+0x630>)
 801624c:	2000      	movs	r0, #0
 801624e:	f7ea fad5 	bl	80007fc <__aeabi_ddiv>
 8016252:	4652      	mov	r2, sl
 8016254:	465b      	mov	r3, fp
 8016256:	f7e9 ffef 	bl	8000238 <__aeabi_dsub>
 801625a:	9d01      	ldr	r5, [sp, #4]
 801625c:	4682      	mov	sl, r0
 801625e:	468b      	mov	fp, r1
 8016260:	4649      	mov	r1, r9
 8016262:	4640      	mov	r0, r8
 8016264:	f7ea fc50 	bl	8000b08 <__aeabi_d2iz>
 8016268:	4606      	mov	r6, r0
 801626a:	f7ea f933 	bl	80004d4 <__aeabi_i2d>
 801626e:	4602      	mov	r2, r0
 8016270:	460b      	mov	r3, r1
 8016272:	4640      	mov	r0, r8
 8016274:	4649      	mov	r1, r9
 8016276:	f7e9 ffdf 	bl	8000238 <__aeabi_dsub>
 801627a:	3630      	adds	r6, #48	; 0x30
 801627c:	f805 6b01 	strb.w	r6, [r5], #1
 8016280:	4652      	mov	r2, sl
 8016282:	465b      	mov	r3, fp
 8016284:	4680      	mov	r8, r0
 8016286:	4689      	mov	r9, r1
 8016288:	f7ea fc00 	bl	8000a8c <__aeabi_dcmplt>
 801628c:	2800      	cmp	r0, #0
 801628e:	d163      	bne.n	8016358 <_dtoa_r+0x608>
 8016290:	4642      	mov	r2, r8
 8016292:	464b      	mov	r3, r9
 8016294:	4936      	ldr	r1, [pc, #216]	; (8016370 <_dtoa_r+0x620>)
 8016296:	2000      	movs	r0, #0
 8016298:	f7e9 ffce 	bl	8000238 <__aeabi_dsub>
 801629c:	4652      	mov	r2, sl
 801629e:	465b      	mov	r3, fp
 80162a0:	f7ea fbf4 	bl	8000a8c <__aeabi_dcmplt>
 80162a4:	2800      	cmp	r0, #0
 80162a6:	f040 80b5 	bne.w	8016414 <_dtoa_r+0x6c4>
 80162aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80162ac:	429d      	cmp	r5, r3
 80162ae:	d081      	beq.n	80161b4 <_dtoa_r+0x464>
 80162b0:	4b30      	ldr	r3, [pc, #192]	; (8016374 <_dtoa_r+0x624>)
 80162b2:	2200      	movs	r2, #0
 80162b4:	4650      	mov	r0, sl
 80162b6:	4659      	mov	r1, fp
 80162b8:	f7ea f976 	bl	80005a8 <__aeabi_dmul>
 80162bc:	4b2d      	ldr	r3, [pc, #180]	; (8016374 <_dtoa_r+0x624>)
 80162be:	4682      	mov	sl, r0
 80162c0:	468b      	mov	fp, r1
 80162c2:	4640      	mov	r0, r8
 80162c4:	4649      	mov	r1, r9
 80162c6:	2200      	movs	r2, #0
 80162c8:	f7ea f96e 	bl	80005a8 <__aeabi_dmul>
 80162cc:	4680      	mov	r8, r0
 80162ce:	4689      	mov	r9, r1
 80162d0:	e7c6      	b.n	8016260 <_dtoa_r+0x510>
 80162d2:	4650      	mov	r0, sl
 80162d4:	4659      	mov	r1, fp
 80162d6:	f7ea f967 	bl	80005a8 <__aeabi_dmul>
 80162da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80162dc:	9d01      	ldr	r5, [sp, #4]
 80162de:	930f      	str	r3, [sp, #60]	; 0x3c
 80162e0:	4682      	mov	sl, r0
 80162e2:	468b      	mov	fp, r1
 80162e4:	4649      	mov	r1, r9
 80162e6:	4640      	mov	r0, r8
 80162e8:	f7ea fc0e 	bl	8000b08 <__aeabi_d2iz>
 80162ec:	4606      	mov	r6, r0
 80162ee:	f7ea f8f1 	bl	80004d4 <__aeabi_i2d>
 80162f2:	3630      	adds	r6, #48	; 0x30
 80162f4:	4602      	mov	r2, r0
 80162f6:	460b      	mov	r3, r1
 80162f8:	4640      	mov	r0, r8
 80162fa:	4649      	mov	r1, r9
 80162fc:	f7e9 ff9c 	bl	8000238 <__aeabi_dsub>
 8016300:	f805 6b01 	strb.w	r6, [r5], #1
 8016304:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016306:	429d      	cmp	r5, r3
 8016308:	4680      	mov	r8, r0
 801630a:	4689      	mov	r9, r1
 801630c:	f04f 0200 	mov.w	r2, #0
 8016310:	d124      	bne.n	801635c <_dtoa_r+0x60c>
 8016312:	4b1b      	ldr	r3, [pc, #108]	; (8016380 <_dtoa_r+0x630>)
 8016314:	4650      	mov	r0, sl
 8016316:	4659      	mov	r1, fp
 8016318:	f7e9 ff90 	bl	800023c <__adddf3>
 801631c:	4602      	mov	r2, r0
 801631e:	460b      	mov	r3, r1
 8016320:	4640      	mov	r0, r8
 8016322:	4649      	mov	r1, r9
 8016324:	f7ea fbd0 	bl	8000ac8 <__aeabi_dcmpgt>
 8016328:	2800      	cmp	r0, #0
 801632a:	d173      	bne.n	8016414 <_dtoa_r+0x6c4>
 801632c:	4652      	mov	r2, sl
 801632e:	465b      	mov	r3, fp
 8016330:	4913      	ldr	r1, [pc, #76]	; (8016380 <_dtoa_r+0x630>)
 8016332:	2000      	movs	r0, #0
 8016334:	f7e9 ff80 	bl	8000238 <__aeabi_dsub>
 8016338:	4602      	mov	r2, r0
 801633a:	460b      	mov	r3, r1
 801633c:	4640      	mov	r0, r8
 801633e:	4649      	mov	r1, r9
 8016340:	f7ea fba4 	bl	8000a8c <__aeabi_dcmplt>
 8016344:	2800      	cmp	r0, #0
 8016346:	f43f af35 	beq.w	80161b4 <_dtoa_r+0x464>
 801634a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801634c:	1e6b      	subs	r3, r5, #1
 801634e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016350:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016354:	2b30      	cmp	r3, #48	; 0x30
 8016356:	d0f8      	beq.n	801634a <_dtoa_r+0x5fa>
 8016358:	9700      	str	r7, [sp, #0]
 801635a:	e049      	b.n	80163f0 <_dtoa_r+0x6a0>
 801635c:	4b05      	ldr	r3, [pc, #20]	; (8016374 <_dtoa_r+0x624>)
 801635e:	f7ea f923 	bl	80005a8 <__aeabi_dmul>
 8016362:	4680      	mov	r8, r0
 8016364:	4689      	mov	r9, r1
 8016366:	e7bd      	b.n	80162e4 <_dtoa_r+0x594>
 8016368:	08017bd8 	.word	0x08017bd8
 801636c:	08017bb0 	.word	0x08017bb0
 8016370:	3ff00000 	.word	0x3ff00000
 8016374:	40240000 	.word	0x40240000
 8016378:	401c0000 	.word	0x401c0000
 801637c:	40140000 	.word	0x40140000
 8016380:	3fe00000 	.word	0x3fe00000
 8016384:	9d01      	ldr	r5, [sp, #4]
 8016386:	4656      	mov	r6, sl
 8016388:	465f      	mov	r7, fp
 801638a:	4642      	mov	r2, r8
 801638c:	464b      	mov	r3, r9
 801638e:	4630      	mov	r0, r6
 8016390:	4639      	mov	r1, r7
 8016392:	f7ea fa33 	bl	80007fc <__aeabi_ddiv>
 8016396:	f7ea fbb7 	bl	8000b08 <__aeabi_d2iz>
 801639a:	4682      	mov	sl, r0
 801639c:	f7ea f89a 	bl	80004d4 <__aeabi_i2d>
 80163a0:	4642      	mov	r2, r8
 80163a2:	464b      	mov	r3, r9
 80163a4:	f7ea f900 	bl	80005a8 <__aeabi_dmul>
 80163a8:	4602      	mov	r2, r0
 80163aa:	460b      	mov	r3, r1
 80163ac:	4630      	mov	r0, r6
 80163ae:	4639      	mov	r1, r7
 80163b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80163b4:	f7e9 ff40 	bl	8000238 <__aeabi_dsub>
 80163b8:	f805 6b01 	strb.w	r6, [r5], #1
 80163bc:	9e01      	ldr	r6, [sp, #4]
 80163be:	9f03      	ldr	r7, [sp, #12]
 80163c0:	1bae      	subs	r6, r5, r6
 80163c2:	42b7      	cmp	r7, r6
 80163c4:	4602      	mov	r2, r0
 80163c6:	460b      	mov	r3, r1
 80163c8:	d135      	bne.n	8016436 <_dtoa_r+0x6e6>
 80163ca:	f7e9 ff37 	bl	800023c <__adddf3>
 80163ce:	4642      	mov	r2, r8
 80163d0:	464b      	mov	r3, r9
 80163d2:	4606      	mov	r6, r0
 80163d4:	460f      	mov	r7, r1
 80163d6:	f7ea fb77 	bl	8000ac8 <__aeabi_dcmpgt>
 80163da:	b9d0      	cbnz	r0, 8016412 <_dtoa_r+0x6c2>
 80163dc:	4642      	mov	r2, r8
 80163de:	464b      	mov	r3, r9
 80163e0:	4630      	mov	r0, r6
 80163e2:	4639      	mov	r1, r7
 80163e4:	f7ea fb48 	bl	8000a78 <__aeabi_dcmpeq>
 80163e8:	b110      	cbz	r0, 80163f0 <_dtoa_r+0x6a0>
 80163ea:	f01a 0f01 	tst.w	sl, #1
 80163ee:	d110      	bne.n	8016412 <_dtoa_r+0x6c2>
 80163f0:	4620      	mov	r0, r4
 80163f2:	ee18 1a10 	vmov	r1, s16
 80163f6:	f7fe ff03 	bl	8015200 <_Bfree>
 80163fa:	2300      	movs	r3, #0
 80163fc:	9800      	ldr	r0, [sp, #0]
 80163fe:	702b      	strb	r3, [r5, #0]
 8016400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016402:	3001      	adds	r0, #1
 8016404:	6018      	str	r0, [r3, #0]
 8016406:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016408:	2b00      	cmp	r3, #0
 801640a:	f43f acf1 	beq.w	8015df0 <_dtoa_r+0xa0>
 801640e:	601d      	str	r5, [r3, #0]
 8016410:	e4ee      	b.n	8015df0 <_dtoa_r+0xa0>
 8016412:	9f00      	ldr	r7, [sp, #0]
 8016414:	462b      	mov	r3, r5
 8016416:	461d      	mov	r5, r3
 8016418:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801641c:	2a39      	cmp	r2, #57	; 0x39
 801641e:	d106      	bne.n	801642e <_dtoa_r+0x6de>
 8016420:	9a01      	ldr	r2, [sp, #4]
 8016422:	429a      	cmp	r2, r3
 8016424:	d1f7      	bne.n	8016416 <_dtoa_r+0x6c6>
 8016426:	9901      	ldr	r1, [sp, #4]
 8016428:	2230      	movs	r2, #48	; 0x30
 801642a:	3701      	adds	r7, #1
 801642c:	700a      	strb	r2, [r1, #0]
 801642e:	781a      	ldrb	r2, [r3, #0]
 8016430:	3201      	adds	r2, #1
 8016432:	701a      	strb	r2, [r3, #0]
 8016434:	e790      	b.n	8016358 <_dtoa_r+0x608>
 8016436:	4ba6      	ldr	r3, [pc, #664]	; (80166d0 <_dtoa_r+0x980>)
 8016438:	2200      	movs	r2, #0
 801643a:	f7ea f8b5 	bl	80005a8 <__aeabi_dmul>
 801643e:	2200      	movs	r2, #0
 8016440:	2300      	movs	r3, #0
 8016442:	4606      	mov	r6, r0
 8016444:	460f      	mov	r7, r1
 8016446:	f7ea fb17 	bl	8000a78 <__aeabi_dcmpeq>
 801644a:	2800      	cmp	r0, #0
 801644c:	d09d      	beq.n	801638a <_dtoa_r+0x63a>
 801644e:	e7cf      	b.n	80163f0 <_dtoa_r+0x6a0>
 8016450:	9a08      	ldr	r2, [sp, #32]
 8016452:	2a00      	cmp	r2, #0
 8016454:	f000 80d7 	beq.w	8016606 <_dtoa_r+0x8b6>
 8016458:	9a06      	ldr	r2, [sp, #24]
 801645a:	2a01      	cmp	r2, #1
 801645c:	f300 80ba 	bgt.w	80165d4 <_dtoa_r+0x884>
 8016460:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016462:	2a00      	cmp	r2, #0
 8016464:	f000 80b2 	beq.w	80165cc <_dtoa_r+0x87c>
 8016468:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801646c:	9e07      	ldr	r6, [sp, #28]
 801646e:	9d04      	ldr	r5, [sp, #16]
 8016470:	9a04      	ldr	r2, [sp, #16]
 8016472:	441a      	add	r2, r3
 8016474:	9204      	str	r2, [sp, #16]
 8016476:	9a05      	ldr	r2, [sp, #20]
 8016478:	2101      	movs	r1, #1
 801647a:	441a      	add	r2, r3
 801647c:	4620      	mov	r0, r4
 801647e:	9205      	str	r2, [sp, #20]
 8016480:	f7fe ff76 	bl	8015370 <__i2b>
 8016484:	4607      	mov	r7, r0
 8016486:	2d00      	cmp	r5, #0
 8016488:	dd0c      	ble.n	80164a4 <_dtoa_r+0x754>
 801648a:	9b05      	ldr	r3, [sp, #20]
 801648c:	2b00      	cmp	r3, #0
 801648e:	dd09      	ble.n	80164a4 <_dtoa_r+0x754>
 8016490:	42ab      	cmp	r3, r5
 8016492:	9a04      	ldr	r2, [sp, #16]
 8016494:	bfa8      	it	ge
 8016496:	462b      	movge	r3, r5
 8016498:	1ad2      	subs	r2, r2, r3
 801649a:	9204      	str	r2, [sp, #16]
 801649c:	9a05      	ldr	r2, [sp, #20]
 801649e:	1aed      	subs	r5, r5, r3
 80164a0:	1ad3      	subs	r3, r2, r3
 80164a2:	9305      	str	r3, [sp, #20]
 80164a4:	9b07      	ldr	r3, [sp, #28]
 80164a6:	b31b      	cbz	r3, 80164f0 <_dtoa_r+0x7a0>
 80164a8:	9b08      	ldr	r3, [sp, #32]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	f000 80af 	beq.w	801660e <_dtoa_r+0x8be>
 80164b0:	2e00      	cmp	r6, #0
 80164b2:	dd13      	ble.n	80164dc <_dtoa_r+0x78c>
 80164b4:	4639      	mov	r1, r7
 80164b6:	4632      	mov	r2, r6
 80164b8:	4620      	mov	r0, r4
 80164ba:	f7ff f819 	bl	80154f0 <__pow5mult>
 80164be:	ee18 2a10 	vmov	r2, s16
 80164c2:	4601      	mov	r1, r0
 80164c4:	4607      	mov	r7, r0
 80164c6:	4620      	mov	r0, r4
 80164c8:	f7fe ff68 	bl	801539c <__multiply>
 80164cc:	ee18 1a10 	vmov	r1, s16
 80164d0:	4680      	mov	r8, r0
 80164d2:	4620      	mov	r0, r4
 80164d4:	f7fe fe94 	bl	8015200 <_Bfree>
 80164d8:	ee08 8a10 	vmov	s16, r8
 80164dc:	9b07      	ldr	r3, [sp, #28]
 80164de:	1b9a      	subs	r2, r3, r6
 80164e0:	d006      	beq.n	80164f0 <_dtoa_r+0x7a0>
 80164e2:	ee18 1a10 	vmov	r1, s16
 80164e6:	4620      	mov	r0, r4
 80164e8:	f7ff f802 	bl	80154f0 <__pow5mult>
 80164ec:	ee08 0a10 	vmov	s16, r0
 80164f0:	2101      	movs	r1, #1
 80164f2:	4620      	mov	r0, r4
 80164f4:	f7fe ff3c 	bl	8015370 <__i2b>
 80164f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	4606      	mov	r6, r0
 80164fe:	f340 8088 	ble.w	8016612 <_dtoa_r+0x8c2>
 8016502:	461a      	mov	r2, r3
 8016504:	4601      	mov	r1, r0
 8016506:	4620      	mov	r0, r4
 8016508:	f7fe fff2 	bl	80154f0 <__pow5mult>
 801650c:	9b06      	ldr	r3, [sp, #24]
 801650e:	2b01      	cmp	r3, #1
 8016510:	4606      	mov	r6, r0
 8016512:	f340 8081 	ble.w	8016618 <_dtoa_r+0x8c8>
 8016516:	f04f 0800 	mov.w	r8, #0
 801651a:	6933      	ldr	r3, [r6, #16]
 801651c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016520:	6918      	ldr	r0, [r3, #16]
 8016522:	f7fe fed5 	bl	80152d0 <__hi0bits>
 8016526:	f1c0 0020 	rsb	r0, r0, #32
 801652a:	9b05      	ldr	r3, [sp, #20]
 801652c:	4418      	add	r0, r3
 801652e:	f010 001f 	ands.w	r0, r0, #31
 8016532:	f000 8092 	beq.w	801665a <_dtoa_r+0x90a>
 8016536:	f1c0 0320 	rsb	r3, r0, #32
 801653a:	2b04      	cmp	r3, #4
 801653c:	f340 808a 	ble.w	8016654 <_dtoa_r+0x904>
 8016540:	f1c0 001c 	rsb	r0, r0, #28
 8016544:	9b04      	ldr	r3, [sp, #16]
 8016546:	4403      	add	r3, r0
 8016548:	9304      	str	r3, [sp, #16]
 801654a:	9b05      	ldr	r3, [sp, #20]
 801654c:	4403      	add	r3, r0
 801654e:	4405      	add	r5, r0
 8016550:	9305      	str	r3, [sp, #20]
 8016552:	9b04      	ldr	r3, [sp, #16]
 8016554:	2b00      	cmp	r3, #0
 8016556:	dd07      	ble.n	8016568 <_dtoa_r+0x818>
 8016558:	ee18 1a10 	vmov	r1, s16
 801655c:	461a      	mov	r2, r3
 801655e:	4620      	mov	r0, r4
 8016560:	f7ff f820 	bl	80155a4 <__lshift>
 8016564:	ee08 0a10 	vmov	s16, r0
 8016568:	9b05      	ldr	r3, [sp, #20]
 801656a:	2b00      	cmp	r3, #0
 801656c:	dd05      	ble.n	801657a <_dtoa_r+0x82a>
 801656e:	4631      	mov	r1, r6
 8016570:	461a      	mov	r2, r3
 8016572:	4620      	mov	r0, r4
 8016574:	f7ff f816 	bl	80155a4 <__lshift>
 8016578:	4606      	mov	r6, r0
 801657a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801657c:	2b00      	cmp	r3, #0
 801657e:	d06e      	beq.n	801665e <_dtoa_r+0x90e>
 8016580:	ee18 0a10 	vmov	r0, s16
 8016584:	4631      	mov	r1, r6
 8016586:	f7ff f87d 	bl	8015684 <__mcmp>
 801658a:	2800      	cmp	r0, #0
 801658c:	da67      	bge.n	801665e <_dtoa_r+0x90e>
 801658e:	9b00      	ldr	r3, [sp, #0]
 8016590:	3b01      	subs	r3, #1
 8016592:	ee18 1a10 	vmov	r1, s16
 8016596:	9300      	str	r3, [sp, #0]
 8016598:	220a      	movs	r2, #10
 801659a:	2300      	movs	r3, #0
 801659c:	4620      	mov	r0, r4
 801659e:	f7fe fe51 	bl	8015244 <__multadd>
 80165a2:	9b08      	ldr	r3, [sp, #32]
 80165a4:	ee08 0a10 	vmov	s16, r0
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	f000 81b1 	beq.w	8016910 <_dtoa_r+0xbc0>
 80165ae:	2300      	movs	r3, #0
 80165b0:	4639      	mov	r1, r7
 80165b2:	220a      	movs	r2, #10
 80165b4:	4620      	mov	r0, r4
 80165b6:	f7fe fe45 	bl	8015244 <__multadd>
 80165ba:	9b02      	ldr	r3, [sp, #8]
 80165bc:	2b00      	cmp	r3, #0
 80165be:	4607      	mov	r7, r0
 80165c0:	f300 808e 	bgt.w	80166e0 <_dtoa_r+0x990>
 80165c4:	9b06      	ldr	r3, [sp, #24]
 80165c6:	2b02      	cmp	r3, #2
 80165c8:	dc51      	bgt.n	801666e <_dtoa_r+0x91e>
 80165ca:	e089      	b.n	80166e0 <_dtoa_r+0x990>
 80165cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80165ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80165d2:	e74b      	b.n	801646c <_dtoa_r+0x71c>
 80165d4:	9b03      	ldr	r3, [sp, #12]
 80165d6:	1e5e      	subs	r6, r3, #1
 80165d8:	9b07      	ldr	r3, [sp, #28]
 80165da:	42b3      	cmp	r3, r6
 80165dc:	bfbf      	itttt	lt
 80165de:	9b07      	ldrlt	r3, [sp, #28]
 80165e0:	9607      	strlt	r6, [sp, #28]
 80165e2:	1af2      	sublt	r2, r6, r3
 80165e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80165e6:	bfb6      	itet	lt
 80165e8:	189b      	addlt	r3, r3, r2
 80165ea:	1b9e      	subge	r6, r3, r6
 80165ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 80165ee:	9b03      	ldr	r3, [sp, #12]
 80165f0:	bfb8      	it	lt
 80165f2:	2600      	movlt	r6, #0
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	bfb7      	itett	lt
 80165f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80165fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8016600:	1a9d      	sublt	r5, r3, r2
 8016602:	2300      	movlt	r3, #0
 8016604:	e734      	b.n	8016470 <_dtoa_r+0x720>
 8016606:	9e07      	ldr	r6, [sp, #28]
 8016608:	9d04      	ldr	r5, [sp, #16]
 801660a:	9f08      	ldr	r7, [sp, #32]
 801660c:	e73b      	b.n	8016486 <_dtoa_r+0x736>
 801660e:	9a07      	ldr	r2, [sp, #28]
 8016610:	e767      	b.n	80164e2 <_dtoa_r+0x792>
 8016612:	9b06      	ldr	r3, [sp, #24]
 8016614:	2b01      	cmp	r3, #1
 8016616:	dc18      	bgt.n	801664a <_dtoa_r+0x8fa>
 8016618:	f1ba 0f00 	cmp.w	sl, #0
 801661c:	d115      	bne.n	801664a <_dtoa_r+0x8fa>
 801661e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016622:	b993      	cbnz	r3, 801664a <_dtoa_r+0x8fa>
 8016624:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016628:	0d1b      	lsrs	r3, r3, #20
 801662a:	051b      	lsls	r3, r3, #20
 801662c:	b183      	cbz	r3, 8016650 <_dtoa_r+0x900>
 801662e:	9b04      	ldr	r3, [sp, #16]
 8016630:	3301      	adds	r3, #1
 8016632:	9304      	str	r3, [sp, #16]
 8016634:	9b05      	ldr	r3, [sp, #20]
 8016636:	3301      	adds	r3, #1
 8016638:	9305      	str	r3, [sp, #20]
 801663a:	f04f 0801 	mov.w	r8, #1
 801663e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016640:	2b00      	cmp	r3, #0
 8016642:	f47f af6a 	bne.w	801651a <_dtoa_r+0x7ca>
 8016646:	2001      	movs	r0, #1
 8016648:	e76f      	b.n	801652a <_dtoa_r+0x7da>
 801664a:	f04f 0800 	mov.w	r8, #0
 801664e:	e7f6      	b.n	801663e <_dtoa_r+0x8ee>
 8016650:	4698      	mov	r8, r3
 8016652:	e7f4      	b.n	801663e <_dtoa_r+0x8ee>
 8016654:	f43f af7d 	beq.w	8016552 <_dtoa_r+0x802>
 8016658:	4618      	mov	r0, r3
 801665a:	301c      	adds	r0, #28
 801665c:	e772      	b.n	8016544 <_dtoa_r+0x7f4>
 801665e:	9b03      	ldr	r3, [sp, #12]
 8016660:	2b00      	cmp	r3, #0
 8016662:	dc37      	bgt.n	80166d4 <_dtoa_r+0x984>
 8016664:	9b06      	ldr	r3, [sp, #24]
 8016666:	2b02      	cmp	r3, #2
 8016668:	dd34      	ble.n	80166d4 <_dtoa_r+0x984>
 801666a:	9b03      	ldr	r3, [sp, #12]
 801666c:	9302      	str	r3, [sp, #8]
 801666e:	9b02      	ldr	r3, [sp, #8]
 8016670:	b96b      	cbnz	r3, 801668e <_dtoa_r+0x93e>
 8016672:	4631      	mov	r1, r6
 8016674:	2205      	movs	r2, #5
 8016676:	4620      	mov	r0, r4
 8016678:	f7fe fde4 	bl	8015244 <__multadd>
 801667c:	4601      	mov	r1, r0
 801667e:	4606      	mov	r6, r0
 8016680:	ee18 0a10 	vmov	r0, s16
 8016684:	f7fe fffe 	bl	8015684 <__mcmp>
 8016688:	2800      	cmp	r0, #0
 801668a:	f73f adbb 	bgt.w	8016204 <_dtoa_r+0x4b4>
 801668e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016690:	9d01      	ldr	r5, [sp, #4]
 8016692:	43db      	mvns	r3, r3
 8016694:	9300      	str	r3, [sp, #0]
 8016696:	f04f 0800 	mov.w	r8, #0
 801669a:	4631      	mov	r1, r6
 801669c:	4620      	mov	r0, r4
 801669e:	f7fe fdaf 	bl	8015200 <_Bfree>
 80166a2:	2f00      	cmp	r7, #0
 80166a4:	f43f aea4 	beq.w	80163f0 <_dtoa_r+0x6a0>
 80166a8:	f1b8 0f00 	cmp.w	r8, #0
 80166ac:	d005      	beq.n	80166ba <_dtoa_r+0x96a>
 80166ae:	45b8      	cmp	r8, r7
 80166b0:	d003      	beq.n	80166ba <_dtoa_r+0x96a>
 80166b2:	4641      	mov	r1, r8
 80166b4:	4620      	mov	r0, r4
 80166b6:	f7fe fda3 	bl	8015200 <_Bfree>
 80166ba:	4639      	mov	r1, r7
 80166bc:	4620      	mov	r0, r4
 80166be:	f7fe fd9f 	bl	8015200 <_Bfree>
 80166c2:	e695      	b.n	80163f0 <_dtoa_r+0x6a0>
 80166c4:	2600      	movs	r6, #0
 80166c6:	4637      	mov	r7, r6
 80166c8:	e7e1      	b.n	801668e <_dtoa_r+0x93e>
 80166ca:	9700      	str	r7, [sp, #0]
 80166cc:	4637      	mov	r7, r6
 80166ce:	e599      	b.n	8016204 <_dtoa_r+0x4b4>
 80166d0:	40240000 	.word	0x40240000
 80166d4:	9b08      	ldr	r3, [sp, #32]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	f000 80ca 	beq.w	8016870 <_dtoa_r+0xb20>
 80166dc:	9b03      	ldr	r3, [sp, #12]
 80166de:	9302      	str	r3, [sp, #8]
 80166e0:	2d00      	cmp	r5, #0
 80166e2:	dd05      	ble.n	80166f0 <_dtoa_r+0x9a0>
 80166e4:	4639      	mov	r1, r7
 80166e6:	462a      	mov	r2, r5
 80166e8:	4620      	mov	r0, r4
 80166ea:	f7fe ff5b 	bl	80155a4 <__lshift>
 80166ee:	4607      	mov	r7, r0
 80166f0:	f1b8 0f00 	cmp.w	r8, #0
 80166f4:	d05b      	beq.n	80167ae <_dtoa_r+0xa5e>
 80166f6:	6879      	ldr	r1, [r7, #4]
 80166f8:	4620      	mov	r0, r4
 80166fa:	f7fe fd41 	bl	8015180 <_Balloc>
 80166fe:	4605      	mov	r5, r0
 8016700:	b928      	cbnz	r0, 801670e <_dtoa_r+0x9be>
 8016702:	4b87      	ldr	r3, [pc, #540]	; (8016920 <_dtoa_r+0xbd0>)
 8016704:	4602      	mov	r2, r0
 8016706:	f240 21ea 	movw	r1, #746	; 0x2ea
 801670a:	f7ff bb3b 	b.w	8015d84 <_dtoa_r+0x34>
 801670e:	693a      	ldr	r2, [r7, #16]
 8016710:	3202      	adds	r2, #2
 8016712:	0092      	lsls	r2, r2, #2
 8016714:	f107 010c 	add.w	r1, r7, #12
 8016718:	300c      	adds	r0, #12
 801671a:	f7fd fe0f 	bl	801433c <memcpy>
 801671e:	2201      	movs	r2, #1
 8016720:	4629      	mov	r1, r5
 8016722:	4620      	mov	r0, r4
 8016724:	f7fe ff3e 	bl	80155a4 <__lshift>
 8016728:	9b01      	ldr	r3, [sp, #4]
 801672a:	f103 0901 	add.w	r9, r3, #1
 801672e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8016732:	4413      	add	r3, r2
 8016734:	9305      	str	r3, [sp, #20]
 8016736:	f00a 0301 	and.w	r3, sl, #1
 801673a:	46b8      	mov	r8, r7
 801673c:	9304      	str	r3, [sp, #16]
 801673e:	4607      	mov	r7, r0
 8016740:	4631      	mov	r1, r6
 8016742:	ee18 0a10 	vmov	r0, s16
 8016746:	f7ff fa75 	bl	8015c34 <quorem>
 801674a:	4641      	mov	r1, r8
 801674c:	9002      	str	r0, [sp, #8]
 801674e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8016752:	ee18 0a10 	vmov	r0, s16
 8016756:	f7fe ff95 	bl	8015684 <__mcmp>
 801675a:	463a      	mov	r2, r7
 801675c:	9003      	str	r0, [sp, #12]
 801675e:	4631      	mov	r1, r6
 8016760:	4620      	mov	r0, r4
 8016762:	f7fe ffab 	bl	80156bc <__mdiff>
 8016766:	68c2      	ldr	r2, [r0, #12]
 8016768:	f109 3bff 	add.w	fp, r9, #4294967295
 801676c:	4605      	mov	r5, r0
 801676e:	bb02      	cbnz	r2, 80167b2 <_dtoa_r+0xa62>
 8016770:	4601      	mov	r1, r0
 8016772:	ee18 0a10 	vmov	r0, s16
 8016776:	f7fe ff85 	bl	8015684 <__mcmp>
 801677a:	4602      	mov	r2, r0
 801677c:	4629      	mov	r1, r5
 801677e:	4620      	mov	r0, r4
 8016780:	9207      	str	r2, [sp, #28]
 8016782:	f7fe fd3d 	bl	8015200 <_Bfree>
 8016786:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801678a:	ea43 0102 	orr.w	r1, r3, r2
 801678e:	9b04      	ldr	r3, [sp, #16]
 8016790:	430b      	orrs	r3, r1
 8016792:	464d      	mov	r5, r9
 8016794:	d10f      	bne.n	80167b6 <_dtoa_r+0xa66>
 8016796:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801679a:	d02a      	beq.n	80167f2 <_dtoa_r+0xaa2>
 801679c:	9b03      	ldr	r3, [sp, #12]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	dd02      	ble.n	80167a8 <_dtoa_r+0xa58>
 80167a2:	9b02      	ldr	r3, [sp, #8]
 80167a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80167a8:	f88b a000 	strb.w	sl, [fp]
 80167ac:	e775      	b.n	801669a <_dtoa_r+0x94a>
 80167ae:	4638      	mov	r0, r7
 80167b0:	e7ba      	b.n	8016728 <_dtoa_r+0x9d8>
 80167b2:	2201      	movs	r2, #1
 80167b4:	e7e2      	b.n	801677c <_dtoa_r+0xa2c>
 80167b6:	9b03      	ldr	r3, [sp, #12]
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	db04      	blt.n	80167c6 <_dtoa_r+0xa76>
 80167bc:	9906      	ldr	r1, [sp, #24]
 80167be:	430b      	orrs	r3, r1
 80167c0:	9904      	ldr	r1, [sp, #16]
 80167c2:	430b      	orrs	r3, r1
 80167c4:	d122      	bne.n	801680c <_dtoa_r+0xabc>
 80167c6:	2a00      	cmp	r2, #0
 80167c8:	ddee      	ble.n	80167a8 <_dtoa_r+0xa58>
 80167ca:	ee18 1a10 	vmov	r1, s16
 80167ce:	2201      	movs	r2, #1
 80167d0:	4620      	mov	r0, r4
 80167d2:	f7fe fee7 	bl	80155a4 <__lshift>
 80167d6:	4631      	mov	r1, r6
 80167d8:	ee08 0a10 	vmov	s16, r0
 80167dc:	f7fe ff52 	bl	8015684 <__mcmp>
 80167e0:	2800      	cmp	r0, #0
 80167e2:	dc03      	bgt.n	80167ec <_dtoa_r+0xa9c>
 80167e4:	d1e0      	bne.n	80167a8 <_dtoa_r+0xa58>
 80167e6:	f01a 0f01 	tst.w	sl, #1
 80167ea:	d0dd      	beq.n	80167a8 <_dtoa_r+0xa58>
 80167ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80167f0:	d1d7      	bne.n	80167a2 <_dtoa_r+0xa52>
 80167f2:	2339      	movs	r3, #57	; 0x39
 80167f4:	f88b 3000 	strb.w	r3, [fp]
 80167f8:	462b      	mov	r3, r5
 80167fa:	461d      	mov	r5, r3
 80167fc:	3b01      	subs	r3, #1
 80167fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016802:	2a39      	cmp	r2, #57	; 0x39
 8016804:	d071      	beq.n	80168ea <_dtoa_r+0xb9a>
 8016806:	3201      	adds	r2, #1
 8016808:	701a      	strb	r2, [r3, #0]
 801680a:	e746      	b.n	801669a <_dtoa_r+0x94a>
 801680c:	2a00      	cmp	r2, #0
 801680e:	dd07      	ble.n	8016820 <_dtoa_r+0xad0>
 8016810:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016814:	d0ed      	beq.n	80167f2 <_dtoa_r+0xaa2>
 8016816:	f10a 0301 	add.w	r3, sl, #1
 801681a:	f88b 3000 	strb.w	r3, [fp]
 801681e:	e73c      	b.n	801669a <_dtoa_r+0x94a>
 8016820:	9b05      	ldr	r3, [sp, #20]
 8016822:	f809 ac01 	strb.w	sl, [r9, #-1]
 8016826:	4599      	cmp	r9, r3
 8016828:	d047      	beq.n	80168ba <_dtoa_r+0xb6a>
 801682a:	ee18 1a10 	vmov	r1, s16
 801682e:	2300      	movs	r3, #0
 8016830:	220a      	movs	r2, #10
 8016832:	4620      	mov	r0, r4
 8016834:	f7fe fd06 	bl	8015244 <__multadd>
 8016838:	45b8      	cmp	r8, r7
 801683a:	ee08 0a10 	vmov	s16, r0
 801683e:	f04f 0300 	mov.w	r3, #0
 8016842:	f04f 020a 	mov.w	r2, #10
 8016846:	4641      	mov	r1, r8
 8016848:	4620      	mov	r0, r4
 801684a:	d106      	bne.n	801685a <_dtoa_r+0xb0a>
 801684c:	f7fe fcfa 	bl	8015244 <__multadd>
 8016850:	4680      	mov	r8, r0
 8016852:	4607      	mov	r7, r0
 8016854:	f109 0901 	add.w	r9, r9, #1
 8016858:	e772      	b.n	8016740 <_dtoa_r+0x9f0>
 801685a:	f7fe fcf3 	bl	8015244 <__multadd>
 801685e:	4639      	mov	r1, r7
 8016860:	4680      	mov	r8, r0
 8016862:	2300      	movs	r3, #0
 8016864:	220a      	movs	r2, #10
 8016866:	4620      	mov	r0, r4
 8016868:	f7fe fcec 	bl	8015244 <__multadd>
 801686c:	4607      	mov	r7, r0
 801686e:	e7f1      	b.n	8016854 <_dtoa_r+0xb04>
 8016870:	9b03      	ldr	r3, [sp, #12]
 8016872:	9302      	str	r3, [sp, #8]
 8016874:	9d01      	ldr	r5, [sp, #4]
 8016876:	ee18 0a10 	vmov	r0, s16
 801687a:	4631      	mov	r1, r6
 801687c:	f7ff f9da 	bl	8015c34 <quorem>
 8016880:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8016884:	9b01      	ldr	r3, [sp, #4]
 8016886:	f805 ab01 	strb.w	sl, [r5], #1
 801688a:	1aea      	subs	r2, r5, r3
 801688c:	9b02      	ldr	r3, [sp, #8]
 801688e:	4293      	cmp	r3, r2
 8016890:	dd09      	ble.n	80168a6 <_dtoa_r+0xb56>
 8016892:	ee18 1a10 	vmov	r1, s16
 8016896:	2300      	movs	r3, #0
 8016898:	220a      	movs	r2, #10
 801689a:	4620      	mov	r0, r4
 801689c:	f7fe fcd2 	bl	8015244 <__multadd>
 80168a0:	ee08 0a10 	vmov	s16, r0
 80168a4:	e7e7      	b.n	8016876 <_dtoa_r+0xb26>
 80168a6:	9b02      	ldr	r3, [sp, #8]
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	bfc8      	it	gt
 80168ac:	461d      	movgt	r5, r3
 80168ae:	9b01      	ldr	r3, [sp, #4]
 80168b0:	bfd8      	it	le
 80168b2:	2501      	movle	r5, #1
 80168b4:	441d      	add	r5, r3
 80168b6:	f04f 0800 	mov.w	r8, #0
 80168ba:	ee18 1a10 	vmov	r1, s16
 80168be:	2201      	movs	r2, #1
 80168c0:	4620      	mov	r0, r4
 80168c2:	f7fe fe6f 	bl	80155a4 <__lshift>
 80168c6:	4631      	mov	r1, r6
 80168c8:	ee08 0a10 	vmov	s16, r0
 80168cc:	f7fe feda 	bl	8015684 <__mcmp>
 80168d0:	2800      	cmp	r0, #0
 80168d2:	dc91      	bgt.n	80167f8 <_dtoa_r+0xaa8>
 80168d4:	d102      	bne.n	80168dc <_dtoa_r+0xb8c>
 80168d6:	f01a 0f01 	tst.w	sl, #1
 80168da:	d18d      	bne.n	80167f8 <_dtoa_r+0xaa8>
 80168dc:	462b      	mov	r3, r5
 80168de:	461d      	mov	r5, r3
 80168e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80168e4:	2a30      	cmp	r2, #48	; 0x30
 80168e6:	d0fa      	beq.n	80168de <_dtoa_r+0xb8e>
 80168e8:	e6d7      	b.n	801669a <_dtoa_r+0x94a>
 80168ea:	9a01      	ldr	r2, [sp, #4]
 80168ec:	429a      	cmp	r2, r3
 80168ee:	d184      	bne.n	80167fa <_dtoa_r+0xaaa>
 80168f0:	9b00      	ldr	r3, [sp, #0]
 80168f2:	3301      	adds	r3, #1
 80168f4:	9300      	str	r3, [sp, #0]
 80168f6:	2331      	movs	r3, #49	; 0x31
 80168f8:	7013      	strb	r3, [r2, #0]
 80168fa:	e6ce      	b.n	801669a <_dtoa_r+0x94a>
 80168fc:	4b09      	ldr	r3, [pc, #36]	; (8016924 <_dtoa_r+0xbd4>)
 80168fe:	f7ff ba95 	b.w	8015e2c <_dtoa_r+0xdc>
 8016902:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016904:	2b00      	cmp	r3, #0
 8016906:	f47f aa6e 	bne.w	8015de6 <_dtoa_r+0x96>
 801690a:	4b07      	ldr	r3, [pc, #28]	; (8016928 <_dtoa_r+0xbd8>)
 801690c:	f7ff ba8e 	b.w	8015e2c <_dtoa_r+0xdc>
 8016910:	9b02      	ldr	r3, [sp, #8]
 8016912:	2b00      	cmp	r3, #0
 8016914:	dcae      	bgt.n	8016874 <_dtoa_r+0xb24>
 8016916:	9b06      	ldr	r3, [sp, #24]
 8016918:	2b02      	cmp	r3, #2
 801691a:	f73f aea8 	bgt.w	801666e <_dtoa_r+0x91e>
 801691e:	e7a9      	b.n	8016874 <_dtoa_r+0xb24>
 8016920:	08017b9b 	.word	0x08017b9b
 8016924:	08017cb9 	.word	0x08017cb9
 8016928:	08017cac 	.word	0x08017cac

0801692c <_fstat_r>:
 801692c:	b538      	push	{r3, r4, r5, lr}
 801692e:	4d07      	ldr	r5, [pc, #28]	; (801694c <_fstat_r+0x20>)
 8016930:	2300      	movs	r3, #0
 8016932:	4604      	mov	r4, r0
 8016934:	4608      	mov	r0, r1
 8016936:	4611      	mov	r1, r2
 8016938:	602b      	str	r3, [r5, #0]
 801693a:	f7ec f8d4 	bl	8002ae6 <_fstat>
 801693e:	1c43      	adds	r3, r0, #1
 8016940:	d102      	bne.n	8016948 <_fstat_r+0x1c>
 8016942:	682b      	ldr	r3, [r5, #0]
 8016944:	b103      	cbz	r3, 8016948 <_fstat_r+0x1c>
 8016946:	6023      	str	r3, [r4, #0]
 8016948:	bd38      	pop	{r3, r4, r5, pc}
 801694a:	bf00      	nop
 801694c:	20002878 	.word	0x20002878

08016950 <_isatty_r>:
 8016950:	b538      	push	{r3, r4, r5, lr}
 8016952:	4d06      	ldr	r5, [pc, #24]	; (801696c <_isatty_r+0x1c>)
 8016954:	2300      	movs	r3, #0
 8016956:	4604      	mov	r4, r0
 8016958:	4608      	mov	r0, r1
 801695a:	602b      	str	r3, [r5, #0]
 801695c:	f7ec f8d3 	bl	8002b06 <_isatty>
 8016960:	1c43      	adds	r3, r0, #1
 8016962:	d102      	bne.n	801696a <_isatty_r+0x1a>
 8016964:	682b      	ldr	r3, [r5, #0]
 8016966:	b103      	cbz	r3, 801696a <_isatty_r+0x1a>
 8016968:	6023      	str	r3, [r4, #0]
 801696a:	bd38      	pop	{r3, r4, r5, pc}
 801696c:	20002878 	.word	0x20002878

08016970 <_lseek_r>:
 8016970:	b538      	push	{r3, r4, r5, lr}
 8016972:	4d07      	ldr	r5, [pc, #28]	; (8016990 <_lseek_r+0x20>)
 8016974:	4604      	mov	r4, r0
 8016976:	4608      	mov	r0, r1
 8016978:	4611      	mov	r1, r2
 801697a:	2200      	movs	r2, #0
 801697c:	602a      	str	r2, [r5, #0]
 801697e:	461a      	mov	r2, r3
 8016980:	f7ec f8cc 	bl	8002b1c <_lseek>
 8016984:	1c43      	adds	r3, r0, #1
 8016986:	d102      	bne.n	801698e <_lseek_r+0x1e>
 8016988:	682b      	ldr	r3, [r5, #0]
 801698a:	b103      	cbz	r3, 801698e <_lseek_r+0x1e>
 801698c:	6023      	str	r3, [r4, #0]
 801698e:	bd38      	pop	{r3, r4, r5, pc}
 8016990:	20002878 	.word	0x20002878

08016994 <malloc>:
 8016994:	4b02      	ldr	r3, [pc, #8]	; (80169a0 <malloc+0xc>)
 8016996:	4601      	mov	r1, r0
 8016998:	6818      	ldr	r0, [r3, #0]
 801699a:	f7ff b815 	b.w	80159c8 <_malloc_r>
 801699e:	bf00      	nop
 80169a0:	2000016c 	.word	0x2000016c

080169a4 <__malloc_lock>:
 80169a4:	4801      	ldr	r0, [pc, #4]	; (80169ac <__malloc_lock+0x8>)
 80169a6:	f7fe bb83 	b.w	80150b0 <__retarget_lock_acquire_recursive>
 80169aa:	bf00      	nop
 80169ac:	2000286c 	.word	0x2000286c

080169b0 <__malloc_unlock>:
 80169b0:	4801      	ldr	r0, [pc, #4]	; (80169b8 <__malloc_unlock+0x8>)
 80169b2:	f7fe bb7e 	b.w	80150b2 <__retarget_lock_release_recursive>
 80169b6:	bf00      	nop
 80169b8:	2000286c 	.word	0x2000286c

080169bc <_read_r>:
 80169bc:	b538      	push	{r3, r4, r5, lr}
 80169be:	4d07      	ldr	r5, [pc, #28]	; (80169dc <_read_r+0x20>)
 80169c0:	4604      	mov	r4, r0
 80169c2:	4608      	mov	r0, r1
 80169c4:	4611      	mov	r1, r2
 80169c6:	2200      	movs	r2, #0
 80169c8:	602a      	str	r2, [r5, #0]
 80169ca:	461a      	mov	r2, r3
 80169cc:	f7ec f846 	bl	8002a5c <_read>
 80169d0:	1c43      	adds	r3, r0, #1
 80169d2:	d102      	bne.n	80169da <_read_r+0x1e>
 80169d4:	682b      	ldr	r3, [r5, #0]
 80169d6:	b103      	cbz	r3, 80169da <_read_r+0x1e>
 80169d8:	6023      	str	r3, [r4, #0]
 80169da:	bd38      	pop	{r3, r4, r5, pc}
 80169dc:	20002878 	.word	0x20002878

080169e0 <log>:
 80169e0:	b538      	push	{r3, r4, r5, lr}
 80169e2:	ed2d 8b02 	vpush	{d8}
 80169e6:	ec55 4b10 	vmov	r4, r5, d0
 80169ea:	f000 f839 	bl	8016a60 <__ieee754_log>
 80169ee:	4622      	mov	r2, r4
 80169f0:	462b      	mov	r3, r5
 80169f2:	4620      	mov	r0, r4
 80169f4:	4629      	mov	r1, r5
 80169f6:	eeb0 8a40 	vmov.f32	s16, s0
 80169fa:	eef0 8a60 	vmov.f32	s17, s1
 80169fe:	f7ea f86d 	bl	8000adc <__aeabi_dcmpun>
 8016a02:	b998      	cbnz	r0, 8016a2c <log+0x4c>
 8016a04:	2200      	movs	r2, #0
 8016a06:	2300      	movs	r3, #0
 8016a08:	4620      	mov	r0, r4
 8016a0a:	4629      	mov	r1, r5
 8016a0c:	f7ea f85c 	bl	8000ac8 <__aeabi_dcmpgt>
 8016a10:	b960      	cbnz	r0, 8016a2c <log+0x4c>
 8016a12:	2200      	movs	r2, #0
 8016a14:	2300      	movs	r3, #0
 8016a16:	4620      	mov	r0, r4
 8016a18:	4629      	mov	r1, r5
 8016a1a:	f7ea f82d 	bl	8000a78 <__aeabi_dcmpeq>
 8016a1e:	b160      	cbz	r0, 8016a3a <log+0x5a>
 8016a20:	f7fd fc50 	bl	80142c4 <__errno>
 8016a24:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8016a50 <log+0x70>
 8016a28:	2322      	movs	r3, #34	; 0x22
 8016a2a:	6003      	str	r3, [r0, #0]
 8016a2c:	eeb0 0a48 	vmov.f32	s0, s16
 8016a30:	eef0 0a68 	vmov.f32	s1, s17
 8016a34:	ecbd 8b02 	vpop	{d8}
 8016a38:	bd38      	pop	{r3, r4, r5, pc}
 8016a3a:	f7fd fc43 	bl	80142c4 <__errno>
 8016a3e:	ecbd 8b02 	vpop	{d8}
 8016a42:	2321      	movs	r3, #33	; 0x21
 8016a44:	6003      	str	r3, [r0, #0]
 8016a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a4a:	4803      	ldr	r0, [pc, #12]	; (8016a58 <log+0x78>)
 8016a4c:	f000 b9c4 	b.w	8016dd8 <nan>
 8016a50:	00000000 	.word	0x00000000
 8016a54:	fff00000 	.word	0xfff00000
 8016a58:	08017a8f 	.word	0x08017a8f
 8016a5c:	00000000 	.word	0x00000000

08016a60 <__ieee754_log>:
 8016a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a64:	ec51 0b10 	vmov	r0, r1, d0
 8016a68:	ed2d 8b04 	vpush	{d8-d9}
 8016a6c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8016a70:	b083      	sub	sp, #12
 8016a72:	460d      	mov	r5, r1
 8016a74:	da29      	bge.n	8016aca <__ieee754_log+0x6a>
 8016a76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016a7a:	4303      	orrs	r3, r0
 8016a7c:	ee10 2a10 	vmov	r2, s0
 8016a80:	d10c      	bne.n	8016a9c <__ieee754_log+0x3c>
 8016a82:	49cf      	ldr	r1, [pc, #828]	; (8016dc0 <__ieee754_log+0x360>)
 8016a84:	2200      	movs	r2, #0
 8016a86:	2300      	movs	r3, #0
 8016a88:	2000      	movs	r0, #0
 8016a8a:	f7e9 feb7 	bl	80007fc <__aeabi_ddiv>
 8016a8e:	ec41 0b10 	vmov	d0, r0, r1
 8016a92:	b003      	add	sp, #12
 8016a94:	ecbd 8b04 	vpop	{d8-d9}
 8016a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a9c:	2900      	cmp	r1, #0
 8016a9e:	da05      	bge.n	8016aac <__ieee754_log+0x4c>
 8016aa0:	460b      	mov	r3, r1
 8016aa2:	f7e9 fbc9 	bl	8000238 <__aeabi_dsub>
 8016aa6:	2200      	movs	r2, #0
 8016aa8:	2300      	movs	r3, #0
 8016aaa:	e7ee      	b.n	8016a8a <__ieee754_log+0x2a>
 8016aac:	4bc5      	ldr	r3, [pc, #788]	; (8016dc4 <__ieee754_log+0x364>)
 8016aae:	2200      	movs	r2, #0
 8016ab0:	f7e9 fd7a 	bl	80005a8 <__aeabi_dmul>
 8016ab4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8016ab8:	460d      	mov	r5, r1
 8016aba:	4ac3      	ldr	r2, [pc, #780]	; (8016dc8 <__ieee754_log+0x368>)
 8016abc:	4295      	cmp	r5, r2
 8016abe:	dd06      	ble.n	8016ace <__ieee754_log+0x6e>
 8016ac0:	4602      	mov	r2, r0
 8016ac2:	460b      	mov	r3, r1
 8016ac4:	f7e9 fbba 	bl	800023c <__adddf3>
 8016ac8:	e7e1      	b.n	8016a8e <__ieee754_log+0x2e>
 8016aca:	2300      	movs	r3, #0
 8016acc:	e7f5      	b.n	8016aba <__ieee754_log+0x5a>
 8016ace:	152c      	asrs	r4, r5, #20
 8016ad0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8016ad4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8016ad8:	441c      	add	r4, r3
 8016ada:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8016ade:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8016ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016ae6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8016aea:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8016aee:	ea42 0105 	orr.w	r1, r2, r5
 8016af2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8016af6:	2200      	movs	r2, #0
 8016af8:	4bb4      	ldr	r3, [pc, #720]	; (8016dcc <__ieee754_log+0x36c>)
 8016afa:	f7e9 fb9d 	bl	8000238 <__aeabi_dsub>
 8016afe:	1cab      	adds	r3, r5, #2
 8016b00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016b04:	2b02      	cmp	r3, #2
 8016b06:	4682      	mov	sl, r0
 8016b08:	468b      	mov	fp, r1
 8016b0a:	f04f 0200 	mov.w	r2, #0
 8016b0e:	dc53      	bgt.n	8016bb8 <__ieee754_log+0x158>
 8016b10:	2300      	movs	r3, #0
 8016b12:	f7e9 ffb1 	bl	8000a78 <__aeabi_dcmpeq>
 8016b16:	b1d0      	cbz	r0, 8016b4e <__ieee754_log+0xee>
 8016b18:	2c00      	cmp	r4, #0
 8016b1a:	f000 8122 	beq.w	8016d62 <__ieee754_log+0x302>
 8016b1e:	4620      	mov	r0, r4
 8016b20:	f7e9 fcd8 	bl	80004d4 <__aeabi_i2d>
 8016b24:	a390      	add	r3, pc, #576	; (adr r3, 8016d68 <__ieee754_log+0x308>)
 8016b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b2a:	4606      	mov	r6, r0
 8016b2c:	460f      	mov	r7, r1
 8016b2e:	f7e9 fd3b 	bl	80005a8 <__aeabi_dmul>
 8016b32:	a38f      	add	r3, pc, #572	; (adr r3, 8016d70 <__ieee754_log+0x310>)
 8016b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b38:	4604      	mov	r4, r0
 8016b3a:	460d      	mov	r5, r1
 8016b3c:	4630      	mov	r0, r6
 8016b3e:	4639      	mov	r1, r7
 8016b40:	f7e9 fd32 	bl	80005a8 <__aeabi_dmul>
 8016b44:	4602      	mov	r2, r0
 8016b46:	460b      	mov	r3, r1
 8016b48:	4620      	mov	r0, r4
 8016b4a:	4629      	mov	r1, r5
 8016b4c:	e7ba      	b.n	8016ac4 <__ieee754_log+0x64>
 8016b4e:	a38a      	add	r3, pc, #552	; (adr r3, 8016d78 <__ieee754_log+0x318>)
 8016b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b54:	4650      	mov	r0, sl
 8016b56:	4659      	mov	r1, fp
 8016b58:	f7e9 fd26 	bl	80005a8 <__aeabi_dmul>
 8016b5c:	4602      	mov	r2, r0
 8016b5e:	460b      	mov	r3, r1
 8016b60:	2000      	movs	r0, #0
 8016b62:	499b      	ldr	r1, [pc, #620]	; (8016dd0 <__ieee754_log+0x370>)
 8016b64:	f7e9 fb68 	bl	8000238 <__aeabi_dsub>
 8016b68:	4652      	mov	r2, sl
 8016b6a:	4606      	mov	r6, r0
 8016b6c:	460f      	mov	r7, r1
 8016b6e:	465b      	mov	r3, fp
 8016b70:	4650      	mov	r0, sl
 8016b72:	4659      	mov	r1, fp
 8016b74:	f7e9 fd18 	bl	80005a8 <__aeabi_dmul>
 8016b78:	4602      	mov	r2, r0
 8016b7a:	460b      	mov	r3, r1
 8016b7c:	4630      	mov	r0, r6
 8016b7e:	4639      	mov	r1, r7
 8016b80:	f7e9 fd12 	bl	80005a8 <__aeabi_dmul>
 8016b84:	4606      	mov	r6, r0
 8016b86:	460f      	mov	r7, r1
 8016b88:	b914      	cbnz	r4, 8016b90 <__ieee754_log+0x130>
 8016b8a:	4632      	mov	r2, r6
 8016b8c:	463b      	mov	r3, r7
 8016b8e:	e0a2      	b.n	8016cd6 <__ieee754_log+0x276>
 8016b90:	4620      	mov	r0, r4
 8016b92:	f7e9 fc9f 	bl	80004d4 <__aeabi_i2d>
 8016b96:	a374      	add	r3, pc, #464	; (adr r3, 8016d68 <__ieee754_log+0x308>)
 8016b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b9c:	4680      	mov	r8, r0
 8016b9e:	4689      	mov	r9, r1
 8016ba0:	f7e9 fd02 	bl	80005a8 <__aeabi_dmul>
 8016ba4:	a372      	add	r3, pc, #456	; (adr r3, 8016d70 <__ieee754_log+0x310>)
 8016ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016baa:	4604      	mov	r4, r0
 8016bac:	460d      	mov	r5, r1
 8016bae:	4640      	mov	r0, r8
 8016bb0:	4649      	mov	r1, r9
 8016bb2:	f7e9 fcf9 	bl	80005a8 <__aeabi_dmul>
 8016bb6:	e0a7      	b.n	8016d08 <__ieee754_log+0x2a8>
 8016bb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016bbc:	f7e9 fb3e 	bl	800023c <__adddf3>
 8016bc0:	4602      	mov	r2, r0
 8016bc2:	460b      	mov	r3, r1
 8016bc4:	4650      	mov	r0, sl
 8016bc6:	4659      	mov	r1, fp
 8016bc8:	f7e9 fe18 	bl	80007fc <__aeabi_ddiv>
 8016bcc:	ec41 0b18 	vmov	d8, r0, r1
 8016bd0:	4620      	mov	r0, r4
 8016bd2:	f7e9 fc7f 	bl	80004d4 <__aeabi_i2d>
 8016bd6:	ec53 2b18 	vmov	r2, r3, d8
 8016bda:	ec41 0b19 	vmov	d9, r0, r1
 8016bde:	ec51 0b18 	vmov	r0, r1, d8
 8016be2:	f7e9 fce1 	bl	80005a8 <__aeabi_dmul>
 8016be6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8016bea:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8016bee:	9301      	str	r3, [sp, #4]
 8016bf0:	4602      	mov	r2, r0
 8016bf2:	460b      	mov	r3, r1
 8016bf4:	4680      	mov	r8, r0
 8016bf6:	4689      	mov	r9, r1
 8016bf8:	f7e9 fcd6 	bl	80005a8 <__aeabi_dmul>
 8016bfc:	a360      	add	r3, pc, #384	; (adr r3, 8016d80 <__ieee754_log+0x320>)
 8016bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c02:	4606      	mov	r6, r0
 8016c04:	460f      	mov	r7, r1
 8016c06:	f7e9 fccf 	bl	80005a8 <__aeabi_dmul>
 8016c0a:	a35f      	add	r3, pc, #380	; (adr r3, 8016d88 <__ieee754_log+0x328>)
 8016c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c10:	f7e9 fb14 	bl	800023c <__adddf3>
 8016c14:	4632      	mov	r2, r6
 8016c16:	463b      	mov	r3, r7
 8016c18:	f7e9 fcc6 	bl	80005a8 <__aeabi_dmul>
 8016c1c:	a35c      	add	r3, pc, #368	; (adr r3, 8016d90 <__ieee754_log+0x330>)
 8016c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c22:	f7e9 fb0b 	bl	800023c <__adddf3>
 8016c26:	4632      	mov	r2, r6
 8016c28:	463b      	mov	r3, r7
 8016c2a:	f7e9 fcbd 	bl	80005a8 <__aeabi_dmul>
 8016c2e:	a35a      	add	r3, pc, #360	; (adr r3, 8016d98 <__ieee754_log+0x338>)
 8016c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c34:	f7e9 fb02 	bl	800023c <__adddf3>
 8016c38:	4642      	mov	r2, r8
 8016c3a:	464b      	mov	r3, r9
 8016c3c:	f7e9 fcb4 	bl	80005a8 <__aeabi_dmul>
 8016c40:	a357      	add	r3, pc, #348	; (adr r3, 8016da0 <__ieee754_log+0x340>)
 8016c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c46:	4680      	mov	r8, r0
 8016c48:	4689      	mov	r9, r1
 8016c4a:	4630      	mov	r0, r6
 8016c4c:	4639      	mov	r1, r7
 8016c4e:	f7e9 fcab 	bl	80005a8 <__aeabi_dmul>
 8016c52:	a355      	add	r3, pc, #340	; (adr r3, 8016da8 <__ieee754_log+0x348>)
 8016c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c58:	f7e9 faf0 	bl	800023c <__adddf3>
 8016c5c:	4632      	mov	r2, r6
 8016c5e:	463b      	mov	r3, r7
 8016c60:	f7e9 fca2 	bl	80005a8 <__aeabi_dmul>
 8016c64:	a352      	add	r3, pc, #328	; (adr r3, 8016db0 <__ieee754_log+0x350>)
 8016c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c6a:	f7e9 fae7 	bl	800023c <__adddf3>
 8016c6e:	4632      	mov	r2, r6
 8016c70:	463b      	mov	r3, r7
 8016c72:	f7e9 fc99 	bl	80005a8 <__aeabi_dmul>
 8016c76:	460b      	mov	r3, r1
 8016c78:	4602      	mov	r2, r0
 8016c7a:	4649      	mov	r1, r9
 8016c7c:	4640      	mov	r0, r8
 8016c7e:	f7e9 fadd 	bl	800023c <__adddf3>
 8016c82:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8016c86:	9b01      	ldr	r3, [sp, #4]
 8016c88:	3551      	adds	r5, #81	; 0x51
 8016c8a:	431d      	orrs	r5, r3
 8016c8c:	2d00      	cmp	r5, #0
 8016c8e:	4680      	mov	r8, r0
 8016c90:	4689      	mov	r9, r1
 8016c92:	dd48      	ble.n	8016d26 <__ieee754_log+0x2c6>
 8016c94:	4b4e      	ldr	r3, [pc, #312]	; (8016dd0 <__ieee754_log+0x370>)
 8016c96:	2200      	movs	r2, #0
 8016c98:	4650      	mov	r0, sl
 8016c9a:	4659      	mov	r1, fp
 8016c9c:	f7e9 fc84 	bl	80005a8 <__aeabi_dmul>
 8016ca0:	4652      	mov	r2, sl
 8016ca2:	465b      	mov	r3, fp
 8016ca4:	f7e9 fc80 	bl	80005a8 <__aeabi_dmul>
 8016ca8:	4602      	mov	r2, r0
 8016caa:	460b      	mov	r3, r1
 8016cac:	4606      	mov	r6, r0
 8016cae:	460f      	mov	r7, r1
 8016cb0:	4640      	mov	r0, r8
 8016cb2:	4649      	mov	r1, r9
 8016cb4:	f7e9 fac2 	bl	800023c <__adddf3>
 8016cb8:	ec53 2b18 	vmov	r2, r3, d8
 8016cbc:	f7e9 fc74 	bl	80005a8 <__aeabi_dmul>
 8016cc0:	4680      	mov	r8, r0
 8016cc2:	4689      	mov	r9, r1
 8016cc4:	b964      	cbnz	r4, 8016ce0 <__ieee754_log+0x280>
 8016cc6:	4602      	mov	r2, r0
 8016cc8:	460b      	mov	r3, r1
 8016cca:	4630      	mov	r0, r6
 8016ccc:	4639      	mov	r1, r7
 8016cce:	f7e9 fab3 	bl	8000238 <__aeabi_dsub>
 8016cd2:	4602      	mov	r2, r0
 8016cd4:	460b      	mov	r3, r1
 8016cd6:	4650      	mov	r0, sl
 8016cd8:	4659      	mov	r1, fp
 8016cda:	f7e9 faad 	bl	8000238 <__aeabi_dsub>
 8016cde:	e6d6      	b.n	8016a8e <__ieee754_log+0x2e>
 8016ce0:	a321      	add	r3, pc, #132	; (adr r3, 8016d68 <__ieee754_log+0x308>)
 8016ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ce6:	ec51 0b19 	vmov	r0, r1, d9
 8016cea:	f7e9 fc5d 	bl	80005a8 <__aeabi_dmul>
 8016cee:	a320      	add	r3, pc, #128	; (adr r3, 8016d70 <__ieee754_log+0x310>)
 8016cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cf4:	4604      	mov	r4, r0
 8016cf6:	460d      	mov	r5, r1
 8016cf8:	ec51 0b19 	vmov	r0, r1, d9
 8016cfc:	f7e9 fc54 	bl	80005a8 <__aeabi_dmul>
 8016d00:	4642      	mov	r2, r8
 8016d02:	464b      	mov	r3, r9
 8016d04:	f7e9 fa9a 	bl	800023c <__adddf3>
 8016d08:	4602      	mov	r2, r0
 8016d0a:	460b      	mov	r3, r1
 8016d0c:	4630      	mov	r0, r6
 8016d0e:	4639      	mov	r1, r7
 8016d10:	f7e9 fa92 	bl	8000238 <__aeabi_dsub>
 8016d14:	4652      	mov	r2, sl
 8016d16:	465b      	mov	r3, fp
 8016d18:	f7e9 fa8e 	bl	8000238 <__aeabi_dsub>
 8016d1c:	4602      	mov	r2, r0
 8016d1e:	460b      	mov	r3, r1
 8016d20:	4620      	mov	r0, r4
 8016d22:	4629      	mov	r1, r5
 8016d24:	e7d9      	b.n	8016cda <__ieee754_log+0x27a>
 8016d26:	4602      	mov	r2, r0
 8016d28:	460b      	mov	r3, r1
 8016d2a:	4650      	mov	r0, sl
 8016d2c:	4659      	mov	r1, fp
 8016d2e:	f7e9 fa83 	bl	8000238 <__aeabi_dsub>
 8016d32:	ec53 2b18 	vmov	r2, r3, d8
 8016d36:	f7e9 fc37 	bl	80005a8 <__aeabi_dmul>
 8016d3a:	4606      	mov	r6, r0
 8016d3c:	460f      	mov	r7, r1
 8016d3e:	2c00      	cmp	r4, #0
 8016d40:	f43f af23 	beq.w	8016b8a <__ieee754_log+0x12a>
 8016d44:	a308      	add	r3, pc, #32	; (adr r3, 8016d68 <__ieee754_log+0x308>)
 8016d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d4a:	ec51 0b19 	vmov	r0, r1, d9
 8016d4e:	f7e9 fc2b 	bl	80005a8 <__aeabi_dmul>
 8016d52:	a307      	add	r3, pc, #28	; (adr r3, 8016d70 <__ieee754_log+0x310>)
 8016d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d58:	4604      	mov	r4, r0
 8016d5a:	460d      	mov	r5, r1
 8016d5c:	ec51 0b19 	vmov	r0, r1, d9
 8016d60:	e727      	b.n	8016bb2 <__ieee754_log+0x152>
 8016d62:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8016db8 <__ieee754_log+0x358>
 8016d66:	e694      	b.n	8016a92 <__ieee754_log+0x32>
 8016d68:	fee00000 	.word	0xfee00000
 8016d6c:	3fe62e42 	.word	0x3fe62e42
 8016d70:	35793c76 	.word	0x35793c76
 8016d74:	3dea39ef 	.word	0x3dea39ef
 8016d78:	55555555 	.word	0x55555555
 8016d7c:	3fd55555 	.word	0x3fd55555
 8016d80:	df3e5244 	.word	0xdf3e5244
 8016d84:	3fc2f112 	.word	0x3fc2f112
 8016d88:	96cb03de 	.word	0x96cb03de
 8016d8c:	3fc74664 	.word	0x3fc74664
 8016d90:	94229359 	.word	0x94229359
 8016d94:	3fd24924 	.word	0x3fd24924
 8016d98:	55555593 	.word	0x55555593
 8016d9c:	3fe55555 	.word	0x3fe55555
 8016da0:	d078c69f 	.word	0xd078c69f
 8016da4:	3fc39a09 	.word	0x3fc39a09
 8016da8:	1d8e78af 	.word	0x1d8e78af
 8016dac:	3fcc71c5 	.word	0x3fcc71c5
 8016db0:	9997fa04 	.word	0x9997fa04
 8016db4:	3fd99999 	.word	0x3fd99999
	...
 8016dc0:	c3500000 	.word	0xc3500000
 8016dc4:	43500000 	.word	0x43500000
 8016dc8:	7fefffff 	.word	0x7fefffff
 8016dcc:	3ff00000 	.word	0x3ff00000
 8016dd0:	3fe00000 	.word	0x3fe00000
 8016dd4:	00000000 	.word	0x00000000

08016dd8 <nan>:
 8016dd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016de0 <nan+0x8>
 8016ddc:	4770      	bx	lr
 8016dde:	bf00      	nop
 8016de0:	00000000 	.word	0x00000000
 8016de4:	7ff80000 	.word	0x7ff80000

08016de8 <_init>:
 8016de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dea:	bf00      	nop
 8016dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016dee:	bc08      	pop	{r3}
 8016df0:	469e      	mov	lr, r3
 8016df2:	4770      	bx	lr

08016df4 <_fini>:
 8016df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016df6:	bf00      	nop
 8016df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016dfa:	bc08      	pop	{r3}
 8016dfc:	469e      	mov	lr, r3
 8016dfe:	4770      	bx	lr
