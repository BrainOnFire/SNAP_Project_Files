
SNAP_Project_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015d38  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e88  08015e78  08015e78  00025e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08016d00  08016d00  00026d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08016d04  08016d04  00026d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001ac  20000004  08016d08  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 BLE_DRIVER_CONTEXT 00000035  200001b0  08016eb4  000301b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  200001e8  08016ee9  000301e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00002370  200001fc  08016efa  000301fc  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  2000256c  08016efa  0003256c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000301f9  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 12 MB_MEM1       000001bb  20030028  20030028  00040000  2**2
                  ALLOC
 13 MB_MEM2       00000883  200301e4  200301e4  00040000  2**2
                  ALLOC
 14 .debug_info   0003f8ea  00000000  00000000  00030229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000821b  00000000  00000000  0006fb13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003748  00000000  00000000  00077d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003380  00000000  00000000  0007b478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000325ff  00000000  00000000  0007e7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000404ce  00000000  00000000  000b0df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00109f85  00000000  00000000  000f12c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001fb24a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f868  00000000  00000000  001fb29c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001fc 	.word	0x200001fc
 800015c:	00000000 	.word	0x00000000
 8000160:	08015e60 	.word	0x08015e60

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000200 	.word	0x20000200
 800017c:	08015e60 	.word	0x08015e60

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_d2iz>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae4:	d215      	bcs.n	8000b12 <__aeabi_d2iz+0x36>
 8000ae6:	d511      	bpl.n	8000b0c <__aeabi_d2iz+0x30>
 8000ae8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af0:	d912      	bls.n	8000b18 <__aeabi_d2iz+0x3c>
 8000af2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	bf18      	it	ne
 8000b08:	4240      	negne	r0, r0
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b16:	d105      	bne.n	8000b24 <__aeabi_d2iz+0x48>
 8000b18:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	bf08      	it	eq
 8000b1e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b22:	4770      	bx	lr
 8000b24:	f04f 0000 	mov.w	r0, #0
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2f>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b34:	bf24      	itt	cs
 8000b36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3e:	d90d      	bls.n	8000b5c <__aeabi_d2f+0x30>
 8000b40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b54:	bf08      	it	eq
 8000b56:	f020 0001 	biceq.w	r0, r0, #1
 8000b5a:	4770      	bx	lr
 8000b5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b60:	d121      	bne.n	8000ba6 <__aeabi_d2f+0x7a>
 8000b62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b66:	bfbc      	itt	lt
 8000b68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	4770      	bxlt	lr
 8000b6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b76:	f1c2 0218 	rsb	r2, r2, #24
 8000b7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b82:	fa20 f002 	lsr.w	r0, r0, r2
 8000b86:	bf18      	it	ne
 8000b88:	f040 0001 	orrne.w	r0, r0, #1
 8000b8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b98:	ea40 000c 	orr.w	r0, r0, ip
 8000b9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba4:	e7cc      	b.n	8000b40 <__aeabi_d2f+0x14>
 8000ba6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000baa:	d107      	bne.n	8000bbc <__aeabi_d2f+0x90>
 8000bac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bba:	4770      	bxne	lr
 8000bbc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000bd6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000bda:	4905      	ldr	r1, [pc, #20]	; (8000bf0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	58000800 	.word	0x58000800

08000bf4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c18:	68fb      	ldr	r3, [r7, #12]
}
 8000c1a:	bf00      	nop
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b085      	sub	sp, #20
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c32:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000c36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c46:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c50:	68fb      	ldr	r3, [r7, #12]
}
 8000c52:	bf00      	nop
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000c62:	f002 f861 	bl	8002d28 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000c66:	f002 f865 	bl	8002d34 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000c6a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000c6e:	f7ff ffad 	bl	8000bcc <LL_EXTI_EnableIT_32_63>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 8000c72:	f000 f821 	bl	8000cb8 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000c76:	f000 f8c3 	bl	8000e00 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000c7a:	bf00      	nop
}
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000c80:	b5b0      	push	{r4, r5, r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <APPD_EnableCPU2+0x34>)
 8000c88:	1d3c      	adds	r4, r7, #4
 8000c8a:	461d      	mov	r5, r3
 8000c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c94:	c403      	stmia	r4!, {r0, r1}
 8000c96:	8022      	strh	r2, [r4, #0]
 8000c98:	3402      	adds	r4, #2
 8000c9a:	0c13      	lsrs	r3, r2, #16
 8000c9c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000c9e:	f010 f807 	bl	8010cb0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f00f faa2 	bl	80101ee <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000caa:	bf00      	nop
}
 8000cac:	3720      	adds	r7, #32
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bdb0      	pop	{r4, r5, r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	08015e78 	.word	0x08015e78

08000cb8 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	77fb      	strb	r3, [r7, #31]
 8000cdc:	e038      	b.n	8000d50 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000cde:	7ffb      	ldrb	r3, [r7, #31]
 8000ce0:	4a44      	ldr	r2, [pc, #272]	; (8000df4 <APPD_SetCPU2GpioConfig+0x13c>)
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	4413      	add	r3, r2
 8000ce6:	799b      	ldrb	r3, [r3, #6]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d02b      	beq.n	8000d44 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000cec:	7ffb      	ldrb	r3, [r7, #31]
 8000cee:	4a41      	ldr	r2, [pc, #260]	; (8000df4 <APPD_SetCPU2GpioConfig+0x13c>)
 8000cf0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000cf4:	4a40      	ldr	r2, [pc, #256]	; (8000df8 <APPD_SetCPU2GpioConfig+0x140>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d01b      	beq.n	8000d32 <APPD_SetCPU2GpioConfig+0x7a>
 8000cfa:	4a3f      	ldr	r2, [pc, #252]	; (8000df8 <APPD_SetCPU2GpioConfig+0x140>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d823      	bhi.n	8000d48 <APPD_SetCPU2GpioConfig+0x90>
 8000d00:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d04:	d003      	beq.n	8000d0e <APPD_SetCPU2GpioConfig+0x56>
 8000d06:	4a3d      	ldr	r2, [pc, #244]	; (8000dfc <APPD_SetCPU2GpioConfig+0x144>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d009      	beq.n	8000d20 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000d0c:	e01c      	b.n	8000d48 <APPD_SetCPU2GpioConfig+0x90>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000d0e:	7ffb      	ldrb	r3, [r7, #31]
 8000d10:	4a38      	ldr	r2, [pc, #224]	; (8000df4 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	4413      	add	r3, r2
 8000d16:	889a      	ldrh	r2, [r3, #4]
 8000d18:	8bbb      	ldrh	r3, [r7, #28]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	83bb      	strh	r3, [r7, #28]
          break;
 8000d1e:	e014      	b.n	8000d4a <APPD_SetCPU2GpioConfig+0x92>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000d20:	7ffb      	ldrb	r3, [r7, #31]
 8000d22:	4a34      	ldr	r2, [pc, #208]	; (8000df4 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	4413      	add	r3, r2
 8000d28:	889a      	ldrh	r2, [r3, #4]
 8000d2a:	8b7b      	ldrh	r3, [r7, #26]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	837b      	strh	r3, [r7, #26]
          break;
 8000d30:	e00b      	b.n	8000d4a <APPD_SetCPU2GpioConfig+0x92>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000d32:	7ffb      	ldrb	r3, [r7, #31]
 8000d34:	4a2f      	ldr	r2, [pc, #188]	; (8000df4 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	4413      	add	r3, r2
 8000d3a:	889a      	ldrh	r2, [r3, #4]
 8000d3c:	8b3b      	ldrh	r3, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	833b      	strh	r3, [r7, #24]
          break;
 8000d42:	e002      	b.n	8000d4a <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000d44:	bf00      	nop
 8000d46:	e000      	b.n	8000d4a <APPD_SetCPU2GpioConfig+0x92>
          break;
 8000d48:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000d4a:	7ffb      	ldrb	r3, [r7, #31]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	77fb      	strb	r3, [r7, #31]
 8000d50:	7ffb      	ldrb	r3, [r7, #31]
 8000d52:	2b25      	cmp	r3, #37	; 0x25
 8000d54:	d9c3      	bls.n	8000cde <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000d62:	8bbb      	ldrh	r3, [r7, #28]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d014      	beq.n	8000d92 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000d68:	8bbb      	ldrh	r3, [r7, #28]
 8000d6a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f7ff ff41 	bl	8000bf4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000d72:	2001      	movs	r0, #1
 8000d74:	f7ff ff57 	bl	8000c26 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d80:	f003 fe70 	bl	8004a64 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000d84:	8bbb      	ldrh	r3, [r7, #28]
 8000d86:	2200      	movs	r2, #0
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8e:	f003 ffe9 	bl	8004d64 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000d92:	8b7b      	ldrh	r3, [r7, #26]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d012      	beq.n	8000dbe <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000d98:	8b7b      	ldrh	r3, [r7, #26]
 8000d9a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9c:	2002      	movs	r0, #2
 8000d9e:	f7ff ff29 	bl	8000bf4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000da2:	2002      	movs	r0, #2
 8000da4:	f7ff ff3f 	bl	8000c26 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	4619      	mov	r1, r3
 8000dac:	4813      	ldr	r0, [pc, #76]	; (8000dfc <APPD_SetCPU2GpioConfig+0x144>)
 8000dae:	f003 fe59 	bl	8004a64 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000db2:	8b7b      	ldrh	r3, [r7, #26]
 8000db4:	2200      	movs	r2, #0
 8000db6:	4619      	mov	r1, r3
 8000db8:	4810      	ldr	r0, [pc, #64]	; (8000dfc <APPD_SetCPU2GpioConfig+0x144>)
 8000dba:	f003 ffd3 	bl	8004d64 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000dbe:	8b3b      	ldrh	r3, [r7, #24]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d013      	beq.n	8000dec <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000dc4:	8b3b      	ldrh	r3, [r7, #24]
 8000dc6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc8:	2004      	movs	r0, #4
 8000dca:	f7ff ff13 	bl	8000bf4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000dce:	2004      	movs	r0, #4
 8000dd0:	f7ff ff29 	bl	8000c26 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4807      	ldr	r0, [pc, #28]	; (8000df8 <APPD_SetCPU2GpioConfig+0x140>)
 8000dda:	f003 fe43 	bl	8004a64 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000dde:	8b3b      	ldrh	r3, [r7, #24]
 8000de0:	2200      	movs	r2, #0
 8000de2:	4619      	mov	r1, r3
 8000de4:	4804      	ldr	r0, [pc, #16]	; (8000df8 <APPD_SetCPU2GpioConfig+0x140>)
 8000de6:	f003 ffbd 	bl	8004d64 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000dea:	bf00      	nop
 8000dec:	bf00      	nop
}
 8000dee:	3720      	adds	r7, #32
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	080160dc 	.word	0x080160dc
 8000df8:	48000800 	.word	0x48000800
 8000dfc:	48000400 	.word	0x48000400

08000e00 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000e04:	bf00      	nop
}
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <LL_C2_PWR_SetPowerMode+0x28>)
 8000e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e1e:	f023 0207 	bic.w	r2, r3, #7
 8000e22:	4905      	ldr	r1, [pc, #20]	; (8000e38 <LL_C2_PWR_SetPowerMode+0x28>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	58000400 	.word	0x58000400

08000e3c <LL_EXTI_EnableIT_32_63>:
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <LL_EXTI_EnableIT_32_63+0x24>)
 8000e46:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000e4a:	4905      	ldr	r1, [pc, #20]	; (8000e60 <LL_EXTI_EnableIT_32_63+0x24>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	58000800 	.word	0x58000800

08000e64 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e70:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000e72:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e7e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	cafecafe 	.word	0xcafecafe

08000ea0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	608b      	str	r3, [r1, #8]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ed4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000edc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ef6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000efe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000f20:	d101      	bne.n	8000f26 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f46:	d101      	bne.n	8000f4c <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e000      	b.n	8000f4e <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <LL_AHB3_GRP1_EnableClock>:
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <LL_DBGMCU_GetDeviceID+0x18>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e0042000 	.word	0xe0042000

08000fa8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <LL_DBGMCU_GetRevisionID+0x18>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	0c1b      	lsrs	r3, r3, #16
 8000fb2:	b29b      	uxth	r3, r3
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e0042000 	.word	0xe0042000

08000fc4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	041b      	lsls	r3, r3, #16
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	605a      	str	r2, [r3, #4]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	605a      	str	r2, [r3, #4]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	695a      	ldr	r2, [r3, #20]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	041b      	lsls	r3, r3, #16
 800101c:	431a      	orrs	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	615a      	str	r2, [r3, #20]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	695a      	ldr	r2, [r3, #20]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	431a      	orrs	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	615a      	str	r2, [r3, #20]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	609a      	str	r2, [r3, #8]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	619a      	str	r2, [r3, #24]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <LL_LPM_EnableSleep+0x1c>)
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <LL_LPM_EnableSleep+0x1c>)
 8001092:	f023 0304 	bic.w	r3, r3, #4
 8001096:	6113      	str	r3, [r2, #16]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	22ff      	movs	r2, #255	; 0xff
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	22ca      	movs	r2, #202	; 0xca
 80010ce:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2253      	movs	r2, #83	; 0x53
 80010d4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f023 0207 	bic.w	r2, r3, #7
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	431a      	orrs	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	609a      	str	r2, [r3, #8]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <MX_APPE_Config+0x18>)
 800110e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001112:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001114:	f000 f826 	bl	8001164 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001118:	f000 f866 	bl	80011e8 <Config_HSE>

  return;
 800111c:	bf00      	nop
}
 800111e:	bd80      	pop	{r7, pc}
 8001120:	58004000 	.word	0x58004000

08001124 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001128:	f000 f872 	bl	8001210 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800112c:	f000 f88a 	bl	8001244 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001130:	4904      	ldr	r1, [pc, #16]	; (8001144 <MX_APPE_Init+0x20>)
 8001132:	2000      	movs	r0, #0
 8001134:	f000 f9e8 	bl	8001508 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001138:	f7ff fd91 	bl	8000c5e <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800113c:	f000 f890 	bl	8001260 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001140:	bf00      	nop
}
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000040c 	.word	0x2000040c

08001148 <Init_Smps>:

void Init_Smps(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800114c:	bf00      	nop
}
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <Init_Exti>:

void Init_Exti(void)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800115a:	2050      	movs	r0, #80	; 0x50
 800115c:	f7ff fe6e 	bl	8000e3c <LL_EXTI_EnableIT_32_63>

  return;
 8001160:	bf00      	nop
}
 8001162:	bd80      	pop	{r7, pc}

08001164 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8001168:	f000 f804 	bl	8001174 <Reset_BackupDomain>

  Reset_IPCC();
 800116c:	f000 f81a 	bl	80011a4 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001170:	bf00      	nop
}
 8001172:	bd80      	pop	{r7, pc}

08001174 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001178:	f7ff fec8 	bl	8000f0c <LL_RCC_IsActiveFlag_PINRST>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00d      	beq.n	800119e <Reset_BackupDomain+0x2a>
 8001182:	f7ff fed6 	bl	8000f32 <LL_RCC_IsActiveFlag_SFTRST>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d108      	bne.n	800119e <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800118c:	f006 fc22 	bl	80079d4 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001190:	f006 fc20 	bl	80079d4 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001194:	f7ff fe98 	bl	8000ec8 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001198:	f7ff fea7 	bl	8000eea <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 800119c:	bf00      	nop
 800119e:	bf00      	nop
}
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80011a8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80011ac:	f7ff fed4 	bl	8000f58 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80011b0:	213f      	movs	r1, #63	; 0x3f
 80011b2:	480c      	ldr	r0, [pc, #48]	; (80011e4 <Reset_IPCC+0x40>)
 80011b4:	f7ff ff4c 	bl	8001050 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80011b8:	213f      	movs	r1, #63	; 0x3f
 80011ba:	480a      	ldr	r0, [pc, #40]	; (80011e4 <Reset_IPCC+0x40>)
 80011bc:	f7ff ff56 	bl	800106c <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80011c0:	213f      	movs	r1, #63	; 0x3f
 80011c2:	4808      	ldr	r0, [pc, #32]	; (80011e4 <Reset_IPCC+0x40>)
 80011c4:	f7ff fefe 	bl	8000fc4 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80011c8:	213f      	movs	r1, #63	; 0x3f
 80011ca:	4806      	ldr	r0, [pc, #24]	; (80011e4 <Reset_IPCC+0x40>)
 80011cc:	f7ff ff1d 	bl	800100a <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80011d0:	213f      	movs	r1, #63	; 0x3f
 80011d2:	4804      	ldr	r0, [pc, #16]	; (80011e4 <Reset_IPCC+0x40>)
 80011d4:	f7ff ff08 	bl	8000fe8 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80011d8:	213f      	movs	r1, #63	; 0x3f
 80011da:	4802      	ldr	r0, [pc, #8]	; (80011e4 <Reset_IPCC+0x40>)
 80011dc:	f7ff ff27 	bl	800102e <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80011e0:	bf00      	nop
}
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	58000c00 	.word	0x58000c00

080011e8 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80011ee:	2000      	movs	r0, #0
 80011f0:	f00f fdea 	bl	8010dc8 <OTP_Read>
 80011f4:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d005      	beq.n	8001208 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	799b      	ldrb	r3, [r3, #6]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fe2f 	bl	8000e64 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001206:	bf00      	nop
 8001208:	bf00      	nop
}
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <System_Init>:

static void System_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  Init_Smps();
 8001214:	f7ff ff98 	bl	8001148 <Init_Smps>

  Init_Exti();
 8001218:	f7ff ff9d 	bl	8001156 <Init_Exti>

  Init_Rtc();
 800121c:	f000 f802 	bl	8001224 <Init_Rtc>

  return;
 8001220:	bf00      	nop
}
 8001222:	bd80      	pop	{r7, pc}

08001224 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <Init_Rtc+0x1c>)
 800122a:	f7ff ff4a 	bl	80010c2 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800122e:	2100      	movs	r1, #0
 8001230:	4803      	ldr	r0, [pc, #12]	; (8001240 <Init_Rtc+0x1c>)
 8001232:	f7ff ff56 	bl	80010e2 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001236:	4802      	ldr	r0, [pc, #8]	; (8001240 <Init_Rtc+0x1c>)
 8001238:	f7ff ff36 	bl	80010a8 <LL_RTC_EnableWriteProtection>

  return;
 800123c:	bf00      	nop
}
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40002800 	.word	0x40002800

08001244 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001248:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800124c:	f7ff fe28 	bl	8000ea0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001250:	f011 ffb6 	bl	80131c0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001254:	2004      	movs	r0, #4
 8001256:	f7ff fddb 	bl	8000e10 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800125a:	bf00      	nop
}
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001266:	f00f fb6d 	bl	8010944 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800126a:	4a11      	ldr	r2, [pc, #68]	; (80012b0 <appe_Tl_Init+0x50>)
 800126c:	2100      	movs	r1, #0
 800126e:	2040      	movs	r0, #64	; 0x40
 8001270:	f012 f8e4 	bl	801343c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <appe_Tl_Init+0x54>)
 8001276:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <appe_Tl_Init+0x58>)
 800127a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800127c:	463b      	mov	r3, r7
 800127e:	4619      	mov	r1, r3
 8001280:	480e      	ldr	r0, [pc, #56]	; (80012bc <appe_Tl_Init+0x5c>)
 8001282:	f00f fa25 	bl	80106d0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <appe_Tl_Init+0x60>)
 8001288:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <appe_Tl_Init+0x64>)
 800128c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <appe_Tl_Init+0x68>)
 8001290:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001292:	f240 533c 	movw	r3, #1340	; 0x53c
 8001296:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001298:	f107 0308 	add.w	r3, r7, #8
 800129c:	4618      	mov	r0, r3
 800129e:	f00f fc93 	bl	8010bc8 <TL_MM_Init>

  TL_Enable();
 80012a2:	f00f fb49 	bl	8010938 <TL_Enable>

  return;
 80012a6:	bf00      	nop
}
 80012a8:	3720      	adds	r7, #32
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	08010709 	.word	0x08010709
 80012b4:	20030734 	.word	0x20030734
 80012b8:	080012cd 	.word	0x080012cd
 80012bc:	080012e5 	.word	0x080012e5
 80012c0:	2003094c 	.word	0x2003094c
 80012c4:	20030840 	.word	0x20030840
 80012c8:	200301f8 	.word	0x200301f8

080012cc <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80012d6:	bf00      	nop
}
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	330b      	adds	r3, #11
 80012f2:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80012fe:	2b07      	cmp	r3, #7
 8001300:	d81f      	bhi.n	8001342 <APPE_SysUserEvtRx+0x5e>
 8001302:	a201      	add	r2, pc, #4	; (adr r2, 8001308 <APPE_SysUserEvtRx+0x24>)
 8001304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001308:	08001329 	.word	0x08001329
 800130c:	0800133b 	.word	0x0800133b
 8001310:	08001343 	.word	0x08001343
 8001314:	08001343 	.word	0x08001343
 8001318:	08001343 	.word	0x08001343
 800131c:	08001343 	.word	0x08001343
 8001320:	08001343 	.word	0x08001343
 8001324:	08001343 	.word	0x08001343
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	4618      	mov	r0, r3
 800132e:	f00e ff8b 	bl	8010248 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 f81b 	bl	800136e <APPE_SysEvtReadyProcessing>
    break;
 8001338:	e004      	b.n	8001344 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 f806 	bl	800134c <APPE_SysEvtError>
    break;
 8001340:	e000      	b.n	8001344 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8001342:	bf00      	nop
  }

  return;
 8001344:	bf00      	nop
}
 8001346:	3720      	adds	r7, #32
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	330b      	adds	r3, #11
 800135a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	3302      	adds	r3, #2
 8001360:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001362:	bf00      	nop
}
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b08a      	sub	sp, #40	; 0x28
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8001388:	2300      	movs	r3, #0
 800138a:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	330b      	adds	r3, #11
 8001392:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	3302      	adds	r3, #2
 8001398:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d11d      	bne.n	80013de <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80013a2:	f7ff fc6d 	bl	8000c80 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80013a6:	230f      	movs	r3, #15
 80013a8:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80013aa:	237f      	movs	r3, #127	; 0x7f
 80013ac:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80013ae:	f7ff fdfb 	bl	8000fa8 <LL_DBGMCU_GetRevisionID>
 80013b2:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80013ba:	f7ff fde7 	bl	8000f8c <LL_DBGMCU_GetDeviceID>
 80013be:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	4618      	mov	r0, r3
 80013cc:	f00e ff26 	bl	801021c <SHCI_C2_Config>

    APP_BLE_Init();
 80013d0:	f00f fe04 	bl	8010fdc <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80013d4:	2100      	movs	r1, #0
 80013d6:	2001      	movs	r0, #1
 80013d8:	f011 ff04 	bl	80131e4 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80013dc:	e007      	b.n	80013ee <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d103      	bne.n	80013ee <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
  return;
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
}
 80013f0:	3728      	adds	r7, #40	; 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b084      	sub	sp, #16
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013fe:	f001 fc6f 	bl	8002ce0 <HAL_GetTick>
 8001402:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800140e:	d00a      	beq.n	8001426 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001410:	f001 fc7e 	bl	8002d10 <HAL_GetTickFreq>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4413      	add	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800141e:	e002      	b.n	8001426 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001420:	f7ff fe32 	bl	8001088 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8001424:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001426:	f001 fc5b 	bl	8002ce0 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	429a      	cmp	r2, r3
 8001434:	d8f4      	bhi.n	8001420 <HAL_Delay+0x2a>
  }
}
 8001436:	bf00      	nop
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001444:	f04f 30ff 	mov.w	r0, #4294967295
 8001448:	f011 fefc 	bl	8013244 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}

08001450 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001454:	bf00      	nop
}
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f011 feea 	bl	8013244 <UTIL_SEQ_Run>

  return;
 8001470:	bf00      	nop
}
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001480:	2100      	movs	r1, #0
 8001482:	2040      	movs	r0, #64	; 0x40
 8001484:	f011 fffc 	bl	8013480 <UTIL_SEQ_SetTask>
  return;
 8001488:	bf00      	nop
}
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001498:	2002      	movs	r0, #2
 800149a:	f012 f85d 	bl	8013558 <UTIL_SEQ_SetEvt>
  return;
 800149e:	bf00      	nop
}
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80014ae:	2002      	movs	r0, #2
 80014b0:	f012 f872 	bl	8013598 <UTIL_SEQ_WaitEvt>
  return;
 80014b4:	bf00      	nop
}
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <LL_EXTI_EnableIT_0_31>:
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <LL_EXTI_EnableIT_0_31+0x24>)
 80014c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80014ca:	4905      	ldr	r1, [pc, #20]	; (80014e0 <LL_EXTI_EnableIT_0_31+0x24>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	58000800 	.word	0x58000800

080014e4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4904      	ldr	r1, [pc, #16]	; (8001504 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	600b      	str	r3, [r1, #0]

}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	58000800 	.word	0x58000800

08001508 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001514:	4b5e      	ldr	r3, [pc, #376]	; (8001690 <HW_TS_Init+0x188>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	22ca      	movs	r2, #202	; 0xca
 800151a:	625a      	str	r2, [r3, #36]	; 0x24
 800151c:	4b5c      	ldr	r3, [pc, #368]	; (8001690 <HW_TS_Init+0x188>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2253      	movs	r2, #83	; 0x53
 8001522:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001524:	4b5b      	ldr	r3, [pc, #364]	; (8001694 <HW_TS_Init+0x18c>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	4a5a      	ldr	r2, [pc, #360]	; (8001694 <HW_TS_Init+0x18c>)
 800152a:	f043 0320 	orr.w	r3, r3, #32
 800152e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001530:	4b58      	ldr	r3, [pc, #352]	; (8001694 <HW_TS_Init+0x18c>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	b2db      	uxtb	r3, r3
 800153c:	f1c3 0304 	rsb	r3, r3, #4
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b55      	ldr	r3, [pc, #340]	; (8001698 <HW_TS_Init+0x190>)
 8001544:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001546:	4b53      	ldr	r3, [pc, #332]	; (8001694 <HW_TS_Init+0x18c>)
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800154e:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001552:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	fa92 f2a2 	rbit	r2, r2
 800155a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	2a00      	cmp	r2, #0
 8001564:	d101      	bne.n	800156a <HW_TS_Init+0x62>
  {
    return 32U;
 8001566:	2220      	movs	r2, #32
 8001568:	e003      	b.n	8001572 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	fab2 f282 	clz	r2, r2
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	40d3      	lsrs	r3, r2
 8001574:	b2db      	uxtb	r3, r3
 8001576:	3301      	adds	r3, #1
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4b48      	ldr	r3, [pc, #288]	; (800169c <HW_TS_Init+0x194>)
 800157c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800157e:	4b45      	ldr	r3, [pc, #276]	; (8001694 <HW_TS_Init+0x18c>)
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	b29b      	uxth	r3, r3
 8001584:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001588:	b29b      	uxth	r3, r3
 800158a:	3301      	adds	r3, #1
 800158c:	b29a      	uxth	r2, r3
 800158e:	4b44      	ldr	r3, [pc, #272]	; (80016a0 <HW_TS_Init+0x198>)
 8001590:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001592:	4b43      	ldr	r3, [pc, #268]	; (80016a0 <HW_TS_Init+0x198>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	3b01      	subs	r3, #1
 8001598:	4a40      	ldr	r2, [pc, #256]	; (800169c <HW_TS_Init+0x194>)
 800159a:	7812      	ldrb	r2, [r2, #0]
 800159c:	fb02 f303 	mul.w	r3, r2, r3
 80015a0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80015a4:	4a3c      	ldr	r2, [pc, #240]	; (8001698 <HW_TS_Init+0x190>)
 80015a6:	7812      	ldrb	r2, [r2, #0]
 80015a8:	40d3      	lsrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d904      	bls.n	80015c0 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80015b6:	4b3b      	ldr	r3, [pc, #236]	; (80016a4 <HW_TS_Init+0x19c>)
 80015b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015bc:	801a      	strh	r2, [r3, #0]
 80015be:	e003      	b.n	80015c8 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	4b37      	ldr	r3, [pc, #220]	; (80016a4 <HW_TS_Init+0x19c>)
 80015c6:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80015c8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80015cc:	f7ff ff8a 	bl	80014e4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80015d0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80015d4:	f7ff ff72 	bl	80014bc <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d13d      	bne.n	800165a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80015de:	4b32      	ldr	r3, [pc, #200]	; (80016a8 <HW_TS_Init+0x1a0>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80015e4:	4b31      	ldr	r3, [pc, #196]	; (80016ac <HW_TS_Init+0x1a4>)
 80015e6:	f04f 32ff 	mov.w	r2, #4294967295
 80015ea:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	77fb      	strb	r3, [r7, #31]
 80015f0:	e00c      	b.n	800160c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80015f2:	7ffa      	ldrb	r2, [r7, #31]
 80015f4:	492e      	ldr	r1, [pc, #184]	; (80016b0 <HW_TS_Init+0x1a8>)
 80015f6:	4613      	mov	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	440b      	add	r3, r1
 8001600:	330c      	adds	r3, #12
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001606:	7ffb      	ldrb	r3, [r7, #31]
 8001608:	3301      	adds	r3, #1
 800160a:	77fb      	strb	r3, [r7, #31]
 800160c:	7ffb      	ldrb	r3, [r7, #31]
 800160e:	2b05      	cmp	r3, #5
 8001610:	d9ef      	bls.n	80015f2 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001612:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <HW_TS_Init+0x1ac>)
 8001614:	2206      	movs	r2, #6
 8001616:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001618:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <HW_TS_Init+0x188>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <HW_TS_Init+0x188>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001626:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <HW_TS_Init+0x188>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HW_TS_Init+0x188>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001638:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800163a:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <HW_TS_Init+0x1b0>)
 800163c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001640:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001642:	2003      	movs	r0, #3
 8001644:	f002 ff2b 	bl	800449e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HW_TS_Init+0x188>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <HW_TS_Init+0x188>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	e009      	b.n	800166e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800165a:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <HW_TS_Init+0x188>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001668:	2003      	movs	r0, #3
 800166a:	f002 ff0a 	bl	8004482 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <HW_TS_Init+0x188>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	22ff      	movs	r2, #255	; 0xff
 8001674:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001676:	2200      	movs	r2, #0
 8001678:	2103      	movs	r1, #3
 800167a:	2003      	movs	r0, #3
 800167c:	f002 fecd 	bl	800441a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001680:	2003      	movs	r0, #3
 8001682:	f002 fee4 	bl	800444e <HAL_NVIC_EnableIRQ>

  return;
 8001686:	bf00      	nop
}
 8001688:	3720      	adds	r7, #32
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000040c 	.word	0x2000040c
 8001694:	40002800 	.word	0x40002800
 8001698:	200002b1 	.word	0x200002b1
 800169c:	200002b2 	.word	0x200002b2
 80016a0:	200002b4 	.word	0x200002b4
 80016a4:	200002b6 	.word	0x200002b6
 80016a8:	200002b0 	.word	0x200002b0
 80016ac:	200002ac 	.word	0x200002ac
 80016b0:	20000218 	.word	0x20000218
 80016b4:	200002a8 	.word	0x200002a8
 80016b8:	58000800 	.word	0x58000800

080016bc <LL_RCC_LSE_SetDriveCapability>:
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80016c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016cc:	f023 0218 	bic.w	r2, r3, #24
 80016d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_AHB1_GRP1_EnableClock>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001704:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4013      	ands	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800170c:	68fb      	ldr	r3, [r7, #12]
}
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <LL_AHB2_GRP1_EnableClock>:
{
 800171a:	b480      	push	{r7}
 800171c:	b085      	sub	sp, #20
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001726:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001728:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4313      	orrs	r3, r2
 8001730:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001736:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4013      	ands	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800173e:	68fb      	ldr	r3, [r7, #12]
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001750:	f001 fa58 	bl	8002c04 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001754:	f7ff fcd8 	bl	8001108 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001758:	f000 f822 	bl	80017a0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800175c:	f000 f894 	bl	8001888 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001760:	f000 f968 	bl	8001a34 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001764:	f000 fa3e 	bl	8001be4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001768:	f000 fa2a 	bl	8001bc0 <MX_DMA_Init>
  MX_USB_Device_Init();
 800176c:	f010 ffec 	bl	8012748 <MX_USB_Device_Init>
  MX_ADC1_Init();
 8001770:	f000 f8aa 	bl	80018c8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001774:	f000 f91e 	bl	80019b4 <MX_I2C1_Init>
  MX_RTC_Init();
 8001778:	f000 f978 	bl	8001a6c <MX_RTC_Init>
  MX_TIM2_Init();
 800177c:	f000 f9aa 	bl	8001ad4 <MX_TIM2_Init>
  MX_RF_Init();
 8001780:	f000 f96c 	bl	8001a5c <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, MT3608_EN_Pin, GPIO_PIN_SET); 	/*Toggle 5V rail*/
 8001784:	2201      	movs	r2, #1
 8001786:	2140      	movs	r1, #64	; 0x40
 8001788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178c:	f003 faea 	bl	8004d64 <HAL_GPIO_WritePin>
  SSD1306_Init();											/*Init OLED Screen*/
 8001790:	f000 fbfe 	bl	8001f90 <SSD1306_Init>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001794:	f7ff fcc6 	bl	8001124 <MX_APPE_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001798:	f7ff fe52 	bl	8001440 <MX_APPE_Process>
 800179c:	e7fc      	b.n	8001798 <main+0x4c>
	...

080017a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b09a      	sub	sp, #104	; 0x68
 80017a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a6:	f107 0320 	add.w	r3, r7, #32
 80017aa:	2248      	movs	r2, #72	; 0x48
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f012 f812 	bl	80137d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	611a      	str	r2, [r3, #16]
 80017c2:	615a      	str	r2, [r3, #20]
 80017c4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80017c6:	f006 f905 	bl	80079d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80017ca:	2000      	movs	r0, #0
 80017cc:	f7ff ff76 	bl	80016bc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d0:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <SystemClock_Config+0xe4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017d8:	4a2a      	ldr	r2, [pc, #168]	; (8001884 <SystemClock_Config+0xe4>)
 80017da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b28      	ldr	r3, [pc, #160]	; (8001884 <SystemClock_Config+0xe4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017e8:	603b      	str	r3, [r7, #0]
 80017ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80017ec:	2327      	movs	r3, #39	; 0x27
 80017ee:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017f6:	2301      	movs	r3, #1
 80017f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001800:	2301      	movs	r3, #1
 8001802:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001804:	2340      	movs	r3, #64	; 0x40
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001808:	2300      	movs	r3, #0
 800180a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800180c:	2360      	movs	r3, #96	; 0x60
 800180e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001810:	2302      	movs	r3, #2
 8001812:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001814:	2301      	movs	r3, #1
 8001816:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001818:	2300      	movs	r3, #0
 800181a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 800181c:	2318      	movs	r3, #24
 800181e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV24;
 8001820:	f44f 1338 	mov.w	r3, #3014656	; 0x2e0000
 8001824:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001826:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800182a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800182c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001830:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001832:	f107 0320 	add.w	r3, r7, #32
 8001836:	4618      	mov	r0, r3
 8001838:	f006 fc58 	bl	80080ec <HAL_RCC_OscConfig>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001842:	f000 fa61 	bl	8001d08 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001846:	236f      	movs	r3, #111	; 0x6f
 8001848:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800184a:	2302      	movs	r3, #2
 800184c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	2101      	movs	r1, #1
 8001866:	4618      	mov	r0, r3
 8001868:	f006 ffb4 	bl	80087d4 <HAL_RCC_ClockConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001872:	f000 fa49 	bl	8001d08 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001876:	f007 fd43 	bl	8009300 <HAL_RCCEx_EnableMSIPLLMode>
}
 800187a:	bf00      	nop
 800187c:	3768      	adds	r7, #104	; 0x68
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	58000400 	.word	0x58000400

08001888 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b094      	sub	sp, #80	; 0x50
 800188c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800188e:	463b      	mov	r3, r7
 8001890:	2250      	movs	r2, #80	; 0x50
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f011 ff9f 	bl	80137d8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800189a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800189e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80018a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018a4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80018a6:	2300      	movs	r3, #0
 80018a8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80018aa:	2310      	movs	r3, #16
 80018ac:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ae:	463b      	mov	r3, r7
 80018b0:	4618      	mov	r0, r3
 80018b2:	f007 fbaf 	bl	8009014 <HAL_RCCEx_PeriphCLKConfig>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80018bc:	f000 fa24 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80018c0:	bf00      	nop
 80018c2:	3750      	adds	r7, #80	; 0x50
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ce:	463b      	mov	r3, r7
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
 80018dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80018de:	4b31      	ldr	r3, [pc, #196]	; (80019a4 <MX_ADC1_Init+0xdc>)
 80018e0:	4a31      	ldr	r2, [pc, #196]	; (80019a8 <MX_ADC1_Init+0xe0>)
 80018e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80018e4:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <MX_ADC1_Init+0xdc>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018ea:	4b2e      	ldr	r3, [pc, #184]	; (80019a4 <MX_ADC1_Init+0xdc>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018f0:	4b2c      	ldr	r3, [pc, #176]	; (80019a4 <MX_ADC1_Init+0xdc>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80018f6:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <MX_ADC1_Init+0xdc>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018fc:	4b29      	ldr	r3, [pc, #164]	; (80019a4 <MX_ADC1_Init+0xdc>)
 80018fe:	2204      	movs	r2, #4
 8001900:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001902:	4b28      	ldr	r3, [pc, #160]	; (80019a4 <MX_ADC1_Init+0xdc>)
 8001904:	2200      	movs	r2, #0
 8001906:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001908:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <MX_ADC1_Init+0xdc>)
 800190a:	2200      	movs	r2, #0
 800190c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800190e:	4b25      	ldr	r3, [pc, #148]	; (80019a4 <MX_ADC1_Init+0xdc>)
 8001910:	2202      	movs	r2, #2
 8001912:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001914:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <MX_ADC1_Init+0xdc>)
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800191c:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <MX_ADC1_Init+0xdc>)
 800191e:	2200      	movs	r2, #0
 8001920:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <MX_ADC1_Init+0xdc>)
 8001924:	2200      	movs	r2, #0
 8001926:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001928:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <MX_ADC1_Init+0xdc>)
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001930:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <MX_ADC1_Init+0xdc>)
 8001932:	2200      	movs	r2, #0
 8001934:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001936:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <MX_ADC1_Init+0xdc>)
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800193e:	4819      	ldr	r0, [pc, #100]	; (80019a4 <MX_ADC1_Init+0xdc>)
 8001940:	f001 fc14 	bl	800316c <HAL_ADC_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800194a:	f000 f9dd 	bl	8001d08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <MX_ADC1_Init+0xe4>)
 8001950:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001952:	2306      	movs	r3, #6
 8001954:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800195a:	237f      	movs	r3, #127	; 0x7f
 800195c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800195e:	2304      	movs	r3, #4
 8001960:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001966:	463b      	mov	r3, r7
 8001968:	4619      	mov	r1, r3
 800196a:	480e      	ldr	r0, [pc, #56]	; (80019a4 <MX_ADC1_Init+0xdc>)
 800196c:	f001 fe4e 	bl	800360c <HAL_ADC_ConfigChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001976:	f000 f9c7 	bl	8001d08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <MX_ADC1_Init+0xe8>)
 800197c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800197e:	230c      	movs	r3, #12
 8001980:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001982:	2307      	movs	r3, #7
 8001984:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001986:	463b      	mov	r3, r7
 8001988:	4619      	mov	r1, r3
 800198a:	4806      	ldr	r0, [pc, #24]	; (80019a4 <MX_ADC1_Init+0xdc>)
 800198c:	f001 fe3e 	bl	800360c <HAL_ADC_ConfigChannel>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001996:	f000 f9b7 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200002b8 	.word	0x200002b8
 80019a8:	50040000 	.word	0x50040000
 80019ac:	32601000 	.word	0x32601000
 80019b0:	19200040 	.word	0x19200040

080019b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019b8:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <MX_I2C1_Init+0x74>)
 80019ba:	4a1c      	ldr	r2, [pc, #112]	; (8001a2c <MX_I2C1_Init+0x78>)
 80019bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 80019be:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <MX_I2C1_Init+0x74>)
 80019c0:	4a1b      	ldr	r2, [pc, #108]	; (8001a30 <MX_I2C1_Init+0x7c>)
 80019c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019c4:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <MX_I2C1_Init+0x74>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ca:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <MX_I2C1_Init+0x74>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019d0:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <MX_I2C1_Init+0x74>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019d6:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <MX_I2C1_Init+0x74>)
 80019d8:	2200      	movs	r2, #0
 80019da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <MX_I2C1_Init+0x74>)
 80019de:	2200      	movs	r2, #0
 80019e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <MX_I2C1_Init+0x74>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <MX_I2C1_Init+0x74>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019ee:	480e      	ldr	r0, [pc, #56]	; (8001a28 <MX_I2C1_Init+0x74>)
 80019f0:	f003 fa0c 	bl	8004e0c <HAL_I2C_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80019fa:	f000 f985 	bl	8001d08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019fe:	2100      	movs	r1, #0
 8001a00:	4809      	ldr	r0, [pc, #36]	; (8001a28 <MX_I2C1_Init+0x74>)
 8001a02:	f004 f985 	bl	8005d10 <HAL_I2CEx_ConfigAnalogFilter>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a0c:	f000 f97c 	bl	8001d08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a10:	2100      	movs	r1, #0
 8001a12:	4805      	ldr	r0, [pc, #20]	; (8001a28 <MX_I2C1_Init+0x74>)
 8001a14:	f004 f9c7 	bl	8005da6 <HAL_I2CEx_ConfigDigitalFilter>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a1e:	f000 f973 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2000037c 	.word	0x2000037c
 8001a2c:	40005400 	.word	0x40005400
 8001a30:	0010061a 	.word	0x0010061a

08001a34 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <MX_IPCC_Init+0x20>)
 8001a3a:	4a07      	ldr	r2, [pc, #28]	; (8001a58 <MX_IPCC_Init+0x24>)
 8001a3c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <MX_IPCC_Init+0x20>)
 8001a40:	f004 f9fe 	bl	8005e40 <HAL_IPCC_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001a4a:	f000 f95d 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200003d0 	.word	0x200003d0
 8001a58:	58000c00 	.word	0x58000c00

08001a5c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a70:	4b16      	ldr	r3, [pc, #88]	; (8001acc <MX_RTC_Init+0x60>)
 8001a72:	4a17      	ldr	r2, [pc, #92]	; (8001ad0 <MX_RTC_Init+0x64>)
 8001a74:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <MX_RTC_Init+0x60>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <MX_RTC_Init+0x60>)
 8001a7e:	220f      	movs	r2, #15
 8001a80:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001a82:	4b12      	ldr	r3, [pc, #72]	; (8001acc <MX_RTC_Init+0x60>)
 8001a84:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001a88:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <MX_RTC_Init+0x60>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a90:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <MX_RTC_Init+0x60>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a96:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <MX_RTC_Init+0x60>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <MX_RTC_Init+0x60>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001aa2:	480a      	ldr	r0, [pc, #40]	; (8001acc <MX_RTC_Init+0x60>)
 8001aa4:	f007 fd44 	bl	8009530 <HAL_RTC_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001aae:	f000 f92b 	bl	8001d08 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_RTC_Init+0x60>)
 8001ab8:	f007 fe3a 	bl	8009730 <HAL_RTCEx_SetWakeUpTimer>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001ac2:	f000 f921 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	2000040c 	.word	0x2000040c
 8001ad0:	40002800 	.word	0x40002800

08001ad4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08e      	sub	sp, #56	; 0x38
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ada:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae8:	f107 031c 	add.w	r3, r7, #28
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001af4:	463b      	mov	r3, r7
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	60da      	str	r2, [r3, #12]
 8001b00:	611a      	str	r2, [r3, #16]
 8001b02:	615a      	str	r2, [r3, #20]
 8001b04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b06:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <MX_TIM2_Init+0xe8>)
 8001b08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b0e:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <MX_TIM2_Init+0xe8>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b14:	4b29      	ldr	r3, [pc, #164]	; (8001bbc <MX_TIM2_Init+0xe8>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b1a:	4b28      	ldr	r3, [pc, #160]	; (8001bbc <MX_TIM2_Init+0xe8>)
 8001b1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b22:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <MX_TIM2_Init+0xe8>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b28:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <MX_TIM2_Init+0xe8>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b2e:	4823      	ldr	r0, [pc, #140]	; (8001bbc <MX_TIM2_Init+0xe8>)
 8001b30:	f007 fe99 	bl	8009866 <HAL_TIM_Base_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001b3a:	f000 f8e5 	bl	8001d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	481c      	ldr	r0, [pc, #112]	; (8001bbc <MX_TIM2_Init+0xe8>)
 8001b4c:	f008 f9ba 	bl	8009ec4 <HAL_TIM_ConfigClockSource>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001b56:	f000 f8d7 	bl	8001d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b5a:	4818      	ldr	r0, [pc, #96]	; (8001bbc <MX_TIM2_Init+0xe8>)
 8001b5c:	f007 feda 	bl	8009914 <HAL_TIM_PWM_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001b66:	f000 f8cf 	bl	8001d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b72:	f107 031c 	add.w	r3, r7, #28
 8001b76:	4619      	mov	r1, r3
 8001b78:	4810      	ldr	r0, [pc, #64]	; (8001bbc <MX_TIM2_Init+0xe8>)
 8001b7a:	f008 fe11 	bl	800a7a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b84:	f000 f8c0 	bl	8001d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b88:	2360      	movs	r3, #96	; 0x60
 8001b8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b98:	463b      	mov	r3, r7
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4807      	ldr	r0, [pc, #28]	; (8001bbc <MX_TIM2_Init+0xe8>)
 8001ba0:	f008 f87c 	bl	8009c9c <HAL_TIM_PWM_ConfigChannel>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001baa:	f000 f8ad 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bae:	4803      	ldr	r0, [pc, #12]	; (8001bbc <MX_TIM2_Init+0xe8>)
 8001bb0:	f000 fe3a 	bl	8002828 <HAL_TIM_MspPostInit>

}
 8001bb4:	bf00      	nop
 8001bb6:	3738      	adds	r7, #56	; 0x38
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000430 	.word	0x20000430

08001bc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001bc4:	2004      	movs	r0, #4
 8001bc6:	f7ff fd8f 	bl	80016e8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f7ff fd8c 	bl	80016e8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	200b      	movs	r0, #11
 8001bd6:	f002 fc20 	bl	800441a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bda:	200b      	movs	r0, #11
 8001bdc:	f002 fc37 	bl	800444e <HAL_NVIC_EnableIRQ>

}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf8:	2004      	movs	r0, #4
 8001bfa:	f7ff fd8e 	bl	800171a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	2001      	movs	r0, #1
 8001c00:	f7ff fd8b 	bl	800171a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c04:	2002      	movs	r0, #2
 8001c06:	f7ff fd88 	bl	800171a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c0a:	2010      	movs	r0, #16
 8001c0c:	f7ff fd85 	bl	800171a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RGB_RED_Pin|RGB_BLUE_Pin|RGB_GREEN_Pin|MT3608_EN_Pin
 8001c10:	2200      	movs	r2, #0
 8001c12:	f240 415c 	movw	r1, #1116	; 0x45c
 8001c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1a:	f003 f8a3 	bl	8004d64 <HAL_GPIO_WritePin>
                          |LED_WP7_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_SHT31_GPIO_Port, RESET_SHT31_Pin, GPIO_PIN_SET);
 8001c1e:	2201      	movs	r2, #1
 8001c20:	2120      	movs	r1, #32
 8001c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c26:	f003 f89d 	bl	8004d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_4273_EN_Pin|LED_4261_EN_Pin, GPIO_PIN_RESET);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2130      	movs	r1, #48	; 0x30
 8001c2e:	4827      	ldr	r0, [pc, #156]	; (8001ccc <MX_GPIO_Init+0xe8>)
 8001c30:	f003 f898 	bl	8004d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RGB_RED_Pin RGB_BLUE_Pin RGB_GREEN_Pin RESET_SHT31_Pin
                           MT3608_EN_Pin LED_WP7_EN_Pin */
  GPIO_InitStruct.Pin = RGB_RED_Pin|RGB_BLUE_Pin|RGB_GREEN_Pin|RESET_SHT31_Pin
 8001c34:	f240 437c 	movw	r3, #1148	; 0x47c
 8001c38:	607b      	str	r3, [r7, #4]
                          |MT3608_EN_Pin|LED_WP7_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c4e:	f002 ff09 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BATT_STAT_Pin */
  GPIO_InitStruct.Pin = BATT_STAT_Pin;
 8001c52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c58:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BATT_STAT_GPIO_Port, &GPIO_InitStruct);
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	4619      	mov	r1, r3
 8001c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c6a:	f002 fefb 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTT_BT_Pin BUTT_1_Pin */
  GPIO_InitStruct.Pin = BUTT_BT_Pin|BUTT_1_Pin;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c76:	2301      	movs	r3, #1
 8001c78:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4813      	ldr	r0, [pc, #76]	; (8001ccc <MX_GPIO_Init+0xe8>)
 8001c80:	f002 fef0 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTT_2_Pin */
  GPIO_InitStruct.Pin = BUTT_2_Pin;
 8001c84:	2310      	movs	r3, #16
 8001c86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTT_2_GPIO_Port, &GPIO_InitStruct);
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	4619      	mov	r1, r3
 8001c94:	480e      	ldr	r0, [pc, #56]	; (8001cd0 <MX_GPIO_Init+0xec>)
 8001c96:	f002 fee5 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_4273_EN_Pin LED_4261_EN_Pin */
  GPIO_InitStruct.Pin = LED_4273_EN_Pin|LED_4261_EN_Pin;
 8001c9a:	2330      	movs	r3, #48	; 0x30
 8001c9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	4619      	mov	r1, r3
 8001cae:	4807      	ldr	r0, [pc, #28]	; (8001ccc <MX_GPIO_Init+0xe8>)
 8001cb0:	f002 fed8 	bl	8004a64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	2017      	movs	r0, #23
 8001cba:	f002 fbae 	bl	800441a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cbe:	2017      	movs	r0, #23
 8001cc0:	f002 fbc5 	bl	800444e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cc4:	bf00      	nop
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	48000400 	.word	0x48000400
 8001cd0:	48001000 	.word	0x48001000

08001cd4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	80fb      	strh	r3, [r7, #6]
	while(GPIO_Pin == BATT_STAT_Pin)
 8001cde:	e008      	b.n	8001cf2 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		battery_completed = 1;
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_GPIO_EXTI_Callback+0x30>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, RGB_GREEN_Pin, GPIO_PIN_SET);
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	2110      	movs	r1, #16
 8001cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cee:	f003 f839 	bl	8004d64 <HAL_GPIO_WritePin>
	while(GPIO_Pin == BATT_STAT_Pin)
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cf8:	d0f2      	beq.n	8001ce0 <HAL_GPIO_EXTI_Callback+0xc>
	}

}
 8001cfa:	bf00      	nop
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	2000047c 	.word	0x2000047c

08001d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d0c:	b672      	cpsid	i
}
 8001d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, RGB_RED_Pin, GPIO_PIN_SET);
 8001d10:	2201      	movs	r2, #1
 8001d12:	2104      	movs	r1, #4
 8001d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d18:	f003 f824 	bl	8004d64 <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 8001d1c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d20:	f7ff fb69 	bl	80013f6 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, RGB_RED_Pin, GPIO_PIN_RESET);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2104      	movs	r1, #4
 8001d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d2c:	f003 f81a 	bl	8004d64 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, RGB_RED_Pin, GPIO_PIN_SET);
 8001d30:	e7ee      	b.n	8001d10 <Error_Handler+0x8>

08001d32 <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b087      	sub	sp, #28
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8001d3c:	23ff      	movs	r3, #255	; 0xff
 8001d3e:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	e020      	b.n	8001d88 <calculate_crc+0x56>
		crc ^= data[i];
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	781a      	ldrb	r2, [r3, #0]
 8001d4e:	7dfb      	ldrb	r3, [r7, #23]
 8001d50:	4053      	eors	r3, r2
 8001d52:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8001d54:	2300      	movs	r3, #0
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	e010      	b.n	8001d7c <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 8001d5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	da06      	bge.n	8001d70 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8001d62:	7dfb      	ldrb	r3, [r7, #23]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001d6c:	75fb      	strb	r3, [r7, #23]
 8001d6e:	e002      	b.n	8001d76 <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8001d70:	7dfb      	ldrb	r3, [r7, #23]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b07      	cmp	r3, #7
 8001d80:	d9eb      	bls.n	8001d5a <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	3301      	adds	r3, #1
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d3da      	bcc.n	8001d46 <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8001d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	371c      	adds	r7, #28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af02      	add	r7, sp, #8
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	460b      	mov	r3, r1
 8001da8:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 8001daa:	887b      	ldrh	r3, [r7, #2]
 8001dac:	0a1b      	lsrs	r3, r3, #8
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	733b      	strb	r3, [r7, #12]
 8001db4:	887b      	ldrh	r3, [r7, #2]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6818      	ldr	r0, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	889b      	ldrh	r3, [r3, #4]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	b299      	uxth	r1, r3
 8001dc6:	f107 020c 	add.w	r2, r7, #12
 8001dca:	231e      	movs	r3, #30
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	2302      	movs	r3, #2
 8001dd0:	f003 f8ac 	bl	8004f2c <HAL_I2C_Master_Transmit>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e000      	b.n	8001de0 <sht3x_send_command+0x42>
	}

	return true;
 8001dde:	2301      	movs	r3, #1
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <uint8_to_uint16>:


static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	460a      	mov	r2, r1
 8001df2:	71fb      	strb	r3, [r7, #7]
 8001df4:	4613      	mov	r3, r2
 8001df6:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	79bb      	ldrb	r3, [r7, #6]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	4313      	orrs	r3, r2
 8001e06:	b29b      	uxth	r3, r3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <sht3x_init>:


bool sht3x_init(sht3x_handle_t *handle)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af04      	add	r7, sp, #16
 8001e1a:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <sht3x_init+0x1e>
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <sht3x_init+0x74>)
 8001e28:	4a18      	ldr	r2, [pc, #96]	; (8001e8c <sht3x_init+0x78>)
 8001e2a:	213a      	movs	r1, #58	; 0x3a
 8001e2c:	4818      	ldr	r0, [pc, #96]	; (8001e90 <sht3x_init+0x7c>)
 8001e2e:	f011 fc47 	bl	80136c0 <__assert_func>

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6818      	ldr	r0, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	889b      	ldrh	r3, [r3, #4]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	b299      	uxth	r1, r3
 8001e3e:	231e      	movs	r3, #30
 8001e40:	9302      	str	r3, [sp, #8]
 8001e42:	2303      	movs	r3, #3
 8001e44:	9301      	str	r3, [sp, #4]
 8001e46:	f107 030c 	add.w	r3, r7, #12
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	f24f 322d 	movw	r2, #62253	; 0xf32d
 8001e52:	f003 fa55 	bl	8005300 <HAL_I2C_Mem_Read>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	e00e      	b.n	8001e7e <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	2102      	movs	r1, #2
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff ff63 	bl	8001d32 <calculate_crc>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8001e70:	7bbb      	ldrb	r3, [r7, #14]
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d001      	beq.n	8001e7c <sht3x_init+0x68>
		return false;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e000      	b.n	8001e7e <sht3x_init+0x6a>
	}

	return true;
 8001e7c:	2301      	movs	r3, #1
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	08015e94 	.word	0x08015e94
 8001e8c:	08016978 	.word	0x08016978
 8001e90:	08015ed4 	.word	0x08015ed4

08001e94 <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	; 0x28
 8001e98:	af02      	add	r7, sp, #8
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 8001ea0:	f642 4106 	movw	r1, #11270	; 0x2c06
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f7ff ff7a 	bl	8001d9e <sht3x_send_command>

	HAL_Delay(1);
 8001eaa:	2001      	movs	r0, #1
 8001eac:	f7ff faa3 	bl	80013f6 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	889b      	ldrh	r3, [r3, #4]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	b299      	uxth	r1, r3
 8001ebc:	f107 0214 	add.w	r2, r7, #20
 8001ec0:	231e      	movs	r3, #30
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	2306      	movs	r3, #6
 8001ec6:	f003 f925 	bl	8005114 <HAL_I2C_Master_Receive>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <sht3x_read_temperature_and_humidity+0x40>
		return false;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e050      	b.n	8001f76 <sht3x_read_temperature_and_humidity+0xe2>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	2102      	movs	r1, #2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff ff29 	bl	8001d32 <calculate_crc>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	3303      	adds	r3, #3
 8001eea:	2102      	movs	r1, #2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff20 	bl	8001d32 <calculate_crc>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8001ef6:	7dbb      	ldrb	r3, [r7, #22]
 8001ef8:	7ffa      	ldrb	r2, [r7, #31]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d103      	bne.n	8001f06 <sht3x_read_temperature_and_humidity+0x72>
 8001efe:	7e7b      	ldrb	r3, [r7, #25]
 8001f00:	7fba      	ldrb	r2, [r7, #30]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d001      	beq.n	8001f0a <sht3x_read_temperature_and_humidity+0x76>
		return false;
 8001f06:	2300      	movs	r3, #0
 8001f08:	e035      	b.n	8001f76 <sht3x_read_temperature_and_humidity+0xe2>
	}

	int16_t temperature_raw = (int16_t)uint8_to_uint16(buffer[0], buffer[1]);
 8001f0a:	7d3b      	ldrb	r3, [r7, #20]
 8001f0c:	7d7a      	ldrb	r2, [r7, #21]
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff69 	bl	8001de8 <uint8_to_uint16>
 8001f16:	4603      	mov	r3, r0
 8001f18:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 8001f1a:	7dfb      	ldrb	r3, [r7, #23]
 8001f1c:	7e3a      	ldrb	r2, [r7, #24]
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff61 	bl	8001de8 <uint8_to_uint16>
 8001f26:	4603      	mov	r3, r0
 8001f28:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * temperature_raw / 65535.0f;
 8001f2a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f2e:	ee07 3a90 	vmov	s15, r3
 8001f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f36:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001f80 <sht3x_read_temperature_and_humidity+0xec>
 8001f3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f3e:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001f84 <sht3x_read_temperature_and_humidity+0xf0>
 8001f42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f46:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001f88 <sht3x_read_temperature_and_humidity+0xf4>
 8001f4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * humidity_raw / 65535.0f;
 8001f54:	8b7b      	ldrh	r3, [r7, #26]
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f5e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001f8c <sht3x_read_temperature_and_humidity+0xf8>
 8001f62:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f66:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001f84 <sht3x_read_temperature_and_humidity+0xf0>
 8001f6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	edc3 7a00 	vstr	s15, [r3]

	return true;
 8001f74:	2301      	movs	r3, #1
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3720      	adds	r7, #32
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	432f0000 	.word	0x432f0000
 8001f84:	477fff00 	.word	0x477fff00
 8001f88:	42340000 	.word	0x42340000
 8001f8c:	42c80000 	.word	0x42c80000

08001f90 <SSD1306_Init>:
}




uint8_t SSD1306_Init(void) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001f96:	f000 fa29 	bl	80023ec <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001f9a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	2178      	movs	r1, #120	; 0x78
 8001fa2:	485b      	ldr	r0, [pc, #364]	; (8002110 <SSD1306_Init+0x180>)
 8001fa4:	f003 fac6 	bl	8005534 <HAL_I2C_IsDeviceReady>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e0a9      	b.n	8002106 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001fb2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001fb6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001fb8:	e002      	b.n	8001fc0 <SSD1306_Init+0x30>
		p--;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f9      	bne.n	8001fba <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001fc6:	22ae      	movs	r2, #174	; 0xae
 8001fc8:	2100      	movs	r1, #0
 8001fca:	2078      	movs	r0, #120	; 0x78
 8001fcc:	f000 fa8a 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	2078      	movs	r0, #120	; 0x78
 8001fd6:	f000 fa85 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001fda:	2210      	movs	r2, #16
 8001fdc:	2100      	movs	r1, #0
 8001fde:	2078      	movs	r0, #120	; 0x78
 8001fe0:	f000 fa80 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001fe4:	22b0      	movs	r2, #176	; 0xb0
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	2078      	movs	r0, #120	; 0x78
 8001fea:	f000 fa7b 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001fee:	22c8      	movs	r2, #200	; 0xc8
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	2078      	movs	r0, #120	; 0x78
 8001ff4:	f000 fa76 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	2078      	movs	r0, #120	; 0x78
 8001ffe:	f000 fa71 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002002:	2210      	movs	r2, #16
 8002004:	2100      	movs	r1, #0
 8002006:	2078      	movs	r0, #120	; 0x78
 8002008:	f000 fa6c 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800200c:	2240      	movs	r2, #64	; 0x40
 800200e:	2100      	movs	r1, #0
 8002010:	2078      	movs	r0, #120	; 0x78
 8002012:	f000 fa67 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002016:	2281      	movs	r2, #129	; 0x81
 8002018:	2100      	movs	r1, #0
 800201a:	2078      	movs	r0, #120	; 0x78
 800201c:	f000 fa62 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002020:	22ff      	movs	r2, #255	; 0xff
 8002022:	2100      	movs	r1, #0
 8002024:	2078      	movs	r0, #120	; 0x78
 8002026:	f000 fa5d 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800202a:	22a1      	movs	r2, #161	; 0xa1
 800202c:	2100      	movs	r1, #0
 800202e:	2078      	movs	r0, #120	; 0x78
 8002030:	f000 fa58 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002034:	22a6      	movs	r2, #166	; 0xa6
 8002036:	2100      	movs	r1, #0
 8002038:	2078      	movs	r0, #120	; 0x78
 800203a:	f000 fa53 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800203e:	22a8      	movs	r2, #168	; 0xa8
 8002040:	2100      	movs	r1, #0
 8002042:	2078      	movs	r0, #120	; 0x78
 8002044:	f000 fa4e 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002048:	223f      	movs	r2, #63	; 0x3f
 800204a:	2100      	movs	r1, #0
 800204c:	2078      	movs	r0, #120	; 0x78
 800204e:	f000 fa49 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002052:	22a4      	movs	r2, #164	; 0xa4
 8002054:	2100      	movs	r1, #0
 8002056:	2078      	movs	r0, #120	; 0x78
 8002058:	f000 fa44 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800205c:	22d3      	movs	r2, #211	; 0xd3
 800205e:	2100      	movs	r1, #0
 8002060:	2078      	movs	r0, #120	; 0x78
 8002062:	f000 fa3f 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002066:	2200      	movs	r2, #0
 8002068:	2100      	movs	r1, #0
 800206a:	2078      	movs	r0, #120	; 0x78
 800206c:	f000 fa3a 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002070:	22d5      	movs	r2, #213	; 0xd5
 8002072:	2100      	movs	r1, #0
 8002074:	2078      	movs	r0, #120	; 0x78
 8002076:	f000 fa35 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800207a:	22f0      	movs	r2, #240	; 0xf0
 800207c:	2100      	movs	r1, #0
 800207e:	2078      	movs	r0, #120	; 0x78
 8002080:	f000 fa30 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002084:	22d9      	movs	r2, #217	; 0xd9
 8002086:	2100      	movs	r1, #0
 8002088:	2078      	movs	r0, #120	; 0x78
 800208a:	f000 fa2b 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800208e:	2222      	movs	r2, #34	; 0x22
 8002090:	2100      	movs	r1, #0
 8002092:	2078      	movs	r0, #120	; 0x78
 8002094:	f000 fa26 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002098:	22da      	movs	r2, #218	; 0xda
 800209a:	2100      	movs	r1, #0
 800209c:	2078      	movs	r0, #120	; 0x78
 800209e:	f000 fa21 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80020a2:	2212      	movs	r2, #18
 80020a4:	2100      	movs	r1, #0
 80020a6:	2078      	movs	r0, #120	; 0x78
 80020a8:	f000 fa1c 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80020ac:	22db      	movs	r2, #219	; 0xdb
 80020ae:	2100      	movs	r1, #0
 80020b0:	2078      	movs	r0, #120	; 0x78
 80020b2:	f000 fa17 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80020b6:	2220      	movs	r2, #32
 80020b8:	2100      	movs	r1, #0
 80020ba:	2078      	movs	r0, #120	; 0x78
 80020bc:	f000 fa12 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80020c0:	228d      	movs	r2, #141	; 0x8d
 80020c2:	2100      	movs	r1, #0
 80020c4:	2078      	movs	r0, #120	; 0x78
 80020c6:	f000 fa0d 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80020ca:	2214      	movs	r2, #20
 80020cc:	2100      	movs	r1, #0
 80020ce:	2078      	movs	r0, #120	; 0x78
 80020d0:	f000 fa08 	bl	80024e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80020d4:	22af      	movs	r2, #175	; 0xaf
 80020d6:	2100      	movs	r1, #0
 80020d8:	2078      	movs	r0, #120	; 0x78
 80020da:	f000 fa03 	bl	80024e4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80020de:	222e      	movs	r2, #46	; 0x2e
 80020e0:	2100      	movs	r1, #0
 80020e2:	2078      	movs	r0, #120	; 0x78
 80020e4:	f000 f9fe 	bl	80024e4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80020e8:	2000      	movs	r0, #0
 80020ea:	f000 f843 	bl	8002174 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80020ee:	f000 f813 	bl	8002118 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80020f2:	4b08      	ldr	r3, [pc, #32]	; (8002114 <SSD1306_Init+0x184>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <SSD1306_Init+0x184>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80020fe:	4b05      	ldr	r3, [pc, #20]	; (8002114 <SSD1306_Init+0x184>)
 8002100:	2201      	movs	r2, #1
 8002102:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8002104:	2301      	movs	r3, #1
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000037c 	.word	0x2000037c
 8002114:	20000880 	.word	0x20000880

08002118 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800211e:	2300      	movs	r3, #0
 8002120:	71fb      	strb	r3, [r7, #7]
 8002122:	e01d      	b.n	8002160 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	3b50      	subs	r3, #80	; 0x50
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	2100      	movs	r1, #0
 800212e:	2078      	movs	r0, #120	; 0x78
 8002130:	f000 f9d8 	bl	80024e4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002134:	2200      	movs	r2, #0
 8002136:	2100      	movs	r1, #0
 8002138:	2078      	movs	r0, #120	; 0x78
 800213a:	f000 f9d3 	bl	80024e4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800213e:	2210      	movs	r2, #16
 8002140:	2100      	movs	r1, #0
 8002142:	2078      	movs	r0, #120	; 0x78
 8002144:	f000 f9ce 	bl	80024e4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	01db      	lsls	r3, r3, #7
 800214c:	4a08      	ldr	r2, [pc, #32]	; (8002170 <SSD1306_UpdateScreen+0x58>)
 800214e:	441a      	add	r2, r3
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	2140      	movs	r1, #64	; 0x40
 8002154:	2078      	movs	r0, #120	; 0x78
 8002156:	f000 f95f 	bl	8002418 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	3301      	adds	r3, #1
 800215e:	71fb      	strb	r3, [r7, #7]
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	2b07      	cmp	r3, #7
 8002164:	d9de      	bls.n	8002124 <SSD1306_UpdateScreen+0xc>
	}
}
 8002166:	bf00      	nop
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20000480 	.word	0x20000480

08002174 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <SSD1306_Fill+0x14>
 8002184:	2300      	movs	r3, #0
 8002186:	e000      	b.n	800218a <SSD1306_Fill+0x16>
 8002188:	23ff      	movs	r3, #255	; 0xff
 800218a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800218e:	4619      	mov	r1, r3
 8002190:	4803      	ldr	r0, [pc, #12]	; (80021a0 <SSD1306_Fill+0x2c>)
 8002192:	f011 fb21 	bl	80137d8 <memset>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000480 	.word	0x20000480

080021a4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	80fb      	strh	r3, [r7, #6]
 80021ae:	460b      	mov	r3, r1
 80021b0:	80bb      	strh	r3, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	70fb      	strb	r3, [r7, #3]
	if (
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	2b7f      	cmp	r3, #127	; 0x7f
 80021ba:	d848      	bhi.n	800224e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80021bc:	88bb      	ldrh	r3, [r7, #4]
 80021be:	2b3f      	cmp	r3, #63	; 0x3f
 80021c0:	d845      	bhi.n	800224e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80021c2:	4b26      	ldr	r3, [pc, #152]	; (800225c <SSD1306_DrawPixel+0xb8>)
 80021c4:	791b      	ldrb	r3, [r3, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d006      	beq.n	80021d8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	bf0c      	ite	eq
 80021d0:	2301      	moveq	r3, #1
 80021d2:	2300      	movne	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d11a      	bne.n	8002214 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80021de:	88fa      	ldrh	r2, [r7, #6]
 80021e0:	88bb      	ldrh	r3, [r7, #4]
 80021e2:	08db      	lsrs	r3, r3, #3
 80021e4:	b298      	uxth	r0, r3
 80021e6:	4603      	mov	r3, r0
 80021e8:	01db      	lsls	r3, r3, #7
 80021ea:	4413      	add	r3, r2
 80021ec:	4a1c      	ldr	r2, [pc, #112]	; (8002260 <SSD1306_DrawPixel+0xbc>)
 80021ee:	5cd3      	ldrb	r3, [r2, r3]
 80021f0:	b25a      	sxtb	r2, r3
 80021f2:	88bb      	ldrh	r3, [r7, #4]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	2101      	movs	r1, #1
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	b25b      	sxtb	r3, r3
 8002200:	4313      	orrs	r3, r2
 8002202:	b259      	sxtb	r1, r3
 8002204:	88fa      	ldrh	r2, [r7, #6]
 8002206:	4603      	mov	r3, r0
 8002208:	01db      	lsls	r3, r3, #7
 800220a:	4413      	add	r3, r2
 800220c:	b2c9      	uxtb	r1, r1
 800220e:	4a14      	ldr	r2, [pc, #80]	; (8002260 <SSD1306_DrawPixel+0xbc>)
 8002210:	54d1      	strb	r1, [r2, r3]
 8002212:	e01d      	b.n	8002250 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002214:	88fa      	ldrh	r2, [r7, #6]
 8002216:	88bb      	ldrh	r3, [r7, #4]
 8002218:	08db      	lsrs	r3, r3, #3
 800221a:	b298      	uxth	r0, r3
 800221c:	4603      	mov	r3, r0
 800221e:	01db      	lsls	r3, r3, #7
 8002220:	4413      	add	r3, r2
 8002222:	4a0f      	ldr	r2, [pc, #60]	; (8002260 <SSD1306_DrawPixel+0xbc>)
 8002224:	5cd3      	ldrb	r3, [r2, r3]
 8002226:	b25a      	sxtb	r2, r3
 8002228:	88bb      	ldrh	r3, [r7, #4]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	2101      	movs	r1, #1
 8002230:	fa01 f303 	lsl.w	r3, r1, r3
 8002234:	b25b      	sxtb	r3, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	b25b      	sxtb	r3, r3
 800223a:	4013      	ands	r3, r2
 800223c:	b259      	sxtb	r1, r3
 800223e:	88fa      	ldrh	r2, [r7, #6]
 8002240:	4603      	mov	r3, r0
 8002242:	01db      	lsls	r3, r3, #7
 8002244:	4413      	add	r3, r2
 8002246:	b2c9      	uxtb	r1, r1
 8002248:	4a05      	ldr	r2, [pc, #20]	; (8002260 <SSD1306_DrawPixel+0xbc>)
 800224a:	54d1      	strb	r1, [r2, r3]
 800224c:	e000      	b.n	8002250 <SSD1306_DrawPixel+0xac>
		return;
 800224e:	bf00      	nop
	}
}
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000880 	.word	0x20000880
 8002260:	20000480 	.word	0x20000480

08002264 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	460a      	mov	r2, r1
 800226e:	80fb      	strh	r3, [r7, #6]
 8002270:	4613      	mov	r3, r2
 8002272:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002274:	4a05      	ldr	r2, [pc, #20]	; (800228c <SSD1306_GotoXY+0x28>)
 8002276:	88fb      	ldrh	r3, [r7, #6]
 8002278:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800227a:	4a04      	ldr	r2, [pc, #16]	; (800228c <SSD1306_GotoXY+0x28>)
 800227c:	88bb      	ldrh	r3, [r7, #4]
 800227e:	8053      	strh	r3, [r2, #2]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	20000880 	.word	0x20000880

08002290 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	71fb      	strb	r3, [r7, #7]
 800229c:	4613      	mov	r3, r2
 800229e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80022a0:	4b3a      	ldr	r3, [pc, #232]	; (800238c <SSD1306_Putc+0xfc>)
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	4413      	add	r3, r2
	if (
 80022ac:	2b7f      	cmp	r3, #127	; 0x7f
 80022ae:	dc07      	bgt.n	80022c0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80022b0:	4b36      	ldr	r3, [pc, #216]	; (800238c <SSD1306_Putc+0xfc>)
 80022b2:	885b      	ldrh	r3, [r3, #2]
 80022b4:	461a      	mov	r2, r3
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	785b      	ldrb	r3, [r3, #1]
 80022ba:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80022bc:	2b3f      	cmp	r3, #63	; 0x3f
 80022be:	dd01      	ble.n	80022c4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	e05e      	b.n	8002382 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	e04b      	b.n	8002362 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	3b20      	subs	r3, #32
 80022d2:	6839      	ldr	r1, [r7, #0]
 80022d4:	7849      	ldrb	r1, [r1, #1]
 80022d6:	fb01 f303 	mul.w	r3, r1, r3
 80022da:	4619      	mov	r1, r3
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	440b      	add	r3, r1
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4413      	add	r3, r2
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80022e8:	2300      	movs	r3, #0
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	e030      	b.n	8002350 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d010      	beq.n	8002320 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80022fe:	4b23      	ldr	r3, [pc, #140]	; (800238c <SSD1306_Putc+0xfc>)
 8002300:	881a      	ldrh	r2, [r3, #0]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	b29b      	uxth	r3, r3
 8002306:	4413      	add	r3, r2
 8002308:	b298      	uxth	r0, r3
 800230a:	4b20      	ldr	r3, [pc, #128]	; (800238c <SSD1306_Putc+0xfc>)
 800230c:	885a      	ldrh	r2, [r3, #2]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	b29b      	uxth	r3, r3
 8002312:	4413      	add	r3, r2
 8002314:	b29b      	uxth	r3, r3
 8002316:	79ba      	ldrb	r2, [r7, #6]
 8002318:	4619      	mov	r1, r3
 800231a:	f7ff ff43 	bl	80021a4 <SSD1306_DrawPixel>
 800231e:	e014      	b.n	800234a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002320:	4b1a      	ldr	r3, [pc, #104]	; (800238c <SSD1306_Putc+0xfc>)
 8002322:	881a      	ldrh	r2, [r3, #0]
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	b29b      	uxth	r3, r3
 8002328:	4413      	add	r3, r2
 800232a:	b298      	uxth	r0, r3
 800232c:	4b17      	ldr	r3, [pc, #92]	; (800238c <SSD1306_Putc+0xfc>)
 800232e:	885a      	ldrh	r2, [r3, #2]
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	b29b      	uxth	r3, r3
 8002334:	4413      	add	r3, r2
 8002336:	b299      	uxth	r1, r3
 8002338:	79bb      	ldrb	r3, [r7, #6]
 800233a:	2b00      	cmp	r3, #0
 800233c:	bf0c      	ite	eq
 800233e:	2301      	moveq	r3, #1
 8002340:	2300      	movne	r3, #0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	f7ff ff2d 	bl	80021a4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	3301      	adds	r3, #1
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4293      	cmp	r3, r2
 800235a:	d3c8      	bcc.n	80022ee <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	3301      	adds	r3, #1
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	785b      	ldrb	r3, [r3, #1]
 8002366:	461a      	mov	r2, r3
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	4293      	cmp	r3, r2
 800236c:	d3ad      	bcc.n	80022ca <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800236e:	4b07      	ldr	r3, [pc, #28]	; (800238c <SSD1306_Putc+0xfc>)
 8002370:	881a      	ldrh	r2, [r3, #0]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	4413      	add	r3, r2
 800237a:	b29a      	uxth	r2, r3
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <SSD1306_Putc+0xfc>)
 800237e:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8002380:	79fb      	ldrb	r3, [r7, #7]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000880 	.word	0x20000880

08002390 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	4613      	mov	r3, r2
 800239c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800239e:	e012      	b.n	80023c6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	79fa      	ldrb	r2, [r7, #7]
 80023a6:	68b9      	ldr	r1, [r7, #8]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff71 	bl	8002290 <SSD1306_Putc>
 80023ae:	4603      	mov	r3, r0
 80023b0:	461a      	mov	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d002      	beq.n	80023c0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	e008      	b.n	80023d2 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	3301      	adds	r3, #1
 80023c4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1e8      	bne.n	80023a0 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	781b      	ldrb	r3, [r3, #0]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80023de:	2000      	movs	r0, #0
 80023e0:	f7ff fec8 	bl	8002174 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80023e4:	f7ff fe98 	bl	8002118 <SSD1306_UpdateScreen>
}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}

080023ec <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80023f2:	4b08      	ldr	r3, [pc, #32]	; (8002414 <ssd1306_I2C_Init+0x28>)
 80023f4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80023f6:	e002      	b.n	80023fe <ssd1306_I2C_Init+0x12>
		p--;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f9      	bne.n	80023f8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002404:	bf00      	nop
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	0003d090 	.word	0x0003d090

08002418 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002418:	b590      	push	{r4, r7, lr}
 800241a:	b0c7      	sub	sp, #284	; 0x11c
 800241c:	af02      	add	r7, sp, #8
 800241e:	4604      	mov	r4, r0
 8002420:	4608      	mov	r0, r1
 8002422:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002426:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800242a:	600a      	str	r2, [r1, #0]
 800242c:	4619      	mov	r1, r3
 800242e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002432:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002436:	4622      	mov	r2, r4
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800243e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002442:	4602      	mov	r2, r0
 8002444:	701a      	strb	r2, [r3, #0]
 8002446:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800244a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800244e:	460a      	mov	r2, r1
 8002450:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002452:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002456:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800245a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800245e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8002462:	7812      	ldrb	r2, [r2, #0]
 8002464:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002466:	2300      	movs	r3, #0
 8002468:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800246c:	e015      	b.n	800249a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800246e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002472:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002476:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	441a      	add	r2, r3
 800247e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002482:	3301      	adds	r3, #1
 8002484:	7811      	ldrb	r1, [r2, #0]
 8002486:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800248a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800248e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002490:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002494:	3301      	adds	r3, #1
 8002496:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800249a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800249e:	b29b      	uxth	r3, r3
 80024a0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80024a4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80024a8:	8812      	ldrh	r2, [r2, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d8df      	bhi.n	800246e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80024ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024b2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	b299      	uxth	r1, r3
 80024ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	3301      	adds	r3, #1
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	f107 020c 	add.w	r2, r7, #12
 80024cc:	200a      	movs	r0, #10
 80024ce:	9000      	str	r0, [sp, #0]
 80024d0:	4803      	ldr	r0, [pc, #12]	; (80024e0 <ssd1306_I2C_WriteMulti+0xc8>)
 80024d2:	f002 fd2b 	bl	8004f2c <HAL_I2C_Master_Transmit>
}
 80024d6:	bf00      	nop
 80024d8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd90      	pop	{r4, r7, pc}
 80024e0:	2000037c 	.word	0x2000037c

080024e4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
 80024ee:	460b      	mov	r3, r1
 80024f0:	71bb      	strb	r3, [r7, #6]
 80024f2:	4613      	mov	r3, r2
 80024f4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80024f6:	79bb      	ldrb	r3, [r7, #6]
 80024f8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80024fa:	797b      	ldrb	r3, [r7, #5]
 80024fc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	b299      	uxth	r1, r3
 8002502:	f107 020c 	add.w	r2, r7, #12
 8002506:	230a      	movs	r3, #10
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	2302      	movs	r3, #2
 800250c:	4803      	ldr	r0, [pc, #12]	; (800251c <ssd1306_I2C_Write+0x38>)
 800250e:	f002 fd0d 	bl	8004f2c <HAL_I2C_Master_Transmit>
}
 8002512:	bf00      	nop
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	2000037c 	.word	0x2000037c

08002520 <LL_RCC_EnableRTC>:
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <LL_AHB2_GRP1_EnableClock>:
{
 8002542:	b480      	push	{r7}
 8002544:	b085      	sub	sp, #20
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800254a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002550:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4313      	orrs	r3, r2
 8002558:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800255a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4013      	ands	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002566:	68fb      	ldr	r3, [r7, #12]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <LL_AHB3_GRP1_EnableClock>:
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800257c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002580:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002582:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4313      	orrs	r3, r2
 800258a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800258c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002590:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4013      	ands	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002598:	68fb      	ldr	r3, [r7, #12]
}
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <LL_APB1_GRP1_EnableClock>:
{
 80025a6:	b480      	push	{r7}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80025ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80025be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4013      	ands	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025ca:	68fb      	ldr	r3, [r7, #12]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80025dc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80025e0:	f7ff ffc8 	bl	8002574 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80025e4:	2200      	movs	r2, #0
 80025e6:	2100      	movs	r1, #0
 80025e8:	202e      	movs	r0, #46	; 0x2e
 80025ea:	f001 ff16 	bl	800441a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80025ee:	202e      	movs	r0, #46	; 0x2e
 80025f0:	f001 ff2d 	bl	800444e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b09c      	sub	sp, #112	; 0x70
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002610:	f107 030c 	add.w	r3, r7, #12
 8002614:	2250      	movs	r2, #80	; 0x50
 8002616:	2100      	movs	r1, #0
 8002618:	4618      	mov	r0, r3
 800261a:	f011 f8dd 	bl	80137d8 <memset>
  if(hadc->Instance==ADC1)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a2b      	ldr	r2, [pc, #172]	; (80026d0 <HAL_ADC_MspInit+0xd8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d14e      	bne.n	80026c6 <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800262c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL;
 800262e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002632:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002634:	f107 030c 	add.w	r3, r7, #12
 8002638:	4618      	mov	r0, r3
 800263a:	f006 fceb 	bl	8009014 <HAL_RCCEx_PeriphCLKConfig>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002644:	f7ff fb60 	bl	8001d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002648:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800264c:	f7ff ff79 	bl	8002542 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002650:	2001      	movs	r0, #1
 8002652:	f7ff ff76 	bl	8002542 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = BATT_ADC_Pin|OPAMP_ADC_Pin;
 8002656:	2382      	movs	r3, #130	; 0x82
 8002658:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800265a:	2303      	movs	r3, #3
 800265c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002662:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002666:	4619      	mov	r1, r3
 8002668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800266c:	f002 f9fa 	bl	8004a64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002670:	4b18      	ldr	r3, [pc, #96]	; (80026d4 <HAL_ADC_MspInit+0xdc>)
 8002672:	4a19      	ldr	r2, [pc, #100]	; (80026d8 <HAL_ADC_MspInit+0xe0>)
 8002674:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002676:	4b17      	ldr	r3, [pc, #92]	; (80026d4 <HAL_ADC_MspInit+0xdc>)
 8002678:	2205      	movs	r2, #5
 800267a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800267c:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <HAL_ADC_MspInit+0xdc>)
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002682:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <HAL_ADC_MspInit+0xdc>)
 8002684:	2200      	movs	r2, #0
 8002686:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002688:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_ADC_MspInit+0xdc>)
 800268a:	2280      	movs	r2, #128	; 0x80
 800268c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800268e:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <HAL_ADC_MspInit+0xdc>)
 8002690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002694:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002696:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <HAL_ADC_MspInit+0xdc>)
 8002698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800269c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800269e:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <HAL_ADC_MspInit+0xdc>)
 80026a0:	2220      	movs	r2, #32
 80026a2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_ADC_MspInit+0xdc>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80026aa:	480a      	ldr	r0, [pc, #40]	; (80026d4 <HAL_ADC_MspInit+0xdc>)
 80026ac:	f001 ff06 	bl	80044bc <HAL_DMA_Init>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80026b6:	f7ff fb27 	bl	8001d08 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a05      	ldr	r2, [pc, #20]	; (80026d4 <HAL_ADC_MspInit+0xdc>)
 80026be:	64da      	str	r2, [r3, #76]	; 0x4c
 80026c0:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <HAL_ADC_MspInit+0xdc>)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026c6:	bf00      	nop
 80026c8:	3770      	adds	r7, #112	; 0x70
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	50040000 	.word	0x50040000
 80026d4:	2000031c 	.word	0x2000031c
 80026d8:	40020008 	.word	0x40020008

080026dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b09c      	sub	sp, #112	; 0x70
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026f4:	f107 030c 	add.w	r3, r7, #12
 80026f8:	2250      	movs	r2, #80	; 0x50
 80026fa:	2100      	movs	r1, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f011 f86b 	bl	80137d8 <memset>
  if(hi2c->Instance==I2C1)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a16      	ldr	r2, [pc, #88]	; (8002760 <HAL_I2C_MspInit+0x84>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d125      	bne.n	8002758 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800270c:	2304      	movs	r3, #4
 800270e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002710:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002716:	f107 030c 	add.w	r3, r7, #12
 800271a:	4618      	mov	r0, r3
 800271c:	f006 fc7a 	bl	8009014 <HAL_RCCEx_PeriphCLKConfig>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002726:	f7ff faef 	bl	8001d08 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800272a:	2002      	movs	r0, #2
 800272c:	f7ff ff09 	bl	8002542 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002730:	23c0      	movs	r3, #192	; 0xc0
 8002732:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002734:	2312      	movs	r3, #18
 8002736:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273c:	2300      	movs	r3, #0
 800273e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002740:	2304      	movs	r3, #4
 8002742:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002744:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002748:	4619      	mov	r1, r3
 800274a:	4806      	ldr	r0, [pc, #24]	; (8002764 <HAL_I2C_MspInit+0x88>)
 800274c:	f002 f98a 	bl	8004a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002750:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002754:	f7ff ff27 	bl	80025a6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002758:	bf00      	nop
 800275a:	3770      	adds	r7, #112	; 0x70
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40005400 	.word	0x40005400
 8002764:	48000400 	.word	0x48000400

08002768 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0d      	ldr	r2, [pc, #52]	; (80027ac <HAL_IPCC_MspInit+0x44>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d113      	bne.n	80027a2 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800277a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800277e:	f7ff fef9 	bl	8002574 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002782:	2200      	movs	r2, #0
 8002784:	2100      	movs	r1, #0
 8002786:	202c      	movs	r0, #44	; 0x2c
 8002788:	f001 fe47 	bl	800441a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800278c:	202c      	movs	r0, #44	; 0x2c
 800278e:	f001 fe5e 	bl	800444e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002792:	2200      	movs	r2, #0
 8002794:	2100      	movs	r1, #0
 8002796:	202d      	movs	r0, #45	; 0x2d
 8002798:	f001 fe3f 	bl	800441a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800279c:	202d      	movs	r0, #45	; 0x2d
 800279e:	f001 fe56 	bl	800444e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	58000c00 	.word	0x58000c00

080027b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b096      	sub	sp, #88	; 0x58
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027b8:	f107 0308 	add.w	r3, r7, #8
 80027bc:	2250      	movs	r2, #80	; 0x50
 80027be:	2100      	movs	r1, #0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f011 f809 	bl	80137d8 <memset>
  if(hrtc->Instance==RTC)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a0e      	ldr	r2, [pc, #56]	; (8002804 <HAL_RTC_MspInit+0x54>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d115      	bne.n	80027fc <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80027d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027d4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80027d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027da:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027dc:	f107 0308 	add.w	r3, r7, #8
 80027e0:	4618      	mov	r0, r3
 80027e2:	f006 fc17 	bl	8009014 <HAL_RCCEx_PeriphCLKConfig>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80027ec:	f7ff fa8c 	bl	8001d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80027f0:	f7ff fe96 	bl	8002520 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80027f4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80027f8:	f7ff fed5 	bl	80025a6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80027fc:	bf00      	nop
 80027fe:	3758      	adds	r7, #88	; 0x58
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40002800 	.word	0x40002800

08002808 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002818:	d102      	bne.n	8002820 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800281a:	2001      	movs	r0, #1
 800281c:	f7ff fec3 	bl	80025a6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	f107 030c 	add.w	r3, r7, #12
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002848:	d114      	bne.n	8002874 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284a:	2001      	movs	r0, #1
 800284c:	f7ff fe79 	bl	8002542 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_VREF_Pin;
 8002850:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002854:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002856:	2302      	movs	r3, #2
 8002858:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285e:	2300      	movs	r3, #0
 8002860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002862:	2301      	movs	r3, #1
 8002864:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_VREF_GPIO_Port, &GPIO_InitStruct);
 8002866:	f107 030c 	add.w	r3, r7, #12
 800286a:	4619      	mov	r1, r3
 800286c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002870:	f002 f8f8 	bl	8004a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002874:	bf00      	nop
 8002876:	3720      	adds	r7, #32
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002880:	e7fe      	b.n	8002880 <NMI_Handler+0x4>

08002882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002886:	e7fe      	b.n	8002886 <HardFault_Handler+0x4>

08002888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800288c:	e7fe      	b.n	800288c <MemManage_Handler+0x4>

0800288e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002892:	e7fe      	b.n	8002892 <BusFault_Handler+0x4>

08002894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002898:	e7fe      	b.n	8002898 <UsageFault_Handler+0x4>

0800289a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028b6:	b480      	push	{r7}
 80028b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028c8:	f000 f9f6 	bl	8002cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028cc:	bf00      	nop
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028d4:	4802      	ldr	r0, [pc, #8]	; (80028e0 <DMA1_Channel1_IRQHandler+0x10>)
 80028d6:	f001 ff73 	bl	80047c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	2000031c 	.word	0x2000031c

080028e4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80028e8:	4802      	ldr	r0, [pc, #8]	; (80028f4 <USB_LP_IRQHandler+0x10>)
 80028ea:	f003 fc2a 	bl	8006142 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20001fa0 	.word	0x20001fa0

080028f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BATT_STAT_Pin);
 80028fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002900:	f002 fa48 	bl	8004d94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002904:	bf00      	nop
 8002906:	bd80      	pop	{r7, pc}

08002908 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800290c:	f00f fdd8 	bl	80124c0 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}

08002914 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002918:	f00f fe0a 	bl	8012530 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}

08002920 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002924:	f002 fa4e 	bl	8004dc4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002928:	bf00      	nop
 800292a:	bd80      	pop	{r7, pc}

0800292c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
	return 1;
 8002930:	2301      	movs	r3, #1
}
 8002932:	4618      	mov	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <_kill>:

int _kill(int pid, int sig)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002946:	f010 fefd 	bl	8013744 <__errno>
 800294a:	4603      	mov	r3, r0
 800294c:	2216      	movs	r2, #22
 800294e:	601a      	str	r2, [r3, #0]
	return -1;
 8002950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <_exit>:

void _exit (int status)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002964:	f04f 31ff 	mov.w	r1, #4294967295
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ffe7 	bl	800293c <_kill>
	while (1) {}		/* Make sure we hang here */
 800296e:	e7fe      	b.n	800296e <_exit+0x12>

08002970 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	e00a      	b.n	8002998 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002982:	f3af 8000 	nop.w
 8002986:	4601      	mov	r1, r0
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	60ba      	str	r2, [r7, #8]
 800298e:	b2ca      	uxtb	r2, r1
 8002990:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	3301      	adds	r3, #1
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	429a      	cmp	r2, r3
 800299e:	dbf0      	blt.n	8002982 <_read+0x12>
	}

return len;
 80029a0:	687b      	ldr	r3, [r7, #4]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b086      	sub	sp, #24
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	e009      	b.n	80029d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	60ba      	str	r2, [r7, #8]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	3301      	adds	r3, #1
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	dbf1      	blt.n	80029bc <_write+0x12>
	}
	return len;
 80029d8:	687b      	ldr	r3, [r7, #4]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <_close>:

int _close(int file)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
	return -1;
 80029ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a0a:	605a      	str	r2, [r3, #4]
	return 0;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <_isatty>:

int _isatty(int file)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
	return 1;
 8002a22:	2301      	movs	r3, #1
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
	return 0;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a54:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <_sbrk+0x5c>)
 8002a56:	4b15      	ldr	r3, [pc, #84]	; (8002aac <_sbrk+0x60>)
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a60:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <_sbrk+0x64>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d102      	bne.n	8002a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <_sbrk+0x64>)
 8002a6a:	4a12      	ldr	r2, [pc, #72]	; (8002ab4 <_sbrk+0x68>)
 8002a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a6e:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <_sbrk+0x64>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d207      	bcs.n	8002a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a7c:	f010 fe62 	bl	8013744 <__errno>
 8002a80:	4603      	mov	r3, r0
 8002a82:	220c      	movs	r2, #12
 8002a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a86:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8a:	e009      	b.n	8002aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a8c:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <_sbrk+0x64>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a92:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <_sbrk+0x64>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	4a05      	ldr	r2, [pc, #20]	; (8002ab0 <_sbrk+0x64>)
 8002a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20008000 	.word	0x20008000
 8002aac:	00000400 	.word	0x00000400
 8002ab0:	20000888 	.word	0x20000888
 8002ab4:	20002570 	.word	0x20002570

08002ab8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002abc:	4b22      	ldr	r3, [pc, #136]	; (8002b48 <SystemInit+0x90>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac2:	4a21      	ldr	r2, [pc, #132]	; (8002b48 <SystemInit+0x90>)
 8002ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002ae4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002af0:	4b16      	ldr	r3, [pc, #88]	; (8002b4c <SystemInit+0x94>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002afe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b02:	f023 0305 	bic.w	r3, r3, #5
 8002b06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b16:	f023 0301 	bic.w	r3, r3, #1
 8002b1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b22:	4a0b      	ldr	r2, [pc, #44]	; (8002b50 <SystemInit+0x98>)
 8002b24:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b34:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	619a      	str	r2, [r3, #24]
}
 8002b3e:	bf00      	nop
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00
 8002b4c:	faf6fefb 	.word	0xfaf6fefb
 8002b50:	22041000 	.word	0x22041000

08002b54 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002b54:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b56:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b58:	3304      	adds	r3, #4

08002b5a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b5a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b5c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002b5e:	d3f9      	bcc.n	8002b54 <CopyDataInit>
  bx lr
 8002b60:	4770      	bx	lr

08002b62 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002b62:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002b64:	3004      	adds	r0, #4

08002b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002b66:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002b68:	d3fb      	bcc.n	8002b62 <FillZerobss>
  bx lr
 8002b6a:	4770      	bx	lr

08002b6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b6c:	480c      	ldr	r0, [pc, #48]	; (8002ba0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002b6e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b70:	f7ff ffa2 	bl	8002ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002b74:	480b      	ldr	r0, [pc, #44]	; (8002ba4 <LoopForever+0x8>)
 8002b76:	490c      	ldr	r1, [pc, #48]	; (8002ba8 <LoopForever+0xc>)
 8002b78:	4a0c      	ldr	r2, [pc, #48]	; (8002bac <LoopForever+0x10>)
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f7ff ffed 	bl	8002b5a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002b80:	480b      	ldr	r0, [pc, #44]	; (8002bb0 <LoopForever+0x14>)
 8002b82:	490c      	ldr	r1, [pc, #48]	; (8002bb4 <LoopForever+0x18>)
 8002b84:	2300      	movs	r3, #0
 8002b86:	f7ff ffee 	bl	8002b66 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002b8a:	480b      	ldr	r0, [pc, #44]	; (8002bb8 <LoopForever+0x1c>)
 8002b8c:	490b      	ldr	r1, [pc, #44]	; (8002bbc <LoopForever+0x20>)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f7ff ffe9 	bl	8002b66 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002b94:	f010 fdee 	bl	8013774 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002b98:	f7fe fdd8 	bl	800174c <main>

08002b9c <LoopForever>:

LoopForever:
  b LoopForever
 8002b9c:	e7fe      	b.n	8002b9c <LoopForever>
 8002b9e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002ba0:	20008000 	.word	0x20008000
  INIT_DATA _sdata, _edata, _sidata
 8002ba4:	20000004 	.word	0x20000004
 8002ba8:	200001b0 	.word	0x200001b0
 8002bac:	08016d08 	.word	0x08016d08
  INIT_BSS _sbss, _ebss
 8002bb0:	200001fc 	.word	0x200001fc
 8002bb4:	2000256c 	.word	0x2000256c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002bb8:	200301e4 	.word	0x200301e4
 8002bbc:	20030a67 	.word	0x20030a67

08002bc0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bc0:	e7fe      	b.n	8002bc0 <ADC1_IRQHandler>
	...

08002bc4 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	6053      	str	r3, [r2, #4]
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	e0042000 	.word	0xe0042000

08002be4 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002be8:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4a04      	ldr	r2, [pc, #16]	; (8002c00 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002bee:	f043 0302 	orr.w	r3, r3, #2
 8002bf2:	6053      	str	r3, [r2, #4]
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e0042000 	.word	0xe0042000

08002c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <HAL_Init+0x3c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a0b      	ldr	r2, [pc, #44]	; (8002c40 <HAL_Init+0x3c>)
 8002c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c18:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c1a:	2003      	movs	r0, #3
 8002c1c:	f001 fbf2 	bl	8004404 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c20:	200f      	movs	r0, #15
 8002c22:	f000 f80f 	bl	8002c44 <HAL_InitTick>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	71fb      	strb	r3, [r7, #7]
 8002c30:	e001      	b.n	8002c36 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c32:	f7ff fcd1 	bl	80025d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c36:	79fb      	ldrb	r3, [r7, #7]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	58004000 	.word	0x58004000

08002c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002c50:	4b17      	ldr	r3, [pc, #92]	; (8002cb0 <HAL_InitTick+0x6c>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d024      	beq.n	8002ca2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c58:	f005 ff68 	bl	8008b2c <HAL_RCC_GetHCLKFreq>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	4b14      	ldr	r3, [pc, #80]	; (8002cb0 <HAL_InitTick+0x6c>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	4619      	mov	r1, r3
 8002c64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c68:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	4618      	mov	r0, r3
 8002c72:	f001 fbfa 	bl	800446a <HAL_SYSTICK_Config>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10f      	bne.n	8002c9c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b0f      	cmp	r3, #15
 8002c80:	d809      	bhi.n	8002c96 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c82:	2200      	movs	r2, #0
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8a:	f001 fbc6 	bl	800441a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c8e:	4a09      	ldr	r2, [pc, #36]	; (8002cb4 <HAL_InitTick+0x70>)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	e007      	b.n	8002ca6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
 8002c9a:	e004      	b.n	8002ca6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
 8002ca0:	e001      	b.n	8002ca6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20000014 	.word	0x20000014
 8002cb4:	20000010 	.word	0x20000010

08002cb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_IncTick+0x20>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_IncTick+0x24>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <HAL_IncTick+0x24>)
 8002cca:	6013      	str	r3, [r2, #0]
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20000014 	.word	0x20000014
 8002cdc:	2000088c 	.word	0x2000088c

08002ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ce4:	4b03      	ldr	r3, [pc, #12]	; (8002cf4 <HAL_GetTick+0x14>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	2000088c 	.word	0x2000088c

08002cf8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002cfc:	4b03      	ldr	r3, [pc, #12]	; (8002d0c <HAL_GetTickPrio+0x14>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	20000010 	.word	0x20000010

08002d10 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002d14:	4b03      	ldr	r3, [pc, #12]	; (8002d24 <HAL_GetTickFreq+0x14>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20000014 	.word	0x20000014

08002d28 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002d2c:	f7ff ff4a 	bl	8002bc4 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002d30:	bf00      	nop
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002d38:	f7ff ff54 	bl	8002be4 <LL_DBGMCU_EnableDBGStopMode>
}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	3360      	adds	r3, #96	; 0x60
 8002dba:	461a      	mov	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4b08      	ldr	r3, [pc, #32]	; (8002dec <LL_ADC_SetOffset+0x44>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002de0:	bf00      	nop
 8002de2:	371c      	adds	r7, #28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	03fff000 	.word	0x03fff000

08002df0 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3360      	adds	r3, #96	; 0x60
 8002dfe:	461a      	mov	r2, r3
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	3360      	adds	r3, #96	; 0x60
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	431a      	orrs	r2, r3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e6a:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	3330      	adds	r3, #48	; 0x30
 8002e88:	461a      	mov	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	0a1b      	lsrs	r3, r3, #8
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	4413      	add	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	211f      	movs	r1, #31
 8002ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	401a      	ands	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	0e9b      	lsrs	r3, r3, #26
 8002eb0:	f003 011f 	and.w	r1, r3, #31
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002ec4:	bf00      	nop
 8002ec6:	371c      	adds	r7, #28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	3314      	adds	r3, #20
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	0e5b      	lsrs	r3, r3, #25
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	4413      	add	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	0d1b      	lsrs	r3, r3, #20
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	2107      	movs	r1, #7
 8002efe:	fa01 f303 	lsl.w	r3, r1, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	401a      	ands	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	0d1b      	lsrs	r3, r3, #20
 8002f0a:	f003 031f 	and.w	r3, r3, #31
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	fa01 f303 	lsl.w	r3, r1, r3
 8002f14:	431a      	orrs	r2, r3
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f40:	43db      	mvns	r3, r3
 8002f42:	401a      	ands	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f003 0318 	and.w	r3, r3, #24
 8002f4a:	4908      	ldr	r1, [pc, #32]	; (8002f6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f4c:	40d9      	lsrs	r1, r3
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	400b      	ands	r3, r1
 8002f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f56:	431a      	orrs	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	0007ffff 	.word	0x0007ffff

08002f70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002f80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6093      	str	r3, [r2, #8]
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fa8:	d101      	bne.n	8002fae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002fcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fd0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ff8:	d101      	bne.n	8002ffe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800301c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003020:	f043 0201 	orr.w	r2, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003044:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003048:	f043 0202 	orr.w	r2, r3, #2
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <LL_ADC_IsEnabled+0x18>
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <LL_ADC_IsEnabled+0x1a>
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b02      	cmp	r3, #2
 8003094:	d101      	bne.n	800309a <LL_ADC_IsDisableOngoing+0x18>
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <LL_ADC_IsDisableOngoing+0x1a>
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030bc:	f043 0204 	orr.w	r2, r3, #4
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030e4:	f043 0210 	orr.w	r2, r3, #16
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b04      	cmp	r3, #4
 800310a:	d101      	bne.n	8003110 <LL_ADC_REG_IsConversionOngoing+0x18>
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800312e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003132:	f043 0220 	orr.w	r2, r3, #32
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b08      	cmp	r3, #8
 8003158:	d101      	bne.n	800315e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8003178:	2300      	movs	r3, #0
 800317a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800317c:	2300      	movs	r3, #0
 800317e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e12e      	b.n	80033e8 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003194:	2b00      	cmp	r3, #0
 8003196:	d109      	bne.n	80031ac <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff fa2d 	bl	80025f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff feef 	bl	8002f94 <LL_ADC_IsDeepPowerDownEnabled>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d004      	beq.n	80031c6 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fed5 	bl	8002f70 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff ff0a 	bl	8002fe4 <LL_ADC_IsInternalRegulatorEnabled>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d115      	bne.n	8003202 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff feee 	bl	8002fbc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031e0:	4b83      	ldr	r3, [pc, #524]	; (80033f0 <HAL_ADC_Init+0x284>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	099b      	lsrs	r3, r3, #6
 80031e6:	4a83      	ldr	r2, [pc, #524]	; (80033f4 <HAL_ADC_Init+0x288>)
 80031e8:	fba2 2303 	umull	r2, r3, r2, r3
 80031ec:	099b      	lsrs	r3, r3, #6
 80031ee:	3301      	adds	r3, #1
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031f4:	e002      	b.n	80031fc <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f9      	bne.n	80031f6 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff feec 	bl	8002fe4 <LL_ADC_IsInternalRegulatorEnabled>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10d      	bne.n	800322e <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003216:	f043 0210 	orr.w	r2, r3, #16
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003222:	f043 0201 	orr.w	r2, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff ff60 	bl	80030f8 <LL_ADC_REG_IsConversionOngoing>
 8003238:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323e:	f003 0310 	and.w	r3, r3, #16
 8003242:	2b00      	cmp	r3, #0
 8003244:	f040 80c7 	bne.w	80033d6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2b00      	cmp	r3, #0
 800324c:	f040 80c3 	bne.w	80033d6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003254:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003258:	f043 0202 	orr.w	r2, r3, #2
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fef9 	bl	800305c <LL_ADC_IsEnabled>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10b      	bne.n	8003288 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003270:	4861      	ldr	r0, [pc, #388]	; (80033f8 <HAL_ADC_Init+0x28c>)
 8003272:	f7ff fef3 	bl	800305c <LL_ADC_IsEnabled>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d105      	bne.n	8003288 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	4619      	mov	r1, r3
 8003282:	485e      	ldr	r0, [pc, #376]	; (80033fc <HAL_ADC_Init+0x290>)
 8003284:	f7ff fd5c 	bl	8002d40 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	7e5b      	ldrb	r3, [r3, #25]
 800328c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003292:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003298:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800329e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a6:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80032a8:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d106      	bne.n	80032c8 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	3b01      	subs	r3, #1
 80032c0:	045b      	lsls	r3, r3, #17
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d009      	beq.n	80032e4 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	4b45      	ldr	r3, [pc, #276]	; (8003400 <HAL_ADC_Init+0x294>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6812      	ldr	r2, [r2, #0]
 80032f2:	69b9      	ldr	r1, [r7, #24]
 80032f4:	430b      	orrs	r3, r1
 80032f6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fefb 	bl	80030f8 <LL_ADC_REG_IsConversionOngoing>
 8003302:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff ff1c 	bl	8003146 <LL_ADC_INJ_IsConversionOngoing>
 800330e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d13d      	bne.n	8003392 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d13a      	bne.n	8003392 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003320:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003328:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003338:	f023 0302 	bic.w	r3, r3, #2
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	69b9      	ldr	r1, [r7, #24]
 8003342:	430b      	orrs	r3, r1
 8003344:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800334c:	2b01      	cmp	r3, #1
 800334e:	d118      	bne.n	8003382 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800335a:	f023 0304 	bic.w	r3, r3, #4
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003366:	4311      	orrs	r1, r2
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800336c:	4311      	orrs	r1, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003372:	430a      	orrs	r2, r1
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	611a      	str	r2, [r3, #16]
 8003380:	e007      	b.n	8003392 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0201 	bic.w	r2, r2, #1
 8003390:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d10c      	bne.n	80033b4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	f023 010f 	bic.w	r1, r3, #15
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	1e5a      	subs	r2, r3, #1
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	631a      	str	r2, [r3, #48]	; 0x30
 80033b2:	e007      	b.n	80033c4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 020f 	bic.w	r2, r2, #15
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c8:	f023 0303 	bic.w	r3, r3, #3
 80033cc:	f043 0201 	orr.w	r2, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	655a      	str	r2, [r3, #84]	; 0x54
 80033d4:	e007      	b.n	80033e6 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033da:	f043 0210 	orr.w	r2, r3, #16
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3720      	adds	r7, #32
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	2000000c 	.word	0x2000000c
 80033f4:	053e2d63 	.word	0x053e2d63
 80033f8:	50040000 	.word	0x50040000
 80033fc:	50040300 	.word	0x50040300
 8003400:	fff0c007 	.word	0xfff0c007

08003404 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff fe6f 	bl	80030f8 <LL_ADC_REG_IsConversionOngoing>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d167      	bne.n	80034f0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_ADC_Start_DMA+0x2a>
 800342a:	2302      	movs	r3, #2
 800342c:	e063      	b.n	80034f6 <HAL_ADC_Start_DMA+0xf2>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 fd6a 	bl	8003f10 <ADC_Enable>
 800343c:	4603      	mov	r3, r0
 800343e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003440:	7dfb      	ldrb	r3, [r7, #23]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d14f      	bne.n	80034e6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800344e:	f023 0301 	bic.w	r3, r3, #1
 8003452:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d006      	beq.n	8003474 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346a:	f023 0206 	bic.w	r2, r3, #6
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	659a      	str	r2, [r3, #88]	; 0x58
 8003472:	e002      	b.n	800347a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347e:	4a20      	ldr	r2, [pc, #128]	; (8003500 <HAL_ADC_Start_DMA+0xfc>)
 8003480:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003486:	4a1f      	ldr	r2, [pc, #124]	; (8003504 <HAL_ADC_Start_DMA+0x100>)
 8003488:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348e:	4a1e      	ldr	r2, [pc, #120]	; (8003508 <HAL_ADC_Start_DMA+0x104>)
 8003490:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	221c      	movs	r2, #28
 8003498:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0210 	orr.w	r2, r2, #16
 80034b0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f042 0201 	orr.w	r2, r2, #1
 80034c0:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	3340      	adds	r3, #64	; 0x40
 80034cc:	4619      	mov	r1, r3
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f001 f89b 	bl	800460c <HAL_DMA_Start_IT>
 80034d6:	4603      	mov	r3, r0
 80034d8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff fde2 	bl	80030a8 <LL_ADC_REG_StartConversion>
 80034e4:	e006      	b.n	80034f4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80034ee:	e001      	b.n	80034f4 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034f0:	2302      	movs	r3, #2
 80034f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80034f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	080040c3 	.word	0x080040c3
 8003504:	0800419b 	.word	0x0800419b
 8003508:	080041b7 	.word	0x080041b7

0800350c <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <HAL_ADC_Stop_DMA+0x16>
 800351e:	2302      	movs	r3, #2
 8003520:	e051      	b.n	80035c6 <HAL_ADC_Stop_DMA+0xba>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
#if defined(ADC_SUPPORT_2_5_MSPS)
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800352a:	2103      	movs	r1, #3
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 fc33 	bl	8003d98 <ADC_ConversionStop>
 8003532:	4603      	mov	r3, r0
 8003534:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d13f      	bne.n	80035bc <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0201 	bic.w	r2, r2, #1
 800354a:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003550:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d10f      	bne.n	800357a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355e:	4618      	mov	r0, r3
 8003560:	f001 f8cf 	bl	8004702 <HAL_DMA_Abort>
 8003564:	4603      	mov	r3, r0
 8003566:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d005      	beq.n	800357a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003572:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0210 	bic.w	r2, r2, #16
 8003588:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800358a:	7bfb      	ldrb	r3, [r7, #15]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d105      	bne.n	800359c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fd37 	bl	8004004 <ADC_Disable>
 8003596:	4603      	mov	r3, r0
 8003598:	73fb      	strb	r3, [r7, #15]
 800359a:	e002      	b.n	80035a2 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fd31 	bl	8004004 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d109      	bne.n	80035bc <HAL_ADC_Stop_DMA+0xb0>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035b0:	f023 0301 	bic.w	r3, r3, #1
 80035b4:	f043 0201 	orr.w	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
	...

0800360c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b0b6      	sub	sp, #216	; 0xd8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_ADC_ConfigChannel+0x22>
 800362a:	2302      	movs	r3, #2
 800362c:	e39f      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x762>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff fd5c 	bl	80030f8 <LL_ADC_REG_IsConversionOngoing>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	f040 8384 	bne.w	8003d50 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	6859      	ldr	r1, [r3, #4]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	f7ff fc0f 	bl	8002e78 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff fd4a 	bl	80030f8 <LL_ADC_REG_IsConversionOngoing>
 8003664:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff fd6a 	bl	8003146 <LL_ADC_INJ_IsConversionOngoing>
 8003672:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003676:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800367a:	2b00      	cmp	r3, #0
 800367c:	f040 81a6 	bne.w	80039cc <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003680:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003684:	2b00      	cmp	r3, #0
 8003686:	f040 81a1 	bne.w	80039cc <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6818      	ldr	r0, [r3, #0]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	6819      	ldr	r1, [r3, #0]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	461a      	mov	r2, r3
 8003698:	f7ff fc1a 	bl	8002ed0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	695a      	ldr	r2, [r3, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	08db      	lsrs	r3, r3, #3
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d00a      	beq.n	80036d4 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6919      	ldr	r1, [r3, #16]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80036ce:	f7ff fb6b 	bl	8002da8 <LL_ADC_SetOffset>
 80036d2:	e17b      	b.n	80039cc <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2100      	movs	r1, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fb88 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10a      	bne.n	8003700 <HAL_ADC_ConfigChannel+0xf4>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2100      	movs	r1, #0
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff fb7d 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 80036f6:	4603      	mov	r3, r0
 80036f8:	0e9b      	lsrs	r3, r3, #26
 80036fa:	f003 021f 	and.w	r2, r3, #31
 80036fe:	e01e      	b.n	800373e <HAL_ADC_ConfigChannel+0x132>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff fb72 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 800370c:	4603      	mov	r3, r0
 800370e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003716:	fa93 f3a3 	rbit	r3, r3
 800371a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 800371e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003722:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8003726:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 800372e:	2320      	movs	r3, #32
 8003730:	e004      	b.n	800373c <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8003732:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003736:	fab3 f383 	clz	r3, r3
 800373a:	b2db      	uxtb	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003746:	2b00      	cmp	r3, #0
 8003748:	d105      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x14a>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	0e9b      	lsrs	r3, r3, #26
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	e018      	b.n	8003788 <HAL_ADC_ConfigChannel+0x17c>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003762:	fa93 f3a3 	rbit	r3, r3
 8003766:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800376a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800376e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003772:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800377a:	2320      	movs	r3, #32
 800377c:	e004      	b.n	8003788 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800377e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003782:	fab3 f383 	clz	r3, r3
 8003786:	b2db      	uxtb	r3, r3
 8003788:	429a      	cmp	r2, r3
 800378a:	d106      	bne.n	800379a <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2200      	movs	r2, #0
 8003792:	2100      	movs	r1, #0
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff fb41 	bl	8002e1c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2101      	movs	r1, #1
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff fb25 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10a      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x1ba>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2101      	movs	r1, #1
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff fb1a 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 80037bc:	4603      	mov	r3, r0
 80037be:	0e9b      	lsrs	r3, r3, #26
 80037c0:	f003 021f 	and.w	r2, r3, #31
 80037c4:	e01e      	b.n	8003804 <HAL_ADC_ConfigChannel+0x1f8>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2101      	movs	r1, #1
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff fb0f 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037dc:	fa93 f3a3 	rbit	r3, r3
 80037e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80037e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80037ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 80037f4:	2320      	movs	r3, #32
 80037f6:	e004      	b.n	8003802 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 80037f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037fc:	fab3 f383 	clz	r3, r3
 8003800:	b2db      	uxtb	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800380c:	2b00      	cmp	r3, #0
 800380e:	d105      	bne.n	800381c <HAL_ADC_ConfigChannel+0x210>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	0e9b      	lsrs	r3, r3, #26
 8003816:	f003 031f 	and.w	r3, r3, #31
 800381a:	e018      	b.n	800384e <HAL_ADC_ConfigChannel+0x242>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003824:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003828:	fa93 f3a3 	rbit	r3, r3
 800382c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003830:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003834:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003838:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8003840:	2320      	movs	r3, #32
 8003842:	e004      	b.n	800384e <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8003844:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003848:	fab3 f383 	clz	r3, r3
 800384c:	b2db      	uxtb	r3, r3
 800384e:	429a      	cmp	r2, r3
 8003850:	d106      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2200      	movs	r2, #0
 8003858:	2101      	movs	r1, #1
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff fade 	bl	8002e1c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2102      	movs	r1, #2
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff fac2 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 800386c:	4603      	mov	r3, r0
 800386e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10a      	bne.n	800388c <HAL_ADC_ConfigChannel+0x280>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2102      	movs	r1, #2
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff fab7 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 8003882:	4603      	mov	r3, r0
 8003884:	0e9b      	lsrs	r3, r3, #26
 8003886:	f003 021f 	and.w	r2, r3, #31
 800388a:	e01e      	b.n	80038ca <HAL_ADC_ConfigChannel+0x2be>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2102      	movs	r1, #2
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff faac 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 8003898:	4603      	mov	r3, r0
 800389a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038a2:	fa93 f3a3 	rbit	r3, r3
 80038a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80038aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80038b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80038ba:	2320      	movs	r3, #32
 80038bc:	e004      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80038be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038c2:	fab3 f383 	clz	r3, r3
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	461a      	mov	r2, r3
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d105      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x2d6>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	0e9b      	lsrs	r3, r3, #26
 80038dc:	f003 031f 	and.w	r3, r3, #31
 80038e0:	e016      	b.n	8003910 <HAL_ADC_ConfigChannel+0x304>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038ee:	fa93 f3a3 	rbit	r3, r3
 80038f2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80038f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80038fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003902:	2320      	movs	r3, #32
 8003904:	e004      	b.n	8003910 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8003906:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800390a:	fab3 f383 	clz	r3, r3
 800390e:	b2db      	uxtb	r3, r3
 8003910:	429a      	cmp	r2, r3
 8003912:	d106      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2200      	movs	r2, #0
 800391a:	2102      	movs	r1, #2
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff fa7d 	bl	8002e1c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2103      	movs	r1, #3
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff fa61 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 800392e:	4603      	mov	r3, r0
 8003930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10a      	bne.n	800394e <HAL_ADC_ConfigChannel+0x342>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2103      	movs	r1, #3
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff fa56 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 8003944:	4603      	mov	r3, r0
 8003946:	0e9b      	lsrs	r3, r3, #26
 8003948:	f003 021f 	and.w	r2, r3, #31
 800394c:	e017      	b.n	800397e <HAL_ADC_ConfigChannel+0x372>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2103      	movs	r1, #3
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fa4b 	bl	8002df0 <LL_ADC_GetOffsetChannel>
 800395a:	4603      	mov	r3, r0
 800395c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003960:	fa93 f3a3 	rbit	r3, r3
 8003964:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003966:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003968:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800396a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8003970:	2320      	movs	r3, #32
 8003972:	e003      	b.n	800397c <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8003974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003976:	fab3 f383 	clz	r3, r3
 800397a:	b2db      	uxtb	r3, r3
 800397c:	461a      	mov	r2, r3
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003986:	2b00      	cmp	r3, #0
 8003988:	d105      	bne.n	8003996 <HAL_ADC_ConfigChannel+0x38a>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	0e9b      	lsrs	r3, r3, #26
 8003990:	f003 031f 	and.w	r3, r3, #31
 8003994:	e011      	b.n	80039ba <HAL_ADC_ConfigChannel+0x3ae>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800399e:	fa93 f3a3 	rbit	r3, r3
 80039a2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80039a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80039a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80039ae:	2320      	movs	r3, #32
 80039b0:	e003      	b.n	80039ba <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80039b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b4:	fab3 f383 	clz	r3, r3
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d106      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2200      	movs	r2, #0
 80039c4:	2103      	movs	r1, #3
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff fa28 	bl	8002e1c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff fb43 	bl	800305c <LL_ADC_IsEnabled>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f040 81c2 	bne.w	8003d62 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	6819      	ldr	r1, [r3, #0]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	461a      	mov	r2, r3
 80039ec:	f7ff fa9c 	bl	8002f28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	4a8e      	ldr	r2, [pc, #568]	; (8003c30 <HAL_ADC_ConfigChannel+0x624>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	f040 8130 	bne.w	8003c5c <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10b      	bne.n	8003a24 <HAL_ADC_ConfigChannel+0x418>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	0e9b      	lsrs	r3, r3, #26
 8003a12:	3301      	adds	r3, #1
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	2b09      	cmp	r3, #9
 8003a1a:	bf94      	ite	ls
 8003a1c:	2301      	movls	r3, #1
 8003a1e:	2300      	movhi	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	e019      	b.n	8003a58 <HAL_ADC_ConfigChannel+0x44c>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a2c:	fa93 f3a3 	rbit	r3, r3
 8003a30:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a34:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003a36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8003a3c:	2320      	movs	r3, #32
 8003a3e:	e003      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8003a40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a42:	fab3 f383 	clz	r3, r3
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	3301      	adds	r3, #1
 8003a4a:	f003 031f 	and.w	r3, r3, #31
 8003a4e:	2b09      	cmp	r3, #9
 8003a50:	bf94      	ite	ls
 8003a52:	2301      	movls	r3, #1
 8003a54:	2300      	movhi	r3, #0
 8003a56:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d079      	beq.n	8003b50 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d107      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0x46c>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	0e9b      	lsrs	r3, r3, #26
 8003a6e:	3301      	adds	r3, #1
 8003a70:	069b      	lsls	r3, r3, #26
 8003a72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a76:	e015      	b.n	8003aa4 <HAL_ADC_ConfigChannel+0x498>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a80:	fa93 f3a3 	rbit	r3, r3
 8003a84:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a88:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003a90:	2320      	movs	r3, #32
 8003a92:	e003      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a96:	fab3 f383 	clz	r3, r3
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	069b      	lsls	r3, r3, #26
 8003aa0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d109      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x4b8>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	0e9b      	lsrs	r3, r3, #26
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	f003 031f 	and.w	r3, r3, #31
 8003abc:	2101      	movs	r1, #1
 8003abe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac2:	e017      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x4e8>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003acc:	fa93 f3a3 	rbit	r3, r3
 8003ad0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8003adc:	2320      	movs	r3, #32
 8003ade:	e003      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae2:	fab3 f383 	clz	r3, r3
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	3301      	adds	r3, #1
 8003aea:	f003 031f 	and.w	r3, r3, #31
 8003aee:	2101      	movs	r1, #1
 8003af0:	fa01 f303 	lsl.w	r3, r1, r3
 8003af4:	ea42 0103 	orr.w	r1, r2, r3
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10a      	bne.n	8003b1a <HAL_ADC_ConfigChannel+0x50e>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	0e9b      	lsrs	r3, r3, #26
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	f003 021f 	and.w	r2, r3, #31
 8003b10:	4613      	mov	r3, r2
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	4413      	add	r3, r2
 8003b16:	051b      	lsls	r3, r3, #20
 8003b18:	e018      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x540>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b22:	fa93 f3a3 	rbit	r3, r3
 8003b26:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003b32:	2320      	movs	r3, #32
 8003b34:	e003      	b.n	8003b3e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b38:	fab3 f383 	clz	r3, r3
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	3301      	adds	r3, #1
 8003b40:	f003 021f 	and.w	r2, r3, #31
 8003b44:	4613      	mov	r3, r2
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	4413      	add	r3, r2
 8003b4a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	e080      	b.n	8003c52 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d107      	bne.n	8003b6c <HAL_ADC_ConfigChannel+0x560>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	0e9b      	lsrs	r3, r3, #26
 8003b62:	3301      	adds	r3, #1
 8003b64:	069b      	lsls	r3, r3, #26
 8003b66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b6a:	e015      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x58c>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b74:	fa93 f3a3 	rbit	r3, r3
 8003b78:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8003b84:	2320      	movs	r3, #32
 8003b86:	e003      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8003b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8a:	fab3 f383 	clz	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	3301      	adds	r3, #1
 8003b92:	069b      	lsls	r3, r3, #26
 8003b94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d109      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x5ac>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	0e9b      	lsrs	r3, r3, #26
 8003baa:	3301      	adds	r3, #1
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb6:	e017      	b.n	8003be8 <HAL_ADC_ConfigChannel+0x5dc>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	fa93 f3a3 	rbit	r3, r3
 8003bc4:	61fb      	str	r3, [r7, #28]
  return result;
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8003bd0:	2320      	movs	r3, #32
 8003bd2:	e003      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	fab3 f383 	clz	r3, r3
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	3301      	adds	r3, #1
 8003bde:	f003 031f 	and.w	r3, r3, #31
 8003be2:	2101      	movs	r1, #1
 8003be4:	fa01 f303 	lsl.w	r3, r1, r3
 8003be8:	ea42 0103 	orr.w	r1, r2, r3
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10d      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x608>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	0e9b      	lsrs	r3, r3, #26
 8003bfe:	3301      	adds	r3, #1
 8003c00:	f003 021f 	and.w	r2, r3, #31
 8003c04:	4613      	mov	r3, r2
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	4413      	add	r3, r2
 8003c0a:	3b1e      	subs	r3, #30
 8003c0c:	051b      	lsls	r3, r3, #20
 8003c0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c12:	e01d      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x644>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	fa93 f3a3 	rbit	r3, r3
 8003c20:	613b      	str	r3, [r7, #16]
  return result;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d103      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8003c2c:	2320      	movs	r3, #32
 8003c2e:	e005      	b.n	8003c3c <HAL_ADC_ConfigChannel+0x630>
 8003c30:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	fab3 f383 	clz	r3, r3
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	f003 021f 	and.w	r2, r3, #31
 8003c42:	4613      	mov	r3, r2
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	4413      	add	r3, r2
 8003c48:	3b1e      	subs	r3, #30
 8003c4a:	051b      	lsls	r3, r3, #20
 8003c4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c50:	430b      	orrs	r3, r1
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	6892      	ldr	r2, [r2, #8]
 8003c56:	4619      	mov	r1, r3
 8003c58:	f7ff f93a 	bl	8002ed0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	4b45      	ldr	r3, [pc, #276]	; (8003d78 <HAL_ADC_ConfigChannel+0x76c>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d07c      	beq.n	8003d62 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c68:	4844      	ldr	r0, [pc, #272]	; (8003d7c <HAL_ADC_ConfigChannel+0x770>)
 8003c6a:	f7ff f88f 	bl	8002d8c <LL_ADC_GetCommonPathInternalCh>
 8003c6e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c72:	4843      	ldr	r0, [pc, #268]	; (8003d80 <HAL_ADC_ConfigChannel+0x774>)
 8003c74:	f7ff f9f2 	bl	800305c <LL_ADC_IsEnabled>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d15e      	bne.n	8003d3c <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a40      	ldr	r2, [pc, #256]	; (8003d84 <HAL_ADC_ConfigChannel+0x778>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d127      	bne.n	8003cd8 <HAL_ADC_ConfigChannel+0x6cc>
 8003c88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d121      	bne.n	8003cd8 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a39      	ldr	r2, [pc, #228]	; (8003d80 <HAL_ADC_ConfigChannel+0x774>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d161      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003c9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ca2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4834      	ldr	r0, [pc, #208]	; (8003d7c <HAL_ADC_ConfigChannel+0x770>)
 8003caa:	f7ff f85c 	bl	8002d66 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cae:	4b36      	ldr	r3, [pc, #216]	; (8003d88 <HAL_ADC_ConfigChannel+0x77c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	099b      	lsrs	r3, r3, #6
 8003cb4:	4a35      	ldr	r2, [pc, #212]	; (8003d8c <HAL_ADC_ConfigChannel+0x780>)
 8003cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cba:	099b      	lsrs	r3, r3, #6
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003cc8:	e002      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f9      	bne.n	8003cca <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cd6:	e044      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a2c      	ldr	r2, [pc, #176]	; (8003d90 <HAL_ADC_ConfigChannel+0x784>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d113      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x6fe>
 8003ce2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ce6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10d      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a23      	ldr	r2, [pc, #140]	; (8003d80 <HAL_ADC_ConfigChannel+0x774>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d134      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003cf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d00:	4619      	mov	r1, r3
 8003d02:	481e      	ldr	r0, [pc, #120]	; (8003d7c <HAL_ADC_ConfigChannel+0x770>)
 8003d04:	f7ff f82f 	bl	8002d66 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d08:	e02b      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a21      	ldr	r2, [pc, #132]	; (8003d94 <HAL_ADC_ConfigChannel+0x788>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d126      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0x756>
 8003d14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d120      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a16      	ldr	r2, [pc, #88]	; (8003d80 <HAL_ADC_ConfigChannel+0x774>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d11b      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003d2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d32:	4619      	mov	r1, r3
 8003d34:	4811      	ldr	r0, [pc, #68]	; (8003d7c <HAL_ADC_ConfigChannel+0x770>)
 8003d36:	f7ff f816 	bl	8002d66 <LL_ADC_SetCommonPathInternalCh>
 8003d3a:	e012      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d40:	f043 0220 	orr.w	r2, r3, #32
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003d4e:	e008      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d54:	f043 0220 	orr.w	r2, r3, #32
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8003d6a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	37d8      	adds	r7, #216	; 0xd8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	80080000 	.word	0x80080000
 8003d7c:	50040300 	.word	0x50040300
 8003d80:	50040000 	.word	0x50040000
 8003d84:	c7520000 	.word	0xc7520000
 8003d88:	2000000c 	.word	0x2000000c
 8003d8c:	053e2d63 	.word	0x053e2d63
 8003d90:	cb840000 	.word	0xcb840000
 8003d94:	80000001 	.word	0x80000001

08003d98 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff f9a2 	bl	80030f8 <LL_ADC_REG_IsConversionOngoing>
 8003db4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff f9c3 	bl	8003146 <LL_ADC_INJ_IsConversionOngoing>
 8003dc0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d103      	bne.n	8003dd0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 8098 	beq.w	8003f00 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d02a      	beq.n	8003e34 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	7e5b      	ldrb	r3, [r3, #25]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d126      	bne.n	8003e34 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	7e1b      	ldrb	r3, [r3, #24]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d122      	bne.n	8003e34 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003dee:	2301      	movs	r3, #1
 8003df0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003df2:	e014      	b.n	8003e1e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	4a45      	ldr	r2, [pc, #276]	; (8003f0c <ADC_ConversionStop+0x174>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d90d      	bls.n	8003e18 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e00:	f043 0210 	orr.w	r2, r3, #16
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0c:	f043 0201 	orr.w	r2, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e074      	b.n	8003f02 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e28:	2b40      	cmp	r3, #64	; 0x40
 8003e2a:	d1e3      	bne.n	8003df4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2240      	movs	r2, #64	; 0x40
 8003e32:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d014      	beq.n	8003e64 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff f95a 	bl	80030f8 <LL_ADC_REG_IsConversionOngoing>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00c      	beq.n	8003e64 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff f917 	bl	8003082 <LL_ADC_IsDisableOngoing>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d104      	bne.n	8003e64 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff f936 	bl	80030d0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d014      	beq.n	8003e94 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff f969 	bl	8003146 <LL_ADC_INJ_IsConversionOngoing>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00c      	beq.n	8003e94 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff f8ff 	bl	8003082 <LL_ADC_IsDisableOngoing>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d104      	bne.n	8003e94 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff f945 	bl	800311e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d005      	beq.n	8003ea6 <ADC_ConversionStop+0x10e>
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	d105      	bne.n	8003eac <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003ea0:	230c      	movs	r3, #12
 8003ea2:	617b      	str	r3, [r7, #20]
        break;
 8003ea4:	e005      	b.n	8003eb2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003ea6:	2308      	movs	r3, #8
 8003ea8:	617b      	str	r3, [r7, #20]
        break;
 8003eaa:	e002      	b.n	8003eb2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003eac:	2304      	movs	r3, #4
 8003eae:	617b      	str	r3, [r7, #20]
        break;
 8003eb0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003eb2:	f7fe ff15 	bl	8002ce0 <HAL_GetTick>
 8003eb6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003eb8:	e01b      	b.n	8003ef2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003eba:	f7fe ff11 	bl	8002ce0 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b05      	cmp	r3, #5
 8003ec6:	d914      	bls.n	8003ef2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00d      	beq.n	8003ef2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eda:	f043 0210 	orr.w	r2, r3, #16
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee6:	f043 0201 	orr.w	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e007      	b.n	8003f02 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	4013      	ands	r3, r2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1dc      	bne.n	8003eba <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3720      	adds	r7, #32
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	a33fffff 	.word	0xa33fffff

08003f10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff f89b 	bl	800305c <LL_ADC_IsEnabled>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d15e      	bne.n	8003fea <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	4b30      	ldr	r3, [pc, #192]	; (8003ff4 <ADC_Enable+0xe4>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00d      	beq.n	8003f56 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3e:	f043 0210 	orr.w	r2, r3, #16
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4a:	f043 0201 	orr.w	r2, r3, #1
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e04a      	b.n	8003fec <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff f856 	bl	800300c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003f60:	4825      	ldr	r0, [pc, #148]	; (8003ff8 <ADC_Enable+0xe8>)
 8003f62:	f7fe ff13 	bl	8002d8c <LL_ADC_GetCommonPathInternalCh>
 8003f66:	4603      	mov	r3, r0
 8003f68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00f      	beq.n	8003f90 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f70:	4b22      	ldr	r3, [pc, #136]	; (8003ffc <ADC_Enable+0xec>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	099b      	lsrs	r3, r3, #6
 8003f76:	4a22      	ldr	r2, [pc, #136]	; (8004000 <ADC_Enable+0xf0>)
 8003f78:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7c:	099b      	lsrs	r3, r3, #6
 8003f7e:	3301      	adds	r3, #1
 8003f80:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003f82:	e002      	b.n	8003f8a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1f9      	bne.n	8003f84 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003f90:	f7fe fea6 	bl	8002ce0 <HAL_GetTick>
 8003f94:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f96:	e021      	b.n	8003fdc <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff f85d 	bl	800305c <LL_ADC_IsEnabled>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d104      	bne.n	8003fb2 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff f82d 	bl	800300c <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003fb2:	f7fe fe95 	bl	8002ce0 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d90d      	bls.n	8003fdc <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc4:	f043 0210 	orr.w	r2, r3, #16
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd0:	f043 0201 	orr.w	r2, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e007      	b.n	8003fec <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d1d6      	bne.n	8003f98 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	8000003f 	.word	0x8000003f
 8003ff8:	50040300 	.word	0x50040300
 8003ffc:	2000000c 	.word	0x2000000c
 8004000:	053e2d63 	.word	0x053e2d63

08004004 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff f836 	bl	8003082 <LL_ADC_IsDisableOngoing>
 8004016:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff f81d 	bl	800305c <LL_ADC_IsEnabled>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d047      	beq.n	80040b8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d144      	bne.n	80040b8 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 030d 	and.w	r3, r3, #13
 8004038:	2b01      	cmp	r3, #1
 800403a:	d10c      	bne.n	8004056 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f7fe fff7 	bl	8003034 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2203      	movs	r2, #3
 800404c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800404e:	f7fe fe47 	bl	8002ce0 <HAL_GetTick>
 8004052:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004054:	e029      	b.n	80040aa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405a:	f043 0210 	orr.w	r2, r3, #16
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004066:	f043 0201 	orr.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e023      	b.n	80040ba <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004072:	f7fe fe35 	bl	8002ce0 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d914      	bls.n	80040aa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00d      	beq.n	80040aa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004092:	f043 0210 	orr.w	r2, r3, #16
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409e:	f043 0201 	orr.w	r2, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e007      	b.n	80040ba <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1dc      	bne.n	8004072 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b084      	sub	sp, #16
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d14b      	bne.n	8004174 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d021      	beq.n	800413a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fe fea9 	bl	8002e52 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d032      	beq.n	800416c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d12b      	bne.n	800416c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004118:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d11f      	bne.n	800416c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004130:	f043 0201 	orr.w	r2, r3, #1
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	655a      	str	r2, [r3, #84]	; 0x54
 8004138:	e018      	b.n	800416c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d111      	bne.n	800416c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d105      	bne.n	800416c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004164:	f043 0201 	orr.w	r2, r3, #1
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f7ff fa2e 	bl	80035ce <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004172:	e00e      	b.n	8004192 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f7ff fa38 	bl	80035f6 <HAL_ADC_ErrorCallback>
}
 8004186:	e004      	b.n	8004192 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	4798      	blx	r3
}
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f7ff fa1a 	bl	80035e2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041ae:	bf00      	nop
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b084      	sub	sp, #16
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d4:	f043 0204 	orr.w	r2, r3, #4
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f7ff fa0a 	bl	80035f6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041e2:	bf00      	nop
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041fc:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <__NVIC_SetPriorityGrouping+0x44>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004208:	4013      	ands	r3, r2
 800420a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800421c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800421e:	4a04      	ldr	r2, [pc, #16]	; (8004230 <__NVIC_SetPriorityGrouping+0x44>)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	60d3      	str	r3, [r2, #12]
}
 8004224:	bf00      	nop
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	e000ed00 	.word	0xe000ed00

08004234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004238:	4b04      	ldr	r3, [pc, #16]	; (800424c <__NVIC_GetPriorityGrouping+0x18>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	0a1b      	lsrs	r3, r3, #8
 800423e:	f003 0307 	and.w	r3, r3, #7
}
 8004242:	4618      	mov	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	e000ed00 	.word	0xe000ed00

08004250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800425a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425e:	2b00      	cmp	r3, #0
 8004260:	db0b      	blt.n	800427a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	f003 021f 	and.w	r2, r3, #31
 8004268:	4907      	ldr	r1, [pc, #28]	; (8004288 <__NVIC_EnableIRQ+0x38>)
 800426a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	2001      	movs	r0, #1
 8004272:	fa00 f202 	lsl.w	r2, r0, r2
 8004276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	e000e100 	.word	0xe000e100

0800428c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429a:	2b00      	cmp	r3, #0
 800429c:	db0c      	blt.n	80042b8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	f003 021f 	and.w	r2, r3, #31
 80042a4:	4907      	ldr	r1, [pc, #28]	; (80042c4 <__NVIC_SetPendingIRQ+0x38>)
 80042a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042aa:	095b      	lsrs	r3, r3, #5
 80042ac:	2001      	movs	r0, #1
 80042ae:	fa00 f202 	lsl.w	r2, r0, r2
 80042b2:	3340      	adds	r3, #64	; 0x40
 80042b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	e000e100 	.word	0xe000e100

080042c8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	db0c      	blt.n	80042f4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	f003 021f 	and.w	r2, r3, #31
 80042e0:	4907      	ldr	r1, [pc, #28]	; (8004300 <__NVIC_ClearPendingIRQ+0x38>)
 80042e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	2001      	movs	r0, #1
 80042ea:	fa00 f202 	lsl.w	r2, r0, r2
 80042ee:	3360      	adds	r3, #96	; 0x60
 80042f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	e000e100 	.word	0xe000e100

08004304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	4603      	mov	r3, r0
 800430c:	6039      	str	r1, [r7, #0]
 800430e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004314:	2b00      	cmp	r3, #0
 8004316:	db0a      	blt.n	800432e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	b2da      	uxtb	r2, r3
 800431c:	490c      	ldr	r1, [pc, #48]	; (8004350 <__NVIC_SetPriority+0x4c>)
 800431e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004322:	0112      	lsls	r2, r2, #4
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	440b      	add	r3, r1
 8004328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800432c:	e00a      	b.n	8004344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	b2da      	uxtb	r2, r3
 8004332:	4908      	ldr	r1, [pc, #32]	; (8004354 <__NVIC_SetPriority+0x50>)
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	3b04      	subs	r3, #4
 800433c:	0112      	lsls	r2, r2, #4
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	440b      	add	r3, r1
 8004342:	761a      	strb	r2, [r3, #24]
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	e000e100 	.word	0xe000e100
 8004354:	e000ed00 	.word	0xe000ed00

08004358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004358:	b480      	push	{r7}
 800435a:	b089      	sub	sp, #36	; 0x24
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	f1c3 0307 	rsb	r3, r3, #7
 8004372:	2b04      	cmp	r3, #4
 8004374:	bf28      	it	cs
 8004376:	2304      	movcs	r3, #4
 8004378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	3304      	adds	r3, #4
 800437e:	2b06      	cmp	r3, #6
 8004380:	d902      	bls.n	8004388 <NVIC_EncodePriority+0x30>
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	3b03      	subs	r3, #3
 8004386:	e000      	b.n	800438a <NVIC_EncodePriority+0x32>
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800438c:	f04f 32ff 	mov.w	r2, #4294967295
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43da      	mvns	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	401a      	ands	r2, r3
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043a0:	f04f 31ff 	mov.w	r1, #4294967295
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	fa01 f303 	lsl.w	r3, r1, r3
 80043aa:	43d9      	mvns	r1, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043b0:	4313      	orrs	r3, r2
         );
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3724      	adds	r7, #36	; 0x24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
	...

080043c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043d0:	d301      	bcc.n	80043d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043d2:	2301      	movs	r3, #1
 80043d4:	e00f      	b.n	80043f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043d6:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <SysTick_Config+0x40>)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3b01      	subs	r3, #1
 80043dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043de:	210f      	movs	r1, #15
 80043e0:	f04f 30ff 	mov.w	r0, #4294967295
 80043e4:	f7ff ff8e 	bl	8004304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <SysTick_Config+0x40>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043ee:	4b04      	ldr	r3, [pc, #16]	; (8004400 <SysTick_Config+0x40>)
 80043f0:	2207      	movs	r2, #7
 80043f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	e000e010 	.word	0xe000e010

08004404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff feed 	bl	80041ec <__NVIC_SetPriorityGrouping>
}
 8004412:	bf00      	nop
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b086      	sub	sp, #24
 800441e:	af00      	add	r7, sp, #0
 8004420:	4603      	mov	r3, r0
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
 8004426:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004428:	f7ff ff04 	bl	8004234 <__NVIC_GetPriorityGrouping>
 800442c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	68b9      	ldr	r1, [r7, #8]
 8004432:	6978      	ldr	r0, [r7, #20]
 8004434:	f7ff ff90 	bl	8004358 <NVIC_EncodePriority>
 8004438:	4602      	mov	r2, r0
 800443a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800443e:	4611      	mov	r1, r2
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff ff5f 	bl	8004304 <__NVIC_SetPriority>
}
 8004446:	bf00      	nop
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b082      	sub	sp, #8
 8004452:	af00      	add	r7, sp, #0
 8004454:	4603      	mov	r3, r0
 8004456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff fef7 	bl	8004250 <__NVIC_EnableIRQ>
}
 8004462:	bf00      	nop
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b082      	sub	sp, #8
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7ff ffa4 	bl	80043c0 <SysTick_Config>
 8004478:	4603      	mov	r3, r0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b082      	sub	sp, #8
 8004486:	af00      	add	r7, sp, #0
 8004488:	4603      	mov	r3, r0
 800448a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800448c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff fefb 	bl	800428c <__NVIC_SetPendingIRQ>
}
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b082      	sub	sp, #8
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	4603      	mov	r3, r0
 80044a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80044a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff ff0b 	bl	80042c8 <__NVIC_ClearPendingIRQ>
}
 80044b2:	bf00      	nop
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e08e      	b.n	80045ec <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	461a      	mov	r2, r3
 80044d4:	4b47      	ldr	r3, [pc, #284]	; (80045f4 <HAL_DMA_Init+0x138>)
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d80f      	bhi.n	80044fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	461a      	mov	r2, r3
 80044e0:	4b45      	ldr	r3, [pc, #276]	; (80045f8 <HAL_DMA_Init+0x13c>)
 80044e2:	4413      	add	r3, r2
 80044e4:	4a45      	ldr	r2, [pc, #276]	; (80045fc <HAL_DMA_Init+0x140>)
 80044e6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ea:	091b      	lsrs	r3, r3, #4
 80044ec:	009a      	lsls	r2, r3, #2
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a42      	ldr	r2, [pc, #264]	; (8004600 <HAL_DMA_Init+0x144>)
 80044f6:	641a      	str	r2, [r3, #64]	; 0x40
 80044f8:	e00e      	b.n	8004518 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	4b40      	ldr	r3, [pc, #256]	; (8004604 <HAL_DMA_Init+0x148>)
 8004502:	4413      	add	r3, r2
 8004504:	4a3d      	ldr	r2, [pc, #244]	; (80045fc <HAL_DMA_Init+0x140>)
 8004506:	fba2 2303 	umull	r2, r3, r2, r3
 800450a:	091b      	lsrs	r3, r3, #4
 800450c:	009a      	lsls	r2, r3, #2
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a3c      	ldr	r2, [pc, #240]	; (8004608 <HAL_DMA_Init+0x14c>)
 8004516:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800452e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004532:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800453c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004548:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004554:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 fa16 	bl	800499c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004578:	d102      	bne.n	8004580 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004588:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800458c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004596:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d010      	beq.n	80045c2 <HAL_DMA_Init+0x106>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	d80c      	bhi.n	80045c2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 fa35 	bl	8004a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80045be:	605a      	str	r2, [r3, #4]
 80045c0:	e008      	b.n	80045d4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40020407 	.word	0x40020407
 80045f8:	bffdfff8 	.word	0xbffdfff8
 80045fc:	cccccccd 	.word	0xcccccccd
 8004600:	40020000 	.word	0x40020000
 8004604:	bffdfbf8 	.word	0xbffdfbf8
 8004608:	40020400 	.word	0x40020400

0800460c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <HAL_DMA_Start_IT+0x20>
 8004628:	2302      	movs	r3, #2
 800462a:	e066      	b.n	80046fa <HAL_DMA_Start_IT+0xee>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b01      	cmp	r3, #1
 800463e:	d155      	bne.n	80046ec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0201 	bic.w	r2, r2, #1
 800465c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	68b9      	ldr	r1, [r7, #8]
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 f95a 	bl	800491e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	2b00      	cmp	r3, #0
 8004670:	d008      	beq.n	8004684 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 020e 	orr.w	r2, r2, #14
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	e00f      	b.n	80046a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0204 	bic.w	r2, r2, #4
 8004692:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 020a 	orr.w	r2, r2, #10
 80046a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d007      	beq.n	80046c2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046c0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d007      	beq.n	80046da <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f042 0201 	orr.w	r2, r2, #1
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	e005      	b.n	80046f8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80046f4:	2302      	movs	r3, #2
 80046f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80046f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e04f      	b.n	80047b4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d008      	beq.n	8004732 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2204      	movs	r2, #4
 8004724:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e040      	b.n	80047b4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 020e 	bic.w	r2, r2, #14
 8004740:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800474c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004750:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0201 	bic.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004766:	f003 021c 	and.w	r2, r3, #28
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	2101      	movs	r1, #1
 8004770:	fa01 f202 	lsl.w	r2, r1, r2
 8004774:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800477e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00c      	beq.n	80047a2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004792:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004796:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80047a0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047dc:	f003 031c 	and.w	r3, r3, #28
 80047e0:	2204      	movs	r2, #4
 80047e2:	409a      	lsls	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d026      	beq.n	800483a <HAL_DMA_IRQHandler+0x7a>
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d021      	beq.n	800483a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d107      	bne.n	8004814 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0204 	bic.w	r2, r2, #4
 8004812:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004818:	f003 021c 	and.w	r2, r3, #28
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004820:	2104      	movs	r1, #4
 8004822:	fa01 f202 	lsl.w	r2, r1, r2
 8004826:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	2b00      	cmp	r3, #0
 800482e:	d071      	beq.n	8004914 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004838:	e06c      	b.n	8004914 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483e:	f003 031c 	and.w	r3, r3, #28
 8004842:	2202      	movs	r2, #2
 8004844:	409a      	lsls	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4013      	ands	r3, r2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d02e      	beq.n	80048ac <HAL_DMA_IRQHandler+0xec>
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d029      	beq.n	80048ac <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0320 	and.w	r3, r3, #32
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10b      	bne.n	800487e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 020a 	bic.w	r2, r2, #10
 8004874:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004882:	f003 021c 	and.w	r2, r3, #28
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	2102      	movs	r1, #2
 800488c:	fa01 f202 	lsl.w	r2, r1, r2
 8004890:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d038      	beq.n	8004914 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80048aa:	e033      	b.n	8004914 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b0:	f003 031c 	and.w	r3, r3, #28
 80048b4:	2208      	movs	r2, #8
 80048b6:	409a      	lsls	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4013      	ands	r3, r2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d02a      	beq.n	8004916 <HAL_DMA_IRQHandler+0x156>
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d025      	beq.n	8004916 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 020e 	bic.w	r2, r2, #14
 80048d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048de:	f003 021c 	and.w	r2, r3, #28
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	2101      	movs	r1, #1
 80048e8:	fa01 f202 	lsl.w	r2, r1, r2
 80048ec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004908:	2b00      	cmp	r3, #0
 800490a:	d004      	beq.n	8004916 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004914:	bf00      	nop
 8004916:	bf00      	nop
}
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800491e:	b480      	push	{r7}
 8004920:	b085      	sub	sp, #20
 8004922:	af00      	add	r7, sp, #0
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	607a      	str	r2, [r7, #4]
 800492a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004934:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493a:	2b00      	cmp	r3, #0
 800493c:	d004      	beq.n	8004948 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004946:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494c:	f003 021c 	and.w	r2, r3, #28
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	2101      	movs	r1, #1
 8004956:	fa01 f202 	lsl.w	r2, r1, r2
 800495a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b10      	cmp	r3, #16
 800496a:	d108      	bne.n	800497e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800497c:	e007      	b.n	800498e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	60da      	str	r2, [r3, #12]
}
 800498e:	bf00      	nop
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	461a      	mov	r2, r3
 80049aa:	4b17      	ldr	r3, [pc, #92]	; (8004a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d80a      	bhi.n	80049c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b4:	089b      	lsrs	r3, r3, #2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80049bc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6493      	str	r3, [r2, #72]	; 0x48
 80049c4:	e007      	b.n	80049d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ca:	089b      	lsrs	r3, r3, #2
 80049cc:	009a      	lsls	r2, r3, #2
 80049ce:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80049d0:	4413      	add	r3, r2
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	3b08      	subs	r3, #8
 80049de:	4a0c      	ldr	r2, [pc, #48]	; (8004a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80049e0:	fba2 2303 	umull	r2, r3, r2, r3
 80049e4:	091b      	lsrs	r3, r3, #4
 80049e6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a0a      	ldr	r2, [pc, #40]	; (8004a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80049ec:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f003 031f 	and.w	r3, r3, #31
 80049f4:	2201      	movs	r2, #1
 80049f6:	409a      	lsls	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80049fc:	bf00      	nop
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	40020407 	.word	0x40020407
 8004a0c:	4002081c 	.word	0x4002081c
 8004a10:	cccccccd 	.word	0xcccccccd
 8004a14:	40020880 	.word	0x40020880

08004a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a28:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004a2e:	4413      	add	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	461a      	mov	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a09      	ldr	r2, [pc, #36]	; (8004a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004a3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3b01      	subs	r3, #1
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	2201      	movs	r2, #1
 8004a48:	409a      	lsls	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004a4e:	bf00      	nop
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	1000823f 	.word	0x1000823f
 8004a60:	40020940 	.word	0x40020940

08004a64 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a72:	e146      	b.n	8004d02 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	2101      	movs	r1, #1
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a80:	4013      	ands	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 8138 	beq.w	8004cfc <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f003 0303 	and.w	r3, r3, #3
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d005      	beq.n	8004aa4 <HAL_GPIO_Init+0x40>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f003 0303 	and.w	r3, r3, #3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d130      	bne.n	8004b06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	2203      	movs	r2, #3
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ada:	2201      	movs	r2, #1
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	091b      	lsrs	r3, r3, #4
 8004af0:	f003 0201 	and.w	r2, r3, #1
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d017      	beq.n	8004b42 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	2203      	movs	r2, #3
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	43db      	mvns	r3, r3
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4013      	ands	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	fa02 f303 	lsl.w	r3, r2, r3
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d123      	bne.n	8004b96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	08da      	lsrs	r2, r3, #3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3208      	adds	r2, #8
 8004b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	220f      	movs	r2, #15
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43db      	mvns	r3, r3
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	08da      	lsrs	r2, r3, #3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3208      	adds	r2, #8
 8004b90:	6939      	ldr	r1, [r7, #16]
 8004b92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	43db      	mvns	r3, r3
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4013      	ands	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f003 0203 	and.w	r2, r3, #3
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 8092 	beq.w	8004cfc <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004bd8:	4a51      	ldr	r2, [pc, #324]	; (8004d20 <HAL_GPIO_Init+0x2bc>)
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	089b      	lsrs	r3, r3, #2
 8004bde:	3302      	adds	r3, #2
 8004be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f003 0303 	and.w	r3, r3, #3
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	220f      	movs	r2, #15
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c02:	d013      	beq.n	8004c2c <HAL_GPIO_Init+0x1c8>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a47      	ldr	r2, [pc, #284]	; (8004d24 <HAL_GPIO_Init+0x2c0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d00d      	beq.n	8004c28 <HAL_GPIO_Init+0x1c4>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a46      	ldr	r2, [pc, #280]	; (8004d28 <HAL_GPIO_Init+0x2c4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d007      	beq.n	8004c24 <HAL_GPIO_Init+0x1c0>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a45      	ldr	r2, [pc, #276]	; (8004d2c <HAL_GPIO_Init+0x2c8>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d101      	bne.n	8004c20 <HAL_GPIO_Init+0x1bc>
 8004c1c:	2304      	movs	r3, #4
 8004c1e:	e006      	b.n	8004c2e <HAL_GPIO_Init+0x1ca>
 8004c20:	2307      	movs	r3, #7
 8004c22:	e004      	b.n	8004c2e <HAL_GPIO_Init+0x1ca>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e002      	b.n	8004c2e <HAL_GPIO_Init+0x1ca>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e000      	b.n	8004c2e <HAL_GPIO_Init+0x1ca>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	f002 0203 	and.w	r2, r2, #3
 8004c34:	0092      	lsls	r2, r2, #2
 8004c36:	4093      	lsls	r3, r2
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c3e:	4938      	ldr	r1, [pc, #224]	; (8004d20 <HAL_GPIO_Init+0x2bc>)
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	089b      	lsrs	r3, r3, #2
 8004c44:	3302      	adds	r3, #2
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c4c:	4b38      	ldr	r3, [pc, #224]	; (8004d30 <HAL_GPIO_Init+0x2cc>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	43db      	mvns	r3, r3
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c70:	4a2f      	ldr	r2, [pc, #188]	; (8004d30 <HAL_GPIO_Init+0x2cc>)
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c76:	4b2e      	ldr	r3, [pc, #184]	; (8004d30 <HAL_GPIO_Init+0x2cc>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	4013      	ands	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c9a:	4a25      	ldr	r2, [pc, #148]	; (8004d30 <HAL_GPIO_Init+0x2cc>)
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004ca0:	4b23      	ldr	r3, [pc, #140]	; (8004d30 <HAL_GPIO_Init+0x2cc>)
 8004ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	43db      	mvns	r3, r3
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004cc6:	4a1a      	ldr	r2, [pc, #104]	; (8004d30 <HAL_GPIO_Init+0x2cc>)
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004cce:	4b18      	ldr	r3, [pc, #96]	; (8004d30 <HAL_GPIO_Init+0x2cc>)
 8004cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004cf4:	4a0e      	ldr	r2, [pc, #56]	; (8004d30 <HAL_GPIO_Init+0x2cc>)
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	fa22 f303 	lsr.w	r3, r2, r3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f47f aeb1 	bne.w	8004a74 <HAL_GPIO_Init+0x10>
  }
}
 8004d12:	bf00      	nop
 8004d14:	bf00      	nop
 8004d16:	371c      	adds	r7, #28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	40010000 	.word	0x40010000
 8004d24:	48000400 	.word	0x48000400
 8004d28:	48000800 	.word	0x48000800
 8004d2c:	48001000 	.word	0x48001000
 8004d30:	58000800 	.word	0x58000800

08004d34 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	887b      	ldrh	r3, [r7, #2]
 8004d46:	4013      	ands	r3, r2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	73fb      	strb	r3, [r7, #15]
 8004d50:	e001      	b.n	8004d56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d52:	2300      	movs	r3, #0
 8004d54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	807b      	strh	r3, [r7, #2]
 8004d70:	4613      	mov	r3, r2
 8004d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d74:	787b      	ldrb	r3, [r7, #1]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d7a:	887a      	ldrh	r2, [r7, #2]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d80:	e002      	b.n	8004d88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d82:	887a      	ldrh	r2, [r7, #2]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d9e:	4b08      	ldr	r3, [pc, #32]	; (8004dc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	88fb      	ldrh	r3, [r7, #6]
 8004da4:	4013      	ands	r3, r2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d006      	beq.n	8004db8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004daa:	4a05      	ldr	r2, [pc, #20]	; (8004dc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dac:	88fb      	ldrh	r3, [r7, #6]
 8004dae:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004db0:	88fb      	ldrh	r3, [r7, #6]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fc ff8e 	bl	8001cd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004db8:	bf00      	nop
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	58000800 	.word	0x58000800

08004dc4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004dca:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <HAL_HSEM_IRQHandler+0x30>)
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004dd0:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <HAL_HSEM_IRQHandler+0x30>)
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	4906      	ldr	r1, [pc, #24]	; (8004df4 <HAL_HSEM_IRQHandler+0x30>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004dde:	4a05      	ldr	r2, [pc, #20]	; (8004df4 <HAL_HSEM_IRQHandler+0x30>)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f807 	bl	8004df8 <HAL_HSEM_FreeCallback>
}
 8004dea:	bf00      	nop
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	58001500 	.word	0x58001500

08004df8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e081      	b.n	8004f22 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d106      	bne.n	8004e38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fd fc52 	bl	80026dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2224      	movs	r2, #36	; 0x24
 8004e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0201 	bic.w	r2, r2, #1
 8004e4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d107      	bne.n	8004e86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e82:	609a      	str	r2, [r3, #8]
 8004e84:	e006      	b.n	8004e94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004e92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d104      	bne.n	8004ea6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ea4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6812      	ldr	r2, [r2, #0]
 8004eb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ec8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	69d9      	ldr	r1, [r3, #28]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1a      	ldr	r2, [r3, #32]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
	...

08004f2c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af02      	add	r7, sp, #8
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	607a      	str	r2, [r7, #4]
 8004f36:	461a      	mov	r2, r3
 8004f38:	460b      	mov	r3, r1
 8004f3a:	817b      	strh	r3, [r7, #10]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b20      	cmp	r3, #32
 8004f4a:	f040 80da 	bne.w	8005102 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_I2C_Master_Transmit+0x30>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e0d3      	b.n	8005104 <HAL_I2C_Master_Transmit+0x1d8>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f64:	f7fd febc 	bl	8002ce0 <HAL_GetTick>
 8004f68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	2319      	movs	r3, #25
 8004f70:	2201      	movs	r2, #1
 8004f72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 fc5c 	bl	8005834 <I2C_WaitOnFlagUntilTimeout>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e0be      	b.n	8005104 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2221      	movs	r2, #33	; 0x21
 8004f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2210      	movs	r2, #16
 8004f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	893a      	ldrh	r2, [r7, #8]
 8004fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	2bff      	cmp	r3, #255	; 0xff
 8004fb6:	d90e      	bls.n	8004fd6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	22ff      	movs	r2, #255	; 0xff
 8004fbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	8979      	ldrh	r1, [r7, #10]
 8004fc6:	4b51      	ldr	r3, [pc, #324]	; (800510c <HAL_I2C_Master_Transmit+0x1e0>)
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 fe6c 	bl	8005cac <I2C_TransferConfig>
 8004fd4:	e06c      	b.n	80050b0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	8979      	ldrh	r1, [r7, #10]
 8004fe8:	4b48      	ldr	r3, [pc, #288]	; (800510c <HAL_I2C_Master_Transmit+0x1e0>)
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 fe5b 	bl	8005cac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004ff6:	e05b      	b.n	80050b0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	6a39      	ldr	r1, [r7, #32]
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 fc68 	bl	80058d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e07b      	b.n	8005104 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	781a      	ldrb	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005026:	b29b      	uxth	r3, r3
 8005028:	3b01      	subs	r3, #1
 800502a:	b29a      	uxth	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005034:	3b01      	subs	r3, #1
 8005036:	b29a      	uxth	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005040:	b29b      	uxth	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d034      	beq.n	80050b0 <HAL_I2C_Master_Transmit+0x184>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504a:	2b00      	cmp	r3, #0
 800504c:	d130      	bne.n	80050b0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	2200      	movs	r2, #0
 8005056:	2180      	movs	r1, #128	; 0x80
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 fbeb 	bl	8005834 <I2C_WaitOnFlagUntilTimeout>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e04d      	b.n	8005104 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506c:	b29b      	uxth	r3, r3
 800506e:	2bff      	cmp	r3, #255	; 0xff
 8005070:	d90e      	bls.n	8005090 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	22ff      	movs	r2, #255	; 0xff
 8005076:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507c:	b2da      	uxtb	r2, r3
 800507e:	8979      	ldrh	r1, [r7, #10]
 8005080:	2300      	movs	r3, #0
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 fe0f 	bl	8005cac <I2C_TransferConfig>
 800508e:	e00f      	b.n	80050b0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	8979      	ldrh	r1, [r7, #10]
 80050a2:	2300      	movs	r3, #0
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 fdfe 	bl	8005cac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d19e      	bne.n	8004ff8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	6a39      	ldr	r1, [r7, #32]
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 fc4e 	bl	8005960 <I2C_WaitOnSTOPFlagUntilTimeout>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e01a      	b.n	8005104 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2220      	movs	r2, #32
 80050d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6859      	ldr	r1, [r3, #4]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	4b0b      	ldr	r3, [pc, #44]	; (8005110 <HAL_I2C_Master_Transmit+0x1e4>)
 80050e2:	400b      	ands	r3, r1
 80050e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	e000      	b.n	8005104 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005102:	2302      	movs	r3, #2
  }
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	80002000 	.word	0x80002000
 8005110:	fe00e800 	.word	0xfe00e800

08005114 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af02      	add	r7, sp, #8
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	607a      	str	r2, [r7, #4]
 800511e:	461a      	mov	r2, r3
 8005120:	460b      	mov	r3, r1
 8005122:	817b      	strh	r3, [r7, #10]
 8005124:	4613      	mov	r3, r2
 8005126:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b20      	cmp	r3, #32
 8005132:	f040 80db 	bne.w	80052ec <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_I2C_Master_Receive+0x30>
 8005140:	2302      	movs	r3, #2
 8005142:	e0d4      	b.n	80052ee <HAL_I2C_Master_Receive+0x1da>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800514c:	f7fd fdc8 	bl	8002ce0 <HAL_GetTick>
 8005150:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	2319      	movs	r3, #25
 8005158:	2201      	movs	r2, #1
 800515a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 fb68 	bl	8005834 <I2C_WaitOnFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e0bf      	b.n	80052ee <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2222      	movs	r2, #34	; 0x22
 8005172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2210      	movs	r2, #16
 800517a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	893a      	ldrh	r2, [r7, #8]
 800518e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519a:	b29b      	uxth	r3, r3
 800519c:	2bff      	cmp	r3, #255	; 0xff
 800519e:	d90e      	bls.n	80051be <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	22ff      	movs	r2, #255	; 0xff
 80051a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	8979      	ldrh	r1, [r7, #10]
 80051ae:	4b52      	ldr	r3, [pc, #328]	; (80052f8 <HAL_I2C_Master_Receive+0x1e4>)
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 fd78 	bl	8005cac <I2C_TransferConfig>
 80051bc:	e06d      	b.n	800529a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	8979      	ldrh	r1, [r7, #10]
 80051d0:	4b49      	ldr	r3, [pc, #292]	; (80052f8 <HAL_I2C_Master_Receive+0x1e4>)
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 fd67 	bl	8005cac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80051de:	e05c      	b.n	800529a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	6a39      	ldr	r1, [r7, #32]
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 fbff 	bl	80059e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e07c      	b.n	80052ee <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005210:	3b01      	subs	r3, #1
 8005212:	b29a      	uxth	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	b29a      	uxth	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d034      	beq.n	800529a <HAL_I2C_Master_Receive+0x186>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005234:	2b00      	cmp	r3, #0
 8005236:	d130      	bne.n	800529a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	2200      	movs	r2, #0
 8005240:	2180      	movs	r1, #128	; 0x80
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 faf6 	bl	8005834 <I2C_WaitOnFlagUntilTimeout>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e04d      	b.n	80052ee <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005256:	b29b      	uxth	r3, r3
 8005258:	2bff      	cmp	r3, #255	; 0xff
 800525a:	d90e      	bls.n	800527a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	22ff      	movs	r2, #255	; 0xff
 8005260:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005266:	b2da      	uxtb	r2, r3
 8005268:	8979      	ldrh	r1, [r7, #10]
 800526a:	2300      	movs	r3, #0
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 fd1a 	bl	8005cac <I2C_TransferConfig>
 8005278:	e00f      	b.n	800529a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527e:	b29a      	uxth	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005288:	b2da      	uxtb	r2, r3
 800528a:	8979      	ldrh	r1, [r7, #10]
 800528c:	2300      	movs	r3, #0
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 fd09 	bl	8005cac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d19d      	bne.n	80051e0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	6a39      	ldr	r1, [r7, #32]
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 fb59 	bl	8005960 <I2C_WaitOnSTOPFlagUntilTimeout>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e01a      	b.n	80052ee <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2220      	movs	r2, #32
 80052be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6859      	ldr	r1, [r3, #4]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4b0c      	ldr	r3, [pc, #48]	; (80052fc <HAL_I2C_Master_Receive+0x1e8>)
 80052cc:	400b      	ands	r3, r1
 80052ce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	e000      	b.n	80052ee <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80052ec:	2302      	movs	r3, #2
  }
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3718      	adds	r7, #24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	80002400 	.word	0x80002400
 80052fc:	fe00e800 	.word	0xfe00e800

08005300 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af02      	add	r7, sp, #8
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	4608      	mov	r0, r1
 800530a:	4611      	mov	r1, r2
 800530c:	461a      	mov	r2, r3
 800530e:	4603      	mov	r3, r0
 8005310:	817b      	strh	r3, [r7, #10]
 8005312:	460b      	mov	r3, r1
 8005314:	813b      	strh	r3, [r7, #8]
 8005316:	4613      	mov	r3, r2
 8005318:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b20      	cmp	r3, #32
 8005324:	f040 80fd 	bne.w	8005522 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <HAL_I2C_Mem_Read+0x34>
 800532e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005330:	2b00      	cmp	r3, #0
 8005332:	d105      	bne.n	8005340 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800533a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e0f1      	b.n	8005524 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <HAL_I2C_Mem_Read+0x4e>
 800534a:	2302      	movs	r3, #2
 800534c:	e0ea      	b.n	8005524 <HAL_I2C_Mem_Read+0x224>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005356:	f7fd fcc3 	bl	8002ce0 <HAL_GetTick>
 800535a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	2319      	movs	r3, #25
 8005362:	2201      	movs	r2, #1
 8005364:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 fa63 	bl	8005834 <I2C_WaitOnFlagUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e0d5      	b.n	8005524 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2222      	movs	r2, #34	; 0x22
 800537c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2240      	movs	r2, #64	; 0x40
 8005384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a3a      	ldr	r2, [r7, #32]
 8005392:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005398:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053a0:	88f8      	ldrh	r0, [r7, #6]
 80053a2:	893a      	ldrh	r2, [r7, #8]
 80053a4:	8979      	ldrh	r1, [r7, #10]
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	9301      	str	r3, [sp, #4]
 80053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	4603      	mov	r3, r0
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 f9c7 	bl	8005744 <I2C_RequestMemoryRead>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e0ad      	b.n	8005524 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2bff      	cmp	r3, #255	; 0xff
 80053d0:	d90e      	bls.n	80053f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	22ff      	movs	r2, #255	; 0xff
 80053d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	8979      	ldrh	r1, [r7, #10]
 80053e0:	4b52      	ldr	r3, [pc, #328]	; (800552c <HAL_I2C_Mem_Read+0x22c>)
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 fc5f 	bl	8005cac <I2C_TransferConfig>
 80053ee:	e00f      	b.n	8005410 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	8979      	ldrh	r1, [r7, #10]
 8005402:	4b4a      	ldr	r3, [pc, #296]	; (800552c <HAL_I2C_Mem_Read+0x22c>)
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 fc4e 	bl	8005cac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005416:	2200      	movs	r2, #0
 8005418:	2104      	movs	r1, #4
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f000 fa0a 	bl	8005834 <I2C_WaitOnFlagUntilTimeout>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e07c      	b.n	8005524 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	b2d2      	uxtb	r2, r2
 8005436:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	1c5a      	adds	r2, r3, #1
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005446:	3b01      	subs	r3, #1
 8005448:	b29a      	uxth	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005452:	b29b      	uxth	r3, r3
 8005454:	3b01      	subs	r3, #1
 8005456:	b29a      	uxth	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005460:	b29b      	uxth	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d034      	beq.n	80054d0 <HAL_I2C_Mem_Read+0x1d0>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546a:	2b00      	cmp	r3, #0
 800546c:	d130      	bne.n	80054d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005474:	2200      	movs	r2, #0
 8005476:	2180      	movs	r1, #128	; 0x80
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 f9db 	bl	8005834 <I2C_WaitOnFlagUntilTimeout>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e04d      	b.n	8005524 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548c:	b29b      	uxth	r3, r3
 800548e:	2bff      	cmp	r3, #255	; 0xff
 8005490:	d90e      	bls.n	80054b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	22ff      	movs	r2, #255	; 0xff
 8005496:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800549c:	b2da      	uxtb	r2, r3
 800549e:	8979      	ldrh	r1, [r7, #10]
 80054a0:	2300      	movs	r3, #0
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 fbff 	bl	8005cac <I2C_TransferConfig>
 80054ae:	e00f      	b.n	80054d0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	8979      	ldrh	r1, [r7, #10]
 80054c2:	2300      	movs	r3, #0
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f000 fbee 	bl	8005cac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d19a      	bne.n	8005410 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f000 fa3e 	bl	8005960 <I2C_WaitOnSTOPFlagUntilTimeout>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e01a      	b.n	8005524 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2220      	movs	r2, #32
 80054f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6859      	ldr	r1, [r3, #4]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <HAL_I2C_Mem_Read+0x230>)
 8005502:	400b      	ands	r3, r1
 8005504:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2220      	movs	r2, #32
 800550a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	e000      	b.n	8005524 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005522:	2302      	movs	r3, #2
  }
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	80002400 	.word	0x80002400
 8005530:	fe00e800 	.word	0xfe00e800

08005534 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b08a      	sub	sp, #40	; 0x28
 8005538:	af02      	add	r7, sp, #8
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	607a      	str	r2, [r7, #4]
 800553e:	603b      	str	r3, [r7, #0]
 8005540:	460b      	mov	r3, r1
 8005542:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005544:	2300      	movs	r3, #0
 8005546:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b20      	cmp	r3, #32
 8005552:	f040 80f1 	bne.w	8005738 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005564:	d101      	bne.n	800556a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005566:	2302      	movs	r3, #2
 8005568:	e0e7      	b.n	800573a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005570:	2b01      	cmp	r3, #1
 8005572:	d101      	bne.n	8005578 <HAL_I2C_IsDeviceReady+0x44>
 8005574:	2302      	movs	r3, #2
 8005576:	e0e0      	b.n	800573a <HAL_I2C_IsDeviceReady+0x206>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2224      	movs	r2, #36	; 0x24
 8005584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d107      	bne.n	80055a6 <HAL_I2C_IsDeviceReady+0x72>
 8005596:	897b      	ldrh	r3, [r7, #10]
 8005598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800559c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80055a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055a4:	e004      	b.n	80055b0 <HAL_I2C_IsDeviceReady+0x7c>
 80055a6:	897b      	ldrh	r3, [r7, #10]
 80055a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055ac:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	6812      	ldr	r2, [r2, #0]
 80055b4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80055b6:	f7fd fb93 	bl	8002ce0 <HAL_GetTick>
 80055ba:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	f003 0320 	and.w	r3, r3, #32
 80055c6:	2b20      	cmp	r3, #32
 80055c8:	bf0c      	ite	eq
 80055ca:	2301      	moveq	r3, #1
 80055cc:	2300      	movne	r3, #0
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	f003 0310 	and.w	r3, r3, #16
 80055dc:	2b10      	cmp	r3, #16
 80055de:	bf0c      	ite	eq
 80055e0:	2301      	moveq	r3, #1
 80055e2:	2300      	movne	r3, #0
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80055e8:	e034      	b.n	8005654 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f0:	d01a      	beq.n	8005628 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80055f2:	f7fd fb75 	bl	8002ce0 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d302      	bcc.n	8005608 <HAL_I2C_IsDeviceReady+0xd4>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10f      	bne.n	8005628 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005614:	f043 0220 	orr.w	r2, r3, #32
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e088      	b.n	800573a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b20      	cmp	r3, #32
 8005634:	bf0c      	ite	eq
 8005636:	2301      	moveq	r3, #1
 8005638:	2300      	movne	r3, #0
 800563a:	b2db      	uxtb	r3, r3
 800563c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	f003 0310 	and.w	r3, r3, #16
 8005648:	2b10      	cmp	r3, #16
 800564a:	bf0c      	ite	eq
 800564c:	2301      	moveq	r3, #1
 800564e:	2300      	movne	r3, #0
 8005650:	b2db      	uxtb	r3, r3
 8005652:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005654:	7ffb      	ldrb	r3, [r7, #31]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d102      	bne.n	8005660 <HAL_I2C_IsDeviceReady+0x12c>
 800565a:	7fbb      	ldrb	r3, [r7, #30]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0c4      	beq.n	80055ea <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	f003 0310 	and.w	r3, r3, #16
 800566a:	2b10      	cmp	r3, #16
 800566c:	d01a      	beq.n	80056a4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2200      	movs	r2, #0
 8005676:	2120      	movs	r1, #32
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 f8db 	bl	8005834 <I2C_WaitOnFlagUntilTimeout>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e058      	b.n	800573a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2220      	movs	r2, #32
 800568e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	e04a      	b.n	800573a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2200      	movs	r2, #0
 80056ac:	2120      	movs	r1, #32
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 f8c0 	bl	8005834 <I2C_WaitOnFlagUntilTimeout>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e03d      	b.n	800573a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2210      	movs	r2, #16
 80056c4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2220      	movs	r2, #32
 80056cc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d118      	bne.n	8005708 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056e4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2200      	movs	r2, #0
 80056ee:	2120      	movs	r1, #32
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 f89f 	bl	8005834 <I2C_WaitOnFlagUntilTimeout>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d001      	beq.n	8005700 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e01c      	b.n	800573a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2220      	movs	r2, #32
 8005706:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	3301      	adds	r3, #1
 800570c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	429a      	cmp	r2, r3
 8005714:	f63f af3b 	bhi.w	800558e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005724:	f043 0220 	orr.w	r2, r3, #32
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e000      	b.n	800573a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005738:	2302      	movs	r3, #2
  }
}
 800573a:	4618      	mov	r0, r3
 800573c:	3720      	adds	r7, #32
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af02      	add	r7, sp, #8
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	4608      	mov	r0, r1
 800574e:	4611      	mov	r1, r2
 8005750:	461a      	mov	r2, r3
 8005752:	4603      	mov	r3, r0
 8005754:	817b      	strh	r3, [r7, #10]
 8005756:	460b      	mov	r3, r1
 8005758:	813b      	strh	r3, [r7, #8]
 800575a:	4613      	mov	r3, r2
 800575c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800575e:	88fb      	ldrh	r3, [r7, #6]
 8005760:	b2da      	uxtb	r2, r3
 8005762:	8979      	ldrh	r1, [r7, #10]
 8005764:	4b20      	ldr	r3, [pc, #128]	; (80057e8 <I2C_RequestMemoryRead+0xa4>)
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	2300      	movs	r3, #0
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 fa9e 	bl	8005cac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005770:	69fa      	ldr	r2, [r7, #28]
 8005772:	69b9      	ldr	r1, [r7, #24]
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 f8ac 	bl	80058d2 <I2C_WaitOnTXISFlagUntilTimeout>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d001      	beq.n	8005784 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e02c      	b.n	80057de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005784:	88fb      	ldrh	r3, [r7, #6]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d105      	bne.n	8005796 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800578a:	893b      	ldrh	r3, [r7, #8]
 800578c:	b2da      	uxtb	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	629a      	str	r2, [r3, #40]	; 0x28
 8005794:	e015      	b.n	80057c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005796:	893b      	ldrh	r3, [r7, #8]
 8005798:	0a1b      	lsrs	r3, r3, #8
 800579a:	b29b      	uxth	r3, r3
 800579c:	b2da      	uxtb	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057a4:	69fa      	ldr	r2, [r7, #28]
 80057a6:	69b9      	ldr	r1, [r7, #24]
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 f892 	bl	80058d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e012      	b.n	80057de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057b8:	893b      	ldrh	r3, [r7, #8]
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	2200      	movs	r2, #0
 80057ca:	2140      	movs	r1, #64	; 0x40
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 f831 	bl	8005834 <I2C_WaitOnFlagUntilTimeout>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e000      	b.n	80057de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	80002000 	.word	0x80002000

080057ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d103      	bne.n	800580a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2200      	movs	r2, #0
 8005808:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b01      	cmp	r3, #1
 8005816:	d007      	beq.n	8005828 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699a      	ldr	r2, [r3, #24]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0201 	orr.w	r2, r2, #1
 8005826:	619a      	str	r2, [r3, #24]
  }
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	603b      	str	r3, [r7, #0]
 8005840:	4613      	mov	r3, r2
 8005842:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005844:	e031      	b.n	80058aa <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584c:	d02d      	beq.n	80058aa <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800584e:	f7fd fa47 	bl	8002ce0 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d302      	bcc.n	8005864 <I2C_WaitOnFlagUntilTimeout+0x30>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d122      	bne.n	80058aa <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699a      	ldr	r2, [r3, #24]
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	4013      	ands	r3, r2
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	429a      	cmp	r2, r3
 8005872:	bf0c      	ite	eq
 8005874:	2301      	moveq	r3, #1
 8005876:	2300      	movne	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	461a      	mov	r2, r3
 800587c:	79fb      	ldrb	r3, [r7, #7]
 800587e:	429a      	cmp	r2, r3
 8005880:	d113      	bne.n	80058aa <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005886:	f043 0220 	orr.w	r2, r3, #32
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2220      	movs	r2, #32
 8005892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e00f      	b.n	80058ca <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	699a      	ldr	r2, [r3, #24]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	4013      	ands	r3, r2
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	bf0c      	ite	eq
 80058ba:	2301      	moveq	r3, #1
 80058bc:	2300      	movne	r3, #0
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	461a      	mov	r2, r3
 80058c2:	79fb      	ldrb	r3, [r7, #7]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d0be      	beq.n	8005846 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058de:	e033      	b.n	8005948 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	68b9      	ldr	r1, [r7, #8]
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 f901 	bl	8005aec <I2C_IsErrorOccurred>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e031      	b.n	8005958 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fa:	d025      	beq.n	8005948 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058fc:	f7fd f9f0 	bl	8002ce0 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	429a      	cmp	r2, r3
 800590a:	d302      	bcc.n	8005912 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d11a      	bne.n	8005948 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b02      	cmp	r3, #2
 800591e:	d013      	beq.n	8005948 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005924:	f043 0220 	orr.w	r2, r3, #32
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2220      	movs	r2, #32
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e007      	b.n	8005958 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b02      	cmp	r3, #2
 8005954:	d1c4      	bne.n	80058e0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800596c:	e02f      	b.n	80059ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	68b9      	ldr	r1, [r7, #8]
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f000 f8ba 	bl	8005aec <I2C_IsErrorOccurred>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e02d      	b.n	80059de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005982:	f7fd f9ad 	bl	8002ce0 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	429a      	cmp	r2, r3
 8005990:	d302      	bcc.n	8005998 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d11a      	bne.n	80059ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	f003 0320 	and.w	r3, r3, #32
 80059a2:	2b20      	cmp	r3, #32
 80059a4:	d013      	beq.n	80059ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059aa:	f043 0220 	orr.w	r2, r3, #32
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e007      	b.n	80059de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	f003 0320 	and.w	r3, r3, #32
 80059d8:	2b20      	cmp	r3, #32
 80059da:	d1c8      	bne.n	800596e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
	...

080059e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059f4:	e06b      	b.n	8005ace <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	68b9      	ldr	r1, [r7, #8]
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 f876 	bl	8005aec <I2C_IsErrorOccurred>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e069      	b.n	8005ade <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	f003 0320 	and.w	r3, r3, #32
 8005a14:	2b20      	cmp	r3, #32
 8005a16:	d138      	bne.n	8005a8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	f003 0304 	and.w	r3, r3, #4
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d105      	bne.n	8005a32 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	e055      	b.n	8005ade <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	f003 0310 	and.w	r3, r3, #16
 8005a3c:	2b10      	cmp	r3, #16
 8005a3e:	d107      	bne.n	8005a50 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2210      	movs	r2, #16
 8005a46:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2204      	movs	r2, #4
 8005a4c:	645a      	str	r2, [r3, #68]	; 0x44
 8005a4e:	e002      	b.n	8005a56 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6859      	ldr	r1, [r3, #4]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	4b1f      	ldr	r3, [pc, #124]	; (8005ae8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8005a6a:	400b      	ands	r3, r1
 8005a6c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e029      	b.n	8005ade <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a8a:	f7fd f929 	bl	8002ce0 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d302      	bcc.n	8005aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d116      	bne.n	8005ace <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	f003 0304 	and.w	r3, r3, #4
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d00f      	beq.n	8005ace <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab2:	f043 0220 	orr.w	r2, r3, #32
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e007      	b.n	8005ade <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d18c      	bne.n	80059f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	fe00e800 	.word	0xfe00e800

08005aec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08a      	sub	sp, #40	; 0x28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005af8:	2300      	movs	r3, #0
 8005afa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005b06:	2300      	movs	r3, #0
 8005b08:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	f003 0310 	and.w	r3, r3, #16
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d068      	beq.n	8005bea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2210      	movs	r2, #16
 8005b1e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b20:	e049      	b.n	8005bb6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b28:	d045      	beq.n	8005bb6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b2a:	f7fd f8d9 	bl	8002ce0 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d302      	bcc.n	8005b40 <I2C_IsErrorOccurred+0x54>
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d13a      	bne.n	8005bb6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b4a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b52:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b62:	d121      	bne.n	8005ba8 <I2C_IsErrorOccurred+0xbc>
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b6a:	d01d      	beq.n	8005ba8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005b6c:	7cfb      	ldrb	r3, [r7, #19]
 8005b6e:	2b20      	cmp	r3, #32
 8005b70:	d01a      	beq.n	8005ba8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b80:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005b82:	f7fd f8ad 	bl	8002ce0 <HAL_GetTick>
 8005b86:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b88:	e00e      	b.n	8005ba8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005b8a:	f7fd f8a9 	bl	8002ce0 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b19      	cmp	r3, #25
 8005b96:	d907      	bls.n	8005ba8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	f043 0320 	orr.w	r3, r3, #32
 8005b9e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005ba6:	e006      	b.n	8005bb6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b20      	cmp	r3, #32
 8005bb4:	d1e9      	bne.n	8005b8a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	f003 0320 	and.w	r3, r3, #32
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	d003      	beq.n	8005bcc <I2C_IsErrorOccurred+0xe0>
 8005bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d0aa      	beq.n	8005b22 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d103      	bne.n	8005bdc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	f043 0304 	orr.w	r3, r3, #4
 8005be2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00b      	beq.n	8005c14 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	f043 0301 	orr.w	r3, r3, #1
 8005c02:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00b      	beq.n	8005c36 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	f043 0308 	orr.w	r3, r3, #8
 8005c24:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00b      	beq.n	8005c58 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	f043 0302 	orr.w	r3, r3, #2
 8005c46:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005c58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d01c      	beq.n	8005c9a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f7ff fdc3 	bl	80057ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6859      	ldr	r1, [r3, #4]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	4b0d      	ldr	r3, [pc, #52]	; (8005ca8 <I2C_IsErrorOccurred+0x1bc>)
 8005c72:	400b      	ands	r3, r1
 8005c74:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005c9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3728      	adds	r7, #40	; 0x28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	fe00e800 	.word	0xfe00e800

08005cac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	607b      	str	r3, [r7, #4]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	817b      	strh	r3, [r7, #10]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005cbe:	897b      	ldrh	r3, [r7, #10]
 8005cc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005cc4:	7a7b      	ldrb	r3, [r7, #9]
 8005cc6:	041b      	lsls	r3, r3, #16
 8005cc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ccc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cda:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	0d5b      	lsrs	r3, r3, #21
 8005ce6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005cea:	4b08      	ldr	r3, [pc, #32]	; (8005d0c <I2C_TransferConfig+0x60>)
 8005cec:	430b      	orrs	r3, r1
 8005cee:	43db      	mvns	r3, r3
 8005cf0:	ea02 0103 	and.w	r1, r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005cfe:	bf00      	nop
 8005d00:	371c      	adds	r7, #28
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	03ff63ff 	.word	0x03ff63ff

08005d10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b20      	cmp	r3, #32
 8005d24:	d138      	bne.n	8005d98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e032      	b.n	8005d9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2224      	movs	r2, #36	; 0x24
 8005d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 0201 	bic.w	r2, r2, #1
 8005d52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6819      	ldr	r1, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f042 0201 	orr.w	r2, r2, #1
 8005d82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	e000      	b.n	8005d9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d98:	2302      	movs	r3, #2
  }
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b085      	sub	sp, #20
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
 8005dae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b20      	cmp	r3, #32
 8005dba:	d139      	bne.n	8005e30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d101      	bne.n	8005dca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	e033      	b.n	8005e32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2224      	movs	r2, #36	; 0x24
 8005dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0201 	bic.w	r2, r2, #1
 8005de8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005df8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	021b      	lsls	r3, r3, #8
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	e000      	b.n	8005e32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005e30:	2302      	movs	r3, #2
  }
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
	...

08005e40 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d01e      	beq.n	8005e90 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005e52:	4b13      	ldr	r3, [pc, #76]	; (8005ea0 <HAL_IPCC_Init+0x60>)
 8005e54:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d102      	bne.n	8005e68 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7fc fc80 	bl	8002768 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005e68:	68b8      	ldr	r0, [r7, #8]
 8005e6a:	f000 f85b 	bl	8005f24 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f82c 	bl	8005ed8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005e8e:	e001      	b.n	8005e94 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	58000c00 	.word	0x58000c00

08005ea4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005eb2:	bf00      	nop
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b085      	sub	sp, #20
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	60f8      	str	r0, [r7, #12]
 8005ec6:	60b9      	str	r1, [r7, #8]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	e00f      	b.n	8005f06 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	4a0b      	ldr	r2, [pc, #44]	; (8005f1c <IPCC_SetDefaultCallbacks+0x44>)
 8005ef0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	3306      	adds	r3, #6
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	4a08      	ldr	r2, [pc, #32]	; (8005f20 <IPCC_SetDefaultCallbacks+0x48>)
 8005efe:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	3301      	adds	r3, #1
 8005f04:	60fb      	str	r3, [r7, #12]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b05      	cmp	r3, #5
 8005f0a:	d9ec      	bls.n	8005ee6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005f0c:	bf00      	nop
 8005f0e:	bf00      	nop
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	08005ea5 	.word	0x08005ea5
 8005f20:	08005ebf 	.word	0x08005ebf

08005f24 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8005f38:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	223f      	movs	r2, #63	; 0x3f
 8005f3e:	609a      	str	r2, [r3, #8]
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f4e:	b08b      	sub	sp, #44	; 0x2c
 8005f50:	af06      	add	r7, sp, #24
 8005f52:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e0cb      	b.n	80060f6 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d106      	bne.n	8005f78 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f00c fdfa 	bl	8012b6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2203      	movs	r2, #3
 8005f7c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f004 fc82 	bl	800a88e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	73fb      	strb	r3, [r7, #15]
 8005f8e:	e040      	b.n	8006012 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	440b      	add	r3, r1
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	4613      	mov	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	440b      	add	r3, r1
 8005fb6:	7bfa      	ldrb	r2, [r7, #15]
 8005fb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005fba:	7bfb      	ldrb	r3, [r7, #15]
 8005fbc:	6879      	ldr	r1, [r7, #4]
 8005fbe:	1c5a      	adds	r2, r3, #1
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	440b      	add	r3, r1
 8005fca:	3303      	adds	r3, #3
 8005fcc:	2200      	movs	r2, #0
 8005fce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005fd0:	7bfa      	ldrb	r2, [r7, #15]
 8005fd2:	6879      	ldr	r1, [r7, #4]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	440b      	add	r3, r1
 8005fde:	3338      	adds	r3, #56	; 0x38
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005fe4:	7bfa      	ldrb	r2, [r7, #15]
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	440b      	add	r3, r1
 8005ff2:	333c      	adds	r3, #60	; 0x3c
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005ff8:	7bfa      	ldrb	r2, [r7, #15]
 8005ffa:	6879      	ldr	r1, [r7, #4]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	440b      	add	r3, r1
 8006006:	3340      	adds	r3, #64	; 0x40
 8006008:	2200      	movs	r2, #0
 800600a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800600c:	7bfb      	ldrb	r3, [r7, #15]
 800600e:	3301      	adds	r3, #1
 8006010:	73fb      	strb	r3, [r7, #15]
 8006012:	7bfa      	ldrb	r2, [r7, #15]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	429a      	cmp	r2, r3
 800601a:	d3b9      	bcc.n	8005f90 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800601c:	2300      	movs	r3, #0
 800601e:	73fb      	strb	r3, [r7, #15]
 8006020:	e044      	b.n	80060ac <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006022:	7bfa      	ldrb	r2, [r7, #15]
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	4613      	mov	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	440b      	add	r3, r1
 8006030:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006034:	2200      	movs	r2, #0
 8006036:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006038:	7bfa      	ldrb	r2, [r7, #15]
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	4613      	mov	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	440b      	add	r3, r1
 8006046:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800604a:	7bfa      	ldrb	r2, [r7, #15]
 800604c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800604e:	7bfa      	ldrb	r2, [r7, #15]
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	4613      	mov	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	00db      	lsls	r3, r3, #3
 800605a:	440b      	add	r3, r1
 800605c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006060:	2200      	movs	r2, #0
 8006062:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006064:	7bfa      	ldrb	r2, [r7, #15]
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	4613      	mov	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	440b      	add	r3, r1
 8006072:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006076:	2200      	movs	r2, #0
 8006078:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800607a:	7bfa      	ldrb	r2, [r7, #15]
 800607c:	6879      	ldr	r1, [r7, #4]
 800607e:	4613      	mov	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	440b      	add	r3, r1
 8006088:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006090:	7bfa      	ldrb	r2, [r7, #15]
 8006092:	6879      	ldr	r1, [r7, #4]
 8006094:	4613      	mov	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	440b      	add	r3, r1
 800609e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80060a2:	2200      	movs	r2, #0
 80060a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060a6:	7bfb      	ldrb	r3, [r7, #15]
 80060a8:	3301      	adds	r3, #1
 80060aa:	73fb      	strb	r3, [r7, #15]
 80060ac:	7bfa      	ldrb	r2, [r7, #15]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d3b5      	bcc.n	8006022 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	603b      	str	r3, [r7, #0]
 80060bc:	687e      	ldr	r6, [r7, #4]
 80060be:	466d      	mov	r5, sp
 80060c0:	f106 0410 	add.w	r4, r6, #16
 80060c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	602b      	str	r3, [r5, #0]
 80060cc:	1d33      	adds	r3, r6, #4
 80060ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060d0:	6838      	ldr	r0, [r7, #0]
 80060d2:	f004 fbf7 	bl	800a8c4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d102      	bne.n	80060f4 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f001 fc45 	bl	800797e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080060fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b082      	sub	sp, #8
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800610c:	2b01      	cmp	r3, #1
 800610e:	d101      	bne.n	8006114 <HAL_PCD_Start+0x16>
 8006110:	2302      	movs	r3, #2
 8006112:	e012      	b.n	800613a <HAL_PCD_Start+0x3c>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4618      	mov	r0, r3
 8006122:	f004 fb9d 	bl	800a860 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4618      	mov	r0, r3
 800612c:	f006 fe61 	bl	800cdf2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b084      	sub	sp, #16
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f006 fe66 	bl	800ce20 <USB_ReadInterrupts>
 8006154:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fb05 	bl	8006770 <PCD_EP_ISR_Handler>

    return;
 8006166:	e110      	b.n	800638a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800616e:	2b00      	cmp	r3, #0
 8006170:	d013      	beq.n	800619a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800617a:	b29a      	uxth	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006184:	b292      	uxth	r2, r2
 8006186:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f00c fda1 	bl	8012cd2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006190:	2100      	movs	r1, #0
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f8fc 	bl	8006390 <HAL_PCD_SetAddress>

    return;
 8006198:	e0f7      	b.n	800638a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00c      	beq.n	80061be <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061b6:	b292      	uxth	r2, r2
 80061b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80061bc:	e0e5      	b.n	800638a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00c      	beq.n	80061e2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061da:	b292      	uxth	r2, r2
 80061dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80061e0:	e0d3      	b.n	800638a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d034      	beq.n	8006256 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0204 	bic.w	r2, r2, #4
 80061fe:	b292      	uxth	r2, r2
 8006200:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800620c:	b29a      	uxth	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 0208 	bic.w	r2, r2, #8
 8006216:	b292      	uxth	r2, r2
 8006218:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8006222:	2b01      	cmp	r3, #1
 8006224:	d107      	bne.n	8006236 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800622e:	2100      	movs	r1, #0
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f00c ff45 	bl	80130c0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f00c fd84 	bl	8012d44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006244:	b29a      	uxth	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800624e:	b292      	uxth	r2, r2
 8006250:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006254:	e099      	b.n	800638a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800625c:	2b00      	cmp	r3, #0
 800625e:	d027      	beq.n	80062b0 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006268:	b29a      	uxth	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 0208 	orr.w	r2, r2, #8
 8006272:	b292      	uxth	r2, r2
 8006274:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006280:	b29a      	uxth	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800628a:	b292      	uxth	r2, r2
 800628c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006298:	b29a      	uxth	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0204 	orr.w	r2, r2, #4
 80062a2:	b292      	uxth	r2, r2
 80062a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f00c fd31 	bl	8012d10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80062ae:	e06c      	b.n	800638a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d040      	beq.n	800633c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062cc:	b292      	uxth	r2, r2
 80062ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d12b      	bne.n	8006334 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0204 	orr.w	r2, r2, #4
 80062ee:	b292      	uxth	r2, r2
 80062f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 0208 	orr.w	r2, r2, #8
 8006306:	b292      	uxth	r2, r2
 8006308:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800631c:	b29b      	uxth	r3, r3
 800631e:	089b      	lsrs	r3, r3, #2
 8006320:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800632a:	2101      	movs	r1, #1
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f00c fec7 	bl	80130c0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006332:	e02a      	b.n	800638a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f00c fceb 	bl	8012d10 <HAL_PCD_SuspendCallback>
    return;
 800633a:	e026      	b.n	800638a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00f      	beq.n	8006366 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800634e:	b29a      	uxth	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006358:	b292      	uxth	r2, r2
 800635a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f00c fca9 	bl	8012cb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006364:	e011      	b.n	800638a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00c      	beq.n	800638a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006378:	b29a      	uxth	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006382:	b292      	uxth	r2, r2
 8006384:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006388:	bf00      	nop
  }
}
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	460b      	mov	r3, r1
 800639a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d101      	bne.n	80063aa <HAL_PCD_SetAddress+0x1a>
 80063a6:	2302      	movs	r3, #2
 80063a8:	e013      	b.n	80063d2 <HAL_PCD_SetAddress+0x42>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	78fa      	ldrb	r2, [r7, #3]
 80063b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	78fa      	ldrb	r2, [r7, #3]
 80063c0:	4611      	mov	r1, r2
 80063c2:	4618      	mov	r0, r3
 80063c4:	f006 fd01 	bl	800cdca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b084      	sub	sp, #16
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	4608      	mov	r0, r1
 80063e4:	4611      	mov	r1, r2
 80063e6:	461a      	mov	r2, r3
 80063e8:	4603      	mov	r3, r0
 80063ea:	70fb      	strb	r3, [r7, #3]
 80063ec:	460b      	mov	r3, r1
 80063ee:	803b      	strh	r3, [r7, #0]
 80063f0:	4613      	mov	r3, r2
 80063f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80063f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	da0e      	bge.n	800641e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006400:	78fb      	ldrb	r3, [r7, #3]
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	4613      	mov	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	4413      	add	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2201      	movs	r2, #1
 800641a:	705a      	strb	r2, [r3, #1]
 800641c:	e00e      	b.n	800643c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800641e:	78fb      	ldrb	r3, [r7, #3]
 8006420:	f003 0207 	and.w	r2, r3, #7
 8006424:	4613      	mov	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	4413      	add	r3, r2
 8006434:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800643c:	78fb      	ldrb	r3, [r7, #3]
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	b2da      	uxtb	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006448:	883a      	ldrh	r2, [r7, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	78ba      	ldrb	r2, [r7, #2]
 8006452:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006454:	78bb      	ldrb	r3, [r7, #2]
 8006456:	2b02      	cmp	r3, #2
 8006458:	d102      	bne.n	8006460 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006466:	2b01      	cmp	r3, #1
 8006468:	d101      	bne.n	800646e <HAL_PCD_EP_Open+0x94>
 800646a:	2302      	movs	r3, #2
 800646c:	e00e      	b.n	800648c <HAL_PCD_EP_Open+0xb2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68f9      	ldr	r1, [r7, #12]
 800647c:	4618      	mov	r0, r3
 800647e:	f004 fa43 	bl	800a908 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800648a:	7afb      	ldrb	r3, [r7, #11]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	460b      	mov	r3, r1
 800649e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80064a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	da0e      	bge.n	80064c6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064a8:	78fb      	ldrb	r3, [r7, #3]
 80064aa:	f003 0307 	and.w	r3, r3, #7
 80064ae:	1c5a      	adds	r2, r3, #1
 80064b0:	4613      	mov	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	4413      	add	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	705a      	strb	r2, [r3, #1]
 80064c4:	e00e      	b.n	80064e4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064c6:	78fb      	ldrb	r3, [r7, #3]
 80064c8:	f003 0207 	and.w	r2, r3, #7
 80064cc:	4613      	mov	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	4413      	add	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80064e4:	78fb      	ldrb	r3, [r7, #3]
 80064e6:	f003 0307 	and.w	r3, r3, #7
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d101      	bne.n	80064fe <HAL_PCD_EP_Close+0x6a>
 80064fa:	2302      	movs	r3, #2
 80064fc:	e00e      	b.n	800651c <HAL_PCD_EP_Close+0x88>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68f9      	ldr	r1, [r7, #12]
 800650c:	4618      	mov	r0, r3
 800650e:	f004 fdbf 	bl	800b090 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	607a      	str	r2, [r7, #4]
 800652e:	603b      	str	r3, [r7, #0]
 8006530:	460b      	mov	r3, r1
 8006532:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006534:	7afb      	ldrb	r3, [r7, #11]
 8006536:	f003 0207 	and.w	r2, r3, #7
 800653a:	4613      	mov	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	00db      	lsls	r3, r3, #3
 8006542:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	4413      	add	r3, r2
 800654a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2200      	movs	r2, #0
 800655c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2200      	movs	r2, #0
 8006562:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006564:	7afb      	ldrb	r3, [r7, #11]
 8006566:	f003 0307 	and.w	r3, r3, #7
 800656a:	b2da      	uxtb	r2, r3
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6979      	ldr	r1, [r7, #20]
 8006576:	4618      	mov	r0, r3
 8006578:	f004 ff77 	bl	800b46a <USB_EPStartXfer>

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006586:	b480      	push	{r7}
 8006588:	b083      	sub	sp, #12
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	460b      	mov	r3, r1
 8006590:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006592:	78fb      	ldrb	r3, [r7, #3]
 8006594:	f003 0207 	and.w	r2, r3, #7
 8006598:	6879      	ldr	r1, [r7, #4]
 800659a:	4613      	mov	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	00db      	lsls	r3, r3, #3
 80065a2:	440b      	add	r3, r1
 80065a4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80065a8:	681b      	ldr	r3, [r3, #0]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b086      	sub	sp, #24
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	60f8      	str	r0, [r7, #12]
 80065be:	607a      	str	r2, [r7, #4]
 80065c0:	603b      	str	r3, [r7, #0]
 80065c2:	460b      	mov	r3, r1
 80065c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065c6:	7afb      	ldrb	r3, [r7, #11]
 80065c8:	f003 0307 	and.w	r3, r3, #7
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	00db      	lsls	r3, r3, #3
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	4413      	add	r3, r2
 80065da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	2200      	movs	r2, #0
 80065fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2201      	movs	r2, #1
 8006600:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006602:	7afb      	ldrb	r3, [r7, #11]
 8006604:	f003 0307 	and.w	r3, r3, #7
 8006608:	b2da      	uxtb	r2, r3
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6979      	ldr	r1, [r7, #20]
 8006614:	4618      	mov	r0, r3
 8006616:	f004 ff28 	bl	800b46a <USB_EPStartXfer>

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	460b      	mov	r3, r1
 800662e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	f003 0207 	and.w	r2, r3, #7
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	429a      	cmp	r2, r3
 800663c:	d901      	bls.n	8006642 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e03e      	b.n	80066c0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006642:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006646:	2b00      	cmp	r3, #0
 8006648:	da0e      	bge.n	8006668 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800664a:	78fb      	ldrb	r3, [r7, #3]
 800664c:	f003 0307 	and.w	r3, r3, #7
 8006650:	1c5a      	adds	r2, r3, #1
 8006652:	4613      	mov	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	00db      	lsls	r3, r3, #3
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	4413      	add	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2201      	movs	r2, #1
 8006664:	705a      	strb	r2, [r3, #1]
 8006666:	e00c      	b.n	8006682 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006668:	78fa      	ldrb	r2, [r7, #3]
 800666a:	4613      	mov	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	4413      	add	r3, r2
 800667a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2201      	movs	r2, #1
 8006686:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006688:	78fb      	ldrb	r3, [r7, #3]
 800668a:	f003 0307 	and.w	r3, r3, #7
 800668e:	b2da      	uxtb	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800669a:	2b01      	cmp	r3, #1
 800669c:	d101      	bne.n	80066a2 <HAL_PCD_EP_SetStall+0x7e>
 800669e:	2302      	movs	r3, #2
 80066a0:	e00e      	b.n	80066c0 <HAL_PCD_EP_SetStall+0x9c>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68f9      	ldr	r1, [r7, #12]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f006 fa8b 	bl	800cbcc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	460b      	mov	r3, r1
 80066d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80066d4:	78fb      	ldrb	r3, [r7, #3]
 80066d6:	f003 020f 	and.w	r2, r3, #15
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d901      	bls.n	80066e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e040      	b.n	8006768 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80066e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	da0e      	bge.n	800670c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066ee:	78fb      	ldrb	r3, [r7, #3]
 80066f0:	f003 0307 	and.w	r3, r3, #7
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	4613      	mov	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	4413      	add	r3, r2
 8006702:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2201      	movs	r2, #1
 8006708:	705a      	strb	r2, [r3, #1]
 800670a:	e00e      	b.n	800672a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800670c:	78fb      	ldrb	r3, [r7, #3]
 800670e:	f003 0207 	and.w	r2, r3, #7
 8006712:	4613      	mov	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	00db      	lsls	r3, r3, #3
 800671a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	4413      	add	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006730:	78fb      	ldrb	r3, [r7, #3]
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	b2da      	uxtb	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006742:	2b01      	cmp	r3, #1
 8006744:	d101      	bne.n	800674a <HAL_PCD_EP_ClrStall+0x82>
 8006746:	2302      	movs	r3, #2
 8006748:	e00e      	b.n	8006768 <HAL_PCD_EP_ClrStall+0xa0>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68f9      	ldr	r1, [r7, #12]
 8006758:	4618      	mov	r0, r3
 800675a:	f006 fa88 	bl	800cc6e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b096      	sub	sp, #88	; 0x58
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006778:	e3b1      	b.n	8006ede <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006782:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006786:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800678a:	b2db      	uxtb	r3, r3
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8006794:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006798:	2b00      	cmp	r3, #0
 800679a:	f040 8173 	bne.w	8006a84 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800679e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80067a2:	f003 0310 	and.w	r3, r3, #16
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d150      	bne.n	800684c <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80067b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ba:	81fb      	strh	r3, [r7, #14]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	89fb      	ldrh	r3, [r7, #14]
 80067c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	3328      	adds	r3, #40	; 0x28
 80067d2:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067dc:	b29b      	uxth	r3, r3
 80067de:	461a      	mov	r2, r3
 80067e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	00db      	lsls	r3, r3, #3
 80067e6:	4413      	add	r3, r2
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	6812      	ldr	r2, [r2, #0]
 80067ec:	4413      	add	r3, r2
 80067ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80067f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067fa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80067fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067fe:	695a      	ldr	r2, [r3, #20]
 8006800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	441a      	add	r2, r3
 8006806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006808:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800680a:	2100      	movs	r1, #0
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f00c fa38 	bl	8012c82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 835f 	beq.w	8006ede <PCD_EP_ISR_Handler+0x76e>
 8006820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	2b00      	cmp	r3, #0
 8006826:	f040 835a 	bne.w	8006ede <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006830:	b2db      	uxtb	r3, r3
 8006832:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006836:	b2da      	uxtb	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	b292      	uxth	r2, r2
 800683e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800684a:	e348      	b.n	8006ede <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006852:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	881b      	ldrh	r3, [r3, #0]
 800685a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800685e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006866:	2b00      	cmp	r3, #0
 8006868:	d032      	beq.n	80068d0 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006872:	b29b      	uxth	r3, r3
 8006874:	461a      	mov	r2, r3
 8006876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	00db      	lsls	r3, r3, #3
 800687c:	4413      	add	r3, r2
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	6812      	ldr	r2, [r2, #0]
 8006882:	4413      	add	r3, r2
 8006884:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800688e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006890:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6818      	ldr	r0, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800689c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800689e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80068a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068a2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	f006 fb0d 	bl	800cec4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80068b6:	4013      	ands	r3, r2
 80068b8:	823b      	strh	r3, [r7, #16]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	8a3a      	ldrh	r2, [r7, #16]
 80068c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80068c4:	b292      	uxth	r2, r2
 80068c6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f00c f9ad 	bl	8012c28 <HAL_PCD_SetupStageCallback>
 80068ce:	e306      	b.n	8006ede <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80068d0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f280 8302 	bge.w	8006ede <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80068e6:	4013      	ands	r3, r2
 80068e8:	83fb      	strh	r3, [r7, #30]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	8bfa      	ldrh	r2, [r7, #30]
 80068f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80068f4:	b292      	uxth	r2, r2
 80068f6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006900:	b29b      	uxth	r3, r3
 8006902:	461a      	mov	r2, r3
 8006904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	00db      	lsls	r3, r3, #3
 800690a:	4413      	add	r3, r2
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6812      	ldr	r2, [r2, #0]
 8006910:	4413      	add	r3, r2
 8006912:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800691c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800691e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006922:	69db      	ldr	r3, [r3, #28]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d019      	beq.n	800695c <PCD_EP_ISR_Handler+0x1ec>
 8006928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d015      	beq.n	800695c <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6818      	ldr	r0, [r3, #0]
 8006934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006936:	6959      	ldr	r1, [r3, #20]
 8006938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800693a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800693c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800693e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006940:	b29b      	uxth	r3, r3
 8006942:	f006 fabf 	bl	800cec4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006948:	695a      	ldr	r2, [r3, #20]
 800694a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	441a      	add	r2, r3
 8006950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006952:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006954:	2100      	movs	r1, #0
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f00c f978 	bl	8012c4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	881b      	ldrh	r3, [r3, #0]
 8006962:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006966:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800696a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800696e:	2b00      	cmp	r3, #0
 8006970:	f040 82b5 	bne.w	8006ede <PCD_EP_ISR_Handler+0x76e>
 8006974:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006978:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800697c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006980:	f000 82ad 	beq.w	8006ede <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	61bb      	str	r3, [r7, #24]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006992:	b29b      	uxth	r3, r3
 8006994:	461a      	mov	r2, r3
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	4413      	add	r3, r2
 800699a:	61bb      	str	r3, [r7, #24]
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	801a      	strh	r2, [r3, #0]
 80069b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	2b3e      	cmp	r3, #62	; 0x3e
 80069ba:	d91d      	bls.n	80069f8 <PCD_EP_ISR_Handler+0x288>
 80069bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	095b      	lsrs	r3, r3, #5
 80069c2:	647b      	str	r3, [r7, #68]	; 0x44
 80069c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	f003 031f 	and.w	r3, r3, #31
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d102      	bne.n	80069d6 <PCD_EP_ISR_Handler+0x266>
 80069d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069d2:	3b01      	subs	r3, #1
 80069d4:	647b      	str	r3, [r7, #68]	; 0x44
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	b29a      	uxth	r2, r3
 80069dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069de:	b29b      	uxth	r3, r3
 80069e0:	029b      	lsls	r3, r3, #10
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	4313      	orrs	r3, r2
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	801a      	strh	r2, [r3, #0]
 80069f6:	e026      	b.n	8006a46 <PCD_EP_ISR_Handler+0x2d6>
 80069f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10a      	bne.n	8006a16 <PCD_EP_ISR_Handler+0x2a6>
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	801a      	strh	r2, [r3, #0]
 8006a14:	e017      	b.n	8006a46 <PCD_EP_ISR_Handler+0x2d6>
 8006a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	085b      	lsrs	r3, r3, #1
 8006a1c:	647b      	str	r3, [r7, #68]	; 0x44
 8006a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <PCD_EP_ISR_Handler+0x2c0>
 8006a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	881b      	ldrh	r3, [r3, #0]
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	029b      	lsls	r3, r3, #10
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a56:	827b      	strh	r3, [r7, #18]
 8006a58:	8a7b      	ldrh	r3, [r7, #18]
 8006a5a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a5e:	827b      	strh	r3, [r7, #18]
 8006a60:	8a7b      	ldrh	r3, [r7, #18]
 8006a62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a66:	827b      	strh	r3, [r7, #18]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	8a7b      	ldrh	r3, [r7, #18]
 8006a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	8013      	strh	r3, [r2, #0]
 8006a82:	e22c      	b.n	8006ede <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006a98:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f280 80f6 	bge.w	8006c8e <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006ab8:	4013      	ands	r3, r2
 8006aba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006ad0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ad4:	b292      	uxth	r2, r2
 8006ad6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006ad8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8006adc:	4613      	mov	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	00db      	lsls	r3, r3, #3
 8006ae4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	4413      	add	r3, r2
 8006aec:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006af0:	7b1b      	ldrb	r3, [r3, #12]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d123      	bne.n	8006b3e <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	461a      	mov	r2, r3
 8006b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	00db      	lsls	r3, r3, #3
 8006b08:	4413      	add	r3, r2
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	6812      	ldr	r2, [r2, #0]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b1a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8006b1e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 808e 	beq.w	8006c44 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6818      	ldr	r0, [r3, #0]
 8006b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b2e:	6959      	ldr	r1, [r3, #20]
 8006b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b32:	88da      	ldrh	r2, [r3, #6]
 8006b34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006b38:	f006 f9c4 	bl	800cec4 <USB_ReadPMA>
 8006b3c:	e082      	b.n	8006c44 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b40:	78db      	ldrb	r3, [r3, #3]
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d10a      	bne.n	8006b5c <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006b46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f9d3 	bl	8006efa <HAL_PCD_EP_DB_Receive>
 8006b54:	4603      	mov	r3, r0
 8006b56:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006b5a:	e073      	b.n	8006c44 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
 8006b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b76:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	441a      	add	r2, r3
 8006b88:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006b8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d022      	beq.n	8006c00 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	00db      	lsls	r3, r3, #3
 8006bcc:	4413      	add	r3, r2
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	6812      	ldr	r2, [r2, #0]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bde:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8006be2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d02c      	beq.n	8006c44 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6818      	ldr	r0, [r3, #0]
 8006bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bf0:	6959      	ldr	r1, [r3, #20]
 8006bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bf4:	891a      	ldrh	r2, [r3, #8]
 8006bf6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006bfa:	f006 f963 	bl	800cec4 <USB_ReadPMA>
 8006bfe:	e021      	b.n	8006c44 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	00db      	lsls	r3, r3, #3
 8006c12:	4413      	add	r3, r2
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	6812      	ldr	r2, [r2, #0]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c1e:	881b      	ldrh	r3, [r3, #0]
 8006c20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c24:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8006c28:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d009      	beq.n	8006c44 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6818      	ldr	r0, [r3, #0]
 8006c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c36:	6959      	ldr	r1, [r3, #20]
 8006c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c3a:	895a      	ldrh	r2, [r3, #10]
 8006c3c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006c40:	f006 f940 	bl	800cec4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c46:	69da      	ldr	r2, [r3, #28]
 8006c48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006c4c:	441a      	add	r2, r3
 8006c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c50:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c54:	695a      	ldr	r2, [r3, #20]
 8006c56:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006c5a:	441a      	add	r2, r3
 8006c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c5e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d005      	beq.n	8006c74 <PCD_EP_ISR_Handler+0x504>
 8006c68:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8006c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d206      	bcs.n	8006c82 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	4619      	mov	r1, r3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f00b ffe6 	bl	8012c4c <HAL_PCD_DataOutStageCallback>
 8006c80:	e005      	b.n	8006c8e <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f004 fbee 	bl	800b46a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006c8e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 8121 	beq.w	8006ede <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8006c9c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	00db      	lsls	r3, r3, #3
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	4413      	add	r3, r2
 8006cae:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	441a      	add	r2, r3
 8006cdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cee:	78db      	ldrb	r3, [r3, #3]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	f040 80a2 	bne.w	8006e3a <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8006cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cfe:	7b1b      	ldrb	r3, [r3, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 8093 	beq.w	8006e2c <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006d06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d046      	beq.n	8006da0 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d14:	785b      	ldrb	r3, [r3, #1]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d126      	bne.n	8006d68 <PCD_EP_ISR_Handler+0x5f8>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	4413      	add	r3, r2
 8006d30:	627b      	str	r3, [r7, #36]	; 0x24
 8006d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	00da      	lsls	r2, r3, #3
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d40:	623b      	str	r3, [r7, #32]
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	801a      	strh	r2, [r3, #0]
 8006d52:	6a3b      	ldr	r3, [r7, #32]
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	6a3b      	ldr	r3, [r7, #32]
 8006d64:	801a      	strh	r2, [r3, #0]
 8006d66:	e061      	b.n	8006e2c <PCD_EP_ISR_Handler+0x6bc>
 8006d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d6a:	785b      	ldrb	r3, [r3, #1]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d15d      	bne.n	8006e2c <PCD_EP_ISR_Handler+0x6bc>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	461a      	mov	r2, r3
 8006d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d84:	4413      	add	r3, r2
 8006d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	00da      	lsls	r2, r3, #3
 8006d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d90:	4413      	add	r3, r2
 8006d92:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	801a      	strh	r2, [r3, #0]
 8006d9e:	e045      	b.n	8006e2c <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006da8:	785b      	ldrb	r3, [r3, #1]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d126      	bne.n	8006dfc <PCD_EP_ISR_Handler+0x68c>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	637b      	str	r3, [r7, #52]	; 0x34
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc2:	4413      	add	r3, r2
 8006dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8006dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	00da      	lsls	r2, r3, #3
 8006dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dce:	4413      	add	r3, r2
 8006dd0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	801a      	strh	r2, [r3, #0]
 8006de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de8:	881b      	ldrh	r3, [r3, #0]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df8:	801a      	strh	r2, [r3, #0]
 8006dfa:	e017      	b.n	8006e2c <PCD_EP_ISR_Handler+0x6bc>
 8006dfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dfe:	785b      	ldrb	r3, [r3, #1]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d113      	bne.n	8006e2c <PCD_EP_ISR_Handler+0x6bc>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	461a      	mov	r2, r3
 8006e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e12:	4413      	add	r3, r2
 8006e14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	00da      	lsls	r2, r3, #3
 8006e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e1e:	4413      	add	r3, r2
 8006e20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e24:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e28:	2200      	movs	r2, #0
 8006e2a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	4619      	mov	r1, r3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f00b ff25 	bl	8012c82 <HAL_PCD_DataInStageCallback>
 8006e38:	e051      	b.n	8006ede <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006e3a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d144      	bne.n	8006ed0 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	461a      	mov	r2, r3
 8006e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	00db      	lsls	r3, r3, #3
 8006e58:	4413      	add	r3, r2
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	6812      	ldr	r2, [r2, #0]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006e6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e70:	699a      	ldr	r2, [r3, #24]
 8006e72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d907      	bls.n	8006e8a <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8006e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e7c:	699a      	ldr	r2, [r3, #24]
 8006e7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006e82:	1ad2      	subs	r2, r2, r3
 8006e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e86:	619a      	str	r2, [r3, #24]
 8006e88:	e002      	b.n	8006e90 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8006e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d106      	bne.n	8006ea6 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f00b feef 	bl	8012c82 <HAL_PCD_DataInStageCallback>
 8006ea4:	e01b      	b.n	8006ede <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ea8:	695a      	ldr	r2, [r3, #20]
 8006eaa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006eae:	441a      	add	r2, r3
 8006eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eb2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eb6:	69da      	ldr	r2, [r3, #28]
 8006eb8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006ebc:	441a      	add	r2, r3
 8006ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ec0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f004 face 	bl	800b46a <USB_EPStartXfer>
 8006ece:	e006      	b.n	8006ede <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006ed0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f917 	bl	800710c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	b21b      	sxth	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f6ff ac45 	blt.w	800677a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3758      	adds	r7, #88	; 0x58
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b088      	sub	sp, #32
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	60f8      	str	r0, [r7, #12]
 8006f02:	60b9      	str	r1, [r7, #8]
 8006f04:	4613      	mov	r3, r2
 8006f06:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006f08:	88fb      	ldrh	r3, [r7, #6]
 8006f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d07c      	beq.n	800700c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	00db      	lsls	r3, r3, #3
 8006f24:	4413      	add	r3, r2
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	6812      	ldr	r2, [r2, #0]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f30:	881b      	ldrh	r3, [r3, #0]
 8006f32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f36:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	699a      	ldr	r2, [r3, #24]
 8006f3c:	8b7b      	ldrh	r3, [r7, #26]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d306      	bcc.n	8006f50 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	699a      	ldr	r2, [r3, #24]
 8006f46:	8b7b      	ldrh	r3, [r7, #26]
 8006f48:	1ad2      	subs	r2, r2, r3
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	619a      	str	r2, [r3, #24]
 8006f4e:	e002      	b.n	8006f56 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2200      	movs	r2, #0
 8006f54:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d123      	bne.n	8006fa6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	461a      	mov	r2, r3
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4413      	add	r3, r2
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f78:	833b      	strh	r3, [r7, #24]
 8006f7a:	8b3b      	ldrh	r3, [r7, #24]
 8006f7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f80:	833b      	strh	r3, [r7, #24]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	441a      	add	r2, r3
 8006f90:	8b3b      	ldrh	r3, [r7, #24]
 8006f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006fa6:	88fb      	ldrh	r3, [r7, #6]
 8006fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d01f      	beq.n	8006ff0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	881b      	ldrh	r3, [r3, #0]
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fca:	82fb      	strh	r3, [r7, #22]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	441a      	add	r2, r3
 8006fda:	8afb      	ldrh	r3, [r7, #22]
 8006fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fe8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006ff0:	8b7b      	ldrh	r3, [r7, #26]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 8085 	beq.w	8007102 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6818      	ldr	r0, [r3, #0]
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	6959      	ldr	r1, [r3, #20]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	891a      	ldrh	r2, [r3, #8]
 8007004:	8b7b      	ldrh	r3, [r7, #26]
 8007006:	f005 ff5d 	bl	800cec4 <USB_ReadPMA>
 800700a:	e07a      	b.n	8007102 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007014:	b29b      	uxth	r3, r3
 8007016:	461a      	mov	r2, r3
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	00db      	lsls	r3, r3, #3
 800701e:	4413      	add	r3, r2
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	6812      	ldr	r2, [r2, #0]
 8007024:	4413      	add	r3, r2
 8007026:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007030:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	699a      	ldr	r2, [r3, #24]
 8007036:	8b7b      	ldrh	r3, [r7, #26]
 8007038:	429a      	cmp	r2, r3
 800703a:	d306      	bcc.n	800704a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	699a      	ldr	r2, [r3, #24]
 8007040:	8b7b      	ldrh	r3, [r7, #26]
 8007042:	1ad2      	subs	r2, r2, r3
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	619a      	str	r2, [r3, #24]
 8007048:	e002      	b.n	8007050 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	2200      	movs	r2, #0
 800704e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d123      	bne.n	80070a0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	461a      	mov	r2, r3
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	b29b      	uxth	r3, r3
 800706a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800706e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007072:	83fb      	strh	r3, [r7, #30]
 8007074:	8bfb      	ldrh	r3, [r7, #30]
 8007076:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800707a:	83fb      	strh	r3, [r7, #30]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	461a      	mov	r2, r3
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	441a      	add	r2, r3
 800708a:	8bfb      	ldrh	r3, [r7, #30]
 800708c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800709c:	b29b      	uxth	r3, r3
 800709e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80070a0:	88fb      	ldrh	r3, [r7, #6]
 80070a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d11f      	bne.n	80070ea <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	461a      	mov	r2, r3
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c4:	83bb      	strh	r3, [r7, #28]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	441a      	add	r2, r3
 80070d4:	8bbb      	ldrh	r3, [r7, #28]
 80070d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80070ea:	8b7b      	ldrh	r3, [r7, #26]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d008      	beq.n	8007102 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6818      	ldr	r0, [r3, #0]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	6959      	ldr	r1, [r3, #20]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	895a      	ldrh	r2, [r3, #10]
 80070fc:	8b7b      	ldrh	r3, [r7, #26]
 80070fe:	f005 fee1 	bl	800cec4 <USB_ReadPMA>
    }
  }

  return count;
 8007102:	8b7b      	ldrh	r3, [r7, #26]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3720      	adds	r7, #32
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b0a4      	sub	sp, #144	; 0x90
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	4613      	mov	r3, r2
 8007118:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800711a:	88fb      	ldrh	r3, [r7, #6]
 800711c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 81db 	beq.w	80074dc <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800712e:	b29b      	uxth	r3, r3
 8007130:	461a      	mov	r2, r3
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	00db      	lsls	r3, r3, #3
 8007138:	4413      	add	r3, r2
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	6812      	ldr	r2, [r2, #0]
 800713e:	4413      	add	r3, r2
 8007140:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800714a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	699a      	ldr	r2, [r3, #24]
 8007152:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007156:	429a      	cmp	r2, r3
 8007158:	d907      	bls.n	800716a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	699a      	ldr	r2, [r3, #24]
 800715e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007162:	1ad2      	subs	r2, r2, r3
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	619a      	str	r2, [r3, #24]
 8007168:	e002      	b.n	8007170 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	2200      	movs	r2, #0
 800716e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	2b00      	cmp	r3, #0
 8007176:	f040 80b9 	bne.w	80072ec <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	785b      	ldrb	r3, [r3, #1]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d126      	bne.n	80071d0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007190:	b29b      	uxth	r3, r3
 8007192:	461a      	mov	r2, r3
 8007194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007196:	4413      	add	r3, r2
 8007198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	00da      	lsls	r2, r3, #3
 80071a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a2:	4413      	add	r3, r2
 80071a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80071aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b8:	801a      	strh	r2, [r3, #0]
 80071ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	b29b      	uxth	r3, r3
 80071c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071cc:	801a      	strh	r2, [r3, #0]
 80071ce:	e01a      	b.n	8007206 <HAL_PCD_EP_DB_Transmit+0xfa>
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	785b      	ldrb	r3, [r3, #1]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d116      	bne.n	8007206 <HAL_PCD_EP_DB_Transmit+0xfa>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	637b      	str	r3, [r7, #52]	; 0x34
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	461a      	mov	r2, r3
 80071ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ec:	4413      	add	r3, r2
 80071ee:	637b      	str	r3, [r7, #52]	; 0x34
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	00da      	lsls	r2, r3, #3
 80071f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f8:	4413      	add	r3, r2
 80071fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071fe:	633b      	str	r3, [r7, #48]	; 0x30
 8007200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007202:	2200      	movs	r2, #0
 8007204:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	627b      	str	r3, [r7, #36]	; 0x24
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	785b      	ldrb	r3, [r3, #1]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d126      	bne.n	8007262 <HAL_PCD_EP_DB_Transmit+0x156>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	61fb      	str	r3, [r7, #28]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007222:	b29b      	uxth	r3, r3
 8007224:	461a      	mov	r2, r3
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	4413      	add	r3, r2
 800722a:	61fb      	str	r3, [r7, #28]
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	00da      	lsls	r2, r3, #3
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	4413      	add	r3, r2
 8007236:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800723a:	61bb      	str	r3, [r7, #24]
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	881b      	ldrh	r3, [r3, #0]
 8007240:	b29b      	uxth	r3, r3
 8007242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007246:	b29a      	uxth	r2, r3
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	801a      	strh	r2, [r3, #0]
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	b29b      	uxth	r3, r3
 8007252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800725a:	b29a      	uxth	r2, r3
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	801a      	strh	r2, [r3, #0]
 8007260:	e017      	b.n	8007292 <HAL_PCD_EP_DB_Transmit+0x186>
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	785b      	ldrb	r3, [r3, #1]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d113      	bne.n	8007292 <HAL_PCD_EP_DB_Transmit+0x186>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007272:	b29b      	uxth	r3, r3
 8007274:	461a      	mov	r2, r3
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	4413      	add	r3, r2
 800727a:	627b      	str	r3, [r7, #36]	; 0x24
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	00da      	lsls	r2, r3, #3
 8007282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007284:	4413      	add	r3, r2
 8007286:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800728a:	623b      	str	r3, [r7, #32]
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	2200      	movs	r2, #0
 8007290:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	4619      	mov	r1, r3
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f00b fcf2 	bl	8012c82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800729e:	88fb      	ldrh	r3, [r7, #6]
 80072a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 82fa 	beq.w	800789e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c4:	82fb      	strh	r3, [r7, #22]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	441a      	add	r2, r3
 80072d4:	8afb      	ldrh	r3, [r7, #22]
 80072d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	8013      	strh	r3, [r2, #0]
 80072ea:	e2d8      	b.n	800789e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80072ec:	88fb      	ldrh	r3, [r7, #6]
 80072ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d021      	beq.n	800733a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	4413      	add	r3, r2
 8007304:	881b      	ldrh	r3, [r3, #0]
 8007306:	b29b      	uxth	r3, r3
 8007308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800730c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007310:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	461a      	mov	r2, r3
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	441a      	add	r2, r3
 8007322:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800732a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800732e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007336:	b29b      	uxth	r3, r3
 8007338:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007340:	2b01      	cmp	r3, #1
 8007342:	f040 82ac 	bne.w	800789e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	695a      	ldr	r2, [r3, #20]
 800734a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800734e:	441a      	add	r2, r3
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	69da      	ldr	r2, [r3, #28]
 8007358:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800735c:	441a      	add	r2, r3
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	6a1a      	ldr	r2, [r3, #32]
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	429a      	cmp	r2, r3
 800736c:	d30b      	bcc.n	8007386 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	6a1a      	ldr	r2, [r3, #32]
 800737a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800737e:	1ad2      	subs	r2, r2, r3
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	621a      	str	r2, [r3, #32]
 8007384:	e017      	b.n	80073b6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d108      	bne.n	80073a0 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800738e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007392:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800739e:	e00a      	b.n	80073b6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	2200      	movs	r2, #0
 80073b4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	785b      	ldrb	r3, [r3, #1]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d165      	bne.n	800748a <HAL_PCD_EP_DB_Transmit+0x37e>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	461a      	mov	r2, r3
 80073d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d2:	4413      	add	r3, r2
 80073d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	00da      	lsls	r2, r3, #3
 80073dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073de:	4413      	add	r3, r2
 80073e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80073e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f4:	801a      	strh	r2, [r3, #0]
 80073f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073fa:	2b3e      	cmp	r3, #62	; 0x3e
 80073fc:	d91d      	bls.n	800743a <HAL_PCD_EP_DB_Transmit+0x32e>
 80073fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007402:	095b      	lsrs	r3, r3, #5
 8007404:	64bb      	str	r3, [r7, #72]	; 0x48
 8007406:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800740a:	f003 031f 	and.w	r3, r3, #31
 800740e:	2b00      	cmp	r3, #0
 8007410:	d102      	bne.n	8007418 <HAL_PCD_EP_DB_Transmit+0x30c>
 8007412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007414:	3b01      	subs	r3, #1
 8007416:	64bb      	str	r3, [r7, #72]	; 0x48
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	881b      	ldrh	r3, [r3, #0]
 800741c:	b29a      	uxth	r2, r3
 800741e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007420:	b29b      	uxth	r3, r3
 8007422:	029b      	lsls	r3, r3, #10
 8007424:	b29b      	uxth	r3, r3
 8007426:	4313      	orrs	r3, r2
 8007428:	b29b      	uxth	r3, r3
 800742a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800742e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007432:	b29a      	uxth	r2, r3
 8007434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007436:	801a      	strh	r2, [r3, #0]
 8007438:	e044      	b.n	80074c4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800743a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10a      	bne.n	8007458 <HAL_PCD_EP_DB_Transmit+0x34c>
 8007442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	b29b      	uxth	r3, r3
 8007448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800744c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007450:	b29a      	uxth	r2, r3
 8007452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007454:	801a      	strh	r2, [r3, #0]
 8007456:	e035      	b.n	80074c4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8007458:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800745c:	085b      	lsrs	r3, r3, #1
 800745e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007460:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	2b00      	cmp	r3, #0
 800746a:	d002      	beq.n	8007472 <HAL_PCD_EP_DB_Transmit+0x366>
 800746c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800746e:	3301      	adds	r3, #1
 8007470:	64bb      	str	r3, [r7, #72]	; 0x48
 8007472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007474:	881b      	ldrh	r3, [r3, #0]
 8007476:	b29a      	uxth	r2, r3
 8007478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800747a:	b29b      	uxth	r3, r3
 800747c:	029b      	lsls	r3, r3, #10
 800747e:	b29b      	uxth	r3, r3
 8007480:	4313      	orrs	r3, r2
 8007482:	b29a      	uxth	r2, r3
 8007484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007486:	801a      	strh	r2, [r3, #0]
 8007488:	e01c      	b.n	80074c4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	785b      	ldrb	r3, [r3, #1]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d118      	bne.n	80074c4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	647b      	str	r3, [r7, #68]	; 0x44
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	461a      	mov	r2, r3
 80074a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074a6:	4413      	add	r3, r2
 80074a8:	647b      	str	r3, [r7, #68]	; 0x44
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	00da      	lsls	r2, r3, #3
 80074b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074b2:	4413      	add	r3, r2
 80074b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074b8:	643b      	str	r3, [r7, #64]	; 0x40
 80074ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074be:	b29a      	uxth	r2, r3
 80074c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074c2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6818      	ldr	r0, [r3, #0]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	6959      	ldr	r1, [r3, #20]
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	891a      	ldrh	r2, [r3, #8]
 80074d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	f005 fcb3 	bl	800ce40 <USB_WritePMA>
 80074da:	e1e0      	b.n	800789e <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	461a      	mov	r2, r3
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	00db      	lsls	r3, r3, #3
 80074ee:	4413      	add	r3, r2
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	6812      	ldr	r2, [r2, #0]
 80074f4:	4413      	add	r3, r2
 80074f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074fa:	881b      	ldrh	r3, [r3, #0]
 80074fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007500:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	699a      	ldr	r2, [r3, #24]
 8007508:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800750c:	429a      	cmp	r2, r3
 800750e:	d307      	bcc.n	8007520 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	699a      	ldr	r2, [r3, #24]
 8007514:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007518:	1ad2      	subs	r2, r2, r3
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	619a      	str	r2, [r3, #24]
 800751e:	e002      	b.n	8007526 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2200      	movs	r2, #0
 8007524:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	2b00      	cmp	r3, #0
 800752c:	f040 80c0 	bne.w	80076b0 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	785b      	ldrb	r3, [r3, #1]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d126      	bne.n	8007586 <HAL_PCD_EP_DB_Transmit+0x47a>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007546:	b29b      	uxth	r3, r3
 8007548:	461a      	mov	r2, r3
 800754a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800754c:	4413      	add	r3, r2
 800754e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	00da      	lsls	r2, r3, #3
 8007556:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007558:	4413      	add	r3, r2
 800755a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800755e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007560:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007562:	881b      	ldrh	r3, [r3, #0]
 8007564:	b29b      	uxth	r3, r3
 8007566:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800756a:	b29a      	uxth	r2, r3
 800756c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800756e:	801a      	strh	r2, [r3, #0]
 8007570:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	b29b      	uxth	r3, r3
 8007576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800757a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800757e:	b29a      	uxth	r2, r3
 8007580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007582:	801a      	strh	r2, [r3, #0]
 8007584:	e01a      	b.n	80075bc <HAL_PCD_EP_DB_Transmit+0x4b0>
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	785b      	ldrb	r3, [r3, #1]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d116      	bne.n	80075bc <HAL_PCD_EP_DB_Transmit+0x4b0>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	667b      	str	r3, [r7, #100]	; 0x64
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800759c:	b29b      	uxth	r3, r3
 800759e:	461a      	mov	r2, r3
 80075a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075a2:	4413      	add	r3, r2
 80075a4:	667b      	str	r3, [r7, #100]	; 0x64
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	00da      	lsls	r2, r3, #3
 80075ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075ae:	4413      	add	r3, r2
 80075b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075b4:	663b      	str	r3, [r7, #96]	; 0x60
 80075b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075b8:	2200      	movs	r2, #0
 80075ba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	677b      	str	r3, [r7, #116]	; 0x74
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	785b      	ldrb	r3, [r3, #1]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d12b      	bne.n	8007622 <HAL_PCD_EP_DB_Transmit+0x516>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d8:	b29b      	uxth	r3, r3
 80075da:	461a      	mov	r2, r3
 80075dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075de:	4413      	add	r3, r2
 80075e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	00da      	lsls	r2, r3, #3
 80075e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ea:	4413      	add	r3, r2
 80075ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075f8:	881b      	ldrh	r3, [r3, #0]
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007600:	b29a      	uxth	r2, r3
 8007602:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007606:	801a      	strh	r2, [r3, #0]
 8007608:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	b29b      	uxth	r3, r3
 8007610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007618:	b29a      	uxth	r2, r3
 800761a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800761e:	801a      	strh	r2, [r3, #0]
 8007620:	e017      	b.n	8007652 <HAL_PCD_EP_DB_Transmit+0x546>
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	785b      	ldrb	r3, [r3, #1]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d113      	bne.n	8007652 <HAL_PCD_EP_DB_Transmit+0x546>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007632:	b29b      	uxth	r3, r3
 8007634:	461a      	mov	r2, r3
 8007636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007638:	4413      	add	r3, r2
 800763a:	677b      	str	r3, [r7, #116]	; 0x74
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	00da      	lsls	r2, r3, #3
 8007642:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007644:	4413      	add	r3, r2
 8007646:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800764a:	673b      	str	r3, [r7, #112]	; 0x70
 800764c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800764e:	2200      	movs	r2, #0
 8007650:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	4619      	mov	r1, r3
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f00b fb12 	bl	8012c82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800765e:	88fb      	ldrh	r3, [r7, #6]
 8007660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007664:	2b00      	cmp	r3, #0
 8007666:	f040 811a 	bne.w	800789e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	461a      	mov	r2, r3
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	881b      	ldrh	r3, [r3, #0]
 800767a:	b29b      	uxth	r3, r3
 800767c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007684:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	461a      	mov	r2, r3
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	441a      	add	r2, r3
 8007696:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800769a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800769e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	8013      	strh	r3, [r2, #0]
 80076ae:	e0f6      	b.n	800789e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80076b0:	88fb      	ldrh	r3, [r7, #6]
 80076b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d121      	bne.n	80076fe <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	461a      	mov	r2, r3
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4413      	add	r3, r2
 80076c8:	881b      	ldrh	r3, [r3, #0]
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	461a      	mov	r2, r3
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	441a      	add	r2, r3
 80076e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80076ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007704:	2b01      	cmp	r3, #1
 8007706:	f040 80ca 	bne.w	800789e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	695a      	ldr	r2, [r3, #20]
 800770e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007712:	441a      	add	r2, r3
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	69da      	ldr	r2, [r3, #28]
 800771c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007720:	441a      	add	r2, r3
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	6a1a      	ldr	r2, [r3, #32]
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	429a      	cmp	r2, r3
 8007730:	d30b      	bcc.n	800774a <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	6a1a      	ldr	r2, [r3, #32]
 800773e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007742:	1ad2      	subs	r2, r2, r3
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	621a      	str	r2, [r3, #32]
 8007748:	e017      	b.n	800777a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d108      	bne.n	8007764 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8007752:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007756:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007762:	e00a      	b.n	800777a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2200      	movs	r2, #0
 8007770:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	657b      	str	r3, [r7, #84]	; 0x54
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	785b      	ldrb	r3, [r3, #1]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d165      	bne.n	8007854 <HAL_PCD_EP_DB_Transmit+0x748>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007796:	b29b      	uxth	r3, r3
 8007798:	461a      	mov	r2, r3
 800779a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800779c:	4413      	add	r3, r2
 800779e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	00da      	lsls	r2, r3, #3
 80077a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077a8:	4413      	add	r3, r2
 80077aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80077b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077b2:	881b      	ldrh	r3, [r3, #0]
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077be:	801a      	strh	r2, [r3, #0]
 80077c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077c4:	2b3e      	cmp	r3, #62	; 0x3e
 80077c6:	d91d      	bls.n	8007804 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80077c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077cc:	095b      	lsrs	r3, r3, #5
 80077ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80077d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077d4:	f003 031f 	and.w	r3, r3, #31
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d102      	bne.n	80077e2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80077dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077de:	3b01      	subs	r3, #1
 80077e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80077e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077e4:	881b      	ldrh	r3, [r3, #0]
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	029b      	lsls	r3, r3, #10
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	4313      	orrs	r3, r2
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007800:	801a      	strh	r2, [r3, #0]
 8007802:	e041      	b.n	8007888 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007804:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10a      	bne.n	8007822 <HAL_PCD_EP_DB_Transmit+0x716>
 800780c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800780e:	881b      	ldrh	r3, [r3, #0]
 8007810:	b29b      	uxth	r3, r3
 8007812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800781a:	b29a      	uxth	r2, r3
 800781c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800781e:	801a      	strh	r2, [r3, #0]
 8007820:	e032      	b.n	8007888 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007822:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007826:	085b      	lsrs	r3, r3, #1
 8007828:	66bb      	str	r3, [r7, #104]	; 0x68
 800782a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	2b00      	cmp	r3, #0
 8007834:	d002      	beq.n	800783c <HAL_PCD_EP_DB_Transmit+0x730>
 8007836:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007838:	3301      	adds	r3, #1
 800783a:	66bb      	str	r3, [r7, #104]	; 0x68
 800783c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800783e:	881b      	ldrh	r3, [r3, #0]
 8007840:	b29a      	uxth	r2, r3
 8007842:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007844:	b29b      	uxth	r3, r3
 8007846:	029b      	lsls	r3, r3, #10
 8007848:	b29b      	uxth	r3, r3
 800784a:	4313      	orrs	r3, r2
 800784c:	b29a      	uxth	r2, r3
 800784e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007850:	801a      	strh	r2, [r3, #0]
 8007852:	e019      	b.n	8007888 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	785b      	ldrb	r3, [r3, #1]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d115      	bne.n	8007888 <HAL_PCD_EP_DB_Transmit+0x77c>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007864:	b29b      	uxth	r3, r3
 8007866:	461a      	mov	r2, r3
 8007868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800786a:	4413      	add	r3, r2
 800786c:	657b      	str	r3, [r7, #84]	; 0x54
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	00da      	lsls	r2, r3, #3
 8007874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007876:	4413      	add	r3, r2
 8007878:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800787c:	653b      	str	r3, [r7, #80]	; 0x50
 800787e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007882:	b29a      	uxth	r2, r3
 8007884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007886:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6818      	ldr	r0, [r3, #0]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	6959      	ldr	r1, [r3, #20]
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	895a      	ldrh	r2, [r3, #10]
 8007894:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007898:	b29b      	uxth	r3, r3
 800789a:	f005 fad1 	bl	800ce40 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4413      	add	r3, r2
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078b8:	82bb      	strh	r3, [r7, #20]
 80078ba:	8abb      	ldrh	r3, [r7, #20]
 80078bc:	f083 0310 	eor.w	r3, r3, #16
 80078c0:	82bb      	strh	r3, [r7, #20]
 80078c2:	8abb      	ldrh	r3, [r7, #20]
 80078c4:	f083 0320 	eor.w	r3, r3, #32
 80078c8:	82bb      	strh	r3, [r7, #20]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	461a      	mov	r2, r3
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	441a      	add	r2, r3
 80078d8:	8abb      	ldrh	r3, [r7, #20]
 80078da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3790      	adds	r7, #144	; 0x90
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	607b      	str	r3, [r7, #4]
 8007902:	460b      	mov	r3, r1
 8007904:	817b      	strh	r3, [r7, #10]
 8007906:	4613      	mov	r3, r2
 8007908:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800790a:	897b      	ldrh	r3, [r7, #10]
 800790c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007910:	b29b      	uxth	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00b      	beq.n	800792e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007916:	897b      	ldrh	r3, [r7, #10]
 8007918:	f003 0307 	and.w	r3, r3, #7
 800791c:	1c5a      	adds	r2, r3, #1
 800791e:	4613      	mov	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	00db      	lsls	r3, r3, #3
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	4413      	add	r3, r2
 800792a:	617b      	str	r3, [r7, #20]
 800792c:	e009      	b.n	8007942 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800792e:	897a      	ldrh	r2, [r7, #10]
 8007930:	4613      	mov	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	4413      	add	r3, r2
 8007936:	00db      	lsls	r3, r3, #3
 8007938:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	4413      	add	r3, r2
 8007940:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007942:	893b      	ldrh	r3, [r7, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d107      	bne.n	8007958 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	2200      	movs	r2, #0
 800794c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	b29a      	uxth	r2, r3
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	80da      	strh	r2, [r3, #6]
 8007956:	e00b      	b.n	8007970 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	2201      	movs	r2, #1
 800795c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	b29a      	uxth	r2, r3
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	0c1b      	lsrs	r3, r3, #16
 800796a:	b29a      	uxth	r2, r3
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	371c      	adds	r7, #28
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800797e:	b480      	push	{r7}
 8007980:	b085      	sub	sp, #20
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	f043 0301 	orr.w	r3, r3, #1
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	f043 0302 	orr.w	r3, r3, #2
 80079bc:	b29a      	uxth	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
	...

080079d4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80079d4:	b480      	push	{r7}
 80079d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079d8:	4b05      	ldr	r3, [pc, #20]	; (80079f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a04      	ldr	r2, [pc, #16]	; (80079f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80079de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079e2:	6013      	str	r3, [r2, #0]
}
 80079e4:	bf00      	nop
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	58000400 	.word	0x58000400

080079f4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80079f4:	b480      	push	{r7}
 80079f6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80079f8:	4b04      	ldr	r3, [pc, #16]	; (8007a0c <HAL_PWREx_GetVoltageRange+0x18>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	58000400 	.word	0x58000400

08007a10 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007a10:	b480      	push	{r7}
 8007a12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007a14:	4b05      	ldr	r3, [pc, #20]	; (8007a2c <HAL_PWREx_EnableVddUSB+0x1c>)
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	4a04      	ldr	r2, [pc, #16]	; (8007a2c <HAL_PWREx_EnableVddUSB+0x1c>)
 8007a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a1e:	6053      	str	r3, [r2, #4]
}
 8007a20:	bf00      	nop
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	58000400 	.word	0x58000400

08007a30 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007a30:	b480      	push	{r7}
 8007a32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a42:	d101      	bne.n	8007a48 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007a44:	2301      	movs	r3, #1
 8007a46:	e000      	b.n	8007a4a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <LL_RCC_HSE_Enable>:
{
 8007a54:	b480      	push	{r7}
 8007a56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a66:	6013      	str	r3, [r2, #0]
}
 8007a68:	bf00      	nop
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <LL_RCC_HSE_Disable>:
{
 8007a72:	b480      	push	{r7}
 8007a74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8007a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a84:	6013      	str	r3, [r2, #0]
}
 8007a86:	bf00      	nop
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <LL_RCC_HSE_IsReady>:
{
 8007a90:	b480      	push	{r7}
 8007a92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007aa2:	d101      	bne.n	8007aa8 <LL_RCC_HSE_IsReady+0x18>
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e000      	b.n	8007aaa <LL_RCC_HSE_IsReady+0x1a>
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <LL_RCC_HSI_Enable>:
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ac6:	6013      	str	r3, [r2, #0]
}
 8007ac8:	bf00      	nop
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <LL_RCC_HSI_Disable>:
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ae4:	6013      	str	r3, [r2, #0]
}
 8007ae6:	bf00      	nop
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <LL_RCC_HSI_IsReady>:
{
 8007af0:	b480      	push	{r7}
 8007af2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b02:	d101      	bne.n	8007b08 <LL_RCC_HSI_IsReady+0x18>
 8007b04:	2301      	movs	r3, #1
 8007b06:	e000      	b.n	8007b0a <LL_RCC_HSI_IsReady+0x1a>
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <LL_RCC_HSI_SetCalibTrimming>:
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	061b      	lsls	r3, r3, #24
 8007b2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	604b      	str	r3, [r1, #4]
}
 8007b32:	bf00      	nop
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <LL_RCC_HSI48_Enable>:
{
 8007b3e:	b480      	push	{r7}
 8007b40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b4e:	f043 0301 	orr.w	r3, r3, #1
 8007b52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8007b56:	bf00      	nop
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <LL_RCC_HSI48_Disable>:
{
 8007b60:	b480      	push	{r7}
 8007b62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b70:	f023 0301 	bic.w	r3, r3, #1
 8007b74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8007b78:	bf00      	nop
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr

08007b82 <LL_RCC_HSI48_IsReady>:
{
 8007b82:	b480      	push	{r7}
 8007b84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8007b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d101      	bne.n	8007b9a <LL_RCC_HSI48_IsReady+0x18>
 8007b96:	2301      	movs	r3, #1
 8007b98:	e000      	b.n	8007b9c <LL_RCC_HSI48_IsReady+0x1a>
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr

08007ba6 <LL_RCC_LSE_Enable>:
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007bb6:	f043 0301 	orr.w	r3, r3, #1
 8007bba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007bbe:	bf00      	nop
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <LL_RCC_LSE_Disable>:
{
 8007bc8:	b480      	push	{r7}
 8007bca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007bd8:	f023 0301 	bic.w	r3, r3, #1
 8007bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007be0:	bf00      	nop
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <LL_RCC_LSE_EnableBypass>:
{
 8007bea:	b480      	push	{r7}
 8007bec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007bfa:	f043 0304 	orr.w	r3, r3, #4
 8007bfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007c02:	bf00      	nop
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <LL_RCC_LSE_DisableBypass>:
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c1c:	f023 0304 	bic.w	r3, r3, #4
 8007c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007c24:	bf00      	nop
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <LL_RCC_LSE_IsReady>:
{
 8007c2e:	b480      	push	{r7}
 8007c30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3a:	f003 0302 	and.w	r3, r3, #2
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d101      	bne.n	8007c46 <LL_RCC_LSE_IsReady+0x18>
 8007c42:	2301      	movs	r3, #1
 8007c44:	e000      	b.n	8007c48 <LL_RCC_LSE_IsReady+0x1a>
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <LL_RCC_LSI1_Enable>:
{
 8007c52:	b480      	push	{r7}
 8007c54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c62:	f043 0301 	orr.w	r3, r3, #1
 8007c66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007c6a:	bf00      	nop
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <LL_RCC_LSI1_Disable>:
{
 8007c74:	b480      	push	{r7}
 8007c76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c84:	f023 0301 	bic.w	r3, r3, #1
 8007c88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007c8c:	bf00      	nop
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <LL_RCC_LSI1_IsReady>:
{
 8007c96:	b480      	push	{r7}
 8007c98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8007c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ca2:	f003 0302 	and.w	r3, r3, #2
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d101      	bne.n	8007cae <LL_RCC_LSI1_IsReady+0x18>
 8007caa:	2301      	movs	r3, #1
 8007cac:	e000      	b.n	8007cb0 <LL_RCC_LSI1_IsReady+0x1a>
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <LL_RCC_LSI2_Enable>:
{
 8007cba:	b480      	push	{r7}
 8007cbc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cca:	f043 0304 	orr.w	r3, r3, #4
 8007cce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007cd2:	bf00      	nop
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <LL_RCC_LSI2_Disable>:
{
 8007cdc:	b480      	push	{r7}
 8007cde:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ce8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cec:	f023 0304 	bic.w	r3, r3, #4
 8007cf0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007cf4:	bf00      	nop
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <LL_RCC_LSI2_IsReady>:
{
 8007cfe:	b480      	push	{r7}
 8007d00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8007d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d0a:	f003 0308 	and.w	r3, r3, #8
 8007d0e:	2b08      	cmp	r3, #8
 8007d10:	d101      	bne.n	8007d16 <LL_RCC_LSI2_IsReady+0x18>
 8007d12:	2301      	movs	r3, #1
 8007d14:	e000      	b.n	8007d18 <LL_RCC_LSI2_IsReady+0x1a>
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <LL_RCC_LSI2_SetTrimming>:
{
 8007d22:	b480      	push	{r7}
 8007d24:	b083      	sub	sp, #12
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8007d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d32:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	021b      	lsls	r3, r3, #8
 8007d3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <LL_RCC_MSI_Enable>:
{
 8007d50:	b480      	push	{r7}
 8007d52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d5e:	f043 0301 	orr.w	r3, r3, #1
 8007d62:	6013      	str	r3, [r2, #0]
}
 8007d64:	bf00      	nop
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <LL_RCC_MSI_Disable>:
{
 8007d6e:	b480      	push	{r7}
 8007d70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d7c:	f023 0301 	bic.w	r3, r3, #1
 8007d80:	6013      	str	r3, [r2, #0]
}
 8007d82:	bf00      	nop
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <LL_RCC_MSI_IsReady>:
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0302 	and.w	r3, r3, #2
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d101      	bne.n	8007da2 <LL_RCC_MSI_IsReady+0x16>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e000      	b.n	8007da4 <LL_RCC_MSI_IsReady+0x18>
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <LL_RCC_MSI_SetRange>:
{
 8007dae:	b480      	push	{r7}
 8007db0:	b083      	sub	sp, #12
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8007db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007dc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	600b      	str	r3, [r1, #0]
}
 8007dca:	bf00      	nop
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <LL_RCC_MSI_GetRange>:
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b083      	sub	sp, #12
 8007dda:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8007ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007de6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2bb0      	cmp	r3, #176	; 0xb0
 8007dec:	d901      	bls.n	8007df2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8007dee:	23b0      	movs	r3, #176	; 0xb0
 8007df0:	607b      	str	r3, [r7, #4]
  return msiRange;
 8007df2:	687b      	ldr	r3, [r7, #4]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <LL_RCC_MSI_SetCalibTrimming>:
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	021b      	lsls	r3, r3, #8
 8007e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	604b      	str	r3, [r1, #4]
}
 8007e1e:	bf00      	nop
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <LL_RCC_SetSysClkSource>:
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b083      	sub	sp, #12
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	f023 0203 	bic.w	r2, r3, #3
 8007e3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	608b      	str	r3, [r1, #8]
}
 8007e46:	bf00      	nop
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <LL_RCC_GetSysClkSource>:
{
 8007e52:	b480      	push	{r7}
 8007e54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	f003 030c 	and.w	r3, r3, #12
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <LL_RCC_SetAHBPrescaler>:
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b083      	sub	sp, #12
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	608b      	str	r3, [r1, #8]
}
 8007e86:	bf00      	nop
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <LL_C2_RCC_SetAHBPrescaler>:
{
 8007e92:	b480      	push	{r7}
 8007e94:	b083      	sub	sp, #12
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8007e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e9e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007ea2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ea6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007eb2:	bf00      	nop
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <LL_RCC_SetAHB4Prescaler>:
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b083      	sub	sp, #12
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007ece:	f023 020f 	bic.w	r2, r3, #15
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	091b      	lsrs	r3, r3, #4
 8007ed6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007eda:	4313      	orrs	r3, r2
 8007edc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <LL_RCC_SetAPB1Prescaler>:
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007efe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	608b      	str	r3, [r1, #8]
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <LL_RCC_SetAPB2Prescaler>:
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007f26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	608b      	str	r3, [r1, #8]
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <LL_RCC_GetAHBPrescaler>:
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <LL_RCC_GetAHB4Prescaler>:
{
 8007f54:	b480      	push	{r7}
 8007f56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f5c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007f60:	011b      	lsls	r3, r3, #4
 8007f62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <LL_RCC_PLL_Enable>:
{
 8007f70:	b480      	push	{r7}
 8007f72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f82:	6013      	str	r3, [r2, #0]
}
 8007f84:	bf00      	nop
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <LL_RCC_PLL_Disable>:
{
 8007f8e:	b480      	push	{r7}
 8007f90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8007f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fa0:	6013      	str	r3, [r2, #0]
}
 8007fa2:	bf00      	nop
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <LL_RCC_PLL_IsReady>:
{
 8007fac:	b480      	push	{r7}
 8007fae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fbe:	d101      	bne.n	8007fc4 <LL_RCC_PLL_IsReady+0x18>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e000      	b.n	8007fc6 <LL_RCC_PLL_IsReady+0x1a>
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <LL_RCC_PLL_GetN>:
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	0a1b      	lsrs	r3, r3, #8
 8007fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <LL_RCC_PLL_GetR>:
{
 8007fea:	b480      	push	{r7}
 8007fec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <LL_RCC_PLL_GetDivider>:
{
 8008002:	b480      	push	{r7}
 8008004:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8008010:	4618      	mov	r0, r3
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <LL_RCC_PLL_GetMainSource>:
{
 800801a:	b480      	push	{r7}
 800801c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800801e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	f003 0303 	and.w	r3, r3, #3
}
 8008028:	4618      	mov	r0, r3
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <LL_RCC_IsActiveFlag_HPRE>:
{
 8008032:	b480      	push	{r7}
 8008034:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8008036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008044:	d101      	bne.n	800804a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8008046:	2301      	movs	r3, #1
 8008048:	e000      	b.n	800804c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8008056:	b480      	push	{r7}
 8008058:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800805a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800805e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008066:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800806a:	d101      	bne.n	8008070 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800806c:	2301      	movs	r3, #1
 800806e:	e000      	b.n	8008072 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800807c:	b480      	push	{r7}
 800807e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008084:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800808c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008090:	d101      	bne.n	8008096 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8008092:	2301      	movs	r3, #1
 8008094:	e000      	b.n	8008098 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <LL_RCC_IsActiveFlag_PPRE1>:
{
 80080a2:	b480      	push	{r7}
 80080a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80080a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080b4:	d101      	bne.n	80080ba <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80080b6:	2301      	movs	r3, #1
 80080b8:	e000      	b.n	80080bc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80080c6:	b480      	push	{r7}
 80080c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80080ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080d8:	d101      	bne.n	80080de <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80080da:	2301      	movs	r3, #1
 80080dc:	e000      	b.n	80080e0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
	...

080080ec <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080ec:	b590      	push	{r4, r7, lr}
 80080ee:	b08d      	sub	sp, #52	; 0x34
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e363      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 0320 	and.w	r3, r3, #32
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 808d 	beq.w	8008226 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800810c:	f7ff fea1 	bl	8007e52 <LL_RCC_GetSysClkSource>
 8008110:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008112:	f7ff ff82 	bl	800801a <LL_RCC_PLL_GetMainSource>
 8008116:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811a:	2b00      	cmp	r3, #0
 800811c:	d005      	beq.n	800812a <HAL_RCC_OscConfig+0x3e>
 800811e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008120:	2b0c      	cmp	r3, #12
 8008122:	d147      	bne.n	80081b4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8008124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008126:	2b01      	cmp	r3, #1
 8008128:	d144      	bne.n	80081b4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	69db      	ldr	r3, [r3, #28]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d101      	bne.n	8008136 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e347      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800813a:	f7ff fe4c 	bl	8007dd6 <LL_RCC_MSI_GetRange>
 800813e:	4603      	mov	r3, r0
 8008140:	429c      	cmp	r4, r3
 8008142:	d914      	bls.n	800816e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008148:	4618      	mov	r0, r3
 800814a:	f000 fd03 	bl	8008b54 <RCC_SetFlashLatencyFromMSIRange>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d001      	beq.n	8008158 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e336      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815c:	4618      	mov	r0, r3
 800815e:	f7ff fe26 	bl	8007dae <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	4618      	mov	r0, r3
 8008168:	f7ff fe4a 	bl	8007e00 <LL_RCC_MSI_SetCalibTrimming>
 800816c:	e013      	b.n	8008196 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008172:	4618      	mov	r0, r3
 8008174:	f7ff fe1b 	bl	8007dae <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a1b      	ldr	r3, [r3, #32]
 800817c:	4618      	mov	r0, r3
 800817e:	f7ff fe3f 	bl	8007e00 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008186:	4618      	mov	r0, r3
 8008188:	f000 fce4 	bl	8008b54 <RCC_SetFlashLatencyFromMSIRange>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e317      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008196:	f000 fcc9 	bl	8008b2c <HAL_RCC_GetHCLKFreq>
 800819a:	4603      	mov	r3, r0
 800819c:	4aa4      	ldr	r2, [pc, #656]	; (8008430 <HAL_RCC_OscConfig+0x344>)
 800819e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80081a0:	4ba4      	ldr	r3, [pc, #656]	; (8008434 <HAL_RCC_OscConfig+0x348>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7fa fd4d 	bl	8002c44 <HAL_InitTick>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d039      	beq.n	8008224 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e308      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	69db      	ldr	r3, [r3, #28]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d01e      	beq.n	80081fa <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80081bc:	f7ff fdc8 	bl	8007d50 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80081c0:	f7fa fd8e 	bl	8002ce0 <HAL_GetTick>
 80081c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80081c6:	e008      	b.n	80081da <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80081c8:	f7fa fd8a 	bl	8002ce0 <HAL_GetTick>
 80081cc:	4602      	mov	r2, r0
 80081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d901      	bls.n	80081da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80081d6:	2303      	movs	r3, #3
 80081d8:	e2f5      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80081da:	f7ff fdd7 	bl	8007d8c <LL_RCC_MSI_IsReady>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d0f1      	beq.n	80081c8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7ff fde0 	bl	8007dae <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a1b      	ldr	r3, [r3, #32]
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7ff fe04 	bl	8007e00 <LL_RCC_MSI_SetCalibTrimming>
 80081f8:	e015      	b.n	8008226 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80081fa:	f7ff fdb8 	bl	8007d6e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80081fe:	f7fa fd6f 	bl	8002ce0 <HAL_GetTick>
 8008202:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8008204:	e008      	b.n	8008218 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008206:	f7fa fd6b 	bl	8002ce0 <HAL_GetTick>
 800820a:	4602      	mov	r2, r0
 800820c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	2b02      	cmp	r3, #2
 8008212:	d901      	bls.n	8008218 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008214:	2303      	movs	r3, #3
 8008216:	e2d6      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8008218:	f7ff fdb8 	bl	8007d8c <LL_RCC_MSI_IsReady>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1f1      	bne.n	8008206 <HAL_RCC_OscConfig+0x11a>
 8008222:	e000      	b.n	8008226 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008224:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b00      	cmp	r3, #0
 8008230:	d047      	beq.n	80082c2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008232:	f7ff fe0e 	bl	8007e52 <LL_RCC_GetSysClkSource>
 8008236:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008238:	f7ff feef 	bl	800801a <LL_RCC_PLL_GetMainSource>
 800823c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	2b08      	cmp	r3, #8
 8008242:	d005      	beq.n	8008250 <HAL_RCC_OscConfig+0x164>
 8008244:	6a3b      	ldr	r3, [r7, #32]
 8008246:	2b0c      	cmp	r3, #12
 8008248:	d108      	bne.n	800825c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	2b03      	cmp	r3, #3
 800824e:	d105      	bne.n	800825c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d134      	bne.n	80082c2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	e2b4      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008264:	d102      	bne.n	800826c <HAL_RCC_OscConfig+0x180>
 8008266:	f7ff fbf5 	bl	8007a54 <LL_RCC_HSE_Enable>
 800826a:	e001      	b.n	8008270 <HAL_RCC_OscConfig+0x184>
 800826c:	f7ff fc01 	bl	8007a72 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d012      	beq.n	800829e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008278:	f7fa fd32 	bl	8002ce0 <HAL_GetTick>
 800827c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800827e:	e008      	b.n	8008292 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008280:	f7fa fd2e 	bl	8002ce0 <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	2b64      	cmp	r3, #100	; 0x64
 800828c:	d901      	bls.n	8008292 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e299      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8008292:	f7ff fbfd 	bl	8007a90 <LL_RCC_HSE_IsReady>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d0f1      	beq.n	8008280 <HAL_RCC_OscConfig+0x194>
 800829c:	e011      	b.n	80082c2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800829e:	f7fa fd1f 	bl	8002ce0 <HAL_GetTick>
 80082a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80082a4:	e008      	b.n	80082b8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082a6:	f7fa fd1b 	bl	8002ce0 <HAL_GetTick>
 80082aa:	4602      	mov	r2, r0
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	2b64      	cmp	r3, #100	; 0x64
 80082b2:	d901      	bls.n	80082b8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e286      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80082b8:	f7ff fbea 	bl	8007a90 <LL_RCC_HSE_IsReady>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1f1      	bne.n	80082a6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 0302 	and.w	r3, r3, #2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d04c      	beq.n	8008368 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082ce:	f7ff fdc0 	bl	8007e52 <LL_RCC_GetSysClkSource>
 80082d2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082d4:	f7ff fea1 	bl	800801a <LL_RCC_PLL_GetMainSource>
 80082d8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	2b04      	cmp	r3, #4
 80082de:	d005      	beq.n	80082ec <HAL_RCC_OscConfig+0x200>
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	2b0c      	cmp	r3, #12
 80082e4:	d10e      	bne.n	8008304 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d10b      	bne.n	8008304 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d101      	bne.n	80082f8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e266      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7ff fc09 	bl	8007b14 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008302:	e031      	b.n	8008368 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d019      	beq.n	8008340 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800830c:	f7ff fbd2 	bl	8007ab4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008310:	f7fa fce6 	bl	8002ce0 <HAL_GetTick>
 8008314:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008316:	e008      	b.n	800832a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008318:	f7fa fce2 	bl	8002ce0 <HAL_GetTick>
 800831c:	4602      	mov	r2, r0
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	2b02      	cmp	r3, #2
 8008324:	d901      	bls.n	800832a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008326:	2303      	movs	r3, #3
 8008328:	e24d      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800832a:	f7ff fbe1 	bl	8007af0 <LL_RCC_HSI_IsReady>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d0f1      	beq.n	8008318 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	4618      	mov	r0, r3
 800833a:	f7ff fbeb 	bl	8007b14 <LL_RCC_HSI_SetCalibTrimming>
 800833e:	e013      	b.n	8008368 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008340:	f7ff fbc7 	bl	8007ad2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008344:	f7fa fccc 	bl	8002ce0 <HAL_GetTick>
 8008348:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800834a:	e008      	b.n	800835e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800834c:	f7fa fcc8 	bl	8002ce0 <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	2b02      	cmp	r3, #2
 8008358:	d901      	bls.n	800835e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800835a:	2303      	movs	r3, #3
 800835c:	e233      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800835e:	f7ff fbc7 	bl	8007af0 <LL_RCC_HSI_IsReady>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1f1      	bne.n	800834c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0308 	and.w	r3, r3, #8
 8008370:	2b00      	cmp	r3, #0
 8008372:	d106      	bne.n	8008382 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800837c:	2b00      	cmp	r3, #0
 800837e:	f000 80a3 	beq.w	80084c8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	695b      	ldr	r3, [r3, #20]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d076      	beq.n	8008478 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0310 	and.w	r3, r3, #16
 8008392:	2b00      	cmp	r3, #0
 8008394:	d046      	beq.n	8008424 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8008396:	f7ff fc7e 	bl	8007c96 <LL_RCC_LSI1_IsReady>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d113      	bne.n	80083c8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80083a0:	f7ff fc57 	bl	8007c52 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80083a4:	f7fa fc9c 	bl	8002ce0 <HAL_GetTick>
 80083a8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80083aa:	e008      	b.n	80083be <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80083ac:	f7fa fc98 	bl	8002ce0 <HAL_GetTick>
 80083b0:	4602      	mov	r2, r0
 80083b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d901      	bls.n	80083be <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e203      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80083be:	f7ff fc6a 	bl	8007c96 <LL_RCC_LSI1_IsReady>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d0f1      	beq.n	80083ac <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80083c8:	f7ff fc77 	bl	8007cba <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083cc:	f7fa fc88 	bl	8002ce0 <HAL_GetTick>
 80083d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80083d2:	e008      	b.n	80083e6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80083d4:	f7fa fc84 	bl	8002ce0 <HAL_GetTick>
 80083d8:	4602      	mov	r2, r0
 80083da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	2b03      	cmp	r3, #3
 80083e0:	d901      	bls.n	80083e6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e1ef      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80083e6:	f7ff fc8a 	bl	8007cfe <LL_RCC_LSI2_IsReady>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d0f1      	beq.n	80083d4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7ff fc94 	bl	8007d22 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80083fa:	f7ff fc3b 	bl	8007c74 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083fe:	f7fa fc6f 	bl	8002ce0 <HAL_GetTick>
 8008402:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008404:	e008      	b.n	8008418 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008406:	f7fa fc6b 	bl	8002ce0 <HAL_GetTick>
 800840a:	4602      	mov	r2, r0
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	2b02      	cmp	r3, #2
 8008412:	d901      	bls.n	8008418 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8008414:	2303      	movs	r3, #3
 8008416:	e1d6      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008418:	f7ff fc3d 	bl	8007c96 <LL_RCC_LSI1_IsReady>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1f1      	bne.n	8008406 <HAL_RCC_OscConfig+0x31a>
 8008422:	e051      	b.n	80084c8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8008424:	f7ff fc15 	bl	8007c52 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008428:	f7fa fc5a 	bl	8002ce0 <HAL_GetTick>
 800842c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800842e:	e00c      	b.n	800844a <HAL_RCC_OscConfig+0x35e>
 8008430:	2000000c 	.word	0x2000000c
 8008434:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008438:	f7fa fc52 	bl	8002ce0 <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	2b02      	cmp	r3, #2
 8008444:	d901      	bls.n	800844a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	e1bd      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800844a:	f7ff fc24 	bl	8007c96 <LL_RCC_LSI1_IsReady>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d0f1      	beq.n	8008438 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8008454:	f7ff fc42 	bl	8007cdc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008458:	e008      	b.n	800846c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800845a:	f7fa fc41 	bl	8002ce0 <HAL_GetTick>
 800845e:	4602      	mov	r2, r0
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	2b03      	cmp	r3, #3
 8008466:	d901      	bls.n	800846c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8008468:	2303      	movs	r3, #3
 800846a:	e1ac      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800846c:	f7ff fc47 	bl	8007cfe <LL_RCC_LSI2_IsReady>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1f1      	bne.n	800845a <HAL_RCC_OscConfig+0x36e>
 8008476:	e027      	b.n	80084c8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8008478:	f7ff fc30 	bl	8007cdc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800847c:	f7fa fc30 	bl	8002ce0 <HAL_GetTick>
 8008480:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008482:	e008      	b.n	8008496 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008484:	f7fa fc2c 	bl	8002ce0 <HAL_GetTick>
 8008488:	4602      	mov	r2, r0
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	2b03      	cmp	r3, #3
 8008490:	d901      	bls.n	8008496 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e197      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008496:	f7ff fc32 	bl	8007cfe <LL_RCC_LSI2_IsReady>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1f1      	bne.n	8008484 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80084a0:	f7ff fbe8 	bl	8007c74 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084a4:	f7fa fc1c 	bl	8002ce0 <HAL_GetTick>
 80084a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80084aa:	e008      	b.n	80084be <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80084ac:	f7fa fc18 	bl	8002ce0 <HAL_GetTick>
 80084b0:	4602      	mov	r2, r0
 80084b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d901      	bls.n	80084be <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e183      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80084be:	f7ff fbea 	bl	8007c96 <LL_RCC_LSI1_IsReady>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d1f1      	bne.n	80084ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 0304 	and.w	r3, r3, #4
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d05b      	beq.n	800858c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80084d4:	4ba7      	ldr	r3, [pc, #668]	; (8008774 <HAL_RCC_OscConfig+0x688>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d114      	bne.n	800850a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80084e0:	f7ff fa78 	bl	80079d4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80084e4:	f7fa fbfc 	bl	8002ce0 <HAL_GetTick>
 80084e8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80084ea:	e008      	b.n	80084fe <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084ec:	f7fa fbf8 	bl	8002ce0 <HAL_GetTick>
 80084f0:	4602      	mov	r2, r0
 80084f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d901      	bls.n	80084fe <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80084fa:	2303      	movs	r3, #3
 80084fc:	e163      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80084fe:	4b9d      	ldr	r3, [pc, #628]	; (8008774 <HAL_RCC_OscConfig+0x688>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008506:	2b00      	cmp	r3, #0
 8008508:	d0f0      	beq.n	80084ec <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	2b01      	cmp	r3, #1
 8008510:	d102      	bne.n	8008518 <HAL_RCC_OscConfig+0x42c>
 8008512:	f7ff fb48 	bl	8007ba6 <LL_RCC_LSE_Enable>
 8008516:	e00c      	b.n	8008532 <HAL_RCC_OscConfig+0x446>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	2b05      	cmp	r3, #5
 800851e:	d104      	bne.n	800852a <HAL_RCC_OscConfig+0x43e>
 8008520:	f7ff fb63 	bl	8007bea <LL_RCC_LSE_EnableBypass>
 8008524:	f7ff fb3f 	bl	8007ba6 <LL_RCC_LSE_Enable>
 8008528:	e003      	b.n	8008532 <HAL_RCC_OscConfig+0x446>
 800852a:	f7ff fb4d 	bl	8007bc8 <LL_RCC_LSE_Disable>
 800852e:	f7ff fb6d 	bl	8007c0c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d014      	beq.n	8008564 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800853a:	f7fa fbd1 	bl	8002ce0 <HAL_GetTick>
 800853e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008540:	e00a      	b.n	8008558 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008542:	f7fa fbcd 	bl	8002ce0 <HAL_GetTick>
 8008546:	4602      	mov	r2, r0
 8008548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008550:	4293      	cmp	r3, r2
 8008552:	d901      	bls.n	8008558 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8008554:	2303      	movs	r3, #3
 8008556:	e136      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8008558:	f7ff fb69 	bl	8007c2e <LL_RCC_LSE_IsReady>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d0ef      	beq.n	8008542 <HAL_RCC_OscConfig+0x456>
 8008562:	e013      	b.n	800858c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008564:	f7fa fbbc 	bl	8002ce0 <HAL_GetTick>
 8008568:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800856a:	e00a      	b.n	8008582 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800856c:	f7fa fbb8 	bl	8002ce0 <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	f241 3288 	movw	r2, #5000	; 0x1388
 800857a:	4293      	cmp	r3, r2
 800857c:	d901      	bls.n	8008582 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800857e:	2303      	movs	r3, #3
 8008580:	e121      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008582:	f7ff fb54 	bl	8007c2e <LL_RCC_LSE_IsReady>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1ef      	bne.n	800856c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008594:	2b00      	cmp	r3, #0
 8008596:	d02c      	beq.n	80085f2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800859c:	2b00      	cmp	r3, #0
 800859e:	d014      	beq.n	80085ca <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80085a0:	f7ff facd 	bl	8007b3e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085a4:	f7fa fb9c 	bl	8002ce0 <HAL_GetTick>
 80085a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80085aa:	e008      	b.n	80085be <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80085ac:	f7fa fb98 	bl	8002ce0 <HAL_GetTick>
 80085b0:	4602      	mov	r2, r0
 80085b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d901      	bls.n	80085be <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e103      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80085be:	f7ff fae0 	bl	8007b82 <LL_RCC_HSI48_IsReady>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d0f1      	beq.n	80085ac <HAL_RCC_OscConfig+0x4c0>
 80085c8:	e013      	b.n	80085f2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80085ca:	f7ff fac9 	bl	8007b60 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085ce:	f7fa fb87 	bl	8002ce0 <HAL_GetTick>
 80085d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80085d4:	e008      	b.n	80085e8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80085d6:	f7fa fb83 	bl	8002ce0 <HAL_GetTick>
 80085da:	4602      	mov	r2, r0
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d901      	bls.n	80085e8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e0ee      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80085e8:	f7ff facb 	bl	8007b82 <LL_RCC_HSI48_IsReady>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1f1      	bne.n	80085d6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f000 80e4 	beq.w	80087c4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085fc:	f7ff fc29 	bl	8007e52 <LL_RCC_GetSysClkSource>
 8008600:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8008602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860e:	2b02      	cmp	r3, #2
 8008610:	f040 80b4 	bne.w	800877c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f003 0203 	and.w	r2, r3, #3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861e:	429a      	cmp	r2, r3
 8008620:	d123      	bne.n	800866a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800862c:	429a      	cmp	r2, r3
 800862e:	d11c      	bne.n	800866a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	0a1b      	lsrs	r3, r3, #8
 8008634:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800863c:	429a      	cmp	r2, r3
 800863e:	d114      	bne.n	800866a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800864a:	429a      	cmp	r2, r3
 800864c:	d10d      	bne.n	800866a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008658:	429a      	cmp	r2, r3
 800865a:	d106      	bne.n	800866a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008666:	429a      	cmp	r2, r3
 8008668:	d05d      	beq.n	8008726 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	2b0c      	cmp	r3, #12
 800866e:	d058      	beq.n	8008722 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800867a:	2b00      	cmp	r3, #0
 800867c:	d001      	beq.n	8008682 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e0a1      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008682:	f7ff fc84 	bl	8007f8e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008686:	f7fa fb2b 	bl	8002ce0 <HAL_GetTick>
 800868a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800868c:	e008      	b.n	80086a0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800868e:	f7fa fb27 	bl	8002ce0 <HAL_GetTick>
 8008692:	4602      	mov	r2, r0
 8008694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	2b02      	cmp	r3, #2
 800869a:	d901      	bls.n	80086a0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e092      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80086a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1ef      	bne.n	800868e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086b2:	68da      	ldr	r2, [r3, #12]
 80086b4:	4b30      	ldr	r3, [pc, #192]	; (8008778 <HAL_RCC_OscConfig+0x68c>)
 80086b6:	4013      	ands	r3, r2
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80086c0:	4311      	orrs	r1, r2
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80086c6:	0212      	lsls	r2, r2, #8
 80086c8:	4311      	orrs	r1, r2
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80086ce:	4311      	orrs	r1, r2
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80086d4:	4311      	orrs	r1, r2
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80086da:	430a      	orrs	r2, r1
 80086dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80086e0:	4313      	orrs	r3, r2
 80086e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80086e4:	f7ff fc44 	bl	8007f70 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80086e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80086f8:	f7fa faf2 	bl	8002ce0 <HAL_GetTick>
 80086fc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80086fe:	e008      	b.n	8008712 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008700:	f7fa faee 	bl	8002ce0 <HAL_GetTick>
 8008704:	4602      	mov	r2, r0
 8008706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	2b02      	cmp	r3, #2
 800870c:	d901      	bls.n	8008712 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800870e:	2303      	movs	r3, #3
 8008710:	e059      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d0ef      	beq.n	8008700 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008720:	e050      	b.n	80087c4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	e04f      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d147      	bne.n	80087c4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008734:	f7ff fc1c 	bl	8007f70 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008746:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008748:	f7fa faca 	bl	8002ce0 <HAL_GetTick>
 800874c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800874e:	e008      	b.n	8008762 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008750:	f7fa fac6 	bl	8002ce0 <HAL_GetTick>
 8008754:	4602      	mov	r2, r0
 8008756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	2b02      	cmp	r3, #2
 800875c:	d901      	bls.n	8008762 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e031      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d0ef      	beq.n	8008750 <HAL_RCC_OscConfig+0x664>
 8008770:	e028      	b.n	80087c4 <HAL_RCC_OscConfig+0x6d8>
 8008772:	bf00      	nop
 8008774:	58000400 	.word	0x58000400
 8008778:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	2b0c      	cmp	r3, #12
 8008780:	d01e      	beq.n	80087c0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008782:	f7ff fc04 	bl	8007f8e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008786:	f7fa faab 	bl	8002ce0 <HAL_GetTick>
 800878a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800878c:	e008      	b.n	80087a0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800878e:	f7fa faa7 	bl	8002ce0 <HAL_GetTick>
 8008792:	4602      	mov	r2, r0
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	2b02      	cmp	r3, #2
 800879a:	d901      	bls.n	80087a0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	e012      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80087a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1ef      	bne.n	800878e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80087ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087b2:	68da      	ldr	r2, [r3, #12]
 80087b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80087b8:	4b05      	ldr	r3, [pc, #20]	; (80087d0 <HAL_RCC_OscConfig+0x6e4>)
 80087ba:	4013      	ands	r3, r2
 80087bc:	60cb      	str	r3, [r1, #12]
 80087be:	e001      	b.n	80087c4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	e000      	b.n	80087c6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3734      	adds	r7, #52	; 0x34
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd90      	pop	{r4, r7, pc}
 80087ce:	bf00      	nop
 80087d0:	eefefffc 	.word	0xeefefffc

080087d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d101      	bne.n	80087e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e12d      	b.n	8008a44 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80087e8:	4b98      	ldr	r3, [pc, #608]	; (8008a4c <HAL_RCC_ClockConfig+0x278>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 0307 	and.w	r3, r3, #7
 80087f0:	683a      	ldr	r2, [r7, #0]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d91b      	bls.n	800882e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087f6:	4b95      	ldr	r3, [pc, #596]	; (8008a4c <HAL_RCC_ClockConfig+0x278>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f023 0207 	bic.w	r2, r3, #7
 80087fe:	4993      	ldr	r1, [pc, #588]	; (8008a4c <HAL_RCC_ClockConfig+0x278>)
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	4313      	orrs	r3, r2
 8008804:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008806:	f7fa fa6b 	bl	8002ce0 <HAL_GetTick>
 800880a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800880c:	e008      	b.n	8008820 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800880e:	f7fa fa67 	bl	8002ce0 <HAL_GetTick>
 8008812:	4602      	mov	r2, r0
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	2b02      	cmp	r3, #2
 800881a:	d901      	bls.n	8008820 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e111      	b.n	8008a44 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008820:	4b8a      	ldr	r3, [pc, #552]	; (8008a4c <HAL_RCC_ClockConfig+0x278>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 0307 	and.w	r3, r3, #7
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	429a      	cmp	r2, r3
 800882c:	d1ef      	bne.n	800880e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 0302 	and.w	r3, r3, #2
 8008836:	2b00      	cmp	r3, #0
 8008838:	d016      	beq.n	8008868 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	4618      	mov	r0, r3
 8008840:	f7ff fb13 	bl	8007e6a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008844:	f7fa fa4c 	bl	8002ce0 <HAL_GetTick>
 8008848:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800884a:	e008      	b.n	800885e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800884c:	f7fa fa48 	bl	8002ce0 <HAL_GetTick>
 8008850:	4602      	mov	r2, r0
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	2b02      	cmp	r3, #2
 8008858:	d901      	bls.n	800885e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800885a:	2303      	movs	r3, #3
 800885c:	e0f2      	b.n	8008a44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800885e:	f7ff fbe8 	bl	8008032 <LL_RCC_IsActiveFlag_HPRE>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d0f1      	beq.n	800884c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0320 	and.w	r3, r3, #32
 8008870:	2b00      	cmp	r3, #0
 8008872:	d016      	beq.n	80088a2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	695b      	ldr	r3, [r3, #20]
 8008878:	4618      	mov	r0, r3
 800887a:	f7ff fb0a 	bl	8007e92 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800887e:	f7fa fa2f 	bl	8002ce0 <HAL_GetTick>
 8008882:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008884:	e008      	b.n	8008898 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008886:	f7fa fa2b 	bl	8002ce0 <HAL_GetTick>
 800888a:	4602      	mov	r2, r0
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	2b02      	cmp	r3, #2
 8008892:	d901      	bls.n	8008898 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008894:	2303      	movs	r3, #3
 8008896:	e0d5      	b.n	8008a44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008898:	f7ff fbdd 	bl	8008056 <LL_RCC_IsActiveFlag_C2HPRE>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d0f1      	beq.n	8008886 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d016      	beq.n	80088dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7ff fb03 	bl	8007ebe <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80088b8:	f7fa fa12 	bl	8002ce0 <HAL_GetTick>
 80088bc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80088be:	e008      	b.n	80088d2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80088c0:	f7fa fa0e 	bl	8002ce0 <HAL_GetTick>
 80088c4:	4602      	mov	r2, r0
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d901      	bls.n	80088d2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80088ce:	2303      	movs	r3, #3
 80088d0:	e0b8      	b.n	8008a44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80088d2:	f7ff fbd3 	bl	800807c <LL_RCC_IsActiveFlag_SHDHPRE>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d0f1      	beq.n	80088c0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0304 	and.w	r3, r3, #4
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d016      	beq.n	8008916 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7ff fafd 	bl	8007eec <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80088f2:	f7fa f9f5 	bl	8002ce0 <HAL_GetTick>
 80088f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80088f8:	e008      	b.n	800890c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80088fa:	f7fa f9f1 	bl	8002ce0 <HAL_GetTick>
 80088fe:	4602      	mov	r2, r0
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	2b02      	cmp	r3, #2
 8008906:	d901      	bls.n	800890c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8008908:	2303      	movs	r3, #3
 800890a:	e09b      	b.n	8008a44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800890c:	f7ff fbc9 	bl	80080a2 <LL_RCC_IsActiveFlag_PPRE1>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d0f1      	beq.n	80088fa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 0308 	and.w	r3, r3, #8
 800891e:	2b00      	cmp	r3, #0
 8008920:	d017      	beq.n	8008952 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	00db      	lsls	r3, r3, #3
 8008928:	4618      	mov	r0, r3
 800892a:	f7ff faf3 	bl	8007f14 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800892e:	f7fa f9d7 	bl	8002ce0 <HAL_GetTick>
 8008932:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008934:	e008      	b.n	8008948 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008936:	f7fa f9d3 	bl	8002ce0 <HAL_GetTick>
 800893a:	4602      	mov	r2, r0
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	1ad3      	subs	r3, r2, r3
 8008940:	2b02      	cmp	r3, #2
 8008942:	d901      	bls.n	8008948 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	e07d      	b.n	8008a44 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008948:	f7ff fbbd 	bl	80080c6 <LL_RCC_IsActiveFlag_PPRE2>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d0f1      	beq.n	8008936 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	2b00      	cmp	r3, #0
 800895c:	d043      	beq.n	80089e6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	2b02      	cmp	r3, #2
 8008964:	d106      	bne.n	8008974 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008966:	f7ff f893 	bl	8007a90 <LL_RCC_HSE_IsReady>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d11e      	bne.n	80089ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	e067      	b.n	8008a44 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	2b03      	cmp	r3, #3
 800897a:	d106      	bne.n	800898a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800897c:	f7ff fb16 	bl	8007fac <LL_RCC_PLL_IsReady>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d113      	bne.n	80089ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e05c      	b.n	8008a44 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d106      	bne.n	80089a0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008992:	f7ff f9fb 	bl	8007d8c <LL_RCC_MSI_IsReady>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d108      	bne.n	80089ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e051      	b.n	8008a44 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80089a0:	f7ff f8a6 	bl	8007af0 <LL_RCC_HSI_IsReady>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d101      	bne.n	80089ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e04a      	b.n	8008a44 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7ff fa39 	bl	8007e2a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089b8:	f7fa f992 	bl	8002ce0 <HAL_GetTick>
 80089bc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089be:	e00a      	b.n	80089d6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089c0:	f7fa f98e 	bl	8002ce0 <HAL_GetTick>
 80089c4:	4602      	mov	r2, r0
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d901      	bls.n	80089d6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e036      	b.n	8008a44 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089d6:	f7ff fa3c 	bl	8007e52 <LL_RCC_GetSysClkSource>
 80089da:	4602      	mov	r2, r0
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d1ec      	bne.n	80089c0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80089e6:	4b19      	ldr	r3, [pc, #100]	; (8008a4c <HAL_RCC_ClockConfig+0x278>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0307 	and.w	r3, r3, #7
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d21b      	bcs.n	8008a2c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089f4:	4b15      	ldr	r3, [pc, #84]	; (8008a4c <HAL_RCC_ClockConfig+0x278>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f023 0207 	bic.w	r2, r3, #7
 80089fc:	4913      	ldr	r1, [pc, #76]	; (8008a4c <HAL_RCC_ClockConfig+0x278>)
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a04:	f7fa f96c 	bl	8002ce0 <HAL_GetTick>
 8008a08:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a0a:	e008      	b.n	8008a1e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008a0c:	f7fa f968 	bl	8002ce0 <HAL_GetTick>
 8008a10:	4602      	mov	r2, r0
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d901      	bls.n	8008a1e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	e012      	b.n	8008a44 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a1e:	4b0b      	ldr	r3, [pc, #44]	; (8008a4c <HAL_RCC_ClockConfig+0x278>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0307 	and.w	r3, r3, #7
 8008a26:	683a      	ldr	r2, [r7, #0]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d1ef      	bne.n	8008a0c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008a2c:	f000 f87e 	bl	8008b2c <HAL_RCC_GetHCLKFreq>
 8008a30:	4603      	mov	r3, r0
 8008a32:	4a07      	ldr	r2, [pc, #28]	; (8008a50 <HAL_RCC_ClockConfig+0x27c>)
 8008a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8008a36:	f7fa f95f 	bl	8002cf8 <HAL_GetTickPrio>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7fa f901 	bl	8002c44 <HAL_InitTick>
 8008a42:	4603      	mov	r3, r0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	58004000 	.word	0x58004000
 8008a50:	2000000c 	.word	0x2000000c

08008a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a54:	b590      	push	{r4, r7, lr}
 8008a56:	b085      	sub	sp, #20
 8008a58:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a5a:	f7ff f9fa 	bl	8007e52 <LL_RCC_GetSysClkSource>
 8008a5e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d10a      	bne.n	8008a7c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008a66:	f7ff f9b6 	bl	8007dd6 <LL_RCC_MSI_GetRange>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	091b      	lsrs	r3, r3, #4
 8008a6e:	f003 030f 	and.w	r3, r3, #15
 8008a72:	4a2b      	ldr	r2, [pc, #172]	; (8008b20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a78:	60fb      	str	r3, [r7, #12]
 8008a7a:	e04b      	b.n	8008b14 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2b04      	cmp	r3, #4
 8008a80:	d102      	bne.n	8008a88 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008a82:	4b28      	ldr	r3, [pc, #160]	; (8008b24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008a84:	60fb      	str	r3, [r7, #12]
 8008a86:	e045      	b.n	8008b14 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2b08      	cmp	r3, #8
 8008a8c:	d10a      	bne.n	8008aa4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008a8e:	f7fe ffcf 	bl	8007a30 <LL_RCC_HSE_IsEnabledDiv2>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d102      	bne.n	8008a9e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008a98:	4b22      	ldr	r3, [pc, #136]	; (8008b24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008a9a:	60fb      	str	r3, [r7, #12]
 8008a9c:	e03a      	b.n	8008b14 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008a9e:	4b22      	ldr	r3, [pc, #136]	; (8008b28 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008aa0:	60fb      	str	r3, [r7, #12]
 8008aa2:	e037      	b.n	8008b14 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008aa4:	f7ff fab9 	bl	800801a <LL_RCC_PLL_GetMainSource>
 8008aa8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d003      	beq.n	8008ab8 <HAL_RCC_GetSysClockFreq+0x64>
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	2b03      	cmp	r3, #3
 8008ab4:	d003      	beq.n	8008abe <HAL_RCC_GetSysClockFreq+0x6a>
 8008ab6:	e00d      	b.n	8008ad4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008ab8:	4b1a      	ldr	r3, [pc, #104]	; (8008b24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008aba:	60bb      	str	r3, [r7, #8]
        break;
 8008abc:	e015      	b.n	8008aea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008abe:	f7fe ffb7 	bl	8007a30 <LL_RCC_HSE_IsEnabledDiv2>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d102      	bne.n	8008ace <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008ac8:	4b16      	ldr	r3, [pc, #88]	; (8008b24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008aca:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008acc:	e00d      	b.n	8008aea <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8008ace:	4b16      	ldr	r3, [pc, #88]	; (8008b28 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008ad0:	60bb      	str	r3, [r7, #8]
        break;
 8008ad2:	e00a      	b.n	8008aea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008ad4:	f7ff f97f 	bl	8007dd6 <LL_RCC_MSI_GetRange>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	091b      	lsrs	r3, r3, #4
 8008adc:	f003 030f 	and.w	r3, r3, #15
 8008ae0:	4a0f      	ldr	r2, [pc, #60]	; (8008b20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ae6:	60bb      	str	r3, [r7, #8]
        break;
 8008ae8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8008aea:	f7ff fa71 	bl	8007fd0 <LL_RCC_PLL_GetN>
 8008aee:	4602      	mov	r2, r0
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	fb03 f402 	mul.w	r4, r3, r2
 8008af6:	f7ff fa84 	bl	8008002 <LL_RCC_PLL_GetDivider>
 8008afa:	4603      	mov	r3, r0
 8008afc:	091b      	lsrs	r3, r3, #4
 8008afe:	3301      	adds	r3, #1
 8008b00:	fbb4 f4f3 	udiv	r4, r4, r3
 8008b04:	f7ff fa71 	bl	8007fea <LL_RCC_PLL_GetR>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	0f5b      	lsrs	r3, r3, #29
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	fbb4 f3f3 	udiv	r3, r4, r3
 8008b12:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8008b14:	68fb      	ldr	r3, [r7, #12]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3714      	adds	r7, #20
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd90      	pop	{r4, r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	080169c4 	.word	0x080169c4
 8008b24:	00f42400 	.word	0x00f42400
 8008b28:	01e84800 	.word	0x01e84800

08008b2c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b2c:	b598      	push	{r3, r4, r7, lr}
 8008b2e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008b30:	f7ff ff90 	bl	8008a54 <HAL_RCC_GetSysClockFreq>
 8008b34:	4604      	mov	r4, r0
 8008b36:	f7ff fa01 	bl	8007f3c <LL_RCC_GetAHBPrescaler>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	091b      	lsrs	r3, r3, #4
 8008b3e:	f003 030f 	and.w	r3, r3, #15
 8008b42:	4a03      	ldr	r2, [pc, #12]	; (8008b50 <HAL_RCC_GetHCLKFreq+0x24>)
 8008b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b48:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	bd98      	pop	{r3, r4, r7, pc}
 8008b50:	08016984 	.word	0x08016984

08008b54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008b54:	b590      	push	{r4, r7, lr}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2bb0      	cmp	r3, #176	; 0xb0
 8008b60:	d903      	bls.n	8008b6a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8008b62:	4b15      	ldr	r3, [pc, #84]	; (8008bb8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b66:	60fb      	str	r3, [r7, #12]
 8008b68:	e007      	b.n	8008b7a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	091b      	lsrs	r3, r3, #4
 8008b6e:	f003 030f 	and.w	r3, r3, #15
 8008b72:	4a11      	ldr	r2, [pc, #68]	; (8008bb8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b78:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8008b7a:	f7ff f9eb 	bl	8007f54 <LL_RCC_GetAHB4Prescaler>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	091b      	lsrs	r3, r3, #4
 8008b82:	f003 030f 	and.w	r3, r3, #15
 8008b86:	4a0d      	ldr	r2, [pc, #52]	; (8008bbc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8008b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b92:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	4a0a      	ldr	r2, [pc, #40]	; (8008bc0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8008b98:	fba2 2303 	umull	r2, r3, r2, r3
 8008b9c:	0c9c      	lsrs	r4, r3, #18
 8008b9e:	f7fe ff29 	bl	80079f4 <HAL_PWREx_GetVoltageRange>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f000 f80c 	bl	8008bc4 <RCC_SetFlashLatency>
 8008bac:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd90      	pop	{r4, r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	080169c4 	.word	0x080169c4
 8008bbc:	08016984 	.word	0x08016984
 8008bc0:	431bde83 	.word	0x431bde83

08008bc4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008bc4:	b590      	push	{r4, r7, lr}
 8008bc6:	b093      	sub	sp, #76	; 0x4c
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8008bce:	4b37      	ldr	r3, [pc, #220]	; (8008cac <RCC_SetFlashLatency+0xe8>)
 8008bd0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8008bd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008bd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8008bda:	4a35      	ldr	r2, [pc, #212]	; (8008cb0 <RCC_SetFlashLatency+0xec>)
 8008bdc:	f107 031c 	add.w	r3, r7, #28
 8008be0:	ca07      	ldmia	r2, {r0, r1, r2}
 8008be2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8008be6:	4b33      	ldr	r3, [pc, #204]	; (8008cb4 <RCC_SetFlashLatency+0xf0>)
 8008be8:	f107 040c 	add.w	r4, r7, #12
 8008bec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008bee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bfc:	d11a      	bne.n	8008c34 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008bfe:	2300      	movs	r3, #0
 8008c00:	643b      	str	r3, [r7, #64]	; 0x40
 8008c02:	e013      	b.n	8008c2c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	3348      	adds	r3, #72	; 0x48
 8008c0a:	443b      	add	r3, r7
 8008c0c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d807      	bhi.n	8008c26 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	3348      	adds	r3, #72	; 0x48
 8008c1c:	443b      	add	r3, r7
 8008c1e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008c22:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8008c24:	e020      	b.n	8008c68 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c28:	3301      	adds	r3, #1
 8008c2a:	643b      	str	r3, [r7, #64]	; 0x40
 8008c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d9e8      	bls.n	8008c04 <RCC_SetFlashLatency+0x40>
 8008c32:	e019      	b.n	8008c68 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008c34:	2300      	movs	r3, #0
 8008c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c38:	e013      	b.n	8008c62 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8008c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	3348      	adds	r3, #72	; 0x48
 8008c40:	443b      	add	r3, r7
 8008c42:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d807      	bhi.n	8008c5c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	3348      	adds	r3, #72	; 0x48
 8008c52:	443b      	add	r3, r7
 8008c54:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008c58:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8008c5a:	e005      	b.n	8008c68 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c5e:	3301      	adds	r3, #1
 8008c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d9e8      	bls.n	8008c3a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8008c68:	4b13      	ldr	r3, [pc, #76]	; (8008cb8 <RCC_SetFlashLatency+0xf4>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f023 0207 	bic.w	r2, r3, #7
 8008c70:	4911      	ldr	r1, [pc, #68]	; (8008cb8 <RCC_SetFlashLatency+0xf4>)
 8008c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c74:	4313      	orrs	r3, r2
 8008c76:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008c78:	f7fa f832 	bl	8002ce0 <HAL_GetTick>
 8008c7c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008c7e:	e008      	b.n	8008c92 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008c80:	f7fa f82e 	bl	8002ce0 <HAL_GetTick>
 8008c84:	4602      	mov	r2, r0
 8008c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d901      	bls.n	8008c92 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e007      	b.n	8008ca2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008c92:	4b09      	ldr	r3, [pc, #36]	; (8008cb8 <RCC_SetFlashLatency+0xf4>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0307 	and.w	r3, r3, #7
 8008c9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d1ef      	bne.n	8008c80 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	374c      	adds	r7, #76	; 0x4c
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd90      	pop	{r4, r7, pc}
 8008caa:	bf00      	nop
 8008cac:	08015ee8 	.word	0x08015ee8
 8008cb0:	08015ef8 	.word	0x08015ef8
 8008cb4:	08015f04 	.word	0x08015f04
 8008cb8:	58004000 	.word	0x58004000

08008cbc <LL_RCC_LSE_IsEnabled>:
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8008cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cc8:	f003 0301 	and.w	r3, r3, #1
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d101      	bne.n	8008cd4 <LL_RCC_LSE_IsEnabled+0x18>
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e000      	b.n	8008cd6 <LL_RCC_LSE_IsEnabled+0x1a>
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <LL_RCC_LSE_IsReady>:
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cec:	f003 0302 	and.w	r3, r3, #2
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d101      	bne.n	8008cf8 <LL_RCC_LSE_IsReady+0x18>
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e000      	b.n	8008cfa <LL_RCC_LSE_IsReady+0x1a>
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <LL_RCC_MSI_EnablePLLMode>:
{
 8008d04:	b480      	push	{r7}
 8008d06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8008d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d12:	f043 0304 	orr.w	r3, r3, #4
 8008d16:	6013      	str	r3, [r2, #0]
}
 8008d18:	bf00      	nop
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <LL_RCC_SetRFWKPClockSource>:
{
 8008d22:	b480      	push	{r7}
 8008d24:	b083      	sub	sp, #12
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8008d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8008d42:	bf00      	nop
 8008d44:	370c      	adds	r7, #12
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr

08008d4e <LL_RCC_SetSMPSClockSource>:
{
 8008d4e:	b480      	push	{r7}
 8008d50:	b083      	sub	sp, #12
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8008d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5c:	f023 0203 	bic.w	r2, r3, #3
 8008d60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008d6a:	bf00      	nop
 8008d6c:	370c      	adds	r7, #12
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr

08008d76 <LL_RCC_SetSMPSPrescaler>:
{
 8008d76:	b480      	push	{r7}
 8008d78:	b083      	sub	sp, #12
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8008d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008d88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008d92:	bf00      	nop
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <LL_RCC_SetUSARTClockSource>:
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b083      	sub	sp, #12
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8008da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dae:	f023 0203 	bic.w	r2, r3, #3
 8008db2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008dbe:	bf00      	nop
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <LL_RCC_SetLPUARTClockSource>:
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b083      	sub	sp, #12
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008dde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008dea:	bf00      	nop
 8008dec:	370c      	adds	r7, #12
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <LL_RCC_SetI2CClockSource>:
{
 8008df6:	b480      	push	{r7}
 8008df8:	b083      	sub	sp, #12
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e02:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	091b      	lsrs	r3, r3, #4
 8008e0a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008e0e:	43db      	mvns	r3, r3
 8008e10:	401a      	ands	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	011b      	lsls	r3, r3, #4
 8008e16:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008e24:	bf00      	nop
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <LL_RCC_SetLPTIMClockSource>:
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	0c1b      	lsrs	r3, r3, #16
 8008e44:	041b      	lsls	r3, r3, #16
 8008e46:	43db      	mvns	r3, r3
 8008e48:	401a      	ands	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	041b      	lsls	r3, r3, #16
 8008e4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e52:	4313      	orrs	r3, r2
 8008e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <LL_RCC_SetSAIClockSource>:
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8008e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008e78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008e84:	bf00      	nop
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <LL_RCC_SetRNGClockSource>:
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ea0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008ea4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008eb0:	bf00      	nop
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <LL_RCC_SetCLK48ClockSource>:
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8008ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ecc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008ed0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <LL_RCC_SetUSBClockSource>:
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f7ff ffe3 	bl	8008ebc <LL_RCC_SetCLK48ClockSource>
}
 8008ef6:	bf00      	nop
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <LL_RCC_SetADCClockSource>:
{
 8008efe:	b480      	push	{r7}
 8008f00:	b083      	sub	sp, #12
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8008f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008f12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008f1e:	bf00      	nop
 8008f20:	370c      	adds	r7, #12
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr

08008f2a <LL_RCC_SetRTCClockSource>:
{
 8008f2a:	b480      	push	{r7}
 8008f2c:	b083      	sub	sp, #12
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008f4a:	bf00      	nop
 8008f4c:	370c      	adds	r7, #12
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <LL_RCC_GetRTCClockSource>:
{
 8008f56:	b480      	push	{r7}
 8008f58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <LL_RCC_ForceBackupDomainReset>:
{
 8008f70:	b480      	push	{r7}
 8008f72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008f88:	bf00      	nop
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008f92:	b480      	push	{r7}
 8008f94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008faa:	bf00      	nop
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <LL_RCC_PLLSAI1_Enable>:
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008fc6:	6013      	str	r3, [r2, #0]
}
 8008fc8:	bf00      	nop
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr

08008fd2 <LL_RCC_PLLSAI1_Disable>:
{
 8008fd2:	b480      	push	{r7}
 8008fd4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fe0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008fe4:	6013      	str	r3, [r2, #0]
}
 8008fe6:	bf00      	nop
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <LL_RCC_PLLSAI1_IsReady>:
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8008ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ffe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009002:	d101      	bne.n	8009008 <LL_RCC_PLLSAI1_IsReady+0x18>
 8009004:	2301      	movs	r3, #1
 8009006:	e000      	b.n	800900a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b088      	sub	sp, #32
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800901c:	2300      	movs	r3, #0
 800901e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8009020:	2300      	movs	r3, #0
 8009022:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800902c:	2b00      	cmp	r3, #0
 800902e:	d034      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009034:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009038:	d021      	beq.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800903a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800903e:	d81b      	bhi.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009040:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009044:	d01d      	beq.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8009046:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800904a:	d815      	bhi.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00b      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8009050:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009054:	d110      	bne.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8009056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009064:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8009066:	e00d      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	3304      	adds	r3, #4
 800906c:	4618      	mov	r0, r3
 800906e:	f000 f94d 	bl	800930c <RCCEx_PLLSAI1_ConfigNP>
 8009072:	4603      	mov	r3, r0
 8009074:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009076:	e005      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	77fb      	strb	r3, [r7, #31]
        break;
 800907c:	e002      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800907e:	bf00      	nop
 8009080:	e000      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8009082:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009084:	7ffb      	ldrb	r3, [r7, #31]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d105      	bne.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908e:	4618      	mov	r0, r3
 8009090:	f7ff fee8 	bl	8008e64 <LL_RCC_SetSAIClockSource>
 8009094:	e001      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009096:	7ffb      	ldrb	r3, [r7, #31]
 8009098:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d046      	beq.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80090a6:	f7ff ff56 	bl	8008f56 <LL_RCC_GetRTCClockSource>
 80090aa:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b0:	69ba      	ldr	r2, [r7, #24]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d03c      	beq.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80090b6:	f7fe fc8d 	bl	80079d4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d105      	bne.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7ff ff30 	bl	8008f2a <LL_RCC_SetRTCClockSource>
 80090ca:	e02e      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80090cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090d4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80090d6:	f7ff ff4b 	bl	8008f70 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80090da:	f7ff ff5a 	bl	8008f92 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e8:	4313      	orrs	r3, r2
 80090ea:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80090ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80090f6:	f7ff fde1 	bl	8008cbc <LL_RCC_LSE_IsEnabled>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d114      	bne.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009100:	f7f9 fdee 	bl	8002ce0 <HAL_GetTick>
 8009104:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8009106:	e00b      	b.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009108:	f7f9 fdea 	bl	8002ce0 <HAL_GetTick>
 800910c:	4602      	mov	r2, r0
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	f241 3288 	movw	r2, #5000	; 0x1388
 8009116:	4293      	cmp	r3, r2
 8009118:	d902      	bls.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	77fb      	strb	r3, [r7, #31]
              break;
 800911e:	e004      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8009120:	f7ff fdde 	bl	8008ce0 <LL_RCC_LSE_IsReady>
 8009124:	4603      	mov	r3, r0
 8009126:	2b01      	cmp	r3, #1
 8009128:	d1ee      	bne.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800912a:	7ffb      	ldrb	r3, [r7, #31]
 800912c:	77bb      	strb	r3, [r7, #30]
 800912e:	e001      	b.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009130:	7ffb      	ldrb	r3, [r7, #31]
 8009132:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 0301 	and.w	r3, r3, #1
 800913c:	2b00      	cmp	r3, #0
 800913e:	d004      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	699b      	ldr	r3, [r3, #24]
 8009144:	4618      	mov	r0, r3
 8009146:	f7ff fe2a 	bl	8008d9e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 0302 	and.w	r3, r3, #2
 8009152:	2b00      	cmp	r3, #0
 8009154:	d004      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	69db      	ldr	r3, [r3, #28]
 800915a:	4618      	mov	r0, r3
 800915c:	f7ff fe35 	bl	8008dca <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0310 	and.w	r3, r3, #16
 8009168:	2b00      	cmp	r3, #0
 800916a:	d004      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009170:	4618      	mov	r0, r3
 8009172:	f7ff fe5d 	bl	8008e30 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 0320 	and.w	r3, r3, #32
 800917e:	2b00      	cmp	r3, #0
 8009180:	d004      	beq.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009186:	4618      	mov	r0, r3
 8009188:	f7ff fe52 	bl	8008e30 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 0304 	and.w	r3, r3, #4
 8009194:	2b00      	cmp	r3, #0
 8009196:	d004      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a1b      	ldr	r3, [r3, #32]
 800919c:	4618      	mov	r0, r3
 800919e:	f7ff fe2a 	bl	8008df6 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 0308 	and.w	r3, r3, #8
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d004      	beq.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7ff fe1f 	bl	8008df6 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d022      	beq.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7ff fe8d 	bl	8008ee8 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091d6:	d107      	bne.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80091d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80091e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80091e6:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091f0:	d10b      	bne.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	3304      	adds	r3, #4
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 f8e3 	bl	80093c2 <RCCEx_PLLSAI1_ConfigNQ>
 80091fc:	4603      	mov	r3, r0
 80091fe:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009200:	7ffb      	ldrb	r3, [r7, #31]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d001      	beq.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8009206:	7ffb      	ldrb	r3, [r7, #31]
 8009208:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009212:	2b00      	cmp	r3, #0
 8009214:	d02b      	beq.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800921e:	d008      	beq.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009228:	d003      	beq.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800922e:	2b00      	cmp	r3, #0
 8009230:	d105      	bne.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009236:	4618      	mov	r0, r3
 8009238:	f7ff fe2a 	bl	8008e90 <LL_RCC_SetRNGClockSource>
 800923c:	e00a      	b.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009246:	60fb      	str	r3, [r7, #12]
 8009248:	2000      	movs	r0, #0
 800924a:	f7ff fe21 	bl	8008e90 <LL_RCC_SetRNGClockSource>
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	f7ff fe34 	bl	8008ebc <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009258:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800925c:	d107      	bne.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800925e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009268:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800926c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009276:	2b00      	cmp	r3, #0
 8009278:	d022      	beq.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800927e:	4618      	mov	r0, r3
 8009280:	f7ff fe3d 	bl	8008efe <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800928c:	d107      	bne.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800928e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800929c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092a6:	d10b      	bne.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	3304      	adds	r3, #4
 80092ac:	4618      	mov	r0, r3
 80092ae:	f000 f8e3 	bl	8009478 <RCCEx_PLLSAI1_ConfigNR>
 80092b2:	4603      	mov	r3, r0
 80092b4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80092b6:	7ffb      	ldrb	r3, [r7, #31]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d001      	beq.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80092bc:	7ffb      	ldrb	r3, [r7, #31]
 80092be:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d004      	beq.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7ff fd26 	bl	8008d22 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d009      	beq.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7ff fd45 	bl	8008d76 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7ff fd2c 	bl	8008d4e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80092f6:	7fbb      	ldrb	r3, [r7, #30]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3720      	adds	r7, #32
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8009304:	f7ff fcfe 	bl	8008d04 <LL_RCC_MSI_EnablePLLMode>
}
 8009308:	bf00      	nop
 800930a:	bd80      	pop	{r7, pc}

0800930c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009314:	2300      	movs	r3, #0
 8009316:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009318:	f7ff fe5b 	bl	8008fd2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800931c:	f7f9 fce0 	bl	8002ce0 <HAL_GetTick>
 8009320:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009322:	e009      	b.n	8009338 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009324:	f7f9 fcdc 	bl	8002ce0 <HAL_GetTick>
 8009328:	4602      	mov	r2, r0
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	2b02      	cmp	r3, #2
 8009330:	d902      	bls.n	8009338 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8009332:	2303      	movs	r3, #3
 8009334:	73fb      	strb	r3, [r7, #15]
      break;
 8009336:	e004      	b.n	8009342 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009338:	f7ff fe5a 	bl	8008ff0 <LL_RCC_PLLSAI1_IsReady>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1f0      	bne.n	8009324 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8009342:	7bfb      	ldrb	r3, [r7, #15]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d137      	bne.n	80093b8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	021b      	lsls	r3, r3, #8
 8009358:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800935c:	4313      	orrs	r3, r2
 800935e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8009360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009372:	4313      	orrs	r3, r2
 8009374:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009376:	f7ff fe1d 	bl	8008fb4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800937a:	f7f9 fcb1 	bl	8002ce0 <HAL_GetTick>
 800937e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009380:	e009      	b.n	8009396 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009382:	f7f9 fcad 	bl	8002ce0 <HAL_GetTick>
 8009386:	4602      	mov	r2, r0
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	1ad3      	subs	r3, r2, r3
 800938c:	2b02      	cmp	r3, #2
 800938e:	d902      	bls.n	8009396 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8009390:	2303      	movs	r3, #3
 8009392:	73fb      	strb	r3, [r7, #15]
        break;
 8009394:	e004      	b.n	80093a0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009396:	f7ff fe2b 	bl	8008ff0 <LL_RCC_PLLSAI1_IsReady>
 800939a:	4603      	mov	r3, r0
 800939c:	2b01      	cmp	r3, #1
 800939e:	d1f0      	bne.n	8009382 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d108      	bne.n	80093b8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80093a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093aa:	691a      	ldr	r2, [r3, #16]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	691b      	ldr	r3, [r3, #16]
 80093b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80093b4:	4313      	orrs	r3, r2
 80093b6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80093b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b084      	sub	sp, #16
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093ca:	2300      	movs	r3, #0
 80093cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80093ce:	f7ff fe00 	bl	8008fd2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80093d2:	f7f9 fc85 	bl	8002ce0 <HAL_GetTick>
 80093d6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80093d8:	e009      	b.n	80093ee <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80093da:	f7f9 fc81 	bl	8002ce0 <HAL_GetTick>
 80093de:	4602      	mov	r2, r0
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d902      	bls.n	80093ee <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	73fb      	strb	r3, [r7, #15]
      break;
 80093ec:	e004      	b.n	80093f8 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80093ee:	f7ff fdff 	bl	8008ff0 <LL_RCC_PLLSAI1_IsReady>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1f0      	bne.n	80093da <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80093f8:	7bfb      	ldrb	r3, [r7, #15]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d137      	bne.n	800946e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80093fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009402:	691b      	ldr	r3, [r3, #16]
 8009404:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	021b      	lsls	r3, r3, #8
 800940e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009412:	4313      	orrs	r3, r2
 8009414:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8009416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009428:	4313      	orrs	r3, r2
 800942a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800942c:	f7ff fdc2 	bl	8008fb4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009430:	f7f9 fc56 	bl	8002ce0 <HAL_GetTick>
 8009434:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009436:	e009      	b.n	800944c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009438:	f7f9 fc52 	bl	8002ce0 <HAL_GetTick>
 800943c:	4602      	mov	r2, r0
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	2b02      	cmp	r3, #2
 8009444:	d902      	bls.n	800944c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8009446:	2303      	movs	r3, #3
 8009448:	73fb      	strb	r3, [r7, #15]
        break;
 800944a:	e004      	b.n	8009456 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800944c:	f7ff fdd0 	bl	8008ff0 <LL_RCC_PLLSAI1_IsReady>
 8009450:	4603      	mov	r3, r0
 8009452:	2b01      	cmp	r3, #1
 8009454:	d1f0      	bne.n	8009438 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8009456:	7bfb      	ldrb	r3, [r7, #15]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d108      	bne.n	800946e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800945c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009460:	691a      	ldr	r2, [r3, #16]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800946a:	4313      	orrs	r3, r2
 800946c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800946e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009480:	2300      	movs	r3, #0
 8009482:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009484:	f7ff fda5 	bl	8008fd2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009488:	f7f9 fc2a 	bl	8002ce0 <HAL_GetTick>
 800948c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800948e:	e009      	b.n	80094a4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009490:	f7f9 fc26 	bl	8002ce0 <HAL_GetTick>
 8009494:	4602      	mov	r2, r0
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	1ad3      	subs	r3, r2, r3
 800949a:	2b02      	cmp	r3, #2
 800949c:	d902      	bls.n	80094a4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800949e:	2303      	movs	r3, #3
 80094a0:	73fb      	strb	r3, [r7, #15]
      break;
 80094a2:	e004      	b.n	80094ae <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80094a4:	f7ff fda4 	bl	8008ff0 <LL_RCC_PLLSAI1_IsReady>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1f0      	bne.n	8009490 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80094ae:	7bfb      	ldrb	r3, [r7, #15]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d137      	bne.n	8009524 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80094b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	021b      	lsls	r3, r3, #8
 80094c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094c8:	4313      	orrs	r3, r2
 80094ca:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80094cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094de:	4313      	orrs	r3, r2
 80094e0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80094e2:	f7ff fd67 	bl	8008fb4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094e6:	f7f9 fbfb 	bl	8002ce0 <HAL_GetTick>
 80094ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80094ec:	e009      	b.n	8009502 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80094ee:	f7f9 fbf7 	bl	8002ce0 <HAL_GetTick>
 80094f2:	4602      	mov	r2, r0
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	d902      	bls.n	8009502 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80094fc:	2303      	movs	r3, #3
 80094fe:	73fb      	strb	r3, [r7, #15]
        break;
 8009500:	e004      	b.n	800950c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009502:	f7ff fd75 	bl	8008ff0 <LL_RCC_PLLSAI1_IsReady>
 8009506:	4603      	mov	r3, r0
 8009508:	2b01      	cmp	r3, #1
 800950a:	d1f0      	bne.n	80094ee <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800950c:	7bfb      	ldrb	r3, [r7, #15]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d108      	bne.n	8009524 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009516:	691a      	ldr	r2, [r3, #16]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009520:	4313      	orrs	r3, r2
 8009522:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009524:	7bfb      	ldrb	r3, [r7, #15]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
	...

08009530 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d101      	bne.n	8009542 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	e09f      	b.n	8009682 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009548:	b2db      	uxtb	r3, r3
 800954a:	2b00      	cmp	r3, #0
 800954c:	d106      	bne.n	800955c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f7f9 f92a 	bl	80027b0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2202      	movs	r2, #2
 8009560:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009564:	4b49      	ldr	r3, [pc, #292]	; (800968c <HAL_RTC_Init+0x15c>)
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	f003 0310 	and.w	r3, r3, #16
 800956c:	2b10      	cmp	r3, #16
 800956e:	d07e      	beq.n	800966e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	22ca      	movs	r2, #202	; 0xca
 8009576:	625a      	str	r2, [r3, #36]	; 0x24
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2253      	movs	r2, #83	; 0x53
 800957e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f8ab 	bl	80096dc <RTC_EnterInitMode>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00a      	beq.n	80095a2 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	22ff      	movs	r2, #255	; 0xff
 8009592:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2204      	movs	r2, #4
 8009598:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	73fb      	strb	r3, [r7, #15]
 80095a0:	e067      	b.n	8009672 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	6812      	ldr	r2, [r2, #0]
 80095ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80095b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095b4:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	6899      	ldr	r1, [r3, #8]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	685a      	ldr	r2, [r3, #4]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	431a      	orrs	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	431a      	orrs	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	430a      	orrs	r2, r1
 80095d2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	68d2      	ldr	r2, [r2, #12]
 80095dc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	6919      	ldr	r1, [r3, #16]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	041a      	lsls	r2, r3, #16
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	430a      	orrs	r2, r1
 80095f0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68da      	ldr	r2, [r3, #12]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009600:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f022 0203 	bic.w	r2, r2, #3
 8009610:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	69da      	ldr	r2, [r3, #28]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	695b      	ldr	r3, [r3, #20]
 8009620:	431a      	orrs	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	430a      	orrs	r2, r1
 8009628:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	f003 0320 	and.w	r3, r3, #32
 8009634:	2b00      	cmp	r3, #0
 8009636:	d113      	bne.n	8009660 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 f829 	bl	8009690 <HAL_RTC_WaitForSynchro>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00d      	beq.n	8009660 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	22ff      	movs	r2, #255	; 0xff
 800964a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2204      	movs	r2, #4
 8009650:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	e010      	b.n	8009682 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	22ff      	movs	r2, #255	; 0xff
 8009666:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	73fb      	strb	r3, [r7, #15]
 800966c:	e001      	b.n	8009672 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009672:	7bfb      	ldrb	r3, [r7, #15]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d103      	bne.n	8009680 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8009680:	7bfb      	ldrb	r3, [r7, #15]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	40002800 	.word	0x40002800

08009690 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68da      	ldr	r2, [r3, #12]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80096a6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80096a8:	f7f9 fb1a 	bl	8002ce0 <HAL_GetTick>
 80096ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80096ae:	e009      	b.n	80096c4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80096b0:	f7f9 fb16 	bl	8002ce0 <HAL_GetTick>
 80096b4:	4602      	mov	r2, r0
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	1ad3      	subs	r3, r2, r3
 80096ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096be:	d901      	bls.n	80096c4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80096c0:	2303      	movs	r3, #3
 80096c2:	e007      	b.n	80096d4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	f003 0320 	and.w	r3, r3, #32
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d0ee      	beq.n	80096b0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d119      	bne.n	8009726 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f04f 32ff 	mov.w	r2, #4294967295
 80096fa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80096fc:	f7f9 faf0 	bl	8002ce0 <HAL_GetTick>
 8009700:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009702:	e009      	b.n	8009718 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009704:	f7f9 faec 	bl	8002ce0 <HAL_GetTick>
 8009708:	4602      	mov	r2, r0
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	1ad3      	subs	r3, r2, r3
 800970e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009712:	d901      	bls.n	8009718 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8009714:	2303      	movs	r3, #3
 8009716:	e007      	b.n	8009728 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009722:	2b00      	cmp	r3, #0
 8009724:	d0ee      	beq.n	8009704 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009742:	2b01      	cmp	r3, #1
 8009744:	d101      	bne.n	800974a <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8009746:	2302      	movs	r3, #2
 8009748:	e089      	b.n	800985e <HAL_RTCEx_SetWakeUpTimer+0x12e>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2202      	movs	r2, #2
 8009756:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	22ca      	movs	r2, #202	; 0xca
 8009760:	625a      	str	r2, [r3, #36]	; 0x24
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2253      	movs	r2, #83	; 0x53
 8009768:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009774:	2b00      	cmp	r3, #0
 8009776:	d020      	beq.n	80097ba <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 8009778:	f7f9 fab2 	bl	8002ce0 <HAL_GetTick>
 800977c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800977e:	e015      	b.n	80097ac <HAL_RTCEx_SetWakeUpTimer+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009780:	f7f9 faae 	bl	8002ce0 <HAL_GetTick>
 8009784:	4602      	mov	r2, r0
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800978e:	d90d      	bls.n	80097ac <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	22ff      	movs	r2, #255	; 0xff
 8009796:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2203      	movs	r2, #3
 800979c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80097a8:	2303      	movs	r3, #3
 80097aa:	e058      	b.n	800985e <HAL_RTCEx_SetWakeUpTimer+0x12e>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	f003 0304 	and.w	r3, r3, #4
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1e2      	bne.n	8009780 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	689a      	ldr	r2, [r3, #8]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097c8:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80097ca:	f7f9 fa89 	bl	8002ce0 <HAL_GetTick>
 80097ce:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80097d0:	e015      	b.n	80097fe <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80097d2:	f7f9 fa85 	bl	8002ce0 <HAL_GetTick>
 80097d6:	4602      	mov	r2, r0
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	1ad3      	subs	r3, r2, r3
 80097dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097e0:	d90d      	bls.n	80097fe <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	22ff      	movs	r2, #255	; 0xff
 80097e8:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2203      	movs	r2, #3
 80097ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80097fa:	2303      	movs	r3, #3
 80097fc:	e02f      	b.n	800985e <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	f003 0304 	and.w	r3, r3, #4
 8009808:	2b00      	cmp	r3, #0
 800980a:	d0e2      	beq.n	80097d2 <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	689a      	ldr	r2, [r3, #8]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f022 0207 	bic.w	r2, r2, #7
 800981a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	6899      	ldr	r1, [r3, #8]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	430a      	orrs	r2, r1
 800982a:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68ba      	ldr	r2, [r7, #8]
 8009832:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	689a      	ldr	r2, [r3, #8]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009842:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	22ff      	movs	r2, #255	; 0xff
 800984a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2201      	movs	r2, #1
 8009850:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2200      	movs	r2, #0
 8009858:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3718      	adds	r7, #24
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b082      	sub	sp, #8
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d101      	bne.n	8009878 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	e049      	b.n	800990c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800987e:	b2db      	uxtb	r3, r3
 8009880:	2b00      	cmp	r3, #0
 8009882:	d106      	bne.n	8009892 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f7f8 ffbb 	bl	8002808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2202      	movs	r2, #2
 8009896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	3304      	adds	r3, #4
 80098a2:	4619      	mov	r1, r3
 80098a4:	4610      	mov	r0, r2
 80098a6:	f000 fbd7 	bl	800a058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2201      	movs	r2, #1
 80098ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2201      	movs	r2, #1
 80098b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2201      	movs	r2, #1
 80098be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2201      	movs	r2, #1
 80098c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2201      	movs	r2, #1
 80098ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2201      	movs	r2, #1
 80098d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2201      	movs	r2, #1
 80098de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2201      	movs	r2, #1
 80098e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2201      	movs	r2, #1
 80098ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2201      	movs	r2, #1
 80098f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2201      	movs	r2, #1
 8009906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3708      	adds	r7, #8
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e049      	b.n	80099ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800992c:	b2db      	uxtb	r3, r3
 800992e:	2b00      	cmp	r3, #0
 8009930:	d106      	bne.n	8009940 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 f841 	bl	80099c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2202      	movs	r2, #2
 8009944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	3304      	adds	r3, #4
 8009950:	4619      	mov	r1, r3
 8009952:	4610      	mov	r0, r2
 8009954:	f000 fb80 	bl	800a058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80099c2:	b480      	push	{r7}
 80099c4:	b083      	sub	sp, #12
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80099ca:	bf00      	nop
 80099cc:	370c      	adds	r7, #12
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr
	...

080099d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d109      	bne.n	80099fc <HAL_TIM_PWM_Start+0x24>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	bf14      	ite	ne
 80099f4:	2301      	movne	r3, #1
 80099f6:	2300      	moveq	r3, #0
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	e03c      	b.n	8009a76 <HAL_TIM_PWM_Start+0x9e>
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	2b04      	cmp	r3, #4
 8009a00:	d109      	bne.n	8009a16 <HAL_TIM_PWM_Start+0x3e>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	bf14      	ite	ne
 8009a0e:	2301      	movne	r3, #1
 8009a10:	2300      	moveq	r3, #0
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	e02f      	b.n	8009a76 <HAL_TIM_PWM_Start+0x9e>
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	2b08      	cmp	r3, #8
 8009a1a:	d109      	bne.n	8009a30 <HAL_TIM_PWM_Start+0x58>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	bf14      	ite	ne
 8009a28:	2301      	movne	r3, #1
 8009a2a:	2300      	moveq	r3, #0
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	e022      	b.n	8009a76 <HAL_TIM_PWM_Start+0x9e>
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	2b0c      	cmp	r3, #12
 8009a34:	d109      	bne.n	8009a4a <HAL_TIM_PWM_Start+0x72>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	bf14      	ite	ne
 8009a42:	2301      	movne	r3, #1
 8009a44:	2300      	moveq	r3, #0
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	e015      	b.n	8009a76 <HAL_TIM_PWM_Start+0x9e>
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	2b10      	cmp	r3, #16
 8009a4e:	d109      	bne.n	8009a64 <HAL_TIM_PWM_Start+0x8c>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	bf14      	ite	ne
 8009a5c:	2301      	movne	r3, #1
 8009a5e:	2300      	moveq	r3, #0
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	e008      	b.n	8009a76 <HAL_TIM_PWM_Start+0x9e>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	bf14      	ite	ne
 8009a70:	2301      	movne	r3, #1
 8009a72:	2300      	moveq	r3, #0
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d001      	beq.n	8009a7e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e079      	b.n	8009b72 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d104      	bne.n	8009a8e <HAL_TIM_PWM_Start+0xb6>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2202      	movs	r2, #2
 8009a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a8c:	e023      	b.n	8009ad6 <HAL_TIM_PWM_Start+0xfe>
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	2b04      	cmp	r3, #4
 8009a92:	d104      	bne.n	8009a9e <HAL_TIM_PWM_Start+0xc6>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2202      	movs	r2, #2
 8009a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a9c:	e01b      	b.n	8009ad6 <HAL_TIM_PWM_Start+0xfe>
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	2b08      	cmp	r3, #8
 8009aa2:	d104      	bne.n	8009aae <HAL_TIM_PWM_Start+0xd6>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2202      	movs	r2, #2
 8009aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009aac:	e013      	b.n	8009ad6 <HAL_TIM_PWM_Start+0xfe>
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	2b0c      	cmp	r3, #12
 8009ab2:	d104      	bne.n	8009abe <HAL_TIM_PWM_Start+0xe6>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2202      	movs	r2, #2
 8009ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009abc:	e00b      	b.n	8009ad6 <HAL_TIM_PWM_Start+0xfe>
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	2b10      	cmp	r3, #16
 8009ac2:	d104      	bne.n	8009ace <HAL_TIM_PWM_Start+0xf6>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2202      	movs	r2, #2
 8009ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009acc:	e003      	b.n	8009ad6 <HAL_TIM_PWM_Start+0xfe>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2202      	movs	r2, #2
 8009ad2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2201      	movs	r2, #1
 8009adc:	6839      	ldr	r1, [r7, #0]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 fe38 	bl	800a754 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a24      	ldr	r2, [pc, #144]	; (8009b7c <HAL_TIM_PWM_Start+0x1a4>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d009      	beq.n	8009b02 <HAL_TIM_PWM_Start+0x12a>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a23      	ldr	r2, [pc, #140]	; (8009b80 <HAL_TIM_PWM_Start+0x1a8>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d004      	beq.n	8009b02 <HAL_TIM_PWM_Start+0x12a>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a21      	ldr	r2, [pc, #132]	; (8009b84 <HAL_TIM_PWM_Start+0x1ac>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d101      	bne.n	8009b06 <HAL_TIM_PWM_Start+0x12e>
 8009b02:	2301      	movs	r3, #1
 8009b04:	e000      	b.n	8009b08 <HAL_TIM_PWM_Start+0x130>
 8009b06:	2300      	movs	r3, #0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d007      	beq.n	8009b1c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b1a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a16      	ldr	r2, [pc, #88]	; (8009b7c <HAL_TIM_PWM_Start+0x1a4>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d004      	beq.n	8009b30 <HAL_TIM_PWM_Start+0x158>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b2e:	d115      	bne.n	8009b5c <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	689a      	ldr	r2, [r3, #8]
 8009b36:	4b14      	ldr	r3, [pc, #80]	; (8009b88 <HAL_TIM_PWM_Start+0x1b0>)
 8009b38:	4013      	ands	r3, r2
 8009b3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2b06      	cmp	r3, #6
 8009b40:	d015      	beq.n	8009b6e <HAL_TIM_PWM_Start+0x196>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b48:	d011      	beq.n	8009b6e <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f042 0201 	orr.w	r2, r2, #1
 8009b58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b5a:	e008      	b.n	8009b6e <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f042 0201 	orr.w	r2, r2, #1
 8009b6a:	601a      	str	r2, [r3, #0]
 8009b6c:	e000      	b.n	8009b70 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	40012c00 	.word	0x40012c00
 8009b80:	40014400 	.word	0x40014400
 8009b84:	40014800 	.word	0x40014800
 8009b88:	00010007 	.word	0x00010007

08009b8c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	6839      	ldr	r1, [r7, #0]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 fdd8 	bl	800a754 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a39      	ldr	r2, [pc, #228]	; (8009c90 <HAL_TIM_PWM_Stop+0x104>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d009      	beq.n	8009bc2 <HAL_TIM_PWM_Stop+0x36>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a38      	ldr	r2, [pc, #224]	; (8009c94 <HAL_TIM_PWM_Stop+0x108>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d004      	beq.n	8009bc2 <HAL_TIM_PWM_Stop+0x36>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a36      	ldr	r2, [pc, #216]	; (8009c98 <HAL_TIM_PWM_Stop+0x10c>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d101      	bne.n	8009bc6 <HAL_TIM_PWM_Stop+0x3a>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e000      	b.n	8009bc8 <HAL_TIM_PWM_Stop+0x3c>
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d017      	beq.n	8009bfc <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6a1a      	ldr	r2, [r3, #32]
 8009bd2:	f241 1311 	movw	r3, #4369	; 0x1111
 8009bd6:	4013      	ands	r3, r2
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d10f      	bne.n	8009bfc <HAL_TIM_PWM_Stop+0x70>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	6a1a      	ldr	r2, [r3, #32]
 8009be2:	f240 4344 	movw	r3, #1092	; 0x444
 8009be6:	4013      	ands	r3, r2
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d107      	bne.n	8009bfc <HAL_TIM_PWM_Stop+0x70>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009bfa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	6a1a      	ldr	r2, [r3, #32]
 8009c02:	f241 1311 	movw	r3, #4369	; 0x1111
 8009c06:	4013      	ands	r3, r2
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d10f      	bne.n	8009c2c <HAL_TIM_PWM_Stop+0xa0>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6a1a      	ldr	r2, [r3, #32]
 8009c12:	f240 4344 	movw	r3, #1092	; 0x444
 8009c16:	4013      	ands	r3, r2
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d107      	bne.n	8009c2c <HAL_TIM_PWM_Stop+0xa0>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f022 0201 	bic.w	r2, r2, #1
 8009c2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d104      	bne.n	8009c3c <HAL_TIM_PWM_Stop+0xb0>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c3a:	e023      	b.n	8009c84 <HAL_TIM_PWM_Stop+0xf8>
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	2b04      	cmp	r3, #4
 8009c40:	d104      	bne.n	8009c4c <HAL_TIM_PWM_Stop+0xc0>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2201      	movs	r2, #1
 8009c46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c4a:	e01b      	b.n	8009c84 <HAL_TIM_PWM_Stop+0xf8>
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	2b08      	cmp	r3, #8
 8009c50:	d104      	bne.n	8009c5c <HAL_TIM_PWM_Stop+0xd0>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2201      	movs	r2, #1
 8009c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c5a:	e013      	b.n	8009c84 <HAL_TIM_PWM_Stop+0xf8>
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	2b0c      	cmp	r3, #12
 8009c60:	d104      	bne.n	8009c6c <HAL_TIM_PWM_Stop+0xe0>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2201      	movs	r2, #1
 8009c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c6a:	e00b      	b.n	8009c84 <HAL_TIM_PWM_Stop+0xf8>
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	2b10      	cmp	r3, #16
 8009c70:	d104      	bne.n	8009c7c <HAL_TIM_PWM_Stop+0xf0>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2201      	movs	r2, #1
 8009c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c7a:	e003      	b.n	8009c84 <HAL_TIM_PWM_Stop+0xf8>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3708      	adds	r7, #8
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	40012c00 	.word	0x40012c00
 8009c94:	40014400 	.word	0x40014400
 8009c98:	40014800 	.word	0x40014800

08009c9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b086      	sub	sp, #24
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d101      	bne.n	8009cba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009cb6:	2302      	movs	r3, #2
 8009cb8:	e0ff      	b.n	8009eba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2b14      	cmp	r3, #20
 8009cc6:	f200 80f0 	bhi.w	8009eaa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009cca:	a201      	add	r2, pc, #4	; (adr r2, 8009cd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd0:	08009d25 	.word	0x08009d25
 8009cd4:	08009eab 	.word	0x08009eab
 8009cd8:	08009eab 	.word	0x08009eab
 8009cdc:	08009eab 	.word	0x08009eab
 8009ce0:	08009d65 	.word	0x08009d65
 8009ce4:	08009eab 	.word	0x08009eab
 8009ce8:	08009eab 	.word	0x08009eab
 8009cec:	08009eab 	.word	0x08009eab
 8009cf0:	08009da7 	.word	0x08009da7
 8009cf4:	08009eab 	.word	0x08009eab
 8009cf8:	08009eab 	.word	0x08009eab
 8009cfc:	08009eab 	.word	0x08009eab
 8009d00:	08009de7 	.word	0x08009de7
 8009d04:	08009eab 	.word	0x08009eab
 8009d08:	08009eab 	.word	0x08009eab
 8009d0c:	08009eab 	.word	0x08009eab
 8009d10:	08009e29 	.word	0x08009e29
 8009d14:	08009eab 	.word	0x08009eab
 8009d18:	08009eab 	.word	0x08009eab
 8009d1c:	08009eab 	.word	0x08009eab
 8009d20:	08009e69 	.word	0x08009e69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68b9      	ldr	r1, [r7, #8]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f000 f9f8 	bl	800a120 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	699a      	ldr	r2, [r3, #24]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f042 0208 	orr.w	r2, r2, #8
 8009d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	699a      	ldr	r2, [r3, #24]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f022 0204 	bic.w	r2, r2, #4
 8009d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6999      	ldr	r1, [r3, #24]
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	691a      	ldr	r2, [r3, #16]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	430a      	orrs	r2, r1
 8009d60:	619a      	str	r2, [r3, #24]
      break;
 8009d62:	e0a5      	b.n	8009eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68b9      	ldr	r1, [r7, #8]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f000 fa54 	bl	800a218 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	699a      	ldr	r2, [r3, #24]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	699a      	ldr	r2, [r3, #24]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	6999      	ldr	r1, [r3, #24]
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	021a      	lsls	r2, r3, #8
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	430a      	orrs	r2, r1
 8009da2:	619a      	str	r2, [r3, #24]
      break;
 8009da4:	e084      	b.n	8009eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	68b9      	ldr	r1, [r7, #8]
 8009dac:	4618      	mov	r0, r3
 8009dae:	f000 faad 	bl	800a30c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	69da      	ldr	r2, [r3, #28]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f042 0208 	orr.w	r2, r2, #8
 8009dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	69da      	ldr	r2, [r3, #28]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f022 0204 	bic.w	r2, r2, #4
 8009dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	69d9      	ldr	r1, [r3, #28]
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	691a      	ldr	r2, [r3, #16]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	430a      	orrs	r2, r1
 8009de2:	61da      	str	r2, [r3, #28]
      break;
 8009de4:	e064      	b.n	8009eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68b9      	ldr	r1, [r7, #8]
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 fb05 	bl	800a3fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	69da      	ldr	r2, [r3, #28]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	69da      	ldr	r2, [r3, #28]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	69d9      	ldr	r1, [r3, #28]
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	691b      	ldr	r3, [r3, #16]
 8009e1c:	021a      	lsls	r2, r3, #8
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	430a      	orrs	r2, r1
 8009e24:	61da      	str	r2, [r3, #28]
      break;
 8009e26:	e043      	b.n	8009eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68b9      	ldr	r1, [r7, #8]
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f000 fb42 	bl	800a4b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f042 0208 	orr.w	r2, r2, #8
 8009e42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f022 0204 	bic.w	r2, r2, #4
 8009e52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	691a      	ldr	r2, [r3, #16]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	430a      	orrs	r2, r1
 8009e64:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009e66:	e023      	b.n	8009eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68b9      	ldr	r1, [r7, #8]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f000 fb7a 	bl	800a568 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	021a      	lsls	r2, r3, #8
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	430a      	orrs	r2, r1
 8009ea6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009ea8:	e002      	b.n	8009eb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	75fb      	strb	r3, [r7, #23]
      break;
 8009eae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3718      	adds	r7, #24
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop

08009ec4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d101      	bne.n	8009ee0 <HAL_TIM_ConfigClockSource+0x1c>
 8009edc:	2302      	movs	r3, #2
 8009ede:	e0b6      	b.n	800a04e <HAL_TIM_ConfigClockSource+0x18a>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2202      	movs	r2, #2
 8009eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009efe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009f02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f1c:	d03e      	beq.n	8009f9c <HAL_TIM_ConfigClockSource+0xd8>
 8009f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f22:	f200 8087 	bhi.w	800a034 <HAL_TIM_ConfigClockSource+0x170>
 8009f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f2a:	f000 8086 	beq.w	800a03a <HAL_TIM_ConfigClockSource+0x176>
 8009f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f32:	d87f      	bhi.n	800a034 <HAL_TIM_ConfigClockSource+0x170>
 8009f34:	2b70      	cmp	r3, #112	; 0x70
 8009f36:	d01a      	beq.n	8009f6e <HAL_TIM_ConfigClockSource+0xaa>
 8009f38:	2b70      	cmp	r3, #112	; 0x70
 8009f3a:	d87b      	bhi.n	800a034 <HAL_TIM_ConfigClockSource+0x170>
 8009f3c:	2b60      	cmp	r3, #96	; 0x60
 8009f3e:	d050      	beq.n	8009fe2 <HAL_TIM_ConfigClockSource+0x11e>
 8009f40:	2b60      	cmp	r3, #96	; 0x60
 8009f42:	d877      	bhi.n	800a034 <HAL_TIM_ConfigClockSource+0x170>
 8009f44:	2b50      	cmp	r3, #80	; 0x50
 8009f46:	d03c      	beq.n	8009fc2 <HAL_TIM_ConfigClockSource+0xfe>
 8009f48:	2b50      	cmp	r3, #80	; 0x50
 8009f4a:	d873      	bhi.n	800a034 <HAL_TIM_ConfigClockSource+0x170>
 8009f4c:	2b40      	cmp	r3, #64	; 0x40
 8009f4e:	d058      	beq.n	800a002 <HAL_TIM_ConfigClockSource+0x13e>
 8009f50:	2b40      	cmp	r3, #64	; 0x40
 8009f52:	d86f      	bhi.n	800a034 <HAL_TIM_ConfigClockSource+0x170>
 8009f54:	2b30      	cmp	r3, #48	; 0x30
 8009f56:	d064      	beq.n	800a022 <HAL_TIM_ConfigClockSource+0x15e>
 8009f58:	2b30      	cmp	r3, #48	; 0x30
 8009f5a:	d86b      	bhi.n	800a034 <HAL_TIM_ConfigClockSource+0x170>
 8009f5c:	2b20      	cmp	r3, #32
 8009f5e:	d060      	beq.n	800a022 <HAL_TIM_ConfigClockSource+0x15e>
 8009f60:	2b20      	cmp	r3, #32
 8009f62:	d867      	bhi.n	800a034 <HAL_TIM_ConfigClockSource+0x170>
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d05c      	beq.n	800a022 <HAL_TIM_ConfigClockSource+0x15e>
 8009f68:	2b10      	cmp	r3, #16
 8009f6a:	d05a      	beq.n	800a022 <HAL_TIM_ConfigClockSource+0x15e>
 8009f6c:	e062      	b.n	800a034 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6818      	ldr	r0, [r3, #0]
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	6899      	ldr	r1, [r3, #8]
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	685a      	ldr	r2, [r3, #4]
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	f000 fbc9 	bl	800a714 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009f90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	68ba      	ldr	r2, [r7, #8]
 8009f98:	609a      	str	r2, [r3, #8]
      break;
 8009f9a:	e04f      	b.n	800a03c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6818      	ldr	r0, [r3, #0]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	6899      	ldr	r1, [r3, #8]
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	685a      	ldr	r2, [r3, #4]
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	f000 fbb2 	bl	800a714 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	689a      	ldr	r2, [r3, #8]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009fbe:	609a      	str	r2, [r3, #8]
      break;
 8009fc0:	e03c      	b.n	800a03c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6818      	ldr	r0, [r3, #0]
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	6859      	ldr	r1, [r3, #4]
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	f000 fb24 	bl	800a61c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2150      	movs	r1, #80	; 0x50
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f000 fb7d 	bl	800a6da <TIM_ITRx_SetConfig>
      break;
 8009fe0:	e02c      	b.n	800a03c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6818      	ldr	r0, [r3, #0]
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	6859      	ldr	r1, [r3, #4]
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	461a      	mov	r2, r3
 8009ff0:	f000 fb43 	bl	800a67a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2160      	movs	r1, #96	; 0x60
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f000 fb6d 	bl	800a6da <TIM_ITRx_SetConfig>
      break;
 800a000:	e01c      	b.n	800a03c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6818      	ldr	r0, [r3, #0]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	6859      	ldr	r1, [r3, #4]
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	461a      	mov	r2, r3
 800a010:	f000 fb04 	bl	800a61c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2140      	movs	r1, #64	; 0x40
 800a01a:	4618      	mov	r0, r3
 800a01c:	f000 fb5d 	bl	800a6da <TIM_ITRx_SetConfig>
      break;
 800a020:	e00c      	b.n	800a03c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4619      	mov	r1, r3
 800a02c:	4610      	mov	r0, r2
 800a02e:	f000 fb54 	bl	800a6da <TIM_ITRx_SetConfig>
      break;
 800a032:	e003      	b.n	800a03c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	73fb      	strb	r3, [r7, #15]
      break;
 800a038:	e000      	b.n	800a03c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a03a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2201      	movs	r2, #1
 800a040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a04c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
	...

0800a058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	4a2a      	ldr	r2, [pc, #168]	; (800a114 <TIM_Base_SetConfig+0xbc>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d003      	beq.n	800a078 <TIM_Base_SetConfig+0x20>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a076:	d108      	bne.n	800a08a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a07e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	4313      	orrs	r3, r2
 800a088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4a21      	ldr	r2, [pc, #132]	; (800a114 <TIM_Base_SetConfig+0xbc>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d00b      	beq.n	800a0aa <TIM_Base_SetConfig+0x52>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a098:	d007      	beq.n	800a0aa <TIM_Base_SetConfig+0x52>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a1e      	ldr	r2, [pc, #120]	; (800a118 <TIM_Base_SetConfig+0xc0>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d003      	beq.n	800a0aa <TIM_Base_SetConfig+0x52>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a1d      	ldr	r2, [pc, #116]	; (800a11c <TIM_Base_SetConfig+0xc4>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d108      	bne.n	800a0bc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	695b      	ldr	r3, [r3, #20]
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	689a      	ldr	r2, [r3, #8]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a0c      	ldr	r2, [pc, #48]	; (800a114 <TIM_Base_SetConfig+0xbc>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d007      	beq.n	800a0f8 <TIM_Base_SetConfig+0xa0>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a0b      	ldr	r2, [pc, #44]	; (800a118 <TIM_Base_SetConfig+0xc0>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d003      	beq.n	800a0f8 <TIM_Base_SetConfig+0xa0>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a0a      	ldr	r2, [pc, #40]	; (800a11c <TIM_Base_SetConfig+0xc4>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d103      	bne.n	800a100 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	691a      	ldr	r2, [r3, #16]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	615a      	str	r2, [r3, #20]
}
 800a106:	bf00      	nop
 800a108:	3714      	adds	r7, #20
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	40012c00 	.word	0x40012c00
 800a118:	40014400 	.word	0x40014400
 800a11c:	40014800 	.word	0x40014800

0800a120 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a120:	b480      	push	{r7}
 800a122:	b087      	sub	sp, #28
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a1b      	ldr	r3, [r3, #32]
 800a12e:	f023 0201 	bic.w	r2, r3, #1
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a1b      	ldr	r3, [r3, #32]
 800a13a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a14e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f023 0303 	bic.w	r3, r3, #3
 800a15a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	4313      	orrs	r3, r2
 800a164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	f023 0302 	bic.w	r3, r3, #2
 800a16c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	697a      	ldr	r2, [r7, #20]
 800a174:	4313      	orrs	r3, r2
 800a176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a24      	ldr	r2, [pc, #144]	; (800a20c <TIM_OC1_SetConfig+0xec>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d007      	beq.n	800a190 <TIM_OC1_SetConfig+0x70>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a23      	ldr	r2, [pc, #140]	; (800a210 <TIM_OC1_SetConfig+0xf0>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d003      	beq.n	800a190 <TIM_OC1_SetConfig+0x70>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a22      	ldr	r2, [pc, #136]	; (800a214 <TIM_OC1_SetConfig+0xf4>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d10c      	bne.n	800a1aa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	f023 0308 	bic.w	r3, r3, #8
 800a196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	697a      	ldr	r2, [r7, #20]
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	f023 0304 	bic.w	r3, r3, #4
 800a1a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a17      	ldr	r2, [pc, #92]	; (800a20c <TIM_OC1_SetConfig+0xec>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d007      	beq.n	800a1c2 <TIM_OC1_SetConfig+0xa2>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a17      	ldr	r2, [pc, #92]	; (800a214 <TIM_OC1_SetConfig+0xf4>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d003      	beq.n	800a1c2 <TIM_OC1_SetConfig+0xa2>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4a14      	ldr	r2, [pc, #80]	; (800a210 <TIM_OC1_SetConfig+0xf0>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d111      	bne.n	800a1e6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	695b      	ldr	r3, [r3, #20]
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	699b      	ldr	r3, [r3, #24]
 800a1e0:	693a      	ldr	r2, [r7, #16]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	693a      	ldr	r2, [r7, #16]
 800a1ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	685a      	ldr	r2, [r3, #4]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	621a      	str	r2, [r3, #32]
}
 800a200:	bf00      	nop
 800a202:	371c      	adds	r7, #28
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	40012c00 	.word	0x40012c00
 800a210:	40014800 	.word	0x40014800
 800a214:	40014400 	.word	0x40014400

0800a218 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a218:	b480      	push	{r7}
 800a21a:	b087      	sub	sp, #28
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a1b      	ldr	r3, [r3, #32]
 800a226:	f023 0210 	bic.w	r2, r3, #16
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a1b      	ldr	r3, [r3, #32]
 800a232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	699b      	ldr	r3, [r3, #24]
 800a23e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a24a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	021b      	lsls	r3, r3, #8
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	f023 0320 	bic.w	r3, r3, #32
 800a266:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	011b      	lsls	r3, r3, #4
 800a26e:	697a      	ldr	r2, [r7, #20]
 800a270:	4313      	orrs	r3, r2
 800a272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4a22      	ldr	r2, [pc, #136]	; (800a300 <TIM_OC2_SetConfig+0xe8>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d10d      	bne.n	800a298 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	011b      	lsls	r3, r3, #4
 800a28a:	697a      	ldr	r2, [r7, #20]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a296:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	4a19      	ldr	r2, [pc, #100]	; (800a300 <TIM_OC2_SetConfig+0xe8>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d007      	beq.n	800a2b0 <TIM_OC2_SetConfig+0x98>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a18      	ldr	r2, [pc, #96]	; (800a304 <TIM_OC2_SetConfig+0xec>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d003      	beq.n	800a2b0 <TIM_OC2_SetConfig+0x98>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4a17      	ldr	r2, [pc, #92]	; (800a308 <TIM_OC2_SetConfig+0xf0>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d113      	bne.n	800a2d8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	695b      	ldr	r3, [r3, #20]
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	693a      	ldr	r2, [r7, #16]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	699b      	ldr	r3, [r3, #24]
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	693a      	ldr	r2, [r7, #16]
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	693a      	ldr	r2, [r7, #16]
 800a2dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	685a      	ldr	r2, [r3, #4]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	697a      	ldr	r2, [r7, #20]
 800a2f0:	621a      	str	r2, [r3, #32]
}
 800a2f2:	bf00      	nop
 800a2f4:	371c      	adds	r7, #28
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	40012c00 	.word	0x40012c00
 800a304:	40014400 	.word	0x40014400
 800a308:	40014800 	.word	0x40014800

0800a30c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b087      	sub	sp, #28
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6a1b      	ldr	r3, [r3, #32]
 800a31a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a1b      	ldr	r3, [r3, #32]
 800a326:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	69db      	ldr	r3, [r3, #28]
 800a332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a33a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a33e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f023 0303 	bic.w	r3, r3, #3
 800a346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	4313      	orrs	r3, r2
 800a350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	021b      	lsls	r3, r3, #8
 800a360:	697a      	ldr	r2, [r7, #20]
 800a362:	4313      	orrs	r3, r2
 800a364:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	4a21      	ldr	r2, [pc, #132]	; (800a3f0 <TIM_OC3_SetConfig+0xe4>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d10d      	bne.n	800a38a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a374:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	021b      	lsls	r3, r3, #8
 800a37c:	697a      	ldr	r2, [r7, #20]
 800a37e:	4313      	orrs	r3, r2
 800a380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4a18      	ldr	r2, [pc, #96]	; (800a3f0 <TIM_OC3_SetConfig+0xe4>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d007      	beq.n	800a3a2 <TIM_OC3_SetConfig+0x96>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4a17      	ldr	r2, [pc, #92]	; (800a3f4 <TIM_OC3_SetConfig+0xe8>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d003      	beq.n	800a3a2 <TIM_OC3_SetConfig+0x96>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	4a16      	ldr	r2, [pc, #88]	; (800a3f8 <TIM_OC3_SetConfig+0xec>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d113      	bne.n	800a3ca <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	695b      	ldr	r3, [r3, #20]
 800a3b6:	011b      	lsls	r3, r3, #4
 800a3b8:	693a      	ldr	r2, [r7, #16]
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	699b      	ldr	r3, [r3, #24]
 800a3c2:	011b      	lsls	r3, r3, #4
 800a3c4:	693a      	ldr	r2, [r7, #16]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	693a      	ldr	r2, [r7, #16]
 800a3ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	685a      	ldr	r2, [r3, #4]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	697a      	ldr	r2, [r7, #20]
 800a3e2:	621a      	str	r2, [r3, #32]
}
 800a3e4:	bf00      	nop
 800a3e6:	371c      	adds	r7, #28
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr
 800a3f0:	40012c00 	.word	0x40012c00
 800a3f4:	40014400 	.word	0x40014400
 800a3f8:	40014800 	.word	0x40014800

0800a3fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b087      	sub	sp, #28
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a1b      	ldr	r3, [r3, #32]
 800a416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	69db      	ldr	r3, [r3, #28]
 800a422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a42a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a42e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	021b      	lsls	r3, r3, #8
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	4313      	orrs	r3, r2
 800a442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a44a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	031b      	lsls	r3, r3, #12
 800a452:	693a      	ldr	r2, [r7, #16]
 800a454:	4313      	orrs	r3, r2
 800a456:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	4a14      	ldr	r2, [pc, #80]	; (800a4ac <TIM_OC4_SetConfig+0xb0>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d007      	beq.n	800a470 <TIM_OC4_SetConfig+0x74>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	4a13      	ldr	r2, [pc, #76]	; (800a4b0 <TIM_OC4_SetConfig+0xb4>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d003      	beq.n	800a470 <TIM_OC4_SetConfig+0x74>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4a12      	ldr	r2, [pc, #72]	; (800a4b4 <TIM_OC4_SetConfig+0xb8>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d109      	bne.n	800a484 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a476:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	695b      	ldr	r3, [r3, #20]
 800a47c:	019b      	lsls	r3, r3, #6
 800a47e:	697a      	ldr	r2, [r7, #20]
 800a480:	4313      	orrs	r3, r2
 800a482:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	697a      	ldr	r2, [r7, #20]
 800a488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	68fa      	ldr	r2, [r7, #12]
 800a48e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	685a      	ldr	r2, [r3, #4]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	693a      	ldr	r2, [r7, #16]
 800a49c:	621a      	str	r2, [r3, #32]
}
 800a49e:	bf00      	nop
 800a4a0:	371c      	adds	r7, #28
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr
 800a4aa:	bf00      	nop
 800a4ac:	40012c00 	.word	0x40012c00
 800a4b0:	40014400 	.word	0x40014400
 800a4b4:	40014800 	.word	0x40014800

0800a4b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b087      	sub	sp, #28
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a1b      	ldr	r3, [r3, #32]
 800a4c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a1b      	ldr	r3, [r3, #32]
 800a4d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a4fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	041b      	lsls	r3, r3, #16
 800a504:	693a      	ldr	r2, [r7, #16]
 800a506:	4313      	orrs	r3, r2
 800a508:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4a13      	ldr	r2, [pc, #76]	; (800a55c <TIM_OC5_SetConfig+0xa4>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d007      	beq.n	800a522 <TIM_OC5_SetConfig+0x6a>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a12      	ldr	r2, [pc, #72]	; (800a560 <TIM_OC5_SetConfig+0xa8>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d003      	beq.n	800a522 <TIM_OC5_SetConfig+0x6a>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a11      	ldr	r2, [pc, #68]	; (800a564 <TIM_OC5_SetConfig+0xac>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d109      	bne.n	800a536 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a528:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	695b      	ldr	r3, [r3, #20]
 800a52e:	021b      	lsls	r3, r3, #8
 800a530:	697a      	ldr	r2, [r7, #20]
 800a532:	4313      	orrs	r3, r2
 800a534:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	697a      	ldr	r2, [r7, #20]
 800a53a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	68fa      	ldr	r2, [r7, #12]
 800a540:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	685a      	ldr	r2, [r3, #4]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	693a      	ldr	r2, [r7, #16]
 800a54e:	621a      	str	r2, [r3, #32]
}
 800a550:	bf00      	nop
 800a552:	371c      	adds	r7, #28
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr
 800a55c:	40012c00 	.word	0x40012c00
 800a560:	40014400 	.word	0x40014400
 800a564:	40014800 	.word	0x40014800

0800a568 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a568:	b480      	push	{r7}
 800a56a:	b087      	sub	sp, #28
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a1b      	ldr	r3, [r3, #32]
 800a576:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6a1b      	ldr	r3, [r3, #32]
 800a582:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a58e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a59a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	021b      	lsls	r3, r3, #8
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a5ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	051b      	lsls	r3, r3, #20
 800a5b6:	693a      	ldr	r2, [r7, #16]
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4a14      	ldr	r2, [pc, #80]	; (800a610 <TIM_OC6_SetConfig+0xa8>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d007      	beq.n	800a5d4 <TIM_OC6_SetConfig+0x6c>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4a13      	ldr	r2, [pc, #76]	; (800a614 <TIM_OC6_SetConfig+0xac>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d003      	beq.n	800a5d4 <TIM_OC6_SetConfig+0x6c>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4a12      	ldr	r2, [pc, #72]	; (800a618 <TIM_OC6_SetConfig+0xb0>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d109      	bne.n	800a5e8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a5da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	695b      	ldr	r3, [r3, #20]
 800a5e0:	029b      	lsls	r3, r3, #10
 800a5e2:	697a      	ldr	r2, [r7, #20]
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	697a      	ldr	r2, [r7, #20]
 800a5ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	685a      	ldr	r2, [r3, #4]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	693a      	ldr	r2, [r7, #16]
 800a600:	621a      	str	r2, [r3, #32]
}
 800a602:	bf00      	nop
 800a604:	371c      	adds	r7, #28
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop
 800a610:	40012c00 	.word	0x40012c00
 800a614:	40014400 	.word	0x40014400
 800a618:	40014800 	.word	0x40014800

0800a61c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b087      	sub	sp, #28
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6a1b      	ldr	r3, [r3, #32]
 800a62c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6a1b      	ldr	r3, [r3, #32]
 800a632:	f023 0201 	bic.w	r2, r3, #1
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	699b      	ldr	r3, [r3, #24]
 800a63e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	011b      	lsls	r3, r3, #4
 800a64c:	693a      	ldr	r2, [r7, #16]
 800a64e:	4313      	orrs	r3, r2
 800a650:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	f023 030a 	bic.w	r3, r3, #10
 800a658:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a65a:	697a      	ldr	r2, [r7, #20]
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	4313      	orrs	r3, r2
 800a660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	693a      	ldr	r2, [r7, #16]
 800a666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	697a      	ldr	r2, [r7, #20]
 800a66c:	621a      	str	r2, [r3, #32]
}
 800a66e:	bf00      	nop
 800a670:	371c      	adds	r7, #28
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr

0800a67a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a67a:	b480      	push	{r7}
 800a67c:	b087      	sub	sp, #28
 800a67e:	af00      	add	r7, sp, #0
 800a680:	60f8      	str	r0, [r7, #12]
 800a682:	60b9      	str	r1, [r7, #8]
 800a684:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	6a1b      	ldr	r3, [r3, #32]
 800a68a:	f023 0210 	bic.w	r2, r3, #16
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	699b      	ldr	r3, [r3, #24]
 800a696:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	6a1b      	ldr	r3, [r3, #32]
 800a69c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a6a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	031b      	lsls	r3, r3, #12
 800a6aa:	697a      	ldr	r2, [r7, #20]
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a6b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	011b      	lsls	r3, r3, #4
 800a6bc:	693a      	ldr	r2, [r7, #16]
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	697a      	ldr	r2, [r7, #20]
 800a6c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	693a      	ldr	r2, [r7, #16]
 800a6cc:	621a      	str	r2, [r3, #32]
}
 800a6ce:	bf00      	nop
 800a6d0:	371c      	adds	r7, #28
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr

0800a6da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a6da:	b480      	push	{r7}
 800a6dc:	b085      	sub	sp, #20
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a6f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a6f6:	683a      	ldr	r2, [r7, #0]
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	f043 0307 	orr.w	r3, r3, #7
 800a700:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	609a      	str	r2, [r3, #8]
}
 800a708:	bf00      	nop
 800a70a:	3714      	adds	r7, #20
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a714:	b480      	push	{r7}
 800a716:	b087      	sub	sp, #28
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	607a      	str	r2, [r7, #4]
 800a720:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a72e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	021a      	lsls	r2, r3, #8
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	431a      	orrs	r2, r3
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	4313      	orrs	r3, r2
 800a73c:	697a      	ldr	r2, [r7, #20]
 800a73e:	4313      	orrs	r3, r2
 800a740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	697a      	ldr	r2, [r7, #20]
 800a746:	609a      	str	r2, [r3, #8]
}
 800a748:	bf00      	nop
 800a74a:	371c      	adds	r7, #28
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a754:	b480      	push	{r7}
 800a756:	b087      	sub	sp, #28
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	f003 031f 	and.w	r3, r3, #31
 800a766:	2201      	movs	r2, #1
 800a768:	fa02 f303 	lsl.w	r3, r2, r3
 800a76c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	6a1a      	ldr	r2, [r3, #32]
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	43db      	mvns	r3, r3
 800a776:	401a      	ands	r2, r3
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6a1a      	ldr	r2, [r3, #32]
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	f003 031f 	and.w	r3, r3, #31
 800a786:	6879      	ldr	r1, [r7, #4]
 800a788:	fa01 f303 	lsl.w	r3, r1, r3
 800a78c:	431a      	orrs	r2, r3
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	621a      	str	r2, [r3, #32]
}
 800a792:	bf00      	nop
 800a794:	371c      	adds	r7, #28
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr
	...

0800a7a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d101      	bne.n	800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a7b4:	2302      	movs	r3, #2
 800a7b6:	e04a      	b.n	800a84e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2202      	movs	r2, #2
 800a7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a1f      	ldr	r2, [pc, #124]	; (800a85c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d108      	bne.n	800a7f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a7e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	4313      	orrs	r3, r2
 800a804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68fa      	ldr	r2, [r7, #12]
 800a80c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a12      	ldr	r2, [pc, #72]	; (800a85c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d004      	beq.n	800a822 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a820:	d10c      	bne.n	800a83c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a828:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	68ba      	ldr	r2, [r7, #8]
 800a830:	4313      	orrs	r3, r2
 800a832:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	68ba      	ldr	r2, [r7, #8]
 800a83a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2201      	movs	r2, #1
 800a840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3714      	adds	r7, #20
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	40012c00 	.word	0x40012c00

0800a860 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a860:	b480      	push	{r7}
 800a862:	b085      	sub	sp, #20
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a870:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a874:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	b29a      	uxth	r2, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a880:	2300      	movs	r3, #0
}
 800a882:	4618      	mov	r0, r3
 800a884:	3714      	adds	r7, #20
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr

0800a88e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a88e:	b480      	push	{r7}
 800a890:	b085      	sub	sp, #20
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a896:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a89a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a8a2:	b29a      	uxth	r2, r3
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	43db      	mvns	r3, r3
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	b29a      	uxth	r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3714      	adds	r7, #20
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a8c4:	b084      	sub	sp, #16
 800a8c6:	b480      	push	{r7}
 800a8c8:	b083      	sub	sp, #12
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
 800a8ce:	f107 0014 	add.w	r0, r7, #20
 800a8d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	370c      	adds	r7, #12
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	b004      	add	sp, #16
 800a904:	4770      	bx	lr
	...

0800a908 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a908:	b480      	push	{r7}
 800a90a:	b09d      	sub	sp, #116	; 0x74
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	4413      	add	r3, r2
 800a922:	881b      	ldrh	r3, [r3, #0]
 800a924:	b29b      	uxth	r3, r3
 800a926:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a92a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a92e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	78db      	ldrb	r3, [r3, #3]
 800a936:	2b03      	cmp	r3, #3
 800a938:	d81f      	bhi.n	800a97a <USB_ActivateEndpoint+0x72>
 800a93a:	a201      	add	r2, pc, #4	; (adr r2, 800a940 <USB_ActivateEndpoint+0x38>)
 800a93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a940:	0800a951 	.word	0x0800a951
 800a944:	0800a96d 	.word	0x0800a96d
 800a948:	0800a983 	.word	0x0800a983
 800a94c:	0800a95f 	.word	0x0800a95f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a950:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a954:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a958:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a95c:	e012      	b.n	800a984 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a95e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a962:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a966:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a96a:	e00b      	b.n	800a984 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a96c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a970:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a974:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a978:	e004      	b.n	800a984 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a97a:	2301      	movs	r3, #1
 800a97c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a980:	e000      	b.n	800a984 <USB_ActivateEndpoint+0x7c>
      break;
 800a982:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	441a      	add	r2, r3
 800a98e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a99a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a99e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	4413      	add	r3, r2
 800a9b0:	881b      	ldrh	r3, [r3, #0]
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	b21b      	sxth	r3, r3
 800a9b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9be:	b21a      	sxth	r2, r3
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	b21b      	sxth	r3, r3
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	b21b      	sxth	r3, r3
 800a9ca:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	441a      	add	r2, r3
 800a9d8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a9dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	7b1b      	ldrb	r3, [r3, #12]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f040 8178 	bne.w	800acea <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	785b      	ldrb	r3, [r3, #1]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	f000 8084 	beq.w	800ab0c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	61bb      	str	r3, [r7, #24]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	461a      	mov	r2, r3
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	4413      	add	r3, r2
 800aa16:	61bb      	str	r3, [r7, #24]
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	00da      	lsls	r2, r3, #3
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	4413      	add	r3, r2
 800aa22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa26:	617b      	str	r3, [r7, #20]
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	88db      	ldrh	r3, [r3, #6]
 800aa2c:	085b      	lsrs	r3, r3, #1
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	005b      	lsls	r3, r3, #1
 800aa32:	b29a      	uxth	r2, r3
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	4413      	add	r3, r2
 800aa42:	881b      	ldrh	r3, [r3, #0]
 800aa44:	827b      	strh	r3, [r7, #18]
 800aa46:	8a7b      	ldrh	r3, [r7, #18]
 800aa48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d01b      	beq.n	800aa88 <USB_ActivateEndpoint+0x180>
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	4413      	add	r3, r2
 800aa5a:	881b      	ldrh	r3, [r3, #0]
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa66:	823b      	strh	r3, [r7, #16]
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	441a      	add	r2, r3
 800aa72:	8a3b      	ldrh	r3, [r7, #16]
 800aa74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	78db      	ldrb	r3, [r3, #3]
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d020      	beq.n	800aad2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	4413      	add	r3, r2
 800aa9a:	881b      	ldrh	r3, [r3, #0]
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aaa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaa6:	81bb      	strh	r3, [r7, #12]
 800aaa8:	89bb      	ldrh	r3, [r7, #12]
 800aaaa:	f083 0320 	eor.w	r3, r3, #32
 800aaae:	81bb      	strh	r3, [r7, #12]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	441a      	add	r2, r3
 800aaba:	89bb      	ldrh	r3, [r7, #12]
 800aabc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aacc:	b29b      	uxth	r3, r3
 800aace:	8013      	strh	r3, [r2, #0]
 800aad0:	e2d5      	b.n	800b07e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	4413      	add	r3, r2
 800aadc:	881b      	ldrh	r3, [r3, #0]
 800aade:	b29b      	uxth	r3, r3
 800aae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aae8:	81fb      	strh	r3, [r7, #14]
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	441a      	add	r2, r3
 800aaf4:	89fb      	ldrh	r3, [r7, #14]
 800aaf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aafa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aafe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	8013      	strh	r3, [r2, #0]
 800ab0a:	e2b8      	b.n	800b07e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	633b      	str	r3, [r7, #48]	; 0x30
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	461a      	mov	r2, r3
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1c:	4413      	add	r3, r2
 800ab1e:	633b      	str	r3, [r7, #48]	; 0x30
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	00da      	lsls	r2, r3, #3
 800ab26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab28:	4413      	add	r3, r2
 800ab2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ab2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	88db      	ldrh	r3, [r3, #6]
 800ab34:	085b      	lsrs	r3, r3, #1
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	005b      	lsls	r3, r3, #1
 800ab3a:	b29a      	uxth	r2, r3
 800ab3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab50:	4413      	add	r3, r2
 800ab52:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	00da      	lsls	r2, r3, #3
 800ab5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5c:	4413      	add	r3, r2
 800ab5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab62:	627b      	str	r3, [r7, #36]	; 0x24
 800ab64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab66:	881b      	ldrh	r3, [r3, #0]
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab6e:	b29a      	uxth	r2, r3
 800ab70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab72:	801a      	strh	r2, [r3, #0]
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	2b3e      	cmp	r3, #62	; 0x3e
 800ab7a:	d91d      	bls.n	800abb8 <USB_ActivateEndpoint+0x2b0>
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	095b      	lsrs	r3, r3, #5
 800ab82:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	691b      	ldr	r3, [r3, #16]
 800ab88:	f003 031f 	and.w	r3, r3, #31
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d102      	bne.n	800ab96 <USB_ActivateEndpoint+0x28e>
 800ab90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab92:	3b01      	subs	r3, #1
 800ab94:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab98:	881b      	ldrh	r3, [r3, #0]
 800ab9a:	b29a      	uxth	r2, r3
 800ab9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	029b      	lsls	r3, r3, #10
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	4313      	orrs	r3, r2
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abb0:	b29a      	uxth	r2, r3
 800abb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb4:	801a      	strh	r2, [r3, #0]
 800abb6:	e026      	b.n	800ac06 <USB_ActivateEndpoint+0x2fe>
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d10a      	bne.n	800abd6 <USB_ActivateEndpoint+0x2ce>
 800abc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc2:	881b      	ldrh	r3, [r3, #0]
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abce:	b29a      	uxth	r2, r3
 800abd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd2:	801a      	strh	r2, [r3, #0]
 800abd4:	e017      	b.n	800ac06 <USB_ActivateEndpoint+0x2fe>
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	691b      	ldr	r3, [r3, #16]
 800abda:	085b      	lsrs	r3, r3, #1
 800abdc:	66bb      	str	r3, [r7, #104]	; 0x68
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	691b      	ldr	r3, [r3, #16]
 800abe2:	f003 0301 	and.w	r3, r3, #1
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d002      	beq.n	800abf0 <USB_ActivateEndpoint+0x2e8>
 800abea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abec:	3301      	adds	r3, #1
 800abee:	66bb      	str	r3, [r7, #104]	; 0x68
 800abf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf2:	881b      	ldrh	r3, [r3, #0]
 800abf4:	b29a      	uxth	r2, r3
 800abf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	029b      	lsls	r3, r3, #10
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	4313      	orrs	r3, r2
 800ac00:	b29a      	uxth	r2, r3
 800ac02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac04:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	4413      	add	r3, r2
 800ac10:	881b      	ldrh	r3, [r3, #0]
 800ac12:	847b      	strh	r3, [r7, #34]	; 0x22
 800ac14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d01b      	beq.n	800ac56 <USB_ActivateEndpoint+0x34e>
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4413      	add	r3, r2
 800ac28:	881b      	ldrh	r3, [r3, #0]
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac34:	843b      	strh	r3, [r7, #32]
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	441a      	add	r2, r3
 800ac40:	8c3b      	ldrh	r3, [r7, #32]
 800ac42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d124      	bne.n	800aca8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	4413      	add	r3, r2
 800ac68:	881b      	ldrh	r3, [r3, #0]
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac74:	83bb      	strh	r3, [r7, #28]
 800ac76:	8bbb      	ldrh	r3, [r7, #28]
 800ac78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ac7c:	83bb      	strh	r3, [r7, #28]
 800ac7e:	8bbb      	ldrh	r3, [r7, #28]
 800ac80:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ac84:	83bb      	strh	r3, [r7, #28]
 800ac86:	687a      	ldr	r2, [r7, #4]
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	441a      	add	r2, r3
 800ac90:	8bbb      	ldrh	r3, [r7, #28]
 800ac92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	8013      	strh	r3, [r2, #0]
 800aca6:	e1ea      	b.n	800b07e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4413      	add	r3, r2
 800acb2:	881b      	ldrh	r3, [r3, #0]
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acbe:	83fb      	strh	r3, [r7, #30]
 800acc0:	8bfb      	ldrh	r3, [r7, #30]
 800acc2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800acc6:	83fb      	strh	r3, [r7, #30]
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	441a      	add	r2, r3
 800acd2:	8bfb      	ldrh	r3, [r7, #30]
 800acd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ace0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	8013      	strh	r3, [r2, #0]
 800ace8:	e1c9      	b.n	800b07e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	78db      	ldrb	r3, [r3, #3]
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d11e      	bne.n	800ad30 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	4413      	add	r3, r2
 800acfc:	881b      	ldrh	r3, [r3, #0]
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad08:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	441a      	add	r2, r3
 800ad16:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ad1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad22:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ad26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	8013      	strh	r3, [r2, #0]
 800ad2e:	e01d      	b.n	800ad6c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	4413      	add	r3, r2
 800ad3a:	881b      	ldrh	r3, [r3, #0]
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ad42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad46:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	441a      	add	r2, r3
 800ad54:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800ad58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	461a      	mov	r2, r3
 800ad7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad7c:	4413      	add	r3, r2
 800ad7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	00da      	lsls	r2, r3, #3
 800ad86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad88:	4413      	add	r3, r2
 800ad8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad8e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	891b      	ldrh	r3, [r3, #8]
 800ad94:	085b      	lsrs	r3, r3, #1
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	005b      	lsls	r3, r3, #1
 800ad9a:	b29a      	uxth	r2, r3
 800ad9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad9e:	801a      	strh	r2, [r3, #0]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	657b      	str	r3, [r7, #84]	; 0x54
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adaa:	b29b      	uxth	r3, r3
 800adac:	461a      	mov	r2, r3
 800adae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adb0:	4413      	add	r3, r2
 800adb2:	657b      	str	r3, [r7, #84]	; 0x54
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	00da      	lsls	r2, r3, #3
 800adba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adbc:	4413      	add	r3, r2
 800adbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800adc2:	653b      	str	r3, [r7, #80]	; 0x50
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	895b      	ldrh	r3, [r3, #10]
 800adc8:	085b      	lsrs	r3, r3, #1
 800adca:	b29b      	uxth	r3, r3
 800adcc:	005b      	lsls	r3, r3, #1
 800adce:	b29a      	uxth	r2, r3
 800add0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800add2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	785b      	ldrb	r3, [r3, #1]
 800add8:	2b00      	cmp	r3, #0
 800adda:	f040 8093 	bne.w	800af04 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	4413      	add	r3, r2
 800ade8:	881b      	ldrh	r3, [r3, #0]
 800adea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800adee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800adf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d01b      	beq.n	800ae32 <USB_ActivateEndpoint+0x52a>
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	4413      	add	r3, r2
 800ae04:	881b      	ldrh	r3, [r3, #0]
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae10:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	441a      	add	r2, r3
 800ae1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ae1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ae2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	4413      	add	r3, r2
 800ae3c:	881b      	ldrh	r3, [r3, #0]
 800ae3e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ae40:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ae42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d01b      	beq.n	800ae82 <USB_ActivateEndpoint+0x57a>
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	4413      	add	r3, r2
 800ae54:	881b      	ldrh	r3, [r3, #0]
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae60:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	009b      	lsls	r3, r3, #2
 800ae6a:	441a      	add	r2, r3
 800ae6c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ae6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	4413      	add	r3, r2
 800ae8c:	881b      	ldrh	r3, [r3, #0]
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae98:	873b      	strh	r3, [r7, #56]	; 0x38
 800ae9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ae9c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aea0:	873b      	strh	r3, [r7, #56]	; 0x38
 800aea2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aea4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aea8:	873b      	strh	r3, [r7, #56]	; 0x38
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	441a      	add	r2, r3
 800aeb4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aeb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aeba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	4413      	add	r3, r2
 800aed4:	881b      	ldrh	r3, [r3, #0]
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aedc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aee0:	86fb      	strh	r3, [r7, #54]	; 0x36
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	441a      	add	r2, r3
 800aeec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aeee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aefa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aefe:	b29b      	uxth	r3, r3
 800af00:	8013      	strh	r3, [r2, #0]
 800af02:	e0bc      	b.n	800b07e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	4413      	add	r3, r2
 800af0e:	881b      	ldrh	r3, [r3, #0]
 800af10:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800af14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800af18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d01d      	beq.n	800af5c <USB_ActivateEndpoint+0x654>
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	4413      	add	r3, r2
 800af2a:	881b      	ldrh	r3, [r3, #0]
 800af2c:	b29b      	uxth	r3, r3
 800af2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af36:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	441a      	add	r2, r3
 800af44:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800af48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af58:	b29b      	uxth	r3, r3
 800af5a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	4413      	add	r3, r2
 800af66:	881b      	ldrh	r3, [r3, #0]
 800af68:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800af6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800af70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af74:	2b00      	cmp	r3, #0
 800af76:	d01d      	beq.n	800afb4 <USB_ActivateEndpoint+0x6ac>
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	4413      	add	r3, r2
 800af82:	881b      	ldrh	r3, [r3, #0]
 800af84:	b29b      	uxth	r3, r3
 800af86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af8e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	781b      	ldrb	r3, [r3, #0]
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	441a      	add	r2, r3
 800af9c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800afa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	78db      	ldrb	r3, [r3, #3]
 800afb8:	2b01      	cmp	r3, #1
 800afba:	d024      	beq.n	800b006 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	4413      	add	r3, r2
 800afc6:	881b      	ldrh	r3, [r3, #0]
 800afc8:	b29b      	uxth	r3, r3
 800afca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afd2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800afd6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800afda:	f083 0320 	eor.w	r3, r3, #32
 800afde:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	441a      	add	r2, r3
 800afec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800aff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800affc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b000:	b29b      	uxth	r3, r3
 800b002:	8013      	strh	r3, [r2, #0]
 800b004:	e01d      	b.n	800b042 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	4413      	add	r3, r2
 800b010:	881b      	ldrh	r3, [r3, #0]
 800b012:	b29b      	uxth	r3, r3
 800b014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b01c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	441a      	add	r2, r3
 800b02a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b02e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b03a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b03e:	b29b      	uxth	r3, r3
 800b040:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b042:	687a      	ldr	r2, [r7, #4]
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	4413      	add	r3, r2
 800b04c:	881b      	ldrh	r3, [r3, #0]
 800b04e:	b29b      	uxth	r3, r3
 800b050:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b058:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	441a      	add	r2, r3
 800b066:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b06a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b06e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b07e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800b082:	4618      	mov	r0, r3
 800b084:	3774      	adds	r7, #116	; 0x74
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop

0800b090 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b090:	b480      	push	{r7}
 800b092:	b08d      	sub	sp, #52	; 0x34
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	7b1b      	ldrb	r3, [r3, #12]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f040 808e 	bne.w	800b1c0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	785b      	ldrb	r3, [r3, #1]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d044      	beq.n	800b136 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	4413      	add	r3, r2
 800b0b6:	881b      	ldrh	r3, [r3, #0]
 800b0b8:	81bb      	strh	r3, [r7, #12]
 800b0ba:	89bb      	ldrh	r3, [r7, #12]
 800b0bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d01b      	beq.n	800b0fc <USB_DeactivateEndpoint+0x6c>
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4413      	add	r3, r2
 800b0ce:	881b      	ldrh	r3, [r3, #0]
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0da:	817b      	strh	r3, [r7, #10]
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	441a      	add	r2, r3
 800b0e6:	897b      	ldrh	r3, [r7, #10]
 800b0e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	4413      	add	r3, r2
 800b106:	881b      	ldrh	r3, [r3, #0]
 800b108:	b29b      	uxth	r3, r3
 800b10a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b10e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b112:	813b      	strh	r3, [r7, #8]
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	441a      	add	r2, r3
 800b11e:	893b      	ldrh	r3, [r7, #8]
 800b120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b12c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b130:	b29b      	uxth	r3, r3
 800b132:	8013      	strh	r3, [r2, #0]
 800b134:	e192      	b.n	800b45c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	4413      	add	r3, r2
 800b140:	881b      	ldrh	r3, [r3, #0]
 800b142:	827b      	strh	r3, [r7, #18]
 800b144:	8a7b      	ldrh	r3, [r7, #18]
 800b146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d01b      	beq.n	800b186 <USB_DeactivateEndpoint+0xf6>
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	4413      	add	r3, r2
 800b158:	881b      	ldrh	r3, [r3, #0]
 800b15a:	b29b      	uxth	r3, r3
 800b15c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b164:	823b      	strh	r3, [r7, #16]
 800b166:	687a      	ldr	r2, [r7, #4]
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	441a      	add	r2, r3
 800b170:	8a3b      	ldrh	r3, [r7, #16]
 800b172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b17a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b17e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b182:	b29b      	uxth	r3, r3
 800b184:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	4413      	add	r3, r2
 800b190:	881b      	ldrh	r3, [r3, #0]
 800b192:	b29b      	uxth	r3, r3
 800b194:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b19c:	81fb      	strh	r3, [r7, #14]
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	441a      	add	r2, r3
 800b1a8:	89fb      	ldrh	r3, [r7, #14]
 800b1aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	8013      	strh	r3, [r2, #0]
 800b1be:	e14d      	b.n	800b45c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	785b      	ldrb	r3, [r3, #1]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f040 80a5 	bne.w	800b314 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	4413      	add	r3, r2
 800b1d4:	881b      	ldrh	r3, [r3, #0]
 800b1d6:	843b      	strh	r3, [r7, #32]
 800b1d8:	8c3b      	ldrh	r3, [r7, #32]
 800b1da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d01b      	beq.n	800b21a <USB_DeactivateEndpoint+0x18a>
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	4413      	add	r3, r2
 800b1ec:	881b      	ldrh	r3, [r3, #0]
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1f8:	83fb      	strh	r3, [r7, #30]
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	441a      	add	r2, r3
 800b204:	8bfb      	ldrh	r3, [r7, #30]
 800b206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b20a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b20e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b216:	b29b      	uxth	r3, r3
 800b218:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	4413      	add	r3, r2
 800b224:	881b      	ldrh	r3, [r3, #0]
 800b226:	83bb      	strh	r3, [r7, #28]
 800b228:	8bbb      	ldrh	r3, [r7, #28]
 800b22a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d01b      	beq.n	800b26a <USB_DeactivateEndpoint+0x1da>
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	4413      	add	r3, r2
 800b23c:	881b      	ldrh	r3, [r3, #0]
 800b23e:	b29b      	uxth	r3, r3
 800b240:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b248:	837b      	strh	r3, [r7, #26]
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	009b      	lsls	r3, r3, #2
 800b252:	441a      	add	r2, r3
 800b254:	8b7b      	ldrh	r3, [r7, #26]
 800b256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b25a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b25e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b262:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b266:	b29b      	uxth	r3, r3
 800b268:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	009b      	lsls	r3, r3, #2
 800b272:	4413      	add	r3, r2
 800b274:	881b      	ldrh	r3, [r3, #0]
 800b276:	b29b      	uxth	r3, r3
 800b278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b27c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b280:	833b      	strh	r3, [r7, #24]
 800b282:	687a      	ldr	r2, [r7, #4]
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	441a      	add	r2, r3
 800b28c:	8b3b      	ldrh	r3, [r7, #24]
 800b28e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b29a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	4413      	add	r3, r2
 800b2ac:	881b      	ldrh	r3, [r3, #0]
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2b8:	82fb      	strh	r3, [r7, #22]
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	009b      	lsls	r3, r3, #2
 800b2c2:	441a      	add	r2, r3
 800b2c4:	8afb      	ldrh	r3, [r7, #22]
 800b2c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4413      	add	r3, r2
 800b2e4:	881b      	ldrh	r3, [r3, #0]
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2f0:	82bb      	strh	r3, [r7, #20]
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	441a      	add	r2, r3
 800b2fc:	8abb      	ldrh	r3, [r7, #20]
 800b2fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b30a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b30e:	b29b      	uxth	r3, r3
 800b310:	8013      	strh	r3, [r2, #0]
 800b312:	e0a3      	b.n	800b45c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	4413      	add	r3, r2
 800b31e:	881b      	ldrh	r3, [r3, #0]
 800b320:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b322:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d01b      	beq.n	800b364 <USB_DeactivateEndpoint+0x2d4>
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	4413      	add	r3, r2
 800b336:	881b      	ldrh	r3, [r3, #0]
 800b338:	b29b      	uxth	r3, r3
 800b33a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b33e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b342:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	441a      	add	r2, r3
 800b34e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b35c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b360:	b29b      	uxth	r3, r3
 800b362:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	4413      	add	r3, r2
 800b36e:	881b      	ldrh	r3, [r3, #0]
 800b370:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b372:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d01b      	beq.n	800b3b4 <USB_DeactivateEndpoint+0x324>
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	4413      	add	r3, r2
 800b386:	881b      	ldrh	r3, [r3, #0]
 800b388:	b29b      	uxth	r3, r3
 800b38a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b38e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b392:	853b      	strh	r3, [r7, #40]	; 0x28
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	441a      	add	r2, r3
 800b39e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b3a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	4413      	add	r3, r2
 800b3be:	881b      	ldrh	r3, [r3, #0]
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	441a      	add	r2, r3
 800b3d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b3d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b3e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	4413      	add	r3, r2
 800b3f6:	881b      	ldrh	r3, [r3, #0]
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b402:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	441a      	add	r2, r3
 800b40e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b41c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b420:	b29b      	uxth	r3, r3
 800b422:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	4413      	add	r3, r2
 800b42e:	881b      	ldrh	r3, [r3, #0]
 800b430:	b29b      	uxth	r3, r3
 800b432:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b43a:	847b      	strh	r3, [r7, #34]	; 0x22
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	441a      	add	r2, r3
 800b446:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b448:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b44c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b458:	b29b      	uxth	r3, r3
 800b45a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b45c:	2300      	movs	r3, #0
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3734      	adds	r7, #52	; 0x34
 800b462:	46bd      	mov	sp, r7
 800b464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b468:	4770      	bx	lr

0800b46a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b46a:	b580      	push	{r7, lr}
 800b46c:	b0c2      	sub	sp, #264	; 0x108
 800b46e:	af00      	add	r7, sp, #0
 800b470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b474:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b478:	6018      	str	r0, [r3, #0]
 800b47a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b47e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b482:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	785b      	ldrb	r3, [r3, #1]
 800b490:	2b01      	cmp	r3, #1
 800b492:	f040 86b7 	bne.w	800c204 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b49a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	699a      	ldr	r2, [r3, #24]
 800b4a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	691b      	ldr	r3, [r3, #16]
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d908      	bls.n	800b4c4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b4b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	691b      	ldr	r3, [r3, #16]
 800b4be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b4c2:	e007      	b.n	800b4d4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b4c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	699b      	ldr	r3, [r3, #24]
 800b4d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b4d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	7b1b      	ldrb	r3, [r3, #12]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d13a      	bne.n	800b55a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b4e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	6959      	ldr	r1, [r3, #20]
 800b4f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	88da      	ldrh	r2, [r3, #6]
 800b4fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b500:	b29b      	uxth	r3, r3
 800b502:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b506:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b50a:	6800      	ldr	r0, [r0, #0]
 800b50c:	f001 fc98 	bl	800ce40 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b514:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	613b      	str	r3, [r7, #16]
 800b51c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b520:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	461a      	mov	r2, r3
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	4413      	add	r3, r2
 800b532:	613b      	str	r3, [r7, #16]
 800b534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	00da      	lsls	r2, r3, #3
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	4413      	add	r3, r2
 800b546:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b54a:	60fb      	str	r3, [r7, #12]
 800b54c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b550:	b29a      	uxth	r2, r3
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	801a      	strh	r2, [r3, #0]
 800b556:	f000 be1f 	b.w	800c198 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b55a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b55e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	78db      	ldrb	r3, [r3, #3]
 800b566:	2b02      	cmp	r3, #2
 800b568:	f040 8462 	bne.w	800be30 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b56c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	6a1a      	ldr	r2, [r3, #32]
 800b578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b57c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	691b      	ldr	r3, [r3, #16]
 800b584:	429a      	cmp	r2, r3
 800b586:	f240 83df 	bls.w	800bd48 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b58a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b58e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	4413      	add	r3, r2
 800b5a4:	881b      	ldrh	r3, [r3, #0]
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b5b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	441a      	add	r2, r3
 800b5ce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b5d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b5da:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b5de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b5e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	6a1a      	ldr	r2, [r3, #32]
 800b5f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f6:	1ad2      	subs	r2, r2, r3
 800b5f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b608:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	4413      	add	r3, r2
 800b61e:	881b      	ldrh	r3, [r3, #0]
 800b620:	b29b      	uxth	r3, r3
 800b622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b626:	2b00      	cmp	r3, #0
 800b628:	f000 81c7 	beq.w	800b9ba <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b62c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b630:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	633b      	str	r3, [r7, #48]	; 0x30
 800b638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b63c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	785b      	ldrb	r3, [r3, #1]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d177      	bne.n	800b738 <USB_EPStartXfer+0x2ce>
 800b648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b64c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	62bb      	str	r3, [r7, #40]	; 0x28
 800b654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b658:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b662:	b29b      	uxth	r3, r3
 800b664:	461a      	mov	r2, r3
 800b666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b668:	4413      	add	r3, r2
 800b66a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b66c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	00da      	lsls	r2, r3, #3
 800b67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67c:	4413      	add	r3, r2
 800b67e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b682:	627b      	str	r3, [r7, #36]	; 0x24
 800b684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b686:	881b      	ldrh	r3, [r3, #0]
 800b688:	b29b      	uxth	r3, r3
 800b68a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b68e:	b29a      	uxth	r2, r3
 800b690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b692:	801a      	strh	r2, [r3, #0]
 800b694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b698:	2b3e      	cmp	r3, #62	; 0x3e
 800b69a:	d921      	bls.n	800b6e0 <USB_EPStartXfer+0x276>
 800b69c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a0:	095b      	lsrs	r3, r3, #5
 800b6a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b6a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6aa:	f003 031f 	and.w	r3, r3, #31
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d104      	bne.n	800b6bc <USB_EPStartXfer+0x252>
 800b6b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6be:	881b      	ldrh	r3, [r3, #0]
 800b6c0:	b29a      	uxth	r2, r3
 800b6c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	029b      	lsls	r3, r3, #10
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6d8:	b29a      	uxth	r2, r3
 800b6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6dc:	801a      	strh	r2, [r3, #0]
 800b6de:	e050      	b.n	800b782 <USB_EPStartXfer+0x318>
 800b6e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d10a      	bne.n	800b6fe <USB_EPStartXfer+0x294>
 800b6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ea:	881b      	ldrh	r3, [r3, #0]
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6f6:	b29a      	uxth	r2, r3
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fa:	801a      	strh	r2, [r3, #0]
 800b6fc:	e041      	b.n	800b782 <USB_EPStartXfer+0x318>
 800b6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b702:	085b      	lsrs	r3, r3, #1
 800b704:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b70c:	f003 0301 	and.w	r3, r3, #1
 800b710:	2b00      	cmp	r3, #0
 800b712:	d004      	beq.n	800b71e <USB_EPStartXfer+0x2b4>
 800b714:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b718:	3301      	adds	r3, #1
 800b71a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b720:	881b      	ldrh	r3, [r3, #0]
 800b722:	b29a      	uxth	r2, r3
 800b724:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b728:	b29b      	uxth	r3, r3
 800b72a:	029b      	lsls	r3, r3, #10
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	4313      	orrs	r3, r2
 800b730:	b29a      	uxth	r2, r3
 800b732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b734:	801a      	strh	r2, [r3, #0]
 800b736:	e024      	b.n	800b782 <USB_EPStartXfer+0x318>
 800b738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b73c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	785b      	ldrb	r3, [r3, #1]
 800b744:	2b01      	cmp	r3, #1
 800b746:	d11c      	bne.n	800b782 <USB_EPStartXfer+0x318>
 800b748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b74c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b756:	b29b      	uxth	r3, r3
 800b758:	461a      	mov	r2, r3
 800b75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75c:	4413      	add	r3, r2
 800b75e:	633b      	str	r3, [r7, #48]	; 0x30
 800b760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	00da      	lsls	r2, r3, #3
 800b76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b770:	4413      	add	r3, r2
 800b772:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b776:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b77c:	b29a      	uxth	r2, r3
 800b77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b780:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b786:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	895b      	ldrh	r3, [r3, #10]
 800b78e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	6959      	ldr	r1, [r3, #20]
 800b79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b7a8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b7ac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b7b0:	6800      	ldr	r0, [r0, #0]
 800b7b2:	f001 fb45 	bl	800ce40 <USB_WritePMA>
            ep->xfer_buff += len;
 800b7b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	695a      	ldr	r2, [r3, #20]
 800b7c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c6:	441a      	add	r2, r3
 800b7c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b7d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	6a1a      	ldr	r2, [r3, #32]
 800b7e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	691b      	ldr	r3, [r3, #16]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d90f      	bls.n	800b810 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b7f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	6a1a      	ldr	r2, [r3, #32]
 800b7fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b800:	1ad2      	subs	r2, r2, r3
 800b802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	621a      	str	r2, [r3, #32]
 800b80e:	e00e      	b.n	800b82e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	6a1b      	ldr	r3, [r3, #32]
 800b81c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2200      	movs	r2, #0
 800b82c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b82e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	785b      	ldrb	r3, [r3, #1]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d177      	bne.n	800b92e <USB_EPStartXfer+0x4c4>
 800b83e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b842:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	61bb      	str	r3, [r7, #24]
 800b84a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b84e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b858:	b29b      	uxth	r3, r3
 800b85a:	461a      	mov	r2, r3
 800b85c:	69bb      	ldr	r3, [r7, #24]
 800b85e:	4413      	add	r3, r2
 800b860:	61bb      	str	r3, [r7, #24]
 800b862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	00da      	lsls	r2, r3, #3
 800b870:	69bb      	ldr	r3, [r7, #24]
 800b872:	4413      	add	r3, r2
 800b874:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b878:	617b      	str	r3, [r7, #20]
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	881b      	ldrh	r3, [r3, #0]
 800b87e:	b29b      	uxth	r3, r3
 800b880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b884:	b29a      	uxth	r2, r3
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	801a      	strh	r2, [r3, #0]
 800b88a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b88e:	2b3e      	cmp	r3, #62	; 0x3e
 800b890:	d921      	bls.n	800b8d6 <USB_EPStartXfer+0x46c>
 800b892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b896:	095b      	lsrs	r3, r3, #5
 800b898:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b89c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a0:	f003 031f 	and.w	r3, r3, #31
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d104      	bne.n	800b8b2 <USB_EPStartXfer+0x448>
 800b8a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8ac:	3b01      	subs	r3, #1
 800b8ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	881b      	ldrh	r3, [r3, #0]
 800b8b6:	b29a      	uxth	r2, r3
 800b8b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	029b      	lsls	r3, r3, #10
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8ce:	b29a      	uxth	r2, r3
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	801a      	strh	r2, [r3, #0]
 800b8d4:	e056      	b.n	800b984 <USB_EPStartXfer+0x51a>
 800b8d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d10a      	bne.n	800b8f4 <USB_EPStartXfer+0x48a>
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	881b      	ldrh	r3, [r3, #0]
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8ec:	b29a      	uxth	r2, r3
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	801a      	strh	r2, [r3, #0]
 800b8f2:	e047      	b.n	800b984 <USB_EPStartXfer+0x51a>
 800b8f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8f8:	085b      	lsrs	r3, r3, #1
 800b8fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b8fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b902:	f003 0301 	and.w	r3, r3, #1
 800b906:	2b00      	cmp	r3, #0
 800b908:	d004      	beq.n	800b914 <USB_EPStartXfer+0x4aa>
 800b90a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b90e:	3301      	adds	r3, #1
 800b910:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	881b      	ldrh	r3, [r3, #0]
 800b918:	b29a      	uxth	r2, r3
 800b91a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b91e:	b29b      	uxth	r3, r3
 800b920:	029b      	lsls	r3, r3, #10
 800b922:	b29b      	uxth	r3, r3
 800b924:	4313      	orrs	r3, r2
 800b926:	b29a      	uxth	r2, r3
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	801a      	strh	r2, [r3, #0]
 800b92c:	e02a      	b.n	800b984 <USB_EPStartXfer+0x51a>
 800b92e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	785b      	ldrb	r3, [r3, #1]
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d122      	bne.n	800b984 <USB_EPStartXfer+0x51a>
 800b93e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b942:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	623b      	str	r3, [r7, #32]
 800b94a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b94e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b958:	b29b      	uxth	r3, r3
 800b95a:	461a      	mov	r2, r3
 800b95c:	6a3b      	ldr	r3, [r7, #32]
 800b95e:	4413      	add	r3, r2
 800b960:	623b      	str	r3, [r7, #32]
 800b962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	00da      	lsls	r2, r3, #3
 800b970:	6a3b      	ldr	r3, [r7, #32]
 800b972:	4413      	add	r3, r2
 800b974:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b978:	61fb      	str	r3, [r7, #28]
 800b97a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b97e:	b29a      	uxth	r2, r3
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	891b      	ldrh	r3, [r3, #8]
 800b990:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	6959      	ldr	r1, [r3, #20]
 800b9a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b9aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b9ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b9b2:	6800      	ldr	r0, [r0, #0]
 800b9b4:	f001 fa44 	bl	800ce40 <USB_WritePMA>
 800b9b8:	e3ee      	b.n	800c198 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b9ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	785b      	ldrb	r3, [r3, #1]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d177      	bne.n	800baba <USB_EPStartXfer+0x650>
 800b9ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9ea:	4413      	add	r3, r2
 800b9ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	00da      	lsls	r2, r3, #3
 800b9fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9fe:	4413      	add	r3, r2
 800ba00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ba04:	647b      	str	r3, [r7, #68]	; 0x44
 800ba06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba08:	881b      	ldrh	r3, [r3, #0]
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba10:	b29a      	uxth	r2, r3
 800ba12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba14:	801a      	strh	r2, [r3, #0]
 800ba16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba1a:	2b3e      	cmp	r3, #62	; 0x3e
 800ba1c:	d921      	bls.n	800ba62 <USB_EPStartXfer+0x5f8>
 800ba1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba22:	095b      	lsrs	r3, r3, #5
 800ba24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ba28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba2c:	f003 031f 	and.w	r3, r3, #31
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d104      	bne.n	800ba3e <USB_EPStartXfer+0x5d4>
 800ba34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ba3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba40:	881b      	ldrh	r3, [r3, #0]
 800ba42:	b29a      	uxth	r2, r3
 800ba44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	029b      	lsls	r3, r3, #10
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba5a:	b29a      	uxth	r2, r3
 800ba5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba5e:	801a      	strh	r2, [r3, #0]
 800ba60:	e056      	b.n	800bb10 <USB_EPStartXfer+0x6a6>
 800ba62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d10a      	bne.n	800ba80 <USB_EPStartXfer+0x616>
 800ba6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba6c:	881b      	ldrh	r3, [r3, #0]
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba78:	b29a      	uxth	r2, r3
 800ba7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba7c:	801a      	strh	r2, [r3, #0]
 800ba7e:	e047      	b.n	800bb10 <USB_EPStartXfer+0x6a6>
 800ba80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba84:	085b      	lsrs	r3, r3, #1
 800ba86:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ba8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba8e:	f003 0301 	and.w	r3, r3, #1
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d004      	beq.n	800baa0 <USB_EPStartXfer+0x636>
 800ba96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800baa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baa2:	881b      	ldrh	r3, [r3, #0]
 800baa4:	b29a      	uxth	r2, r3
 800baa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800baaa:	b29b      	uxth	r3, r3
 800baac:	029b      	lsls	r3, r3, #10
 800baae:	b29b      	uxth	r3, r3
 800bab0:	4313      	orrs	r3, r2
 800bab2:	b29a      	uxth	r2, r3
 800bab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bab6:	801a      	strh	r2, [r3, #0]
 800bab8:	e02a      	b.n	800bb10 <USB_EPStartXfer+0x6a6>
 800baba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800babe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	785b      	ldrb	r3, [r3, #1]
 800bac6:	2b01      	cmp	r3, #1
 800bac8:	d122      	bne.n	800bb10 <USB_EPStartXfer+0x6a6>
 800baca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bace:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	653b      	str	r3, [r7, #80]	; 0x50
 800bad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bada:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bae4:	b29b      	uxth	r3, r3
 800bae6:	461a      	mov	r2, r3
 800bae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baea:	4413      	add	r3, r2
 800baec:	653b      	str	r3, [r7, #80]	; 0x50
 800baee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	00da      	lsls	r2, r3, #3
 800bafc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bafe:	4413      	add	r3, r2
 800bb00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bb04:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb0e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bb10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	891b      	ldrh	r3, [r3, #8]
 800bb1c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	6959      	ldr	r1, [r3, #20]
 800bb2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bb36:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bb3a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bb3e:	6800      	ldr	r0, [r0, #0]
 800bb40:	f001 f97e 	bl	800ce40 <USB_WritePMA>
            ep->xfer_buff += len;
 800bb44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	695a      	ldr	r2, [r3, #20]
 800bb50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb54:	441a      	add	r2, r3
 800bb56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bb62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	6a1a      	ldr	r2, [r3, #32]
 800bb6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	691b      	ldr	r3, [r3, #16]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d90f      	bls.n	800bb9e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800bb7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	6a1a      	ldr	r2, [r3, #32]
 800bb8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb8e:	1ad2      	subs	r2, r2, r3
 800bb90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	621a      	str	r2, [r3, #32]
 800bb9c:	e00e      	b.n	800bbbc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800bb9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	6a1b      	ldr	r3, [r3, #32]
 800bbaa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800bbae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bbbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	643b      	str	r3, [r7, #64]	; 0x40
 800bbc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	785b      	ldrb	r3, [r3, #1]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d177      	bne.n	800bcc8 <USB_EPStartXfer+0x85e>
 800bbd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbe8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf8:	4413      	add	r3, r2
 800bbfa:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	00da      	lsls	r2, r3, #3
 800bc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc0c:	4413      	add	r3, r2
 800bc0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bc12:	637b      	str	r3, [r7, #52]	; 0x34
 800bc14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc16:	881b      	ldrh	r3, [r3, #0]
 800bc18:	b29b      	uxth	r3, r3
 800bc1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc1e:	b29a      	uxth	r2, r3
 800bc20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc22:	801a      	strh	r2, [r3, #0]
 800bc24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc28:	2b3e      	cmp	r3, #62	; 0x3e
 800bc2a:	d921      	bls.n	800bc70 <USB_EPStartXfer+0x806>
 800bc2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc30:	095b      	lsrs	r3, r3, #5
 800bc32:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bc36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc3a:	f003 031f 	and.w	r3, r3, #31
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d104      	bne.n	800bc4c <USB_EPStartXfer+0x7e2>
 800bc42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc46:	3b01      	subs	r3, #1
 800bc48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bc4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc4e:	881b      	ldrh	r3, [r3, #0]
 800bc50:	b29a      	uxth	r2, r3
 800bc52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	029b      	lsls	r3, r3, #10
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc68:	b29a      	uxth	r2, r3
 800bc6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc6c:	801a      	strh	r2, [r3, #0]
 800bc6e:	e050      	b.n	800bd12 <USB_EPStartXfer+0x8a8>
 800bc70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d10a      	bne.n	800bc8e <USB_EPStartXfer+0x824>
 800bc78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc7a:	881b      	ldrh	r3, [r3, #0]
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc86:	b29a      	uxth	r2, r3
 800bc88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc8a:	801a      	strh	r2, [r3, #0]
 800bc8c:	e041      	b.n	800bd12 <USB_EPStartXfer+0x8a8>
 800bc8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc92:	085b      	lsrs	r3, r3, #1
 800bc94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bc98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc9c:	f003 0301 	and.w	r3, r3, #1
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d004      	beq.n	800bcae <USB_EPStartXfer+0x844>
 800bca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bca8:	3301      	adds	r3, #1
 800bcaa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bcae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcb0:	881b      	ldrh	r3, [r3, #0]
 800bcb2:	b29a      	uxth	r2, r3
 800bcb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	029b      	lsls	r3, r3, #10
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	b29a      	uxth	r2, r3
 800bcc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcc4:	801a      	strh	r2, [r3, #0]
 800bcc6:	e024      	b.n	800bd12 <USB_EPStartXfer+0x8a8>
 800bcc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bccc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	785b      	ldrb	r3, [r3, #1]
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d11c      	bne.n	800bd12 <USB_EPStartXfer+0x8a8>
 800bcd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	461a      	mov	r2, r3
 800bcea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcec:	4413      	add	r3, r2
 800bcee:	643b      	str	r3, [r7, #64]	; 0x40
 800bcf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	00da      	lsls	r2, r3, #3
 800bcfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd00:	4413      	add	r3, r2
 800bd02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bd06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd0c:	b29a      	uxth	r2, r3
 800bd0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bd12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	895b      	ldrh	r3, [r3, #10]
 800bd1e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bd22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	6959      	ldr	r1, [r3, #20]
 800bd2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bd38:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bd3c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bd40:	6800      	ldr	r0, [r0, #0]
 800bd42:	f001 f87d 	bl	800ce40 <USB_WritePMA>
 800bd46:	e227      	b.n	800c198 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800bd48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	6a1b      	ldr	r3, [r3, #32]
 800bd54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800bd58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	4413      	add	r3, r2
 800bd72:	881b      	ldrh	r3, [r3, #0]
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bd7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd7e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800bd82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd8a:	681a      	ldr	r2, [r3, #0]
 800bd8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	781b      	ldrb	r3, [r3, #0]
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	441a      	add	r2, r3
 800bd9c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800bda0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bda4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bda8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bdb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdd4:	4413      	add	r3, r2
 800bdd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	00da      	lsls	r2, r3, #3
 800bde6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bde8:	4413      	add	r3, r2
 800bdea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bdee:	65bb      	str	r3, [r7, #88]	; 0x58
 800bdf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdf4:	b29a      	uxth	r2, r3
 800bdf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bdf8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bdfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	891b      	ldrh	r3, [r3, #8]
 800be06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800be0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	6959      	ldr	r1, [r3, #20]
 800be16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be1a:	b29b      	uxth	r3, r3
 800be1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800be20:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800be24:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800be28:	6800      	ldr	r0, [r0, #0]
 800be2a:	f001 f809 	bl	800ce40 <USB_WritePMA>
 800be2e:	e1b3      	b.n	800c198 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800be30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	6a1a      	ldr	r2, [r3, #32]
 800be3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be40:	1ad2      	subs	r2, r2, r3
 800be42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800be4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	4413      	add	r3, r2
 800be68:	881b      	ldrh	r3, [r3, #0]
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be70:	2b00      	cmp	r3, #0
 800be72:	f000 80c6 	beq.w	800c002 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800be76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	673b      	str	r3, [r7, #112]	; 0x70
 800be82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	785b      	ldrb	r3, [r3, #1]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d177      	bne.n	800bf82 <USB_EPStartXfer+0xb18>
 800be92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	66bb      	str	r3, [r7, #104]	; 0x68
 800be9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bea2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800beac:	b29b      	uxth	r3, r3
 800beae:	461a      	mov	r2, r3
 800beb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800beb2:	4413      	add	r3, r2
 800beb4:	66bb      	str	r3, [r7, #104]	; 0x68
 800beb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800beba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	00da      	lsls	r2, r3, #3
 800bec4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bec6:	4413      	add	r3, r2
 800bec8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800becc:	667b      	str	r3, [r7, #100]	; 0x64
 800bece:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bed0:	881b      	ldrh	r3, [r3, #0]
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bed8:	b29a      	uxth	r2, r3
 800beda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bedc:	801a      	strh	r2, [r3, #0]
 800bede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bee2:	2b3e      	cmp	r3, #62	; 0x3e
 800bee4:	d921      	bls.n	800bf2a <USB_EPStartXfer+0xac0>
 800bee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beea:	095b      	lsrs	r3, r3, #5
 800beec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bef4:	f003 031f 	and.w	r3, r3, #31
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d104      	bne.n	800bf06 <USB_EPStartXfer+0xa9c>
 800befc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bf00:	3b01      	subs	r3, #1
 800bf02:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bf06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf08:	881b      	ldrh	r3, [r3, #0]
 800bf0a:	b29a      	uxth	r2, r3
 800bf0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	029b      	lsls	r3, r3, #10
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	4313      	orrs	r3, r2
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf22:	b29a      	uxth	r2, r3
 800bf24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf26:	801a      	strh	r2, [r3, #0]
 800bf28:	e050      	b.n	800bfcc <USB_EPStartXfer+0xb62>
 800bf2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d10a      	bne.n	800bf48 <USB_EPStartXfer+0xade>
 800bf32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf34:	881b      	ldrh	r3, [r3, #0]
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf40:	b29a      	uxth	r2, r3
 800bf42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf44:	801a      	strh	r2, [r3, #0]
 800bf46:	e041      	b.n	800bfcc <USB_EPStartXfer+0xb62>
 800bf48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf4c:	085b      	lsrs	r3, r3, #1
 800bf4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bf52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf56:	f003 0301 	and.w	r3, r3, #1
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d004      	beq.n	800bf68 <USB_EPStartXfer+0xafe>
 800bf5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bf62:	3301      	adds	r3, #1
 800bf64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bf68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf6a:	881b      	ldrh	r3, [r3, #0]
 800bf6c:	b29a      	uxth	r2, r3
 800bf6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	029b      	lsls	r3, r3, #10
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	b29a      	uxth	r2, r3
 800bf7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf7e:	801a      	strh	r2, [r3, #0]
 800bf80:	e024      	b.n	800bfcc <USB_EPStartXfer+0xb62>
 800bf82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	785b      	ldrb	r3, [r3, #1]
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d11c      	bne.n	800bfcc <USB_EPStartXfer+0xb62>
 800bf92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bfa6:	4413      	add	r3, r2
 800bfa8:	673b      	str	r3, [r7, #112]	; 0x70
 800bfaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	00da      	lsls	r2, r3, #3
 800bfb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bfba:	4413      	add	r3, r2
 800bfbc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bfc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bfc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfc6:	b29a      	uxth	r2, r3
 800bfc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bfcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	895b      	ldrh	r3, [r3, #10]
 800bfd8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bfdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	6959      	ldr	r1, [r3, #20]
 800bfe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bff2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bff6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bffa:	6800      	ldr	r0, [r0, #0]
 800bffc:	f000 ff20 	bl	800ce40 <USB_WritePMA>
 800c000:	e0ca      	b.n	800c198 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	785b      	ldrb	r3, [r3, #1]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d177      	bne.n	800c102 <USB_EPStartXfer+0xc98>
 800c012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c016:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c01e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c022:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	461a      	mov	r2, r3
 800c030:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c032:	4413      	add	r3, r2
 800c034:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c03a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	00da      	lsls	r2, r3, #3
 800c044:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c046:	4413      	add	r3, r2
 800c048:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c04c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c04e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c050:	881b      	ldrh	r3, [r3, #0]
 800c052:	b29b      	uxth	r3, r3
 800c054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c058:	b29a      	uxth	r2, r3
 800c05a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c05c:	801a      	strh	r2, [r3, #0]
 800c05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c062:	2b3e      	cmp	r3, #62	; 0x3e
 800c064:	d921      	bls.n	800c0aa <USB_EPStartXfer+0xc40>
 800c066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c06a:	095b      	lsrs	r3, r3, #5
 800c06c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c074:	f003 031f 	and.w	r3, r3, #31
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d104      	bne.n	800c086 <USB_EPStartXfer+0xc1c>
 800c07c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c080:	3b01      	subs	r3, #1
 800c082:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c086:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c088:	881b      	ldrh	r3, [r3, #0]
 800c08a:	b29a      	uxth	r2, r3
 800c08c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c090:	b29b      	uxth	r3, r3
 800c092:	029b      	lsls	r3, r3, #10
 800c094:	b29b      	uxth	r3, r3
 800c096:	4313      	orrs	r3, r2
 800c098:	b29b      	uxth	r3, r3
 800c09a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c09e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0a2:	b29a      	uxth	r2, r3
 800c0a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0a6:	801a      	strh	r2, [r3, #0]
 800c0a8:	e05c      	b.n	800c164 <USB_EPStartXfer+0xcfa>
 800c0aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d10a      	bne.n	800c0c8 <USB_EPStartXfer+0xc5e>
 800c0b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0b4:	881b      	ldrh	r3, [r3, #0]
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0c0:	b29a      	uxth	r2, r3
 800c0c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0c4:	801a      	strh	r2, [r3, #0]
 800c0c6:	e04d      	b.n	800c164 <USB_EPStartXfer+0xcfa>
 800c0c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0cc:	085b      	lsrs	r3, r3, #1
 800c0ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c0d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0d6:	f003 0301 	and.w	r3, r3, #1
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d004      	beq.n	800c0e8 <USB_EPStartXfer+0xc7e>
 800c0de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c0e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0ea:	881b      	ldrh	r3, [r3, #0]
 800c0ec:	b29a      	uxth	r2, r3
 800c0ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c0f2:	b29b      	uxth	r3, r3
 800c0f4:	029b      	lsls	r3, r3, #10
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	b29a      	uxth	r2, r3
 800c0fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0fe:	801a      	strh	r2, [r3, #0]
 800c100:	e030      	b.n	800c164 <USB_EPStartXfer+0xcfa>
 800c102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	785b      	ldrb	r3, [r3, #1]
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d128      	bne.n	800c164 <USB_EPStartXfer+0xcfa>
 800c112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c116:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c124:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c12e:	b29b      	uxth	r3, r3
 800c130:	461a      	mov	r2, r3
 800c132:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c136:	4413      	add	r3, r2
 800c138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c13c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	00da      	lsls	r2, r3, #3
 800c14a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c14e:	4413      	add	r3, r2
 800c150:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c154:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c15c:	b29a      	uxth	r2, r3
 800c15e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c162:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	891b      	ldrh	r3, [r3, #8]
 800c170:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	6959      	ldr	r1, [r3, #20]
 800c180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c184:	b29b      	uxth	r3, r3
 800c186:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c18a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c18e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c192:	6800      	ldr	r0, [r0, #0]
 800c194:	f000 fe54 	bl	800ce40 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c19c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1a0:	681a      	ldr	r2, [r3, #0]
 800c1a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	4413      	add	r3, r2
 800c1b2:	881b      	ldrh	r3, [r3, #0]
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c1ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1be:	817b      	strh	r3, [r7, #10]
 800c1c0:	897b      	ldrh	r3, [r7, #10]
 800c1c2:	f083 0310 	eor.w	r3, r3, #16
 800c1c6:	817b      	strh	r3, [r7, #10]
 800c1c8:	897b      	ldrh	r3, [r7, #10]
 800c1ca:	f083 0320 	eor.w	r3, r3, #32
 800c1ce:	817b      	strh	r3, [r7, #10]
 800c1d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	009b      	lsls	r3, r3, #2
 800c1e8:	441a      	add	r2, r3
 800c1ea:	897b      	ldrh	r3, [r7, #10]
 800c1ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c1f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c1f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c1f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1fc:	b29b      	uxth	r3, r3
 800c1fe:	8013      	strh	r3, [r2, #0]
 800c200:	f000 bcde 	b.w	800cbc0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	7b1b      	ldrb	r3, [r3, #12]
 800c210:	2b00      	cmp	r3, #0
 800c212:	f040 80bb 	bne.w	800c38c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c21a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	699a      	ldr	r2, [r3, #24]
 800c222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	691b      	ldr	r3, [r3, #16]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d917      	bls.n	800c262 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800c232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	691b      	ldr	r3, [r3, #16]
 800c23e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800c242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	699a      	ldr	r2, [r3, #24]
 800c24e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c252:	1ad2      	subs	r2, r2, r3
 800c254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	619a      	str	r2, [r3, #24]
 800c260:	e00e      	b.n	800c280 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800c262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	699b      	ldr	r3, [r3, #24]
 800c26e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800c272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	2200      	movs	r2, #0
 800c27e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c284:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c28e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	461a      	mov	r2, r3
 800c2a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c2a4:	4413      	add	r3, r2
 800c2a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c2aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	00da      	lsls	r2, r3, #3
 800c2b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c2bc:	4413      	add	r3, r2
 800c2be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c2c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c2c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c2ca:	881b      	ldrh	r3, [r3, #0]
 800c2cc:	b29b      	uxth	r3, r3
 800c2ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2d2:	b29a      	uxth	r2, r3
 800c2d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c2d8:	801a      	strh	r2, [r3, #0]
 800c2da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2de:	2b3e      	cmp	r3, #62	; 0x3e
 800c2e0:	d924      	bls.n	800c32c <USB_EPStartXfer+0xec2>
 800c2e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2e6:	095b      	lsrs	r3, r3, #5
 800c2e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2f0:	f003 031f 	and.w	r3, r3, #31
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d104      	bne.n	800c302 <USB_EPStartXfer+0xe98>
 800c2f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c2fc:	3b01      	subs	r3, #1
 800c2fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c302:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c306:	881b      	ldrh	r3, [r3, #0]
 800c308:	b29a      	uxth	r2, r3
 800c30a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c30e:	b29b      	uxth	r3, r3
 800c310:	029b      	lsls	r3, r3, #10
 800c312:	b29b      	uxth	r3, r3
 800c314:	4313      	orrs	r3, r2
 800c316:	b29b      	uxth	r3, r3
 800c318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c31c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c320:	b29a      	uxth	r2, r3
 800c322:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c326:	801a      	strh	r2, [r3, #0]
 800c328:	f000 bc10 	b.w	800cb4c <USB_EPStartXfer+0x16e2>
 800c32c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c330:	2b00      	cmp	r3, #0
 800c332:	d10c      	bne.n	800c34e <USB_EPStartXfer+0xee4>
 800c334:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c338:	881b      	ldrh	r3, [r3, #0]
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c344:	b29a      	uxth	r2, r3
 800c346:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c34a:	801a      	strh	r2, [r3, #0]
 800c34c:	e3fe      	b.n	800cb4c <USB_EPStartXfer+0x16e2>
 800c34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c352:	085b      	lsrs	r3, r3, #1
 800c354:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c35c:	f003 0301 	and.w	r3, r3, #1
 800c360:	2b00      	cmp	r3, #0
 800c362:	d004      	beq.n	800c36e <USB_EPStartXfer+0xf04>
 800c364:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c368:	3301      	adds	r3, #1
 800c36a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c36e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c372:	881b      	ldrh	r3, [r3, #0]
 800c374:	b29a      	uxth	r2, r3
 800c376:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c37a:	b29b      	uxth	r3, r3
 800c37c:	029b      	lsls	r3, r3, #10
 800c37e:	b29b      	uxth	r3, r3
 800c380:	4313      	orrs	r3, r2
 800c382:	b29a      	uxth	r2, r3
 800c384:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c388:	801a      	strh	r2, [r3, #0]
 800c38a:	e3df      	b.n	800cb4c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c38c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	78db      	ldrb	r3, [r3, #3]
 800c398:	2b02      	cmp	r3, #2
 800c39a:	f040 8218 	bne.w	800c7ce <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c39e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	785b      	ldrb	r3, [r3, #1]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	f040 809d 	bne.w	800c4ea <USB_EPStartXfer+0x1080>
 800c3b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c3be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c3d4:	4413      	add	r3, r2
 800c3d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c3da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	00da      	lsls	r2, r3, #3
 800c3e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c3ec:	4413      	add	r3, r2
 800c3ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c3f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c3f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3fa:	881b      	ldrh	r3, [r3, #0]
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c402:	b29a      	uxth	r2, r3
 800c404:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c408:	801a      	strh	r2, [r3, #0]
 800c40a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c40e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	691b      	ldr	r3, [r3, #16]
 800c416:	2b3e      	cmp	r3, #62	; 0x3e
 800c418:	d92b      	bls.n	800c472 <USB_EPStartXfer+0x1008>
 800c41a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c41e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	691b      	ldr	r3, [r3, #16]
 800c426:	095b      	lsrs	r3, r3, #5
 800c428:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c42c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	691b      	ldr	r3, [r3, #16]
 800c438:	f003 031f 	and.w	r3, r3, #31
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d104      	bne.n	800c44a <USB_EPStartXfer+0xfe0>
 800c440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c444:	3b01      	subs	r3, #1
 800c446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c44a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c44e:	881b      	ldrh	r3, [r3, #0]
 800c450:	b29a      	uxth	r2, r3
 800c452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c456:	b29b      	uxth	r3, r3
 800c458:	029b      	lsls	r3, r3, #10
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	4313      	orrs	r3, r2
 800c45e:	b29b      	uxth	r3, r3
 800c460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c468:	b29a      	uxth	r2, r3
 800c46a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c46e:	801a      	strh	r2, [r3, #0]
 800c470:	e070      	b.n	800c554 <USB_EPStartXfer+0x10ea>
 800c472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	691b      	ldr	r3, [r3, #16]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d10c      	bne.n	800c49c <USB_EPStartXfer+0x1032>
 800c482:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c486:	881b      	ldrh	r3, [r3, #0]
 800c488:	b29b      	uxth	r3, r3
 800c48a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c48e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c492:	b29a      	uxth	r2, r3
 800c494:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c498:	801a      	strh	r2, [r3, #0]
 800c49a:	e05b      	b.n	800c554 <USB_EPStartXfer+0x10ea>
 800c49c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	691b      	ldr	r3, [r3, #16]
 800c4a8:	085b      	lsrs	r3, r3, #1
 800c4aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c4ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	691b      	ldr	r3, [r3, #16]
 800c4ba:	f003 0301 	and.w	r3, r3, #1
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d004      	beq.n	800c4cc <USB_EPStartXfer+0x1062>
 800c4c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c4cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c4d0:	881b      	ldrh	r3, [r3, #0]
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	029b      	lsls	r3, r3, #10
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	b29a      	uxth	r2, r3
 800c4e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c4e6:	801a      	strh	r2, [r3, #0]
 800c4e8:	e034      	b.n	800c554 <USB_EPStartXfer+0x10ea>
 800c4ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	785b      	ldrb	r3, [r3, #1]
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d12c      	bne.n	800c554 <USB_EPStartXfer+0x10ea>
 800c4fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c50c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c516:	b29b      	uxth	r3, r3
 800c518:	461a      	mov	r2, r3
 800c51a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c51e:	4413      	add	r3, r2
 800c520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	00da      	lsls	r2, r3, #3
 800c532:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c536:	4413      	add	r3, r2
 800c538:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c53c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	691b      	ldr	r3, [r3, #16]
 800c54c:	b29a      	uxth	r2, r3
 800c54e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c552:	801a      	strh	r2, [r3, #0]
 800c554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c558:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	785b      	ldrb	r3, [r3, #1]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	f040 809d 	bne.w	800c6ae <USB_EPStartXfer+0x1244>
 800c574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c578:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c586:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c590:	b29b      	uxth	r3, r3
 800c592:	461a      	mov	r2, r3
 800c594:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c598:	4413      	add	r3, r2
 800c59a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c59e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	00da      	lsls	r2, r3, #3
 800c5ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c5b0:	4413      	add	r3, r2
 800c5b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c5b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c5ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c5be:	881b      	ldrh	r3, [r3, #0]
 800c5c0:	b29b      	uxth	r3, r3
 800c5c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c5c6:	b29a      	uxth	r2, r3
 800c5c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c5cc:	801a      	strh	r2, [r3, #0]
 800c5ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	691b      	ldr	r3, [r3, #16]
 800c5da:	2b3e      	cmp	r3, #62	; 0x3e
 800c5dc:	d92b      	bls.n	800c636 <USB_EPStartXfer+0x11cc>
 800c5de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	691b      	ldr	r3, [r3, #16]
 800c5ea:	095b      	lsrs	r3, r3, #5
 800c5ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c5f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	691b      	ldr	r3, [r3, #16]
 800c5fc:	f003 031f 	and.w	r3, r3, #31
 800c600:	2b00      	cmp	r3, #0
 800c602:	d104      	bne.n	800c60e <USB_EPStartXfer+0x11a4>
 800c604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c608:	3b01      	subs	r3, #1
 800c60a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c60e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c612:	881b      	ldrh	r3, [r3, #0]
 800c614:	b29a      	uxth	r2, r3
 800c616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	029b      	lsls	r3, r3, #10
 800c61e:	b29b      	uxth	r3, r3
 800c620:	4313      	orrs	r3, r2
 800c622:	b29b      	uxth	r3, r3
 800c624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c62c:	b29a      	uxth	r2, r3
 800c62e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c632:	801a      	strh	r2, [r3, #0]
 800c634:	e069      	b.n	800c70a <USB_EPStartXfer+0x12a0>
 800c636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c63a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	691b      	ldr	r3, [r3, #16]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d10c      	bne.n	800c660 <USB_EPStartXfer+0x11f6>
 800c646:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c64a:	881b      	ldrh	r3, [r3, #0]
 800c64c:	b29b      	uxth	r3, r3
 800c64e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c656:	b29a      	uxth	r2, r3
 800c658:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c65c:	801a      	strh	r2, [r3, #0]
 800c65e:	e054      	b.n	800c70a <USB_EPStartXfer+0x12a0>
 800c660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	691b      	ldr	r3, [r3, #16]
 800c66c:	085b      	lsrs	r3, r3, #1
 800c66e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	691b      	ldr	r3, [r3, #16]
 800c67e:	f003 0301 	and.w	r3, r3, #1
 800c682:	2b00      	cmp	r3, #0
 800c684:	d004      	beq.n	800c690 <USB_EPStartXfer+0x1226>
 800c686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c68a:	3301      	adds	r3, #1
 800c68c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c690:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c694:	881b      	ldrh	r3, [r3, #0]
 800c696:	b29a      	uxth	r2, r3
 800c698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	029b      	lsls	r3, r3, #10
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	b29a      	uxth	r2, r3
 800c6a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c6aa:	801a      	strh	r2, [r3, #0]
 800c6ac:	e02d      	b.n	800c70a <USB_EPStartXfer+0x12a0>
 800c6ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	785b      	ldrb	r3, [r3, #1]
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d125      	bne.n	800c70a <USB_EPStartXfer+0x12a0>
 800c6be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c6d4:	4413      	add	r3, r2
 800c6d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c6da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	00da      	lsls	r2, r3, #3
 800c6e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c6ec:	4413      	add	r3, r2
 800c6ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c6f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c6f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	691b      	ldr	r3, [r3, #16]
 800c702:	b29a      	uxth	r2, r3
 800c704:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c708:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c70a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c70e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	69db      	ldr	r3, [r3, #28]
 800c716:	2b00      	cmp	r3, #0
 800c718:	f000 8218 	beq.w	800cb4c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c71c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c720:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c724:	681a      	ldr	r2, [r3, #0]
 800c726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c72a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	009b      	lsls	r3, r3, #2
 800c734:	4413      	add	r3, r2
 800c736:	881b      	ldrh	r3, [r3, #0]
 800c738:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c73c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c744:	2b00      	cmp	r3, #0
 800c746:	d005      	beq.n	800c754 <USB_EPStartXfer+0x12ea>
 800c748:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c74c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c750:	2b00      	cmp	r3, #0
 800c752:	d10d      	bne.n	800c770 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c754:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	f040 81f5 	bne.w	800cb4c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c762:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	f040 81ee 	bne.w	800cb4c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c774:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c77e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	009b      	lsls	r3, r3, #2
 800c788:	4413      	add	r3, r2
 800c78a:	881b      	ldrh	r3, [r3, #0]
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c796:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c79a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c79e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7a2:	681a      	ldr	r2, [r3, #0]
 800c7a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	441a      	add	r2, r3
 800c7b4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c7b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c7c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c7c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c7c8:	b29b      	uxth	r3, r3
 800c7ca:	8013      	strh	r3, [r2, #0]
 800c7cc:	e1be      	b.n	800cb4c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c7ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	78db      	ldrb	r3, [r3, #3]
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	f040 81b4 	bne.w	800cb48 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c7e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	699a      	ldr	r2, [r3, #24]
 800c7ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	691b      	ldr	r3, [r3, #16]
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d917      	bls.n	800c82c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c7fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	691b      	ldr	r3, [r3, #16]
 800c808:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800c80c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	699a      	ldr	r2, [r3, #24]
 800c818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c81c:	1ad2      	subs	r2, r2, r3
 800c81e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	619a      	str	r2, [r3, #24]
 800c82a:	e00e      	b.n	800c84a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c82c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	699b      	ldr	r3, [r3, #24]
 800c838:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800c83c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	2200      	movs	r2, #0
 800c848:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c84a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c84e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	785b      	ldrb	r3, [r3, #1]
 800c856:	2b00      	cmp	r3, #0
 800c858:	f040 8085 	bne.w	800c966 <USB_EPStartXfer+0x14fc>
 800c85c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c860:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c86a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c86e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c878:	b29b      	uxth	r3, r3
 800c87a:	461a      	mov	r2, r3
 800c87c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c880:	4413      	add	r3, r2
 800c882:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c88a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	00da      	lsls	r2, r3, #3
 800c894:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c898:	4413      	add	r3, r2
 800c89a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c89e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c8a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c8a6:	881b      	ldrh	r3, [r3, #0]
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c8ae:	b29a      	uxth	r2, r3
 800c8b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c8b4:	801a      	strh	r2, [r3, #0]
 800c8b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8ba:	2b3e      	cmp	r3, #62	; 0x3e
 800c8bc:	d923      	bls.n	800c906 <USB_EPStartXfer+0x149c>
 800c8be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8c2:	095b      	lsrs	r3, r3, #5
 800c8c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c8c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8cc:	f003 031f 	and.w	r3, r3, #31
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d104      	bne.n	800c8de <USB_EPStartXfer+0x1474>
 800c8d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c8de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c8e2:	881b      	ldrh	r3, [r3, #0]
 800c8e4:	b29a      	uxth	r2, r3
 800c8e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8ea:	b29b      	uxth	r3, r3
 800c8ec:	029b      	lsls	r3, r3, #10
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	b29b      	uxth	r3, r3
 800c8f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8fc:	b29a      	uxth	r2, r3
 800c8fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c902:	801a      	strh	r2, [r3, #0]
 800c904:	e060      	b.n	800c9c8 <USB_EPStartXfer+0x155e>
 800c906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d10c      	bne.n	800c928 <USB_EPStartXfer+0x14be>
 800c90e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c912:	881b      	ldrh	r3, [r3, #0]
 800c914:	b29b      	uxth	r3, r3
 800c916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c91a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c91e:	b29a      	uxth	r2, r3
 800c920:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c924:	801a      	strh	r2, [r3, #0]
 800c926:	e04f      	b.n	800c9c8 <USB_EPStartXfer+0x155e>
 800c928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c92c:	085b      	lsrs	r3, r3, #1
 800c92e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c936:	f003 0301 	and.w	r3, r3, #1
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d004      	beq.n	800c948 <USB_EPStartXfer+0x14de>
 800c93e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c942:	3301      	adds	r3, #1
 800c944:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c948:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c94c:	881b      	ldrh	r3, [r3, #0]
 800c94e:	b29a      	uxth	r2, r3
 800c950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c954:	b29b      	uxth	r3, r3
 800c956:	029b      	lsls	r3, r3, #10
 800c958:	b29b      	uxth	r3, r3
 800c95a:	4313      	orrs	r3, r2
 800c95c:	b29a      	uxth	r2, r3
 800c95e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c962:	801a      	strh	r2, [r3, #0]
 800c964:	e030      	b.n	800c9c8 <USB_EPStartXfer+0x155e>
 800c966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c96a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	785b      	ldrb	r3, [r3, #1]
 800c972:	2b01      	cmp	r3, #1
 800c974:	d128      	bne.n	800c9c8 <USB_EPStartXfer+0x155e>
 800c976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c97a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c988:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c992:	b29b      	uxth	r3, r3
 800c994:	461a      	mov	r2, r3
 800c996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c99a:	4413      	add	r3, r2
 800c99c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c9a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	781b      	ldrb	r3, [r3, #0]
 800c9ac:	00da      	lsls	r2, r3, #3
 800c9ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c9b2:	4413      	add	r3, r2
 800c9b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c9b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c9bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9c0:	b29a      	uxth	r2, r3
 800c9c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c9c6:	801a      	strh	r2, [r3, #0]
 800c9c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c9d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	785b      	ldrb	r3, [r3, #1]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	f040 8085 	bne.w	800caf2 <USB_EPStartXfer+0x1688>
 800c9e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c9f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	461a      	mov	r2, r3
 800ca08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ca0c:	4413      	add	r3, r2
 800ca0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ca12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	00da      	lsls	r2, r3, #3
 800ca20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ca24:	4413      	add	r3, r2
 800ca26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ca2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ca2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ca32:	881b      	ldrh	r3, [r3, #0]
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca3a:	b29a      	uxth	r2, r3
 800ca3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ca40:	801a      	strh	r2, [r3, #0]
 800ca42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca46:	2b3e      	cmp	r3, #62	; 0x3e
 800ca48:	d923      	bls.n	800ca92 <USB_EPStartXfer+0x1628>
 800ca4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca4e:	095b      	lsrs	r3, r3, #5
 800ca50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ca54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca58:	f003 031f 	and.w	r3, r3, #31
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d104      	bne.n	800ca6a <USB_EPStartXfer+0x1600>
 800ca60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca64:	3b01      	subs	r3, #1
 800ca66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ca6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ca6e:	881b      	ldrh	r3, [r3, #0]
 800ca70:	b29a      	uxth	r2, r3
 800ca72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	029b      	lsls	r3, r3, #10
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	b29b      	uxth	r3, r3
 800ca80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca88:	b29a      	uxth	r2, r3
 800ca8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ca8e:	801a      	strh	r2, [r3, #0]
 800ca90:	e05c      	b.n	800cb4c <USB_EPStartXfer+0x16e2>
 800ca92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d10c      	bne.n	800cab4 <USB_EPStartXfer+0x164a>
 800ca9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ca9e:	881b      	ldrh	r3, [r3, #0]
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800caa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800caaa:	b29a      	uxth	r2, r3
 800caac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cab0:	801a      	strh	r2, [r3, #0]
 800cab2:	e04b      	b.n	800cb4c <USB_EPStartXfer+0x16e2>
 800cab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cab8:	085b      	lsrs	r3, r3, #1
 800caba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cabe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cac2:	f003 0301 	and.w	r3, r3, #1
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d004      	beq.n	800cad4 <USB_EPStartXfer+0x166a>
 800caca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cace:	3301      	adds	r3, #1
 800cad0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cad4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cad8:	881b      	ldrh	r3, [r3, #0]
 800cada:	b29a      	uxth	r2, r3
 800cadc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	029b      	lsls	r3, r3, #10
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	4313      	orrs	r3, r2
 800cae8:	b29a      	uxth	r2, r3
 800caea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800caee:	801a      	strh	r2, [r3, #0]
 800caf0:	e02c      	b.n	800cb4c <USB_EPStartXfer+0x16e2>
 800caf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800caf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	785b      	ldrb	r3, [r3, #1]
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d124      	bne.n	800cb4c <USB_EPStartXfer+0x16e2>
 800cb02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	461a      	mov	r2, r3
 800cb14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cb18:	4413      	add	r3, r2
 800cb1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cb1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	00da      	lsls	r2, r3, #3
 800cb2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cb30:	4413      	add	r3, r2
 800cb32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cb36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cb3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb3e:	b29a      	uxth	r2, r3
 800cb40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cb44:	801a      	strh	r2, [r3, #0]
 800cb46:	e001      	b.n	800cb4c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	e03a      	b.n	800cbc2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cb4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	009b      	lsls	r3, r3, #2
 800cb64:	4413      	add	r3, r2
 800cb66:	881b      	ldrh	r3, [r3, #0]
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb72:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800cb76:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cb7a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cb7e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800cb82:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cb86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cb8a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800cb8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	009b      	lsls	r3, r3, #2
 800cba6:	441a      	add	r2, r3
 800cba8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cbac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cbb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cbb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cbc0:	2300      	movs	r3, #0
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b085      	sub	sp, #20
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	785b      	ldrb	r3, [r3, #1]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d020      	beq.n	800cc20 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800cbde:	687a      	ldr	r2, [r7, #4]
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	4413      	add	r3, r2
 800cbe8:	881b      	ldrh	r3, [r3, #0]
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cbf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbf4:	81bb      	strh	r3, [r7, #12]
 800cbf6:	89bb      	ldrh	r3, [r7, #12]
 800cbf8:	f083 0310 	eor.w	r3, r3, #16
 800cbfc:	81bb      	strh	r3, [r7, #12]
 800cbfe:	687a      	ldr	r2, [r7, #4]
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	441a      	add	r2, r3
 800cc08:	89bb      	ldrh	r3, [r7, #12]
 800cc0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	8013      	strh	r3, [r2, #0]
 800cc1e:	e01f      	b.n	800cc60 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	009b      	lsls	r3, r3, #2
 800cc28:	4413      	add	r3, r2
 800cc2a:	881b      	ldrh	r3, [r3, #0]
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc36:	81fb      	strh	r3, [r7, #14]
 800cc38:	89fb      	ldrh	r3, [r7, #14]
 800cc3a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cc3e:	81fb      	strh	r3, [r7, #14]
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	781b      	ldrb	r3, [r3, #0]
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	441a      	add	r2, r3
 800cc4a:	89fb      	ldrh	r3, [r7, #14]
 800cc4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cc60:	2300      	movs	r3, #0
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3714      	adds	r7, #20
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr

0800cc6e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cc6e:	b480      	push	{r7}
 800cc70:	b087      	sub	sp, #28
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
 800cc76:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	7b1b      	ldrb	r3, [r3, #12]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	f040 809d 	bne.w	800cdbc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	785b      	ldrb	r3, [r3, #1]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d04c      	beq.n	800cd24 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cc8a:	687a      	ldr	r2, [r7, #4]
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	4413      	add	r3, r2
 800cc94:	881b      	ldrh	r3, [r3, #0]
 800cc96:	823b      	strh	r3, [r7, #16]
 800cc98:	8a3b      	ldrh	r3, [r7, #16]
 800cc9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d01b      	beq.n	800ccda <USB_EPClearStall+0x6c>
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	009b      	lsls	r3, r3, #2
 800ccaa:	4413      	add	r3, r2
 800ccac:	881b      	ldrh	r3, [r3, #0]
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ccb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccb8:	81fb      	strh	r3, [r7, #14]
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	441a      	add	r2, r3
 800ccc4:	89fb      	ldrh	r3, [r7, #14]
 800ccc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ccca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ccce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ccd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ccd6:	b29b      	uxth	r3, r3
 800ccd8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	78db      	ldrb	r3, [r3, #3]
 800ccde:	2b01      	cmp	r3, #1
 800cce0:	d06c      	beq.n	800cdbc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	4413      	add	r3, r2
 800ccec:	881b      	ldrh	r3, [r3, #0]
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ccf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ccf8:	81bb      	strh	r3, [r7, #12]
 800ccfa:	89bb      	ldrh	r3, [r7, #12]
 800ccfc:	f083 0320 	eor.w	r3, r3, #32
 800cd00:	81bb      	strh	r3, [r7, #12]
 800cd02:	687a      	ldr	r2, [r7, #4]
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	009b      	lsls	r3, r3, #2
 800cd0a:	441a      	add	r2, r3
 800cd0c:	89bb      	ldrh	r3, [r7, #12]
 800cd0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	8013      	strh	r3, [r2, #0]
 800cd22:	e04b      	b.n	800cdbc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	4413      	add	r3, r2
 800cd2e:	881b      	ldrh	r3, [r3, #0]
 800cd30:	82fb      	strh	r3, [r7, #22]
 800cd32:	8afb      	ldrh	r3, [r7, #22]
 800cd34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d01b      	beq.n	800cd74 <USB_EPClearStall+0x106>
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	009b      	lsls	r3, r3, #2
 800cd44:	4413      	add	r3, r2
 800cd46:	881b      	ldrh	r3, [r3, #0]
 800cd48:	b29b      	uxth	r3, r3
 800cd4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd52:	82bb      	strh	r3, [r7, #20]
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	009b      	lsls	r3, r3, #2
 800cd5c:	441a      	add	r2, r3
 800cd5e:	8abb      	ldrh	r3, [r7, #20]
 800cd60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cd6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd70:	b29b      	uxth	r3, r3
 800cd72:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	4413      	add	r3, r2
 800cd7e:	881b      	ldrh	r3, [r3, #0]
 800cd80:	b29b      	uxth	r3, r3
 800cd82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cd86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd8a:	827b      	strh	r3, [r7, #18]
 800cd8c:	8a7b      	ldrh	r3, [r7, #18]
 800cd8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cd92:	827b      	strh	r3, [r7, #18]
 800cd94:	8a7b      	ldrh	r3, [r7, #18]
 800cd96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cd9a:	827b      	strh	r3, [r7, #18]
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	441a      	add	r2, r3
 800cda6:	8a7b      	ldrh	r3, [r7, #18]
 800cda8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cdac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cdb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800cdbc:	2300      	movs	r3, #0
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	371c      	adds	r7, #28
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc8:	4770      	bx	lr

0800cdca <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800cdca:	b480      	push	{r7}
 800cdcc:	b083      	sub	sp, #12
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	6078      	str	r0, [r7, #4]
 800cdd2:	460b      	mov	r3, r1
 800cdd4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800cdd6:	78fb      	ldrb	r3, [r7, #3]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d103      	bne.n	800cde4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2280      	movs	r2, #128	; 0x80
 800cde0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800cde4:	2300      	movs	r3, #0
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	370c      	adds	r7, #12
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr

0800cdf2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800cdf2:	b480      	push	{r7}
 800cdf4:	b083      	sub	sp, #12
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ce00:	b29b      	uxth	r3, r3
 800ce02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce0a:	b29a      	uxth	r2, r3
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ce12:	2300      	movs	r3, #0
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	370c      	adds	r7, #12
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr

0800ce20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b085      	sub	sp, #20
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ce32:	68fb      	ldr	r3, [r7, #12]
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3714      	adds	r7, #20
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr

0800ce40 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b08b      	sub	sp, #44	; 0x2c
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	4611      	mov	r1, r2
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	460b      	mov	r3, r1
 800ce50:	80fb      	strh	r3, [r7, #6]
 800ce52:	4613      	mov	r3, r2
 800ce54:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ce56:	88bb      	ldrh	r3, [r7, #4]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	085b      	lsrs	r3, r3, #1
 800ce5c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ce66:	88fa      	ldrh	r2, [r7, #6]
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	4413      	add	r3, r2
 800ce6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce70:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ce72:	69bb      	ldr	r3, [r7, #24]
 800ce74:	627b      	str	r3, [r7, #36]	; 0x24
 800ce76:	e01b      	b.n	800ceb0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	3301      	adds	r3, #1
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	021b      	lsls	r3, r3, #8
 800ce86:	b21a      	sxth	r2, r3
 800ce88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ce8c:	4313      	orrs	r3, r2
 800ce8e:	b21b      	sxth	r3, r3
 800ce90:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ce92:	6a3b      	ldr	r3, [r7, #32]
 800ce94:	8a7a      	ldrh	r2, [r7, #18]
 800ce96:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ce98:	6a3b      	ldr	r3, [r7, #32]
 800ce9a:	3302      	adds	r3, #2
 800ce9c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ce9e:	69fb      	ldr	r3, [r7, #28]
 800cea0:	3301      	adds	r3, #1
 800cea2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	3301      	adds	r3, #1
 800cea8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ceaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceac:	3b01      	subs	r3, #1
 800ceae:	627b      	str	r3, [r7, #36]	; 0x24
 800ceb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d1e0      	bne.n	800ce78 <USB_WritePMA+0x38>
  }
}
 800ceb6:	bf00      	nop
 800ceb8:	bf00      	nop
 800ceba:	372c      	adds	r7, #44	; 0x2c
 800cebc:	46bd      	mov	sp, r7
 800cebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec2:	4770      	bx	lr

0800cec4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b08b      	sub	sp, #44	; 0x2c
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	60f8      	str	r0, [r7, #12]
 800cecc:	60b9      	str	r1, [r7, #8]
 800cece:	4611      	mov	r1, r2
 800ced0:	461a      	mov	r2, r3
 800ced2:	460b      	mov	r3, r1
 800ced4:	80fb      	strh	r3, [r7, #6]
 800ced6:	4613      	mov	r3, r2
 800ced8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ceda:	88bb      	ldrh	r3, [r7, #4]
 800cedc:	085b      	lsrs	r3, r3, #1
 800cede:	b29b      	uxth	r3, r3
 800cee0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ceea:	88fa      	ldrh	r2, [r7, #6]
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	4413      	add	r3, r2
 800cef0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cef4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	627b      	str	r3, [r7, #36]	; 0x24
 800cefa:	e018      	b.n	800cf2e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800cefc:	6a3b      	ldr	r3, [r7, #32]
 800cefe:	881b      	ldrh	r3, [r3, #0]
 800cf00:	b29b      	uxth	r3, r3
 800cf02:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800cf04:	6a3b      	ldr	r3, [r7, #32]
 800cf06:	3302      	adds	r3, #2
 800cf08:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	b2da      	uxtb	r2, r3
 800cf0e:	69fb      	ldr	r3, [r7, #28]
 800cf10:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cf12:	69fb      	ldr	r3, [r7, #28]
 800cf14:	3301      	adds	r3, #1
 800cf16:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	0a1b      	lsrs	r3, r3, #8
 800cf1c:	b2da      	uxtb	r2, r3
 800cf1e:	69fb      	ldr	r3, [r7, #28]
 800cf20:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cf22:	69fb      	ldr	r3, [r7, #28]
 800cf24:	3301      	adds	r3, #1
 800cf26:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2a:	3b01      	subs	r3, #1
 800cf2c:	627b      	str	r3, [r7, #36]	; 0x24
 800cf2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d1e3      	bne.n	800cefc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800cf34:	88bb      	ldrh	r3, [r7, #4]
 800cf36:	f003 0301 	and.w	r3, r3, #1
 800cf3a:	b29b      	uxth	r3, r3
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d007      	beq.n	800cf50 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800cf40:	6a3b      	ldr	r3, [r7, #32]
 800cf42:	881b      	ldrh	r3, [r3, #0]
 800cf44:	b29b      	uxth	r3, r3
 800cf46:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	b2da      	uxtb	r2, r3
 800cf4c:	69fb      	ldr	r3, [r7, #28]
 800cf4e:	701a      	strb	r2, [r3, #0]
  }
}
 800cf50:	bf00      	nop
 800cf52:	372c      	adds	r7, #44	; 0x2c
 800cf54:	46bd      	mov	sp, r7
 800cf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5a:	4770      	bx	lr

0800cf5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b084      	sub	sp, #16
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	460b      	mov	r3, r1
 800cf66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cf68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cf6c:	f006 f8de 	bl	801312c <USBD_static_malloc>
 800cf70:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d109      	bne.n	800cf8c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	32b0      	adds	r2, #176	; 0xb0
 800cf82:	2100      	movs	r1, #0
 800cf84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cf88:	2302      	movs	r3, #2
 800cf8a:	e0d4      	b.n	800d136 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cf8c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800cf90:	2100      	movs	r1, #0
 800cf92:	68f8      	ldr	r0, [r7, #12]
 800cf94:	f006 fc20 	bl	80137d8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	32b0      	adds	r2, #176	; 0xb0
 800cfa2:	68f9      	ldr	r1, [r7, #12]
 800cfa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	32b0      	adds	r2, #176	; 0xb0
 800cfb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	7c1b      	ldrb	r3, [r3, #16]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d138      	bne.n	800d036 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cfc4:	4b5e      	ldr	r3, [pc, #376]	; (800d140 <USBD_CDC_Init+0x1e4>)
 800cfc6:	7819      	ldrb	r1, [r3, #0]
 800cfc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cfcc:	2202      	movs	r2, #2
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f005 ff51 	bl	8012e76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cfd4:	4b5a      	ldr	r3, [pc, #360]	; (800d140 <USBD_CDC_Init+0x1e4>)
 800cfd6:	781b      	ldrb	r3, [r3, #0]
 800cfd8:	f003 020f 	and.w	r2, r3, #15
 800cfdc:	6879      	ldr	r1, [r7, #4]
 800cfde:	4613      	mov	r3, r2
 800cfe0:	009b      	lsls	r3, r3, #2
 800cfe2:	4413      	add	r3, r2
 800cfe4:	009b      	lsls	r3, r3, #2
 800cfe6:	440b      	add	r3, r1
 800cfe8:	3324      	adds	r3, #36	; 0x24
 800cfea:	2201      	movs	r2, #1
 800cfec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cfee:	4b55      	ldr	r3, [pc, #340]	; (800d144 <USBD_CDC_Init+0x1e8>)
 800cff0:	7819      	ldrb	r1, [r3, #0]
 800cff2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cff6:	2202      	movs	r2, #2
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f005 ff3c 	bl	8012e76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cffe:	4b51      	ldr	r3, [pc, #324]	; (800d144 <USBD_CDC_Init+0x1e8>)
 800d000:	781b      	ldrb	r3, [r3, #0]
 800d002:	f003 020f 	and.w	r2, r3, #15
 800d006:	6879      	ldr	r1, [r7, #4]
 800d008:	4613      	mov	r3, r2
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	4413      	add	r3, r2
 800d00e:	009b      	lsls	r3, r3, #2
 800d010:	440b      	add	r3, r1
 800d012:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d016:	2201      	movs	r2, #1
 800d018:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d01a:	4b4b      	ldr	r3, [pc, #300]	; (800d148 <USBD_CDC_Init+0x1ec>)
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	f003 020f 	and.w	r2, r3, #15
 800d022:	6879      	ldr	r1, [r7, #4]
 800d024:	4613      	mov	r3, r2
 800d026:	009b      	lsls	r3, r3, #2
 800d028:	4413      	add	r3, r2
 800d02a:	009b      	lsls	r3, r3, #2
 800d02c:	440b      	add	r3, r1
 800d02e:	3326      	adds	r3, #38	; 0x26
 800d030:	2210      	movs	r2, #16
 800d032:	801a      	strh	r2, [r3, #0]
 800d034:	e035      	b.n	800d0a2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d036:	4b42      	ldr	r3, [pc, #264]	; (800d140 <USBD_CDC_Init+0x1e4>)
 800d038:	7819      	ldrb	r1, [r3, #0]
 800d03a:	2340      	movs	r3, #64	; 0x40
 800d03c:	2202      	movs	r2, #2
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f005 ff19 	bl	8012e76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d044:	4b3e      	ldr	r3, [pc, #248]	; (800d140 <USBD_CDC_Init+0x1e4>)
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	f003 020f 	and.w	r2, r3, #15
 800d04c:	6879      	ldr	r1, [r7, #4]
 800d04e:	4613      	mov	r3, r2
 800d050:	009b      	lsls	r3, r3, #2
 800d052:	4413      	add	r3, r2
 800d054:	009b      	lsls	r3, r3, #2
 800d056:	440b      	add	r3, r1
 800d058:	3324      	adds	r3, #36	; 0x24
 800d05a:	2201      	movs	r2, #1
 800d05c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d05e:	4b39      	ldr	r3, [pc, #228]	; (800d144 <USBD_CDC_Init+0x1e8>)
 800d060:	7819      	ldrb	r1, [r3, #0]
 800d062:	2340      	movs	r3, #64	; 0x40
 800d064:	2202      	movs	r2, #2
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f005 ff05 	bl	8012e76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d06c:	4b35      	ldr	r3, [pc, #212]	; (800d144 <USBD_CDC_Init+0x1e8>)
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	f003 020f 	and.w	r2, r3, #15
 800d074:	6879      	ldr	r1, [r7, #4]
 800d076:	4613      	mov	r3, r2
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	4413      	add	r3, r2
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	440b      	add	r3, r1
 800d080:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d084:	2201      	movs	r2, #1
 800d086:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d088:	4b2f      	ldr	r3, [pc, #188]	; (800d148 <USBD_CDC_Init+0x1ec>)
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	f003 020f 	and.w	r2, r3, #15
 800d090:	6879      	ldr	r1, [r7, #4]
 800d092:	4613      	mov	r3, r2
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	4413      	add	r3, r2
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	440b      	add	r3, r1
 800d09c:	3326      	adds	r3, #38	; 0x26
 800d09e:	2210      	movs	r2, #16
 800d0a0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d0a2:	4b29      	ldr	r3, [pc, #164]	; (800d148 <USBD_CDC_Init+0x1ec>)
 800d0a4:	7819      	ldrb	r1, [r3, #0]
 800d0a6:	2308      	movs	r3, #8
 800d0a8:	2203      	movs	r2, #3
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f005 fee3 	bl	8012e76 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d0b0:	4b25      	ldr	r3, [pc, #148]	; (800d148 <USBD_CDC_Init+0x1ec>)
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	f003 020f 	and.w	r2, r3, #15
 800d0b8:	6879      	ldr	r1, [r7, #4]
 800d0ba:	4613      	mov	r3, r2
 800d0bc:	009b      	lsls	r3, r3, #2
 800d0be:	4413      	add	r3, r2
 800d0c0:	009b      	lsls	r3, r3, #2
 800d0c2:	440b      	add	r3, r1
 800d0c4:	3324      	adds	r3, #36	; 0x24
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	33b0      	adds	r3, #176	; 0xb0
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	4413      	add	r3, r2
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d101      	bne.n	800d104 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d100:	2302      	movs	r3, #2
 800d102:	e018      	b.n	800d136 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	7c1b      	ldrb	r3, [r3, #16]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d10a      	bne.n	800d122 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d10c:	4b0d      	ldr	r3, [pc, #52]	; (800d144 <USBD_CDC_Init+0x1e8>)
 800d10e:	7819      	ldrb	r1, [r3, #0]
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d116:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f005 ff9b 	bl	8013056 <USBD_LL_PrepareReceive>
 800d120:	e008      	b.n	800d134 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d122:	4b08      	ldr	r3, [pc, #32]	; (800d144 <USBD_CDC_Init+0x1e8>)
 800d124:	7819      	ldrb	r1, [r3, #0]
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d12c:	2340      	movs	r3, #64	; 0x40
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f005 ff91 	bl	8013056 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d134:	2300      	movs	r3, #0
}
 800d136:	4618      	mov	r0, r3
 800d138:	3710      	adds	r7, #16
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	2000009f 	.word	0x2000009f
 800d144:	200000a0 	.word	0x200000a0
 800d148:	200000a1 	.word	0x200000a1

0800d14c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	460b      	mov	r3, r1
 800d156:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d158:	4b3a      	ldr	r3, [pc, #232]	; (800d244 <USBD_CDC_DeInit+0xf8>)
 800d15a:	781b      	ldrb	r3, [r3, #0]
 800d15c:	4619      	mov	r1, r3
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f005 feaf 	bl	8012ec2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d164:	4b37      	ldr	r3, [pc, #220]	; (800d244 <USBD_CDC_DeInit+0xf8>)
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	f003 020f 	and.w	r2, r3, #15
 800d16c:	6879      	ldr	r1, [r7, #4]
 800d16e:	4613      	mov	r3, r2
 800d170:	009b      	lsls	r3, r3, #2
 800d172:	4413      	add	r3, r2
 800d174:	009b      	lsls	r3, r3, #2
 800d176:	440b      	add	r3, r1
 800d178:	3324      	adds	r3, #36	; 0x24
 800d17a:	2200      	movs	r2, #0
 800d17c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d17e:	4b32      	ldr	r3, [pc, #200]	; (800d248 <USBD_CDC_DeInit+0xfc>)
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	4619      	mov	r1, r3
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f005 fe9c 	bl	8012ec2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d18a:	4b2f      	ldr	r3, [pc, #188]	; (800d248 <USBD_CDC_DeInit+0xfc>)
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	f003 020f 	and.w	r2, r3, #15
 800d192:	6879      	ldr	r1, [r7, #4]
 800d194:	4613      	mov	r3, r2
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	4413      	add	r3, r2
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	440b      	add	r3, r1
 800d19e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d1a6:	4b29      	ldr	r3, [pc, #164]	; (800d24c <USBD_CDC_DeInit+0x100>)
 800d1a8:	781b      	ldrb	r3, [r3, #0]
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f005 fe88 	bl	8012ec2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d1b2:	4b26      	ldr	r3, [pc, #152]	; (800d24c <USBD_CDC_DeInit+0x100>)
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	f003 020f 	and.w	r2, r3, #15
 800d1ba:	6879      	ldr	r1, [r7, #4]
 800d1bc:	4613      	mov	r3, r2
 800d1be:	009b      	lsls	r3, r3, #2
 800d1c0:	4413      	add	r3, r2
 800d1c2:	009b      	lsls	r3, r3, #2
 800d1c4:	440b      	add	r3, r1
 800d1c6:	3324      	adds	r3, #36	; 0x24
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d1cc:	4b1f      	ldr	r3, [pc, #124]	; (800d24c <USBD_CDC_DeInit+0x100>)
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	f003 020f 	and.w	r2, r3, #15
 800d1d4:	6879      	ldr	r1, [r7, #4]
 800d1d6:	4613      	mov	r3, r2
 800d1d8:	009b      	lsls	r3, r3, #2
 800d1da:	4413      	add	r3, r2
 800d1dc:	009b      	lsls	r3, r3, #2
 800d1de:	440b      	add	r3, r1
 800d1e0:	3326      	adds	r3, #38	; 0x26
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	32b0      	adds	r2, #176	; 0xb0
 800d1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d01f      	beq.n	800d238 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	33b0      	adds	r3, #176	; 0xb0
 800d202:	009b      	lsls	r3, r3, #2
 800d204:	4413      	add	r3, r2
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	32b0      	adds	r2, #176	; 0xb0
 800d216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d21a:	4618      	mov	r0, r3
 800d21c:	f005 ff94 	bl	8013148 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	32b0      	adds	r2, #176	; 0xb0
 800d22a:	2100      	movs	r1, #0
 800d22c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2200      	movs	r2, #0
 800d234:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d238:	2300      	movs	r3, #0
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3708      	adds	r7, #8
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	2000009f 	.word	0x2000009f
 800d248:	200000a0 	.word	0x200000a0
 800d24c:	200000a1 	.word	0x200000a1

0800d250 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b086      	sub	sp, #24
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
 800d258:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	32b0      	adds	r2, #176	; 0xb0
 800d264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d268:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d26a:	2300      	movs	r3, #0
 800d26c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d26e:	2300      	movs	r3, #0
 800d270:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d272:	2300      	movs	r3, #0
 800d274:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d101      	bne.n	800d280 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d27c:	2303      	movs	r3, #3
 800d27e:	e0bf      	b.n	800d400 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d050      	beq.n	800d32e <USBD_CDC_Setup+0xde>
 800d28c:	2b20      	cmp	r3, #32
 800d28e:	f040 80af 	bne.w	800d3f0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	88db      	ldrh	r3, [r3, #6]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d03a      	beq.n	800d310 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	b25b      	sxtb	r3, r3
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	da1b      	bge.n	800d2dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	33b0      	adds	r3, #176	; 0xb0
 800d2ae:	009b      	lsls	r3, r3, #2
 800d2b0:	4413      	add	r3, r2
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	689b      	ldr	r3, [r3, #8]
 800d2b6:	683a      	ldr	r2, [r7, #0]
 800d2b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d2ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d2bc:	683a      	ldr	r2, [r7, #0]
 800d2be:	88d2      	ldrh	r2, [r2, #6]
 800d2c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	88db      	ldrh	r3, [r3, #6]
 800d2c6:	2b07      	cmp	r3, #7
 800d2c8:	bf28      	it	cs
 800d2ca:	2307      	movcs	r3, #7
 800d2cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	89fa      	ldrh	r2, [r7, #14]
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f001 fce1 	bl	800ec9c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d2da:	e090      	b.n	800d3fe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	785a      	ldrb	r2, [r3, #1]
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	88db      	ldrh	r3, [r3, #6]
 800d2ea:	2b3f      	cmp	r3, #63	; 0x3f
 800d2ec:	d803      	bhi.n	800d2f6 <USBD_CDC_Setup+0xa6>
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	88db      	ldrh	r3, [r3, #6]
 800d2f2:	b2da      	uxtb	r2, r3
 800d2f4:	e000      	b.n	800d2f8 <USBD_CDC_Setup+0xa8>
 800d2f6:	2240      	movs	r2, #64	; 0x40
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d2fe:	6939      	ldr	r1, [r7, #16]
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d306:	461a      	mov	r2, r3
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f001 fcf3 	bl	800ecf4 <USBD_CtlPrepareRx>
      break;
 800d30e:	e076      	b.n	800d3fe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d316:	687a      	ldr	r2, [r7, #4]
 800d318:	33b0      	adds	r3, #176	; 0xb0
 800d31a:	009b      	lsls	r3, r3, #2
 800d31c:	4413      	add	r3, r2
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	689b      	ldr	r3, [r3, #8]
 800d322:	683a      	ldr	r2, [r7, #0]
 800d324:	7850      	ldrb	r0, [r2, #1]
 800d326:	2200      	movs	r2, #0
 800d328:	6839      	ldr	r1, [r7, #0]
 800d32a:	4798      	blx	r3
      break;
 800d32c:	e067      	b.n	800d3fe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	785b      	ldrb	r3, [r3, #1]
 800d332:	2b0b      	cmp	r3, #11
 800d334:	d851      	bhi.n	800d3da <USBD_CDC_Setup+0x18a>
 800d336:	a201      	add	r2, pc, #4	; (adr r2, 800d33c <USBD_CDC_Setup+0xec>)
 800d338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d33c:	0800d36d 	.word	0x0800d36d
 800d340:	0800d3e9 	.word	0x0800d3e9
 800d344:	0800d3db 	.word	0x0800d3db
 800d348:	0800d3db 	.word	0x0800d3db
 800d34c:	0800d3db 	.word	0x0800d3db
 800d350:	0800d3db 	.word	0x0800d3db
 800d354:	0800d3db 	.word	0x0800d3db
 800d358:	0800d3db 	.word	0x0800d3db
 800d35c:	0800d3db 	.word	0x0800d3db
 800d360:	0800d3db 	.word	0x0800d3db
 800d364:	0800d397 	.word	0x0800d397
 800d368:	0800d3c1 	.word	0x0800d3c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d372:	b2db      	uxtb	r3, r3
 800d374:	2b03      	cmp	r3, #3
 800d376:	d107      	bne.n	800d388 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d378:	f107 030a 	add.w	r3, r7, #10
 800d37c:	2202      	movs	r2, #2
 800d37e:	4619      	mov	r1, r3
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f001 fc8b 	bl	800ec9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d386:	e032      	b.n	800d3ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d388:	6839      	ldr	r1, [r7, #0]
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f001 fc15 	bl	800ebba <USBD_CtlError>
            ret = USBD_FAIL;
 800d390:	2303      	movs	r3, #3
 800d392:	75fb      	strb	r3, [r7, #23]
          break;
 800d394:	e02b      	b.n	800d3ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d39c:	b2db      	uxtb	r3, r3
 800d39e:	2b03      	cmp	r3, #3
 800d3a0:	d107      	bne.n	800d3b2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d3a2:	f107 030d 	add.w	r3, r7, #13
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f001 fc76 	bl	800ec9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d3b0:	e01d      	b.n	800d3ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d3b2:	6839      	ldr	r1, [r7, #0]
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f001 fc00 	bl	800ebba <USBD_CtlError>
            ret = USBD_FAIL;
 800d3ba:	2303      	movs	r3, #3
 800d3bc:	75fb      	strb	r3, [r7, #23]
          break;
 800d3be:	e016      	b.n	800d3ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3c6:	b2db      	uxtb	r3, r3
 800d3c8:	2b03      	cmp	r3, #3
 800d3ca:	d00f      	beq.n	800d3ec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d3cc:	6839      	ldr	r1, [r7, #0]
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f001 fbf3 	bl	800ebba <USBD_CtlError>
            ret = USBD_FAIL;
 800d3d4:	2303      	movs	r3, #3
 800d3d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d3d8:	e008      	b.n	800d3ec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d3da:	6839      	ldr	r1, [r7, #0]
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f001 fbec 	bl	800ebba <USBD_CtlError>
          ret = USBD_FAIL;
 800d3e2:	2303      	movs	r3, #3
 800d3e4:	75fb      	strb	r3, [r7, #23]
          break;
 800d3e6:	e002      	b.n	800d3ee <USBD_CDC_Setup+0x19e>
          break;
 800d3e8:	bf00      	nop
 800d3ea:	e008      	b.n	800d3fe <USBD_CDC_Setup+0x1ae>
          break;
 800d3ec:	bf00      	nop
      }
      break;
 800d3ee:	e006      	b.n	800d3fe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d3f0:	6839      	ldr	r1, [r7, #0]
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f001 fbe1 	bl	800ebba <USBD_CtlError>
      ret = USBD_FAIL;
 800d3f8:	2303      	movs	r3, #3
 800d3fa:	75fb      	strb	r3, [r7, #23]
      break;
 800d3fc:	bf00      	nop
  }

  return (uint8_t)ret;
 800d3fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800d400:	4618      	mov	r0, r3
 800d402:	3718      	adds	r7, #24
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b084      	sub	sp, #16
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	460b      	mov	r3, r1
 800d412:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d41a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	32b0      	adds	r2, #176	; 0xb0
 800d426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d101      	bne.n	800d432 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d42e:	2303      	movs	r3, #3
 800d430:	e065      	b.n	800d4fe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	32b0      	adds	r2, #176	; 0xb0
 800d43c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d440:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d442:	78fb      	ldrb	r3, [r7, #3]
 800d444:	f003 020f 	and.w	r2, r3, #15
 800d448:	6879      	ldr	r1, [r7, #4]
 800d44a:	4613      	mov	r3, r2
 800d44c:	009b      	lsls	r3, r3, #2
 800d44e:	4413      	add	r3, r2
 800d450:	009b      	lsls	r3, r3, #2
 800d452:	440b      	add	r3, r1
 800d454:	3318      	adds	r3, #24
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d02f      	beq.n	800d4bc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d45c:	78fb      	ldrb	r3, [r7, #3]
 800d45e:	f003 020f 	and.w	r2, r3, #15
 800d462:	6879      	ldr	r1, [r7, #4]
 800d464:	4613      	mov	r3, r2
 800d466:	009b      	lsls	r3, r3, #2
 800d468:	4413      	add	r3, r2
 800d46a:	009b      	lsls	r3, r3, #2
 800d46c:	440b      	add	r3, r1
 800d46e:	3318      	adds	r3, #24
 800d470:	681a      	ldr	r2, [r3, #0]
 800d472:	78fb      	ldrb	r3, [r7, #3]
 800d474:	f003 010f 	and.w	r1, r3, #15
 800d478:	68f8      	ldr	r0, [r7, #12]
 800d47a:	460b      	mov	r3, r1
 800d47c:	009b      	lsls	r3, r3, #2
 800d47e:	440b      	add	r3, r1
 800d480:	00db      	lsls	r3, r3, #3
 800d482:	4403      	add	r3, r0
 800d484:	3338      	adds	r3, #56	; 0x38
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	fbb2 f1f3 	udiv	r1, r2, r3
 800d48c:	fb01 f303 	mul.w	r3, r1, r3
 800d490:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d492:	2b00      	cmp	r3, #0
 800d494:	d112      	bne.n	800d4bc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d496:	78fb      	ldrb	r3, [r7, #3]
 800d498:	f003 020f 	and.w	r2, r3, #15
 800d49c:	6879      	ldr	r1, [r7, #4]
 800d49e:	4613      	mov	r3, r2
 800d4a0:	009b      	lsls	r3, r3, #2
 800d4a2:	4413      	add	r3, r2
 800d4a4:	009b      	lsls	r3, r3, #2
 800d4a6:	440b      	add	r3, r1
 800d4a8:	3318      	adds	r3, #24
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d4ae:	78f9      	ldrb	r1, [r7, #3]
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f005 fdad 	bl	8013014 <USBD_LL_Transmit>
 800d4ba:	e01f      	b.n	800d4fc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d4ca:	687a      	ldr	r2, [r7, #4]
 800d4cc:	33b0      	adds	r3, #176	; 0xb0
 800d4ce:	009b      	lsls	r3, r3, #2
 800d4d0:	4413      	add	r3, r2
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	691b      	ldr	r3, [r3, #16]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d010      	beq.n	800d4fc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d4e0:	687a      	ldr	r2, [r7, #4]
 800d4e2:	33b0      	adds	r3, #176	; 0xb0
 800d4e4:	009b      	lsls	r3, r3, #2
 800d4e6:	4413      	add	r3, r2
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	691b      	ldr	r3, [r3, #16]
 800d4ec:	68ba      	ldr	r2, [r7, #8]
 800d4ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d4f2:	68ba      	ldr	r2, [r7, #8]
 800d4f4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d4f8:	78fa      	ldrb	r2, [r7, #3]
 800d4fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d4fc:	2300      	movs	r3, #0
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3710      	adds	r7, #16
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}

0800d506 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d506:	b580      	push	{r7, lr}
 800d508:	b084      	sub	sp, #16
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	6078      	str	r0, [r7, #4]
 800d50e:	460b      	mov	r3, r1
 800d510:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	32b0      	adds	r2, #176	; 0xb0
 800d51c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d520:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	32b0      	adds	r2, #176	; 0xb0
 800d52c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d101      	bne.n	800d538 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d534:	2303      	movs	r3, #3
 800d536:	e01a      	b.n	800d56e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d538:	78fb      	ldrb	r3, [r7, #3]
 800d53a:	4619      	mov	r1, r3
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f005 fdab 	bl	8013098 <USBD_LL_GetRxDataSize>
 800d542:	4602      	mov	r2, r0
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	33b0      	adds	r3, #176	; 0xb0
 800d554:	009b      	lsls	r3, r3, #2
 800d556:	4413      	add	r3, r2
 800d558:	685b      	ldr	r3, [r3, #4]
 800d55a:	68db      	ldr	r3, [r3, #12]
 800d55c:	68fa      	ldr	r2, [r7, #12]
 800d55e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d562:	68fa      	ldr	r2, [r7, #12]
 800d564:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d568:	4611      	mov	r1, r2
 800d56a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d56c:	2300      	movs	r3, #0
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3710      	adds	r7, #16
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}

0800d576 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d576:	b580      	push	{r7, lr}
 800d578:	b084      	sub	sp, #16
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	32b0      	adds	r2, #176	; 0xb0
 800d588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d58c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d101      	bne.n	800d598 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d594:	2303      	movs	r3, #3
 800d596:	e025      	b.n	800d5e4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	33b0      	adds	r3, #176	; 0xb0
 800d5a2:	009b      	lsls	r3, r3, #2
 800d5a4:	4413      	add	r3, r2
 800d5a6:	685b      	ldr	r3, [r3, #4]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d01a      	beq.n	800d5e2 <USBD_CDC_EP0_RxReady+0x6c>
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d5b2:	2bff      	cmp	r3, #255	; 0xff
 800d5b4:	d015      	beq.n	800d5e2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d5bc:	687a      	ldr	r2, [r7, #4]
 800d5be:	33b0      	adds	r3, #176	; 0xb0
 800d5c0:	009b      	lsls	r3, r3, #2
 800d5c2:	4413      	add	r3, r2
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	689b      	ldr	r3, [r3, #8]
 800d5c8:	68fa      	ldr	r2, [r7, #12]
 800d5ca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d5ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d5d0:	68fa      	ldr	r2, [r7, #12]
 800d5d2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d5d6:	b292      	uxth	r2, r2
 800d5d8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	22ff      	movs	r2, #255	; 0xff
 800d5de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d5e2:	2300      	movs	r3, #0
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3710      	adds	r7, #16
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b086      	sub	sp, #24
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d5f4:	2182      	movs	r1, #130	; 0x82
 800d5f6:	4818      	ldr	r0, [pc, #96]	; (800d658 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d5f8:	f000 fc7d 	bl	800def6 <USBD_GetEpDesc>
 800d5fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d5fe:	2101      	movs	r1, #1
 800d600:	4815      	ldr	r0, [pc, #84]	; (800d658 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d602:	f000 fc78 	bl	800def6 <USBD_GetEpDesc>
 800d606:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d608:	2181      	movs	r1, #129	; 0x81
 800d60a:	4813      	ldr	r0, [pc, #76]	; (800d658 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d60c:	f000 fc73 	bl	800def6 <USBD_GetEpDesc>
 800d610:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d002      	beq.n	800d61e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	2210      	movs	r2, #16
 800d61c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d006      	beq.n	800d632 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	2200      	movs	r2, #0
 800d628:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d62c:	711a      	strb	r2, [r3, #4]
 800d62e:	2200      	movs	r2, #0
 800d630:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d006      	beq.n	800d646 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2200      	movs	r2, #0
 800d63c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d640:	711a      	strb	r2, [r3, #4]
 800d642:	2200      	movs	r2, #0
 800d644:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2243      	movs	r2, #67	; 0x43
 800d64a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d64c:	4b02      	ldr	r3, [pc, #8]	; (800d658 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d64e:	4618      	mov	r0, r3
 800d650:	3718      	adds	r7, #24
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
 800d656:	bf00      	nop
 800d658:	2000005c 	.word	0x2000005c

0800d65c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b086      	sub	sp, #24
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d664:	2182      	movs	r1, #130	; 0x82
 800d666:	4818      	ldr	r0, [pc, #96]	; (800d6c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d668:	f000 fc45 	bl	800def6 <USBD_GetEpDesc>
 800d66c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d66e:	2101      	movs	r1, #1
 800d670:	4815      	ldr	r0, [pc, #84]	; (800d6c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d672:	f000 fc40 	bl	800def6 <USBD_GetEpDesc>
 800d676:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d678:	2181      	movs	r1, #129	; 0x81
 800d67a:	4813      	ldr	r0, [pc, #76]	; (800d6c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d67c:	f000 fc3b 	bl	800def6 <USBD_GetEpDesc>
 800d680:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d002      	beq.n	800d68e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	2210      	movs	r2, #16
 800d68c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d006      	beq.n	800d6a2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	2200      	movs	r2, #0
 800d698:	711a      	strb	r2, [r3, #4]
 800d69a:	2200      	movs	r2, #0
 800d69c:	f042 0202 	orr.w	r2, r2, #2
 800d6a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d006      	beq.n	800d6b6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	711a      	strb	r2, [r3, #4]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f042 0202 	orr.w	r2, r2, #2
 800d6b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2243      	movs	r2, #67	; 0x43
 800d6ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d6bc:	4b02      	ldr	r3, [pc, #8]	; (800d6c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3718      	adds	r7, #24
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	2000005c 	.word	0x2000005c

0800d6cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b086      	sub	sp, #24
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d6d4:	2182      	movs	r1, #130	; 0x82
 800d6d6:	4818      	ldr	r0, [pc, #96]	; (800d738 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d6d8:	f000 fc0d 	bl	800def6 <USBD_GetEpDesc>
 800d6dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d6de:	2101      	movs	r1, #1
 800d6e0:	4815      	ldr	r0, [pc, #84]	; (800d738 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d6e2:	f000 fc08 	bl	800def6 <USBD_GetEpDesc>
 800d6e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d6e8:	2181      	movs	r1, #129	; 0x81
 800d6ea:	4813      	ldr	r0, [pc, #76]	; (800d738 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d6ec:	f000 fc03 	bl	800def6 <USBD_GetEpDesc>
 800d6f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d002      	beq.n	800d6fe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	2210      	movs	r2, #16
 800d6fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d006      	beq.n	800d712 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	2200      	movs	r2, #0
 800d708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d70c:	711a      	strb	r2, [r3, #4]
 800d70e:	2200      	movs	r2, #0
 800d710:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d006      	beq.n	800d726 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	2200      	movs	r2, #0
 800d71c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d720:	711a      	strb	r2, [r3, #4]
 800d722:	2200      	movs	r2, #0
 800d724:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2243      	movs	r2, #67	; 0x43
 800d72a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d72c:	4b02      	ldr	r3, [pc, #8]	; (800d738 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3718      	adds	r7, #24
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
 800d736:	bf00      	nop
 800d738:	2000005c 	.word	0x2000005c

0800d73c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b083      	sub	sp, #12
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	220a      	movs	r2, #10
 800d748:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d74a:	4b03      	ldr	r3, [pc, #12]	; (800d758 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	370c      	adds	r7, #12
 800d750:	46bd      	mov	sp, r7
 800d752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d756:	4770      	bx	lr
 800d758:	20000018 	.word	0x20000018

0800d75c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b083      	sub	sp, #12
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d101      	bne.n	800d770 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d76c:	2303      	movs	r3, #3
 800d76e:	e009      	b.n	800d784 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	33b0      	adds	r3, #176	; 0xb0
 800d77a:	009b      	lsls	r3, r3, #2
 800d77c:	4413      	add	r3, r2
 800d77e:	683a      	ldr	r2, [r7, #0]
 800d780:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d782:	2300      	movs	r3, #0
}
 800d784:	4618      	mov	r0, r3
 800d786:	370c      	adds	r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr

0800d790 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d790:	b480      	push	{r7}
 800d792:	b087      	sub	sp, #28
 800d794:	af00      	add	r7, sp, #0
 800d796:	60f8      	str	r0, [r7, #12]
 800d798:	60b9      	str	r1, [r7, #8]
 800d79a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	32b0      	adds	r2, #176	; 0xb0
 800d7a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7aa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d101      	bne.n	800d7b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d7b2:	2303      	movs	r3, #3
 800d7b4:	e008      	b.n	800d7c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	68ba      	ldr	r2, [r7, #8]
 800d7ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	687a      	ldr	r2, [r7, #4]
 800d7c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d7c6:	2300      	movs	r3, #0
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	371c      	adds	r7, #28
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr

0800d7d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b085      	sub	sp, #20
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	32b0      	adds	r2, #176	; 0xb0
 800d7e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d101      	bne.n	800d7f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d7f4:	2303      	movs	r3, #3
 800d7f6:	e004      	b.n	800d802 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	683a      	ldr	r2, [r7, #0]
 800d7fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d800:	2300      	movs	r3, #0
}
 800d802:	4618      	mov	r0, r3
 800d804:	3714      	adds	r7, #20
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr
	...

0800d810 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b084      	sub	sp, #16
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	32b0      	adds	r2, #176	; 0xb0
 800d822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d826:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	32b0      	adds	r2, #176	; 0xb0
 800d832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d101      	bne.n	800d83e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d83a:	2303      	movs	r3, #3
 800d83c:	e018      	b.n	800d870 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	7c1b      	ldrb	r3, [r3, #16]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d10a      	bne.n	800d85c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d846:	4b0c      	ldr	r3, [pc, #48]	; (800d878 <USBD_CDC_ReceivePacket+0x68>)
 800d848:	7819      	ldrb	r1, [r3, #0]
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d850:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f005 fbfe 	bl	8013056 <USBD_LL_PrepareReceive>
 800d85a:	e008      	b.n	800d86e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d85c:	4b06      	ldr	r3, [pc, #24]	; (800d878 <USBD_CDC_ReceivePacket+0x68>)
 800d85e:	7819      	ldrb	r1, [r3, #0]
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d866:	2340      	movs	r3, #64	; 0x40
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f005 fbf4 	bl	8013056 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d86e:	2300      	movs	r3, #0
}
 800d870:	4618      	mov	r0, r3
 800d872:	3710      	adds	r7, #16
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}
 800d878:	200000a0 	.word	0x200000a0

0800d87c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b086      	sub	sp, #24
 800d880:	af00      	add	r7, sp, #0
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	60b9      	str	r1, [r7, #8]
 800d886:	4613      	mov	r3, r2
 800d888:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d101      	bne.n	800d894 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d890:	2303      	movs	r3, #3
 800d892:	e01f      	b.n	800d8d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2200      	movs	r2, #0
 800d898:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d003      	beq.n	800d8ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	68ba      	ldr	r2, [r7, #8]
 800d8b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	2201      	movs	r2, #1
 800d8be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	79fa      	ldrb	r2, [r7, #7]
 800d8c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d8c8:	68f8      	ldr	r0, [r7, #12]
 800d8ca:	f005 fa57 	bl	8012d7c <USBD_LL_Init>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d8d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3718      	adds	r7, #24
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b084      	sub	sp, #16
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d101      	bne.n	800d8f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d8f0:	2303      	movs	r3, #3
 800d8f2:	e025      	b.n	800d940 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	683a      	ldr	r2, [r7, #0]
 800d8f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	32ae      	adds	r2, #174	; 0xae
 800d906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d00f      	beq.n	800d930 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	32ae      	adds	r2, #174	; 0xae
 800d91a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d920:	f107 020e 	add.w	r2, r7, #14
 800d924:	4610      	mov	r0, r2
 800d926:	4798      	blx	r3
 800d928:	4602      	mov	r2, r0
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d936:	1c5a      	adds	r2, r3, #1
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d93e:	2300      	movs	r3, #0
}
 800d940:	4618      	mov	r0, r3
 800d942:	3710      	adds	r7, #16
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f005 fa75 	bl	8012e40 <USBD_LL_Start>
 800d956:	4603      	mov	r3, r0
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3708      	adds	r7, #8
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d960:	b480      	push	{r7}
 800d962:	b083      	sub	sp, #12
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d968:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	370c      	adds	r7, #12
 800d96e:	46bd      	mov	sp, r7
 800d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d974:	4770      	bx	lr

0800d976 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d976:	b580      	push	{r7, lr}
 800d978:	b084      	sub	sp, #16
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	6078      	str	r0, [r7, #4]
 800d97e:	460b      	mov	r3, r1
 800d980:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d982:	2300      	movs	r3, #0
 800d984:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d009      	beq.n	800d9a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	78fa      	ldrb	r2, [r7, #3]
 800d99a:	4611      	mov	r1, r2
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	4798      	blx	r3
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3710      	adds	r7, #16
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}

0800d9ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d9ae:	b580      	push	{r7, lr}
 800d9b0:	b084      	sub	sp, #16
 800d9b2:	af00      	add	r7, sp, #0
 800d9b4:	6078      	str	r0, [r7, #4]
 800d9b6:	460b      	mov	r3, r1
 800d9b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	78fa      	ldrb	r2, [r7, #3]
 800d9c8:	4611      	mov	r1, r2
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	4798      	blx	r3
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d001      	beq.n	800d9d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d9d4:	2303      	movs	r3, #3
 800d9d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d9d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3710      	adds	r7, #16
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b084      	sub	sp, #16
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
 800d9ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d9f2:	6839      	ldr	r1, [r7, #0]
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f001 f8a6 	bl	800eb46 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800da08:	461a      	mov	r2, r3
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800da16:	f003 031f 	and.w	r3, r3, #31
 800da1a:	2b02      	cmp	r3, #2
 800da1c:	d01a      	beq.n	800da54 <USBD_LL_SetupStage+0x72>
 800da1e:	2b02      	cmp	r3, #2
 800da20:	d822      	bhi.n	800da68 <USBD_LL_SetupStage+0x86>
 800da22:	2b00      	cmp	r3, #0
 800da24:	d002      	beq.n	800da2c <USBD_LL_SetupStage+0x4a>
 800da26:	2b01      	cmp	r3, #1
 800da28:	d00a      	beq.n	800da40 <USBD_LL_SetupStage+0x5e>
 800da2a:	e01d      	b.n	800da68 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800da32:	4619      	mov	r1, r3
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f000 fad3 	bl	800dfe0 <USBD_StdDevReq>
 800da3a:	4603      	mov	r3, r0
 800da3c:	73fb      	strb	r3, [r7, #15]
      break;
 800da3e:	e020      	b.n	800da82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800da46:	4619      	mov	r1, r3
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 fb3b 	bl	800e0c4 <USBD_StdItfReq>
 800da4e:	4603      	mov	r3, r0
 800da50:	73fb      	strb	r3, [r7, #15]
      break;
 800da52:	e016      	b.n	800da82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800da5a:	4619      	mov	r1, r3
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f000 fb9d 	bl	800e19c <USBD_StdEPReq>
 800da62:	4603      	mov	r3, r0
 800da64:	73fb      	strb	r3, [r7, #15]
      break;
 800da66:	e00c      	b.n	800da82 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800da6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800da72:	b2db      	uxtb	r3, r3
 800da74:	4619      	mov	r1, r3
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f005 fa42 	bl	8012f00 <USBD_LL_StallEP>
 800da7c:	4603      	mov	r3, r0
 800da7e:	73fb      	strb	r3, [r7, #15]
      break;
 800da80:	bf00      	nop
  }

  return ret;
 800da82:	7bfb      	ldrb	r3, [r7, #15]
}
 800da84:	4618      	mov	r0, r3
 800da86:	3710      	adds	r7, #16
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b086      	sub	sp, #24
 800da90:	af00      	add	r7, sp, #0
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	460b      	mov	r3, r1
 800da96:	607a      	str	r2, [r7, #4]
 800da98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800da9a:	2300      	movs	r3, #0
 800da9c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800da9e:	7afb      	ldrb	r3, [r7, #11]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d16e      	bne.n	800db82 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800daaa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dab2:	2b03      	cmp	r3, #3
 800dab4:	f040 8098 	bne.w	800dbe8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	689a      	ldr	r2, [r3, #8]
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	68db      	ldr	r3, [r3, #12]
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d913      	bls.n	800daec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	689a      	ldr	r2, [r3, #8]
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	68db      	ldr	r3, [r3, #12]
 800dacc:	1ad2      	subs	r2, r2, r3
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	68da      	ldr	r2, [r3, #12]
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	689b      	ldr	r3, [r3, #8]
 800dada:	4293      	cmp	r3, r2
 800dadc:	bf28      	it	cs
 800dade:	4613      	movcs	r3, r2
 800dae0:	461a      	mov	r2, r3
 800dae2:	6879      	ldr	r1, [r7, #4]
 800dae4:	68f8      	ldr	r0, [r7, #12]
 800dae6:	f001 f922 	bl	800ed2e <USBD_CtlContinueRx>
 800daea:	e07d      	b.n	800dbe8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800daf2:	f003 031f 	and.w	r3, r3, #31
 800daf6:	2b02      	cmp	r3, #2
 800daf8:	d014      	beq.n	800db24 <USBD_LL_DataOutStage+0x98>
 800dafa:	2b02      	cmp	r3, #2
 800dafc:	d81d      	bhi.n	800db3a <USBD_LL_DataOutStage+0xae>
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d002      	beq.n	800db08 <USBD_LL_DataOutStage+0x7c>
 800db02:	2b01      	cmp	r3, #1
 800db04:	d003      	beq.n	800db0e <USBD_LL_DataOutStage+0x82>
 800db06:	e018      	b.n	800db3a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800db08:	2300      	movs	r3, #0
 800db0a:	75bb      	strb	r3, [r7, #22]
            break;
 800db0c:	e018      	b.n	800db40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800db14:	b2db      	uxtb	r3, r3
 800db16:	4619      	mov	r1, r3
 800db18:	68f8      	ldr	r0, [r7, #12]
 800db1a:	f000 f9d2 	bl	800dec2 <USBD_CoreFindIF>
 800db1e:	4603      	mov	r3, r0
 800db20:	75bb      	strb	r3, [r7, #22]
            break;
 800db22:	e00d      	b.n	800db40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	4619      	mov	r1, r3
 800db2e:	68f8      	ldr	r0, [r7, #12]
 800db30:	f000 f9d4 	bl	800dedc <USBD_CoreFindEP>
 800db34:	4603      	mov	r3, r0
 800db36:	75bb      	strb	r3, [r7, #22]
            break;
 800db38:	e002      	b.n	800db40 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800db3a:	2300      	movs	r3, #0
 800db3c:	75bb      	strb	r3, [r7, #22]
            break;
 800db3e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800db40:	7dbb      	ldrb	r3, [r7, #22]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d119      	bne.n	800db7a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db4c:	b2db      	uxtb	r3, r3
 800db4e:	2b03      	cmp	r3, #3
 800db50:	d113      	bne.n	800db7a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800db52:	7dba      	ldrb	r2, [r7, #22]
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	32ae      	adds	r2, #174	; 0xae
 800db58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db5c:	691b      	ldr	r3, [r3, #16]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d00b      	beq.n	800db7a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800db62:	7dba      	ldrb	r2, [r7, #22]
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800db6a:	7dba      	ldrb	r2, [r7, #22]
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	32ae      	adds	r2, #174	; 0xae
 800db70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db74:	691b      	ldr	r3, [r3, #16]
 800db76:	68f8      	ldr	r0, [r7, #12]
 800db78:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800db7a:	68f8      	ldr	r0, [r7, #12]
 800db7c:	f001 f8e8 	bl	800ed50 <USBD_CtlSendStatus>
 800db80:	e032      	b.n	800dbe8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800db82:	7afb      	ldrb	r3, [r7, #11]
 800db84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db88:	b2db      	uxtb	r3, r3
 800db8a:	4619      	mov	r1, r3
 800db8c:	68f8      	ldr	r0, [r7, #12]
 800db8e:	f000 f9a5 	bl	800dedc <USBD_CoreFindEP>
 800db92:	4603      	mov	r3, r0
 800db94:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800db96:	7dbb      	ldrb	r3, [r7, #22]
 800db98:	2bff      	cmp	r3, #255	; 0xff
 800db9a:	d025      	beq.n	800dbe8 <USBD_LL_DataOutStage+0x15c>
 800db9c:	7dbb      	ldrb	r3, [r7, #22]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d122      	bne.n	800dbe8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dba8:	b2db      	uxtb	r3, r3
 800dbaa:	2b03      	cmp	r3, #3
 800dbac:	d117      	bne.n	800dbde <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800dbae:	7dba      	ldrb	r2, [r7, #22]
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	32ae      	adds	r2, #174	; 0xae
 800dbb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbb8:	699b      	ldr	r3, [r3, #24]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d00f      	beq.n	800dbde <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800dbbe:	7dba      	ldrb	r2, [r7, #22]
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800dbc6:	7dba      	ldrb	r2, [r7, #22]
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	32ae      	adds	r2, #174	; 0xae
 800dbcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbd0:	699b      	ldr	r3, [r3, #24]
 800dbd2:	7afa      	ldrb	r2, [r7, #11]
 800dbd4:	4611      	mov	r1, r2
 800dbd6:	68f8      	ldr	r0, [r7, #12]
 800dbd8:	4798      	blx	r3
 800dbda:	4603      	mov	r3, r0
 800dbdc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800dbde:	7dfb      	ldrb	r3, [r7, #23]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d001      	beq.n	800dbe8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800dbe4:	7dfb      	ldrb	r3, [r7, #23]
 800dbe6:	e000      	b.n	800dbea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800dbe8:	2300      	movs	r3, #0
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3718      	adds	r7, #24
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}

0800dbf2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dbf2:	b580      	push	{r7, lr}
 800dbf4:	b086      	sub	sp, #24
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	60f8      	str	r0, [r7, #12]
 800dbfa:	460b      	mov	r3, r1
 800dbfc:	607a      	str	r2, [r7, #4]
 800dbfe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800dc00:	7afb      	ldrb	r3, [r7, #11]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d16f      	bne.n	800dce6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	3314      	adds	r3, #20
 800dc0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dc12:	2b02      	cmp	r3, #2
 800dc14:	d15a      	bne.n	800dccc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	689a      	ldr	r2, [r3, #8]
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	68db      	ldr	r3, [r3, #12]
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d914      	bls.n	800dc4c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	689a      	ldr	r2, [r3, #8]
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	68db      	ldr	r3, [r3, #12]
 800dc2a:	1ad2      	subs	r2, r2, r3
 800dc2c:	693b      	ldr	r3, [r7, #16]
 800dc2e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	689b      	ldr	r3, [r3, #8]
 800dc34:	461a      	mov	r2, r3
 800dc36:	6879      	ldr	r1, [r7, #4]
 800dc38:	68f8      	ldr	r0, [r7, #12]
 800dc3a:	f001 f84a 	bl	800ecd2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc3e:	2300      	movs	r3, #0
 800dc40:	2200      	movs	r2, #0
 800dc42:	2100      	movs	r1, #0
 800dc44:	68f8      	ldr	r0, [r7, #12]
 800dc46:	f005 fa06 	bl	8013056 <USBD_LL_PrepareReceive>
 800dc4a:	e03f      	b.n	800dccc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	68da      	ldr	r2, [r3, #12]
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	689b      	ldr	r3, [r3, #8]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d11c      	bne.n	800dc92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	685a      	ldr	r2, [r3, #4]
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d316      	bcc.n	800dc92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	685a      	ldr	r2, [r3, #4]
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	d20f      	bcs.n	800dc92 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dc72:	2200      	movs	r2, #0
 800dc74:	2100      	movs	r1, #0
 800dc76:	68f8      	ldr	r0, [r7, #12]
 800dc78:	f001 f82b 	bl	800ecd2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc84:	2300      	movs	r3, #0
 800dc86:	2200      	movs	r2, #0
 800dc88:	2100      	movs	r1, #0
 800dc8a:	68f8      	ldr	r0, [r7, #12]
 800dc8c:	f005 f9e3 	bl	8013056 <USBD_LL_PrepareReceive>
 800dc90:	e01c      	b.n	800dccc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc98:	b2db      	uxtb	r3, r3
 800dc9a:	2b03      	cmp	r3, #3
 800dc9c:	d10f      	bne.n	800dcbe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dca4:	68db      	ldr	r3, [r3, #12]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d009      	beq.n	800dcbe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2200      	movs	r2, #0
 800dcae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcb8:	68db      	ldr	r3, [r3, #12]
 800dcba:	68f8      	ldr	r0, [r7, #12]
 800dcbc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dcbe:	2180      	movs	r1, #128	; 0x80
 800dcc0:	68f8      	ldr	r0, [r7, #12]
 800dcc2:	f005 f91d 	bl	8012f00 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dcc6:	68f8      	ldr	r0, [r7, #12]
 800dcc8:	f001 f855 	bl	800ed76 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d03a      	beq.n	800dd4c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800dcd6:	68f8      	ldr	r0, [r7, #12]
 800dcd8:	f7ff fe42 	bl	800d960 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2200      	movs	r2, #0
 800dce0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800dce4:	e032      	b.n	800dd4c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800dce6:	7afb      	ldrb	r3, [r7, #11]
 800dce8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	4619      	mov	r1, r3
 800dcf0:	68f8      	ldr	r0, [r7, #12]
 800dcf2:	f000 f8f3 	bl	800dedc <USBD_CoreFindEP>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dcfa:	7dfb      	ldrb	r3, [r7, #23]
 800dcfc:	2bff      	cmp	r3, #255	; 0xff
 800dcfe:	d025      	beq.n	800dd4c <USBD_LL_DataInStage+0x15a>
 800dd00:	7dfb      	ldrb	r3, [r7, #23]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d122      	bne.n	800dd4c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd0c:	b2db      	uxtb	r3, r3
 800dd0e:	2b03      	cmp	r3, #3
 800dd10:	d11c      	bne.n	800dd4c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800dd12:	7dfa      	ldrb	r2, [r7, #23]
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	32ae      	adds	r2, #174	; 0xae
 800dd18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd1c:	695b      	ldr	r3, [r3, #20]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d014      	beq.n	800dd4c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800dd22:	7dfa      	ldrb	r2, [r7, #23]
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800dd2a:	7dfa      	ldrb	r2, [r7, #23]
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	32ae      	adds	r2, #174	; 0xae
 800dd30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd34:	695b      	ldr	r3, [r3, #20]
 800dd36:	7afa      	ldrb	r2, [r7, #11]
 800dd38:	4611      	mov	r1, r2
 800dd3a:	68f8      	ldr	r0, [r7, #12]
 800dd3c:	4798      	blx	r3
 800dd3e:	4603      	mov	r3, r0
 800dd40:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800dd42:	7dbb      	ldrb	r3, [r7, #22]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d001      	beq.n	800dd4c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800dd48:	7dbb      	ldrb	r3, [r7, #22]
 800dd4a:	e000      	b.n	800dd4e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800dd4c:	2300      	movs	r3, #0
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3718      	adds	r7, #24
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}

0800dd56 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dd56:	b580      	push	{r7, lr}
 800dd58:	b084      	sub	sp, #16
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2201      	movs	r2, #1
 800dd66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2200      	movs	r2, #0
 800dd76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2200      	movs	r2, #0
 800dd84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d014      	beq.n	800ddbc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d00e      	beq.n	800ddbc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dda4:	685b      	ldr	r3, [r3, #4]
 800dda6:	687a      	ldr	r2, [r7, #4]
 800dda8:	6852      	ldr	r2, [r2, #4]
 800ddaa:	b2d2      	uxtb	r2, r2
 800ddac:	4611      	mov	r1, r2
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	4798      	blx	r3
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d001      	beq.n	800ddbc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ddb8:	2303      	movs	r3, #3
 800ddba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ddbc:	2340      	movs	r3, #64	; 0x40
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	2100      	movs	r1, #0
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f005 f857 	bl	8012e76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2201      	movs	r2, #1
 800ddcc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2240      	movs	r2, #64	; 0x40
 800ddd4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ddd8:	2340      	movs	r3, #64	; 0x40
 800ddda:	2200      	movs	r2, #0
 800dddc:	2180      	movs	r1, #128	; 0x80
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f005 f849 	bl	8012e76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2201      	movs	r2, #1
 800dde8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2240      	movs	r2, #64	; 0x40
 800ddee:	621a      	str	r2, [r3, #32]

  return ret;
 800ddf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3710      	adds	r7, #16
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}

0800ddfa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ddfa:	b480      	push	{r7}
 800ddfc:	b083      	sub	sp, #12
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
 800de02:	460b      	mov	r3, r1
 800de04:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	78fa      	ldrb	r2, [r7, #3]
 800de0a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800de0c:	2300      	movs	r3, #0
}
 800de0e:	4618      	mov	r0, r3
 800de10:	370c      	adds	r7, #12
 800de12:	46bd      	mov	sp, r7
 800de14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de18:	4770      	bx	lr

0800de1a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800de1a:	b480      	push	{r7}
 800de1c:	b083      	sub	sp, #12
 800de1e:	af00      	add	r7, sp, #0
 800de20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de28:	b2db      	uxtb	r3, r3
 800de2a:	2b04      	cmp	r3, #4
 800de2c:	d006      	beq.n	800de3c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de34:	b2da      	uxtb	r2, r3
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2204      	movs	r2, #4
 800de40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800de44:	2300      	movs	r3, #0
}
 800de46:	4618      	mov	r0, r3
 800de48:	370c      	adds	r7, #12
 800de4a:	46bd      	mov	sp, r7
 800de4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de50:	4770      	bx	lr

0800de52 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800de52:	b480      	push	{r7}
 800de54:	b083      	sub	sp, #12
 800de56:	af00      	add	r7, sp, #0
 800de58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de60:	b2db      	uxtb	r3, r3
 800de62:	2b04      	cmp	r3, #4
 800de64:	d106      	bne.n	800de74 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800de6c:	b2da      	uxtb	r2, r3
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800de74:	2300      	movs	r3, #0
}
 800de76:	4618      	mov	r0, r3
 800de78:	370c      	adds	r7, #12
 800de7a:	46bd      	mov	sp, r7
 800de7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de80:	4770      	bx	lr

0800de82 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800de82:	b580      	push	{r7, lr}
 800de84:	b082      	sub	sp, #8
 800de86:	af00      	add	r7, sp, #0
 800de88:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de90:	b2db      	uxtb	r3, r3
 800de92:	2b03      	cmp	r3, #3
 800de94:	d110      	bne.n	800deb8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d00b      	beq.n	800deb8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dea6:	69db      	ldr	r3, [r3, #28]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d005      	beq.n	800deb8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800deb2:	69db      	ldr	r3, [r3, #28]
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800deb8:	2300      	movs	r3, #0
}
 800deba:	4618      	mov	r0, r3
 800debc:	3708      	adds	r7, #8
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}

0800dec2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dec2:	b480      	push	{r7}
 800dec4:	b083      	sub	sp, #12
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	6078      	str	r0, [r7, #4]
 800deca:	460b      	mov	r3, r1
 800decc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dece:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	370c      	adds	r7, #12
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr

0800dedc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dedc:	b480      	push	{r7}
 800dede:	b083      	sub	sp, #12
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	460b      	mov	r3, r1
 800dee6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dee8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800deea:	4618      	mov	r0, r3
 800deec:	370c      	adds	r7, #12
 800deee:	46bd      	mov	sp, r7
 800def0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def4:	4770      	bx	lr

0800def6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800def6:	b580      	push	{r7, lr}
 800def8:	b086      	sub	sp, #24
 800defa:	af00      	add	r7, sp, #0
 800defc:	6078      	str	r0, [r7, #4]
 800defe:	460b      	mov	r3, r1
 800df00:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800df0a:	2300      	movs	r3, #0
 800df0c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	885b      	ldrh	r3, [r3, #2]
 800df12:	b29a      	uxth	r2, r3
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	b29b      	uxth	r3, r3
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d920      	bls.n	800df60 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	b29b      	uxth	r3, r3
 800df24:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800df26:	e013      	b.n	800df50 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800df28:	f107 030a 	add.w	r3, r7, #10
 800df2c:	4619      	mov	r1, r3
 800df2e:	6978      	ldr	r0, [r7, #20]
 800df30:	f000 f81b 	bl	800df6a <USBD_GetNextDesc>
 800df34:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	785b      	ldrb	r3, [r3, #1]
 800df3a:	2b05      	cmp	r3, #5
 800df3c:	d108      	bne.n	800df50 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800df42:	693b      	ldr	r3, [r7, #16]
 800df44:	789b      	ldrb	r3, [r3, #2]
 800df46:	78fa      	ldrb	r2, [r7, #3]
 800df48:	429a      	cmp	r2, r3
 800df4a:	d008      	beq.n	800df5e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800df4c:	2300      	movs	r3, #0
 800df4e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	885b      	ldrh	r3, [r3, #2]
 800df54:	b29a      	uxth	r2, r3
 800df56:	897b      	ldrh	r3, [r7, #10]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d8e5      	bhi.n	800df28 <USBD_GetEpDesc+0x32>
 800df5c:	e000      	b.n	800df60 <USBD_GetEpDesc+0x6a>
          break;
 800df5e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800df60:	693b      	ldr	r3, [r7, #16]
}
 800df62:	4618      	mov	r0, r3
 800df64:	3718      	adds	r7, #24
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}

0800df6a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800df6a:	b480      	push	{r7}
 800df6c:	b085      	sub	sp, #20
 800df6e:	af00      	add	r7, sp, #0
 800df70:	6078      	str	r0, [r7, #4]
 800df72:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	881a      	ldrh	r2, [r3, #0]
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	b29b      	uxth	r3, r3
 800df82:	4413      	add	r3, r2
 800df84:	b29a      	uxth	r2, r3
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	461a      	mov	r2, r3
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	4413      	add	r3, r2
 800df94:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800df96:	68fb      	ldr	r3, [r7, #12]
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3714      	adds	r7, #20
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr

0800dfa4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b087      	sub	sp, #28
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	3301      	adds	r3, #1
 800dfba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dfc2:	8a3b      	ldrh	r3, [r7, #16]
 800dfc4:	021b      	lsls	r3, r3, #8
 800dfc6:	b21a      	sxth	r2, r3
 800dfc8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dfcc:	4313      	orrs	r3, r2
 800dfce:	b21b      	sxth	r3, r3
 800dfd0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dfd2:	89fb      	ldrh	r3, [r7, #14]
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	371c      	adds	r7, #28
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr

0800dfe0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dfea:	2300      	movs	r3, #0
 800dfec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dff6:	2b40      	cmp	r3, #64	; 0x40
 800dff8:	d005      	beq.n	800e006 <USBD_StdDevReq+0x26>
 800dffa:	2b40      	cmp	r3, #64	; 0x40
 800dffc:	d857      	bhi.n	800e0ae <USBD_StdDevReq+0xce>
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d00f      	beq.n	800e022 <USBD_StdDevReq+0x42>
 800e002:	2b20      	cmp	r3, #32
 800e004:	d153      	bne.n	800e0ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	32ae      	adds	r2, #174	; 0xae
 800e010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e014:	689b      	ldr	r3, [r3, #8]
 800e016:	6839      	ldr	r1, [r7, #0]
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	4798      	blx	r3
 800e01c:	4603      	mov	r3, r0
 800e01e:	73fb      	strb	r3, [r7, #15]
      break;
 800e020:	e04a      	b.n	800e0b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	785b      	ldrb	r3, [r3, #1]
 800e026:	2b09      	cmp	r3, #9
 800e028:	d83b      	bhi.n	800e0a2 <USBD_StdDevReq+0xc2>
 800e02a:	a201      	add	r2, pc, #4	; (adr r2, 800e030 <USBD_StdDevReq+0x50>)
 800e02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e030:	0800e085 	.word	0x0800e085
 800e034:	0800e099 	.word	0x0800e099
 800e038:	0800e0a3 	.word	0x0800e0a3
 800e03c:	0800e08f 	.word	0x0800e08f
 800e040:	0800e0a3 	.word	0x0800e0a3
 800e044:	0800e063 	.word	0x0800e063
 800e048:	0800e059 	.word	0x0800e059
 800e04c:	0800e0a3 	.word	0x0800e0a3
 800e050:	0800e07b 	.word	0x0800e07b
 800e054:	0800e06d 	.word	0x0800e06d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e058:	6839      	ldr	r1, [r7, #0]
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f000 fa3c 	bl	800e4d8 <USBD_GetDescriptor>
          break;
 800e060:	e024      	b.n	800e0ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e062:	6839      	ldr	r1, [r7, #0]
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f000 fbcb 	bl	800e800 <USBD_SetAddress>
          break;
 800e06a:	e01f      	b.n	800e0ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e06c:	6839      	ldr	r1, [r7, #0]
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f000 fc0a 	bl	800e888 <USBD_SetConfig>
 800e074:	4603      	mov	r3, r0
 800e076:	73fb      	strb	r3, [r7, #15]
          break;
 800e078:	e018      	b.n	800e0ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e07a:	6839      	ldr	r1, [r7, #0]
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f000 fcad 	bl	800e9dc <USBD_GetConfig>
          break;
 800e082:	e013      	b.n	800e0ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e084:	6839      	ldr	r1, [r7, #0]
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f000 fcde 	bl	800ea48 <USBD_GetStatus>
          break;
 800e08c:	e00e      	b.n	800e0ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e08e:	6839      	ldr	r1, [r7, #0]
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f000 fd0d 	bl	800eab0 <USBD_SetFeature>
          break;
 800e096:	e009      	b.n	800e0ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e098:	6839      	ldr	r1, [r7, #0]
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f000 fd31 	bl	800eb02 <USBD_ClrFeature>
          break;
 800e0a0:	e004      	b.n	800e0ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e0a2:	6839      	ldr	r1, [r7, #0]
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f000 fd88 	bl	800ebba <USBD_CtlError>
          break;
 800e0aa:	bf00      	nop
      }
      break;
 800e0ac:	e004      	b.n	800e0b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e0ae:	6839      	ldr	r1, [r7, #0]
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f000 fd82 	bl	800ebba <USBD_CtlError>
      break;
 800e0b6:	bf00      	nop
  }

  return ret;
 800e0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3710      	adds	r7, #16
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop

0800e0c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b084      	sub	sp, #16
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e0da:	2b40      	cmp	r3, #64	; 0x40
 800e0dc:	d005      	beq.n	800e0ea <USBD_StdItfReq+0x26>
 800e0de:	2b40      	cmp	r3, #64	; 0x40
 800e0e0:	d852      	bhi.n	800e188 <USBD_StdItfReq+0xc4>
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d001      	beq.n	800e0ea <USBD_StdItfReq+0x26>
 800e0e6:	2b20      	cmp	r3, #32
 800e0e8:	d14e      	bne.n	800e188 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	3b01      	subs	r3, #1
 800e0f4:	2b02      	cmp	r3, #2
 800e0f6:	d840      	bhi.n	800e17a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	889b      	ldrh	r3, [r3, #4]
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	2b01      	cmp	r3, #1
 800e100:	d836      	bhi.n	800e170 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	889b      	ldrh	r3, [r3, #4]
 800e106:	b2db      	uxtb	r3, r3
 800e108:	4619      	mov	r1, r3
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f7ff fed9 	bl	800dec2 <USBD_CoreFindIF>
 800e110:	4603      	mov	r3, r0
 800e112:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e114:	7bbb      	ldrb	r3, [r7, #14]
 800e116:	2bff      	cmp	r3, #255	; 0xff
 800e118:	d01d      	beq.n	800e156 <USBD_StdItfReq+0x92>
 800e11a:	7bbb      	ldrb	r3, [r7, #14]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d11a      	bne.n	800e156 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e120:	7bba      	ldrb	r2, [r7, #14]
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	32ae      	adds	r2, #174	; 0xae
 800e126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e12a:	689b      	ldr	r3, [r3, #8]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d00f      	beq.n	800e150 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e130:	7bba      	ldrb	r2, [r7, #14]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e138:	7bba      	ldrb	r2, [r7, #14]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	32ae      	adds	r2, #174	; 0xae
 800e13e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e142:	689b      	ldr	r3, [r3, #8]
 800e144:	6839      	ldr	r1, [r7, #0]
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	4798      	blx	r3
 800e14a:	4603      	mov	r3, r0
 800e14c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e14e:	e004      	b.n	800e15a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e150:	2303      	movs	r3, #3
 800e152:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e154:	e001      	b.n	800e15a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e156:	2303      	movs	r3, #3
 800e158:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	88db      	ldrh	r3, [r3, #6]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d110      	bne.n	800e184 <USBD_StdItfReq+0xc0>
 800e162:	7bfb      	ldrb	r3, [r7, #15]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d10d      	bne.n	800e184 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f000 fdf1 	bl	800ed50 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e16e:	e009      	b.n	800e184 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e170:	6839      	ldr	r1, [r7, #0]
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f000 fd21 	bl	800ebba <USBD_CtlError>
          break;
 800e178:	e004      	b.n	800e184 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e17a:	6839      	ldr	r1, [r7, #0]
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f000 fd1c 	bl	800ebba <USBD_CtlError>
          break;
 800e182:	e000      	b.n	800e186 <USBD_StdItfReq+0xc2>
          break;
 800e184:	bf00      	nop
      }
      break;
 800e186:	e004      	b.n	800e192 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e188:	6839      	ldr	r1, [r7, #0]
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f000 fd15 	bl	800ebba <USBD_CtlError>
      break;
 800e190:	bf00      	nop
  }

  return ret;
 800e192:	7bfb      	ldrb	r3, [r7, #15]
}
 800e194:	4618      	mov	r0, r3
 800e196:	3710      	adds	r7, #16
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b084      	sub	sp, #16
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	889b      	ldrh	r3, [r3, #4]
 800e1ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e1b8:	2b40      	cmp	r3, #64	; 0x40
 800e1ba:	d007      	beq.n	800e1cc <USBD_StdEPReq+0x30>
 800e1bc:	2b40      	cmp	r3, #64	; 0x40
 800e1be:	f200 817f 	bhi.w	800e4c0 <USBD_StdEPReq+0x324>
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d02a      	beq.n	800e21c <USBD_StdEPReq+0x80>
 800e1c6:	2b20      	cmp	r3, #32
 800e1c8:	f040 817a 	bne.w	800e4c0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e1cc:	7bbb      	ldrb	r3, [r7, #14]
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f7ff fe83 	bl	800dedc <USBD_CoreFindEP>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e1da:	7b7b      	ldrb	r3, [r7, #13]
 800e1dc:	2bff      	cmp	r3, #255	; 0xff
 800e1de:	f000 8174 	beq.w	800e4ca <USBD_StdEPReq+0x32e>
 800e1e2:	7b7b      	ldrb	r3, [r7, #13]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	f040 8170 	bne.w	800e4ca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e1ea:	7b7a      	ldrb	r2, [r7, #13]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e1f2:	7b7a      	ldrb	r2, [r7, #13]
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	32ae      	adds	r2, #174	; 0xae
 800e1f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1fc:	689b      	ldr	r3, [r3, #8]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	f000 8163 	beq.w	800e4ca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e204:	7b7a      	ldrb	r2, [r7, #13]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	32ae      	adds	r2, #174	; 0xae
 800e20a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e20e:	689b      	ldr	r3, [r3, #8]
 800e210:	6839      	ldr	r1, [r7, #0]
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	4798      	blx	r3
 800e216:	4603      	mov	r3, r0
 800e218:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e21a:	e156      	b.n	800e4ca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	785b      	ldrb	r3, [r3, #1]
 800e220:	2b03      	cmp	r3, #3
 800e222:	d008      	beq.n	800e236 <USBD_StdEPReq+0x9a>
 800e224:	2b03      	cmp	r3, #3
 800e226:	f300 8145 	bgt.w	800e4b4 <USBD_StdEPReq+0x318>
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	f000 809b 	beq.w	800e366 <USBD_StdEPReq+0x1ca>
 800e230:	2b01      	cmp	r3, #1
 800e232:	d03c      	beq.n	800e2ae <USBD_StdEPReq+0x112>
 800e234:	e13e      	b.n	800e4b4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e23c:	b2db      	uxtb	r3, r3
 800e23e:	2b02      	cmp	r3, #2
 800e240:	d002      	beq.n	800e248 <USBD_StdEPReq+0xac>
 800e242:	2b03      	cmp	r3, #3
 800e244:	d016      	beq.n	800e274 <USBD_StdEPReq+0xd8>
 800e246:	e02c      	b.n	800e2a2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e248:	7bbb      	ldrb	r3, [r7, #14]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d00d      	beq.n	800e26a <USBD_StdEPReq+0xce>
 800e24e:	7bbb      	ldrb	r3, [r7, #14]
 800e250:	2b80      	cmp	r3, #128	; 0x80
 800e252:	d00a      	beq.n	800e26a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e254:	7bbb      	ldrb	r3, [r7, #14]
 800e256:	4619      	mov	r1, r3
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f004 fe51 	bl	8012f00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e25e:	2180      	movs	r1, #128	; 0x80
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f004 fe4d 	bl	8012f00 <USBD_LL_StallEP>
 800e266:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e268:	e020      	b.n	800e2ac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e26a:	6839      	ldr	r1, [r7, #0]
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f000 fca4 	bl	800ebba <USBD_CtlError>
              break;
 800e272:	e01b      	b.n	800e2ac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	885b      	ldrh	r3, [r3, #2]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d10e      	bne.n	800e29a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e27c:	7bbb      	ldrb	r3, [r7, #14]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d00b      	beq.n	800e29a <USBD_StdEPReq+0xfe>
 800e282:	7bbb      	ldrb	r3, [r7, #14]
 800e284:	2b80      	cmp	r3, #128	; 0x80
 800e286:	d008      	beq.n	800e29a <USBD_StdEPReq+0xfe>
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	88db      	ldrh	r3, [r3, #6]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d104      	bne.n	800e29a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e290:	7bbb      	ldrb	r3, [r7, #14]
 800e292:	4619      	mov	r1, r3
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f004 fe33 	bl	8012f00 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f000 fd58 	bl	800ed50 <USBD_CtlSendStatus>

              break;
 800e2a0:	e004      	b.n	800e2ac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e2a2:	6839      	ldr	r1, [r7, #0]
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f000 fc88 	bl	800ebba <USBD_CtlError>
              break;
 800e2aa:	bf00      	nop
          }
          break;
 800e2ac:	e107      	b.n	800e4be <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2b4:	b2db      	uxtb	r3, r3
 800e2b6:	2b02      	cmp	r3, #2
 800e2b8:	d002      	beq.n	800e2c0 <USBD_StdEPReq+0x124>
 800e2ba:	2b03      	cmp	r3, #3
 800e2bc:	d016      	beq.n	800e2ec <USBD_StdEPReq+0x150>
 800e2be:	e04b      	b.n	800e358 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e2c0:	7bbb      	ldrb	r3, [r7, #14]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d00d      	beq.n	800e2e2 <USBD_StdEPReq+0x146>
 800e2c6:	7bbb      	ldrb	r3, [r7, #14]
 800e2c8:	2b80      	cmp	r3, #128	; 0x80
 800e2ca:	d00a      	beq.n	800e2e2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e2cc:	7bbb      	ldrb	r3, [r7, #14]
 800e2ce:	4619      	mov	r1, r3
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f004 fe15 	bl	8012f00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e2d6:	2180      	movs	r1, #128	; 0x80
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f004 fe11 	bl	8012f00 <USBD_LL_StallEP>
 800e2de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e2e0:	e040      	b.n	800e364 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e2e2:	6839      	ldr	r1, [r7, #0]
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f000 fc68 	bl	800ebba <USBD_CtlError>
              break;
 800e2ea:	e03b      	b.n	800e364 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	885b      	ldrh	r3, [r3, #2]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d136      	bne.n	800e362 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e2f4:	7bbb      	ldrb	r3, [r7, #14]
 800e2f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d004      	beq.n	800e308 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e2fe:	7bbb      	ldrb	r3, [r7, #14]
 800e300:	4619      	mov	r1, r3
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f004 fe1b 	bl	8012f3e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f000 fd21 	bl	800ed50 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e30e:	7bbb      	ldrb	r3, [r7, #14]
 800e310:	4619      	mov	r1, r3
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f7ff fde2 	bl	800dedc <USBD_CoreFindEP>
 800e318:	4603      	mov	r3, r0
 800e31a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e31c:	7b7b      	ldrb	r3, [r7, #13]
 800e31e:	2bff      	cmp	r3, #255	; 0xff
 800e320:	d01f      	beq.n	800e362 <USBD_StdEPReq+0x1c6>
 800e322:	7b7b      	ldrb	r3, [r7, #13]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d11c      	bne.n	800e362 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e328:	7b7a      	ldrb	r2, [r7, #13]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e330:	7b7a      	ldrb	r2, [r7, #13]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	32ae      	adds	r2, #174	; 0xae
 800e336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e33a:	689b      	ldr	r3, [r3, #8]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d010      	beq.n	800e362 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e340:	7b7a      	ldrb	r2, [r7, #13]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	32ae      	adds	r2, #174	; 0xae
 800e346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e34a:	689b      	ldr	r3, [r3, #8]
 800e34c:	6839      	ldr	r1, [r7, #0]
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	4798      	blx	r3
 800e352:	4603      	mov	r3, r0
 800e354:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e356:	e004      	b.n	800e362 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e358:	6839      	ldr	r1, [r7, #0]
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f000 fc2d 	bl	800ebba <USBD_CtlError>
              break;
 800e360:	e000      	b.n	800e364 <USBD_StdEPReq+0x1c8>
              break;
 800e362:	bf00      	nop
          }
          break;
 800e364:	e0ab      	b.n	800e4be <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e36c:	b2db      	uxtb	r3, r3
 800e36e:	2b02      	cmp	r3, #2
 800e370:	d002      	beq.n	800e378 <USBD_StdEPReq+0x1dc>
 800e372:	2b03      	cmp	r3, #3
 800e374:	d032      	beq.n	800e3dc <USBD_StdEPReq+0x240>
 800e376:	e097      	b.n	800e4a8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e378:	7bbb      	ldrb	r3, [r7, #14]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d007      	beq.n	800e38e <USBD_StdEPReq+0x1f2>
 800e37e:	7bbb      	ldrb	r3, [r7, #14]
 800e380:	2b80      	cmp	r3, #128	; 0x80
 800e382:	d004      	beq.n	800e38e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e384:	6839      	ldr	r1, [r7, #0]
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f000 fc17 	bl	800ebba <USBD_CtlError>
                break;
 800e38c:	e091      	b.n	800e4b2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e38e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e392:	2b00      	cmp	r3, #0
 800e394:	da0b      	bge.n	800e3ae <USBD_StdEPReq+0x212>
 800e396:	7bbb      	ldrb	r3, [r7, #14]
 800e398:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e39c:	4613      	mov	r3, r2
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	4413      	add	r3, r2
 800e3a2:	009b      	lsls	r3, r3, #2
 800e3a4:	3310      	adds	r3, #16
 800e3a6:	687a      	ldr	r2, [r7, #4]
 800e3a8:	4413      	add	r3, r2
 800e3aa:	3304      	adds	r3, #4
 800e3ac:	e00b      	b.n	800e3c6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e3ae:	7bbb      	ldrb	r3, [r7, #14]
 800e3b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e3b4:	4613      	mov	r3, r2
 800e3b6:	009b      	lsls	r3, r3, #2
 800e3b8:	4413      	add	r3, r2
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	4413      	add	r3, r2
 800e3c4:	3304      	adds	r3, #4
 800e3c6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	2202      	movs	r2, #2
 800e3d2:	4619      	mov	r1, r3
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f000 fc61 	bl	800ec9c <USBD_CtlSendData>
              break;
 800e3da:	e06a      	b.n	800e4b2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e3dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	da11      	bge.n	800e408 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e3e4:	7bbb      	ldrb	r3, [r7, #14]
 800e3e6:	f003 020f 	and.w	r2, r3, #15
 800e3ea:	6879      	ldr	r1, [r7, #4]
 800e3ec:	4613      	mov	r3, r2
 800e3ee:	009b      	lsls	r3, r3, #2
 800e3f0:	4413      	add	r3, r2
 800e3f2:	009b      	lsls	r3, r3, #2
 800e3f4:	440b      	add	r3, r1
 800e3f6:	3324      	adds	r3, #36	; 0x24
 800e3f8:	881b      	ldrh	r3, [r3, #0]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d117      	bne.n	800e42e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e3fe:	6839      	ldr	r1, [r7, #0]
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f000 fbda 	bl	800ebba <USBD_CtlError>
                  break;
 800e406:	e054      	b.n	800e4b2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e408:	7bbb      	ldrb	r3, [r7, #14]
 800e40a:	f003 020f 	and.w	r2, r3, #15
 800e40e:	6879      	ldr	r1, [r7, #4]
 800e410:	4613      	mov	r3, r2
 800e412:	009b      	lsls	r3, r3, #2
 800e414:	4413      	add	r3, r2
 800e416:	009b      	lsls	r3, r3, #2
 800e418:	440b      	add	r3, r1
 800e41a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e41e:	881b      	ldrh	r3, [r3, #0]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d104      	bne.n	800e42e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e424:	6839      	ldr	r1, [r7, #0]
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f000 fbc7 	bl	800ebba <USBD_CtlError>
                  break;
 800e42c:	e041      	b.n	800e4b2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e42e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e432:	2b00      	cmp	r3, #0
 800e434:	da0b      	bge.n	800e44e <USBD_StdEPReq+0x2b2>
 800e436:	7bbb      	ldrb	r3, [r7, #14]
 800e438:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e43c:	4613      	mov	r3, r2
 800e43e:	009b      	lsls	r3, r3, #2
 800e440:	4413      	add	r3, r2
 800e442:	009b      	lsls	r3, r3, #2
 800e444:	3310      	adds	r3, #16
 800e446:	687a      	ldr	r2, [r7, #4]
 800e448:	4413      	add	r3, r2
 800e44a:	3304      	adds	r3, #4
 800e44c:	e00b      	b.n	800e466 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e44e:	7bbb      	ldrb	r3, [r7, #14]
 800e450:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e454:	4613      	mov	r3, r2
 800e456:	009b      	lsls	r3, r3, #2
 800e458:	4413      	add	r3, r2
 800e45a:	009b      	lsls	r3, r3, #2
 800e45c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e460:	687a      	ldr	r2, [r7, #4]
 800e462:	4413      	add	r3, r2
 800e464:	3304      	adds	r3, #4
 800e466:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e468:	7bbb      	ldrb	r3, [r7, #14]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d002      	beq.n	800e474 <USBD_StdEPReq+0x2d8>
 800e46e:	7bbb      	ldrb	r3, [r7, #14]
 800e470:	2b80      	cmp	r3, #128	; 0x80
 800e472:	d103      	bne.n	800e47c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	2200      	movs	r2, #0
 800e478:	601a      	str	r2, [r3, #0]
 800e47a:	e00e      	b.n	800e49a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e47c:	7bbb      	ldrb	r3, [r7, #14]
 800e47e:	4619      	mov	r1, r3
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f004 fd7b 	bl	8012f7c <USBD_LL_IsStallEP>
 800e486:	4603      	mov	r3, r0
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d003      	beq.n	800e494 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	2201      	movs	r2, #1
 800e490:	601a      	str	r2, [r3, #0]
 800e492:	e002      	b.n	800e49a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	2200      	movs	r2, #0
 800e498:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	2202      	movs	r2, #2
 800e49e:	4619      	mov	r1, r3
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f000 fbfb 	bl	800ec9c <USBD_CtlSendData>
              break;
 800e4a6:	e004      	b.n	800e4b2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e4a8:	6839      	ldr	r1, [r7, #0]
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f000 fb85 	bl	800ebba <USBD_CtlError>
              break;
 800e4b0:	bf00      	nop
          }
          break;
 800e4b2:	e004      	b.n	800e4be <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e4b4:	6839      	ldr	r1, [r7, #0]
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f000 fb7f 	bl	800ebba <USBD_CtlError>
          break;
 800e4bc:	bf00      	nop
      }
      break;
 800e4be:	e005      	b.n	800e4cc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e4c0:	6839      	ldr	r1, [r7, #0]
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f000 fb79 	bl	800ebba <USBD_CtlError>
      break;
 800e4c8:	e000      	b.n	800e4cc <USBD_StdEPReq+0x330>
      break;
 800e4ca:	bf00      	nop
  }

  return ret;
 800e4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3710      	adds	r7, #16
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}
	...

0800e4d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b084      	sub	sp, #16
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	885b      	ldrh	r3, [r3, #2]
 800e4f2:	0a1b      	lsrs	r3, r3, #8
 800e4f4:	b29b      	uxth	r3, r3
 800e4f6:	3b01      	subs	r3, #1
 800e4f8:	2b0e      	cmp	r3, #14
 800e4fa:	f200 8152 	bhi.w	800e7a2 <USBD_GetDescriptor+0x2ca>
 800e4fe:	a201      	add	r2, pc, #4	; (adr r2, 800e504 <USBD_GetDescriptor+0x2c>)
 800e500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e504:	0800e575 	.word	0x0800e575
 800e508:	0800e58d 	.word	0x0800e58d
 800e50c:	0800e5cd 	.word	0x0800e5cd
 800e510:	0800e7a3 	.word	0x0800e7a3
 800e514:	0800e7a3 	.word	0x0800e7a3
 800e518:	0800e743 	.word	0x0800e743
 800e51c:	0800e76f 	.word	0x0800e76f
 800e520:	0800e7a3 	.word	0x0800e7a3
 800e524:	0800e7a3 	.word	0x0800e7a3
 800e528:	0800e7a3 	.word	0x0800e7a3
 800e52c:	0800e7a3 	.word	0x0800e7a3
 800e530:	0800e7a3 	.word	0x0800e7a3
 800e534:	0800e7a3 	.word	0x0800e7a3
 800e538:	0800e7a3 	.word	0x0800e7a3
 800e53c:	0800e541 	.word	0x0800e541
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e546:	69db      	ldr	r3, [r3, #28]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d00b      	beq.n	800e564 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e552:	69db      	ldr	r3, [r3, #28]
 800e554:	687a      	ldr	r2, [r7, #4]
 800e556:	7c12      	ldrb	r2, [r2, #16]
 800e558:	f107 0108 	add.w	r1, r7, #8
 800e55c:	4610      	mov	r0, r2
 800e55e:	4798      	blx	r3
 800e560:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e562:	e126      	b.n	800e7b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e564:	6839      	ldr	r1, [r7, #0]
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f000 fb27 	bl	800ebba <USBD_CtlError>
        err++;
 800e56c:	7afb      	ldrb	r3, [r7, #11]
 800e56e:	3301      	adds	r3, #1
 800e570:	72fb      	strb	r3, [r7, #11]
      break;
 800e572:	e11e      	b.n	800e7b2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	687a      	ldr	r2, [r7, #4]
 800e57e:	7c12      	ldrb	r2, [r2, #16]
 800e580:	f107 0108 	add.w	r1, r7, #8
 800e584:	4610      	mov	r0, r2
 800e586:	4798      	blx	r3
 800e588:	60f8      	str	r0, [r7, #12]
      break;
 800e58a:	e112      	b.n	800e7b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	7c1b      	ldrb	r3, [r3, #16]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d10d      	bne.n	800e5b0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e59a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e59c:	f107 0208 	add.w	r2, r7, #8
 800e5a0:	4610      	mov	r0, r2
 800e5a2:	4798      	blx	r3
 800e5a4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	3301      	adds	r3, #1
 800e5aa:	2202      	movs	r2, #2
 800e5ac:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e5ae:	e100      	b.n	800e7b2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5b8:	f107 0208 	add.w	r2, r7, #8
 800e5bc:	4610      	mov	r0, r2
 800e5be:	4798      	blx	r3
 800e5c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	3301      	adds	r3, #1
 800e5c6:	2202      	movs	r2, #2
 800e5c8:	701a      	strb	r2, [r3, #0]
      break;
 800e5ca:	e0f2      	b.n	800e7b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	885b      	ldrh	r3, [r3, #2]
 800e5d0:	b2db      	uxtb	r3, r3
 800e5d2:	2b05      	cmp	r3, #5
 800e5d4:	f200 80ac 	bhi.w	800e730 <USBD_GetDescriptor+0x258>
 800e5d8:	a201      	add	r2, pc, #4	; (adr r2, 800e5e0 <USBD_GetDescriptor+0x108>)
 800e5da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5de:	bf00      	nop
 800e5e0:	0800e5f9 	.word	0x0800e5f9
 800e5e4:	0800e62d 	.word	0x0800e62d
 800e5e8:	0800e661 	.word	0x0800e661
 800e5ec:	0800e695 	.word	0x0800e695
 800e5f0:	0800e6c9 	.word	0x0800e6c9
 800e5f4:	0800e6fd 	.word	0x0800e6fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5fe:	685b      	ldr	r3, [r3, #4]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d00b      	beq.n	800e61c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	687a      	ldr	r2, [r7, #4]
 800e60e:	7c12      	ldrb	r2, [r2, #16]
 800e610:	f107 0108 	add.w	r1, r7, #8
 800e614:	4610      	mov	r0, r2
 800e616:	4798      	blx	r3
 800e618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e61a:	e091      	b.n	800e740 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e61c:	6839      	ldr	r1, [r7, #0]
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f000 facb 	bl	800ebba <USBD_CtlError>
            err++;
 800e624:	7afb      	ldrb	r3, [r7, #11]
 800e626:	3301      	adds	r3, #1
 800e628:	72fb      	strb	r3, [r7, #11]
          break;
 800e62a:	e089      	b.n	800e740 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e632:	689b      	ldr	r3, [r3, #8]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d00b      	beq.n	800e650 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e63e:	689b      	ldr	r3, [r3, #8]
 800e640:	687a      	ldr	r2, [r7, #4]
 800e642:	7c12      	ldrb	r2, [r2, #16]
 800e644:	f107 0108 	add.w	r1, r7, #8
 800e648:	4610      	mov	r0, r2
 800e64a:	4798      	blx	r3
 800e64c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e64e:	e077      	b.n	800e740 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e650:	6839      	ldr	r1, [r7, #0]
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f000 fab1 	bl	800ebba <USBD_CtlError>
            err++;
 800e658:	7afb      	ldrb	r3, [r7, #11]
 800e65a:	3301      	adds	r3, #1
 800e65c:	72fb      	strb	r3, [r7, #11]
          break;
 800e65e:	e06f      	b.n	800e740 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e666:	68db      	ldr	r3, [r3, #12]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d00b      	beq.n	800e684 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e672:	68db      	ldr	r3, [r3, #12]
 800e674:	687a      	ldr	r2, [r7, #4]
 800e676:	7c12      	ldrb	r2, [r2, #16]
 800e678:	f107 0108 	add.w	r1, r7, #8
 800e67c:	4610      	mov	r0, r2
 800e67e:	4798      	blx	r3
 800e680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e682:	e05d      	b.n	800e740 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e684:	6839      	ldr	r1, [r7, #0]
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f000 fa97 	bl	800ebba <USBD_CtlError>
            err++;
 800e68c:	7afb      	ldrb	r3, [r7, #11]
 800e68e:	3301      	adds	r3, #1
 800e690:	72fb      	strb	r3, [r7, #11]
          break;
 800e692:	e055      	b.n	800e740 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e69a:	691b      	ldr	r3, [r3, #16]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d00b      	beq.n	800e6b8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6a6:	691b      	ldr	r3, [r3, #16]
 800e6a8:	687a      	ldr	r2, [r7, #4]
 800e6aa:	7c12      	ldrb	r2, [r2, #16]
 800e6ac:	f107 0108 	add.w	r1, r7, #8
 800e6b0:	4610      	mov	r0, r2
 800e6b2:	4798      	blx	r3
 800e6b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6b6:	e043      	b.n	800e740 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e6b8:	6839      	ldr	r1, [r7, #0]
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f000 fa7d 	bl	800ebba <USBD_CtlError>
            err++;
 800e6c0:	7afb      	ldrb	r3, [r7, #11]
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	72fb      	strb	r3, [r7, #11]
          break;
 800e6c6:	e03b      	b.n	800e740 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6ce:	695b      	ldr	r3, [r3, #20]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d00b      	beq.n	800e6ec <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6da:	695b      	ldr	r3, [r3, #20]
 800e6dc:	687a      	ldr	r2, [r7, #4]
 800e6de:	7c12      	ldrb	r2, [r2, #16]
 800e6e0:	f107 0108 	add.w	r1, r7, #8
 800e6e4:	4610      	mov	r0, r2
 800e6e6:	4798      	blx	r3
 800e6e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6ea:	e029      	b.n	800e740 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e6ec:	6839      	ldr	r1, [r7, #0]
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	f000 fa63 	bl	800ebba <USBD_CtlError>
            err++;
 800e6f4:	7afb      	ldrb	r3, [r7, #11]
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	72fb      	strb	r3, [r7, #11]
          break;
 800e6fa:	e021      	b.n	800e740 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e702:	699b      	ldr	r3, [r3, #24]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d00b      	beq.n	800e720 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e70e:	699b      	ldr	r3, [r3, #24]
 800e710:	687a      	ldr	r2, [r7, #4]
 800e712:	7c12      	ldrb	r2, [r2, #16]
 800e714:	f107 0108 	add.w	r1, r7, #8
 800e718:	4610      	mov	r0, r2
 800e71a:	4798      	blx	r3
 800e71c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e71e:	e00f      	b.n	800e740 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e720:	6839      	ldr	r1, [r7, #0]
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f000 fa49 	bl	800ebba <USBD_CtlError>
            err++;
 800e728:	7afb      	ldrb	r3, [r7, #11]
 800e72a:	3301      	adds	r3, #1
 800e72c:	72fb      	strb	r3, [r7, #11]
          break;
 800e72e:	e007      	b.n	800e740 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e730:	6839      	ldr	r1, [r7, #0]
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f000 fa41 	bl	800ebba <USBD_CtlError>
          err++;
 800e738:	7afb      	ldrb	r3, [r7, #11]
 800e73a:	3301      	adds	r3, #1
 800e73c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e73e:	bf00      	nop
      }
      break;
 800e740:	e037      	b.n	800e7b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	7c1b      	ldrb	r3, [r3, #16]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d109      	bne.n	800e75e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e752:	f107 0208 	add.w	r2, r7, #8
 800e756:	4610      	mov	r0, r2
 800e758:	4798      	blx	r3
 800e75a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e75c:	e029      	b.n	800e7b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e75e:	6839      	ldr	r1, [r7, #0]
 800e760:	6878      	ldr	r0, [r7, #4]
 800e762:	f000 fa2a 	bl	800ebba <USBD_CtlError>
        err++;
 800e766:	7afb      	ldrb	r3, [r7, #11]
 800e768:	3301      	adds	r3, #1
 800e76a:	72fb      	strb	r3, [r7, #11]
      break;
 800e76c:	e021      	b.n	800e7b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	7c1b      	ldrb	r3, [r3, #16]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d10d      	bne.n	800e792 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e77c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e77e:	f107 0208 	add.w	r2, r7, #8
 800e782:	4610      	mov	r0, r2
 800e784:	4798      	blx	r3
 800e786:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	3301      	adds	r3, #1
 800e78c:	2207      	movs	r2, #7
 800e78e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e790:	e00f      	b.n	800e7b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e792:	6839      	ldr	r1, [r7, #0]
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f000 fa10 	bl	800ebba <USBD_CtlError>
        err++;
 800e79a:	7afb      	ldrb	r3, [r7, #11]
 800e79c:	3301      	adds	r3, #1
 800e79e:	72fb      	strb	r3, [r7, #11]
      break;
 800e7a0:	e007      	b.n	800e7b2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e7a2:	6839      	ldr	r1, [r7, #0]
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f000 fa08 	bl	800ebba <USBD_CtlError>
      err++;
 800e7aa:	7afb      	ldrb	r3, [r7, #11]
 800e7ac:	3301      	adds	r3, #1
 800e7ae:	72fb      	strb	r3, [r7, #11]
      break;
 800e7b0:	bf00      	nop
  }

  if (err != 0U)
 800e7b2:	7afb      	ldrb	r3, [r7, #11]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d11e      	bne.n	800e7f6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	88db      	ldrh	r3, [r3, #6]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d016      	beq.n	800e7ee <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e7c0:	893b      	ldrh	r3, [r7, #8]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d00e      	beq.n	800e7e4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	88da      	ldrh	r2, [r3, #6]
 800e7ca:	893b      	ldrh	r3, [r7, #8]
 800e7cc:	4293      	cmp	r3, r2
 800e7ce:	bf28      	it	cs
 800e7d0:	4613      	movcs	r3, r2
 800e7d2:	b29b      	uxth	r3, r3
 800e7d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e7d6:	893b      	ldrh	r3, [r7, #8]
 800e7d8:	461a      	mov	r2, r3
 800e7da:	68f9      	ldr	r1, [r7, #12]
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f000 fa5d 	bl	800ec9c <USBD_CtlSendData>
 800e7e2:	e009      	b.n	800e7f8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e7e4:	6839      	ldr	r1, [r7, #0]
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	f000 f9e7 	bl	800ebba <USBD_CtlError>
 800e7ec:	e004      	b.n	800e7f8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f000 faae 	bl	800ed50 <USBD_CtlSendStatus>
 800e7f4:	e000      	b.n	800e7f8 <USBD_GetDescriptor+0x320>
    return;
 800e7f6:	bf00      	nop
  }
}
 800e7f8:	3710      	adds	r7, #16
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop

0800e800 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b084      	sub	sp, #16
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	889b      	ldrh	r3, [r3, #4]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d131      	bne.n	800e876 <USBD_SetAddress+0x76>
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	88db      	ldrh	r3, [r3, #6]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d12d      	bne.n	800e876 <USBD_SetAddress+0x76>
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	885b      	ldrh	r3, [r3, #2]
 800e81e:	2b7f      	cmp	r3, #127	; 0x7f
 800e820:	d829      	bhi.n	800e876 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	885b      	ldrh	r3, [r3, #2]
 800e826:	b2db      	uxtb	r3, r3
 800e828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e82c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e834:	b2db      	uxtb	r3, r3
 800e836:	2b03      	cmp	r3, #3
 800e838:	d104      	bne.n	800e844 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e83a:	6839      	ldr	r1, [r7, #0]
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f000 f9bc 	bl	800ebba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e842:	e01d      	b.n	800e880 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	7bfa      	ldrb	r2, [r7, #15]
 800e848:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e84c:	7bfb      	ldrb	r3, [r7, #15]
 800e84e:	4619      	mov	r1, r3
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f004 fbc0 	bl	8012fd6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f000 fa7a 	bl	800ed50 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e85c:	7bfb      	ldrb	r3, [r7, #15]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d004      	beq.n	800e86c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2202      	movs	r2, #2
 800e866:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e86a:	e009      	b.n	800e880 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2201      	movs	r2, #1
 800e870:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e874:	e004      	b.n	800e880 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e876:	6839      	ldr	r1, [r7, #0]
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f000 f99e 	bl	800ebba <USBD_CtlError>
  }
}
 800e87e:	bf00      	nop
 800e880:	bf00      	nop
 800e882:	3710      	adds	r7, #16
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}

0800e888 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b084      	sub	sp, #16
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e892:	2300      	movs	r3, #0
 800e894:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	885b      	ldrh	r3, [r3, #2]
 800e89a:	b2da      	uxtb	r2, r3
 800e89c:	4b4e      	ldr	r3, [pc, #312]	; (800e9d8 <USBD_SetConfig+0x150>)
 800e89e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e8a0:	4b4d      	ldr	r3, [pc, #308]	; (800e9d8 <USBD_SetConfig+0x150>)
 800e8a2:	781b      	ldrb	r3, [r3, #0]
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d905      	bls.n	800e8b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e8a8:	6839      	ldr	r1, [r7, #0]
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f000 f985 	bl	800ebba <USBD_CtlError>
    return USBD_FAIL;
 800e8b0:	2303      	movs	r3, #3
 800e8b2:	e08c      	b.n	800e9ce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8ba:	b2db      	uxtb	r3, r3
 800e8bc:	2b02      	cmp	r3, #2
 800e8be:	d002      	beq.n	800e8c6 <USBD_SetConfig+0x3e>
 800e8c0:	2b03      	cmp	r3, #3
 800e8c2:	d029      	beq.n	800e918 <USBD_SetConfig+0x90>
 800e8c4:	e075      	b.n	800e9b2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e8c6:	4b44      	ldr	r3, [pc, #272]	; (800e9d8 <USBD_SetConfig+0x150>)
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d020      	beq.n	800e910 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e8ce:	4b42      	ldr	r3, [pc, #264]	; (800e9d8 <USBD_SetConfig+0x150>)
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	461a      	mov	r2, r3
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e8d8:	4b3f      	ldr	r3, [pc, #252]	; (800e9d8 <USBD_SetConfig+0x150>)
 800e8da:	781b      	ldrb	r3, [r3, #0]
 800e8dc:	4619      	mov	r1, r3
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f7ff f849 	bl	800d976 <USBD_SetClassConfig>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e8e8:	7bfb      	ldrb	r3, [r7, #15]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d008      	beq.n	800e900 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e8ee:	6839      	ldr	r1, [r7, #0]
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f000 f962 	bl	800ebba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2202      	movs	r2, #2
 800e8fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e8fe:	e065      	b.n	800e9cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f000 fa25 	bl	800ed50 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2203      	movs	r2, #3
 800e90a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e90e:	e05d      	b.n	800e9cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f000 fa1d 	bl	800ed50 <USBD_CtlSendStatus>
      break;
 800e916:	e059      	b.n	800e9cc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e918:	4b2f      	ldr	r3, [pc, #188]	; (800e9d8 <USBD_SetConfig+0x150>)
 800e91a:	781b      	ldrb	r3, [r3, #0]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d112      	bne.n	800e946 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2202      	movs	r2, #2
 800e924:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e928:	4b2b      	ldr	r3, [pc, #172]	; (800e9d8 <USBD_SetConfig+0x150>)
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	461a      	mov	r2, r3
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e932:	4b29      	ldr	r3, [pc, #164]	; (800e9d8 <USBD_SetConfig+0x150>)
 800e934:	781b      	ldrb	r3, [r3, #0]
 800e936:	4619      	mov	r1, r3
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f7ff f838 	bl	800d9ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f000 fa06 	bl	800ed50 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e944:	e042      	b.n	800e9cc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e946:	4b24      	ldr	r3, [pc, #144]	; (800e9d8 <USBD_SetConfig+0x150>)
 800e948:	781b      	ldrb	r3, [r3, #0]
 800e94a:	461a      	mov	r2, r3
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	685b      	ldr	r3, [r3, #4]
 800e950:	429a      	cmp	r2, r3
 800e952:	d02a      	beq.n	800e9aa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	685b      	ldr	r3, [r3, #4]
 800e958:	b2db      	uxtb	r3, r3
 800e95a:	4619      	mov	r1, r3
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f7ff f826 	bl	800d9ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e962:	4b1d      	ldr	r3, [pc, #116]	; (800e9d8 <USBD_SetConfig+0x150>)
 800e964:	781b      	ldrb	r3, [r3, #0]
 800e966:	461a      	mov	r2, r3
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e96c:	4b1a      	ldr	r3, [pc, #104]	; (800e9d8 <USBD_SetConfig+0x150>)
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	4619      	mov	r1, r3
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f7fe ffff 	bl	800d976 <USBD_SetClassConfig>
 800e978:	4603      	mov	r3, r0
 800e97a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e97c:	7bfb      	ldrb	r3, [r7, #15]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d00f      	beq.n	800e9a2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e982:	6839      	ldr	r1, [r7, #0]
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f000 f918 	bl	800ebba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	685b      	ldr	r3, [r3, #4]
 800e98e:	b2db      	uxtb	r3, r3
 800e990:	4619      	mov	r1, r3
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f7ff f80b 	bl	800d9ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2202      	movs	r2, #2
 800e99c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e9a0:	e014      	b.n	800e9cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f000 f9d4 	bl	800ed50 <USBD_CtlSendStatus>
      break;
 800e9a8:	e010      	b.n	800e9cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f000 f9d0 	bl	800ed50 <USBD_CtlSendStatus>
      break;
 800e9b0:	e00c      	b.n	800e9cc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e9b2:	6839      	ldr	r1, [r7, #0]
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f000 f900 	bl	800ebba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e9ba:	4b07      	ldr	r3, [pc, #28]	; (800e9d8 <USBD_SetConfig+0x150>)
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	4619      	mov	r1, r3
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f7fe fff4 	bl	800d9ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e9c6:	2303      	movs	r3, #3
 800e9c8:	73fb      	strb	r3, [r7, #15]
      break;
 800e9ca:	bf00      	nop
  }

  return ret;
 800e9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3710      	adds	r7, #16
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}
 800e9d6:	bf00      	nop
 800e9d8:	20000890 	.word	0x20000890

0800e9dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
 800e9e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	88db      	ldrh	r3, [r3, #6]
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d004      	beq.n	800e9f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e9ee:	6839      	ldr	r1, [r7, #0]
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f000 f8e2 	bl	800ebba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e9f6:	e023      	b.n	800ea40 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9fe:	b2db      	uxtb	r3, r3
 800ea00:	2b02      	cmp	r3, #2
 800ea02:	dc02      	bgt.n	800ea0a <USBD_GetConfig+0x2e>
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	dc03      	bgt.n	800ea10 <USBD_GetConfig+0x34>
 800ea08:	e015      	b.n	800ea36 <USBD_GetConfig+0x5a>
 800ea0a:	2b03      	cmp	r3, #3
 800ea0c:	d00b      	beq.n	800ea26 <USBD_GetConfig+0x4a>
 800ea0e:	e012      	b.n	800ea36 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2200      	movs	r2, #0
 800ea14:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	3308      	adds	r3, #8
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f000 f93c 	bl	800ec9c <USBD_CtlSendData>
        break;
 800ea24:	e00c      	b.n	800ea40 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	3304      	adds	r3, #4
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f000 f934 	bl	800ec9c <USBD_CtlSendData>
        break;
 800ea34:	e004      	b.n	800ea40 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ea36:	6839      	ldr	r1, [r7, #0]
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	f000 f8be 	bl	800ebba <USBD_CtlError>
        break;
 800ea3e:	bf00      	nop
}
 800ea40:	bf00      	nop
 800ea42:	3708      	adds	r7, #8
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}

0800ea48 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea58:	b2db      	uxtb	r3, r3
 800ea5a:	3b01      	subs	r3, #1
 800ea5c:	2b02      	cmp	r3, #2
 800ea5e:	d81e      	bhi.n	800ea9e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	88db      	ldrh	r3, [r3, #6]
 800ea64:	2b02      	cmp	r3, #2
 800ea66:	d004      	beq.n	800ea72 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ea68:	6839      	ldr	r1, [r7, #0]
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f000 f8a5 	bl	800ebba <USBD_CtlError>
        break;
 800ea70:	e01a      	b.n	800eaa8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2201      	movs	r2, #1
 800ea76:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d005      	beq.n	800ea8e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	68db      	ldr	r3, [r3, #12]
 800ea86:	f043 0202 	orr.w	r2, r3, #2
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	330c      	adds	r3, #12
 800ea92:	2202      	movs	r2, #2
 800ea94:	4619      	mov	r1, r3
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	f000 f900 	bl	800ec9c <USBD_CtlSendData>
      break;
 800ea9c:	e004      	b.n	800eaa8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ea9e:	6839      	ldr	r1, [r7, #0]
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f000 f88a 	bl	800ebba <USBD_CtlError>
      break;
 800eaa6:	bf00      	nop
  }
}
 800eaa8:	bf00      	nop
 800eaaa:	3708      	adds	r7, #8
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}

0800eab0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b082      	sub	sp, #8
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	885b      	ldrh	r3, [r3, #2]
 800eabe:	2b01      	cmp	r3, #1
 800eac0:	d107      	bne.n	800ead2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2201      	movs	r2, #1
 800eac6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f000 f940 	bl	800ed50 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ead0:	e013      	b.n	800eafa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	885b      	ldrh	r3, [r3, #2]
 800ead6:	2b02      	cmp	r3, #2
 800ead8:	d10b      	bne.n	800eaf2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	889b      	ldrh	r3, [r3, #4]
 800eade:	0a1b      	lsrs	r3, r3, #8
 800eae0:	b29b      	uxth	r3, r3
 800eae2:	b2da      	uxtb	r2, r3
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f000 f930 	bl	800ed50 <USBD_CtlSendStatus>
}
 800eaf0:	e003      	b.n	800eafa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800eaf2:	6839      	ldr	r1, [r7, #0]
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f000 f860 	bl	800ebba <USBD_CtlError>
}
 800eafa:	bf00      	nop
 800eafc:	3708      	adds	r7, #8
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}

0800eb02 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb02:	b580      	push	{r7, lr}
 800eb04:	b082      	sub	sp, #8
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	6078      	str	r0, [r7, #4]
 800eb0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb12:	b2db      	uxtb	r3, r3
 800eb14:	3b01      	subs	r3, #1
 800eb16:	2b02      	cmp	r3, #2
 800eb18:	d80b      	bhi.n	800eb32 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	885b      	ldrh	r3, [r3, #2]
 800eb1e:	2b01      	cmp	r3, #1
 800eb20:	d10c      	bne.n	800eb3c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2200      	movs	r2, #0
 800eb26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f000 f910 	bl	800ed50 <USBD_CtlSendStatus>
      }
      break;
 800eb30:	e004      	b.n	800eb3c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800eb32:	6839      	ldr	r1, [r7, #0]
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f000 f840 	bl	800ebba <USBD_CtlError>
      break;
 800eb3a:	e000      	b.n	800eb3e <USBD_ClrFeature+0x3c>
      break;
 800eb3c:	bf00      	nop
  }
}
 800eb3e:	bf00      	nop
 800eb40:	3708      	adds	r7, #8
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}

0800eb46 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800eb46:	b580      	push	{r7, lr}
 800eb48:	b084      	sub	sp, #16
 800eb4a:	af00      	add	r7, sp, #0
 800eb4c:	6078      	str	r0, [r7, #4]
 800eb4e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	781a      	ldrb	r2, [r3, #0]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	3301      	adds	r3, #1
 800eb60:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	781a      	ldrb	r2, [r3, #0]
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	3301      	adds	r3, #1
 800eb6e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800eb70:	68f8      	ldr	r0, [r7, #12]
 800eb72:	f7ff fa17 	bl	800dfa4 <SWAPBYTE>
 800eb76:	4603      	mov	r3, r0
 800eb78:	461a      	mov	r2, r3
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	3301      	adds	r3, #1
 800eb82:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	3301      	adds	r3, #1
 800eb88:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800eb8a:	68f8      	ldr	r0, [r7, #12]
 800eb8c:	f7ff fa0a 	bl	800dfa4 <SWAPBYTE>
 800eb90:	4603      	mov	r3, r0
 800eb92:	461a      	mov	r2, r3
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	3301      	adds	r3, #1
 800eb9c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	3301      	adds	r3, #1
 800eba2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800eba4:	68f8      	ldr	r0, [r7, #12]
 800eba6:	f7ff f9fd 	bl	800dfa4 <SWAPBYTE>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	461a      	mov	r2, r3
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	80da      	strh	r2, [r3, #6]
}
 800ebb2:	bf00      	nop
 800ebb4:	3710      	adds	r7, #16
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}

0800ebba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebba:	b580      	push	{r7, lr}
 800ebbc:	b082      	sub	sp, #8
 800ebbe:	af00      	add	r7, sp, #0
 800ebc0:	6078      	str	r0, [r7, #4]
 800ebc2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ebc4:	2180      	movs	r1, #128	; 0x80
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f004 f99a 	bl	8012f00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ebcc:	2100      	movs	r1, #0
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f004 f996 	bl	8012f00 <USBD_LL_StallEP>
}
 800ebd4:	bf00      	nop
 800ebd6:	3708      	adds	r7, #8
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b086      	sub	sp, #24
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	60f8      	str	r0, [r7, #12]
 800ebe4:	60b9      	str	r1, [r7, #8]
 800ebe6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d036      	beq.n	800ec60 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ebf6:	6938      	ldr	r0, [r7, #16]
 800ebf8:	f000 f836 	bl	800ec68 <USBD_GetLen>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	3301      	adds	r3, #1
 800ec00:	b29b      	uxth	r3, r3
 800ec02:	005b      	lsls	r3, r3, #1
 800ec04:	b29a      	uxth	r2, r3
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ec0a:	7dfb      	ldrb	r3, [r7, #23]
 800ec0c:	68ba      	ldr	r2, [r7, #8]
 800ec0e:	4413      	add	r3, r2
 800ec10:	687a      	ldr	r2, [r7, #4]
 800ec12:	7812      	ldrb	r2, [r2, #0]
 800ec14:	701a      	strb	r2, [r3, #0]
  idx++;
 800ec16:	7dfb      	ldrb	r3, [r7, #23]
 800ec18:	3301      	adds	r3, #1
 800ec1a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ec1c:	7dfb      	ldrb	r3, [r7, #23]
 800ec1e:	68ba      	ldr	r2, [r7, #8]
 800ec20:	4413      	add	r3, r2
 800ec22:	2203      	movs	r2, #3
 800ec24:	701a      	strb	r2, [r3, #0]
  idx++;
 800ec26:	7dfb      	ldrb	r3, [r7, #23]
 800ec28:	3301      	adds	r3, #1
 800ec2a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ec2c:	e013      	b.n	800ec56 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ec2e:	7dfb      	ldrb	r3, [r7, #23]
 800ec30:	68ba      	ldr	r2, [r7, #8]
 800ec32:	4413      	add	r3, r2
 800ec34:	693a      	ldr	r2, [r7, #16]
 800ec36:	7812      	ldrb	r2, [r2, #0]
 800ec38:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	613b      	str	r3, [r7, #16]
    idx++;
 800ec40:	7dfb      	ldrb	r3, [r7, #23]
 800ec42:	3301      	adds	r3, #1
 800ec44:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ec46:	7dfb      	ldrb	r3, [r7, #23]
 800ec48:	68ba      	ldr	r2, [r7, #8]
 800ec4a:	4413      	add	r3, r2
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	701a      	strb	r2, [r3, #0]
    idx++;
 800ec50:	7dfb      	ldrb	r3, [r7, #23]
 800ec52:	3301      	adds	r3, #1
 800ec54:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ec56:	693b      	ldr	r3, [r7, #16]
 800ec58:	781b      	ldrb	r3, [r3, #0]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d1e7      	bne.n	800ec2e <USBD_GetString+0x52>
 800ec5e:	e000      	b.n	800ec62 <USBD_GetString+0x86>
    return;
 800ec60:	bf00      	nop
  }
}
 800ec62:	3718      	adds	r7, #24
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ec68:	b480      	push	{r7}
 800ec6a:	b085      	sub	sp, #20
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ec70:	2300      	movs	r3, #0
 800ec72:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ec78:	e005      	b.n	800ec86 <USBD_GetLen+0x1e>
  {
    len++;
 800ec7a:	7bfb      	ldrb	r3, [r7, #15]
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	3301      	adds	r3, #1
 800ec84:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	781b      	ldrb	r3, [r3, #0]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d1f5      	bne.n	800ec7a <USBD_GetLen+0x12>
  }

  return len;
 800ec8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3714      	adds	r7, #20
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr

0800ec9c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b084      	sub	sp, #16
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	60f8      	str	r0, [r7, #12]
 800eca4:	60b9      	str	r1, [r7, #8]
 800eca6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2202      	movs	r2, #2
 800ecac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	687a      	ldr	r2, [r7, #4]
 800ecb4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	687a      	ldr	r2, [r7, #4]
 800ecba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	68ba      	ldr	r2, [r7, #8]
 800ecc0:	2100      	movs	r1, #0
 800ecc2:	68f8      	ldr	r0, [r7, #12]
 800ecc4:	f004 f9a6 	bl	8013014 <USBD_LL_Transmit>

  return USBD_OK;
 800ecc8:	2300      	movs	r3, #0
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3710      	adds	r7, #16
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}

0800ecd2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ecd2:	b580      	push	{r7, lr}
 800ecd4:	b084      	sub	sp, #16
 800ecd6:	af00      	add	r7, sp, #0
 800ecd8:	60f8      	str	r0, [r7, #12]
 800ecda:	60b9      	str	r1, [r7, #8]
 800ecdc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	68ba      	ldr	r2, [r7, #8]
 800ece2:	2100      	movs	r1, #0
 800ece4:	68f8      	ldr	r0, [r7, #12]
 800ece6:	f004 f995 	bl	8013014 <USBD_LL_Transmit>

  return USBD_OK;
 800ecea:	2300      	movs	r3, #0
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	3710      	adds	r7, #16
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}

0800ecf4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b084      	sub	sp, #16
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	60f8      	str	r0, [r7, #12]
 800ecfc:	60b9      	str	r1, [r7, #8]
 800ecfe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	2203      	movs	r2, #3
 800ed04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	687a      	ldr	r2, [r7, #4]
 800ed0c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	687a      	ldr	r2, [r7, #4]
 800ed14:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	68ba      	ldr	r2, [r7, #8]
 800ed1c:	2100      	movs	r1, #0
 800ed1e:	68f8      	ldr	r0, [r7, #12]
 800ed20:	f004 f999 	bl	8013056 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ed24:	2300      	movs	r3, #0
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3710      	adds	r7, #16
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}

0800ed2e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ed2e:	b580      	push	{r7, lr}
 800ed30:	b084      	sub	sp, #16
 800ed32:	af00      	add	r7, sp, #0
 800ed34:	60f8      	str	r0, [r7, #12]
 800ed36:	60b9      	str	r1, [r7, #8]
 800ed38:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	68ba      	ldr	r2, [r7, #8]
 800ed3e:	2100      	movs	r1, #0
 800ed40:	68f8      	ldr	r0, [r7, #12]
 800ed42:	f004 f988 	bl	8013056 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ed46:	2300      	movs	r3, #0
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3710      	adds	r7, #16
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b082      	sub	sp, #8
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2204      	movs	r2, #4
 800ed5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ed60:	2300      	movs	r3, #0
 800ed62:	2200      	movs	r2, #0
 800ed64:	2100      	movs	r1, #0
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f004 f954 	bl	8013014 <USBD_LL_Transmit>

  return USBD_OK;
 800ed6c:	2300      	movs	r3, #0
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3708      	adds	r7, #8
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}

0800ed76 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ed76:	b580      	push	{r7, lr}
 800ed78:	b082      	sub	sp, #8
 800ed7a:	af00      	add	r7, sp, #0
 800ed7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2205      	movs	r2, #5
 800ed82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ed86:	2300      	movs	r3, #0
 800ed88:	2200      	movs	r2, #0
 800ed8a:	2100      	movs	r1, #0
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f004 f962 	bl	8013056 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ed92:	2300      	movs	r3, #0
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3708      	adds	r7, #8
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b088      	sub	sp, #32
 800eda0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800eda2:	2300      	movs	r3, #0
 800eda4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800eda6:	f107 0308 	add.w	r3, r7, #8
 800edaa:	2218      	movs	r2, #24
 800edac:	2100      	movs	r1, #0
 800edae:	4618      	mov	r0, r3
 800edb0:	f001 f8d8 	bl	800ff64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800edb4:	233f      	movs	r3, #63	; 0x3f
 800edb6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800edb8:	2381      	movs	r3, #129	; 0x81
 800edba:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800edbc:	1dfb      	adds	r3, r7, #7
 800edbe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800edc0:	2301      	movs	r3, #1
 800edc2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800edc4:	f107 0308 	add.w	r3, r7, #8
 800edc8:	2100      	movs	r1, #0
 800edca:	4618      	mov	r0, r3
 800edcc:	f001 fb54 	bl	8010478 <hci_send_req>
 800edd0:	4603      	mov	r3, r0
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	da01      	bge.n	800edda <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800edd6:	23ff      	movs	r3, #255	; 0xff
 800edd8:	e000      	b.n	800eddc <aci_gap_set_non_discoverable+0x40>
  return status;
 800edda:	79fb      	ldrb	r3, [r7, #7]
}
 800eddc:	4618      	mov	r0, r3
 800edde:	3720      	adds	r7, #32
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}

0800ede4 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800ede4:	b5b0      	push	{r4, r5, r7, lr}
 800ede6:	b0ce      	sub	sp, #312	; 0x138
 800ede8:	af00      	add	r7, sp, #0
 800edea:	4605      	mov	r5, r0
 800edec:	460c      	mov	r4, r1
 800edee:	4610      	mov	r0, r2
 800edf0:	4619      	mov	r1, r3
 800edf2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800edf6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800edfa:	462a      	mov	r2, r5
 800edfc:	701a      	strb	r2, [r3, #0]
 800edfe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ee02:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ee06:	4622      	mov	r2, r4
 800ee08:	801a      	strh	r2, [r3, #0]
 800ee0a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ee0e:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800ee12:	4602      	mov	r2, r0
 800ee14:	801a      	strh	r2, [r3, #0]
 800ee16:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ee1a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800ee1e:	460a      	mov	r2, r1
 800ee20:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800ee22:	f107 0310 	add.w	r3, r7, #16
 800ee26:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800ee2a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800ee2e:	3308      	adds	r3, #8
 800ee30:	f107 0210 	add.w	r2, r7, #16
 800ee34:	4413      	add	r3, r2
 800ee36:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800ee3a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800ee3e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800ee42:	4413      	add	r3, r2
 800ee44:	3309      	adds	r3, #9
 800ee46:	f107 0210 	add.w	r2, r7, #16
 800ee4a:	4413      	add	r3, r2
 800ee4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ee50:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ee54:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ee58:	2200      	movs	r2, #0
 800ee5a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800ee62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ee66:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ee6a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800ee6e:	7812      	ldrb	r2, [r2, #0]
 800ee70:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ee72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ee76:	3301      	adds	r3, #1
 800ee78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800ee7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ee80:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ee84:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800ee88:	8812      	ldrh	r2, [r2, #0]
 800ee8a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800ee8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ee92:	3302      	adds	r3, #2
 800ee94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800ee98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ee9c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800eea0:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800eea4:	8812      	ldrh	r2, [r2, #0]
 800eea6:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800eeaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eeae:	3302      	adds	r3, #2
 800eeb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800eeb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800eeb8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800eebc:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800eec0:	7812      	ldrb	r2, [r2, #0]
 800eec2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800eec4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eec8:	3301      	adds	r3, #1
 800eeca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800eece:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800eed2:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800eed6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800eed8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eedc:	3301      	adds	r3, #1
 800eede:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800eee2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800eee6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800eeea:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800eeec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eef0:	3301      	adds	r3, #1
 800eef2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800eef6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800eefa:	3308      	adds	r3, #8
 800eefc:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800ef00:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800ef04:	4618      	mov	r0, r3
 800ef06:	f001 f81d 	bl	800ff44 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800ef0a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800ef0e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ef12:	4413      	add	r3, r2
 800ef14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800ef18:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ef1c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800ef20:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800ef22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ef26:	3301      	adds	r3, #1
 800ef28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800ef2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ef30:	3301      	adds	r3, #1
 800ef32:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800ef36:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f001 f802 	bl	800ff44 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800ef40:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800ef44:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ef48:	4413      	add	r3, r2
 800ef4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800ef4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ef52:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800ef56:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800ef58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ef5c:	3302      	adds	r3, #2
 800ef5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800ef62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ef66:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800ef6a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800ef6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ef70:	3302      	adds	r3, #2
 800ef72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ef76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ef7a:	2218      	movs	r2, #24
 800ef7c:	2100      	movs	r1, #0
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f000 fff0 	bl	800ff64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ef84:	233f      	movs	r3, #63	; 0x3f
 800ef86:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800ef8a:	2383      	movs	r3, #131	; 0x83
 800ef8c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ef90:	f107 0310 	add.w	r3, r7, #16
 800ef94:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ef98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ef9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800efa0:	f107 030f 	add.w	r3, r7, #15
 800efa4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800efa8:	2301      	movs	r3, #1
 800efaa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800efae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800efb2:	2100      	movs	r1, #0
 800efb4:	4618      	mov	r0, r3
 800efb6:	f001 fa5f 	bl	8010478 <hci_send_req>
 800efba:	4603      	mov	r3, r0
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	da01      	bge.n	800efc4 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800efc0:	23ff      	movs	r3, #255	; 0xff
 800efc2:	e004      	b.n	800efce <aci_gap_set_discoverable+0x1ea>
  return status;
 800efc4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800efc8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800efcc:	781b      	ldrb	r3, [r3, #0]
}
 800efce:	4618      	mov	r0, r3
 800efd0:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bdb0      	pop	{r4, r5, r7, pc}

0800efd8 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b0cc      	sub	sp, #304	; 0x130
 800efdc:	af00      	add	r7, sp, #0
 800efde:	4602      	mov	r2, r0
 800efe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800efe4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800efe8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800efea:	f107 0310 	add.w	r3, r7, #16
 800efee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800eff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eff6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800effa:	2200      	movs	r2, #0
 800effc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800effe:	2300      	movs	r3, #0
 800f000:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800f004:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f008:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f00c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800f010:	7812      	ldrb	r2, [r2, #0]
 800f012:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f014:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f018:	3301      	adds	r3, #1
 800f01a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f01e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f022:	2218      	movs	r2, #24
 800f024:	2100      	movs	r1, #0
 800f026:	4618      	mov	r0, r3
 800f028:	f000 ff9c 	bl	800ff64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f02c:	233f      	movs	r3, #63	; 0x3f
 800f02e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800f032:	2385      	movs	r3, #133	; 0x85
 800f034:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f038:	f107 0310 	add.w	r3, r7, #16
 800f03c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f040:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f044:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f048:	f107 030f 	add.w	r3, r7, #15
 800f04c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f050:	2301      	movs	r3, #1
 800f052:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f056:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f05a:	2100      	movs	r1, #0
 800f05c:	4618      	mov	r0, r3
 800f05e:	f001 fa0b 	bl	8010478 <hci_send_req>
 800f062:	4603      	mov	r3, r0
 800f064:	2b00      	cmp	r3, #0
 800f066:	da01      	bge.n	800f06c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800f068:	23ff      	movs	r3, #255	; 0xff
 800f06a:	e004      	b.n	800f076 <aci_gap_set_io_capability+0x9e>
  return status;
 800f06c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f070:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f074:	781b      	ldrb	r3, [r3, #0]
}
 800f076:	4618      	mov	r0, r3
 800f078:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}

0800f080 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800f080:	b5b0      	push	{r4, r5, r7, lr}
 800f082:	b0cc      	sub	sp, #304	; 0x130
 800f084:	af00      	add	r7, sp, #0
 800f086:	4605      	mov	r5, r0
 800f088:	460c      	mov	r4, r1
 800f08a:	4610      	mov	r0, r2
 800f08c:	4619      	mov	r1, r3
 800f08e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f092:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f096:	462a      	mov	r2, r5
 800f098:	701a      	strb	r2, [r3, #0]
 800f09a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f09e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f0a2:	4622      	mov	r2, r4
 800f0a4:	701a      	strb	r2, [r3, #0]
 800f0a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f0aa:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800f0ae:	4602      	mov	r2, r0
 800f0b0:	701a      	strb	r2, [r3, #0]
 800f0b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f0b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f0ba:	460a      	mov	r2, r1
 800f0bc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800f0be:	f107 0310 	add.w	r3, r7, #16
 800f0c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f0c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f0ca:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800f0d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f0dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f0e0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800f0e4:	7812      	ldrb	r2, [r2, #0]
 800f0e6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f0e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f0ec:	3301      	adds	r3, #1
 800f0ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800f0f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f0f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f0fa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800f0fe:	7812      	ldrb	r2, [r2, #0]
 800f100:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f102:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f106:	3301      	adds	r3, #1
 800f108:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800f10c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f110:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f114:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800f118:	7812      	ldrb	r2, [r2, #0]
 800f11a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f11c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f120:	3301      	adds	r3, #1
 800f122:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800f126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f12a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f12e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800f132:	7812      	ldrb	r2, [r2, #0]
 800f134:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800f136:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f13a:	3301      	adds	r3, #1
 800f13c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800f140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f144:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800f148:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800f14a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f14e:	3301      	adds	r3, #1
 800f150:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800f154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f158:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800f15c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800f15e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f162:	3301      	adds	r3, #1
 800f164:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800f168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f16c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800f170:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800f172:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f176:	3301      	adds	r3, #1
 800f178:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800f17c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f180:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800f184:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800f188:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f18c:	3304      	adds	r3, #4
 800f18e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800f192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f196:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800f19a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800f19c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f1a0:	3301      	adds	r3, #1
 800f1a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f1a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f1aa:	2218      	movs	r2, #24
 800f1ac:	2100      	movs	r1, #0
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f000 fed8 	bl	800ff64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f1b4:	233f      	movs	r3, #63	; 0x3f
 800f1b6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800f1ba:	2386      	movs	r3, #134	; 0x86
 800f1bc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f1c0:	f107 0310 	add.w	r3, r7, #16
 800f1c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f1c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f1cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f1d0:	f107 030f 	add.w	r3, r7, #15
 800f1d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f1d8:	2301      	movs	r3, #1
 800f1da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f1de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f1e2:	2100      	movs	r1, #0
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f001 f947 	bl	8010478 <hci_send_req>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	da01      	bge.n	800f1f4 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800f1f0:	23ff      	movs	r3, #255	; 0xff
 800f1f2:	e004      	b.n	800f1fe <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800f1f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f1f8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f1fc:	781b      	ldrb	r3, [r3, #0]
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f204:	46bd      	mov	sp, r7
 800f206:	bdb0      	pop	{r4, r5, r7, pc}

0800f208 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b0cc      	sub	sp, #304	; 0x130
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	4602      	mov	r2, r0
 800f210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f218:	6019      	str	r1, [r3, #0]
 800f21a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f21e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f222:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800f224:	f107 0310 	add.w	r3, r7, #16
 800f228:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f22c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f230:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f234:	2200      	movs	r2, #0
 800f236:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f238:	2300      	movs	r3, #0
 800f23a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800f23e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f242:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f246:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800f24a:	8812      	ldrh	r2, [r2, #0]
 800f24c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f24e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f252:	3302      	adds	r3, #2
 800f254:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800f258:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f25c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f260:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800f264:	6812      	ldr	r2, [r2, #0]
 800f266:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800f26a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f26e:	3304      	adds	r3, #4
 800f270:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f274:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f278:	2218      	movs	r2, #24
 800f27a:	2100      	movs	r1, #0
 800f27c:	4618      	mov	r0, r3
 800f27e:	f000 fe71 	bl	800ff64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f282:	233f      	movs	r3, #63	; 0x3f
 800f284:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800f288:	2388      	movs	r3, #136	; 0x88
 800f28a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f28e:	f107 0310 	add.w	r3, r7, #16
 800f292:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f296:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f29a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f29e:	f107 030f 	add.w	r3, r7, #15
 800f2a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f2ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f2b0:	2100      	movs	r1, #0
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f001 f8e0 	bl	8010478 <hci_send_req>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	da01      	bge.n	800f2c2 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800f2be:	23ff      	movs	r3, #255	; 0xff
 800f2c0:	e004      	b.n	800f2cc <aci_gap_pass_key_resp+0xc4>
  return status;
 800f2c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f2c6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f2ca:	781b      	ldrb	r3, [r3, #0]
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}

0800f2d6 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800f2d6:	b590      	push	{r4, r7, lr}
 800f2d8:	b0cd      	sub	sp, #308	; 0x134
 800f2da:	af00      	add	r7, sp, #0
 800f2dc:	4604      	mov	r4, r0
 800f2de:	4608      	mov	r0, r1
 800f2e0:	4611      	mov	r1, r2
 800f2e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f2e6:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800f2ea:	6013      	str	r3, [r2, #0]
 800f2ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f2f0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f2f4:	4622      	mov	r2, r4
 800f2f6:	701a      	strb	r2, [r3, #0]
 800f2f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f2fc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f300:	4602      	mov	r2, r0
 800f302:	701a      	strb	r2, [r3, #0]
 800f304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f308:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800f30c:	460a      	mov	r2, r1
 800f30e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800f310:	f107 0310 	add.w	r3, r7, #16
 800f314:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800f318:	f107 0308 	add.w	r3, r7, #8
 800f31c:	2207      	movs	r2, #7
 800f31e:	2100      	movs	r1, #0
 800f320:	4618      	mov	r0, r3
 800f322:	f000 fe1f 	bl	800ff64 <Osal_MemSet>
  int index_input = 0;
 800f326:	2300      	movs	r3, #0
 800f328:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800f32c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f330:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f334:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800f338:	7812      	ldrb	r2, [r2, #0]
 800f33a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f33c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f340:	3301      	adds	r3, #1
 800f342:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800f346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f34a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f34e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800f352:	7812      	ldrb	r2, [r2, #0]
 800f354:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f356:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f35a:	3301      	adds	r3, #1
 800f35c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800f360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f364:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f368:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800f36c:	7812      	ldrb	r2, [r2, #0]
 800f36e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f370:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f374:	3301      	adds	r3, #1
 800f376:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f37a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f37e:	2218      	movs	r2, #24
 800f380:	2100      	movs	r1, #0
 800f382:	4618      	mov	r0, r3
 800f384:	f000 fdee 	bl	800ff64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f388:	233f      	movs	r3, #63	; 0x3f
 800f38a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800f38e:	238a      	movs	r3, #138	; 0x8a
 800f390:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f394:	f107 0310 	add.w	r3, r7, #16
 800f398:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f39c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f3a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800f3a4:	f107 0308 	add.w	r3, r7, #8
 800f3a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800f3ac:	2307      	movs	r3, #7
 800f3ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f3b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f3b6:	2100      	movs	r1, #0
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f001 f85d 	bl	8010478 <hci_send_req>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	da01      	bge.n	800f3c8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800f3c4:	23ff      	movs	r3, #255	; 0xff
 800f3c6:	e02e      	b.n	800f426 <aci_gap_init+0x150>
  if ( resp.Status )
 800f3c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f3cc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d005      	beq.n	800f3e2 <aci_gap_init+0x10c>
    return resp.Status;
 800f3d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f3da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f3de:	781b      	ldrb	r3, [r3, #0]
 800f3e0:	e021      	b.n	800f426 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800f3e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f3e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f3ea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f3ee:	b29a      	uxth	r2, r3
 800f3f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f3f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800f3fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f400:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f404:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f408:	b29a      	uxth	r2, r3
 800f40a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800f40e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800f410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f414:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f418:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800f41c:	b29a      	uxth	r2, r3
 800f41e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800f422:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800f424:	2300      	movs	r3, #0
}
 800f426:	4618      	mov	r0, r3
 800f428:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd90      	pop	{r4, r7, pc}

0800f430 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b0cc      	sub	sp, #304	; 0x130
 800f434:	af00      	add	r7, sp, #0
 800f436:	4602      	mov	r2, r0
 800f438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f43c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f440:	6019      	str	r1, [r3, #0]
 800f442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f446:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f44a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800f44c:	f107 0310 	add.w	r3, r7, #16
 800f450:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f458:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f45c:	2200      	movs	r2, #0
 800f45e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f460:	2300      	movs	r3, #0
 800f462:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800f466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f46a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f46e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800f472:	7812      	ldrb	r2, [r2, #0]
 800f474:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f476:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f47a:	3301      	adds	r3, #1
 800f47c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800f480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f484:	1c58      	adds	r0, r3, #1
 800f486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f48a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f48e:	781a      	ldrb	r2, [r3, #0]
 800f490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f498:	6819      	ldr	r1, [r3, #0]
 800f49a:	f000 fd53 	bl	800ff44 <Osal_MemCpy>
  index_input += AdvDataLen;
 800f49e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f4a2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800f4ac:	4413      	add	r3, r2
 800f4ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f4b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f4b6:	2218      	movs	r2, #24
 800f4b8:	2100      	movs	r1, #0
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f000 fd52 	bl	800ff64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f4c0:	233f      	movs	r3, #63	; 0x3f
 800f4c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800f4c6:	238e      	movs	r3, #142	; 0x8e
 800f4c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f4cc:	f107 0310 	add.w	r3, r7, #16
 800f4d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f4d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f4d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f4dc:	f107 030f 	add.w	r3, r7, #15
 800f4e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f4ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f4ee:	2100      	movs	r1, #0
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f000 ffc1 	bl	8010478 <hci_send_req>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	da01      	bge.n	800f500 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800f4fc:	23ff      	movs	r3, #255	; 0xff
 800f4fe:	e004      	b.n	800f50a <aci_gap_update_adv_data+0xda>
  return status;
 800f500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f504:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f508:	781b      	ldrb	r3, [r3, #0]
}
 800f50a:	4618      	mov	r0, r3
 800f50c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}

0800f514 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b088      	sub	sp, #32
 800f518:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800f51a:	2300      	movs	r3, #0
 800f51c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f51e:	f107 0308 	add.w	r3, r7, #8
 800f522:	2218      	movs	r2, #24
 800f524:	2100      	movs	r1, #0
 800f526:	4618      	mov	r0, r3
 800f528:	f000 fd1c 	bl	800ff64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f52c:	233f      	movs	r3, #63	; 0x3f
 800f52e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800f530:	2392      	movs	r3, #146	; 0x92
 800f532:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f534:	1dfb      	adds	r3, r7, #7
 800f536:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f538:	2301      	movs	r3, #1
 800f53a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f53c:	f107 0308 	add.w	r3, r7, #8
 800f540:	2100      	movs	r1, #0
 800f542:	4618      	mov	r0, r3
 800f544:	f000 ff98 	bl	8010478 <hci_send_req>
 800f548:	4603      	mov	r3, r0
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	da01      	bge.n	800f552 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800f54e:	23ff      	movs	r3, #255	; 0xff
 800f550:	e000      	b.n	800f554 <aci_gap_configure_whitelist+0x40>
  return status;
 800f552:	79fb      	ldrb	r3, [r7, #7]
}
 800f554:	4618      	mov	r0, r3
 800f556:	3720      	adds	r7, #32
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}

0800f55c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b0cc      	sub	sp, #304	; 0x130
 800f560:	af00      	add	r7, sp, #0
 800f562:	4602      	mov	r2, r0
 800f564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f568:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f56c:	801a      	strh	r2, [r3, #0]
 800f56e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f572:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800f576:	460a      	mov	r2, r1
 800f578:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800f57a:	f107 0310 	add.w	r3, r7, #16
 800f57e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f586:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f58a:	2200      	movs	r2, #0
 800f58c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f58e:	2300      	movs	r3, #0
 800f590:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800f594:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f598:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f59c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800f5a0:	8812      	ldrh	r2, [r2, #0]
 800f5a2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f5a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f5a8:	3302      	adds	r3, #2
 800f5aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800f5ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f5b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f5b6:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800f5ba:	7812      	ldrb	r2, [r2, #0]
 800f5bc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f5be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f5c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f5cc:	2218      	movs	r2, #24
 800f5ce:	2100      	movs	r1, #0
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f000 fcc7 	bl	800ff64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f5d6:	233f      	movs	r3, #63	; 0x3f
 800f5d8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800f5dc:	23a5      	movs	r3, #165	; 0xa5
 800f5de:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f5e2:	f107 0310 	add.w	r3, r7, #16
 800f5e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f5ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f5ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f5f2:	f107 030f 	add.w	r3, r7, #15
 800f5f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f600:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f604:	2100      	movs	r1, #0
 800f606:	4618      	mov	r0, r3
 800f608:	f000 ff36 	bl	8010478 <hci_send_req>
 800f60c:	4603      	mov	r3, r0
 800f60e:	2b00      	cmp	r3, #0
 800f610:	da01      	bge.n	800f616 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800f612:	23ff      	movs	r3, #255	; 0xff
 800f614:	e004      	b.n	800f620 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800f616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f61a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f61e:	781b      	ldrb	r3, [r3, #0]
}
 800f620:	4618      	mov	r0, r3
 800f622:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}

0800f62a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800f62a:	b580      	push	{r7, lr}
 800f62c:	b088      	sub	sp, #32
 800f62e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800f630:	2300      	movs	r3, #0
 800f632:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f634:	f107 0308 	add.w	r3, r7, #8
 800f638:	2218      	movs	r2, #24
 800f63a:	2100      	movs	r1, #0
 800f63c:	4618      	mov	r0, r3
 800f63e:	f000 fc91 	bl	800ff64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f642:	233f      	movs	r3, #63	; 0x3f
 800f644:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800f646:	f240 1301 	movw	r3, #257	; 0x101
 800f64a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f64c:	1dfb      	adds	r3, r7, #7
 800f64e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f650:	2301      	movs	r3, #1
 800f652:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f654:	f107 0308 	add.w	r3, r7, #8
 800f658:	2100      	movs	r1, #0
 800f65a:	4618      	mov	r0, r3
 800f65c:	f000 ff0c 	bl	8010478 <hci_send_req>
 800f660:	4603      	mov	r3, r0
 800f662:	2b00      	cmp	r3, #0
 800f664:	da01      	bge.n	800f66a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800f666:	23ff      	movs	r3, #255	; 0xff
 800f668:	e000      	b.n	800f66c <aci_gatt_init+0x42>
  return status;
 800f66a:	79fb      	ldrb	r3, [r7, #7]
}
 800f66c:	4618      	mov	r0, r3
 800f66e:	3720      	adds	r7, #32
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}

0800f674 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800f674:	b590      	push	{r4, r7, lr}
 800f676:	b0cf      	sub	sp, #316	; 0x13c
 800f678:	af00      	add	r7, sp, #0
 800f67a:	4604      	mov	r4, r0
 800f67c:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800f680:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800f684:	6001      	str	r1, [r0, #0]
 800f686:	4610      	mov	r0, r2
 800f688:	4619      	mov	r1, r3
 800f68a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f68e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800f692:	4622      	mov	r2, r4
 800f694:	701a      	strb	r2, [r3, #0]
 800f696:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f69a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800f69e:	4602      	mov	r2, r0
 800f6a0:	701a      	strb	r2, [r3, #0]
 800f6a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f6a6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800f6aa:	460a      	mov	r2, r1
 800f6ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800f6ae:	f107 0310 	add.w	r3, r7, #16
 800f6b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800f6b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f6ba:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800f6be:	781b      	ldrb	r3, [r3, #0]
 800f6c0:	2b01      	cmp	r3, #1
 800f6c2:	d00a      	beq.n	800f6da <aci_gatt_add_service+0x66>
 800f6c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f6c8:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	2b02      	cmp	r3, #2
 800f6d0:	d101      	bne.n	800f6d6 <aci_gatt_add_service+0x62>
 800f6d2:	2311      	movs	r3, #17
 800f6d4:	e002      	b.n	800f6dc <aci_gatt_add_service+0x68>
 800f6d6:	2301      	movs	r3, #1
 800f6d8:	e000      	b.n	800f6dc <aci_gatt_add_service+0x68>
 800f6da:	2303      	movs	r3, #3
 800f6dc:	f107 0210 	add.w	r2, r7, #16
 800f6e0:	4413      	add	r3, r2
 800f6e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800f6e6:	f107 030c 	add.w	r3, r7, #12
 800f6ea:	2203      	movs	r2, #3
 800f6ec:	2100      	movs	r1, #0
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f000 fc38 	bl	800ff64 <Osal_MemSet>
  int index_input = 0;
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800f6fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f6fe:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800f702:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800f706:	7812      	ldrb	r2, [r2, #0]
 800f708:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f70a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f70e:	3301      	adds	r3, #1
 800f710:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800f714:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f718:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800f71c:	781b      	ldrb	r3, [r3, #0]
 800f71e:	2b01      	cmp	r3, #1
 800f720:	d002      	beq.n	800f728 <aci_gatt_add_service+0xb4>
 800f722:	2b02      	cmp	r3, #2
 800f724:	d004      	beq.n	800f730 <aci_gatt_add_service+0xbc>
 800f726:	e007      	b.n	800f738 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800f728:	2302      	movs	r3, #2
 800f72a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800f72e:	e005      	b.n	800f73c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800f730:	2310      	movs	r3, #16
 800f732:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800f736:	e001      	b.n	800f73c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800f738:	2397      	movs	r3, #151	; 0x97
 800f73a:	e06c      	b.n	800f816 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800f73c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f740:	1c58      	adds	r0, r3, #1
 800f742:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800f746:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f74a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800f74e:	6819      	ldr	r1, [r3, #0]
 800f750:	f000 fbf8 	bl	800ff44 <Osal_MemCpy>
    index_input += size;
 800f754:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800f758:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800f75c:	4413      	add	r3, r2
 800f75e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800f762:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f766:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800f76a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800f76e:	7812      	ldrb	r2, [r2, #0]
 800f770:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800f772:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f776:	3301      	adds	r3, #1
 800f778:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800f77c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f780:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800f784:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800f788:	7812      	ldrb	r2, [r2, #0]
 800f78a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800f78c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f790:	3301      	adds	r3, #1
 800f792:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f796:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f79a:	2218      	movs	r2, #24
 800f79c:	2100      	movs	r1, #0
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f000 fbe0 	bl	800ff64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f7a4:	233f      	movs	r3, #63	; 0x3f
 800f7a6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800f7aa:	f44f 7381 	mov.w	r3, #258	; 0x102
 800f7ae:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f7b2:	f107 0310 	add.w	r3, r7, #16
 800f7b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f7ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f7be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800f7c2:	f107 030c 	add.w	r3, r7, #12
 800f7c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800f7ca:	2303      	movs	r3, #3
 800f7cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f7d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f7d4:	2100      	movs	r1, #0
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f000 fe4e 	bl	8010478 <hci_send_req>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	da01      	bge.n	800f7e6 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800f7e2:	23ff      	movs	r3, #255	; 0xff
 800f7e4:	e017      	b.n	800f816 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800f7e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f7ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f7ee:	781b      	ldrb	r3, [r3, #0]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d005      	beq.n	800f800 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800f7f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f7f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f7fc:	781b      	ldrb	r3, [r3, #0]
 800f7fe:	e00a      	b.n	800f816 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800f800:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f804:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f808:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f80c:	b29a      	uxth	r2, r3
 800f80e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f812:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800f814:	2300      	movs	r3, #0
}
 800f816:	4618      	mov	r0, r3
 800f818:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd90      	pop	{r4, r7, pc}

0800f820 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800f820:	b590      	push	{r4, r7, lr}
 800f822:	b0d1      	sub	sp, #324	; 0x144
 800f824:	af00      	add	r7, sp, #0
 800f826:	4604      	mov	r4, r0
 800f828:	4608      	mov	r0, r1
 800f82a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800f82e:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800f832:	600a      	str	r2, [r1, #0]
 800f834:	4619      	mov	r1, r3
 800f836:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f83a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800f83e:	4622      	mov	r2, r4
 800f840:	801a      	strh	r2, [r3, #0]
 800f842:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f846:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800f84a:	4602      	mov	r2, r0
 800f84c:	701a      	strb	r2, [r3, #0]
 800f84e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f852:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800f856:	460a      	mov	r2, r1
 800f858:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800f85a:	f107 0318 	add.w	r3, r7, #24
 800f85e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800f862:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f866:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800f86a:	781b      	ldrb	r3, [r3, #0]
 800f86c:	2b01      	cmp	r3, #1
 800f86e:	d00a      	beq.n	800f886 <aci_gatt_add_char+0x66>
 800f870:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f874:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	2b02      	cmp	r3, #2
 800f87c:	d101      	bne.n	800f882 <aci_gatt_add_char+0x62>
 800f87e:	2313      	movs	r3, #19
 800f880:	e002      	b.n	800f888 <aci_gatt_add_char+0x68>
 800f882:	2303      	movs	r3, #3
 800f884:	e000      	b.n	800f888 <aci_gatt_add_char+0x68>
 800f886:	2305      	movs	r3, #5
 800f888:	f107 0218 	add.w	r2, r7, #24
 800f88c:	4413      	add	r3, r2
 800f88e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800f892:	f107 0314 	add.w	r3, r7, #20
 800f896:	2203      	movs	r2, #3
 800f898:	2100      	movs	r1, #0
 800f89a:	4618      	mov	r0, r3
 800f89c:	f000 fb62 	bl	800ff64 <Osal_MemSet>
  int index_input = 0;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800f8a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f8aa:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800f8ae:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800f8b2:	8812      	ldrh	r2, [r2, #0]
 800f8b4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f8b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f8ba:	3302      	adds	r3, #2
 800f8bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800f8c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f8c4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800f8c8:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800f8cc:	7812      	ldrb	r2, [r2, #0]
 800f8ce:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f8d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f8d4:	3301      	adds	r3, #1
 800f8d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800f8da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f8de:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800f8e2:	781b      	ldrb	r3, [r3, #0]
 800f8e4:	2b01      	cmp	r3, #1
 800f8e6:	d002      	beq.n	800f8ee <aci_gatt_add_char+0xce>
 800f8e8:	2b02      	cmp	r3, #2
 800f8ea:	d004      	beq.n	800f8f6 <aci_gatt_add_char+0xd6>
 800f8ec:	e007      	b.n	800f8fe <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800f8ee:	2302      	movs	r3, #2
 800f8f0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800f8f4:	e005      	b.n	800f902 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800f8f6:	2310      	movs	r3, #16
 800f8f8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800f8fc:	e001      	b.n	800f902 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800f8fe:	2397      	movs	r3, #151	; 0x97
 800f900:	e091      	b.n	800fa26 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800f902:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f906:	1cd8      	adds	r0, r3, #3
 800f908:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800f90c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f910:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800f914:	6819      	ldr	r1, [r3, #0]
 800f916:	f000 fb15 	bl	800ff44 <Osal_MemCpy>
    index_input += size;
 800f91a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800f91e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800f922:	4413      	add	r3, r2
 800f924:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800f928:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f92c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800f930:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800f934:	8812      	ldrh	r2, [r2, #0]
 800f936:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800f938:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f93c:	3302      	adds	r3, #2
 800f93e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800f942:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f946:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800f94a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800f94c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f950:	3301      	adds	r3, #1
 800f952:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800f956:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f95a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800f95e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800f960:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f964:	3301      	adds	r3, #1
 800f966:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800f96a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f96e:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800f972:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800f974:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f978:	3301      	adds	r3, #1
 800f97a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800f97e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f982:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800f986:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800f988:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f98c:	3301      	adds	r3, #1
 800f98e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800f992:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f996:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800f99a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800f99c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f9a0:	3301      	adds	r3, #1
 800f9a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f9a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800f9aa:	2218      	movs	r2, #24
 800f9ac:	2100      	movs	r1, #0
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f000 fad8 	bl	800ff64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f9b4:	233f      	movs	r3, #63	; 0x3f
 800f9b6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800f9ba:	f44f 7382 	mov.w	r3, #260	; 0x104
 800f9be:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800f9c2:	f107 0318 	add.w	r3, r7, #24
 800f9c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800f9ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f9ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800f9d2:	f107 0314 	add.w	r3, r7, #20
 800f9d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800f9da:	2303      	movs	r3, #3
 800f9dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f9e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800f9e4:	2100      	movs	r1, #0
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f000 fd46 	bl	8010478 <hci_send_req>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	da01      	bge.n	800f9f6 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800f9f2:	23ff      	movs	r3, #255	; 0xff
 800f9f4:	e017      	b.n	800fa26 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800f9f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f9fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f9fe:	781b      	ldrb	r3, [r3, #0]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d005      	beq.n	800fa10 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800fa04:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fa08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fa0c:	781b      	ldrb	r3, [r3, #0]
 800fa0e:	e00a      	b.n	800fa26 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800fa10:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fa14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fa18:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fa1c:	b29a      	uxth	r2, r3
 800fa1e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800fa22:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800fa24:	2300      	movs	r3, #0
}
 800fa26:	4618      	mov	r0, r3
 800fa28:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd90      	pop	{r4, r7, pc}

0800fa30 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800fa30:	b5b0      	push	{r4, r5, r7, lr}
 800fa32:	b0cc      	sub	sp, #304	; 0x130
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	4605      	mov	r5, r0
 800fa38:	460c      	mov	r4, r1
 800fa3a:	4610      	mov	r0, r2
 800fa3c:	4619      	mov	r1, r3
 800fa3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fa42:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fa46:	462a      	mov	r2, r5
 800fa48:	801a      	strh	r2, [r3, #0]
 800fa4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fa4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fa52:	4622      	mov	r2, r4
 800fa54:	801a      	strh	r2, [r3, #0]
 800fa56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fa5a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800fa5e:	4602      	mov	r2, r0
 800fa60:	701a      	strb	r2, [r3, #0]
 800fa62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fa66:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800fa6a:	460a      	mov	r2, r1
 800fa6c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800fa6e:	f107 0310 	add.w	r3, r7, #16
 800fa72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800fa76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fa7a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fa7e:	2200      	movs	r2, #0
 800fa80:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fa82:	2300      	movs	r3, #0
 800fa84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800fa88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fa8c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fa90:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800fa94:	8812      	ldrh	r2, [r2, #0]
 800fa96:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800fa98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fa9c:	3302      	adds	r3, #2
 800fa9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800faa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800faa6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800faaa:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800faae:	8812      	ldrh	r2, [r2, #0]
 800fab0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800fab2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fab6:	3302      	adds	r3, #2
 800fab8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800fabc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fac0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fac4:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800fac8:	7812      	ldrb	r2, [r2, #0]
 800faca:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800facc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fad0:	3301      	adds	r3, #1
 800fad2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800fad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fada:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fade:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800fae2:	7812      	ldrb	r2, [r2, #0]
 800fae4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800fae6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800faea:	3301      	adds	r3, #1
 800faec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800faf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800faf4:	1d98      	adds	r0, r3, #6
 800faf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fafa:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800fafe:	781b      	ldrb	r3, [r3, #0]
 800fb00:	461a      	mov	r2, r3
 800fb02:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800fb06:	f000 fa1d 	bl	800ff44 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800fb0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb0e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800fb18:	4413      	add	r3, r2
 800fb1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fb1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fb22:	2218      	movs	r2, #24
 800fb24:	2100      	movs	r1, #0
 800fb26:	4618      	mov	r0, r3
 800fb28:	f000 fa1c 	bl	800ff64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800fb2c:	233f      	movs	r3, #63	; 0x3f
 800fb2e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800fb32:	f44f 7383 	mov.w	r3, #262	; 0x106
 800fb36:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800fb3a:	f107 0310 	add.w	r3, r7, #16
 800fb3e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800fb42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fb46:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800fb4a:	f107 030f 	add.w	r3, r7, #15
 800fb4e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800fb52:	2301      	movs	r3, #1
 800fb54:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fb58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fb5c:	2100      	movs	r1, #0
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f000 fc8a 	bl	8010478 <hci_send_req>
 800fb64:	4603      	mov	r3, r0
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	da01      	bge.n	800fb6e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800fb6a:	23ff      	movs	r3, #255	; 0xff
 800fb6c:	e004      	b.n	800fb78 <aci_gatt_update_char_value+0x148>
  return status;
 800fb6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb72:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fb76:	781b      	ldrb	r3, [r3, #0]
}
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bdb0      	pop	{r4, r5, r7, pc}

0800fb82 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800fb82:	b580      	push	{r7, lr}
 800fb84:	b0cc      	sub	sp, #304	; 0x130
 800fb86:	af00      	add	r7, sp, #0
 800fb88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fb90:	601a      	str	r2, [r3, #0]
 800fb92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb96:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800fb9a:	4602      	mov	r2, r0
 800fb9c:	701a      	strb	r2, [r3, #0]
 800fb9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fba2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fba6:	460a      	mov	r2, r1
 800fba8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800fbaa:	f107 0310 	add.w	r3, r7, #16
 800fbae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800fbb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fbb6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fbba:	2200      	movs	r2, #0
 800fbbc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800fbc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fbc8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fbcc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800fbd0:	7812      	ldrb	r2, [r2, #0]
 800fbd2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fbd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fbd8:	3301      	adds	r3, #1
 800fbda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800fbde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fbe2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fbe6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800fbea:	7812      	ldrb	r2, [r2, #0]
 800fbec:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800fbee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fbf2:	3301      	adds	r3, #1
 800fbf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800fbf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fbfc:	1c98      	adds	r0, r3, #2
 800fbfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fc02:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fc06:	781a      	ldrb	r2, [r3, #0]
 800fc08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fc0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fc10:	6819      	ldr	r1, [r3, #0]
 800fc12:	f000 f997 	bl	800ff44 <Osal_MemCpy>
  index_input += Length;
 800fc16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fc1a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fc1e:	781b      	ldrb	r3, [r3, #0]
 800fc20:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800fc24:	4413      	add	r3, r2
 800fc26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fc2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fc2e:	2218      	movs	r2, #24
 800fc30:	2100      	movs	r1, #0
 800fc32:	4618      	mov	r0, r3
 800fc34:	f000 f996 	bl	800ff64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800fc38:	233f      	movs	r3, #63	; 0x3f
 800fc3a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800fc3e:	230c      	movs	r3, #12
 800fc40:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800fc44:	f107 0310 	add.w	r3, r7, #16
 800fc48:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800fc4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fc50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800fc54:	f107 030f 	add.w	r3, r7, #15
 800fc58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800fc5c:	2301      	movs	r3, #1
 800fc5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fc62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fc66:	2100      	movs	r1, #0
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f000 fc05 	bl	8010478 <hci_send_req>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	da01      	bge.n	800fc78 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800fc74:	23ff      	movs	r3, #255	; 0xff
 800fc76:	e004      	b.n	800fc82 <aci_hal_write_config_data+0x100>
  return status;
 800fc78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fc7c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fc80:	781b      	ldrb	r3, [r3, #0]
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}

0800fc8c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b0cc      	sub	sp, #304	; 0x130
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	4602      	mov	r2, r0
 800fc94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fc98:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800fc9c:	701a      	strb	r2, [r3, #0]
 800fc9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fca2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fca6:	460a      	mov	r2, r1
 800fca8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800fcaa:	f107 0310 	add.w	r3, r7, #16
 800fcae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800fcb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fcb6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fcba:	2200      	movs	r2, #0
 800fcbc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800fcc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fcc8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fccc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800fcd0:	7812      	ldrb	r2, [r2, #0]
 800fcd2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fcd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fcd8:	3301      	adds	r3, #1
 800fcda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800fcde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fce2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fce6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800fcea:	7812      	ldrb	r2, [r2, #0]
 800fcec:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800fcee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fcf2:	3301      	adds	r3, #1
 800fcf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fcf8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fcfc:	2218      	movs	r2, #24
 800fcfe:	2100      	movs	r1, #0
 800fd00:	4618      	mov	r0, r3
 800fd02:	f000 f92f 	bl	800ff64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800fd06:	233f      	movs	r3, #63	; 0x3f
 800fd08:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800fd0c:	230f      	movs	r3, #15
 800fd0e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800fd12:	f107 0310 	add.w	r3, r7, #16
 800fd16:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800fd1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fd1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800fd22:	f107 030f 	add.w	r3, r7, #15
 800fd26:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800fd2a:	2301      	movs	r3, #1
 800fd2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fd30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fd34:	2100      	movs	r1, #0
 800fd36:	4618      	mov	r0, r3
 800fd38:	f000 fb9e 	bl	8010478 <hci_send_req>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	da01      	bge.n	800fd46 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800fd42:	23ff      	movs	r3, #255	; 0xff
 800fd44:	e004      	b.n	800fd50 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800fd46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fd4a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fd4e:	781b      	ldrb	r3, [r3, #0]
}
 800fd50:	4618      	mov	r0, r3
 800fd52:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}

0800fd5a <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800fd5a:	b580      	push	{r7, lr}
 800fd5c:	b0cc      	sub	sp, #304	; 0x130
 800fd5e:	af00      	add	r7, sp, #0
 800fd60:	4602      	mov	r2, r0
 800fd62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fd66:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fd6a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800fd6c:	f107 0310 	add.w	r3, r7, #16
 800fd70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800fd74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fd78:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fd80:	2300      	movs	r3, #0
 800fd82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800fd86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fd8a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fd8e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800fd92:	8812      	ldrh	r2, [r2, #0]
 800fd94:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800fd96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fd9a:	3302      	adds	r3, #2
 800fd9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fda0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fda4:	2218      	movs	r2, #24
 800fda6:	2100      	movs	r1, #0
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f000 f8db 	bl	800ff64 <Osal_MemSet>
  rq.ogf = 0x3f;
 800fdae:	233f      	movs	r3, #63	; 0x3f
 800fdb0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800fdb4:	2318      	movs	r3, #24
 800fdb6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800fdba:	f107 0310 	add.w	r3, r7, #16
 800fdbe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800fdc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fdc6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800fdca:	f107 030f 	add.w	r3, r7, #15
 800fdce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fdd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fddc:	2100      	movs	r1, #0
 800fdde:	4618      	mov	r0, r3
 800fde0:	f000 fb4a 	bl	8010478 <hci_send_req>
 800fde4:	4603      	mov	r3, r0
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	da01      	bge.n	800fdee <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800fdea:	23ff      	movs	r3, #255	; 0xff
 800fdec:	e004      	b.n	800fdf8 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800fdee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fdf2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fdf6:	781b      	ldrb	r3, [r3, #0]
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bd80      	pop	{r7, pc}

0800fe02 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800fe02:	b580      	push	{r7, lr}
 800fe04:	b088      	sub	sp, #32
 800fe06:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fe0c:	f107 0308 	add.w	r3, r7, #8
 800fe10:	2218      	movs	r2, #24
 800fe12:	2100      	movs	r1, #0
 800fe14:	4618      	mov	r0, r3
 800fe16:	f000 f8a5 	bl	800ff64 <Osal_MemSet>
  rq.ogf = 0x03;
 800fe1a:	2303      	movs	r3, #3
 800fe1c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800fe1e:	2303      	movs	r3, #3
 800fe20:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800fe22:	1dfb      	adds	r3, r7, #7
 800fe24:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800fe26:	2301      	movs	r3, #1
 800fe28:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fe2a:	f107 0308 	add.w	r3, r7, #8
 800fe2e:	2100      	movs	r1, #0
 800fe30:	4618      	mov	r0, r3
 800fe32:	f000 fb21 	bl	8010478 <hci_send_req>
 800fe36:	4603      	mov	r3, r0
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	da01      	bge.n	800fe40 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800fe3c:	23ff      	movs	r3, #255	; 0xff
 800fe3e:	e000      	b.n	800fe42 <hci_reset+0x40>
  return status;
 800fe40:	79fb      	ldrb	r3, [r7, #7]
}
 800fe42:	4618      	mov	r0, r3
 800fe44:	3720      	adds	r7, #32
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd80      	pop	{r7, pc}

0800fe4a <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800fe4a:	b590      	push	{r4, r7, lr}
 800fe4c:	b0cd      	sub	sp, #308	; 0x134
 800fe4e:	af00      	add	r7, sp, #0
 800fe50:	4604      	mov	r4, r0
 800fe52:	4608      	mov	r0, r1
 800fe54:	4611      	mov	r1, r2
 800fe56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fe5a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800fe5e:	4622      	mov	r2, r4
 800fe60:	701a      	strb	r2, [r3, #0]
 800fe62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fe66:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fe6a:	4602      	mov	r2, r0
 800fe6c:	701a      	strb	r2, [r3, #0]
 800fe6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fe72:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800fe76:	460a      	mov	r2, r1
 800fe78:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800fe7a:	f107 0310 	add.w	r3, r7, #16
 800fe7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800fe82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fe86:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fe8e:	2300      	movs	r3, #0
 800fe90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800fe94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fe98:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fe9c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800fea0:	7812      	ldrb	r2, [r2, #0]
 800fea2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fea4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fea8:	3301      	adds	r3, #1
 800feaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800feae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800feb2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800feb6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800feba:	7812      	ldrb	r2, [r2, #0]
 800febc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800febe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fec2:	3301      	adds	r3, #1
 800fec4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800fec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fecc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fed0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800fed4:	7812      	ldrb	r2, [r2, #0]
 800fed6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800fed8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fedc:	3301      	adds	r3, #1
 800fede:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fee2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fee6:	2218      	movs	r2, #24
 800fee8:	2100      	movs	r1, #0
 800feea:	4618      	mov	r0, r3
 800feec:	f000 f83a 	bl	800ff64 <Osal_MemSet>
  rq.ogf = 0x08;
 800fef0:	2308      	movs	r3, #8
 800fef2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800fef6:	2331      	movs	r3, #49	; 0x31
 800fef8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800fefc:	f107 0310 	add.w	r3, r7, #16
 800ff00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ff04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ff08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ff0c:	f107 030f 	add.w	r3, r7, #15
 800ff10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ff14:	2301      	movs	r3, #1
 800ff16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ff1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ff1e:	2100      	movs	r1, #0
 800ff20:	4618      	mov	r0, r3
 800ff22:	f000 faa9 	bl	8010478 <hci_send_req>
 800ff26:	4603      	mov	r3, r0
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	da01      	bge.n	800ff30 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800ff2c:	23ff      	movs	r3, #255	; 0xff
 800ff2e:	e004      	b.n	800ff3a <hci_le_set_default_phy+0xf0>
  return status;
 800ff30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ff34:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ff38:	781b      	ldrb	r3, [r3, #0]
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd90      	pop	{r4, r7, pc}

0800ff44 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b084      	sub	sp, #16
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	60f8      	str	r0, [r7, #12]
 800ff4c:	60b9      	str	r1, [r7, #8]
 800ff4e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	68b9      	ldr	r1, [r7, #8]
 800ff54:	68f8      	ldr	r0, [r7, #12]
 800ff56:	f003 fc31 	bl	80137bc <memcpy>
 800ff5a:	4603      	mov	r3, r0
}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	3710      	adds	r7, #16
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}

0800ff64 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b084      	sub	sp, #16
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	60f8      	str	r0, [r7, #12]
 800ff6c:	60b9      	str	r1, [r7, #8]
 800ff6e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800ff70:	687a      	ldr	r2, [r7, #4]
 800ff72:	68b9      	ldr	r1, [r7, #8]
 800ff74:	68f8      	ldr	r0, [r7, #12]
 800ff76:	f003 fc2f 	bl	80137d8 <memset>
 800ff7a:	4603      	mov	r3, r0
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3710      	adds	r7, #16
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}

0800ff84 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800ff84:	b480      	push	{r7}
 800ff86:	af00      	add	r7, sp, #0
  return;
 800ff88:	bf00      	nop
}
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff90:	4770      	bx	lr

0800ff92 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800ff92:	b480      	push	{r7}
 800ff94:	af00      	add	r7, sp, #0
  return;
 800ff96:	bf00      	nop
}
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9e:	4770      	bx	lr

0800ffa0 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	af00      	add	r7, sp, #0
  return;
 800ffa4:	bf00      	nop
}
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffac:	4770      	bx	lr

0800ffae <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800ffae:	b480      	push	{r7}
 800ffb0:	af00      	add	r7, sp, #0
  return;
 800ffb2:	bf00      	nop
}
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffba:	4770      	bx	lr

0800ffbc <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800ffbc:	b480      	push	{r7}
 800ffbe:	af00      	add	r7, sp, #0
  return;
 800ffc0:	bf00      	nop
}
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc8:	4770      	bx	lr

0800ffca <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800ffca:	b480      	push	{r7}
 800ffcc:	af00      	add	r7, sp, #0
  return;
 800ffce:	bf00      	nop
}
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd6:	4770      	bx	lr

0800ffd8 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800ffd8:	b480      	push	{r7}
 800ffda:	af00      	add	r7, sp, #0
  return;
 800ffdc:	bf00      	nop
}
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe4:	4770      	bx	lr

0800ffe6 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800ffe6:	b480      	push	{r7}
 800ffe8:	af00      	add	r7, sp, #0
  return;
 800ffea:	bf00      	nop
}
 800ffec:	46bd      	mov	sp, r7
 800ffee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff2:	4770      	bx	lr

0800fff4 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800fff4:	b480      	push	{r7}
 800fff6:	af00      	add	r7, sp, #0
  return;
 800fff8:	bf00      	nop
}
 800fffa:	46bd      	mov	sp, r7
 800fffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010000:	4770      	bx	lr

08010002 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8010002:	b480      	push	{r7}
 8010004:	af00      	add	r7, sp, #0
  return;
 8010006:	bf00      	nop
}
 8010008:	46bd      	mov	sp, r7
 801000a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000e:	4770      	bx	lr

08010010 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8010010:	b480      	push	{r7}
 8010012:	af00      	add	r7, sp, #0
  return;
 8010014:	bf00      	nop
}
 8010016:	46bd      	mov	sp, r7
 8010018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001c:	4770      	bx	lr

0801001e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 801001e:	b480      	push	{r7}
 8010020:	af00      	add	r7, sp, #0
  return;
 8010022:	bf00      	nop
}
 8010024:	46bd      	mov	sp, r7
 8010026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002a:	4770      	bx	lr

0801002c <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 801002c:	b480      	push	{r7}
 801002e:	af00      	add	r7, sp, #0
  return;
 8010030:	bf00      	nop
}
 8010032:	46bd      	mov	sp, r7
 8010034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010038:	4770      	bx	lr

0801003a <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 801003a:	b480      	push	{r7}
 801003c:	af00      	add	r7, sp, #0
  return;
 801003e:	bf00      	nop
}
 8010040:	46bd      	mov	sp, r7
 8010042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010046:	4770      	bx	lr

08010048 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8010048:	b480      	push	{r7}
 801004a:	af00      	add	r7, sp, #0
  return;
 801004c:	bf00      	nop
}
 801004e:	46bd      	mov	sp, r7
 8010050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010054:	4770      	bx	lr

08010056 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8010056:	b480      	push	{r7}
 8010058:	af00      	add	r7, sp, #0
  return;
 801005a:	bf00      	nop
}
 801005c:	46bd      	mov	sp, r7
 801005e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010062:	4770      	bx	lr

08010064 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8010064:	b480      	push	{r7}
 8010066:	af00      	add	r7, sp, #0
  return;
 8010068:	bf00      	nop
}
 801006a:	46bd      	mov	sp, r7
 801006c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010070:	4770      	bx	lr
	...

08010074 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8010074:	b580      	push	{r7, lr}
 8010076:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8010078:	4b04      	ldr	r3, [pc, #16]	; (801008c <SVCCTL_Init+0x18>)
 801007a:	2200      	movs	r2, #0
 801007c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 801007e:	4b04      	ldr	r3, [pc, #16]	; (8010090 <SVCCTL_Init+0x1c>)
 8010080:	2200      	movs	r2, #0
 8010082:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8010084:	f000 f806 	bl	8010094 <SVCCTL_SvcInit>

  return;
 8010088:	bf00      	nop
}
 801008a:	bd80      	pop	{r7, pc}
 801008c:	200001b0 	.word	0x200001b0
 8010090:	200001d0 	.word	0x200001d0

08010094 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	af00      	add	r7, sp, #0
  BAS_Init();
 8010098:	f7ff ff74 	bl	800ff84 <BAS_Init>

  BLS_Init();
 801009c:	f7ff ff79 	bl	800ff92 <BLS_Init>

  CRS_STM_Init();
 80100a0:	f7ff ff7e 	bl	800ffa0 <CRS_STM_Init>

  DIS_Init();
 80100a4:	f7ff ff83 	bl	800ffae <DIS_Init>

  EDS_STM_Init();
 80100a8:	f7ff ff88 	bl	800ffbc <EDS_STM_Init>

  HIDS_Init();
 80100ac:	f7ff ff8d 	bl	800ffca <HIDS_Init>

  HRS_Init();
 80100b0:	f7ff ff92 	bl	800ffd8 <HRS_Init>

  HTS_Init();
 80100b4:	f7ff ff97 	bl	800ffe6 <HTS_Init>

  IAS_Init();
 80100b8:	f7ff ff9c 	bl	800fff4 <IAS_Init>

  LLS_Init();
 80100bc:	f7ff ffa1 	bl	8010002 <LLS_Init>

  TPS_Init();
 80100c0:	f7ff ffa6 	bl	8010010 <TPS_Init>

  MOTENV_STM_Init();
 80100c4:	f7ff ffab 	bl	801001e <MOTENV_STM_Init>

  P2PS_STM_Init();
 80100c8:	f7ff ffb0 	bl	801002c <P2PS_STM_Init>

  ZDD_STM_Init();
 80100cc:	f7ff ffb5 	bl	801003a <ZDD_STM_Init>

  OTAS_STM_Init();
 80100d0:	f7ff ffba 	bl	8010048 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80100d4:	f7ff ffc6 	bl	8010064 <BVOPUS_STM_Init>

  MESH_Init();
 80100d8:	f7ff ffbd 	bl	8010056 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80100dc:	f001 ff5e 	bl	8011f9c <SVCCTL_InitCustomSvc>
  
  return;
 80100e0:	bf00      	nop
}
 80100e2:	bd80      	pop	{r7, pc}

080100e4 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80100e4:	b480      	push	{r7}
 80100e6:	b083      	sub	sp, #12
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80100ec:	4b09      	ldr	r3, [pc, #36]	; (8010114 <SVCCTL_RegisterSvcHandler+0x30>)
 80100ee:	7f1b      	ldrb	r3, [r3, #28]
 80100f0:	4619      	mov	r1, r3
 80100f2:	4a08      	ldr	r2, [pc, #32]	; (8010114 <SVCCTL_RegisterSvcHandler+0x30>)
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80100fa:	4b06      	ldr	r3, [pc, #24]	; (8010114 <SVCCTL_RegisterSvcHandler+0x30>)
 80100fc:	7f1b      	ldrb	r3, [r3, #28]
 80100fe:	3301      	adds	r3, #1
 8010100:	b2da      	uxtb	r2, r3
 8010102:	4b04      	ldr	r3, [pc, #16]	; (8010114 <SVCCTL_RegisterSvcHandler+0x30>)
 8010104:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8010106:	bf00      	nop
}
 8010108:	370c      	adds	r7, #12
 801010a:	46bd      	mov	sp, r7
 801010c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010110:	4770      	bx	lr
 8010112:	bf00      	nop
 8010114:	200001b0 	.word	0x200001b0

08010118 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b086      	sub	sp, #24
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	3301      	adds	r3, #1
 8010124:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8010126:	2300      	movs	r3, #0
 8010128:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 801012a:	693b      	ldr	r3, [r7, #16]
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	2bff      	cmp	r3, #255	; 0xff
 8010130:	d125      	bne.n	801017e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8010132:	693b      	ldr	r3, [r7, #16]
 8010134:	3302      	adds	r3, #2
 8010136:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	881b      	ldrh	r3, [r3, #0]
 801013c:	b29b      	uxth	r3, r3
 801013e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010142:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010146:	d118      	bne.n	801017a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8010148:	2300      	movs	r3, #0
 801014a:	757b      	strb	r3, [r7, #21]
 801014c:	e00d      	b.n	801016a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 801014e:	7d7b      	ldrb	r3, [r7, #21]
 8010150:	4a1a      	ldr	r2, [pc, #104]	; (80101bc <SVCCTL_UserEvtRx+0xa4>)
 8010152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010156:	6878      	ldr	r0, [r7, #4]
 8010158:	4798      	blx	r3
 801015a:	4603      	mov	r3, r0
 801015c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 801015e:	7dfb      	ldrb	r3, [r7, #23]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d108      	bne.n	8010176 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8010164:	7d7b      	ldrb	r3, [r7, #21]
 8010166:	3301      	adds	r3, #1
 8010168:	757b      	strb	r3, [r7, #21]
 801016a:	4b14      	ldr	r3, [pc, #80]	; (80101bc <SVCCTL_UserEvtRx+0xa4>)
 801016c:	7f1b      	ldrb	r3, [r3, #28]
 801016e:	7d7a      	ldrb	r2, [r7, #21]
 8010170:	429a      	cmp	r2, r3
 8010172:	d3ec      	bcc.n	801014e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8010174:	e002      	b.n	801017c <SVCCTL_UserEvtRx+0x64>
              break;
 8010176:	bf00      	nop
          break;
 8010178:	e000      	b.n	801017c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 801017a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 801017c:	e000      	b.n	8010180 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 801017e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8010180:	7dfb      	ldrb	r3, [r7, #23]
 8010182:	2b02      	cmp	r3, #2
 8010184:	d00f      	beq.n	80101a6 <SVCCTL_UserEvtRx+0x8e>
 8010186:	2b02      	cmp	r3, #2
 8010188:	dc10      	bgt.n	80101ac <SVCCTL_UserEvtRx+0x94>
 801018a:	2b00      	cmp	r3, #0
 801018c:	d002      	beq.n	8010194 <SVCCTL_UserEvtRx+0x7c>
 801018e:	2b01      	cmp	r3, #1
 8010190:	d006      	beq.n	80101a0 <SVCCTL_UserEvtRx+0x88>
 8010192:	e00b      	b.n	80101ac <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f000 ff7f 	bl	8011098 <SVCCTL_App_Notification>
 801019a:	4603      	mov	r3, r0
 801019c:	75bb      	strb	r3, [r7, #22]
      break;
 801019e:	e008      	b.n	80101b2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80101a0:	2301      	movs	r3, #1
 80101a2:	75bb      	strb	r3, [r7, #22]
      break;
 80101a4:	e005      	b.n	80101b2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80101a6:	2300      	movs	r3, #0
 80101a8:	75bb      	strb	r3, [r7, #22]
      break;
 80101aa:	e002      	b.n	80101b2 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80101ac:	2301      	movs	r3, #1
 80101ae:	75bb      	strb	r3, [r7, #22]
      break;
 80101b0:	bf00      	nop
  }

  return (return_status);
 80101b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80101b4:	4618      	mov	r0, r3
 80101b6:	3718      	adds	r7, #24
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}
 80101bc:	200001b0 	.word	0x200001b0

080101c0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b088      	sub	sp, #32
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80101c8:	f107 030c 	add.w	r3, r7, #12
 80101cc:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80101d4:	69fb      	ldr	r3, [r7, #28]
 80101d6:	212e      	movs	r1, #46	; 0x2e
 80101d8:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80101dc:	f000 fae2 	bl	80107a4 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80101e0:	69fb      	ldr	r3, [r7, #28]
 80101e2:	330b      	adds	r3, #11
 80101e4:	78db      	ldrb	r3, [r3, #3]
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3720      	adds	r7, #32
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}

080101ee <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80101ee:	b580      	push	{r7, lr}
 80101f0:	b088      	sub	sp, #32
 80101f2:	af00      	add	r7, sp, #0
 80101f4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80101f6:	f107 030c 	add.w	r3, r7, #12
 80101fa:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8010202:	69fb      	ldr	r3, [r7, #28]
 8010204:	210f      	movs	r1, #15
 8010206:	f64f 4068 	movw	r0, #64616	; 0xfc68
 801020a:	f000 facb 	bl	80107a4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 801020e:	69fb      	ldr	r3, [r7, #28]
 8010210:	330b      	adds	r3, #11
 8010212:	78db      	ldrb	r3, [r3, #3]
}
 8010214:	4618      	mov	r0, r3
 8010216:	3720      	adds	r7, #32
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}

0801021c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b088      	sub	sp, #32
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8010224:	f107 030c 	add.w	r3, r7, #12
 8010228:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 801022a:	69fb      	ldr	r3, [r7, #28]
 801022c:	687a      	ldr	r2, [r7, #4]
 801022e:	2110      	movs	r1, #16
 8010230:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8010234:	f000 fab6 	bl	80107a4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8010238:	69fb      	ldr	r3, [r7, #28]
 801023a:	330b      	adds	r3, #11
 801023c:	78db      	ldrb	r3, [r3, #3]
}
 801023e:	4618      	mov	r0, r3
 8010240:	3720      	adds	r7, #32
 8010242:	46bd      	mov	sp, r7
 8010244:	bd80      	pop	{r7, pc}
	...

08010248 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8010248:	b480      	push	{r7}
 801024a:	b08b      	sub	sp, #44	; 0x2c
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8010250:	2300      	movs	r3, #0
 8010252:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8010254:	2300      	movs	r3, #0
 8010256:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8010258:	2300      	movs	r3, #0
 801025a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 801025c:	2300      	movs	r3, #0
 801025e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8010260:	2300      	movs	r3, #0
 8010262:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8010264:	2300      	movs	r3, #0
 8010266:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8010268:	2300      	movs	r3, #0
 801026a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 801026c:	2300      	movs	r3, #0
 801026e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8010270:	4b4a      	ldr	r3, [pc, #296]	; (801039c <SHCI_GetWirelessFwInfo+0x154>)
 8010272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010274:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010278:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 801027a:	693b      	ldr	r3, [r7, #16]
 801027c:	009b      	lsls	r3, r3, #2
 801027e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8010282:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 801028a:	68bb      	ldr	r3, [r7, #8]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	4a44      	ldr	r2, [pc, #272]	; (80103a0 <SHCI_GetWirelessFwInfo+0x158>)
 8010290:	4293      	cmp	r3, r2
 8010292:	d10f      	bne.n	80102b4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	695b      	ldr	r3, [r3, #20]
 8010298:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 801029a:	68bb      	ldr	r3, [r7, #8]
 801029c:	699b      	ldr	r3, [r3, #24]
 801029e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80102a0:	68bb      	ldr	r3, [r7, #8]
 80102a2:	69db      	ldr	r3, [r3, #28]
 80102a4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	68db      	ldr	r3, [r3, #12]
 80102aa:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80102ac:	68bb      	ldr	r3, [r7, #8]
 80102ae:	691b      	ldr	r3, [r3, #16]
 80102b0:	617b      	str	r3, [r7, #20]
 80102b2:	e01a      	b.n	80102ea <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80102b4:	693b      	ldr	r3, [r7, #16]
 80102b6:	009b      	lsls	r3, r3, #2
 80102b8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80102bc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80102c0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	691b      	ldr	r3, [r3, #16]
 80102c8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	695b      	ldr	r3, [r3, #20]
 80102d0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	699b      	ldr	r3, [r3, #24]
 80102d8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	685b      	ldr	r3, [r3, #4]
 80102e0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	689b      	ldr	r3, [r3, #8]
 80102e8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80102ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ec:	0e1b      	lsrs	r3, r3, #24
 80102ee:	b2da      	uxtb	r2, r3
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80102f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f6:	0c1b      	lsrs	r3, r3, #16
 80102f8:	b2da      	uxtb	r2, r3
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80102fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010300:	0a1b      	lsrs	r3, r3, #8
 8010302:	b2da      	uxtb	r2, r3
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8010308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801030a:	091b      	lsrs	r3, r3, #4
 801030c:	b2db      	uxtb	r3, r3
 801030e:	f003 030f 	and.w	r3, r3, #15
 8010312:	b2da      	uxtb	r2, r3
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8010318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801031a:	b2db      	uxtb	r3, r3
 801031c:	f003 030f 	and.w	r3, r3, #15
 8010320:	b2da      	uxtb	r2, r3
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8010326:	6a3b      	ldr	r3, [r7, #32]
 8010328:	0e1b      	lsrs	r3, r3, #24
 801032a:	b2da      	uxtb	r2, r3
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8010330:	6a3b      	ldr	r3, [r7, #32]
 8010332:	0c1b      	lsrs	r3, r3, #16
 8010334:	b2da      	uxtb	r2, r3
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 801033a:	6a3b      	ldr	r3, [r7, #32]
 801033c:	0a1b      	lsrs	r3, r3, #8
 801033e:	b2da      	uxtb	r2, r3
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8010344:	6a3b      	ldr	r3, [r7, #32]
 8010346:	b2da      	uxtb	r2, r3
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 801034c:	69fb      	ldr	r3, [r7, #28]
 801034e:	b2da      	uxtb	r2, r3
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8010354:	69bb      	ldr	r3, [r7, #24]
 8010356:	0e1b      	lsrs	r3, r3, #24
 8010358:	b2da      	uxtb	r2, r3
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801035e:	69bb      	ldr	r3, [r7, #24]
 8010360:	0c1b      	lsrs	r3, r3, #16
 8010362:	b2da      	uxtb	r2, r3
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8010368:	69bb      	ldr	r3, [r7, #24]
 801036a:	0a1b      	lsrs	r3, r3, #8
 801036c:	b2da      	uxtb	r2, r3
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8010372:	697b      	ldr	r3, [r7, #20]
 8010374:	0e1b      	lsrs	r3, r3, #24
 8010376:	b2da      	uxtb	r2, r3
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 801037c:	697b      	ldr	r3, [r7, #20]
 801037e:	0c1b      	lsrs	r3, r3, #16
 8010380:	b2da      	uxtb	r2, r3
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8010386:	697b      	ldr	r3, [r7, #20]
 8010388:	b2da      	uxtb	r2, r3
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 801038e:	2300      	movs	r3, #0
}
 8010390:	4618      	mov	r0, r3
 8010392:	372c      	adds	r7, #44	; 0x2c
 8010394:	46bd      	mov	sp, r7
 8010396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039a:	4770      	bx	lr
 801039c:	58004000 	.word	0x58004000
 80103a0:	a94656b9 	.word	0xa94656b9

080103a4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
 80103ac:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	685b      	ldr	r3, [r3, #4]
 80103b2:	4a08      	ldr	r2, [pc, #32]	; (80103d4 <hci_init+0x30>)
 80103b4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80103b6:	4a08      	ldr	r2, [pc, #32]	; (80103d8 <hci_init+0x34>)
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80103bc:	4806      	ldr	r0, [pc, #24]	; (80103d8 <hci_init+0x34>)
 80103be:	f000 f973 	bl	80106a8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	4618      	mov	r0, r3
 80103c8:	f000 f8d4 	bl	8010574 <TlInit>

  return;
 80103cc:	bf00      	nop
}
 80103ce:	3708      	adds	r7, #8
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}
 80103d4:	200008bc 	.word	0x200008bc
 80103d8:	20000894 	.word	0x20000894

080103dc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b084      	sub	sp, #16
 80103e0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80103e2:	4822      	ldr	r0, [pc, #136]	; (801046c <hci_user_evt_proc+0x90>)
 80103e4:	f000 fd28 	bl	8010e38 <LST_is_empty>
 80103e8:	4603      	mov	r3, r0
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d12b      	bne.n	8010446 <hci_user_evt_proc+0x6a>
 80103ee:	4b20      	ldr	r3, [pc, #128]	; (8010470 <hci_user_evt_proc+0x94>)
 80103f0:	781b      	ldrb	r3, [r3, #0]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d027      	beq.n	8010446 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80103f6:	f107 030c 	add.w	r3, r7, #12
 80103fa:	4619      	mov	r1, r3
 80103fc:	481b      	ldr	r0, [pc, #108]	; (801046c <hci_user_evt_proc+0x90>)
 80103fe:	f000 fdaa 	bl	8010f56 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8010402:	4b1c      	ldr	r3, [pc, #112]	; (8010474 <hci_user_evt_proc+0x98>)
 8010404:	69db      	ldr	r3, [r3, #28]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d00c      	beq.n	8010424 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 801040e:	2301      	movs	r3, #1
 8010410:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8010412:	4b18      	ldr	r3, [pc, #96]	; (8010474 <hci_user_evt_proc+0x98>)
 8010414:	69db      	ldr	r3, [r3, #28]
 8010416:	1d3a      	adds	r2, r7, #4
 8010418:	4610      	mov	r0, r2
 801041a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 801041c:	793a      	ldrb	r2, [r7, #4]
 801041e:	4b14      	ldr	r3, [pc, #80]	; (8010470 <hci_user_evt_proc+0x94>)
 8010420:	701a      	strb	r2, [r3, #0]
 8010422:	e002      	b.n	801042a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8010424:	4b12      	ldr	r3, [pc, #72]	; (8010470 <hci_user_evt_proc+0x94>)
 8010426:	2201      	movs	r2, #1
 8010428:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 801042a:	4b11      	ldr	r3, [pc, #68]	; (8010470 <hci_user_evt_proc+0x94>)
 801042c:	781b      	ldrb	r3, [r3, #0]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d004      	beq.n	801043c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	4618      	mov	r0, r3
 8010436:	f000 fc03 	bl	8010c40 <TL_MM_EvtDone>
 801043a:	e004      	b.n	8010446 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	4619      	mov	r1, r3
 8010440:	480a      	ldr	r0, [pc, #40]	; (801046c <hci_user_evt_proc+0x90>)
 8010442:	f000 fd1b 	bl	8010e7c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8010446:	4809      	ldr	r0, [pc, #36]	; (801046c <hci_user_evt_proc+0x90>)
 8010448:	f000 fcf6 	bl	8010e38 <LST_is_empty>
 801044c:	4603      	mov	r3, r0
 801044e:	2b00      	cmp	r3, #0
 8010450:	d107      	bne.n	8010462 <hci_user_evt_proc+0x86>
 8010452:	4b07      	ldr	r3, [pc, #28]	; (8010470 <hci_user_evt_proc+0x94>)
 8010454:	781b      	ldrb	r3, [r3, #0]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d003      	beq.n	8010462 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 801045a:	4804      	ldr	r0, [pc, #16]	; (801046c <hci_user_evt_proc+0x90>)
 801045c:	f001 f834 	bl	80114c8 <hci_notify_asynch_evt>
  }


  return;
 8010460:	bf00      	nop
 8010462:	bf00      	nop
}
 8010464:	3710      	adds	r7, #16
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}
 801046a:	bf00      	nop
 801046c:	200001d8 	.word	0x200001d8
 8010470:	200001e4 	.word	0x200001e4
 8010474:	20000894 	.word	0x20000894

08010478 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b088      	sub	sp, #32
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
 8010480:	460b      	mov	r3, r1
 8010482:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8010484:	2000      	movs	r0, #0
 8010486:	f000 f8cb 	bl	8010620 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 801048a:	2300      	movs	r3, #0
 801048c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	885b      	ldrh	r3, [r3, #2]
 8010492:	b21b      	sxth	r3, r3
 8010494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010498:	b21a      	sxth	r2, r3
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	881b      	ldrh	r3, [r3, #0]
 801049e:	029b      	lsls	r3, r3, #10
 80104a0:	b21b      	sxth	r3, r3
 80104a2:	4313      	orrs	r3, r2
 80104a4:	b21b      	sxth	r3, r3
 80104a6:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	68db      	ldr	r3, [r3, #12]
 80104ac:	b2d9      	uxtb	r1, r3
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	689a      	ldr	r2, [r3, #8]
 80104b2:	8bbb      	ldrh	r3, [r7, #28]
 80104b4:	4618      	mov	r0, r3
 80104b6:	f000 f88d 	bl	80105d4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80104ba:	e04e      	b.n	801055a <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80104bc:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80104c0:	f001 f819 	bl	80114f6 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80104c4:	e043      	b.n	801054e <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80104c6:	f107 030c 	add.w	r3, r7, #12
 80104ca:	4619      	mov	r1, r3
 80104cc:	4828      	ldr	r0, [pc, #160]	; (8010570 <hci_send_req+0xf8>)
 80104ce:	f000 fd42 	bl	8010f56 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	7a5b      	ldrb	r3, [r3, #9]
 80104d6:	2b0f      	cmp	r3, #15
 80104d8:	d114      	bne.n	8010504 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	330b      	adds	r3, #11
 80104de:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	885b      	ldrh	r3, [r3, #2]
 80104e4:	b29b      	uxth	r3, r3
 80104e6:	8bba      	ldrh	r2, [r7, #28]
 80104e8:	429a      	cmp	r2, r3
 80104ea:	d104      	bne.n	80104f6 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	691b      	ldr	r3, [r3, #16]
 80104f0:	693a      	ldr	r2, [r7, #16]
 80104f2:	7812      	ldrb	r2, [r2, #0]
 80104f4:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80104f6:	693b      	ldr	r3, [r7, #16]
 80104f8:	785b      	ldrb	r3, [r3, #1]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d027      	beq.n	801054e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80104fe:	2301      	movs	r3, #1
 8010500:	77fb      	strb	r3, [r7, #31]
 8010502:	e024      	b.n	801054e <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	330b      	adds	r3, #11
 8010508:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 801050a:	69bb      	ldr	r3, [r7, #24]
 801050c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010510:	b29b      	uxth	r3, r3
 8010512:	8bba      	ldrh	r2, [r7, #28]
 8010514:	429a      	cmp	r2, r3
 8010516:	d114      	bne.n	8010542 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	7a9b      	ldrb	r3, [r3, #10]
 801051c:	3b03      	subs	r3, #3
 801051e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	695a      	ldr	r2, [r3, #20]
 8010524:	7dfb      	ldrb	r3, [r7, #23]
 8010526:	429a      	cmp	r2, r3
 8010528:	bfa8      	it	ge
 801052a:	461a      	movge	r2, r3
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	6918      	ldr	r0, [r3, #16]
 8010534:	69bb      	ldr	r3, [r7, #24]
 8010536:	1cd9      	adds	r1, r3, #3
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	695b      	ldr	r3, [r3, #20]
 801053c:	461a      	mov	r2, r3
 801053e:	f003 f93d 	bl	80137bc <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8010542:	69bb      	ldr	r3, [r7, #24]
 8010544:	781b      	ldrb	r3, [r3, #0]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d001      	beq.n	801054e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801054a:	2301      	movs	r3, #1
 801054c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 801054e:	4808      	ldr	r0, [pc, #32]	; (8010570 <hci_send_req+0xf8>)
 8010550:	f000 fc72 	bl	8010e38 <LST_is_empty>
 8010554:	4603      	mov	r3, r0
 8010556:	2b00      	cmp	r3, #0
 8010558:	d0b5      	beq.n	80104c6 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 801055a:	7ffb      	ldrb	r3, [r7, #31]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d0ad      	beq.n	80104bc <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8010560:	2001      	movs	r0, #1
 8010562:	f000 f85d 	bl	8010620 <NotifyCmdStatus>

  return 0;
 8010566:	2300      	movs	r3, #0
}
 8010568:	4618      	mov	r0, r3
 801056a:	3720      	adds	r7, #32
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}
 8010570:	200008b4 	.word	0x200008b4

08010574 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b086      	sub	sp, #24
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 801057c:	480f      	ldr	r0, [pc, #60]	; (80105bc <TlInit+0x48>)
 801057e:	f000 fc4b 	bl	8010e18 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8010582:	4a0f      	ldr	r2, [pc, #60]	; (80105c0 <TlInit+0x4c>)
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8010588:	480e      	ldr	r0, [pc, #56]	; (80105c4 <TlInit+0x50>)
 801058a:	f000 fc45 	bl	8010e18 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 801058e:	4b0e      	ldr	r3, [pc, #56]	; (80105c8 <TlInit+0x54>)
 8010590:	2201      	movs	r2, #1
 8010592:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8010594:	4b0d      	ldr	r3, [pc, #52]	; (80105cc <TlInit+0x58>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d00a      	beq.n	80105b2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80105a0:	4b0b      	ldr	r3, [pc, #44]	; (80105d0 <TlInit+0x5c>)
 80105a2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80105a4:	4b09      	ldr	r3, [pc, #36]	; (80105cc <TlInit+0x58>)
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	f107 0208 	add.w	r2, r7, #8
 80105ac:	4610      	mov	r0, r2
 80105ae:	4798      	blx	r3
  }

  return;
 80105b0:	bf00      	nop
 80105b2:	bf00      	nop
}
 80105b4:	3718      	adds	r7, #24
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}
 80105ba:	bf00      	nop
 80105bc:	200008b4 	.word	0x200008b4
 80105c0:	200001e0 	.word	0x200001e0
 80105c4:	200001d8 	.word	0x200001d8
 80105c8:	200001e4 	.word	0x200001e4
 80105cc:	20000894 	.word	0x20000894
 80105d0:	08010661 	.word	0x08010661

080105d4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b082      	sub	sp, #8
 80105d8:	af00      	add	r7, sp, #0
 80105da:	4603      	mov	r3, r0
 80105dc:	603a      	str	r2, [r7, #0]
 80105de:	80fb      	strh	r3, [r7, #6]
 80105e0:	460b      	mov	r3, r1
 80105e2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80105e4:	4b0c      	ldr	r3, [pc, #48]	; (8010618 <SendCmd+0x44>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	88fa      	ldrh	r2, [r7, #6]
 80105ea:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80105ee:	4b0a      	ldr	r3, [pc, #40]	; (8010618 <SendCmd+0x44>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	797a      	ldrb	r2, [r7, #5]
 80105f4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80105f6:	4b08      	ldr	r3, [pc, #32]	; (8010618 <SendCmd+0x44>)
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	330c      	adds	r3, #12
 80105fc:	797a      	ldrb	r2, [r7, #5]
 80105fe:	6839      	ldr	r1, [r7, #0]
 8010600:	4618      	mov	r0, r3
 8010602:	f003 f8db 	bl	80137bc <memcpy>

  hciContext.io.Send(0,0);
 8010606:	4b05      	ldr	r3, [pc, #20]	; (801061c <SendCmd+0x48>)
 8010608:	691b      	ldr	r3, [r3, #16]
 801060a:	2100      	movs	r1, #0
 801060c:	2000      	movs	r0, #0
 801060e:	4798      	blx	r3

  return;
 8010610:	bf00      	nop
}
 8010612:	3708      	adds	r7, #8
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}
 8010618:	200001e0 	.word	0x200001e0
 801061c:	20000894 	.word	0x20000894

08010620 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b082      	sub	sp, #8
 8010624:	af00      	add	r7, sp, #0
 8010626:	4603      	mov	r3, r0
 8010628:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 801062a:	79fb      	ldrb	r3, [r7, #7]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d108      	bne.n	8010642 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8010630:	4b0a      	ldr	r3, [pc, #40]	; (801065c <NotifyCmdStatus+0x3c>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d00d      	beq.n	8010654 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8010638:	4b08      	ldr	r3, [pc, #32]	; (801065c <NotifyCmdStatus+0x3c>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	2000      	movs	r0, #0
 801063e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8010640:	e008      	b.n	8010654 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8010642:	4b06      	ldr	r3, [pc, #24]	; (801065c <NotifyCmdStatus+0x3c>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d004      	beq.n	8010654 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 801064a:	4b04      	ldr	r3, [pc, #16]	; (801065c <NotifyCmdStatus+0x3c>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	2001      	movs	r0, #1
 8010650:	4798      	blx	r3
  return;
 8010652:	bf00      	nop
 8010654:	bf00      	nop
}
 8010656:	3708      	adds	r7, #8
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}
 801065c:	200008bc 	.word	0x200008bc

08010660 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b082      	sub	sp, #8
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	7a5b      	ldrb	r3, [r3, #9]
 801066c:	2b0f      	cmp	r3, #15
 801066e:	d003      	beq.n	8010678 <TlEvtReceived+0x18>
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	7a5b      	ldrb	r3, [r3, #9]
 8010674:	2b0e      	cmp	r3, #14
 8010676:	d107      	bne.n	8010688 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8010678:	6879      	ldr	r1, [r7, #4]
 801067a:	4809      	ldr	r0, [pc, #36]	; (80106a0 <TlEvtReceived+0x40>)
 801067c:	f000 fc24 	bl	8010ec8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8010680:	2000      	movs	r0, #0
 8010682:	f000 ff2d 	bl	80114e0 <hci_cmd_resp_release>
 8010686:	e006      	b.n	8010696 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8010688:	6879      	ldr	r1, [r7, #4]
 801068a:	4806      	ldr	r0, [pc, #24]	; (80106a4 <TlEvtReceived+0x44>)
 801068c:	f000 fc1c 	bl	8010ec8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8010690:	4804      	ldr	r0, [pc, #16]	; (80106a4 <TlEvtReceived+0x44>)
 8010692:	f000 ff19 	bl	80114c8 <hci_notify_asynch_evt>
  }

  return;
 8010696:	bf00      	nop
}
 8010698:	3708      	adds	r7, #8
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}
 801069e:	bf00      	nop
 80106a0:	200008b4 	.word	0x200008b4
 80106a4:	200001d8 	.word	0x200001d8

080106a8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80106a8:	b480      	push	{r7}
 80106aa:	b083      	sub	sp, #12
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	4a05      	ldr	r2, [pc, #20]	; (80106c8 <hci_register_io_bus+0x20>)
 80106b4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	4a04      	ldr	r2, [pc, #16]	; (80106cc <hci_register_io_bus+0x24>)
 80106ba:	611a      	str	r2, [r3, #16]

  return;
 80106bc:	bf00      	nop
}
 80106be:	370c      	adds	r7, #12
 80106c0:	46bd      	mov	sp, r7
 80106c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c6:	4770      	bx	lr
 80106c8:	080109b9 	.word	0x080109b9
 80106cc:	08010a21 	.word	0x08010a21

080106d0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b082      	sub	sp, #8
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	685b      	ldr	r3, [r3, #4]
 80106de:	4a08      	ldr	r2, [pc, #32]	; (8010700 <shci_init+0x30>)
 80106e0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80106e2:	4a08      	ldr	r2, [pc, #32]	; (8010704 <shci_init+0x34>)
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80106e8:	4806      	ldr	r0, [pc, #24]	; (8010704 <shci_init+0x34>)
 80106ea:	f000 f911 	bl	8010910 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	4618      	mov	r0, r3
 80106f4:	f000 f894 	bl	8010820 <TlInit>

  return;
 80106f8:	bf00      	nop
}
 80106fa:	3708      	adds	r7, #8
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}
 8010700:	200008e0 	.word	0x200008e0
 8010704:	200008c0 	.word	0x200008c0

08010708 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b084      	sub	sp, #16
 801070c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801070e:	4822      	ldr	r0, [pc, #136]	; (8010798 <shci_user_evt_proc+0x90>)
 8010710:	f000 fb92 	bl	8010e38 <LST_is_empty>
 8010714:	4603      	mov	r3, r0
 8010716:	2b00      	cmp	r3, #0
 8010718:	d12b      	bne.n	8010772 <shci_user_evt_proc+0x6a>
 801071a:	4b20      	ldr	r3, [pc, #128]	; (801079c <shci_user_evt_proc+0x94>)
 801071c:	781b      	ldrb	r3, [r3, #0]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d027      	beq.n	8010772 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8010722:	f107 030c 	add.w	r3, r7, #12
 8010726:	4619      	mov	r1, r3
 8010728:	481b      	ldr	r0, [pc, #108]	; (8010798 <shci_user_evt_proc+0x90>)
 801072a:	f000 fc14 	bl	8010f56 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 801072e:	4b1c      	ldr	r3, [pc, #112]	; (80107a0 <shci_user_evt_proc+0x98>)
 8010730:	69db      	ldr	r3, [r3, #28]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d00c      	beq.n	8010750 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 801073a:	2301      	movs	r3, #1
 801073c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 801073e:	4b18      	ldr	r3, [pc, #96]	; (80107a0 <shci_user_evt_proc+0x98>)
 8010740:	69db      	ldr	r3, [r3, #28]
 8010742:	1d3a      	adds	r2, r7, #4
 8010744:	4610      	mov	r0, r2
 8010746:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8010748:	793a      	ldrb	r2, [r7, #4]
 801074a:	4b14      	ldr	r3, [pc, #80]	; (801079c <shci_user_evt_proc+0x94>)
 801074c:	701a      	strb	r2, [r3, #0]
 801074e:	e002      	b.n	8010756 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8010750:	4b12      	ldr	r3, [pc, #72]	; (801079c <shci_user_evt_proc+0x94>)
 8010752:	2201      	movs	r2, #1
 8010754:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8010756:	4b11      	ldr	r3, [pc, #68]	; (801079c <shci_user_evt_proc+0x94>)
 8010758:	781b      	ldrb	r3, [r3, #0]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d004      	beq.n	8010768 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	4618      	mov	r0, r3
 8010762:	f000 fa6d 	bl	8010c40 <TL_MM_EvtDone>
 8010766:	e004      	b.n	8010772 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	4619      	mov	r1, r3
 801076c:	480a      	ldr	r0, [pc, #40]	; (8010798 <shci_user_evt_proc+0x90>)
 801076e:	f000 fb85 	bl	8010e7c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8010772:	4809      	ldr	r0, [pc, #36]	; (8010798 <shci_user_evt_proc+0x90>)
 8010774:	f000 fb60 	bl	8010e38 <LST_is_empty>
 8010778:	4603      	mov	r3, r0
 801077a:	2b00      	cmp	r3, #0
 801077c:	d107      	bne.n	801078e <shci_user_evt_proc+0x86>
 801077e:	4b07      	ldr	r3, [pc, #28]	; (801079c <shci_user_evt_proc+0x94>)
 8010780:	781b      	ldrb	r3, [r3, #0]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d003      	beq.n	801078e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8010786:	4804      	ldr	r0, [pc, #16]	; (8010798 <shci_user_evt_proc+0x90>)
 8010788:	f7f0 fe76 	bl	8001478 <shci_notify_asynch_evt>
  }


  return;
 801078c:	bf00      	nop
 801078e:	bf00      	nop
}
 8010790:	3710      	adds	r7, #16
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}
 8010796:	bf00      	nop
 8010798:	200001e8 	.word	0x200001e8
 801079c:	200001f8 	.word	0x200001f8
 80107a0:	200008c0 	.word	0x200008c0

080107a4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b084      	sub	sp, #16
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	60ba      	str	r2, [r7, #8]
 80107ac:	607b      	str	r3, [r7, #4]
 80107ae:	4603      	mov	r3, r0
 80107b0:	81fb      	strh	r3, [r7, #14]
 80107b2:	460b      	mov	r3, r1
 80107b4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80107b6:	2000      	movs	r0, #0
 80107b8:	f000 f864 	bl	8010884 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80107bc:	4b16      	ldr	r3, [pc, #88]	; (8010818 <shci_send+0x74>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	89fa      	ldrh	r2, [r7, #14]
 80107c2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80107c6:	4b14      	ldr	r3, [pc, #80]	; (8010818 <shci_send+0x74>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	7b7a      	ldrb	r2, [r7, #13]
 80107cc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80107ce:	4b12      	ldr	r3, [pc, #72]	; (8010818 <shci_send+0x74>)
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	330c      	adds	r3, #12
 80107d4:	7b7a      	ldrb	r2, [r7, #13]
 80107d6:	68b9      	ldr	r1, [r7, #8]
 80107d8:	4618      	mov	r0, r3
 80107da:	f002 ffef 	bl	80137bc <memcpy>

  shciContext.io.Send(0,0);
 80107de:	4b0f      	ldr	r3, [pc, #60]	; (801081c <shci_send+0x78>)
 80107e0:	691b      	ldr	r3, [r3, #16]
 80107e2:	2100      	movs	r1, #0
 80107e4:	2000      	movs	r0, #0
 80107e6:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80107e8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80107ec:	f7f0 fe5b 	bl	80014a6 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f103 0008 	add.w	r0, r3, #8
 80107f6:	4b08      	ldr	r3, [pc, #32]	; (8010818 <shci_send+0x74>)
 80107f8:	6819      	ldr	r1, [r3, #0]
 80107fa:	4b07      	ldr	r3, [pc, #28]	; (8010818 <shci_send+0x74>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	789b      	ldrb	r3, [r3, #2]
 8010800:	3303      	adds	r3, #3
 8010802:	461a      	mov	r2, r3
 8010804:	f002 ffda 	bl	80137bc <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8010808:	2001      	movs	r0, #1
 801080a:	f000 f83b 	bl	8010884 <Cmd_SetStatus>

  return;
 801080e:	bf00      	nop
}
 8010810:	3710      	adds	r7, #16
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}
 8010816:	bf00      	nop
 8010818:	200001f4 	.word	0x200001f4
 801081c:	200008c0 	.word	0x200008c0

08010820 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b086      	sub	sp, #24
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8010828:	4a10      	ldr	r2, [pc, #64]	; (801086c <TlInit+0x4c>)
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 801082e:	4810      	ldr	r0, [pc, #64]	; (8010870 <TlInit+0x50>)
 8010830:	f000 faf2 	bl	8010e18 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8010834:	2001      	movs	r0, #1
 8010836:	f000 f825 	bl	8010884 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 801083a:	4b0e      	ldr	r3, [pc, #56]	; (8010874 <TlInit+0x54>)
 801083c:	2201      	movs	r2, #1
 801083e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8010840:	4b0d      	ldr	r3, [pc, #52]	; (8010878 <TlInit+0x58>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d00c      	beq.n	8010862 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 801084c:	4b0b      	ldr	r3, [pc, #44]	; (801087c <TlInit+0x5c>)
 801084e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8010850:	4b0b      	ldr	r3, [pc, #44]	; (8010880 <TlInit+0x60>)
 8010852:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8010854:	4b08      	ldr	r3, [pc, #32]	; (8010878 <TlInit+0x58>)
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	f107 020c 	add.w	r2, r7, #12
 801085c:	4610      	mov	r0, r2
 801085e:	4798      	blx	r3
  }

  return;
 8010860:	bf00      	nop
 8010862:	bf00      	nop
}
 8010864:	3718      	adds	r7, #24
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}
 801086a:	bf00      	nop
 801086c:	200001f4 	.word	0x200001f4
 8010870:	200001e8 	.word	0x200001e8
 8010874:	200001f8 	.word	0x200001f8
 8010878:	200008c0 	.word	0x200008c0
 801087c:	080108d5 	.word	0x080108d5
 8010880:	080108ed 	.word	0x080108ed

08010884 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b082      	sub	sp, #8
 8010888:	af00      	add	r7, sp, #0
 801088a:	4603      	mov	r3, r0
 801088c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 801088e:	79fb      	ldrb	r3, [r7, #7]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d10b      	bne.n	80108ac <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8010894:	4b0d      	ldr	r3, [pc, #52]	; (80108cc <Cmd_SetStatus+0x48>)
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d003      	beq.n	80108a4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 801089c:	4b0b      	ldr	r3, [pc, #44]	; (80108cc <Cmd_SetStatus+0x48>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	2000      	movs	r0, #0
 80108a2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80108a4:	4b0a      	ldr	r3, [pc, #40]	; (80108d0 <Cmd_SetStatus+0x4c>)
 80108a6:	2200      	movs	r2, #0
 80108a8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80108aa:	e00b      	b.n	80108c4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80108ac:	4b08      	ldr	r3, [pc, #32]	; (80108d0 <Cmd_SetStatus+0x4c>)
 80108ae:	2201      	movs	r2, #1
 80108b0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80108b2:	4b06      	ldr	r3, [pc, #24]	; (80108cc <Cmd_SetStatus+0x48>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d004      	beq.n	80108c4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80108ba:	4b04      	ldr	r3, [pc, #16]	; (80108cc <Cmd_SetStatus+0x48>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	2001      	movs	r0, #1
 80108c0:	4798      	blx	r3
  return;
 80108c2:	bf00      	nop
 80108c4:	bf00      	nop
}
 80108c6:	3708      	adds	r7, #8
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}
 80108cc:	200008e0 	.word	0x200008e0
 80108d0:	200001f0 	.word	0x200001f0

080108d4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b082      	sub	sp, #8
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80108dc:	2000      	movs	r0, #0
 80108de:	f7f0 fdd7 	bl	8001490 <shci_cmd_resp_release>

  return;
 80108e2:	bf00      	nop
}
 80108e4:	3708      	adds	r7, #8
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd80      	pop	{r7, pc}
	...

080108ec <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b082      	sub	sp, #8
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80108f4:	6879      	ldr	r1, [r7, #4]
 80108f6:	4805      	ldr	r0, [pc, #20]	; (801090c <TlUserEvtReceived+0x20>)
 80108f8:	f000 fae6 	bl	8010ec8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80108fc:	4803      	ldr	r0, [pc, #12]	; (801090c <TlUserEvtReceived+0x20>)
 80108fe:	f7f0 fdbb 	bl	8001478 <shci_notify_asynch_evt>

  return;
 8010902:	bf00      	nop
}
 8010904:	3708      	adds	r7, #8
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}
 801090a:	bf00      	nop
 801090c:	200001e8 	.word	0x200001e8

08010910 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8010910:	b480      	push	{r7}
 8010912:	b083      	sub	sp, #12
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	4a05      	ldr	r2, [pc, #20]	; (8010930 <shci_register_io_bus+0x20>)
 801091c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	4a04      	ldr	r2, [pc, #16]	; (8010934 <shci_register_io_bus+0x24>)
 8010922:	611a      	str	r2, [r3, #16]

  return;
 8010924:	bf00      	nop
}
 8010926:	370c      	adds	r7, #12
 8010928:	46bd      	mov	sp, r7
 801092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092e:	4770      	bx	lr
 8010930:	08010acd 	.word	0x08010acd
 8010934:	08010b21 	.word	0x08010b21

08010938 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8010938:	b580      	push	{r7, lr}
 801093a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 801093c:	f001 fe32 	bl	80125a4 <HW_IPCC_Enable>

  return;
 8010940:	bf00      	nop
}
 8010942:	bd80      	pop	{r7, pc}

08010944 <TL_Init>:


void TL_Init( void )
{
 8010944:	b580      	push	{r7, lr}
 8010946:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8010948:	4b10      	ldr	r3, [pc, #64]	; (801098c <TL_Init+0x48>)
 801094a:	4a11      	ldr	r2, [pc, #68]	; (8010990 <TL_Init+0x4c>)
 801094c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 801094e:	4b0f      	ldr	r3, [pc, #60]	; (801098c <TL_Init+0x48>)
 8010950:	4a10      	ldr	r2, [pc, #64]	; (8010994 <TL_Init+0x50>)
 8010952:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8010954:	4b0d      	ldr	r3, [pc, #52]	; (801098c <TL_Init+0x48>)
 8010956:	4a10      	ldr	r2, [pc, #64]	; (8010998 <TL_Init+0x54>)
 8010958:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 801095a:	4b0c      	ldr	r3, [pc, #48]	; (801098c <TL_Init+0x48>)
 801095c:	4a0f      	ldr	r2, [pc, #60]	; (801099c <TL_Init+0x58>)
 801095e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8010960:	4b0a      	ldr	r3, [pc, #40]	; (801098c <TL_Init+0x48>)
 8010962:	4a0f      	ldr	r2, [pc, #60]	; (80109a0 <TL_Init+0x5c>)
 8010964:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8010966:	4b09      	ldr	r3, [pc, #36]	; (801098c <TL_Init+0x48>)
 8010968:	4a0e      	ldr	r2, [pc, #56]	; (80109a4 <TL_Init+0x60>)
 801096a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 801096c:	4b07      	ldr	r3, [pc, #28]	; (801098c <TL_Init+0x48>)
 801096e:	4a0e      	ldr	r2, [pc, #56]	; (80109a8 <TL_Init+0x64>)
 8010970:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8010972:	4b06      	ldr	r3, [pc, #24]	; (801098c <TL_Init+0x48>)
 8010974:	4a0d      	ldr	r2, [pc, #52]	; (80109ac <TL_Init+0x68>)
 8010976:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8010978:	4b04      	ldr	r3, [pc, #16]	; (801098c <TL_Init+0x48>)
 801097a:	4a0d      	ldr	r2, [pc, #52]	; (80109b0 <TL_Init+0x6c>)
 801097c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 801097e:	4b03      	ldr	r3, [pc, #12]	; (801098c <TL_Init+0x48>)
 8010980:	4a0c      	ldr	r2, [pc, #48]	; (80109b4 <TL_Init+0x70>)
 8010982:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8010984:	f001 fe22 	bl	80125cc <HW_IPCC_Init>

  return;
 8010988:	bf00      	nop
}
 801098a:	bd80      	pop	{r7, pc}
 801098c:	20030000 	.word	0x20030000
 8010990:	20030028 	.word	0x20030028
 8010994:	20030048 	.word	0x20030048
 8010998:	20030058 	.word	0x20030058
 801099c:	20030068 	.word	0x20030068
 80109a0:	20030070 	.word	0x20030070
 80109a4:	20030078 	.word	0x20030078
 80109a8:	20030080 	.word	0x20030080
 80109ac:	2003009c 	.word	0x2003009c
 80109b0:	200300a0 	.word	0x200300a0
 80109b4:	200300ac 	.word	0x200300ac

080109b8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b084      	sub	sp, #16
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80109c4:	4811      	ldr	r0, [pc, #68]	; (8010a0c <TL_BLE_Init+0x54>)
 80109c6:	f000 fa27 	bl	8010e18 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80109ca:	4b11      	ldr	r3, [pc, #68]	; (8010a10 <TL_BLE_Init+0x58>)
 80109cc:	685b      	ldr	r3, [r3, #4]
 80109ce:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	689a      	ldr	r2, [r3, #8]
 80109d4:	68bb      	ldr	r3, [r7, #8]
 80109d6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	68da      	ldr	r2, [r3, #12]
 80109dc:	68bb      	ldr	r3, [r7, #8]
 80109de:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80109e0:	68bb      	ldr	r3, [r7, #8]
 80109e2:	4a0c      	ldr	r2, [pc, #48]	; (8010a14 <TL_BLE_Init+0x5c>)
 80109e4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	4a08      	ldr	r2, [pc, #32]	; (8010a0c <TL_BLE_Init+0x54>)
 80109ea:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80109ec:	f001 fe04 	bl	80125f8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	4a08      	ldr	r2, [pc, #32]	; (8010a18 <TL_BLE_Init+0x60>)
 80109f6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	685b      	ldr	r3, [r3, #4]
 80109fc:	4a07      	ldr	r2, [pc, #28]	; (8010a1c <TL_BLE_Init+0x64>)
 80109fe:	6013      	str	r3, [r2, #0]

  return 0;
 8010a00:	2300      	movs	r3, #0
}
 8010a02:	4618      	mov	r0, r3
 8010a04:	3710      	adds	r7, #16
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}
 8010a0a:	bf00      	nop
 8010a0c:	200300c8 	.word	0x200300c8
 8010a10:	20030000 	.word	0x20030000
 8010a14:	20030a58 	.word	0x20030a58
 8010a18:	200008ec 	.word	0x200008ec
 8010a1c:	200008f0 	.word	0x200008f0

08010a20 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
 8010a28:	460b      	mov	r3, r1
 8010a2a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8010a2c:	4b09      	ldr	r3, [pc, #36]	; (8010a54 <TL_BLE_SendCmd+0x34>)
 8010a2e:	685b      	ldr	r3, [r3, #4]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	2201      	movs	r2, #1
 8010a34:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8010a36:	4b07      	ldr	r3, [pc, #28]	; (8010a54 <TL_BLE_SendCmd+0x34>)
 8010a38:	685b      	ldr	r3, [r3, #4]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	4619      	mov	r1, r3
 8010a3e:	2001      	movs	r0, #1
 8010a40:	f000 f96c 	bl	8010d1c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8010a44:	f001 fde2 	bl	801260c <HW_IPCC_BLE_SendCmd>

  return 0;
 8010a48:	2300      	movs	r3, #0
}
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	3708      	adds	r7, #8
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}
 8010a52:	bf00      	nop
 8010a54:	20030000 	.word	0x20030000

08010a58 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b082      	sub	sp, #8
 8010a5c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8010a5e:	e01c      	b.n	8010a9a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8010a60:	1d3b      	adds	r3, r7, #4
 8010a62:	4619      	mov	r1, r3
 8010a64:	4812      	ldr	r0, [pc, #72]	; (8010ab0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8010a66:	f000 fa76 	bl	8010f56 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	7a5b      	ldrb	r3, [r3, #9]
 8010a6e:	2b0f      	cmp	r3, #15
 8010a70:	d003      	beq.n	8010a7a <HW_IPCC_BLE_RxEvtNot+0x22>
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	7a5b      	ldrb	r3, [r3, #9]
 8010a76:	2b0e      	cmp	r3, #14
 8010a78:	d105      	bne.n	8010a86 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	4619      	mov	r1, r3
 8010a7e:	2002      	movs	r0, #2
 8010a80:	f000 f94c 	bl	8010d1c <OutputDbgTrace>
 8010a84:	e004      	b.n	8010a90 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	4619      	mov	r1, r3
 8010a8a:	2003      	movs	r0, #3
 8010a8c:	f000 f946 	bl	8010d1c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8010a90:	4b08      	ldr	r3, [pc, #32]	; (8010ab4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	687a      	ldr	r2, [r7, #4]
 8010a96:	4610      	mov	r0, r2
 8010a98:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8010a9a:	4805      	ldr	r0, [pc, #20]	; (8010ab0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8010a9c:	f000 f9cc 	bl	8010e38 <LST_is_empty>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d0dc      	beq.n	8010a60 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8010aa6:	bf00      	nop
}
 8010aa8:	3708      	adds	r7, #8
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
 8010aae:	bf00      	nop
 8010ab0:	200300c8 	.word	0x200300c8
 8010ab4:	200008ec 	.word	0x200008ec

08010ab8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8010abc:	4b02      	ldr	r3, [pc, #8]	; (8010ac8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	4798      	blx	r3

  return;
 8010ac2:	bf00      	nop
}
 8010ac4:	bd80      	pop	{r7, pc}
 8010ac6:	bf00      	nop
 8010ac8:	200008f0 	.word	0x200008f0

08010acc <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b084      	sub	sp, #16
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8010ad8:	480d      	ldr	r0, [pc, #52]	; (8010b10 <TL_SYS_Init+0x44>)
 8010ada:	f000 f99d 	bl	8010e18 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8010ade:	4b0d      	ldr	r3, [pc, #52]	; (8010b14 <TL_SYS_Init+0x48>)
 8010ae0:	68db      	ldr	r3, [r3, #12]
 8010ae2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	689a      	ldr	r2, [r3, #8]
 8010ae8:	68bb      	ldr	r3, [r7, #8]
 8010aea:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	4a08      	ldr	r2, [pc, #32]	; (8010b10 <TL_SYS_Init+0x44>)
 8010af0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8010af2:	f001 fdad 	bl	8012650 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	4a07      	ldr	r2, [pc, #28]	; (8010b18 <TL_SYS_Init+0x4c>)
 8010afc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	685b      	ldr	r3, [r3, #4]
 8010b02:	4a06      	ldr	r2, [pc, #24]	; (8010b1c <TL_SYS_Init+0x50>)
 8010b04:	6013      	str	r3, [r2, #0]

  return 0;
 8010b06:	2300      	movs	r3, #0
}
 8010b08:	4618      	mov	r0, r3
 8010b0a:	3710      	adds	r7, #16
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}
 8010b10:	200300d0 	.word	0x200300d0
 8010b14:	20030000 	.word	0x20030000
 8010b18:	200008f4 	.word	0x200008f4
 8010b1c:	200008f8 	.word	0x200008f8

08010b20 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b082      	sub	sp, #8
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
 8010b28:	460b      	mov	r3, r1
 8010b2a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8010b2c:	4b09      	ldr	r3, [pc, #36]	; (8010b54 <TL_SYS_SendCmd+0x34>)
 8010b2e:	68db      	ldr	r3, [r3, #12]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	2210      	movs	r2, #16
 8010b34:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8010b36:	4b07      	ldr	r3, [pc, #28]	; (8010b54 <TL_SYS_SendCmd+0x34>)
 8010b38:	68db      	ldr	r3, [r3, #12]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	4619      	mov	r1, r3
 8010b3e:	2004      	movs	r0, #4
 8010b40:	f000 f8ec 	bl	8010d1c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8010b44:	f001 fd8e 	bl	8012664 <HW_IPCC_SYS_SendCmd>

  return 0;
 8010b48:	2300      	movs	r3, #0
}
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	3708      	adds	r7, #8
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd80      	pop	{r7, pc}
 8010b52:	bf00      	nop
 8010b54:	20030000 	.word	0x20030000

08010b58 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8010b5c:	4b07      	ldr	r3, [pc, #28]	; (8010b7c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8010b5e:	68db      	ldr	r3, [r3, #12]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	4619      	mov	r1, r3
 8010b64:	2005      	movs	r0, #5
 8010b66:	f000 f8d9 	bl	8010d1c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8010b6a:	4b05      	ldr	r3, [pc, #20]	; (8010b80 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	4a03      	ldr	r2, [pc, #12]	; (8010b7c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8010b70:	68d2      	ldr	r2, [r2, #12]
 8010b72:	6812      	ldr	r2, [r2, #0]
 8010b74:	4610      	mov	r0, r2
 8010b76:	4798      	blx	r3

  return;
 8010b78:	bf00      	nop
}
 8010b7a:	bd80      	pop	{r7, pc}
 8010b7c:	20030000 	.word	0x20030000
 8010b80:	200008f4 	.word	0x200008f4

08010b84 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b082      	sub	sp, #8
 8010b88:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8010b8a:	e00e      	b.n	8010baa <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8010b8c:	1d3b      	adds	r3, r7, #4
 8010b8e:	4619      	mov	r1, r3
 8010b90:	480b      	ldr	r0, [pc, #44]	; (8010bc0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8010b92:	f000 f9e0 	bl	8010f56 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	4619      	mov	r1, r3
 8010b9a:	2006      	movs	r0, #6
 8010b9c:	f000 f8be 	bl	8010d1c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8010ba0:	4b08      	ldr	r3, [pc, #32]	; (8010bc4 <HW_IPCC_SYS_EvtNot+0x40>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	687a      	ldr	r2, [r7, #4]
 8010ba6:	4610      	mov	r0, r2
 8010ba8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8010baa:	4805      	ldr	r0, [pc, #20]	; (8010bc0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8010bac:	f000 f944 	bl	8010e38 <LST_is_empty>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d0ea      	beq.n	8010b8c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8010bb6:	bf00      	nop
}
 8010bb8:	3708      	adds	r7, #8
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}
 8010bbe:	bf00      	nop
 8010bc0:	200300d0 	.word	0x200300d0
 8010bc4:	200008f8 	.word	0x200008f8

08010bc8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b082      	sub	sp, #8
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8010bd0:	4817      	ldr	r0, [pc, #92]	; (8010c30 <TL_MM_Init+0x68>)
 8010bd2:	f000 f921 	bl	8010e18 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8010bd6:	4817      	ldr	r0, [pc, #92]	; (8010c34 <TL_MM_Init+0x6c>)
 8010bd8:	f000 f91e 	bl	8010e18 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8010bdc:	4b16      	ldr	r3, [pc, #88]	; (8010c38 <TL_MM_Init+0x70>)
 8010bde:	691b      	ldr	r3, [r3, #16]
 8010be0:	4a16      	ldr	r2, [pc, #88]	; (8010c3c <TL_MM_Init+0x74>)
 8010be2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8010be4:	4b15      	ldr	r3, [pc, #84]	; (8010c3c <TL_MM_Init+0x74>)
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	687a      	ldr	r2, [r7, #4]
 8010bea:	6892      	ldr	r2, [r2, #8]
 8010bec:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8010bee:	4b13      	ldr	r3, [pc, #76]	; (8010c3c <TL_MM_Init+0x74>)
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	687a      	ldr	r2, [r7, #4]
 8010bf4:	68d2      	ldr	r2, [r2, #12]
 8010bf6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8010bf8:	4b10      	ldr	r3, [pc, #64]	; (8010c3c <TL_MM_Init+0x74>)
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	4a0c      	ldr	r2, [pc, #48]	; (8010c30 <TL_MM_Init+0x68>)
 8010bfe:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8010c00:	4b0e      	ldr	r3, [pc, #56]	; (8010c3c <TL_MM_Init+0x74>)
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	687a      	ldr	r2, [r7, #4]
 8010c06:	6812      	ldr	r2, [r2, #0]
 8010c08:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8010c0a:	4b0c      	ldr	r3, [pc, #48]	; (8010c3c <TL_MM_Init+0x74>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	687a      	ldr	r2, [r7, #4]
 8010c10:	6852      	ldr	r2, [r2, #4]
 8010c12:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8010c14:	4b09      	ldr	r3, [pc, #36]	; (8010c3c <TL_MM_Init+0x74>)
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	687a      	ldr	r2, [r7, #4]
 8010c1a:	6912      	ldr	r2, [r2, #16]
 8010c1c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8010c1e:	4b07      	ldr	r3, [pc, #28]	; (8010c3c <TL_MM_Init+0x74>)
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	687a      	ldr	r2, [r7, #4]
 8010c24:	6952      	ldr	r2, [r2, #20]
 8010c26:	619a      	str	r2, [r3, #24]

  return;
 8010c28:	bf00      	nop
}
 8010c2a:	3708      	adds	r7, #8
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}
 8010c30:	200300b8 	.word	0x200300b8
 8010c34:	200008e4 	.word	0x200008e4
 8010c38:	20030000 	.word	0x20030000
 8010c3c:	200008fc 	.word	0x200008fc

08010c40 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b082      	sub	sp, #8
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8010c48:	6879      	ldr	r1, [r7, #4]
 8010c4a:	4807      	ldr	r0, [pc, #28]	; (8010c68 <TL_MM_EvtDone+0x28>)
 8010c4c:	f000 f93c 	bl	8010ec8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8010c50:	6879      	ldr	r1, [r7, #4]
 8010c52:	2000      	movs	r0, #0
 8010c54:	f000 f862 	bl	8010d1c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8010c58:	4804      	ldr	r0, [pc, #16]	; (8010c6c <TL_MM_EvtDone+0x2c>)
 8010c5a:	f001 fd29 	bl	80126b0 <HW_IPCC_MM_SendFreeBuf>

  return;
 8010c5e:	bf00      	nop
}
 8010c60:	3708      	adds	r7, #8
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}
 8010c66:	bf00      	nop
 8010c68:	200008e4 	.word	0x200008e4
 8010c6c:	08010c71 	.word	0x08010c71

08010c70 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b082      	sub	sp, #8
 8010c74:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8010c76:	e00c      	b.n	8010c92 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8010c78:	1d3b      	adds	r3, r7, #4
 8010c7a:	4619      	mov	r1, r3
 8010c7c:	480a      	ldr	r0, [pc, #40]	; (8010ca8 <SendFreeBuf+0x38>)
 8010c7e:	f000 f96a 	bl	8010f56 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8010c82:	4b0a      	ldr	r3, [pc, #40]	; (8010cac <SendFreeBuf+0x3c>)
 8010c84:	691b      	ldr	r3, [r3, #16]
 8010c86:	691b      	ldr	r3, [r3, #16]
 8010c88:	687a      	ldr	r2, [r7, #4]
 8010c8a:	4611      	mov	r1, r2
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f000 f91b 	bl	8010ec8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8010c92:	4805      	ldr	r0, [pc, #20]	; (8010ca8 <SendFreeBuf+0x38>)
 8010c94:	f000 f8d0 	bl	8010e38 <LST_is_empty>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d0ec      	beq.n	8010c78 <SendFreeBuf+0x8>
  }

  return;
 8010c9e:	bf00      	nop
}
 8010ca0:	3708      	adds	r7, #8
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd80      	pop	{r7, pc}
 8010ca6:	bf00      	nop
 8010ca8:	200008e4 	.word	0x200008e4
 8010cac:	20030000 	.word	0x20030000

08010cb0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8010cb4:	4805      	ldr	r0, [pc, #20]	; (8010ccc <TL_TRACES_Init+0x1c>)
 8010cb6:	f000 f8af 	bl	8010e18 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8010cba:	4b05      	ldr	r3, [pc, #20]	; (8010cd0 <TL_TRACES_Init+0x20>)
 8010cbc:	695b      	ldr	r3, [r3, #20]
 8010cbe:	4a03      	ldr	r2, [pc, #12]	; (8010ccc <TL_TRACES_Init+0x1c>)
 8010cc0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8010cc2:	f001 fd2b 	bl	801271c <HW_IPCC_TRACES_Init>

  return;
 8010cc6:	bf00      	nop
}
 8010cc8:	bd80      	pop	{r7, pc}
 8010cca:	bf00      	nop
 8010ccc:	200300c0 	.word	0x200300c0
 8010cd0:	20030000 	.word	0x20030000

08010cd4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b082      	sub	sp, #8
 8010cd8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8010cda:	e008      	b.n	8010cee <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8010cdc:	1d3b      	adds	r3, r7, #4
 8010cde:	4619      	mov	r1, r3
 8010ce0:	4808      	ldr	r0, [pc, #32]	; (8010d04 <HW_IPCC_TRACES_EvtNot+0x30>)
 8010ce2:	f000 f938 	bl	8010f56 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f000 f80d 	bl	8010d08 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8010cee:	4805      	ldr	r0, [pc, #20]	; (8010d04 <HW_IPCC_TRACES_EvtNot+0x30>)
 8010cf0:	f000 f8a2 	bl	8010e38 <LST_is_empty>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d0f0      	beq.n	8010cdc <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8010cfa:	bf00      	nop
}
 8010cfc:	3708      	adds	r7, #8
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
 8010d02:	bf00      	nop
 8010d04:	200300c0 	.word	0x200300c0

08010d08 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8010d08:	b480      	push	{r7}
 8010d0a:	b083      	sub	sp, #12
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8010d10:	bf00      	nop
 8010d12:	370c      	adds	r7, #12
 8010d14:	46bd      	mov	sp, r7
 8010d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1a:	4770      	bx	lr

08010d1c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8010d1c:	b480      	push	{r7}
 8010d1e:	b085      	sub	sp, #20
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	4603      	mov	r3, r0
 8010d24:	6039      	str	r1, [r7, #0]
 8010d26:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8010d28:	79fb      	ldrb	r3, [r7, #7]
 8010d2a:	2b06      	cmp	r3, #6
 8010d2c:	d845      	bhi.n	8010dba <OutputDbgTrace+0x9e>
 8010d2e:	a201      	add	r2, pc, #4	; (adr r2, 8010d34 <OutputDbgTrace+0x18>)
 8010d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d34:	08010d51 	.word	0x08010d51
 8010d38:	08010d75 	.word	0x08010d75
 8010d3c:	08010d7b 	.word	0x08010d7b
 8010d40:	08010d8f 	.word	0x08010d8f
 8010d44:	08010d9b 	.word	0x08010d9b
 8010d48:	08010da1 	.word	0x08010da1
 8010d4c:	08010daf 	.word	0x08010daf
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	7a5b      	ldrb	r3, [r3, #9]
 8010d58:	2bff      	cmp	r3, #255	; 0xff
 8010d5a:	d005      	beq.n	8010d68 <OutputDbgTrace+0x4c>
 8010d5c:	2bff      	cmp	r3, #255	; 0xff
 8010d5e:	dc05      	bgt.n	8010d6c <OutputDbgTrace+0x50>
 8010d60:	2b0e      	cmp	r3, #14
 8010d62:	d005      	beq.n	8010d70 <OutputDbgTrace+0x54>
 8010d64:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8010d66:	e001      	b.n	8010d6c <OutputDbgTrace+0x50>
          break;
 8010d68:	bf00      	nop
 8010d6a:	e027      	b.n	8010dbc <OutputDbgTrace+0xa0>
          break;
 8010d6c:	bf00      	nop
 8010d6e:	e025      	b.n	8010dbc <OutputDbgTrace+0xa0>
          break;
 8010d70:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8010d72:	e023      	b.n	8010dbc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8010d74:	683b      	ldr	r3, [r7, #0]
 8010d76:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8010d78:	e020      	b.n	8010dbc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010d7a:	683b      	ldr	r3, [r7, #0]
 8010d7c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	7a5b      	ldrb	r3, [r3, #9]
 8010d82:	2b0e      	cmp	r3, #14
 8010d84:	d001      	beq.n	8010d8a <OutputDbgTrace+0x6e>
 8010d86:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8010d88:	e000      	b.n	8010d8c <OutputDbgTrace+0x70>
          break;
 8010d8a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010d8c:	e016      	b.n	8010dbc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	7a5b      	ldrb	r3, [r3, #9]
 8010d96:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010d98:	e010      	b.n	8010dbc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8010d9e:	e00d      	b.n	8010dbc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	7a5b      	ldrb	r3, [r3, #9]
 8010da8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8010daa:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010dac:	e006      	b.n	8010dbc <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	7a5b      	ldrb	r3, [r3, #9]
 8010db6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010db8:	e000      	b.n	8010dbc <OutputDbgTrace+0xa0>

    default:
      break;
 8010dba:	bf00      	nop
  }

  return;
 8010dbc:	bf00      	nop
}
 8010dbe:	3714      	adds	r7, #20
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc6:	4770      	bx	lr

08010dc8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8010dc8:	b480      	push	{r7}
 8010dca:	b085      	sub	sp, #20
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	4603      	mov	r3, r0
 8010dd0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8010dd2:	4b0f      	ldr	r3, [pc, #60]	; (8010e10 <OTP_Read+0x48>)
 8010dd4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8010dd6:	e002      	b.n	8010dde <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	3b08      	subs	r3, #8
 8010ddc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	3307      	adds	r3, #7
 8010de2:	781b      	ldrb	r3, [r3, #0]
 8010de4:	79fa      	ldrb	r2, [r7, #7]
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d003      	beq.n	8010df2 <OTP_Read+0x2a>
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	4a09      	ldr	r2, [pc, #36]	; (8010e14 <OTP_Read+0x4c>)
 8010dee:	4293      	cmp	r3, r2
 8010df0:	d1f2      	bne.n	8010dd8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	3307      	adds	r3, #7
 8010df6:	781b      	ldrb	r3, [r3, #0]
 8010df8:	79fa      	ldrb	r2, [r7, #7]
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	d001      	beq.n	8010e02 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8010e02:	68fb      	ldr	r3, [r7, #12]
}
 8010e04:	4618      	mov	r0, r3
 8010e06:	3714      	adds	r7, #20
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0e:	4770      	bx	lr
 8010e10:	1fff73f8 	.word	0x1fff73f8
 8010e14:	1fff7000 	.word	0x1fff7000

08010e18 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8010e18:	b480      	push	{r7}
 8010e1a:	b083      	sub	sp, #12
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	687a      	ldr	r2, [r7, #4]
 8010e24:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	687a      	ldr	r2, [r7, #4]
 8010e2a:	605a      	str	r2, [r3, #4]
}
 8010e2c:	bf00      	nop
 8010e2e:	370c      	adds	r7, #12
 8010e30:	46bd      	mov	sp, r7
 8010e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e36:	4770      	bx	lr

08010e38 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8010e38:	b480      	push	{r7}
 8010e3a:	b087      	sub	sp, #28
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e40:	f3ef 8310 	mrs	r3, PRIMASK
 8010e44:	60fb      	str	r3, [r7, #12]
  return(result);
 8010e46:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010e48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8010e4a:	b672      	cpsid	i
}
 8010e4c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	687a      	ldr	r2, [r7, #4]
 8010e54:	429a      	cmp	r2, r3
 8010e56:	d102      	bne.n	8010e5e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8010e58:	2301      	movs	r3, #1
 8010e5a:	75fb      	strb	r3, [r7, #23]
 8010e5c:	e001      	b.n	8010e62 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	75fb      	strb	r3, [r7, #23]
 8010e62:	693b      	ldr	r3, [r7, #16]
 8010e64:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e66:	68bb      	ldr	r3, [r7, #8]
 8010e68:	f383 8810 	msr	PRIMASK, r3
}
 8010e6c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8010e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	371c      	adds	r7, #28
 8010e74:	46bd      	mov	sp, r7
 8010e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7a:	4770      	bx	lr

08010e7c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8010e7c:	b480      	push	{r7}
 8010e7e:	b087      	sub	sp, #28
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
 8010e84:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e86:	f3ef 8310 	mrs	r3, PRIMASK
 8010e8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8010e8c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010e8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010e90:	b672      	cpsid	i
}
 8010e92:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	681a      	ldr	r2, [r3, #0]
 8010e98:	683b      	ldr	r3, [r7, #0]
 8010e9a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	687a      	ldr	r2, [r7, #4]
 8010ea0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	683a      	ldr	r2, [r7, #0]
 8010ea6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	683a      	ldr	r2, [r7, #0]
 8010eae:	605a      	str	r2, [r3, #4]
 8010eb0:	697b      	ldr	r3, [r7, #20]
 8010eb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010eb4:	693b      	ldr	r3, [r7, #16]
 8010eb6:	f383 8810 	msr	PRIMASK, r3
}
 8010eba:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010ebc:	bf00      	nop
 8010ebe:	371c      	adds	r7, #28
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec6:	4770      	bx	lr

08010ec8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8010ec8:	b480      	push	{r7}
 8010eca:	b087      	sub	sp, #28
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
 8010ed0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8010ed6:	60fb      	str	r3, [r7, #12]
  return(result);
 8010ed8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010eda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010edc:	b672      	cpsid	i
}
 8010ede:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	687a      	ldr	r2, [r7, #4]
 8010ee4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	685a      	ldr	r2, [r3, #4]
 8010eea:	683b      	ldr	r3, [r7, #0]
 8010eec:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	683a      	ldr	r2, [r7, #0]
 8010ef2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8010ef4:	683b      	ldr	r3, [r7, #0]
 8010ef6:	685b      	ldr	r3, [r3, #4]
 8010ef8:	683a      	ldr	r2, [r7, #0]
 8010efa:	601a      	str	r2, [r3, #0]
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f00:	693b      	ldr	r3, [r7, #16]
 8010f02:	f383 8810 	msr	PRIMASK, r3
}
 8010f06:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010f08:	bf00      	nop
 8010f0a:	371c      	adds	r7, #28
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f12:	4770      	bx	lr

08010f14 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8010f14:	b480      	push	{r7}
 8010f16:	b087      	sub	sp, #28
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f1c:	f3ef 8310 	mrs	r3, PRIMASK
 8010f20:	60fb      	str	r3, [r7, #12]
  return(result);
 8010f22:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010f24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010f26:	b672      	cpsid	i
}
 8010f28:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	685b      	ldr	r3, [r3, #4]
 8010f2e:	687a      	ldr	r2, [r7, #4]
 8010f30:	6812      	ldr	r2, [r2, #0]
 8010f32:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	687a      	ldr	r2, [r7, #4]
 8010f3a:	6852      	ldr	r2, [r2, #4]
 8010f3c:	605a      	str	r2, [r3, #4]
 8010f3e:	697b      	ldr	r3, [r7, #20]
 8010f40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f42:	693b      	ldr	r3, [r7, #16]
 8010f44:	f383 8810 	msr	PRIMASK, r3
}
 8010f48:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010f4a:	bf00      	nop
 8010f4c:	371c      	adds	r7, #28
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f54:	4770      	bx	lr

08010f56 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8010f56:	b580      	push	{r7, lr}
 8010f58:	b086      	sub	sp, #24
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	6078      	str	r0, [r7, #4]
 8010f5e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f60:	f3ef 8310 	mrs	r3, PRIMASK
 8010f64:	60fb      	str	r3, [r7, #12]
  return(result);
 8010f66:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010f68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010f6a:	b672      	cpsid	i
}
 8010f6c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	681a      	ldr	r2, [r3, #0]
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f7ff ffca 	bl	8010f14 <LST_remove_node>
 8010f80:	697b      	ldr	r3, [r7, #20]
 8010f82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f84:	693b      	ldr	r3, [r7, #16]
 8010f86:	f383 8810 	msr	PRIMASK, r3
}
 8010f8a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010f8c:	bf00      	nop
 8010f8e:	3718      	adds	r7, #24
 8010f90:	46bd      	mov	sp, r7
 8010f92:	bd80      	pop	{r7, pc}

08010f94 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8010f94:	b480      	push	{r7}
 8010f96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8010f98:	4b03      	ldr	r3, [pc, #12]	; (8010fa8 <LL_FLASH_GetUDN+0x14>)
 8010f9a:	681b      	ldr	r3, [r3, #0]
}
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa4:	4770      	bx	lr
 8010fa6:	bf00      	nop
 8010fa8:	1fff7580 	.word	0x1fff7580

08010fac <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8010fac:	b480      	push	{r7}
 8010fae:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8010fb0:	4b03      	ldr	r3, [pc, #12]	; (8010fc0 <LL_FLASH_GetDeviceID+0x14>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	b2db      	uxtb	r3, r3
}
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fbe:	4770      	bx	lr
 8010fc0:	1fff7584 	.word	0x1fff7584

08010fc4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8010fc4:	b480      	push	{r7}
 8010fc6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8010fc8:	4b03      	ldr	r3, [pc, #12]	; (8010fd8 <LL_FLASH_GetSTCompanyID+0x14>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	0a1b      	lsrs	r3, r3, #8
}
 8010fce:	4618      	mov	r0, r3
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd6:	4770      	bx	lr
 8010fd8:	1fff7584 	.word	0x1fff7584

08010fdc <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8010fdc:	b5b0      	push	{r4, r5, r7, lr}
 8010fde:	b090      	sub	sp, #64	; 0x40
 8010fe0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8010fe2:	2392      	movs	r3, #146	; 0x92
 8010fe4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8010fe8:	4b27      	ldr	r3, [pc, #156]	; (8011088 <APP_BLE_Init+0xac>)
 8010fea:	1d3c      	adds	r4, r7, #4
 8010fec:	461d      	mov	r5, r3
 8010fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ff2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ffa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010ffe:	c403      	stmia	r4!, {r0, r1}
 8011000:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8011002:	f000 f909 	bl	8011218 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8011006:	2101      	movs	r1, #1
 8011008:	2002      	movs	r0, #2
 801100a:	f002 f8eb 	bl	80131e4 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 801100e:	4a1f      	ldr	r2, [pc, #124]	; (801108c <APP_BLE_Init+0xb0>)
 8011010:	2100      	movs	r1, #0
 8011012:	2002      	movs	r0, #2
 8011014:	f002 fa12 	bl	801343c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8011018:	1d3b      	adds	r3, r7, #4
 801101a:	4618      	mov	r0, r3
 801101c:	f7ff f8d0 	bl	80101c0 <SHCI_C2_BLE_Init>
 8011020:	4603      	mov	r3, r0
 8011022:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8011026:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801102a:	2b00      	cmp	r3, #0
 801102c:	d001      	beq.n	8011032 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 801102e:	f7f0 fe6b 	bl	8001d08 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8011032:	f000 f907 	bl	8011244 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8011036:	f7ff f81d 	bl	8010074 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 801103a:	4b15      	ldr	r3, [pc, #84]	; (8011090 <APP_BLE_Init+0xb4>)
 801103c:	2200      	movs	r2, #0
 801103e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8011042:	4b13      	ldr	r3, [pc, #76]	; (8011090 <APP_BLE_Init+0xb4>)
 8011044:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011048:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 801104a:	4a12      	ldr	r2, [pc, #72]	; (8011094 <APP_BLE_Init+0xb8>)
 801104c:	2100      	movs	r1, #0
 801104e:	2001      	movs	r0, #1
 8011050:	f002 f9f4 	bl	801343c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8011054:	2006      	movs	r0, #6
 8011056:	f7fe fe80 	bl	800fd5a <aci_hal_set_radio_activity_mask>
 801105a:	4603      	mov	r3, r0
 801105c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8011060:	f000 fb00 	bl	8011664 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8011064:	4b0a      	ldr	r3, [pc, #40]	; (8011090 <APP_BLE_Init+0xb4>)
 8011066:	2200      	movs	r2, #0
 8011068:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 801106a:	4b09      	ldr	r3, [pc, #36]	; (8011090 <APP_BLE_Init+0xb4>)
 801106c:	2200      	movs	r2, #0
 801106e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8011070:	2001      	movs	r0, #1
 8011072:	f000 f99b 	bl	80113ac <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */
  //Ejecutar Task 1
  UTIL_SEQ_SetTask( 1<< CFG_TASK_MAIN, CFG_SCH_PRIO_0);
 8011076:	2100      	movs	r1, #0
 8011078:	2004      	movs	r0, #4
 801107a:	f002 fa01 	bl	8013480 <UTIL_SEQ_SetTask>
  /* USER CODE END APP_BLE_Init_2 */

  return;
 801107e:	bf00      	nop
}
 8011080:	3740      	adds	r7, #64	; 0x40
 8011082:	46bd      	mov	sp, r7
 8011084:	bdb0      	pop	{r4, r5, r7, pc}
 8011086:	bf00      	nop
 8011088:	08015f14 	.word	0x08015f14
 801108c:	080103dd 	.word	0x080103dd
 8011090:	20000908 	.word	0x20000908
 8011094:	08011495 	.word	0x08011495

08011098 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b08a      	sub	sp, #40	; 0x28
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 80110a0:	2392      	movs	r3, #146	; 0x92
 80110a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	3301      	adds	r3, #1
 80110aa:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 80110ac:	6a3b      	ldr	r3, [r7, #32]
 80110ae:	781b      	ldrb	r3, [r3, #0]
 80110b0:	2bff      	cmp	r3, #255	; 0xff
 80110b2:	d053      	beq.n	801115c <SVCCTL_App_Notification+0xc4>
 80110b4:	2bff      	cmp	r3, #255	; 0xff
 80110b6:	f300 80a1 	bgt.w	80111fc <SVCCTL_App_Notification+0x164>
 80110ba:	2b05      	cmp	r3, #5
 80110bc:	d002      	beq.n	80110c4 <SVCCTL_App_Notification+0x2c>
 80110be:	2b3e      	cmp	r3, #62	; 0x3e
 80110c0:	d020      	beq.n	8011104 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80110c2:	e09b      	b.n	80111fc <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80110c4:	6a3b      	ldr	r3, [r7, #32]
 80110c6:	3302      	adds	r3, #2
 80110c8:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80110d0:	b29a      	uxth	r2, r3
 80110d2:	4b4e      	ldr	r3, [pc, #312]	; (801120c <SVCCTL_App_Notification+0x174>)
 80110d4:	8adb      	ldrh	r3, [r3, #22]
 80110d6:	429a      	cmp	r2, r3
 80110d8:	d106      	bne.n	80110e8 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80110da:	4b4c      	ldr	r3, [pc, #304]	; (801120c <SVCCTL_App_Notification+0x174>)
 80110dc:	2200      	movs	r2, #0
 80110de:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80110e0:	4b4a      	ldr	r3, [pc, #296]	; (801120c <SVCCTL_App_Notification+0x174>)
 80110e2:	2200      	movs	r2, #0
 80110e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 80110e8:	2001      	movs	r0, #1
 80110ea:	f000 f95f 	bl	80113ac <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 80110ee:	4b48      	ldr	r3, [pc, #288]	; (8011210 <SVCCTL_App_Notification+0x178>)
 80110f0:	2201      	movs	r2, #1
 80110f2:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80110f4:	4b45      	ldr	r3, [pc, #276]	; (801120c <SVCCTL_App_Notification+0x174>)
 80110f6:	8ada      	ldrh	r2, [r3, #22]
 80110f8:	4b45      	ldr	r3, [pc, #276]	; (8011210 <SVCCTL_App_Notification+0x178>)
 80110fa:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 80110fc:	4844      	ldr	r0, [pc, #272]	; (8011210 <SVCCTL_App_Notification+0x178>)
 80110fe:	f000 fa9d 	bl	801163c <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8011102:	e07e      	b.n	8011202 <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8011104:	6a3b      	ldr	r3, [r7, #32]
 8011106:	3302      	adds	r3, #2
 8011108:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 801110a:	697b      	ldr	r3, [r7, #20]
 801110c:	781b      	ldrb	r3, [r3, #0]
 801110e:	2b01      	cmp	r3, #1
 8011110:	d001      	beq.n	8011116 <SVCCTL_App_Notification+0x7e>
 8011112:	2b03      	cmp	r3, #3
          break;
 8011114:	e021      	b.n	801115a <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8011116:	697b      	ldr	r3, [r7, #20]
 8011118:	3301      	adds	r3, #1
 801111a:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 801111c:	4b3b      	ldr	r3, [pc, #236]	; (801120c <SVCCTL_App_Notification+0x174>)
 801111e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011122:	2b04      	cmp	r3, #4
 8011124:	d104      	bne.n	8011130 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8011126:	4b39      	ldr	r3, [pc, #228]	; (801120c <SVCCTL_App_Notification+0x174>)
 8011128:	2206      	movs	r2, #6
 801112a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 801112e:	e003      	b.n	8011138 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8011130:	4b36      	ldr	r3, [pc, #216]	; (801120c <SVCCTL_App_Notification+0x174>)
 8011132:	2205      	movs	r2, #5
 8011134:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801113e:	b29a      	uxth	r2, r3
 8011140:	4b32      	ldr	r3, [pc, #200]	; (801120c <SVCCTL_App_Notification+0x174>)
 8011142:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8011144:	4b32      	ldr	r3, [pc, #200]	; (8011210 <SVCCTL_App_Notification+0x178>)
 8011146:	2200      	movs	r2, #0
 8011148:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 801114a:	4b30      	ldr	r3, [pc, #192]	; (801120c <SVCCTL_App_Notification+0x174>)
 801114c:	8ada      	ldrh	r2, [r3, #22]
 801114e:	4b30      	ldr	r3, [pc, #192]	; (8011210 <SVCCTL_App_Notification+0x178>)
 8011150:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8011152:	482f      	ldr	r0, [pc, #188]	; (8011210 <SVCCTL_App_Notification+0x178>)
 8011154:	f000 fa72 	bl	801163c <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8011158:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 801115a:	e052      	b.n	8011202 <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 801115c:	6a3b      	ldr	r3, [r7, #32]
 801115e:	3302      	adds	r3, #2
 8011160:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8011162:	69fb      	ldr	r3, [r7, #28]
 8011164:	881b      	ldrh	r3, [r3, #0]
 8011166:	b29b      	uxth	r3, r3
 8011168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801116c:	d040      	beq.n	80111f0 <SVCCTL_App_Notification+0x158>
 801116e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011172:	dc45      	bgt.n	8011200 <SVCCTL_App_Notification+0x168>
 8011174:	2b04      	cmp	r3, #4
 8011176:	d03d      	beq.n	80111f4 <SVCCTL_App_Notification+0x15c>
 8011178:	2b04      	cmp	r3, #4
 801117a:	db41      	blt.n	8011200 <SVCCTL_App_Notification+0x168>
 801117c:	f240 420a 	movw	r2, #1034	; 0x40a
 8011180:	4293      	cmp	r3, r2
 8011182:	dc3d      	bgt.n	8011200 <SVCCTL_App_Notification+0x168>
 8011184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011188:	dd3a      	ble.n	8011200 <SVCCTL_App_Notification+0x168>
 801118a:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 801118e:	2b09      	cmp	r3, #9
 8011190:	d836      	bhi.n	8011200 <SVCCTL_App_Notification+0x168>
 8011192:	a201      	add	r2, pc, #4	; (adr r2, 8011198 <SVCCTL_App_Notification+0x100>)
 8011194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011198:	080111e9 	.word	0x080111e9
 801119c:	080111c1 	.word	0x080111c1
 80111a0:	08011201 	.word	0x08011201
 80111a4:	08011201 	.word	0x08011201
 80111a8:	08011201 	.word	0x08011201
 80111ac:	08011201 	.word	0x08011201
 80111b0:	080111f9 	.word	0x080111f9
 80111b4:	08011201 	.word	0x08011201
 80111b8:	080111d5 	.word	0x080111d5
 80111bc:	080111f9 	.word	0x080111f9
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80111c0:	4b12      	ldr	r3, [pc, #72]	; (801120c <SVCCTL_App_Notification+0x174>)
 80111c2:	8adb      	ldrh	r3, [r3, #22]
 80111c4:	4913      	ldr	r1, [pc, #76]	; (8011214 <SVCCTL_App_Notification+0x17c>)
 80111c6:	4618      	mov	r0, r3
 80111c8:	f7fe f81e 	bl	800f208 <aci_gap_pass_key_resp>
 80111cc:	4603      	mov	r3, r0
 80111ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80111d2:	e012      	b.n	80111fa <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 80111d4:	4b0d      	ldr	r3, [pc, #52]	; (801120c <SVCCTL_App_Notification+0x174>)
 80111d6:	8adb      	ldrh	r3, [r3, #22]
 80111d8:	2101      	movs	r1, #1
 80111da:	4618      	mov	r0, r3
 80111dc:	f7fe f9be 	bl	800f55c <aci_gap_numeric_comparison_value_confirm_yesno>
 80111e0:	4603      	mov	r3, r0
 80111e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80111e6:	e008      	b.n	80111fa <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80111e8:	69fb      	ldr	r3, [r7, #28]
 80111ea:	3302      	adds	r3, #2
 80111ec:	61bb      	str	r3, [r7, #24]
          break;
 80111ee:	e004      	b.n	80111fa <SVCCTL_App_Notification+0x162>
          break;
 80111f0:	bf00      	nop
 80111f2:	e005      	b.n	8011200 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80111f4:	bf00      	nop
 80111f6:	e003      	b.n	8011200 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80111f8:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80111fa:	e001      	b.n	8011200 <SVCCTL_App_Notification+0x168>
      break;
 80111fc:	bf00      	nop
 80111fe:	e000      	b.n	8011202 <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8011200:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8011202:	2301      	movs	r3, #1
}
 8011204:	4618      	mov	r0, r3
 8011206:	3728      	adds	r7, #40	; 0x28
 8011208:	46bd      	mov	sp, r7
 801120a:	bd80      	pop	{r7, pc}
 801120c:	20000908 	.word	0x20000908
 8011210:	2000098c 	.word	0x2000098c
 8011214:	0001b207 	.word	0x0001b207

08011218 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 801121e:	4b06      	ldr	r3, [pc, #24]	; (8011238 <Ble_Tl_Init+0x20>)
 8011220:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8011222:	4b06      	ldr	r3, [pc, #24]	; (801123c <Ble_Tl_Init+0x24>)
 8011224:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8011226:	463b      	mov	r3, r7
 8011228:	4619      	mov	r1, r3
 801122a:	4805      	ldr	r0, [pc, #20]	; (8011240 <Ble_Tl_Init+0x28>)
 801122c:	f7ff f8ba 	bl	80103a4 <hci_init>

  return;
 8011230:	bf00      	nop
}
 8011232:	3708      	adds	r7, #8
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}
 8011238:	200300d8 	.word	0x200300d8
 801123c:	08011545 	.word	0x08011545
 8011240:	0801150d 	.word	0x0801150d

08011244 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8011244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011246:	b08d      	sub	sp, #52	; 0x34
 8011248:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 801124a:	2300      	movs	r3, #0
 801124c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801124e:	2392      	movs	r3, #146	; 0x92
 8011250:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8011252:	f7fe fdd6 	bl	800fe02 <hci_reset>
 8011256:	4603      	mov	r3, r0
 8011258:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 801125a:	f000 f8d7 	bl	801140c <BleGetBdAddress>
 801125e:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8011260:	693a      	ldr	r2, [r7, #16]
 8011262:	2106      	movs	r1, #6
 8011264:	2000      	movs	r0, #0
 8011266:	f7fe fc8c 	bl	800fb82 <aci_hal_write_config_data>
 801126a:	4603      	mov	r3, r0
 801126c:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 801126e:	4a4a      	ldr	r2, [pc, #296]	; (8011398 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8011270:	2110      	movs	r1, #16
 8011272:	2018      	movs	r0, #24
 8011274:	f7fe fc85 	bl	800fb82 <aci_hal_write_config_data>
 8011278:	4603      	mov	r3, r0
 801127a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 801127c:	4a47      	ldr	r2, [pc, #284]	; (801139c <Ble_Hci_Gap_Gatt_Init+0x158>)
 801127e:	2110      	movs	r1, #16
 8011280:	2008      	movs	r0, #8
 8011282:	f7fe fc7e 	bl	800fb82 <aci_hal_write_config_data>
 8011286:	4603      	mov	r3, r0
 8011288:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 801128a:	2117      	movs	r1, #23
 801128c:	2001      	movs	r0, #1
 801128e:	f7fe fcfd 	bl	800fc8c <aci_hal_set_tx_power_level>
 8011292:	4603      	mov	r3, r0
 8011294:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8011296:	f7fe f9c8 	bl	800f62a <aci_gatt_init>
 801129a:	4603      	mov	r3, r0
 801129c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 801129e:	2300      	movs	r3, #0
 80112a0:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80112a2:	7bfb      	ldrb	r3, [r7, #15]
 80112a4:	f043 0301 	orr.w	r3, r3, #1
 80112a8:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 80112aa:	7bfb      	ldrb	r3, [r7, #15]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d01f      	beq.n	80112f0 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 80112b0:	4b3b      	ldr	r3, [pc, #236]	; (80113a0 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 80112b2:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80112b4:	1dba      	adds	r2, r7, #6
 80112b6:	7bf8      	ldrb	r0, [r7, #15]
 80112b8:	1cbb      	adds	r3, r7, #2
 80112ba:	9301      	str	r3, [sp, #4]
 80112bc:	1d3b      	adds	r3, r7, #4
 80112be:	9300      	str	r3, [sp, #0]
 80112c0:	4613      	mov	r3, r2
 80112c2:	2204      	movs	r2, #4
 80112c4:	2100      	movs	r1, #0
 80112c6:	f7fe f806 	bl	800f2d6 <aci_gap_init>
 80112ca:	4603      	mov	r3, r0
 80112cc:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80112ce:	88fc      	ldrh	r4, [r7, #6]
 80112d0:	88bd      	ldrh	r5, [r7, #4]
 80112d2:	68b8      	ldr	r0, [r7, #8]
 80112d4:	f7ee ff54 	bl	8000180 <strlen>
 80112d8:	4603      	mov	r3, r0
 80112da:	b2da      	uxtb	r2, r3
 80112dc:	68bb      	ldr	r3, [r7, #8]
 80112de:	9300      	str	r3, [sp, #0]
 80112e0:	4613      	mov	r3, r2
 80112e2:	2200      	movs	r2, #0
 80112e4:	4629      	mov	r1, r5
 80112e6:	4620      	mov	r0, r4
 80112e8:	f7fe fba2 	bl	800fa30 <aci_gatt_update_char_value>
 80112ec:	4603      	mov	r3, r0
 80112ee:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80112f0:	88f8      	ldrh	r0, [r7, #6]
 80112f2:	8879      	ldrh	r1, [r7, #2]
 80112f4:	463b      	mov	r3, r7
 80112f6:	9300      	str	r3, [sp, #0]
 80112f8:	2302      	movs	r3, #2
 80112fa:	2200      	movs	r2, #0
 80112fc:	f7fe fb98 	bl	800fa30 <aci_gatt_update_char_value>
 8011300:	4603      	mov	r3, r0
 8011302:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8011304:	2202      	movs	r2, #2
 8011306:	2102      	movs	r1, #2
 8011308:	2000      	movs	r0, #0
 801130a:	f7fe fd9e 	bl	800fe4a <hci_le_set_default_phy>
 801130e:	4603      	mov	r3, r0
 8011310:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8011312:	4b24      	ldr	r3, [pc, #144]	; (80113a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011314:	2203      	movs	r2, #3
 8011316:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8011318:	4b22      	ldr	r3, [pc, #136]	; (80113a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801131a:	781b      	ldrb	r3, [r3, #0]
 801131c:	4618      	mov	r0, r3
 801131e:	f7fd fe5b 	bl	800efd8 <aci_gap_set_io_capability>
 8011322:	4603      	mov	r3, r0
 8011324:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8011326:	4b1f      	ldr	r3, [pc, #124]	; (80113a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011328:	2200      	movs	r2, #0
 801132a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 801132c:	4b1d      	ldr	r3, [pc, #116]	; (80113a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801132e:	2208      	movs	r2, #8
 8011330:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8011332:	4b1c      	ldr	r3, [pc, #112]	; (80113a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011334:	2210      	movs	r2, #16
 8011336:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8011338:	4b1a      	ldr	r3, [pc, #104]	; (80113a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801133a:	2200      	movs	r2, #0
 801133c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 801133e:	4b19      	ldr	r3, [pc, #100]	; (80113a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011340:	4a19      	ldr	r2, [pc, #100]	; (80113a8 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8011342:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8011344:	4b17      	ldr	r3, [pc, #92]	; (80113a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011346:	2201      	movs	r2, #1
 8011348:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 801134a:	4b16      	ldr	r3, [pc, #88]	; (80113a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801134c:	789c      	ldrb	r4, [r3, #2]
 801134e:	4b15      	ldr	r3, [pc, #84]	; (80113a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011350:	785d      	ldrb	r5, [r3, #1]
 8011352:	4b14      	ldr	r3, [pc, #80]	; (80113a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011354:	791b      	ldrb	r3, [r3, #4]
 8011356:	4a13      	ldr	r2, [pc, #76]	; (80113a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011358:	7952      	ldrb	r2, [r2, #5]
 801135a:	4912      	ldr	r1, [pc, #72]	; (80113a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801135c:	78c9      	ldrb	r1, [r1, #3]
 801135e:	4811      	ldr	r0, [pc, #68]	; (80113a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011360:	6880      	ldr	r0, [r0, #8]
 8011362:	2600      	movs	r6, #0
 8011364:	9604      	str	r6, [sp, #16]
 8011366:	9003      	str	r0, [sp, #12]
 8011368:	9102      	str	r1, [sp, #8]
 801136a:	9201      	str	r2, [sp, #4]
 801136c:	9300      	str	r3, [sp, #0]
 801136e:	2300      	movs	r3, #0
 8011370:	2201      	movs	r2, #1
 8011372:	4629      	mov	r1, r5
 8011374:	4620      	mov	r0, r4
 8011376:	f7fd fe83 	bl	800f080 <aci_gap_set_authentication_requirement>
 801137a:	4603      	mov	r3, r0
 801137c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 801137e:	4b09      	ldr	r3, [pc, #36]	; (80113a4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011380:	789b      	ldrb	r3, [r3, #2]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d003      	beq.n	801138e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8011386:	f7fe f8c5 	bl	800f514 <aci_gap_configure_whitelist>
 801138a:	4603      	mov	r3, r0
 801138c:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 801138e:	bf00      	nop
 8011390:	371c      	adds	r7, #28
 8011392:	46bd      	mov	sp, r7
 8011394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011396:	bf00      	nop
 8011398:	08016a0c 	.word	0x08016a0c
 801139c:	08016a1c 	.word	0x08016a1c
 80113a0:	08015f50 	.word	0x08015f50
 80113a4:	20000908 	.word	0x20000908
 80113a8:	0001b207 	.word	0x0001b207

080113ac <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b08c      	sub	sp, #48	; 0x30
 80113b0:	af08      	add	r7, sp, #32
 80113b2:	4603      	mov	r3, r0
 80113b4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80113b6:	2392      	movs	r3, #146	; 0x92
 80113b8:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80113ba:	4a12      	ldr	r2, [pc, #72]	; (8011404 <Adv_Request+0x58>)
 80113bc:	79fb      	ldrb	r3, [r7, #7]
 80113be:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 80113c2:	2300      	movs	r3, #0
 80113c4:	9306      	str	r3, [sp, #24]
 80113c6:	2300      	movs	r3, #0
 80113c8:	9305      	str	r3, [sp, #20]
 80113ca:	2300      	movs	r3, #0
 80113cc:	9304      	str	r3, [sp, #16]
 80113ce:	2300      	movs	r3, #0
 80113d0:	9303      	str	r3, [sp, #12]
 80113d2:	2300      	movs	r3, #0
 80113d4:	9302      	str	r3, [sp, #8]
 80113d6:	2300      	movs	r3, #0
 80113d8:	9301      	str	r3, [sp, #4]
 80113da:	2300      	movs	r3, #0
 80113dc:	9300      	str	r3, [sp, #0]
 80113de:	2300      	movs	r3, #0
 80113e0:	22a0      	movs	r2, #160	; 0xa0
 80113e2:	2180      	movs	r1, #128	; 0x80
 80113e4:	2000      	movs	r0, #0
 80113e6:	f7fd fcfd 	bl	800ede4 <aci_gap_set_discoverable>
 80113ea:	4603      	mov	r3, r0
 80113ec:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80113ee:	4906      	ldr	r1, [pc, #24]	; (8011408 <Adv_Request+0x5c>)
 80113f0:	2012      	movs	r0, #18
 80113f2:	f7fe f81d 	bl	800f430 <aci_gap_update_adv_data>
 80113f6:	4603      	mov	r3, r0
 80113f8:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80113fa:	bf00      	nop
}
 80113fc:	3710      	adds	r7, #16
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}
 8011402:	bf00      	nop
 8011404:	20000908 	.word	0x20000908
 8011408:	200000a4 	.word	0x200000a4

0801140c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b086      	sub	sp, #24
 8011410:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8011412:	f7ff fdbf 	bl	8010f94 <LL_FLASH_GetUDN>
 8011416:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8011418:	693b      	ldr	r3, [r7, #16]
 801141a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801141e:	d023      	beq.n	8011468 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8011420:	f7ff fdd0 	bl	8010fc4 <LL_FLASH_GetSTCompanyID>
 8011424:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8011426:	f7ff fdc1 	bl	8010fac <LL_FLASH_GetDeviceID>
 801142a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 801142c:	693b      	ldr	r3, [r7, #16]
 801142e:	b2da      	uxtb	r2, r3
 8011430:	4b16      	ldr	r3, [pc, #88]	; (801148c <BleGetBdAddress+0x80>)
 8011432:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8011434:	693b      	ldr	r3, [r7, #16]
 8011436:	0a1b      	lsrs	r3, r3, #8
 8011438:	b2da      	uxtb	r2, r3
 801143a:	4b14      	ldr	r3, [pc, #80]	; (801148c <BleGetBdAddress+0x80>)
 801143c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	b2da      	uxtb	r2, r3
 8011442:	4b12      	ldr	r3, [pc, #72]	; (801148c <BleGetBdAddress+0x80>)
 8011444:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8011446:	68bb      	ldr	r3, [r7, #8]
 8011448:	b2da      	uxtb	r2, r3
 801144a:	4b10      	ldr	r3, [pc, #64]	; (801148c <BleGetBdAddress+0x80>)
 801144c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	0a1b      	lsrs	r3, r3, #8
 8011452:	b2da      	uxtb	r2, r3
 8011454:	4b0d      	ldr	r3, [pc, #52]	; (801148c <BleGetBdAddress+0x80>)
 8011456:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8011458:	68bb      	ldr	r3, [r7, #8]
 801145a:	0c1b      	lsrs	r3, r3, #16
 801145c:	b2da      	uxtb	r2, r3
 801145e:	4b0b      	ldr	r3, [pc, #44]	; (801148c <BleGetBdAddress+0x80>)
 8011460:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8011462:	4b0a      	ldr	r3, [pc, #40]	; (801148c <BleGetBdAddress+0x80>)
 8011464:	617b      	str	r3, [r7, #20]
 8011466:	e00b      	b.n	8011480 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8011468:	2000      	movs	r0, #0
 801146a:	f7ff fcad 	bl	8010dc8 <OTP_Read>
 801146e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d002      	beq.n	801147c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	617b      	str	r3, [r7, #20]
 801147a:	e001      	b.n	8011480 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 801147c:	4b04      	ldr	r3, [pc, #16]	; (8011490 <BleGetBdAddress+0x84>)
 801147e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8011480:	697b      	ldr	r3, [r7, #20]
}
 8011482:	4618      	mov	r0, r3
 8011484:	3718      	adds	r7, #24
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}
 801148a:	bf00      	nop
 801148c:	20000900 	.word	0x20000900
 8011490:	08016a04 	.word	0x08016a04

08011494 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b082      	sub	sp, #8
 8011498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 801149a:	4b0a      	ldr	r3, [pc, #40]	; (80114c4 <Adv_Cancel+0x30>)
 801149c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80114a0:	2b05      	cmp	r3, #5
 80114a2:	d00a      	beq.n	80114ba <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80114a4:	2392      	movs	r3, #146	; 0x92
 80114a6:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80114a8:	f7fd fc78 	bl	800ed9c <aci_gap_set_non_discoverable>
 80114ac:	4603      	mov	r3, r0
 80114ae:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80114b0:	4b04      	ldr	r3, [pc, #16]	; (80114c4 <Adv_Cancel+0x30>)
 80114b2:	2200      	movs	r2, #0
 80114b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 80114b8:	bf00      	nop
 80114ba:	bf00      	nop
}
 80114bc:	3708      	adds	r7, #8
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}
 80114c2:	bf00      	nop
 80114c4:	20000908 	.word	0x20000908

080114c8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b082      	sub	sp, #8
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80114d0:	2100      	movs	r1, #0
 80114d2:	2002      	movs	r0, #2
 80114d4:	f001 ffd4 	bl	8013480 <UTIL_SEQ_SetTask>

  return;
 80114d8:	bf00      	nop
}
 80114da:	3708      	adds	r7, #8
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd80      	pop	{r7, pc}

080114e0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b082      	sub	sp, #8
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80114e8:	2001      	movs	r0, #1
 80114ea:	f002 f835 	bl	8013558 <UTIL_SEQ_SetEvt>

  return;
 80114ee:	bf00      	nop
}
 80114f0:	3708      	adds	r7, #8
 80114f2:	46bd      	mov	sp, r7
 80114f4:	bd80      	pop	{r7, pc}

080114f6 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80114f6:	b580      	push	{r7, lr}
 80114f8:	b082      	sub	sp, #8
 80114fa:	af00      	add	r7, sp, #0
 80114fc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80114fe:	2001      	movs	r0, #1
 8011500:	f002 f84a 	bl	8013598 <UTIL_SEQ_WaitEvt>

  return;
 8011504:	bf00      	nop
}
 8011506:	3708      	adds	r7, #8
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}

0801150c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b084      	sub	sp, #16
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	685b      	ldr	r3, [r3, #4]
 801151c:	3308      	adds	r3, #8
 801151e:	4618      	mov	r0, r3
 8011520:	f7fe fdfa 	bl	8010118 <SVCCTL_UserEvtRx>
 8011524:	4603      	mov	r3, r0
 8011526:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8011528:	7afb      	ldrb	r3, [r7, #11]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d003      	beq.n	8011536 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	2201      	movs	r2, #1
 8011532:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8011534:	e003      	b.n	801153e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	2200      	movs	r2, #0
 801153a:	701a      	strb	r2, [r3, #0]
  return;
 801153c:	bf00      	nop
}
 801153e:	3710      	adds	r7, #16
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}

08011544 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b084      	sub	sp, #16
 8011548:	af00      	add	r7, sp, #0
 801154a:	4603      	mov	r3, r0
 801154c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 801154e:	79fb      	ldrb	r3, [r7, #7]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d002      	beq.n	801155a <BLE_StatusNot+0x16>
 8011554:	2b01      	cmp	r3, #1
 8011556:	d006      	beq.n	8011566 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8011558:	e00b      	b.n	8011572 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 801155a:	233f      	movs	r3, #63	; 0x3f
 801155c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 801155e:	68f8      	ldr	r0, [r7, #12]
 8011560:	f001 ffba 	bl	80134d8 <UTIL_SEQ_PauseTask>
      break;
 8011564:	e005      	b.n	8011572 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8011566:	233f      	movs	r3, #63	; 0x3f
 8011568:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 801156a:	68f8      	ldr	r0, [r7, #12]
 801156c:	f001 ffd4 	bl	8013518 <UTIL_SEQ_ResumeTask>
      break;
 8011570:	bf00      	nop
  }

  return;
 8011572:	bf00      	nop
}
 8011574:	3710      	adds	r7, #16
 8011576:	46bd      	mov	sp, r7
 8011578:	bd80      	pop	{r7, pc}
	...

0801157c <task_main>:
void Amplification_Function(void);
void Sample_Function(char* str, uint8_t sample_type);
void MeasureChemical_Function(GPIO_TypeDef *GPIO_Port, uint16_t GPIO_Pin);

void task_main(void)
{
 801157c:	b580      	push	{r7, lr}
 801157e:	af00      	add	r7, sp, #0
	//Initialize temp/hum sensor
	sht3x_init(&sht3x_handle);
 8011580:	4828      	ldr	r0, [pc, #160]	; (8011624 <task_main+0xa8>)
 8011582:	f7f0 fc47 	bl	8001e14 <sht3x_init>

	//Check if battery was done charging
	if(battery_completed == 1)
 8011586:	4b28      	ldr	r3, [pc, #160]	; (8011628 <task_main+0xac>)
 8011588:	781b      	ldrb	r3, [r3, #0]
 801158a:	2b01      	cmp	r3, #1
 801158c:	d124      	bne.n	80115d8 <task_main+0x5c>
	{


		SSD1306_Clear();
 801158e:	f7f0 ff24 	bl	80023da <SSD1306_Clear>
		SSD1306_GotoXY(15, 5);
 8011592:	2105      	movs	r1, #5
 8011594:	200f      	movs	r0, #15
 8011596:	f7f0 fe65 	bl	8002264 <SSD1306_GotoXY>
		SSD1306_Puts("Bateria cargada", &Font_7x10, 1);
 801159a:	2201      	movs	r2, #1
 801159c:	4923      	ldr	r1, [pc, #140]	; (801162c <task_main+0xb0>)
 801159e:	4824      	ldr	r0, [pc, #144]	; (8011630 <task_main+0xb4>)
 80115a0:	f7f0 fef6 	bl	8002390 <SSD1306_Puts>
		SSD1306_GotoXY(5, 15);
 80115a4:	210f      	movs	r1, #15
 80115a6:	2005      	movs	r0, #5
 80115a8:	f7f0 fe5c 	bl	8002264 <SSD1306_GotoXY>
		SSD1306_Puts("Desconectar cable USB", &Font_7x10, 1);
 80115ac:	2201      	movs	r2, #1
 80115ae:	491f      	ldr	r1, [pc, #124]	; (801162c <task_main+0xb0>)
 80115b0:	4820      	ldr	r0, [pc, #128]	; (8011634 <task_main+0xb8>)
 80115b2:	f7f0 feed 	bl	8002390 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80115b6:	f7f0 fdaf 	bl	8002118 <SSD1306_UpdateScreen>
		HAL_Delay(3000);
 80115ba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80115be:	f7ef ff1a 	bl	80013f6 <HAL_Delay>

		SSD1306_Clear();
 80115c2:	f7f0 ff0a 	bl	80023da <SSD1306_Clear>
		HAL_GPIO_WritePin(GPIOA, RGB_GREEN_Pin, GPIO_PIN_RESET);
 80115c6:	2200      	movs	r2, #0
 80115c8:	2110      	movs	r1, #16
 80115ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80115ce:	f7f3 fbc9 	bl	8004d64 <HAL_GPIO_WritePin>
		battery_completed = 0;
 80115d2:	4b15      	ldr	r3, [pc, #84]	; (8011628 <task_main+0xac>)
 80115d4:	2200      	movs	r2, #0
 80115d6:	701a      	strb	r2, [r3, #0]
	}

	if(menu_counter == 0)
 80115d8:	4b17      	ldr	r3, [pc, #92]	; (8011638 <task_main+0xbc>)
 80115da:	781b      	ldrb	r3, [r3, #0]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d106      	bne.n	80115ee <task_main+0x72>
	{
		DisplayMenu_Function();
 80115e0:	f000 f85c 	bl	801169c <DisplayMenu_Function>
		UTIL_SEQ_SetTask(1 << CFG_TASK_MAIN, CFG_SCH_PRIO_0);
 80115e4:	2100      	movs	r1, #0
 80115e6:	2004      	movs	r0, #4
 80115e8:	f001 ff4a 	bl	8013480 <UTIL_SEQ_SetTask>
	{
		HAL_Delay(500);
		SSD1306_Clear();
		UTIL_SEQ_SetTask(1 << CFG_TASK_READ_TEMP_HUM, CFG_SCH_PRIO_0);
	}
}
 80115ec:	e018      	b.n	8011620 <task_main+0xa4>
	else if(menu_counter == 1)
 80115ee:	4b12      	ldr	r3, [pc, #72]	; (8011638 <task_main+0xbc>)
 80115f0:	781b      	ldrb	r3, [r3, #0]
 80115f2:	2b01      	cmp	r3, #1
 80115f4:	d106      	bne.n	8011604 <task_main+0x88>
		SSD1306_Clear();
 80115f6:	f7f0 fef0 	bl	80023da <SSD1306_Clear>
		UTIL_SEQ_SetTask(1 << CFG_TASK_MAIN_2, CFG_SCH_PRIO_0);
 80115fa:	2100      	movs	r1, #0
 80115fc:	2010      	movs	r0, #16
 80115fe:	f001 ff3f 	bl	8013480 <UTIL_SEQ_SetTask>
}
 8011602:	e00d      	b.n	8011620 <task_main+0xa4>
	else if(menu_counter == 2)
 8011604:	4b0c      	ldr	r3, [pc, #48]	; (8011638 <task_main+0xbc>)
 8011606:	781b      	ldrb	r3, [r3, #0]
 8011608:	2b02      	cmp	r3, #2
 801160a:	d109      	bne.n	8011620 <task_main+0xa4>
		HAL_Delay(500);
 801160c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011610:	f7ef fef1 	bl	80013f6 <HAL_Delay>
		SSD1306_Clear();
 8011614:	f7f0 fee1 	bl	80023da <SSD1306_Clear>
		UTIL_SEQ_SetTask(1 << CFG_TASK_READ_TEMP_HUM, CFG_SCH_PRIO_0);
 8011618:	2100      	movs	r1, #0
 801161a:	2008      	movs	r0, #8
 801161c:	f001 ff30 	bl	8013480 <UTIL_SEQ_SetTask>
}
 8011620:	bf00      	nop
 8011622:	bd80      	pop	{r7, pc}
 8011624:	200000d0 	.word	0x200000d0
 8011628:	2000047c 	.word	0x2000047c
 801162c:	20000004 	.word	0x20000004
 8011630:	08015fb0 	.word	0x08015fb0
 8011634:	08015fc0 	.word	0x08015fc0
 8011638:	20000a87 	.word	0x20000a87

0801163c <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 801163c:	b480      	push	{r7}
 801163e:	b083      	sub	sp, #12
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	781b      	ldrb	r3, [r3, #0]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d002      	beq.n	8011652 <Custom_APP_Notification+0x16>
 801164c:	2b01      	cmp	r3, #1
 801164e:	d002      	beq.n	8011656 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8011650:	e002      	b.n	8011658 <Custom_APP_Notification+0x1c>
      break;
 8011652:	bf00      	nop
 8011654:	e000      	b.n	8011658 <Custom_APP_Notification+0x1c>
      break;
 8011656:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8011658:	bf00      	nop
}
 801165a:	370c      	adds	r7, #12
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr

08011664 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	  //Advertising OFF
	  //ADV_Stop();

	  //Check if battery has sufficient charge
	  Battery_Percentage();
 8011668:	f000 fbee 	bl	8011e48 <Battery_Percentage>

	  //Task 1
	  UTIL_SEQ_RegTask( 1<< CFG_TASK_MAIN, UTIL_SEQ_RFU, task_main);
 801166c:	4a08      	ldr	r2, [pc, #32]	; (8011690 <Custom_APP_Init+0x2c>)
 801166e:	2100      	movs	r1, #0
 8011670:	2004      	movs	r0, #4
 8011672:	f001 fee3 	bl	801343c <UTIL_SEQ_RegTask>

	  //Task 2
	  UTIL_SEQ_RegTask( 1<< CFG_TASK_READ_TEMP_HUM, UTIL_SEQ_RFU, TempHum_Function);
 8011676:	4a07      	ldr	r2, [pc, #28]	; (8011694 <Custom_APP_Init+0x30>)
 8011678:	2100      	movs	r1, #0
 801167a:	2008      	movs	r0, #8
 801167c:	f001 fede 	bl	801343c <UTIL_SEQ_RegTask>

	  //Task 3
	  UTIL_SEQ_RegTask( 1<< CFG_TASK_MAIN_2, UTIL_SEQ_RFU, Amplification_Function);
 8011680:	4a05      	ldr	r2, [pc, #20]	; (8011698 <Custom_APP_Init+0x34>)
 8011682:	2100      	movs	r1, #0
 8011684:	2010      	movs	r0, #16
 8011686:	f001 fed9 	bl	801343c <UTIL_SEQ_RegTask>

  /* USER CODE END CUSTOM_APP_Init */
  return;
 801168a:	bf00      	nop
}
 801168c:	bd80      	pop	{r7, pc}
 801168e:	bf00      	nop
 8011690:	0801157d 	.word	0x0801157d
 8011694:	08011901 	.word	0x08011901
 8011698:	080117b1 	.word	0x080117b1

0801169c <DisplayMenu_Function>:

/* USER CODE BEGIN FD */
void DisplayMenu_Function(void)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b082      	sub	sp, #8
 80116a0:	af00      	add	r7, sp, #0
	//Se presiona boton 1
	if((HAL_GPIO_ReadPin(BUTT_2_GPIO_Port, BUTT_2_Pin) == GPIO_PIN_RESET))
 80116a2:	2110      	movs	r1, #16
 80116a4:	4838      	ldr	r0, [pc, #224]	; (8011788 <DisplayMenu_Function+0xec>)
 80116a6:	f7f3 fb45 	bl	8004d34 <HAL_GPIO_ReadPin>
 80116aa:	4603      	mov	r3, r0
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d113      	bne.n	80116d8 <DisplayMenu_Function+0x3c>
	{
		//SSD1306_Clear();
		if (selected_main >= 1)
 80116b0:	4b36      	ldr	r3, [pc, #216]	; (801178c <DisplayMenu_Function+0xf0>)
 80116b2:	781b      	ldrb	r3, [r3, #0]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d005      	beq.n	80116c4 <DisplayMenu_Function+0x28>
		{
			SSD1306_Clear();
 80116b8:	f7f0 fe8f 	bl	80023da <SSD1306_Clear>
			selected_main = 0;
 80116bc:	4b33      	ldr	r3, [pc, #204]	; (801178c <DisplayMenu_Function+0xf0>)
 80116be:	2200      	movs	r2, #0
 80116c0:	701a      	strb	r2, [r3, #0]
 80116c2:	e009      	b.n	80116d8 <DisplayMenu_Function+0x3c>
		}
		else
		{
			HAL_Delay(500);
 80116c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80116c8:	f7ef fe95 	bl	80013f6 <HAL_Delay>
			selected_main++;
 80116cc:	4b2f      	ldr	r3, [pc, #188]	; (801178c <DisplayMenu_Function+0xf0>)
 80116ce:	781b      	ldrb	r3, [r3, #0]
 80116d0:	3301      	adds	r3, #1
 80116d2:	b2da      	uxtb	r2, r3
 80116d4:	4b2d      	ldr	r3, [pc, #180]	; (801178c <DisplayMenu_Function+0xf0>)
 80116d6:	701a      	strb	r2, [r3, #0]
		}
	}

	//Se presiona boton 2
	if((HAL_GPIO_ReadPin(BUTT_1_GPIO_Port, BUTT_1_Pin) == GPIO_PIN_RESET))
 80116d8:	2102      	movs	r1, #2
 80116da:	482d      	ldr	r0, [pc, #180]	; (8011790 <DisplayMenu_Function+0xf4>)
 80116dc:	f7f3 fb2a 	bl	8004d34 <HAL_GPIO_ReadPin>
 80116e0:	4603      	mov	r3, r0
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d109      	bne.n	80116fa <DisplayMenu_Function+0x5e>
	{
		HAL_Delay(500);
 80116e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80116ea:	f7ef fe84 	bl	80013f6 <HAL_Delay>
		entered_main = selected_main + 1;
 80116ee:	4b27      	ldr	r3, [pc, #156]	; (801178c <DisplayMenu_Function+0xf0>)
 80116f0:	781b      	ldrb	r3, [r3, #0]
 80116f2:	3301      	adds	r3, #1
 80116f4:	b2da      	uxtb	r2, r3
 80116f6:	4b27      	ldr	r3, [pc, #156]	; (8011794 <DisplayMenu_Function+0xf8>)
 80116f8:	701a      	strb	r2, [r3, #0]
	}

	//No se presiona ningun boton y solo se muestra el menu inicial
	if (entered_main == 0)
 80116fa:	4b26      	ldr	r3, [pc, #152]	; (8011794 <DisplayMenu_Function+0xf8>)
 80116fc:	781b      	ldrb	r3, [r3, #0]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d128      	bne.n	8011754 <DisplayMenu_Function+0xb8>
	{
		SSD1306_GotoXY(1, 0);
 8011702:	2100      	movs	r1, #0
 8011704:	2001      	movs	r0, #1
 8011706:	f7f0 fdad 	bl	8002264 <SSD1306_GotoXY>
		SSD1306_Puts("SNAP Menu", &Font_7x10, 1);
 801170a:	2201      	movs	r2, #1
 801170c:	4922      	ldr	r1, [pc, #136]	; (8011798 <DisplayMenu_Function+0xfc>)
 801170e:	4823      	ldr	r0, [pc, #140]	; (801179c <DisplayMenu_Function+0x100>)
 8011710:	f7f0 fe3e 	bl	8002390 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8011714:	f7f0 fd00 	bl	8002118 <SSD1306_UpdateScreen>
		for (uint8_t i = 0; i <= 1; i++)
 8011718:	2300      	movs	r3, #0
 801171a:	71fb      	strb	r3, [r7, #7]
 801171c:	e016      	b.n	801174c <DisplayMenu_Function+0xb0>
		{
			if (i == selected_main)
 801171e:	4b1b      	ldr	r3, [pc, #108]	; (801178c <DisplayMenu_Function+0xf0>)
 8011720:	781b      	ldrb	r3, [r3, #0]
 8011722:	79fa      	ldrb	r2, [r7, #7]
 8011724:	429a      	cmp	r2, r3
 8011726:	d10e      	bne.n	8011746 <DisplayMenu_Function+0xaa>
			{
				SSD1306_GotoXY(1, 30);
 8011728:	211e      	movs	r1, #30
 801172a:	2001      	movs	r0, #1
 801172c:	f7f0 fd9a 	bl	8002264 <SSD1306_GotoXY>
				SSD1306_Puts(options_menu[i], &Font_7x10, 0);
 8011730:	79fb      	ldrb	r3, [r7, #7]
 8011732:	4a1b      	ldr	r2, [pc, #108]	; (80117a0 <DisplayMenu_Function+0x104>)
 8011734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011738:	2200      	movs	r2, #0
 801173a:	4917      	ldr	r1, [pc, #92]	; (8011798 <DisplayMenu_Function+0xfc>)
 801173c:	4618      	mov	r0, r3
 801173e:	f7f0 fe27 	bl	8002390 <SSD1306_Puts>
				SSD1306_UpdateScreen();
 8011742:	f7f0 fce9 	bl	8002118 <SSD1306_UpdateScreen>
		for (uint8_t i = 0; i <= 1; i++)
 8011746:	79fb      	ldrb	r3, [r7, #7]
 8011748:	3301      	adds	r3, #1
 801174a:	71fb      	strb	r3, [r7, #7]
 801174c:	79fb      	ldrb	r3, [r7, #7]
 801174e:	2b01      	cmp	r3, #1
 8011750:	d9e5      	bls.n	801171e <DisplayMenu_Function+0x82>
	//Ingresa a la funcion de obtencion de datos de temperatura y humedad
	else if (entered_main == 2)
	{
		menu_counter = 2;
	}
}
 8011752:	e014      	b.n	801177e <DisplayMenu_Function+0xe2>
	else if (entered_main == 1)
 8011754:	4b0f      	ldr	r3, [pc, #60]	; (8011794 <DisplayMenu_Function+0xf8>)
 8011756:	781b      	ldrb	r3, [r3, #0]
 8011758:	2b01      	cmp	r3, #1
 801175a:	d109      	bne.n	8011770 <DisplayMenu_Function+0xd4>
		menu_counter = 1;
 801175c:	4b11      	ldr	r3, [pc, #68]	; (80117a4 <DisplayMenu_Function+0x108>)
 801175e:	2201      	movs	r2, #1
 8011760:	701a      	strb	r2, [r3, #0]
		entered_second = 0;
 8011762:	4b11      	ldr	r3, [pc, #68]	; (80117a8 <DisplayMenu_Function+0x10c>)
 8011764:	2200      	movs	r2, #0
 8011766:	701a      	strb	r2, [r3, #0]
		selected_second = 0;
 8011768:	4b10      	ldr	r3, [pc, #64]	; (80117ac <DisplayMenu_Function+0x110>)
 801176a:	2200      	movs	r2, #0
 801176c:	701a      	strb	r2, [r3, #0]
}
 801176e:	e006      	b.n	801177e <DisplayMenu_Function+0xe2>
	else if (entered_main == 2)
 8011770:	4b08      	ldr	r3, [pc, #32]	; (8011794 <DisplayMenu_Function+0xf8>)
 8011772:	781b      	ldrb	r3, [r3, #0]
 8011774:	2b02      	cmp	r3, #2
 8011776:	d102      	bne.n	801177e <DisplayMenu_Function+0xe2>
		menu_counter = 2;
 8011778:	4b0a      	ldr	r3, [pc, #40]	; (80117a4 <DisplayMenu_Function+0x108>)
 801177a:	2202      	movs	r2, #2
 801177c:	701a      	strb	r2, [r3, #0]
}
 801177e:	bf00      	nop
 8011780:	3708      	adds	r7, #8
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}
 8011786:	bf00      	nop
 8011788:	48001000 	.word	0x48001000
 801178c:	20000a88 	.word	0x20000a88
 8011790:	48000400 	.word	0x48000400
 8011794:	20000a8b 	.word	0x20000a8b
 8011798:	20000004 	.word	0x20000004
 801179c:	08015fd8 	.word	0x08015fd8
 80117a0:	200000b8 	.word	0x200000b8
 80117a4:	20000a87 	.word	0x20000a87
 80117a8:	20000a8a 	.word	0x20000a8a
 80117ac:	20000a89 	.word	0x20000a89

080117b0 <Amplification_Function>:

void Amplification_Function(void)
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b082      	sub	sp, #8
 80117b4:	af00      	add	r7, sp, #0
	//Se presiona boton 1
	if((HAL_GPIO_ReadPin(BUTT_2_GPIO_Port, BUTT_2_Pin) == GPIO_PIN_RESET))
 80117b6:	2110      	movs	r1, #16
 80117b8:	4847      	ldr	r0, [pc, #284]	; (80118d8 <Amplification_Function+0x128>)
 80117ba:	f7f3 fabb 	bl	8004d34 <HAL_GPIO_ReadPin>
 80117be:	4603      	mov	r3, r0
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d113      	bne.n	80117ec <Amplification_Function+0x3c>
	{
		//SSD1306_Clear();
		if (selected_second >= 3)
 80117c4:	4b45      	ldr	r3, [pc, #276]	; (80118dc <Amplification_Function+0x12c>)
 80117c6:	781b      	ldrb	r3, [r3, #0]
 80117c8:	2b02      	cmp	r3, #2
 80117ca:	d905      	bls.n	80117d8 <Amplification_Function+0x28>
		{
			SSD1306_Clear();
 80117cc:	f7f0 fe05 	bl	80023da <SSD1306_Clear>
			selected_second = 0;
 80117d0:	4b42      	ldr	r3, [pc, #264]	; (80118dc <Amplification_Function+0x12c>)
 80117d2:	2200      	movs	r2, #0
 80117d4:	701a      	strb	r2, [r3, #0]
 80117d6:	e009      	b.n	80117ec <Amplification_Function+0x3c>
		}
		else
		{
			HAL_Delay(500);
 80117d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80117dc:	f7ef fe0b 	bl	80013f6 <HAL_Delay>
			selected_second++;
 80117e0:	4b3e      	ldr	r3, [pc, #248]	; (80118dc <Amplification_Function+0x12c>)
 80117e2:	781b      	ldrb	r3, [r3, #0]
 80117e4:	3301      	adds	r3, #1
 80117e6:	b2da      	uxtb	r2, r3
 80117e8:	4b3c      	ldr	r3, [pc, #240]	; (80118dc <Amplification_Function+0x12c>)
 80117ea:	701a      	strb	r2, [r3, #0]
		}
	}

	//Se presiona boton 2
	if((HAL_GPIO_ReadPin(BUTT_1_GPIO_Port, BUTT_1_Pin) == GPIO_PIN_RESET))
 80117ec:	2102      	movs	r1, #2
 80117ee:	483c      	ldr	r0, [pc, #240]	; (80118e0 <Amplification_Function+0x130>)
 80117f0:	f7f3 faa0 	bl	8004d34 <HAL_GPIO_ReadPin>
 80117f4:	4603      	mov	r3, r0
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d109      	bne.n	801180e <Amplification_Function+0x5e>
	{
		HAL_Delay(500);
 80117fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80117fe:	f7ef fdfa 	bl	80013f6 <HAL_Delay>
		entered_second = selected_second + 1;
 8011802:	4b36      	ldr	r3, [pc, #216]	; (80118dc <Amplification_Function+0x12c>)
 8011804:	781b      	ldrb	r3, [r3, #0]
 8011806:	3301      	adds	r3, #1
 8011808:	b2da      	uxtb	r2, r3
 801180a:	4b36      	ldr	r3, [pc, #216]	; (80118e4 <Amplification_Function+0x134>)
 801180c:	701a      	strb	r2, [r3, #0]
	}

	if (entered_second == 0)
 801180e:	4b35      	ldr	r3, [pc, #212]	; (80118e4 <Amplification_Function+0x134>)
 8011810:	781b      	ldrb	r3, [r3, #0]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d127      	bne.n	8011866 <Amplification_Function+0xb6>
	{
		SSD1306_GotoXY (1, 0);
 8011816:	2100      	movs	r1, #0
 8011818:	2001      	movs	r0, #1
 801181a:	f7f0 fd23 	bl	8002264 <SSD1306_GotoXY>
		SSD1306_Puts("Elegir quimico", &Font_7x10, 1);
 801181e:	2201      	movs	r2, #1
 8011820:	4931      	ldr	r1, [pc, #196]	; (80118e8 <Amplification_Function+0x138>)
 8011822:	4832      	ldr	r0, [pc, #200]	; (80118ec <Amplification_Function+0x13c>)
 8011824:	f7f0 fdb4 	bl	8002390 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8011828:	f7f0 fc76 	bl	8002118 <SSD1306_UpdateScreen>
		for (uint8_t i = 0; i <= 3; i++)
 801182c:	2300      	movs	r3, #0
 801182e:	71fb      	strb	r3, [r7, #7]
 8011830:	e016      	b.n	8011860 <Amplification_Function+0xb0>
		{
			if (i == selected_second)
 8011832:	4b2a      	ldr	r3, [pc, #168]	; (80118dc <Amplification_Function+0x12c>)
 8011834:	781b      	ldrb	r3, [r3, #0]
 8011836:	79fa      	ldrb	r2, [r7, #7]
 8011838:	429a      	cmp	r2, r3
 801183a:	d10e      	bne.n	801185a <Amplification_Function+0xaa>
			{
				SSD1306_GotoXY(1, 30);
 801183c:	211e      	movs	r1, #30
 801183e:	2001      	movs	r0, #1
 8011840:	f7f0 fd10 	bl	8002264 <SSD1306_GotoXY>
				SSD1306_Puts(options_elements[i], &Font_7x10, 0);
 8011844:	79fb      	ldrb	r3, [r7, #7]
 8011846:	4a2a      	ldr	r2, [pc, #168]	; (80118f0 <Amplification_Function+0x140>)
 8011848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801184c:	2200      	movs	r2, #0
 801184e:	4926      	ldr	r1, [pc, #152]	; (80118e8 <Amplification_Function+0x138>)
 8011850:	4618      	mov	r0, r3
 8011852:	f7f0 fd9d 	bl	8002390 <SSD1306_Puts>
				SSD1306_UpdateScreen();
 8011856:	f7f0 fc5f 	bl	8002118 <SSD1306_UpdateScreen>
		for (uint8_t i = 0; i <= 3; i++)
 801185a:	79fb      	ldrb	r3, [r7, #7]
 801185c:	3301      	adds	r3, #1
 801185e:	71fb      	strb	r3, [r7, #7]
 8011860:	79fb      	ldrb	r3, [r7, #7]
 8011862:	2b03      	cmp	r3, #3
 8011864:	d9e5      	bls.n	8011832 <Amplification_Function+0x82>
			}
		}
	}

	//Phosphorus
	if (entered_second == 1)
 8011866:	4b1f      	ldr	r3, [pc, #124]	; (80118e4 <Amplification_Function+0x134>)
 8011868:	781b      	ldrb	r3, [r3, #0]
 801186a:	2b01      	cmp	r3, #1
 801186c:	d106      	bne.n	801187c <Amplification_Function+0xcc>
	{
		MeasureChemical_Function(GPIOA, LED_WP7_EN_Pin);
 801186e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011876:	f000 f8f3 	bl	8011a60 <MeasureChemical_Function>
 801187a:	e025      	b.n	80118c8 <Amplification_Function+0x118>
	}

	//Potasium
	else if (entered_second == 2)
 801187c:	4b19      	ldr	r3, [pc, #100]	; (80118e4 <Amplification_Function+0x134>)
 801187e:	781b      	ldrb	r3, [r3, #0]
 8011880:	2b02      	cmp	r3, #2
 8011882:	d104      	bne.n	801188e <Amplification_Function+0xde>
	{
		MeasureChemical_Function(GPIOB, LED_4273_EN_Pin);
 8011884:	2110      	movs	r1, #16
 8011886:	4816      	ldr	r0, [pc, #88]	; (80118e0 <Amplification_Function+0x130>)
 8011888:	f000 f8ea 	bl	8011a60 <MeasureChemical_Function>
 801188c:	e01c      	b.n	80118c8 <Amplification_Function+0x118>
	}

	//Nitrogen
	else if (entered_second == 3)
 801188e:	4b15      	ldr	r3, [pc, #84]	; (80118e4 <Amplification_Function+0x134>)
 8011890:	781b      	ldrb	r3, [r3, #0]
 8011892:	2b03      	cmp	r3, #3
 8011894:	d104      	bne.n	80118a0 <Amplification_Function+0xf0>
	{
		MeasureChemical_Function(GPIOB, LED_4261_EN_Pin);
 8011896:	2120      	movs	r1, #32
 8011898:	4811      	ldr	r0, [pc, #68]	; (80118e0 <Amplification_Function+0x130>)
 801189a:	f000 f8e1 	bl	8011a60 <MeasureChemical_Function>
 801189e:	e013      	b.n	80118c8 <Amplification_Function+0x118>
	}

	//Return
	else if (entered_second == 4)
 80118a0:	4b10      	ldr	r3, [pc, #64]	; (80118e4 <Amplification_Function+0x134>)
 80118a2:	781b      	ldrb	r3, [r3, #0]
 80118a4:	2b04      	cmp	r3, #4
 80118a6:	d10f      	bne.n	80118c8 <Amplification_Function+0x118>
	{
		menu_counter = 0;
 80118a8:	4b12      	ldr	r3, [pc, #72]	; (80118f4 <Amplification_Function+0x144>)
 80118aa:	2200      	movs	r2, #0
 80118ac:	701a      	strb	r2, [r3, #0]
		entered_main = 0;
 80118ae:	4b12      	ldr	r3, [pc, #72]	; (80118f8 <Amplification_Function+0x148>)
 80118b0:	2200      	movs	r2, #0
 80118b2:	701a      	strb	r2, [r3, #0]
		selected_main = 0;
 80118b4:	4b11      	ldr	r3, [pc, #68]	; (80118fc <Amplification_Function+0x14c>)
 80118b6:	2200      	movs	r2, #0
 80118b8:	701a      	strb	r2, [r3, #0]
		SSD1306_Clear();
 80118ba:	f7f0 fd8e 	bl	80023da <SSD1306_Clear>
		UTIL_SEQ_SetTask(1 << CFG_TASK_MAIN, CFG_SCH_PRIO_0);
 80118be:	2100      	movs	r1, #0
 80118c0:	2004      	movs	r0, #4
 80118c2:	f001 fddd 	bl	8013480 <UTIL_SEQ_SetTask>
		return;
 80118c6:	e004      	b.n	80118d2 <Amplification_Function+0x122>
	}

	UTIL_SEQ_SetTask(1 << CFG_TASK_MAIN_2, CFG_SCH_PRIO_0);
 80118c8:	2100      	movs	r1, #0
 80118ca:	2010      	movs	r0, #16
 80118cc:	f001 fdd8 	bl	8013480 <UTIL_SEQ_SetTask>
	return;
 80118d0:	bf00      	nop
}
 80118d2:	3708      	adds	r7, #8
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bd80      	pop	{r7, pc}
 80118d8:	48001000 	.word	0x48001000
 80118dc:	20000a89 	.word	0x20000a89
 80118e0:	48000400 	.word	0x48000400
 80118e4:	20000a8a 	.word	0x20000a8a
 80118e8:	20000004 	.word	0x20000004
 80118ec:	08015fe4 	.word	0x08015fe4
 80118f0:	200000c0 	.word	0x200000c0
 80118f4:	20000a87 	.word	0x20000a87
 80118f8:	20000a8b 	.word	0x20000a8b
 80118fc:	20000a88 	.word	0x20000a88

08011900 <TempHum_Function>:

void TempHum_Function(void)
{
 8011900:	b580      	push	{r7, lr}
 8011902:	b082      	sub	sp, #8
 8011904:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(BUTT_1_GPIO_Port, BUTT_1_Pin) == GPIO_PIN_RESET)
 8011906:	2102      	movs	r1, #2
 8011908:	4846      	ldr	r0, [pc, #280]	; (8011a24 <TempHum_Function+0x124>)
 801190a:	f7f3 fa13 	bl	8004d34 <HAL_GPIO_ReadPin>
 801190e:	4603      	mov	r3, r0
 8011910:	2b00      	cmp	r3, #0
 8011912:	d113      	bne.n	801193c <TempHum_Function+0x3c>
	{
		entered_main = 0;
 8011914:	4b44      	ldr	r3, [pc, #272]	; (8011a28 <TempHum_Function+0x128>)
 8011916:	2200      	movs	r2, #0
 8011918:	701a      	strb	r2, [r3, #0]
		selected_main = 0;
 801191a:	4b44      	ldr	r3, [pc, #272]	; (8011a2c <TempHum_Function+0x12c>)
 801191c:	2200      	movs	r2, #0
 801191e:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << CFG_TASK_MAIN, CFG_SCH_PRIO_0);
 8011920:	2100      	movs	r1, #0
 8011922:	2004      	movs	r0, #4
 8011924:	f001 fdac 	bl	8013480 <UTIL_SEQ_SetTask>
		menu_counter = 0;
 8011928:	4b41      	ldr	r3, [pc, #260]	; (8011a30 <TempHum_Function+0x130>)
 801192a:	2200      	movs	r2, #0
 801192c:	701a      	strb	r2, [r3, #0]
		SSD1306_Clear();
 801192e:	f7f0 fd54 	bl	80023da <SSD1306_Clear>
		HAL_Delay(1000);
 8011932:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011936:	f7ef fd5e 	bl	80013f6 <HAL_Delay>
		Custom_STM_App_Update_Char(CUSTOM_STM_TEMP_HUM, &UpdateCharData[2]);

		//Repeats Task
		UTIL_SEQ_SetTask(1 << CFG_TASK_READ_TEMP_HUM, CFG_SCH_PRIO_0);
	}
}
 801193a:	e06f      	b.n	8011a1c <TempHum_Function+0x11c>
		SSD1306_GotoXY(1, 0);
 801193c:	2100      	movs	r1, #0
 801193e:	2001      	movs	r0, #1
 8011940:	f7f0 fc90 	bl	8002264 <SSD1306_GotoXY>
		SSD1306_Puts("Back", &Font_7x10, 0);
 8011944:	2200      	movs	r2, #0
 8011946:	493b      	ldr	r1, [pc, #236]	; (8011a34 <TempHum_Function+0x134>)
 8011948:	483b      	ldr	r0, [pc, #236]	; (8011a38 <TempHum_Function+0x138>)
 801194a:	f7f0 fd21 	bl	8002390 <SSD1306_Puts>
		SSD1306_GotoXY(29,0);
 801194e:	2100      	movs	r1, #0
 8011950:	201d      	movs	r0, #29
 8011952:	f7f0 fc87 	bl	8002264 <SSD1306_GotoXY>
		SSD1306_Puts("Temperatura", &Font_7x10, 1);
 8011956:	2201      	movs	r2, #1
 8011958:	4936      	ldr	r1, [pc, #216]	; (8011a34 <TempHum_Function+0x134>)
 801195a:	4838      	ldr	r0, [pc, #224]	; (8011a3c <TempHum_Function+0x13c>)
 801195c:	f7f0 fd18 	bl	8002390 <SSD1306_Puts>
		SSD1306_GotoXY(35,35);
 8011960:	2123      	movs	r1, #35	; 0x23
 8011962:	2023      	movs	r0, #35	; 0x23
 8011964:	f7f0 fc7e 	bl	8002264 <SSD1306_GotoXY>
		SSD1306_Puts("Humedad", &Font_7x10, 1);
 8011968:	2201      	movs	r2, #1
 801196a:	4932      	ldr	r1, [pc, #200]	; (8011a34 <TempHum_Function+0x134>)
 801196c:	4834      	ldr	r0, [pc, #208]	; (8011a40 <TempHum_Function+0x140>)
 801196e:	f7f0 fd0f 	bl	8002390 <SSD1306_Puts>
		sht3x_read_temperature_and_humidity(&sht3x_handle, &temperature, &humidity);
 8011972:	4a34      	ldr	r2, [pc, #208]	; (8011a44 <TempHum_Function+0x144>)
 8011974:	4934      	ldr	r1, [pc, #208]	; (8011a48 <TempHum_Function+0x148>)
 8011976:	4835      	ldr	r0, [pc, #212]	; (8011a4c <TempHum_Function+0x14c>)
 8011978:	f7f0 fa8c 	bl	8001e94 <sht3x_read_temperature_and_humidity>
		SSD1306_GotoXY(1, 20);
 801197c:	2114      	movs	r1, #20
 801197e:	2001      	movs	r0, #1
 8011980:	f7f0 fc70 	bl	8002264 <SSD1306_GotoXY>
		gcvt(temperature, 3, buf);
 8011984:	4b30      	ldr	r3, [pc, #192]	; (8011a48 <TempHum_Function+0x148>)
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	4618      	mov	r0, r3
 801198a:	f7ee fdb5 	bl	80004f8 <__aeabi_f2d>
 801198e:	4602      	mov	r2, r0
 8011990:	460b      	mov	r3, r1
 8011992:	492f      	ldr	r1, [pc, #188]	; (8011a50 <TempHum_Function+0x150>)
 8011994:	2003      	movs	r0, #3
 8011996:	ec43 2b10 	vmov	d0, r2, r3
 801199a:	f001 feaf 	bl	80136fc <gcvt>
		SSD1306_Puts(buf, &Font_7x10, 1);
 801199e:	2201      	movs	r2, #1
 80119a0:	4924      	ldr	r1, [pc, #144]	; (8011a34 <TempHum_Function+0x134>)
 80119a2:	482b      	ldr	r0, [pc, #172]	; (8011a50 <TempHum_Function+0x150>)
 80119a4:	f7f0 fcf4 	bl	8002390 <SSD1306_Puts>
		SSD1306_GotoXY(1, 45);
 80119a8:	212d      	movs	r1, #45	; 0x2d
 80119aa:	2001      	movs	r0, #1
 80119ac:	f7f0 fc5a 	bl	8002264 <SSD1306_GotoXY>
		gcvt(humidity, 3, buf);
 80119b0:	4b24      	ldr	r3, [pc, #144]	; (8011a44 <TempHum_Function+0x144>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	4618      	mov	r0, r3
 80119b6:	f7ee fd9f 	bl	80004f8 <__aeabi_f2d>
 80119ba:	4602      	mov	r2, r0
 80119bc:	460b      	mov	r3, r1
 80119be:	4924      	ldr	r1, [pc, #144]	; (8011a50 <TempHum_Function+0x150>)
 80119c0:	2003      	movs	r0, #3
 80119c2:	ec43 2b10 	vmov	d0, r2, r3
 80119c6:	f001 fe99 	bl	80136fc <gcvt>
		SSD1306_Puts(buf, &Font_7x10, 1);
 80119ca:	2201      	movs	r2, #1
 80119cc:	4919      	ldr	r1, [pc, #100]	; (8011a34 <TempHum_Function+0x134>)
 80119ce:	4820      	ldr	r0, [pc, #128]	; (8011a50 <TempHum_Function+0x150>)
 80119d0:	f7f0 fcde 	bl	8002390 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80119d4:	f7f0 fba0 	bl	8002118 <SSD1306_UpdateScreen>
		UpdateCharData[1] = (uint8_t) temperature;
 80119d8:	4b1b      	ldr	r3, [pc, #108]	; (8011a48 <TempHum_Function+0x148>)
 80119da:	edd3 7a00 	vldr	s15, [r3]
 80119de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80119e2:	edc7 7a01 	vstr	s15, [r7, #4]
 80119e6:	793b      	ldrb	r3, [r7, #4]
 80119e8:	b2da      	uxtb	r2, r3
 80119ea:	4b1a      	ldr	r3, [pc, #104]	; (8011a54 <TempHum_Function+0x154>)
 80119ec:	705a      	strb	r2, [r3, #1]
		Custom_STM_App_Update_Char(CUSTOM_STM_TEMP_HUM, &UpdateCharData[1]);
 80119ee:	491a      	ldr	r1, [pc, #104]	; (8011a58 <TempHum_Function+0x158>)
 80119f0:	2002      	movs	r0, #2
 80119f2:	f000 fbf9 	bl	80121e8 <Custom_STM_App_Update_Char>
		UpdateCharData[2] = (uint8_t) humidity;
 80119f6:	4b13      	ldr	r3, [pc, #76]	; (8011a44 <TempHum_Function+0x144>)
 80119f8:	edd3 7a00 	vldr	s15, [r3]
 80119fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a00:	edc7 7a01 	vstr	s15, [r7, #4]
 8011a04:	793b      	ldrb	r3, [r7, #4]
 8011a06:	b2da      	uxtb	r2, r3
 8011a08:	4b12      	ldr	r3, [pc, #72]	; (8011a54 <TempHum_Function+0x154>)
 8011a0a:	709a      	strb	r2, [r3, #2]
		Custom_STM_App_Update_Char(CUSTOM_STM_TEMP_HUM, &UpdateCharData[2]);
 8011a0c:	4913      	ldr	r1, [pc, #76]	; (8011a5c <TempHum_Function+0x15c>)
 8011a0e:	2002      	movs	r0, #2
 8011a10:	f000 fbea 	bl	80121e8 <Custom_STM_App_Update_Char>
		UTIL_SEQ_SetTask(1 << CFG_TASK_READ_TEMP_HUM, CFG_SCH_PRIO_0);
 8011a14:	2100      	movs	r1, #0
 8011a16:	2008      	movs	r0, #8
 8011a18:	f001 fd32 	bl	8013480 <UTIL_SEQ_SetTask>
}
 8011a1c:	bf00      	nop
 8011a1e:	3708      	adds	r7, #8
 8011a20:	46bd      	mov	sp, r7
 8011a22:	bd80      	pop	{r7, pc}
 8011a24:	48000400 	.word	0x48000400
 8011a28:	20000a8b 	.word	0x20000a8b
 8011a2c:	20000a88 	.word	0x20000a88
 8011a30:	20000a87 	.word	0x20000a87
 8011a34:	20000004 	.word	0x20000004
 8011a38:	08015ff4 	.word	0x08015ff4
 8011a3c:	08015ffc 	.word	0x08015ffc
 8011a40:	08016008 	.word	0x08016008
 8011a44:	20000a98 	.word	0x20000a98
 8011a48:	20000a9c 	.word	0x20000a9c
 8011a4c:	200000d0 	.word	0x200000d0
 8011a50:	20000aa8 	.word	0x20000aa8
 8011a54:	20000990 	.word	0x20000990
 8011a58:	20000991 	.word	0x20000991
 8011a5c:	20000992 	.word	0x20000992

08011a60 <MeasureChemical_Function>:

void MeasureChemical_Function(GPIO_TypeDef *GPIO_Port, uint16_t GPIO_Pin)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b082      	sub	sp, #8
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
 8011a68:	460b      	mov	r3, r1
 8011a6a:	807b      	strh	r3, [r7, #2]
	//Wait for user input
	WaitUser_Function();
 8011a6c:	f000 f85a 	bl	8011b24 <WaitUser_Function>

	//Turn on selected LED
	HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_SET);
 8011a70:	887b      	ldrh	r3, [r7, #2]
 8011a72:	2201      	movs	r2, #1
 8011a74:	4619      	mov	r1, r3
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	f7f3 f974 	bl	8004d64 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8011a7c:	2064      	movs	r0, #100	; 0x64
 8011a7e:	f7ef fcba 	bl	80013f6 <HAL_Delay>

	//Check if selected LED is in correct position
	ADCCheck_Function();
 8011a82:	f000 f9bf 	bl	8011e04 <ADCCheck_Function>

	if(adc_value[0] > 500)
 8011a86:	4b20      	ldr	r3, [pc, #128]	; (8011b08 <MeasureChemical_Function+0xa8>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8011a8e:	d91e      	bls.n	8011ace <MeasureChemical_Function+0x6e>
	{
		//Funcion que pide al usuario colocar la prueba blanca en la ranura
		Sample_Function("Blanca", 1);
 8011a90:	2101      	movs	r1, #1
 8011a92:	481e      	ldr	r0, [pc, #120]	; (8011b0c <MeasureChemical_Function+0xac>)
 8011a94:	f000 f8b8 	bl	8011c08 <Sample_Function>

		//Funcion que pide al usuario colocar la prueba real en la ranura
		Sample_Function("Real", 2);
 8011a98:	2102      	movs	r1, #2
 8011a9a:	481d      	ldr	r0, [pc, #116]	; (8011b10 <MeasureChemical_Function+0xb0>)
 8011a9c:	f000 f8b4 	bl	8011c08 <Sample_Function>

		//Turn off selected LED & reset variables for returning to Menu
		HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_RESET);
 8011aa0:	887b      	ldrh	r3, [r7, #2]
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	4619      	mov	r1, r3
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	f7f3 f95c 	bl	8004d64 <HAL_GPIO_WritePin>
		entered_main = 0;
 8011aac:	4b19      	ldr	r3, [pc, #100]	; (8011b14 <MeasureChemical_Function+0xb4>)
 8011aae:	2200      	movs	r2, #0
 8011ab0:	701a      	strb	r2, [r3, #0]
		selected_main = 0;
 8011ab2:	4b19      	ldr	r3, [pc, #100]	; (8011b18 <MeasureChemical_Function+0xb8>)
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	701a      	strb	r2, [r3, #0]
		selected_second = 0;
 8011ab8:	4b18      	ldr	r3, [pc, #96]	; (8011b1c <MeasureChemical_Function+0xbc>)
 8011aba:	2200      	movs	r2, #0
 8011abc:	701a      	strb	r2, [r3, #0]
		entered_second = 0;
 8011abe:	4b18      	ldr	r3, [pc, #96]	; (8011b20 <MeasureChemical_Function+0xc0>)
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	701a      	strb	r2, [r3, #0]
		//menu_counter = 0;

		//TODO:Mostrar el valor en pantalla y guardar en memoria
		UTIL_SEQ_SetTask(1 << CFG_TASK_MAIN, CFG_SCH_PRIO_0);
 8011ac4:	2100      	movs	r1, #0
 8011ac6:	2004      	movs	r0, #4
 8011ac8:	f001 fcda 	bl	8013480 <UTIL_SEQ_SetTask>
		return;
 8011acc:	e018      	b.n	8011b00 <MeasureChemical_Function+0xa0>
	}

	else
	{
		//Turn off selected LED
		HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_RESET);
 8011ace:	887b      	ldrh	r3, [r7, #2]
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	4619      	mov	r1, r3
 8011ad4:	6878      	ldr	r0, [r7, #4]
 8011ad6:	f7f3 f945 	bl	8004d64 <HAL_GPIO_WritePin>

		//Error al escoger led
		ChemicalError_Function();
 8011ada:	f000 f869 	bl	8011bb0 <ChemicalError_Function>
		entered_main = 0;
 8011ade:	4b0d      	ldr	r3, [pc, #52]	; (8011b14 <MeasureChemical_Function+0xb4>)
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	701a      	strb	r2, [r3, #0]
		selected_main = 0;
 8011ae4:	4b0c      	ldr	r3, [pc, #48]	; (8011b18 <MeasureChemical_Function+0xb8>)
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	701a      	strb	r2, [r3, #0]
		selected_second = 0;
 8011aea:	4b0c      	ldr	r3, [pc, #48]	; (8011b1c <MeasureChemical_Function+0xbc>)
 8011aec:	2200      	movs	r2, #0
 8011aee:	701a      	strb	r2, [r3, #0]
		entered_second = 0;
 8011af0:	4b0b      	ldr	r3, [pc, #44]	; (8011b20 <MeasureChemical_Function+0xc0>)
 8011af2:	2200      	movs	r2, #0
 8011af4:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << CFG_TASK_MAIN, CFG_SCH_PRIO_0);
 8011af6:	2100      	movs	r1, #0
 8011af8:	2004      	movs	r0, #4
 8011afa:	f001 fcc1 	bl	8013480 <UTIL_SEQ_SetTask>
		return;
 8011afe:	bf00      	nop
	}

	return;
}
 8011b00:	3708      	adds	r7, #8
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}
 8011b06:	bf00      	nop
 8011b08:	20000a90 	.word	0x20000a90
 8011b0c:	08016010 	.word	0x08016010
 8011b10:	08016018 	.word	0x08016018
 8011b14:	20000a8b 	.word	0x20000a8b
 8011b18:	20000a88 	.word	0x20000a88
 8011b1c:	20000a89 	.word	0x20000a89
 8011b20:	20000a8a 	.word	0x20000a8a

08011b24 <WaitUser_Function>:

void WaitUser_Function(void)
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8011b28:	f7f0 fc57 	bl	80023da <SSD1306_Clear>
	HAL_Delay(500);
 8011b2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011b30:	f7ef fc61 	bl	80013f6 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, BUTT_1_Pin) == GPIO_PIN_SET){
 8011b34:	e025      	b.n	8011b82 <WaitUser_Function+0x5e>
		SSD1306_GotoXY(15, 5);
 8011b36:	2105      	movs	r1, #5
 8011b38:	200f      	movs	r0, #15
 8011b3a:	f7f0 fb93 	bl	8002264 <SSD1306_GotoXY>
		SSD1306_Puts("Mover palanca", &Font_7x10, 1);
 8011b3e:	2201      	movs	r2, #1
 8011b40:	4915      	ldr	r1, [pc, #84]	; (8011b98 <WaitUser_Function+0x74>)
 8011b42:	4816      	ldr	r0, [pc, #88]	; (8011b9c <WaitUser_Function+0x78>)
 8011b44:	f7f0 fc24 	bl	8002390 <SSD1306_Puts>
		SSD1306_GotoXY(15, 15);
 8011b48:	210f      	movs	r1, #15
 8011b4a:	200f      	movs	r0, #15
 8011b4c:	f7f0 fb8a 	bl	8002264 <SSD1306_GotoXY>
		SSD1306_Puts("al LED escogido", &Font_7x10, 1);
 8011b50:	2201      	movs	r2, #1
 8011b52:	4911      	ldr	r1, [pc, #68]	; (8011b98 <WaitUser_Function+0x74>)
 8011b54:	4812      	ldr	r0, [pc, #72]	; (8011ba0 <WaitUser_Function+0x7c>)
 8011b56:	f7f0 fc1b 	bl	8002390 <SSD1306_Puts>
		SSD1306_GotoXY(15, 25);
 8011b5a:	2119      	movs	r1, #25
 8011b5c:	200f      	movs	r0, #15
 8011b5e:	f7f0 fb81 	bl	8002264 <SSD1306_GotoXY>
		SSD1306_Puts("Presionar 2", &Font_7x10, 1);
 8011b62:	2201      	movs	r2, #1
 8011b64:	490c      	ldr	r1, [pc, #48]	; (8011b98 <WaitUser_Function+0x74>)
 8011b66:	480f      	ldr	r0, [pc, #60]	; (8011ba4 <WaitUser_Function+0x80>)
 8011b68:	f7f0 fc12 	bl	8002390 <SSD1306_Puts>
		SSD1306_GotoXY(15, 35);
 8011b6c:	2123      	movs	r1, #35	; 0x23
 8011b6e:	200f      	movs	r0, #15
 8011b70:	f7f0 fb78 	bl	8002264 <SSD1306_GotoXY>
		SSD1306_Puts("Para continuar", &Font_7x10, 1);
 8011b74:	2201      	movs	r2, #1
 8011b76:	4908      	ldr	r1, [pc, #32]	; (8011b98 <WaitUser_Function+0x74>)
 8011b78:	480b      	ldr	r0, [pc, #44]	; (8011ba8 <WaitUser_Function+0x84>)
 8011b7a:	f7f0 fc09 	bl	8002390 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8011b7e:	f7f0 facb 	bl	8002118 <SSD1306_UpdateScreen>
	while(HAL_GPIO_ReadPin(GPIOB, BUTT_1_Pin) == GPIO_PIN_SET){
 8011b82:	2102      	movs	r1, #2
 8011b84:	4809      	ldr	r0, [pc, #36]	; (8011bac <WaitUser_Function+0x88>)
 8011b86:	f7f3 f8d5 	bl	8004d34 <HAL_GPIO_ReadPin>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	2b01      	cmp	r3, #1
 8011b8e:	d0d2      	beq.n	8011b36 <WaitUser_Function+0x12>
	}
}
 8011b90:	bf00      	nop
 8011b92:	bf00      	nop
 8011b94:	bd80      	pop	{r7, pc}
 8011b96:	bf00      	nop
 8011b98:	20000004 	.word	0x20000004
 8011b9c:	08016020 	.word	0x08016020
 8011ba0:	08016030 	.word	0x08016030
 8011ba4:	08016040 	.word	0x08016040
 8011ba8:	0801604c 	.word	0x0801604c
 8011bac:	48000400 	.word	0x48000400

08011bb0 <ChemicalError_Function>:

void ChemicalError_Function(void)
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	af00      	add	r7, sp, #0
	//Show on screen
	SSD1306_Clear();
 8011bb4:	f7f0 fc11 	bl	80023da <SSD1306_Clear>
	SSD1306_GotoXY(15, 15);
 8011bb8:	210f      	movs	r1, #15
 8011bba:	200f      	movs	r0, #15
 8011bbc:	f7f0 fb52 	bl	8002264 <SSD1306_GotoXY>
	SSD1306_Puts("LED Incorrecto", &Font_7x10, 1);
 8011bc0:	2201      	movs	r2, #1
 8011bc2:	490c      	ldr	r1, [pc, #48]	; (8011bf4 <ChemicalError_Function+0x44>)
 8011bc4:	480c      	ldr	r0, [pc, #48]	; (8011bf8 <ChemicalError_Function+0x48>)
 8011bc6:	f7f0 fbe3 	bl	8002390 <SSD1306_Puts>
	SSD1306_GotoXY(15, 45);
 8011bca:	212d      	movs	r1, #45	; 0x2d
 8011bcc:	200f      	movs	r0, #15
 8011bce:	f7f0 fb49 	bl	8002264 <SSD1306_GotoXY>
	SSD1306_Puts("Cambiar LED", &Font_7x10, 1);
 8011bd2:	2201      	movs	r2, #1
 8011bd4:	4907      	ldr	r1, [pc, #28]	; (8011bf4 <ChemicalError_Function+0x44>)
 8011bd6:	4809      	ldr	r0, [pc, #36]	; (8011bfc <ChemicalError_Function+0x4c>)
 8011bd8:	f7f0 fbda 	bl	8002390 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8011bdc:	f7f0 fa9c 	bl	8002118 <SSD1306_UpdateScreen>

	HAL_Delay(3000);
 8011be0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8011be4:	f7ef fc07 	bl	80013f6 <HAL_Delay>
	entered_second = 4;
 8011be8:	4b05      	ldr	r3, [pc, #20]	; (8011c00 <ChemicalError_Function+0x50>)
 8011bea:	2204      	movs	r2, #4
 8011bec:	701a      	strb	r2, [r3, #0]
}
 8011bee:	bf00      	nop
 8011bf0:	bd80      	pop	{r7, pc}
 8011bf2:	bf00      	nop
 8011bf4:	20000004 	.word	0x20000004
 8011bf8:	0801605c 	.word	0x0801605c
 8011bfc:	0801606c 	.word	0x0801606c
 8011c00:	20000a8a 	.word	0x20000a8a
 8011c04:	00000000 	.word	0x00000000

08011c08 <Sample_Function>:

void Sample_Function(char* str, uint8_t sample_type)
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b082      	sub	sp, #8
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
 8011c10:	460b      	mov	r3, r1
 8011c12:	70fb      	strb	r3, [r7, #3]
	SSD1306_Clear();
 8011c14:	f7f0 fbe1 	bl	80023da <SSD1306_Clear>
	HAL_Delay(500);
 8011c18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011c1c:	f7ef fbeb 	bl	80013f6 <HAL_Delay>

	while(HAL_GPIO_ReadPin(GPIOB, BUTT_1_Pin) == GPIO_PIN_SET)
 8011c20:	e032      	b.n	8011c88 <Sample_Function+0x80>
	{
		SSD1306_GotoXY(15, 5);
 8011c22:	2105      	movs	r1, #5
 8011c24:	200f      	movs	r0, #15
 8011c26:	f7f0 fb1d 	bl	8002264 <SSD1306_GotoXY>
		SSD1306_Puts("Colocar muestra", &Font_7x10, 1);
 8011c2a:	2201      	movs	r2, #1
 8011c2c:	4968      	ldr	r1, [pc, #416]	; (8011dd0 <Sample_Function+0x1c8>)
 8011c2e:	4869      	ldr	r0, [pc, #420]	; (8011dd4 <Sample_Function+0x1cc>)
 8011c30:	f7f0 fbae 	bl	8002390 <SSD1306_Puts>
		SSD1306_GotoXY(15, 15);
 8011c34:	210f      	movs	r1, #15
 8011c36:	200f      	movs	r0, #15
 8011c38:	f7f0 fb14 	bl	8002264 <SSD1306_GotoXY>
		switch(sample_type)
 8011c3c:	78fb      	ldrb	r3, [r7, #3]
 8011c3e:	2b01      	cmp	r3, #1
 8011c40:	d002      	beq.n	8011c48 <Sample_Function+0x40>
 8011c42:	2b02      	cmp	r3, #2
 8011c44:	d006      	beq.n	8011c54 <Sample_Function+0x4c>
 8011c46:	e00b      	b.n	8011c60 <Sample_Function+0x58>
		{
		case 1:
			SSD1306_Puts(str, &Font_7x10, 1);
 8011c48:	2201      	movs	r2, #1
 8011c4a:	4961      	ldr	r1, [pc, #388]	; (8011dd0 <Sample_Function+0x1c8>)
 8011c4c:	6878      	ldr	r0, [r7, #4]
 8011c4e:	f7f0 fb9f 	bl	8002390 <SSD1306_Puts>
			break;
 8011c52:	e005      	b.n	8011c60 <Sample_Function+0x58>

		case 2:
			SSD1306_Puts(str, &Font_7x10, 1);
 8011c54:	2201      	movs	r2, #1
 8011c56:	495e      	ldr	r1, [pc, #376]	; (8011dd0 <Sample_Function+0x1c8>)
 8011c58:	6878      	ldr	r0, [r7, #4]
 8011c5a:	f7f0 fb99 	bl	8002390 <SSD1306_Puts>
			break;
 8011c5e:	bf00      	nop
		}
		//SSD1306_Puts(str, &Font_7x10, 1);
		SSD1306_GotoXY(15, 25);
 8011c60:	2119      	movs	r1, #25
 8011c62:	200f      	movs	r0, #15
 8011c64:	f7f0 fafe 	bl	8002264 <SSD1306_GotoXY>
		SSD1306_Puts("Presionar 2", &Font_7x10, 1);
 8011c68:	2201      	movs	r2, #1
 8011c6a:	4959      	ldr	r1, [pc, #356]	; (8011dd0 <Sample_Function+0x1c8>)
 8011c6c:	485a      	ldr	r0, [pc, #360]	; (8011dd8 <Sample_Function+0x1d0>)
 8011c6e:	f7f0 fb8f 	bl	8002390 <SSD1306_Puts>
		SSD1306_GotoXY(15, 35);
 8011c72:	2123      	movs	r1, #35	; 0x23
 8011c74:	200f      	movs	r0, #15
 8011c76:	f7f0 faf5 	bl	8002264 <SSD1306_GotoXY>
		SSD1306_Puts("Para continuar", &Font_7x10, 1);
 8011c7a:	2201      	movs	r2, #1
 8011c7c:	4954      	ldr	r1, [pc, #336]	; (8011dd0 <Sample_Function+0x1c8>)
 8011c7e:	4857      	ldr	r0, [pc, #348]	; (8011ddc <Sample_Function+0x1d4>)
 8011c80:	f7f0 fb86 	bl	8002390 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8011c84:	f7f0 fa48 	bl	8002118 <SSD1306_UpdateScreen>
	while(HAL_GPIO_ReadPin(GPIOB, BUTT_1_Pin) == GPIO_PIN_SET)
 8011c88:	2102      	movs	r1, #2
 8011c8a:	4855      	ldr	r0, [pc, #340]	; (8011de0 <Sample_Function+0x1d8>)
 8011c8c:	f7f3 f852 	bl	8004d34 <HAL_GPIO_ReadPin>
 8011c90:	4603      	mov	r3, r0
 8011c92:	2b01      	cmp	r3, #1
 8011c94:	d0c5      	beq.n	8011c22 <Sample_Function+0x1a>
	}

	//PWM voltage to 1.5V
	TIM2->CCR1 = 34492;
 8011c96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011c9a:	f248 62bc 	movw	r2, #34492	; 0x86bc
 8011c9e:	635a      	str	r2, [r3, #52]	; 0x34

	//Start ADC and get ADC value
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8011ca0:	2100      	movs	r1, #0
 8011ca2:	4850      	ldr	r0, [pc, #320]	; (8011de4 <Sample_Function+0x1dc>)
 8011ca4:	f7f7 fe98 	bl	80099d8 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, adc_value, 2);
 8011ca8:	2202      	movs	r2, #2
 8011caa:	494f      	ldr	r1, [pc, #316]	; (8011de8 <Sample_Function+0x1e0>)
 8011cac:	484f      	ldr	r0, [pc, #316]	; (8011dec <Sample_Function+0x1e4>)
 8011cae:	f7f1 fba9 	bl	8003404 <HAL_ADC_Start_DMA>

	//Find ideal PWM value
	while (adc_value[0] > 2200 || adc_value[0] < 2100)
 8011cb2:	e03c      	b.n	8011d2e <Sample_Function+0x126>
	{
		HAL_ADC_Start_DMA(&hadc1, adc_value, 2);
 8011cb4:	2202      	movs	r2, #2
 8011cb6:	494c      	ldr	r1, [pc, #304]	; (8011de8 <Sample_Function+0x1e0>)
 8011cb8:	484c      	ldr	r0, [pc, #304]	; (8011dec <Sample_Function+0x1e4>)
 8011cba:	f7f1 fba3 	bl	8003404 <HAL_ADC_Start_DMA>
		if (adc_value[0] <= 2101)
 8011cbe:	4b4a      	ldr	r3, [pc, #296]	; (8011de8 <Sample_Function+0x1e0>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	f640 0235 	movw	r2, #2101	; 0x835
 8011cc6:	4293      	cmp	r3, r2
 8011cc8:	d814      	bhi.n	8011cf4 <Sample_Function+0xec>
		{
			//PWM++
			TIM2->CCR1 += 100;
 8011cca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011cd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011cd4:	3364      	adds	r3, #100	; 0x64
 8011cd6:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8011cd8:	2100      	movs	r1, #0
 8011cda:	4842      	ldr	r0, [pc, #264]	; (8011de4 <Sample_Function+0x1dc>)
 8011cdc:	f7f7 fe7c 	bl	80099d8 <HAL_TIM_PWM_Start>
			if(TIM2->CCR1 > 65565)
 8011ce0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ce6:	4a42      	ldr	r2, [pc, #264]	; (8011df0 <Sample_Function+0x1e8>)
 8011ce8:	4293      	cmp	r3, r2
 8011cea:	d91c      	bls.n	8011d26 <Sample_Function+0x11e>
			{
				done_1 = 1;
 8011cec:	4b41      	ldr	r3, [pc, #260]	; (8011df4 <Sample_Function+0x1ec>)
 8011cee:	2201      	movs	r2, #1
 8011cf0:	701a      	strb	r2, [r3, #0]
 8011cf2:	e018      	b.n	8011d26 <Sample_Function+0x11e>
			}
		}
		else if(adc_value[0] >= 2199)
 8011cf4:	4b3c      	ldr	r3, [pc, #240]	; (8011de8 <Sample_Function+0x1e0>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	f640 0296 	movw	r2, #2198	; 0x896
 8011cfc:	4293      	cmp	r3, r2
 8011cfe:	d912      	bls.n	8011d26 <Sample_Function+0x11e>
		{
			//PWM--
			TIM2->CCR1 -= 100;
 8011d00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011d0a:	3b64      	subs	r3, #100	; 0x64
 8011d0c:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8011d0e:	2100      	movs	r1, #0
 8011d10:	4834      	ldr	r0, [pc, #208]	; (8011de4 <Sample_Function+0x1dc>)
 8011d12:	f7f7 fe61 	bl	80099d8 <HAL_TIM_PWM_Start>
			if(TIM2->CCR1 < 200)
 8011d16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d1c:	2bc7      	cmp	r3, #199	; 0xc7
 8011d1e:	d802      	bhi.n	8011d26 <Sample_Function+0x11e>
			{
				done_1 = 1;
 8011d20:	4b34      	ldr	r3, [pc, #208]	; (8011df4 <Sample_Function+0x1ec>)
 8011d22:	2201      	movs	r2, #1
 8011d24:	701a      	strb	r2, [r3, #0]
			}
		}

		if(done_1 == 1)
 8011d26:	4b33      	ldr	r3, [pc, #204]	; (8011df4 <Sample_Function+0x1ec>)
 8011d28:	781b      	ldrb	r3, [r3, #0]
 8011d2a:	2b01      	cmp	r3, #1
 8011d2c:	d00c      	beq.n	8011d48 <Sample_Function+0x140>
	while (adc_value[0] > 2200 || adc_value[0] < 2100)
 8011d2e:	4b2e      	ldr	r3, [pc, #184]	; (8011de8 <Sample_Function+0x1e0>)
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	f640 0298 	movw	r2, #2200	; 0x898
 8011d36:	4293      	cmp	r3, r2
 8011d38:	d8bc      	bhi.n	8011cb4 <Sample_Function+0xac>
 8011d3a:	4b2b      	ldr	r3, [pc, #172]	; (8011de8 <Sample_Function+0x1e0>)
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	f640 0233 	movw	r2, #2099	; 0x833
 8011d42:	4293      	cmp	r3, r2
 8011d44:	d9b6      	bls.n	8011cb4 <Sample_Function+0xac>
 8011d46:	e000      	b.n	8011d4a <Sample_Function+0x142>
		{
			break;
 8011d48:	bf00      	nop
		}
	}

	//Voltage calculation
	val_lineal = 2.99*adc_value[0]/4095;
 8011d4a:	4b27      	ldr	r3, [pc, #156]	; (8011de8 <Sample_Function+0x1e0>)
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f7ee fbb0 	bl	80004b4 <__aeabi_ui2d>
 8011d54:	a31a      	add	r3, pc, #104	; (adr r3, 8011dc0 <Sample_Function+0x1b8>)
 8011d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d5a:	f7ee fc25 	bl	80005a8 <__aeabi_dmul>
 8011d5e:	4602      	mov	r2, r0
 8011d60:	460b      	mov	r3, r1
 8011d62:	4610      	mov	r0, r2
 8011d64:	4619      	mov	r1, r3
 8011d66:	a318      	add	r3, pc, #96	; (adr r3, 8011dc8 <Sample_Function+0x1c0>)
 8011d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d6c:	f7ee fd46 	bl	80007fc <__aeabi_ddiv>
 8011d70:	4602      	mov	r2, r0
 8011d72:	460b      	mov	r3, r1
 8011d74:	4610      	mov	r0, r2
 8011d76:	4619      	mov	r1, r3
 8011d78:	f7ee fed8 	bl	8000b2c <__aeabi_d2f>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	4a1e      	ldr	r2, [pc, #120]	; (8011df8 <Sample_Function+0x1f0>)
 8011d80:	6013      	str	r3, [r2, #0]

	//Turn off ADC and PWM
	HAL_ADC_Stop_DMA(&hadc1);
 8011d82:	481a      	ldr	r0, [pc, #104]	; (8011dec <Sample_Function+0x1e4>)
 8011d84:	f7f1 fbc2 	bl	800350c <HAL_ADC_Stop_DMA>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8011d88:	2100      	movs	r1, #0
 8011d8a:	4816      	ldr	r0, [pc, #88]	; (8011de4 <Sample_Function+0x1dc>)
 8011d8c:	f7f7 fefe 	bl	8009b8c <HAL_TIM_PWM_Stop>

	switch(sample_type)
 8011d90:	78fb      	ldrb	r3, [r7, #3]
 8011d92:	2b01      	cmp	r3, #1
 8011d94:	d001      	beq.n	8011d9a <Sample_Function+0x192>
 8011d96:	2b02      	cmp	r3, #2
		break;

	case 2:
		//Log formula
		//TODO: Agregar
		break;
 8011d98:	e00e      	b.n	8011db8 <Sample_Function+0x1b0>
		val_lineal = (A * val_lineal) - B; //TODO Corregir
 8011d9a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8011dfc <Sample_Function+0x1f4>
 8011d9e:	4b16      	ldr	r3, [pc, #88]	; (8011df8 <Sample_Function+0x1f0>)
 8011da0:	edd3 7a00 	vldr	s15, [r3]
 8011da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011da8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8011e00 <Sample_Function+0x1f8>
 8011dac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011db0:	4b11      	ldr	r3, [pc, #68]	; (8011df8 <Sample_Function+0x1f0>)
 8011db2:	edc3 7a00 	vstr	s15, [r3]
		break;
 8011db6:	bf00      	nop
	}

	return;
 8011db8:	bf00      	nop
}
 8011dba:	3708      	adds	r7, #8
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}
 8011dc0:	1eb851ec 	.word	0x1eb851ec
 8011dc4:	4007eb85 	.word	0x4007eb85
 8011dc8:	00000000 	.word	0x00000000
 8011dcc:	40affe00 	.word	0x40affe00
 8011dd0:	20000004 	.word	0x20000004
 8011dd4:	08016078 	.word	0x08016078
 8011dd8:	08016040 	.word	0x08016040
 8011ddc:	0801604c 	.word	0x0801604c
 8011de0:	48000400 	.word	0x48000400
 8011de4:	20000430 	.word	0x20000430
 8011de8:	20000a90 	.word	0x20000a90
 8011dec:	200002b8 	.word	0x200002b8
 8011df0:	0001001d 	.word	0x0001001d
 8011df4:	20000a8c 	.word	0x20000a8c
 8011df8:	20000aa4 	.word	0x20000aa4
 8011dfc:	404b0aec 	.word	0x404b0aec
 8011e00:	3f3b9404 	.word	0x3f3b9404

08011e04 <ADCCheck_Function>:

void ADCCheck_Function(void)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	af00      	add	r7, sp, #0
	//Start PWM, PHT & OPAMP
	TIM2->CCR1 = 65535;
 8011e08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011e0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e10:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8011e12:	2100      	movs	r1, #0
 8011e14:	4809      	ldr	r0, [pc, #36]	; (8011e3c <ADCCheck_Function+0x38>)
 8011e16:	f7f7 fddf 	bl	80099d8 <HAL_TIM_PWM_Start>
	HAL_Delay(100);
 8011e1a:	2064      	movs	r0, #100	; 0x64
 8011e1c:	f7ef faeb 	bl	80013f6 <HAL_Delay>
	HAL_ADC_Start_DMA(&hadc1, adc_value, 2);
 8011e20:	2202      	movs	r2, #2
 8011e22:	4907      	ldr	r1, [pc, #28]	; (8011e40 <ADCCheck_Function+0x3c>)
 8011e24:	4807      	ldr	r0, [pc, #28]	; (8011e44 <ADCCheck_Function+0x40>)
 8011e26:	f7f1 faed 	bl	8003404 <HAL_ADC_Start_DMA>

	//Turn off PWM and ADC
	HAL_ADC_Stop_DMA(&hadc1);
 8011e2a:	4806      	ldr	r0, [pc, #24]	; (8011e44 <ADCCheck_Function+0x40>)
 8011e2c:	f7f1 fb6e 	bl	800350c <HAL_ADC_Stop_DMA>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8011e30:	2100      	movs	r1, #0
 8011e32:	4802      	ldr	r0, [pc, #8]	; (8011e3c <ADCCheck_Function+0x38>)
 8011e34:	f7f7 feaa 	bl	8009b8c <HAL_TIM_PWM_Stop>
}
 8011e38:	bf00      	nop
 8011e3a:	bd80      	pop	{r7, pc}
 8011e3c:	20000430 	.word	0x20000430
 8011e40:	20000a90 	.word	0x20000a90
 8011e44:	200002b8 	.word	0x200002b8

08011e48 <Battery_Percentage>:

void Battery_Percentage(void)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	af00      	add	r7, sp, #0
	//Obtain battery value by ADC
	HAL_ADC_Start_DMA(&hadc1, adc_value, 2);
 8011e4c:	2202      	movs	r2, #2
 8011e4e:	4932      	ldr	r1, [pc, #200]	; (8011f18 <Battery_Percentage+0xd0>)
 8011e50:	4832      	ldr	r0, [pc, #200]	; (8011f1c <Battery_Percentage+0xd4>)
 8011e52:	f7f1 fad7 	bl	8003404 <HAL_ADC_Start_DMA>
	HAL_Delay(100);
 8011e56:	2064      	movs	r0, #100	; 0x64
 8011e58:	f7ef facd 	bl	80013f6 <HAL_Delay>

	//Voltage calculation
	batt_percentage = 2.99*adc_value[1]/4095;
 8011e5c:	4b2e      	ldr	r3, [pc, #184]	; (8011f18 <Battery_Percentage+0xd0>)
 8011e5e:	685b      	ldr	r3, [r3, #4]
 8011e60:	4618      	mov	r0, r3
 8011e62:	f7ee fb27 	bl	80004b4 <__aeabi_ui2d>
 8011e66:	a326      	add	r3, pc, #152	; (adr r3, 8011f00 <Battery_Percentage+0xb8>)
 8011e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e6c:	f7ee fb9c 	bl	80005a8 <__aeabi_dmul>
 8011e70:	4602      	mov	r2, r0
 8011e72:	460b      	mov	r3, r1
 8011e74:	4610      	mov	r0, r2
 8011e76:	4619      	mov	r1, r3
 8011e78:	a323      	add	r3, pc, #140	; (adr r3, 8011f08 <Battery_Percentage+0xc0>)
 8011e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e7e:	f7ee fcbd 	bl	80007fc <__aeabi_ddiv>
 8011e82:	4602      	mov	r2, r0
 8011e84:	460b      	mov	r3, r1
 8011e86:	4610      	mov	r0, r2
 8011e88:	4619      	mov	r1, r3
 8011e8a:	f7ee fe4f 	bl	8000b2c <__aeabi_d2f>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	4a23      	ldr	r2, [pc, #140]	; (8011f20 <Battery_Percentage+0xd8>)
 8011e92:	6013      	str	r3, [r2, #0]

	//Show value on screen
	if(batt_percentage <= 1.64)
 8011e94:	4b22      	ldr	r3, [pc, #136]	; (8011f20 <Battery_Percentage+0xd8>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7ee fb2d 	bl	80004f8 <__aeabi_f2d>
 8011e9e:	a31c      	add	r3, pc, #112	; (adr r3, 8011f10 <Battery_Percentage+0xc8>)
 8011ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ea4:	f7ee fdfc 	bl	8000aa0 <__aeabi_dcmple>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d100      	bne.n	8011eb0 <Battery_Percentage+0x68>
		SSD1306_UpdateScreen();
		battery_completed = 1;
		HAL_Delay(2000);
	}

	return;
 8011eae:	e025      	b.n	8011efc <Battery_Percentage+0xb4>
		SSD1306_Clear();
 8011eb0:	f7f0 fa93 	bl	80023da <SSD1306_Clear>
		HAL_GPIO_WritePin(GPIOA, RGB_RED_Pin, GPIO_PIN_SET);
 8011eb4:	2201      	movs	r2, #1
 8011eb6:	2104      	movs	r1, #4
 8011eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011ebc:	f7f2 ff52 	bl	8004d64 <HAL_GPIO_WritePin>
		SSD1306_Clear();
 8011ec0:	f7f0 fa8b 	bl	80023da <SSD1306_Clear>
		SSD1306_GotoXY(15, 15);
 8011ec4:	210f      	movs	r1, #15
 8011ec6:	200f      	movs	r0, #15
 8011ec8:	f7f0 f9cc 	bl	8002264 <SSD1306_GotoXY>
		SSD1306_Puts("Bateria baja", &Font_7x10, 1);
 8011ecc:	2201      	movs	r2, #1
 8011ece:	4915      	ldr	r1, [pc, #84]	; (8011f24 <Battery_Percentage+0xdc>)
 8011ed0:	4815      	ldr	r0, [pc, #84]	; (8011f28 <Battery_Percentage+0xe0>)
 8011ed2:	f7f0 fa5d 	bl	8002390 <SSD1306_Puts>
		SSD1306_GotoXY(15, 45);
 8011ed6:	212d      	movs	r1, #45	; 0x2d
 8011ed8:	200f      	movs	r0, #15
 8011eda:	f7f0 f9c3 	bl	8002264 <SSD1306_GotoXY>
		SSD1306_Puts("Conectar cargador", &Font_7x10, 1);
 8011ede:	2201      	movs	r2, #1
 8011ee0:	4910      	ldr	r1, [pc, #64]	; (8011f24 <Battery_Percentage+0xdc>)
 8011ee2:	4812      	ldr	r0, [pc, #72]	; (8011f2c <Battery_Percentage+0xe4>)
 8011ee4:	f7f0 fa54 	bl	8002390 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8011ee8:	f7f0 f916 	bl	8002118 <SSD1306_UpdateScreen>
		battery_completed = 1;
 8011eec:	4b10      	ldr	r3, [pc, #64]	; (8011f30 <Battery_Percentage+0xe8>)
 8011eee:	2201      	movs	r2, #1
 8011ef0:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2000);
 8011ef2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8011ef6:	f7ef fa7e 	bl	80013f6 <HAL_Delay>
	return;
 8011efa:	bf00      	nop
}
 8011efc:	bd80      	pop	{r7, pc}
 8011efe:	bf00      	nop
 8011f00:	1eb851ec 	.word	0x1eb851ec
 8011f04:	4007eb85 	.word	0x4007eb85
 8011f08:	00000000 	.word	0x00000000
 8011f0c:	40affe00 	.word	0x40affe00
 8011f10:	a3d70a3d 	.word	0xa3d70a3d
 8011f14:	3ffa3d70 	.word	0x3ffa3d70
 8011f18:	20000a90 	.word	0x20000a90
 8011f1c:	200002b8 	.word	0x200002b8
 8011f20:	20000aa0 	.word	0x20000aa0
 8011f24:	20000004 	.word	0x20000004
 8011f28:	08016088 	.word	0x08016088
 8011f2c:	08016098 	.word	0x08016098
 8011f30:	2000047c 	.word	0x2000047c

08011f34 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8011f34:	b480      	push	{r7}
 8011f36:	b08b      	sub	sp, #44	; 0x2c
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	3301      	adds	r3, #1
 8011f46:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 8011f48:	6a3b      	ldr	r3, [r7, #32]
 8011f4a:	781b      	ldrb	r3, [r3, #0]
 8011f4c:	2bff      	cmp	r3, #255	; 0xff
 8011f4e:	d11b      	bne.n	8011f88 <Custom_STM_Event_Handler+0x54>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8011f50:	6a3b      	ldr	r3, [r7, #32]
 8011f52:	3302      	adds	r3, #2
 8011f54:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 8011f56:	69fb      	ldr	r3, [r7, #28]
 8011f58:	881b      	ldrh	r3, [r3, #0]
 8011f5a:	b29b      	uxth	r3, r3
 8011f5c:	f640 4214 	movw	r2, #3092	; 0xc14
 8011f60:	4293      	cmp	r3, r2
 8011f62:	d00b      	beq.n	8011f7c <Custom_STM_Event_Handler+0x48>
 8011f64:	f640 4214 	movw	r2, #3092	; 0xc14
 8011f68:	4293      	cmp	r3, r2
 8011f6a:	dc09      	bgt.n	8011f80 <Custom_STM_Event_Handler+0x4c>
 8011f6c:	f640 4201 	movw	r2, #3073	; 0xc01
 8011f70:	4293      	cmp	r3, r2
 8011f72:	d007      	beq.n	8011f84 <Custom_STM_Event_Handler+0x50>
 8011f74:	f640 4213 	movw	r2, #3091	; 0xc13
 8011f78:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8011f7a:	e004      	b.n	8011f86 <Custom_STM_Event_Handler+0x52>
          break;
 8011f7c:	bf00      	nop
 8011f7e:	e004      	b.n	8011f8a <Custom_STM_Event_Handler+0x56>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8011f80:	bf00      	nop
 8011f82:	e002      	b.n	8011f8a <Custom_STM_Event_Handler+0x56>
          break;
 8011f84:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8011f86:	e000      	b.n	8011f8a <Custom_STM_Event_Handler+0x56>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8011f88:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8011f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 8011f8e:	4618      	mov	r0, r3
 8011f90:	372c      	adds	r7, #44	; 0x2c
 8011f92:	46bd      	mov	sp, r7
 8011f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f98:	4770      	bx	lr
	...

08011f9c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b08c      	sub	sp, #48	; 0x30
 8011fa0:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8011fa2:	2392      	movs	r3, #146	; 0x92
 8011fa4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8011fa6:	4886      	ldr	r0, [pc, #536]	; (80121c0 <SVCCTL_InitCustomSvc+0x224>)
 8011fa8:	f7fe f89c 	bl	80100e4 <SVCCTL_RegisterSvcHandler>
   *                                2 for TEMP_HUM +
   *                                2 for DATE +
   *                              = 9
   */

  COPY_SNAP_SVC_UUID(uuid.Char_UUID_128);
 8011fac:	238f      	movs	r3, #143	; 0x8f
 8011fae:	713b      	strb	r3, [r7, #4]
 8011fb0:	23e5      	movs	r3, #229	; 0xe5
 8011fb2:	717b      	strb	r3, [r7, #5]
 8011fb4:	23b3      	movs	r3, #179	; 0xb3
 8011fb6:	71bb      	strb	r3, [r7, #6]
 8011fb8:	23d5      	movs	r3, #213	; 0xd5
 8011fba:	71fb      	strb	r3, [r7, #7]
 8011fbc:	232e      	movs	r3, #46	; 0x2e
 8011fbe:	723b      	strb	r3, [r7, #8]
 8011fc0:	237f      	movs	r3, #127	; 0x7f
 8011fc2:	727b      	strb	r3, [r7, #9]
 8011fc4:	234a      	movs	r3, #74	; 0x4a
 8011fc6:	72bb      	strb	r3, [r7, #10]
 8011fc8:	2398      	movs	r3, #152	; 0x98
 8011fca:	72fb      	strb	r3, [r7, #11]
 8011fcc:	232a      	movs	r3, #42	; 0x2a
 8011fce:	733b      	strb	r3, [r7, #12]
 8011fd0:	2348      	movs	r3, #72	; 0x48
 8011fd2:	737b      	strb	r3, [r7, #13]
 8011fd4:	237a      	movs	r3, #122	; 0x7a
 8011fd6:	73bb      	strb	r3, [r7, #14]
 8011fd8:	23cc      	movs	r3, #204	; 0xcc
 8011fda:	73fb      	strb	r3, [r7, #15]
 8011fdc:	2340      	movs	r3, #64	; 0x40
 8011fde:	743b      	strb	r3, [r7, #16]
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	747b      	strb	r3, [r7, #17]
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	74bb      	strb	r3, [r7, #18]
 8011fe8:	2300      	movs	r3, #0
 8011fea:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8011fec:	1d39      	adds	r1, r7, #4
 8011fee:	4b75      	ldr	r3, [pc, #468]	; (80121c4 <SVCCTL_InitCustomSvc+0x228>)
 8011ff0:	9300      	str	r3, [sp, #0]
 8011ff2:	2309      	movs	r3, #9
 8011ff4:	2201      	movs	r2, #1
 8011ff6:	2002      	movs	r0, #2
 8011ff8:	f7fd fb3c 	bl	800f674 <aci_gatt_add_service>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  ABSORBANCE
   */
  COPY_ABSORBANCE_UUID(uuid.Char_UUID_128);
 8012000:	2319      	movs	r3, #25
 8012002:	713b      	strb	r3, [r7, #4]
 8012004:	23ed      	movs	r3, #237	; 0xed
 8012006:	717b      	strb	r3, [r7, #5]
 8012008:	2382      	movs	r3, #130	; 0x82
 801200a:	71bb      	strb	r3, [r7, #6]
 801200c:	23ae      	movs	r3, #174	; 0xae
 801200e:	71fb      	strb	r3, [r7, #7]
 8012010:	23ed      	movs	r3, #237	; 0xed
 8012012:	723b      	strb	r3, [r7, #8]
 8012014:	2321      	movs	r3, #33	; 0x21
 8012016:	727b      	strb	r3, [r7, #9]
 8012018:	234c      	movs	r3, #76	; 0x4c
 801201a:	72bb      	strb	r3, [r7, #10]
 801201c:	239d      	movs	r3, #157	; 0x9d
 801201e:	72fb      	strb	r3, [r7, #11]
 8012020:	2341      	movs	r3, #65	; 0x41
 8012022:	733b      	strb	r3, [r7, #12]
 8012024:	2345      	movs	r3, #69	; 0x45
 8012026:	737b      	strb	r3, [r7, #13]
 8012028:	2322      	movs	r3, #34	; 0x22
 801202a:	73bb      	strb	r3, [r7, #14]
 801202c:	238e      	movs	r3, #142	; 0x8e
 801202e:	73fb      	strb	r3, [r7, #15]
 8012030:	2341      	movs	r3, #65	; 0x41
 8012032:	743b      	strb	r3, [r7, #16]
 8012034:	2300      	movs	r3, #0
 8012036:	747b      	strb	r3, [r7, #17]
 8012038:	2300      	movs	r3, #0
 801203a:	74bb      	strb	r3, [r7, #18]
 801203c:	2300      	movs	r3, #0
 801203e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomSnapHdle,
 8012040:	4b60      	ldr	r3, [pc, #384]	; (80121c4 <SVCCTL_InitCustomSvc+0x228>)
 8012042:	8818      	ldrh	r0, [r3, #0]
 8012044:	4b60      	ldr	r3, [pc, #384]	; (80121c8 <SVCCTL_InitCustomSvc+0x22c>)
 8012046:	781b      	ldrb	r3, [r3, #0]
 8012048:	b29b      	uxth	r3, r3
 801204a:	1d3a      	adds	r2, r7, #4
 801204c:	495f      	ldr	r1, [pc, #380]	; (80121cc <SVCCTL_InitCustomSvc+0x230>)
 801204e:	9105      	str	r1, [sp, #20]
 8012050:	2100      	movs	r1, #0
 8012052:	9104      	str	r1, [sp, #16]
 8012054:	2110      	movs	r1, #16
 8012056:	9103      	str	r1, [sp, #12]
 8012058:	2100      	movs	r1, #0
 801205a:	9102      	str	r1, [sp, #8]
 801205c:	2102      	movs	r1, #2
 801205e:	9101      	str	r1, [sp, #4]
 8012060:	2102      	movs	r1, #2
 8012062:	9100      	str	r1, [sp, #0]
 8012064:	2102      	movs	r1, #2
 8012066:	f7fd fbdb 	bl	800f820 <aci_gatt_add_char>
 801206a:	4603      	mov	r3, r0
 801206c:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ABS \n\r");
  }
  /**
   *  REF_VOLTAGE
   */
  COPY_REF_VOLTAGE_UUID(uuid.Char_UUID_128);
 801206e:	2319      	movs	r3, #25
 8012070:	713b      	strb	r3, [r7, #4]
 8012072:	23ed      	movs	r3, #237	; 0xed
 8012074:	717b      	strb	r3, [r7, #5]
 8012076:	2382      	movs	r3, #130	; 0x82
 8012078:	71bb      	strb	r3, [r7, #6]
 801207a:	23ae      	movs	r3, #174	; 0xae
 801207c:	71fb      	strb	r3, [r7, #7]
 801207e:	23ed      	movs	r3, #237	; 0xed
 8012080:	723b      	strb	r3, [r7, #8]
 8012082:	2321      	movs	r3, #33	; 0x21
 8012084:	727b      	strb	r3, [r7, #9]
 8012086:	234c      	movs	r3, #76	; 0x4c
 8012088:	72bb      	strb	r3, [r7, #10]
 801208a:	239d      	movs	r3, #157	; 0x9d
 801208c:	72fb      	strb	r3, [r7, #11]
 801208e:	2341      	movs	r3, #65	; 0x41
 8012090:	733b      	strb	r3, [r7, #12]
 8012092:	2345      	movs	r3, #69	; 0x45
 8012094:	737b      	strb	r3, [r7, #13]
 8012096:	2322      	movs	r3, #34	; 0x22
 8012098:	73bb      	strb	r3, [r7, #14]
 801209a:	238e      	movs	r3, #142	; 0x8e
 801209c:	73fb      	strb	r3, [r7, #15]
 801209e:	2342      	movs	r3, #66	; 0x42
 80120a0:	743b      	strb	r3, [r7, #16]
 80120a2:	2300      	movs	r3, #0
 80120a4:	747b      	strb	r3, [r7, #17]
 80120a6:	2300      	movs	r3, #0
 80120a8:	74bb      	strb	r3, [r7, #18]
 80120aa:	2300      	movs	r3, #0
 80120ac:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomSnapHdle,
 80120ae:	4b45      	ldr	r3, [pc, #276]	; (80121c4 <SVCCTL_InitCustomSvc+0x228>)
 80120b0:	8818      	ldrh	r0, [r3, #0]
 80120b2:	4b47      	ldr	r3, [pc, #284]	; (80121d0 <SVCCTL_InitCustomSvc+0x234>)
 80120b4:	781b      	ldrb	r3, [r3, #0]
 80120b6:	b29b      	uxth	r3, r3
 80120b8:	1d3a      	adds	r2, r7, #4
 80120ba:	4946      	ldr	r1, [pc, #280]	; (80121d4 <SVCCTL_InitCustomSvc+0x238>)
 80120bc:	9105      	str	r1, [sp, #20]
 80120be:	2100      	movs	r1, #0
 80120c0:	9104      	str	r1, [sp, #16]
 80120c2:	2110      	movs	r1, #16
 80120c4:	9103      	str	r1, [sp, #12]
 80120c6:	2100      	movs	r1, #0
 80120c8:	9102      	str	r1, [sp, #8]
 80120ca:	2102      	movs	r1, #2
 80120cc:	9101      	str	r1, [sp, #4]
 80120ce:	2102      	movs	r1, #2
 80120d0:	9100      	str	r1, [sp, #0]
 80120d2:	2102      	movs	r1, #2
 80120d4:	f7fd fba4 	bl	800f820 <aci_gatt_add_char>
 80120d8:	4603      	mov	r3, r0
 80120da:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : REF_VOL \n\r");
  }
  /**
   *  TEMP_HUM
   */
  COPY_TEMP_HUM_UUID(uuid.Char_UUID_128);
 80120dc:	2319      	movs	r3, #25
 80120de:	713b      	strb	r3, [r7, #4]
 80120e0:	23ed      	movs	r3, #237	; 0xed
 80120e2:	717b      	strb	r3, [r7, #5]
 80120e4:	2382      	movs	r3, #130	; 0x82
 80120e6:	71bb      	strb	r3, [r7, #6]
 80120e8:	23ae      	movs	r3, #174	; 0xae
 80120ea:	71fb      	strb	r3, [r7, #7]
 80120ec:	23ed      	movs	r3, #237	; 0xed
 80120ee:	723b      	strb	r3, [r7, #8]
 80120f0:	2321      	movs	r3, #33	; 0x21
 80120f2:	727b      	strb	r3, [r7, #9]
 80120f4:	234c      	movs	r3, #76	; 0x4c
 80120f6:	72bb      	strb	r3, [r7, #10]
 80120f8:	239d      	movs	r3, #157	; 0x9d
 80120fa:	72fb      	strb	r3, [r7, #11]
 80120fc:	2341      	movs	r3, #65	; 0x41
 80120fe:	733b      	strb	r3, [r7, #12]
 8012100:	2345      	movs	r3, #69	; 0x45
 8012102:	737b      	strb	r3, [r7, #13]
 8012104:	2322      	movs	r3, #34	; 0x22
 8012106:	73bb      	strb	r3, [r7, #14]
 8012108:	238e      	movs	r3, #142	; 0x8e
 801210a:	73fb      	strb	r3, [r7, #15]
 801210c:	2343      	movs	r3, #67	; 0x43
 801210e:	743b      	strb	r3, [r7, #16]
 8012110:	2300      	movs	r3, #0
 8012112:	747b      	strb	r3, [r7, #17]
 8012114:	2300      	movs	r3, #0
 8012116:	74bb      	strb	r3, [r7, #18]
 8012118:	2300      	movs	r3, #0
 801211a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomSnapHdle,
 801211c:	4b29      	ldr	r3, [pc, #164]	; (80121c4 <SVCCTL_InitCustomSvc+0x228>)
 801211e:	8818      	ldrh	r0, [r3, #0]
 8012120:	4b2d      	ldr	r3, [pc, #180]	; (80121d8 <SVCCTL_InitCustomSvc+0x23c>)
 8012122:	781b      	ldrb	r3, [r3, #0]
 8012124:	b29b      	uxth	r3, r3
 8012126:	1d3a      	adds	r2, r7, #4
 8012128:	492c      	ldr	r1, [pc, #176]	; (80121dc <SVCCTL_InitCustomSvc+0x240>)
 801212a:	9105      	str	r1, [sp, #20]
 801212c:	2100      	movs	r1, #0
 801212e:	9104      	str	r1, [sp, #16]
 8012130:	2110      	movs	r1, #16
 8012132:	9103      	str	r1, [sp, #12]
 8012134:	2100      	movs	r1, #0
 8012136:	9102      	str	r1, [sp, #8]
 8012138:	2102      	movs	r1, #2
 801213a:	9101      	str	r1, [sp, #4]
 801213c:	2102      	movs	r1, #2
 801213e:	9100      	str	r1, [sp, #0]
 8012140:	2102      	movs	r1, #2
 8012142:	f7fd fb6d 	bl	800f820 <aci_gatt_add_char>
 8012146:	4603      	mov	r3, r0
 8012148:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : TEMP_HUM \n\r");
  }
  /**
   *  DATE
   */
  COPY_DATE_UUID(uuid.Char_UUID_128);
 801214a:	2319      	movs	r3, #25
 801214c:	713b      	strb	r3, [r7, #4]
 801214e:	23ed      	movs	r3, #237	; 0xed
 8012150:	717b      	strb	r3, [r7, #5]
 8012152:	2382      	movs	r3, #130	; 0x82
 8012154:	71bb      	strb	r3, [r7, #6]
 8012156:	23ae      	movs	r3, #174	; 0xae
 8012158:	71fb      	strb	r3, [r7, #7]
 801215a:	23ed      	movs	r3, #237	; 0xed
 801215c:	723b      	strb	r3, [r7, #8]
 801215e:	2321      	movs	r3, #33	; 0x21
 8012160:	727b      	strb	r3, [r7, #9]
 8012162:	234c      	movs	r3, #76	; 0x4c
 8012164:	72bb      	strb	r3, [r7, #10]
 8012166:	239d      	movs	r3, #157	; 0x9d
 8012168:	72fb      	strb	r3, [r7, #11]
 801216a:	2341      	movs	r3, #65	; 0x41
 801216c:	733b      	strb	r3, [r7, #12]
 801216e:	2345      	movs	r3, #69	; 0x45
 8012170:	737b      	strb	r3, [r7, #13]
 8012172:	2322      	movs	r3, #34	; 0x22
 8012174:	73bb      	strb	r3, [r7, #14]
 8012176:	238e      	movs	r3, #142	; 0x8e
 8012178:	73fb      	strb	r3, [r7, #15]
 801217a:	2344      	movs	r3, #68	; 0x44
 801217c:	743b      	strb	r3, [r7, #16]
 801217e:	23fe      	movs	r3, #254	; 0xfe
 8012180:	747b      	strb	r3, [r7, #17]
 8012182:	2300      	movs	r3, #0
 8012184:	74bb      	strb	r3, [r7, #18]
 8012186:	2300      	movs	r3, #0
 8012188:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomSnapHdle,
 801218a:	4b0e      	ldr	r3, [pc, #56]	; (80121c4 <SVCCTL_InitCustomSvc+0x228>)
 801218c:	8818      	ldrh	r0, [r3, #0]
 801218e:	4b14      	ldr	r3, [pc, #80]	; (80121e0 <SVCCTL_InitCustomSvc+0x244>)
 8012190:	781b      	ldrb	r3, [r3, #0]
 8012192:	b29b      	uxth	r3, r3
 8012194:	1d3a      	adds	r2, r7, #4
 8012196:	4913      	ldr	r1, [pc, #76]	; (80121e4 <SVCCTL_InitCustomSvc+0x248>)
 8012198:	9105      	str	r1, [sp, #20]
 801219a:	2100      	movs	r1, #0
 801219c:	9104      	str	r1, [sp, #16]
 801219e:	2110      	movs	r1, #16
 80121a0:	9103      	str	r1, [sp, #12]
 80121a2:	2100      	movs	r1, #0
 80121a4:	9102      	str	r1, [sp, #8]
 80121a6:	2102      	movs	r1, #2
 80121a8:	9101      	str	r1, [sp, #4]
 80121aa:	2102      	movs	r1, #2
 80121ac:	9100      	str	r1, [sp, #0]
 80121ae:	2102      	movs	r1, #2
 80121b0:	f7fd fb36 	bl	800f820 <aci_gatt_add_char>
 80121b4:	4603      	mov	r3, r0
 80121b6:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 80121b8:	bf00      	nop
}
 80121ba:	3718      	adds	r7, #24
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}
 80121c0:	08011f35 	.word	0x08011f35
 80121c4:	20000ab4 	.word	0x20000ab4
 80121c8:	200000d8 	.word	0x200000d8
 80121cc:	20000ab6 	.word	0x20000ab6
 80121d0:	200000d9 	.word	0x200000d9
 80121d4:	20000ab8 	.word	0x20000ab8
 80121d8:	200000da 	.word	0x200000da
 80121dc:	20000aba 	.word	0x20000aba
 80121e0:	200000db 	.word	0x200000db
 80121e4:	20000abc 	.word	0x20000abc

080121e8 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b086      	sub	sp, #24
 80121ec:	af02      	add	r7, sp, #8
 80121ee:	4603      	mov	r3, r0
 80121f0:	6039      	str	r1, [r7, #0]
 80121f2:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80121f4:	2392      	movs	r3, #146	; 0x92
 80121f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 80121f8:	79fb      	ldrb	r3, [r7, #7]
 80121fa:	2b03      	cmp	r3, #3
 80121fc:	d846      	bhi.n	801228c <Custom_STM_App_Update_Char+0xa4>
 80121fe:	a201      	add	r2, pc, #4	; (adr r2, 8012204 <Custom_STM_App_Update_Char+0x1c>)
 8012200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012204:	08012215 	.word	0x08012215
 8012208:	08012233 	.word	0x08012233
 801220c:	08012251 	.word	0x08012251
 8012210:	0801226f 	.word	0x0801226f
  {

    case CUSTOM_STM_ABS:
      ret = aci_gatt_update_char_value(CustomContext.CustomSnapHdle,
 8012214:	4b20      	ldr	r3, [pc, #128]	; (8012298 <Custom_STM_App_Update_Char+0xb0>)
 8012216:	8818      	ldrh	r0, [r3, #0]
 8012218:	4b1f      	ldr	r3, [pc, #124]	; (8012298 <Custom_STM_App_Update_Char+0xb0>)
 801221a:	8859      	ldrh	r1, [r3, #2]
 801221c:	4b1f      	ldr	r3, [pc, #124]	; (801229c <Custom_STM_App_Update_Char+0xb4>)
 801221e:	781a      	ldrb	r2, [r3, #0]
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	9300      	str	r3, [sp, #0]
 8012224:	4613      	mov	r3, r2
 8012226:	2200      	movs	r2, #0
 8012228:	f7fd fc02 	bl	800fa30 <aci_gatt_update_char_value>
 801222c:	4603      	mov	r3, r0
 801222e:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ABS command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 8012230:	e02d      	b.n	801228e <Custom_STM_App_Update_Char+0xa6>

    case CUSTOM_STM_REF_VOL:
      ret = aci_gatt_update_char_value(CustomContext.CustomSnapHdle,
 8012232:	4b19      	ldr	r3, [pc, #100]	; (8012298 <Custom_STM_App_Update_Char+0xb0>)
 8012234:	8818      	ldrh	r0, [r3, #0]
 8012236:	4b18      	ldr	r3, [pc, #96]	; (8012298 <Custom_STM_App_Update_Char+0xb0>)
 8012238:	8899      	ldrh	r1, [r3, #4]
 801223a:	4b19      	ldr	r3, [pc, #100]	; (80122a0 <Custom_STM_App_Update_Char+0xb8>)
 801223c:	781a      	ldrb	r2, [r3, #0]
 801223e:	683b      	ldr	r3, [r7, #0]
 8012240:	9300      	str	r3, [sp, #0]
 8012242:	4613      	mov	r3, r2
 8012244:	2200      	movs	r2, #0
 8012246:	f7fd fbf3 	bl	800fa30 <aci_gatt_update_char_value>
 801224a:	4603      	mov	r3, r0
 801224c:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value REF_VOL command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;
 801224e:	e01e      	b.n	801228e <Custom_STM_App_Update_Char+0xa6>

    case CUSTOM_STM_TEMP_HUM:
      ret = aci_gatt_update_char_value(CustomContext.CustomSnapHdle,
 8012250:	4b11      	ldr	r3, [pc, #68]	; (8012298 <Custom_STM_App_Update_Char+0xb0>)
 8012252:	8818      	ldrh	r0, [r3, #0]
 8012254:	4b10      	ldr	r3, [pc, #64]	; (8012298 <Custom_STM_App_Update_Char+0xb0>)
 8012256:	88d9      	ldrh	r1, [r3, #6]
 8012258:	4b12      	ldr	r3, [pc, #72]	; (80122a4 <Custom_STM_App_Update_Char+0xbc>)
 801225a:	781a      	ldrb	r2, [r3, #0]
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	9300      	str	r3, [sp, #0]
 8012260:	4613      	mov	r3, r2
 8012262:	2200      	movs	r2, #0
 8012264:	f7fd fbe4 	bl	800fa30 <aci_gatt_update_char_value>
 8012268:	4603      	mov	r3, r0
 801226a:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value TEMP_HUM command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_3*/
      break;
 801226c:	e00f      	b.n	801228e <Custom_STM_App_Update_Char+0xa6>

    case CUSTOM_STM_DATE:
      ret = aci_gatt_update_char_value(CustomContext.CustomSnapHdle,
 801226e:	4b0a      	ldr	r3, [pc, #40]	; (8012298 <Custom_STM_App_Update_Char+0xb0>)
 8012270:	8818      	ldrh	r0, [r3, #0]
 8012272:	4b09      	ldr	r3, [pc, #36]	; (8012298 <Custom_STM_App_Update_Char+0xb0>)
 8012274:	8919      	ldrh	r1, [r3, #8]
 8012276:	4b0c      	ldr	r3, [pc, #48]	; (80122a8 <Custom_STM_App_Update_Char+0xc0>)
 8012278:	781a      	ldrb	r2, [r3, #0]
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	9300      	str	r3, [sp, #0]
 801227e:	4613      	mov	r3, r2
 8012280:	2200      	movs	r2, #0
 8012282:	f7fd fbd5 	bl	800fa30 <aci_gatt_update_char_value>
 8012286:	4603      	mov	r3, r0
 8012288:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value DATE command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_4*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_4*/
      break;
 801228a:	e000      	b.n	801228e <Custom_STM_App_Update_Char+0xa6>

    default:
      break;
 801228c:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 801228e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012290:	4618      	mov	r0, r3
 8012292:	3710      	adds	r7, #16
 8012294:	46bd      	mov	sp, r7
 8012296:	bd80      	pop	{r7, pc}
 8012298:	20000ab4 	.word	0x20000ab4
 801229c:	200000d8 	.word	0x200000d8
 80122a0:	200000d9 	.word	0x200000d9
 80122a4:	200000da 	.word	0x200000da
 80122a8:	200000db 	.word	0x200000db

080122ac <LL_PWR_EnableBootC2>:
{
 80122ac:	b480      	push	{r7}
 80122ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80122b0:	4b05      	ldr	r3, [pc, #20]	; (80122c8 <LL_PWR_EnableBootC2+0x1c>)
 80122b2:	68db      	ldr	r3, [r3, #12]
 80122b4:	4a04      	ldr	r2, [pc, #16]	; (80122c8 <LL_PWR_EnableBootC2+0x1c>)
 80122b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80122ba:	60d3      	str	r3, [r2, #12]
}
 80122bc:	bf00      	nop
 80122be:	46bd      	mov	sp, r7
 80122c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c4:	4770      	bx	lr
 80122c6:	bf00      	nop
 80122c8:	58000400 	.word	0x58000400

080122cc <LL_C2_EXTI_EnableEvent_32_63>:
{
 80122cc:	b480      	push	{r7}
 80122ce:	b083      	sub	sp, #12
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80122d4:	4b06      	ldr	r3, [pc, #24]	; (80122f0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80122d6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80122da:	4905      	ldr	r1, [pc, #20]	; (80122f0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	4313      	orrs	r3, r2
 80122e0:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80122e4:	bf00      	nop
 80122e6:	370c      	adds	r7, #12
 80122e8:	46bd      	mov	sp, r7
 80122ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ee:	4770      	bx	lr
 80122f0:	58000800 	.word	0x58000800

080122f4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80122f4:	b480      	push	{r7}
 80122f6:	b083      	sub	sp, #12
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80122fc:	4b05      	ldr	r3, [pc, #20]	; (8012314 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80122fe:	6a1a      	ldr	r2, [r3, #32]
 8012300:	4904      	ldr	r1, [pc, #16]	; (8012314 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	4313      	orrs	r3, r2
 8012306:	620b      	str	r3, [r1, #32]
}
 8012308:	bf00      	nop
 801230a:	370c      	adds	r7, #12
 801230c:	46bd      	mov	sp, r7
 801230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012312:	4770      	bx	lr
 8012314:	58000800 	.word	0x58000800

08012318 <LL_AHB3_GRP1_EnableClock>:
{
 8012318:	b480      	push	{r7}
 801231a:	b085      	sub	sp, #20
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8012320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012324:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012326:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	4313      	orrs	r3, r2
 801232e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8012330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012334:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	4013      	ands	r3, r2
 801233a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801233c:	68fb      	ldr	r3, [r7, #12]
}
 801233e:	bf00      	nop
 8012340:	3714      	adds	r7, #20
 8012342:	46bd      	mov	sp, r7
 8012344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012348:	4770      	bx	lr

0801234a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 801234a:	b480      	push	{r7}
 801234c:	b085      	sub	sp, #20
 801234e:	af00      	add	r7, sp, #0
 8012350:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8012352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012356:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 801235a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	4313      	orrs	r3, r2
 8012362:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8012366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801236a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	4013      	ands	r3, r2
 8012372:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012374:	68fb      	ldr	r3, [r7, #12]
}
 8012376:	bf00      	nop
 8012378:	3714      	adds	r7, #20
 801237a:	46bd      	mov	sp, r7
 801237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012380:	4770      	bx	lr

08012382 <LL_C1_IPCC_EnableIT_TXF>:
{
 8012382:	b480      	push	{r7}
 8012384:	b083      	sub	sp, #12
 8012386:	af00      	add	r7, sp, #0
 8012388:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	601a      	str	r2, [r3, #0]
}
 8012396:	bf00      	nop
 8012398:	370c      	adds	r7, #12
 801239a:	46bd      	mov	sp, r7
 801239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a0:	4770      	bx	lr

080123a2 <LL_C1_IPCC_EnableIT_RXO>:
{
 80123a2:	b480      	push	{r7}
 80123a4:	b083      	sub	sp, #12
 80123a6:	af00      	add	r7, sp, #0
 80123a8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	f043 0201 	orr.w	r2, r3, #1
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	601a      	str	r2, [r3, #0]
}
 80123b6:	bf00      	nop
 80123b8:	370c      	adds	r7, #12
 80123ba:	46bd      	mov	sp, r7
 80123bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c0:	4770      	bx	lr

080123c2 <LL_C1_IPCC_EnableTransmitChannel>:
{
 80123c2:	b480      	push	{r7}
 80123c4:	b083      	sub	sp, #12
 80123c6:	af00      	add	r7, sp, #0
 80123c8:	6078      	str	r0, [r7, #4]
 80123ca:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	685a      	ldr	r2, [r3, #4]
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	041b      	lsls	r3, r3, #16
 80123d4:	43db      	mvns	r3, r3
 80123d6:	401a      	ands	r2, r3
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	605a      	str	r2, [r3, #4]
}
 80123dc:	bf00      	nop
 80123de:	370c      	adds	r7, #12
 80123e0:	46bd      	mov	sp, r7
 80123e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e6:	4770      	bx	lr

080123e8 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80123e8:	b480      	push	{r7}
 80123ea:	b083      	sub	sp, #12
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
 80123f0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	685a      	ldr	r2, [r3, #4]
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	041b      	lsls	r3, r3, #16
 80123fa:	431a      	orrs	r2, r3
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	605a      	str	r2, [r3, #4]
}
 8012400:	bf00      	nop
 8012402:	370c      	adds	r7, #12
 8012404:	46bd      	mov	sp, r7
 8012406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240a:	4770      	bx	lr

0801240c <LL_C1_IPCC_EnableReceiveChannel>:
{
 801240c:	b480      	push	{r7}
 801240e:	b083      	sub	sp, #12
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
 8012414:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	685a      	ldr	r2, [r3, #4]
 801241a:	683b      	ldr	r3, [r7, #0]
 801241c:	43db      	mvns	r3, r3
 801241e:	401a      	ands	r2, r3
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	605a      	str	r2, [r3, #4]
}
 8012424:	bf00      	nop
 8012426:	370c      	adds	r7, #12
 8012428:	46bd      	mov	sp, r7
 801242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242e:	4770      	bx	lr

08012430 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8012430:	b480      	push	{r7}
 8012432:	b083      	sub	sp, #12
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
 8012438:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	683a      	ldr	r2, [r7, #0]
 801243e:	609a      	str	r2, [r3, #8]
}
 8012440:	bf00      	nop
 8012442:	370c      	adds	r7, #12
 8012444:	46bd      	mov	sp, r7
 8012446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244a:	4770      	bx	lr

0801244c <LL_C1_IPCC_SetFlag_CHx>:
{
 801244c:	b480      	push	{r7}
 801244e:	b083      	sub	sp, #12
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
 8012454:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	041a      	lsls	r2, r3, #16
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	609a      	str	r2, [r3, #8]
}
 801245e:	bf00      	nop
 8012460:	370c      	adds	r7, #12
 8012462:	46bd      	mov	sp, r7
 8012464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012468:	4770      	bx	lr

0801246a <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 801246a:	b480      	push	{r7}
 801246c:	b083      	sub	sp, #12
 801246e:	af00      	add	r7, sp, #0
 8012470:	6078      	str	r0, [r7, #4]
 8012472:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	68da      	ldr	r2, [r3, #12]
 8012478:	683b      	ldr	r3, [r7, #0]
 801247a:	4013      	ands	r3, r2
 801247c:	683a      	ldr	r2, [r7, #0]
 801247e:	429a      	cmp	r2, r3
 8012480:	d101      	bne.n	8012486 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8012482:	2301      	movs	r3, #1
 8012484:	e000      	b.n	8012488 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8012486:	2300      	movs	r3, #0
}
 8012488:	4618      	mov	r0, r3
 801248a:	370c      	adds	r7, #12
 801248c:	46bd      	mov	sp, r7
 801248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012492:	4770      	bx	lr

08012494 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8012494:	b480      	push	{r7}
 8012496:	b083      	sub	sp, #12
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
 801249c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	69da      	ldr	r2, [r3, #28]
 80124a2:	683b      	ldr	r3, [r7, #0]
 80124a4:	4013      	ands	r3, r2
 80124a6:	683a      	ldr	r2, [r7, #0]
 80124a8:	429a      	cmp	r2, r3
 80124aa:	d101      	bne.n	80124b0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80124ac:	2301      	movs	r3, #1
 80124ae:	e000      	b.n	80124b2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80124b0:	2300      	movs	r3, #0
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	370c      	adds	r7, #12
 80124b6:	46bd      	mov	sp, r7
 80124b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124bc:	4770      	bx	lr
	...

080124c0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80124c4:	2102      	movs	r1, #2
 80124c6:	4819      	ldr	r0, [pc, #100]	; (801252c <HW_IPCC_Rx_Handler+0x6c>)
 80124c8:	f7ff ffe4 	bl	8012494 <LL_C2_IPCC_IsActiveFlag_CHx>
 80124cc:	4603      	mov	r3, r0
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d009      	beq.n	80124e6 <HW_IPCC_Rx_Handler+0x26>
 80124d2:	4b16      	ldr	r3, [pc, #88]	; (801252c <HW_IPCC_Rx_Handler+0x6c>)
 80124d4:	685b      	ldr	r3, [r3, #4]
 80124d6:	43db      	mvns	r3, r3
 80124d8:	f003 0302 	and.w	r3, r3, #2
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d002      	beq.n	80124e6 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80124e0:	f000 f8da 	bl	8012698 <HW_IPCC_SYS_EvtHandler>
 80124e4:	e01f      	b.n	8012526 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80124e6:	2101      	movs	r1, #1
 80124e8:	4810      	ldr	r0, [pc, #64]	; (801252c <HW_IPCC_Rx_Handler+0x6c>)
 80124ea:	f7ff ffd3 	bl	8012494 <LL_C2_IPCC_IsActiveFlag_CHx>
 80124ee:	4603      	mov	r3, r0
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d008      	beq.n	8012506 <HW_IPCC_Rx_Handler+0x46>
 80124f4:	4b0d      	ldr	r3, [pc, #52]	; (801252c <HW_IPCC_Rx_Handler+0x6c>)
 80124f6:	685b      	ldr	r3, [r3, #4]
 80124f8:	f003 0301 	and.w	r3, r3, #1
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d102      	bne.n	8012506 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8012500:	f000 f88e 	bl	8012620 <HW_IPCC_BLE_EvtHandler>
 8012504:	e00f      	b.n	8012526 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8012506:	2108      	movs	r1, #8
 8012508:	4808      	ldr	r0, [pc, #32]	; (801252c <HW_IPCC_Rx_Handler+0x6c>)
 801250a:	f7ff ffc3 	bl	8012494 <LL_C2_IPCC_IsActiveFlag_CHx>
 801250e:	4603      	mov	r3, r0
 8012510:	2b00      	cmp	r3, #0
 8012512:	d009      	beq.n	8012528 <HW_IPCC_Rx_Handler+0x68>
 8012514:	4b05      	ldr	r3, [pc, #20]	; (801252c <HW_IPCC_Rx_Handler+0x6c>)
 8012516:	685b      	ldr	r3, [r3, #4]
 8012518:	43db      	mvns	r3, r3
 801251a:	f003 0308 	and.w	r3, r3, #8
 801251e:	2b00      	cmp	r3, #0
 8012520:	d002      	beq.n	8012528 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8012522:	f000 f905 	bl	8012730 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8012526:	bf00      	nop
 8012528:	bf00      	nop
}
 801252a:	bd80      	pop	{r7, pc}
 801252c:	58000c00 	.word	0x58000c00

08012530 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8012530:	b580      	push	{r7, lr}
 8012532:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8012534:	2102      	movs	r1, #2
 8012536:	481a      	ldr	r0, [pc, #104]	; (80125a0 <HW_IPCC_Tx_Handler+0x70>)
 8012538:	f7ff ff97 	bl	801246a <LL_C1_IPCC_IsActiveFlag_CHx>
 801253c:	4603      	mov	r3, r0
 801253e:	2b00      	cmp	r3, #0
 8012540:	d109      	bne.n	8012556 <HW_IPCC_Tx_Handler+0x26>
 8012542:	4b17      	ldr	r3, [pc, #92]	; (80125a0 <HW_IPCC_Tx_Handler+0x70>)
 8012544:	685b      	ldr	r3, [r3, #4]
 8012546:	43db      	mvns	r3, r3
 8012548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801254c:	2b00      	cmp	r3, #0
 801254e:	d002      	beq.n	8012556 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8012550:	f000 f896 	bl	8012680 <HW_IPCC_SYS_CmdEvtHandler>
 8012554:	e020      	b.n	8012598 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8012556:	2108      	movs	r1, #8
 8012558:	4811      	ldr	r0, [pc, #68]	; (80125a0 <HW_IPCC_Tx_Handler+0x70>)
 801255a:	f7ff ff86 	bl	801246a <LL_C1_IPCC_IsActiveFlag_CHx>
 801255e:	4603      	mov	r3, r0
 8012560:	2b00      	cmp	r3, #0
 8012562:	d109      	bne.n	8012578 <HW_IPCC_Tx_Handler+0x48>
 8012564:	4b0e      	ldr	r3, [pc, #56]	; (80125a0 <HW_IPCC_Tx_Handler+0x70>)
 8012566:	685b      	ldr	r3, [r3, #4]
 8012568:	43db      	mvns	r3, r3
 801256a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801256e:	2b00      	cmp	r3, #0
 8012570:	d002      	beq.n	8012578 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8012572:	f000 f8bf 	bl	80126f4 <HW_IPCC_MM_FreeBufHandler>
 8012576:	e00f      	b.n	8012598 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8012578:	2120      	movs	r1, #32
 801257a:	4809      	ldr	r0, [pc, #36]	; (80125a0 <HW_IPCC_Tx_Handler+0x70>)
 801257c:	f7ff ff75 	bl	801246a <LL_C1_IPCC_IsActiveFlag_CHx>
 8012580:	4603      	mov	r3, r0
 8012582:	2b00      	cmp	r3, #0
 8012584:	d109      	bne.n	801259a <HW_IPCC_Tx_Handler+0x6a>
 8012586:	4b06      	ldr	r3, [pc, #24]	; (80125a0 <HW_IPCC_Tx_Handler+0x70>)
 8012588:	685b      	ldr	r3, [r3, #4]
 801258a:	43db      	mvns	r3, r3
 801258c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012590:	2b00      	cmp	r3, #0
 8012592:	d002      	beq.n	801259a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8012594:	f000 f850 	bl	8012638 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8012598:	bf00      	nop
 801259a:	bf00      	nop
}
 801259c:	bd80      	pop	{r7, pc}
 801259e:	bf00      	nop
 80125a0:	58000c00 	.word	0x58000c00

080125a4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80125a8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80125ac:	f7ff fecd 	bl	801234a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80125b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80125b4:	f7ff fe9e 	bl	80122f4 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80125b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80125bc:	f7ff fe86 	bl	80122cc <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80125c0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80125c2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80125c4:	f7ff fe72 	bl	80122ac <LL_PWR_EnableBootC2>

  return;
 80125c8:	bf00      	nop
}
 80125ca:	bd80      	pop	{r7, pc}

080125cc <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80125d0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80125d4:	f7ff fea0 	bl	8012318 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80125d8:	4806      	ldr	r0, [pc, #24]	; (80125f4 <HW_IPCC_Init+0x28>)
 80125da:	f7ff fee2 	bl	80123a2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80125de:	4805      	ldr	r0, [pc, #20]	; (80125f4 <HW_IPCC_Init+0x28>)
 80125e0:	f7ff fecf 	bl	8012382 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80125e4:	202c      	movs	r0, #44	; 0x2c
 80125e6:	f7f1 ff32 	bl	800444e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80125ea:	202d      	movs	r0, #45	; 0x2d
 80125ec:	f7f1 ff2f 	bl	800444e <HAL_NVIC_EnableIRQ>

  return;
 80125f0:	bf00      	nop
}
 80125f2:	bd80      	pop	{r7, pc}
 80125f4:	58000c00 	.word	0x58000c00

080125f8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80125fc:	2101      	movs	r1, #1
 80125fe:	4802      	ldr	r0, [pc, #8]	; (8012608 <HW_IPCC_BLE_Init+0x10>)
 8012600:	f7ff ff04 	bl	801240c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012604:	bf00      	nop
}
 8012606:	bd80      	pop	{r7, pc}
 8012608:	58000c00 	.word	0x58000c00

0801260c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 801260c:	b580      	push	{r7, lr}
 801260e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8012610:	2101      	movs	r1, #1
 8012612:	4802      	ldr	r0, [pc, #8]	; (801261c <HW_IPCC_BLE_SendCmd+0x10>)
 8012614:	f7ff ff1a 	bl	801244c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8012618:	bf00      	nop
}
 801261a:	bd80      	pop	{r7, pc}
 801261c:	58000c00 	.word	0x58000c00

08012620 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8012620:	b580      	push	{r7, lr}
 8012622:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8012624:	f7fe fa18 	bl	8010a58 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8012628:	2101      	movs	r1, #1
 801262a:	4802      	ldr	r0, [pc, #8]	; (8012634 <HW_IPCC_BLE_EvtHandler+0x14>)
 801262c:	f7ff ff00 	bl	8012430 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012630:	bf00      	nop
}
 8012632:	bd80      	pop	{r7, pc}
 8012634:	58000c00 	.word	0x58000c00

08012638 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8012638:	b580      	push	{r7, lr}
 801263a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 801263c:	2120      	movs	r1, #32
 801263e:	4803      	ldr	r0, [pc, #12]	; (801264c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8012640:	f7ff fed2 	bl	80123e8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8012644:	f7fe fa38 	bl	8010ab8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8012648:	bf00      	nop
}
 801264a:	bd80      	pop	{r7, pc}
 801264c:	58000c00 	.word	0x58000c00

08012650 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8012650:	b580      	push	{r7, lr}
 8012652:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8012654:	2102      	movs	r1, #2
 8012656:	4802      	ldr	r0, [pc, #8]	; (8012660 <HW_IPCC_SYS_Init+0x10>)
 8012658:	f7ff fed8 	bl	801240c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801265c:	bf00      	nop
}
 801265e:	bd80      	pop	{r7, pc}
 8012660:	58000c00 	.word	0x58000c00

08012664 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8012664:	b580      	push	{r7, lr}
 8012666:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012668:	2102      	movs	r1, #2
 801266a:	4804      	ldr	r0, [pc, #16]	; (801267c <HW_IPCC_SYS_SendCmd+0x18>)
 801266c:	f7ff feee 	bl	801244c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012670:	2102      	movs	r1, #2
 8012672:	4802      	ldr	r0, [pc, #8]	; (801267c <HW_IPCC_SYS_SendCmd+0x18>)
 8012674:	f7ff fea5 	bl	80123c2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8012678:	bf00      	nop
}
 801267a:	bd80      	pop	{r7, pc}
 801267c:	58000c00 	.word	0x58000c00

08012680 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8012680:	b580      	push	{r7, lr}
 8012682:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012684:	2102      	movs	r1, #2
 8012686:	4803      	ldr	r0, [pc, #12]	; (8012694 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8012688:	f7ff feae 	bl	80123e8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 801268c:	f7fe fa64 	bl	8010b58 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8012690:	bf00      	nop
}
 8012692:	bd80      	pop	{r7, pc}
 8012694:	58000c00 	.word	0x58000c00

08012698 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8012698:	b580      	push	{r7, lr}
 801269a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 801269c:	f7fe fa72 	bl	8010b84 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80126a0:	2102      	movs	r1, #2
 80126a2:	4802      	ldr	r0, [pc, #8]	; (80126ac <HW_IPCC_SYS_EvtHandler+0x14>)
 80126a4:	f7ff fec4 	bl	8012430 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80126a8:	bf00      	nop
}
 80126aa:	bd80      	pop	{r7, pc}
 80126ac:	58000c00 	.word	0x58000c00

080126b0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b082      	sub	sp, #8
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80126b8:	2108      	movs	r1, #8
 80126ba:	480c      	ldr	r0, [pc, #48]	; (80126ec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80126bc:	f7ff fed5 	bl	801246a <LL_C1_IPCC_IsActiveFlag_CHx>
 80126c0:	4603      	mov	r3, r0
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d007      	beq.n	80126d6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80126c6:	4a0a      	ldr	r2, [pc, #40]	; (80126f0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80126cc:	2108      	movs	r1, #8
 80126ce:	4807      	ldr	r0, [pc, #28]	; (80126ec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80126d0:	f7ff fe77 	bl	80123c2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80126d4:	e006      	b.n	80126e4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80126da:	2108      	movs	r1, #8
 80126dc:	4803      	ldr	r0, [pc, #12]	; (80126ec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80126de:	f7ff feb5 	bl	801244c <LL_C1_IPCC_SetFlag_CHx>
  return;
 80126e2:	bf00      	nop
}
 80126e4:	3708      	adds	r7, #8
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}
 80126ea:	bf00      	nop
 80126ec:	58000c00 	.word	0x58000c00
 80126f0:	20000ac0 	.word	0x20000ac0

080126f4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80126f8:	2108      	movs	r1, #8
 80126fa:	4806      	ldr	r0, [pc, #24]	; (8012714 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80126fc:	f7ff fe74 	bl	80123e8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8012700:	4b05      	ldr	r3, [pc, #20]	; (8012718 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012706:	2108      	movs	r1, #8
 8012708:	4802      	ldr	r0, [pc, #8]	; (8012714 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801270a:	f7ff fe9f 	bl	801244c <LL_C1_IPCC_SetFlag_CHx>

  return;
 801270e:	bf00      	nop
}
 8012710:	bd80      	pop	{r7, pc}
 8012712:	bf00      	nop
 8012714:	58000c00 	.word	0x58000c00
 8012718:	20000ac0 	.word	0x20000ac0

0801271c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 801271c:	b580      	push	{r7, lr}
 801271e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8012720:	2108      	movs	r1, #8
 8012722:	4802      	ldr	r0, [pc, #8]	; (801272c <HW_IPCC_TRACES_Init+0x10>)
 8012724:	f7ff fe72 	bl	801240c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012728:	bf00      	nop
}
 801272a:	bd80      	pop	{r7, pc}
 801272c:	58000c00 	.word	0x58000c00

08012730 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8012730:	b580      	push	{r7, lr}
 8012732:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8012734:	f7fe face 	bl	8010cd4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8012738:	2108      	movs	r1, #8
 801273a:	4802      	ldr	r0, [pc, #8]	; (8012744 <HW_IPCC_TRACES_EvtHandler+0x14>)
 801273c:	f7ff fe78 	bl	8012430 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012740:	bf00      	nop
}
 8012742:	bd80      	pop	{r7, pc}
 8012744:	58000c00 	.word	0x58000c00

08012748 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 801274c:	2200      	movs	r2, #0
 801274e:	4912      	ldr	r1, [pc, #72]	; (8012798 <MX_USB_Device_Init+0x50>)
 8012750:	4812      	ldr	r0, [pc, #72]	; (801279c <MX_USB_Device_Init+0x54>)
 8012752:	f7fb f893 	bl	800d87c <USBD_Init>
 8012756:	4603      	mov	r3, r0
 8012758:	2b00      	cmp	r3, #0
 801275a:	d001      	beq.n	8012760 <MX_USB_Device_Init+0x18>
    Error_Handler();
 801275c:	f7ef fad4 	bl	8001d08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8012760:	490f      	ldr	r1, [pc, #60]	; (80127a0 <MX_USB_Device_Init+0x58>)
 8012762:	480e      	ldr	r0, [pc, #56]	; (801279c <MX_USB_Device_Init+0x54>)
 8012764:	f7fb f8ba 	bl	800d8dc <USBD_RegisterClass>
 8012768:	4603      	mov	r3, r0
 801276a:	2b00      	cmp	r3, #0
 801276c:	d001      	beq.n	8012772 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801276e:	f7ef facb 	bl	8001d08 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8012772:	490c      	ldr	r1, [pc, #48]	; (80127a4 <MX_USB_Device_Init+0x5c>)
 8012774:	4809      	ldr	r0, [pc, #36]	; (801279c <MX_USB_Device_Init+0x54>)
 8012776:	f7fa fff1 	bl	800d75c <USBD_CDC_RegisterInterface>
 801277a:	4603      	mov	r3, r0
 801277c:	2b00      	cmp	r3, #0
 801277e:	d001      	beq.n	8012784 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8012780:	f7ef fac2 	bl	8001d08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8012784:	4805      	ldr	r0, [pc, #20]	; (801279c <MX_USB_Device_Init+0x54>)
 8012786:	f7fb f8df 	bl	800d948 <USBD_Start>
 801278a:	4603      	mov	r3, r0
 801278c:	2b00      	cmp	r3, #0
 801278e:	d001      	beq.n	8012794 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8012790:	f7ef faba 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8012794:	bf00      	nop
 8012796:	bd80      	pop	{r7, pc}
 8012798:	200000f0 	.word	0x200000f0
 801279c:	20000ac4 	.word	0x20000ac4
 80127a0:	20000024 	.word	0x20000024
 80127a4:	200000dc 	.word	0x200000dc

080127a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80127ac:	2200      	movs	r2, #0
 80127ae:	4905      	ldr	r1, [pc, #20]	; (80127c4 <CDC_Init_FS+0x1c>)
 80127b0:	4805      	ldr	r0, [pc, #20]	; (80127c8 <CDC_Init_FS+0x20>)
 80127b2:	f7fa ffed 	bl	800d790 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80127b6:	4905      	ldr	r1, [pc, #20]	; (80127cc <CDC_Init_FS+0x24>)
 80127b8:	4803      	ldr	r0, [pc, #12]	; (80127c8 <CDC_Init_FS+0x20>)
 80127ba:	f7fb f80b 	bl	800d7d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80127be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80127c0:	4618      	mov	r0, r3
 80127c2:	bd80      	pop	{r7, pc}
 80127c4:	200015a0 	.word	0x200015a0
 80127c8:	20000ac4 	.word	0x20000ac4
 80127cc:	20000da0 	.word	0x20000da0

080127d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80127d0:	b480      	push	{r7}
 80127d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80127d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80127d6:	4618      	mov	r0, r3
 80127d8:	46bd      	mov	sp, r7
 80127da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127de:	4770      	bx	lr

080127e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80127e0:	b480      	push	{r7}
 80127e2:	b083      	sub	sp, #12
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	4603      	mov	r3, r0
 80127e8:	6039      	str	r1, [r7, #0]
 80127ea:	71fb      	strb	r3, [r7, #7]
 80127ec:	4613      	mov	r3, r2
 80127ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80127f0:	79fb      	ldrb	r3, [r7, #7]
 80127f2:	2b23      	cmp	r3, #35	; 0x23
 80127f4:	d84a      	bhi.n	801288c <CDC_Control_FS+0xac>
 80127f6:	a201      	add	r2, pc, #4	; (adr r2, 80127fc <CDC_Control_FS+0x1c>)
 80127f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127fc:	0801288d 	.word	0x0801288d
 8012800:	0801288d 	.word	0x0801288d
 8012804:	0801288d 	.word	0x0801288d
 8012808:	0801288d 	.word	0x0801288d
 801280c:	0801288d 	.word	0x0801288d
 8012810:	0801288d 	.word	0x0801288d
 8012814:	0801288d 	.word	0x0801288d
 8012818:	0801288d 	.word	0x0801288d
 801281c:	0801288d 	.word	0x0801288d
 8012820:	0801288d 	.word	0x0801288d
 8012824:	0801288d 	.word	0x0801288d
 8012828:	0801288d 	.word	0x0801288d
 801282c:	0801288d 	.word	0x0801288d
 8012830:	0801288d 	.word	0x0801288d
 8012834:	0801288d 	.word	0x0801288d
 8012838:	0801288d 	.word	0x0801288d
 801283c:	0801288d 	.word	0x0801288d
 8012840:	0801288d 	.word	0x0801288d
 8012844:	0801288d 	.word	0x0801288d
 8012848:	0801288d 	.word	0x0801288d
 801284c:	0801288d 	.word	0x0801288d
 8012850:	0801288d 	.word	0x0801288d
 8012854:	0801288d 	.word	0x0801288d
 8012858:	0801288d 	.word	0x0801288d
 801285c:	0801288d 	.word	0x0801288d
 8012860:	0801288d 	.word	0x0801288d
 8012864:	0801288d 	.word	0x0801288d
 8012868:	0801288d 	.word	0x0801288d
 801286c:	0801288d 	.word	0x0801288d
 8012870:	0801288d 	.word	0x0801288d
 8012874:	0801288d 	.word	0x0801288d
 8012878:	0801288d 	.word	0x0801288d
 801287c:	0801288d 	.word	0x0801288d
 8012880:	0801288d 	.word	0x0801288d
 8012884:	0801288d 	.word	0x0801288d
 8012888:	0801288d 	.word	0x0801288d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801288c:	bf00      	nop
  }

  return (USBD_OK);
 801288e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012890:	4618      	mov	r0, r3
 8012892:	370c      	adds	r7, #12
 8012894:	46bd      	mov	sp, r7
 8012896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289a:	4770      	bx	lr

0801289c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b082      	sub	sp, #8
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
 80128a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80128a6:	6879      	ldr	r1, [r7, #4]
 80128a8:	4805      	ldr	r0, [pc, #20]	; (80128c0 <CDC_Receive_FS+0x24>)
 80128aa:	f7fa ff93 	bl	800d7d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80128ae:	4804      	ldr	r0, [pc, #16]	; (80128c0 <CDC_Receive_FS+0x24>)
 80128b0:	f7fa ffae 	bl	800d810 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80128b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80128b6:	4618      	mov	r0, r3
 80128b8:	3708      	adds	r7, #8
 80128ba:	46bd      	mov	sp, r7
 80128bc:	bd80      	pop	{r7, pc}
 80128be:	bf00      	nop
 80128c0:	20000ac4 	.word	0x20000ac4

080128c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80128c4:	b480      	push	{r7}
 80128c6:	b087      	sub	sp, #28
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	60f8      	str	r0, [r7, #12]
 80128cc:	60b9      	str	r1, [r7, #8]
 80128ce:	4613      	mov	r3, r2
 80128d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80128d2:	2300      	movs	r3, #0
 80128d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80128d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80128da:	4618      	mov	r0, r3
 80128dc:	371c      	adds	r7, #28
 80128de:	46bd      	mov	sp, r7
 80128e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e4:	4770      	bx	lr
	...

080128e8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80128e8:	b480      	push	{r7}
 80128ea:	b083      	sub	sp, #12
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	4603      	mov	r3, r0
 80128f0:	6039      	str	r1, [r7, #0]
 80128f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80128f4:	683b      	ldr	r3, [r7, #0]
 80128f6:	2212      	movs	r2, #18
 80128f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80128fa:	4b03      	ldr	r3, [pc, #12]	; (8012908 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80128fc:	4618      	mov	r0, r3
 80128fe:	370c      	adds	r7, #12
 8012900:	46bd      	mov	sp, r7
 8012902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012906:	4770      	bx	lr
 8012908:	20000110 	.word	0x20000110

0801290c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801290c:	b480      	push	{r7}
 801290e:	b083      	sub	sp, #12
 8012910:	af00      	add	r7, sp, #0
 8012912:	4603      	mov	r3, r0
 8012914:	6039      	str	r1, [r7, #0]
 8012916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012918:	683b      	ldr	r3, [r7, #0]
 801291a:	2204      	movs	r2, #4
 801291c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801291e:	4b03      	ldr	r3, [pc, #12]	; (801292c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8012920:	4618      	mov	r0, r3
 8012922:	370c      	adds	r7, #12
 8012924:	46bd      	mov	sp, r7
 8012926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292a:	4770      	bx	lr
 801292c:	20000124 	.word	0x20000124

08012930 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b082      	sub	sp, #8
 8012934:	af00      	add	r7, sp, #0
 8012936:	4603      	mov	r3, r0
 8012938:	6039      	str	r1, [r7, #0]
 801293a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801293c:	79fb      	ldrb	r3, [r7, #7]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d105      	bne.n	801294e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012942:	683a      	ldr	r2, [r7, #0]
 8012944:	4907      	ldr	r1, [pc, #28]	; (8012964 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012946:	4808      	ldr	r0, [pc, #32]	; (8012968 <USBD_CDC_ProductStrDescriptor+0x38>)
 8012948:	f7fc f948 	bl	800ebdc <USBD_GetString>
 801294c:	e004      	b.n	8012958 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801294e:	683a      	ldr	r2, [r7, #0]
 8012950:	4904      	ldr	r1, [pc, #16]	; (8012964 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012952:	4805      	ldr	r0, [pc, #20]	; (8012968 <USBD_CDC_ProductStrDescriptor+0x38>)
 8012954:	f7fc f942 	bl	800ebdc <USBD_GetString>
  }
  return USBD_StrDesc;
 8012958:	4b02      	ldr	r3, [pc, #8]	; (8012964 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801295a:	4618      	mov	r0, r3
 801295c:	3708      	adds	r7, #8
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}
 8012962:	bf00      	nop
 8012964:	20001da0 	.word	0x20001da0
 8012968:	080160ac 	.word	0x080160ac

0801296c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b082      	sub	sp, #8
 8012970:	af00      	add	r7, sp, #0
 8012972:	4603      	mov	r3, r0
 8012974:	6039      	str	r1, [r7, #0]
 8012976:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012978:	683a      	ldr	r2, [r7, #0]
 801297a:	4904      	ldr	r1, [pc, #16]	; (801298c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 801297c:	4804      	ldr	r0, [pc, #16]	; (8012990 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801297e:	f7fc f92d 	bl	800ebdc <USBD_GetString>
  return USBD_StrDesc;
 8012982:	4b02      	ldr	r3, [pc, #8]	; (801298c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8012984:	4618      	mov	r0, r3
 8012986:	3708      	adds	r7, #8
 8012988:	46bd      	mov	sp, r7
 801298a:	bd80      	pop	{r7, pc}
 801298c:	20001da0 	.word	0x20001da0
 8012990:	080160b8 	.word	0x080160b8

08012994 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b082      	sub	sp, #8
 8012998:	af00      	add	r7, sp, #0
 801299a:	4603      	mov	r3, r0
 801299c:	6039      	str	r1, [r7, #0]
 801299e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80129a0:	683b      	ldr	r3, [r7, #0]
 80129a2:	221a      	movs	r2, #26
 80129a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80129a6:	f000 f843 	bl	8012a30 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80129aa:	4b02      	ldr	r3, [pc, #8]	; (80129b4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80129ac:	4618      	mov	r0, r3
 80129ae:	3708      	adds	r7, #8
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}
 80129b4:	20000128 	.word	0x20000128

080129b8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b082      	sub	sp, #8
 80129bc:	af00      	add	r7, sp, #0
 80129be:	4603      	mov	r3, r0
 80129c0:	6039      	str	r1, [r7, #0]
 80129c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80129c4:	79fb      	ldrb	r3, [r7, #7]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d105      	bne.n	80129d6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80129ca:	683a      	ldr	r2, [r7, #0]
 80129cc:	4907      	ldr	r1, [pc, #28]	; (80129ec <USBD_CDC_ConfigStrDescriptor+0x34>)
 80129ce:	4808      	ldr	r0, [pc, #32]	; (80129f0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80129d0:	f7fc f904 	bl	800ebdc <USBD_GetString>
 80129d4:	e004      	b.n	80129e0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80129d6:	683a      	ldr	r2, [r7, #0]
 80129d8:	4904      	ldr	r1, [pc, #16]	; (80129ec <USBD_CDC_ConfigStrDescriptor+0x34>)
 80129da:	4805      	ldr	r0, [pc, #20]	; (80129f0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80129dc:	f7fc f8fe 	bl	800ebdc <USBD_GetString>
  }
  return USBD_StrDesc;
 80129e0:	4b02      	ldr	r3, [pc, #8]	; (80129ec <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80129e2:	4618      	mov	r0, r3
 80129e4:	3708      	adds	r7, #8
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}
 80129ea:	bf00      	nop
 80129ec:	20001da0 	.word	0x20001da0
 80129f0:	080160c0 	.word	0x080160c0

080129f4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b082      	sub	sp, #8
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	4603      	mov	r3, r0
 80129fc:	6039      	str	r1, [r7, #0]
 80129fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012a00:	79fb      	ldrb	r3, [r7, #7]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d105      	bne.n	8012a12 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012a06:	683a      	ldr	r2, [r7, #0]
 8012a08:	4907      	ldr	r1, [pc, #28]	; (8012a28 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8012a0a:	4808      	ldr	r0, [pc, #32]	; (8012a2c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8012a0c:	f7fc f8e6 	bl	800ebdc <USBD_GetString>
 8012a10:	e004      	b.n	8012a1c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012a12:	683a      	ldr	r2, [r7, #0]
 8012a14:	4904      	ldr	r1, [pc, #16]	; (8012a28 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8012a16:	4805      	ldr	r0, [pc, #20]	; (8012a2c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8012a18:	f7fc f8e0 	bl	800ebdc <USBD_GetString>
  }
  return USBD_StrDesc;
 8012a1c:	4b02      	ldr	r3, [pc, #8]	; (8012a28 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8012a1e:	4618      	mov	r0, r3
 8012a20:	3708      	adds	r7, #8
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}
 8012a26:	bf00      	nop
 8012a28:	20001da0 	.word	0x20001da0
 8012a2c:	080160cc 	.word	0x080160cc

08012a30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b084      	sub	sp, #16
 8012a34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012a36:	4b0f      	ldr	r3, [pc, #60]	; (8012a74 <Get_SerialNum+0x44>)
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012a3c:	4b0e      	ldr	r3, [pc, #56]	; (8012a78 <Get_SerialNum+0x48>)
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012a42:	4b0e      	ldr	r3, [pc, #56]	; (8012a7c <Get_SerialNum+0x4c>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012a48:	68fa      	ldr	r2, [r7, #12]
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	4413      	add	r3, r2
 8012a4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d009      	beq.n	8012a6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012a56:	2208      	movs	r2, #8
 8012a58:	4909      	ldr	r1, [pc, #36]	; (8012a80 <Get_SerialNum+0x50>)
 8012a5a:	68f8      	ldr	r0, [r7, #12]
 8012a5c:	f000 f814 	bl	8012a88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012a60:	2204      	movs	r2, #4
 8012a62:	4908      	ldr	r1, [pc, #32]	; (8012a84 <Get_SerialNum+0x54>)
 8012a64:	68b8      	ldr	r0, [r7, #8]
 8012a66:	f000 f80f 	bl	8012a88 <IntToUnicode>
  }
}
 8012a6a:	bf00      	nop
 8012a6c:	3710      	adds	r7, #16
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	bd80      	pop	{r7, pc}
 8012a72:	bf00      	nop
 8012a74:	1fff7590 	.word	0x1fff7590
 8012a78:	1fff7594 	.word	0x1fff7594
 8012a7c:	1fff7598 	.word	0x1fff7598
 8012a80:	2000012a 	.word	0x2000012a
 8012a84:	2000013a 	.word	0x2000013a

08012a88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012a88:	b480      	push	{r7}
 8012a8a:	b087      	sub	sp, #28
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	60f8      	str	r0, [r7, #12]
 8012a90:	60b9      	str	r1, [r7, #8]
 8012a92:	4613      	mov	r3, r2
 8012a94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012a96:	2300      	movs	r3, #0
 8012a98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	75fb      	strb	r3, [r7, #23]
 8012a9e:	e027      	b.n	8012af0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	0f1b      	lsrs	r3, r3, #28
 8012aa4:	2b09      	cmp	r3, #9
 8012aa6:	d80b      	bhi.n	8012ac0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	0f1b      	lsrs	r3, r3, #28
 8012aac:	b2da      	uxtb	r2, r3
 8012aae:	7dfb      	ldrb	r3, [r7, #23]
 8012ab0:	005b      	lsls	r3, r3, #1
 8012ab2:	4619      	mov	r1, r3
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	440b      	add	r3, r1
 8012ab8:	3230      	adds	r2, #48	; 0x30
 8012aba:	b2d2      	uxtb	r2, r2
 8012abc:	701a      	strb	r2, [r3, #0]
 8012abe:	e00a      	b.n	8012ad6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	0f1b      	lsrs	r3, r3, #28
 8012ac4:	b2da      	uxtb	r2, r3
 8012ac6:	7dfb      	ldrb	r3, [r7, #23]
 8012ac8:	005b      	lsls	r3, r3, #1
 8012aca:	4619      	mov	r1, r3
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	440b      	add	r3, r1
 8012ad0:	3237      	adds	r2, #55	; 0x37
 8012ad2:	b2d2      	uxtb	r2, r2
 8012ad4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	011b      	lsls	r3, r3, #4
 8012ada:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012adc:	7dfb      	ldrb	r3, [r7, #23]
 8012ade:	005b      	lsls	r3, r3, #1
 8012ae0:	3301      	adds	r3, #1
 8012ae2:	68ba      	ldr	r2, [r7, #8]
 8012ae4:	4413      	add	r3, r2
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012aea:	7dfb      	ldrb	r3, [r7, #23]
 8012aec:	3301      	adds	r3, #1
 8012aee:	75fb      	strb	r3, [r7, #23]
 8012af0:	7dfa      	ldrb	r2, [r7, #23]
 8012af2:	79fb      	ldrb	r3, [r7, #7]
 8012af4:	429a      	cmp	r2, r3
 8012af6:	d3d3      	bcc.n	8012aa0 <IntToUnicode+0x18>
  }
}
 8012af8:	bf00      	nop
 8012afa:	bf00      	nop
 8012afc:	371c      	adds	r7, #28
 8012afe:	46bd      	mov	sp, r7
 8012b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b04:	4770      	bx	lr

08012b06 <LL_AHB2_GRP1_EnableClock>:
{
 8012b06:	b480      	push	{r7}
 8012b08:	b085      	sub	sp, #20
 8012b0a:	af00      	add	r7, sp, #0
 8012b0c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8012b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012b12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012b14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	4313      	orrs	r3, r2
 8012b1c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8012b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012b22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	4013      	ands	r3, r2
 8012b28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012b2a:	68fb      	ldr	r3, [r7, #12]
}
 8012b2c:	bf00      	nop
 8012b2e:	3714      	adds	r7, #20
 8012b30:	46bd      	mov	sp, r7
 8012b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b36:	4770      	bx	lr

08012b38 <LL_APB1_GRP1_EnableClock>:
{
 8012b38:	b480      	push	{r7}
 8012b3a:	b085      	sub	sp, #20
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8012b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012b44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012b46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	4313      	orrs	r3, r2
 8012b4e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8012b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012b54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	4013      	ands	r3, r2
 8012b5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012b5c:	68fb      	ldr	r3, [r7, #12]
}
 8012b5e:	bf00      	nop
 8012b60:	3714      	adds	r7, #20
 8012b62:	46bd      	mov	sp, r7
 8012b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b68:	4770      	bx	lr
	...

08012b6c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b09c      	sub	sp, #112	; 0x70
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012b74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012b78:	2200      	movs	r2, #0
 8012b7a:	601a      	str	r2, [r3, #0]
 8012b7c:	605a      	str	r2, [r3, #4]
 8012b7e:	609a      	str	r2, [r3, #8]
 8012b80:	60da      	str	r2, [r3, #12]
 8012b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012b84:	f107 030c 	add.w	r3, r7, #12
 8012b88:	2250      	movs	r2, #80	; 0x50
 8012b8a:	2100      	movs	r1, #0
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f000 fe23 	bl	80137d8 <memset>
  if(pcdHandle->Instance==USB)
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	4a23      	ldr	r2, [pc, #140]	; (8012c24 <HAL_PCD_MspInit+0xb8>)
 8012b98:	4293      	cmp	r3, r2
 8012b9a:	d13e      	bne.n	8012c1a <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012ba0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8012ba2:	2318      	movs	r3, #24
 8012ba4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8012ba6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012baa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8012bac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012bb0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV8;
 8012bb2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8012bb6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8012bb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8012bbc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8012bbe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8012bc2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012bc4:	f107 030c 	add.w	r3, r7, #12
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f7f6 fa23 	bl	8009014 <HAL_RCCEx_PeriphCLKConfig>
 8012bce:	4603      	mov	r3, r0
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d001      	beq.n	8012bd8 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8012bd4:	f7ef f898 	bl	8001d08 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012bd8:	2001      	movs	r0, #1
 8012bda:	f7ff ff94 	bl	8012b06 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012bde:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012be2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012be4:	2302      	movs	r3, #2
 8012be6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012be8:	2300      	movs	r3, #0
 8012bea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012bec:	2300      	movs	r3, #0
 8012bee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8012bf0:	230a      	movs	r3, #10
 8012bf2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012bf4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012bf8:	4619      	mov	r1, r3
 8012bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012bfe:	f7f1 ff31 	bl	8004a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8012c02:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8012c06:	f7ff ff97 	bl	8012b38 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8012c0a:	2200      	movs	r2, #0
 8012c0c:	2100      	movs	r1, #0
 8012c0e:	2014      	movs	r0, #20
 8012c10:	f7f1 fc03 	bl	800441a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8012c14:	2014      	movs	r0, #20
 8012c16:	f7f1 fc1a 	bl	800444e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8012c1a:	bf00      	nop
 8012c1c:	3770      	adds	r7, #112	; 0x70
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}
 8012c22:	bf00      	nop
 8012c24:	40006800 	.word	0x40006800

08012c28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b082      	sub	sp, #8
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8012c3c:	4619      	mov	r1, r3
 8012c3e:	4610      	mov	r0, r2
 8012c40:	f7fa fecf 	bl	800d9e2 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8012c44:	bf00      	nop
 8012c46:	3708      	adds	r7, #8
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bd80      	pop	{r7, pc}

08012c4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b082      	sub	sp, #8
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
 8012c54:	460b      	mov	r3, r1
 8012c56:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8012c5e:	78fa      	ldrb	r2, [r7, #3]
 8012c60:	6879      	ldr	r1, [r7, #4]
 8012c62:	4613      	mov	r3, r2
 8012c64:	009b      	lsls	r3, r3, #2
 8012c66:	4413      	add	r3, r2
 8012c68:	00db      	lsls	r3, r3, #3
 8012c6a:	440b      	add	r3, r1
 8012c6c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8012c70:	681a      	ldr	r2, [r3, #0]
 8012c72:	78fb      	ldrb	r3, [r7, #3]
 8012c74:	4619      	mov	r1, r3
 8012c76:	f7fa ff09 	bl	800da8c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8012c7a:	bf00      	nop
 8012c7c:	3708      	adds	r7, #8
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bd80      	pop	{r7, pc}

08012c82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c82:	b580      	push	{r7, lr}
 8012c84:	b082      	sub	sp, #8
 8012c86:	af00      	add	r7, sp, #0
 8012c88:	6078      	str	r0, [r7, #4]
 8012c8a:	460b      	mov	r3, r1
 8012c8c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8012c94:	78fa      	ldrb	r2, [r7, #3]
 8012c96:	6879      	ldr	r1, [r7, #4]
 8012c98:	4613      	mov	r3, r2
 8012c9a:	009b      	lsls	r3, r3, #2
 8012c9c:	4413      	add	r3, r2
 8012c9e:	00db      	lsls	r3, r3, #3
 8012ca0:	440b      	add	r3, r1
 8012ca2:	333c      	adds	r3, #60	; 0x3c
 8012ca4:	681a      	ldr	r2, [r3, #0]
 8012ca6:	78fb      	ldrb	r3, [r7, #3]
 8012ca8:	4619      	mov	r1, r3
 8012caa:	f7fa ffa2 	bl	800dbf2 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8012cae:	bf00      	nop
 8012cb0:	3708      	adds	r7, #8
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd80      	pop	{r7, pc}

08012cb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012cb6:	b580      	push	{r7, lr}
 8012cb8:	b082      	sub	sp, #8
 8012cba:	af00      	add	r7, sp, #0
 8012cbc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	f7fb f8dc 	bl	800de82 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8012cca:	bf00      	nop
 8012ccc:	3708      	adds	r7, #8
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	bd80      	pop	{r7, pc}

08012cd2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012cd2:	b580      	push	{r7, lr}
 8012cd4:	b084      	sub	sp, #16
 8012cd6:	af00      	add	r7, sp, #0
 8012cd8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012cda:	2301      	movs	r3, #1
 8012cdc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	689b      	ldr	r3, [r3, #8]
 8012ce2:	2b02      	cmp	r3, #2
 8012ce4:	d001      	beq.n	8012cea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012ce6:	f7ef f80f 	bl	8001d08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8012cf0:	7bfa      	ldrb	r2, [r7, #15]
 8012cf2:	4611      	mov	r1, r2
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f7fb f880 	bl	800ddfa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7fb f828 	bl	800dd56 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8012d06:	bf00      	nop
 8012d08:	3710      	adds	r7, #16
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	bd80      	pop	{r7, pc}
	...

08012d10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b082      	sub	sp, #8
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8012d1e:	4618      	mov	r0, r3
 8012d20:	f7fb f87b 	bl	800de1a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	699b      	ldr	r3, [r3, #24]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d005      	beq.n	8012d38 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012d2c:	4b04      	ldr	r3, [pc, #16]	; (8012d40 <HAL_PCD_SuspendCallback+0x30>)
 8012d2e:	691b      	ldr	r3, [r3, #16]
 8012d30:	4a03      	ldr	r2, [pc, #12]	; (8012d40 <HAL_PCD_SuspendCallback+0x30>)
 8012d32:	f043 0306 	orr.w	r3, r3, #6
 8012d36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8012d38:	bf00      	nop
 8012d3a:	3708      	adds	r7, #8
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	bd80      	pop	{r7, pc}
 8012d40:	e000ed00 	.word	0xe000ed00

08012d44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b082      	sub	sp, #8
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	699b      	ldr	r3, [r3, #24]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d007      	beq.n	8012d64 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012d54:	4b08      	ldr	r3, [pc, #32]	; (8012d78 <HAL_PCD_ResumeCallback+0x34>)
 8012d56:	691b      	ldr	r3, [r3, #16]
 8012d58:	4a07      	ldr	r2, [pc, #28]	; (8012d78 <HAL_PCD_ResumeCallback+0x34>)
 8012d5a:	f023 0306 	bic.w	r3, r3, #6
 8012d5e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8012d60:	f000 f9fc 	bl	801315c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7fb f871 	bl	800de52 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8012d70:	bf00      	nop
 8012d72:	3708      	adds	r7, #8
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}
 8012d78:	e000ed00 	.word	0xe000ed00

08012d7c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b082      	sub	sp, #8
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8012d84:	4a2c      	ldr	r2, [pc, #176]	; (8012e38 <USBD_LL_Init+0xbc>)
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	4a2a      	ldr	r2, [pc, #168]	; (8012e38 <USBD_LL_Init+0xbc>)
 8012d90:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8012d94:	f7f4 fe3c 	bl	8007a10 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8012d98:	4b27      	ldr	r3, [pc, #156]	; (8012e38 <USBD_LL_Init+0xbc>)
 8012d9a:	4a28      	ldr	r2, [pc, #160]	; (8012e3c <USBD_LL_Init+0xc0>)
 8012d9c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8012d9e:	4b26      	ldr	r3, [pc, #152]	; (8012e38 <USBD_LL_Init+0xbc>)
 8012da0:	2208      	movs	r2, #8
 8012da2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8012da4:	4b24      	ldr	r3, [pc, #144]	; (8012e38 <USBD_LL_Init+0xbc>)
 8012da6:	2202      	movs	r2, #2
 8012da8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012daa:	4b23      	ldr	r3, [pc, #140]	; (8012e38 <USBD_LL_Init+0xbc>)
 8012dac:	2202      	movs	r2, #2
 8012dae:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8012db0:	4b21      	ldr	r3, [pc, #132]	; (8012e38 <USBD_LL_Init+0xbc>)
 8012db2:	2200      	movs	r2, #0
 8012db4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8012db6:	4b20      	ldr	r3, [pc, #128]	; (8012e38 <USBD_LL_Init+0xbc>)
 8012db8:	2200      	movs	r2, #0
 8012dba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8012dbc:	4b1e      	ldr	r3, [pc, #120]	; (8012e38 <USBD_LL_Init+0xbc>)
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8012dc2:	4b1d      	ldr	r3, [pc, #116]	; (8012e38 <USBD_LL_Init+0xbc>)
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8012dc8:	481b      	ldr	r0, [pc, #108]	; (8012e38 <USBD_LL_Init+0xbc>)
 8012dca:	f7f3 f8bf 	bl	8005f4c <HAL_PCD_Init>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d001      	beq.n	8012dd8 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8012dd4:	f7ee ff98 	bl	8001d08 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012dde:	2318      	movs	r3, #24
 8012de0:	2200      	movs	r2, #0
 8012de2:	2100      	movs	r1, #0
 8012de4:	f7f4 fd88 	bl	80078f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012dee:	2358      	movs	r3, #88	; 0x58
 8012df0:	2200      	movs	r2, #0
 8012df2:	2180      	movs	r1, #128	; 0x80
 8012df4:	f7f4 fd80 	bl	80078f8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012dfe:	23c0      	movs	r3, #192	; 0xc0
 8012e00:	2200      	movs	r2, #0
 8012e02:	2181      	movs	r1, #129	; 0x81
 8012e04:	f7f4 fd78 	bl	80078f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012e0e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8012e12:	2200      	movs	r2, #0
 8012e14:	2101      	movs	r1, #1
 8012e16:	f7f4 fd6f 	bl	80078f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012e20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012e24:	2200      	movs	r2, #0
 8012e26:	2182      	movs	r1, #130	; 0x82
 8012e28:	f7f4 fd66 	bl	80078f8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8012e2c:	2300      	movs	r3, #0
}
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3708      	adds	r7, #8
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}
 8012e36:	bf00      	nop
 8012e38:	20001fa0 	.word	0x20001fa0
 8012e3c:	40006800 	.word	0x40006800

08012e40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b084      	sub	sp, #16
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e48:	2300      	movs	r3, #0
 8012e4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012e56:	4618      	mov	r0, r3
 8012e58:	f7f3 f951 	bl	80060fe <HAL_PCD_Start>
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012e60:	7bfb      	ldrb	r3, [r7, #15]
 8012e62:	4618      	mov	r0, r3
 8012e64:	f000 f980 	bl	8013168 <USBD_Get_USB_Status>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012e6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8012e6e:	4618      	mov	r0, r3
 8012e70:	3710      	adds	r7, #16
 8012e72:	46bd      	mov	sp, r7
 8012e74:	bd80      	pop	{r7, pc}

08012e76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012e76:	b580      	push	{r7, lr}
 8012e78:	b084      	sub	sp, #16
 8012e7a:	af00      	add	r7, sp, #0
 8012e7c:	6078      	str	r0, [r7, #4]
 8012e7e:	4608      	mov	r0, r1
 8012e80:	4611      	mov	r1, r2
 8012e82:	461a      	mov	r2, r3
 8012e84:	4603      	mov	r3, r0
 8012e86:	70fb      	strb	r3, [r7, #3]
 8012e88:	460b      	mov	r3, r1
 8012e8a:	70bb      	strb	r3, [r7, #2]
 8012e8c:	4613      	mov	r3, r2
 8012e8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e90:	2300      	movs	r3, #0
 8012e92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e94:	2300      	movs	r3, #0
 8012e96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012e9e:	78bb      	ldrb	r3, [r7, #2]
 8012ea0:	883a      	ldrh	r2, [r7, #0]
 8012ea2:	78f9      	ldrb	r1, [r7, #3]
 8012ea4:	f7f3 fa99 	bl	80063da <HAL_PCD_EP_Open>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012eac:	7bfb      	ldrb	r3, [r7, #15]
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f000 f95a 	bl	8013168 <USBD_Get_USB_Status>
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012eb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8012eba:	4618      	mov	r0, r3
 8012ebc:	3710      	adds	r7, #16
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}

08012ec2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012ec2:	b580      	push	{r7, lr}
 8012ec4:	b084      	sub	sp, #16
 8012ec6:	af00      	add	r7, sp, #0
 8012ec8:	6078      	str	r0, [r7, #4]
 8012eca:	460b      	mov	r3, r1
 8012ecc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ece:	2300      	movs	r3, #0
 8012ed0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012edc:	78fa      	ldrb	r2, [r7, #3]
 8012ede:	4611      	mov	r1, r2
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f7f3 fad7 	bl	8006494 <HAL_PCD_EP_Close>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012eea:	7bfb      	ldrb	r3, [r7, #15]
 8012eec:	4618      	mov	r0, r3
 8012eee:	f000 f93b 	bl	8013168 <USBD_Get_USB_Status>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012ef6:	7bbb      	ldrb	r3, [r7, #14]
}
 8012ef8:	4618      	mov	r0, r3
 8012efa:	3710      	adds	r7, #16
 8012efc:	46bd      	mov	sp, r7
 8012efe:	bd80      	pop	{r7, pc}

08012f00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b084      	sub	sp, #16
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
 8012f08:	460b      	mov	r3, r1
 8012f0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f10:	2300      	movs	r3, #0
 8012f12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012f1a:	78fa      	ldrb	r2, [r7, #3]
 8012f1c:	4611      	mov	r1, r2
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f7f3 fb80 	bl	8006624 <HAL_PCD_EP_SetStall>
 8012f24:	4603      	mov	r3, r0
 8012f26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012f28:	7bfb      	ldrb	r3, [r7, #15]
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f000 f91c 	bl	8013168 <USBD_Get_USB_Status>
 8012f30:	4603      	mov	r3, r0
 8012f32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012f34:	7bbb      	ldrb	r3, [r7, #14]
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	3710      	adds	r7, #16
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd80      	pop	{r7, pc}

08012f3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012f3e:	b580      	push	{r7, lr}
 8012f40:	b084      	sub	sp, #16
 8012f42:	af00      	add	r7, sp, #0
 8012f44:	6078      	str	r0, [r7, #4]
 8012f46:	460b      	mov	r3, r1
 8012f48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f4e:	2300      	movs	r3, #0
 8012f50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012f58:	78fa      	ldrb	r2, [r7, #3]
 8012f5a:	4611      	mov	r1, r2
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	f7f3 fbb3 	bl	80066c8 <HAL_PCD_EP_ClrStall>
 8012f62:	4603      	mov	r3, r0
 8012f64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012f66:	7bfb      	ldrb	r3, [r7, #15]
 8012f68:	4618      	mov	r0, r3
 8012f6a:	f000 f8fd 	bl	8013168 <USBD_Get_USB_Status>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012f72:	7bbb      	ldrb	r3, [r7, #14]
}
 8012f74:	4618      	mov	r0, r3
 8012f76:	3710      	adds	r7, #16
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	bd80      	pop	{r7, pc}

08012f7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012f7c:	b480      	push	{r7}
 8012f7e:	b085      	sub	sp, #20
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
 8012f84:	460b      	mov	r3, r1
 8012f86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012f8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012f90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	da0c      	bge.n	8012fb2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012f98:	78fb      	ldrb	r3, [r7, #3]
 8012f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012f9e:	68f9      	ldr	r1, [r7, #12]
 8012fa0:	1c5a      	adds	r2, r3, #1
 8012fa2:	4613      	mov	r3, r2
 8012fa4:	009b      	lsls	r3, r3, #2
 8012fa6:	4413      	add	r3, r2
 8012fa8:	00db      	lsls	r3, r3, #3
 8012faa:	440b      	add	r3, r1
 8012fac:	3302      	adds	r3, #2
 8012fae:	781b      	ldrb	r3, [r3, #0]
 8012fb0:	e00b      	b.n	8012fca <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012fb2:	78fb      	ldrb	r3, [r7, #3]
 8012fb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012fb8:	68f9      	ldr	r1, [r7, #12]
 8012fba:	4613      	mov	r3, r2
 8012fbc:	009b      	lsls	r3, r3, #2
 8012fbe:	4413      	add	r3, r2
 8012fc0:	00db      	lsls	r3, r3, #3
 8012fc2:	440b      	add	r3, r1
 8012fc4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8012fc8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012fca:	4618      	mov	r0, r3
 8012fcc:	3714      	adds	r7, #20
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd4:	4770      	bx	lr

08012fd6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012fd6:	b580      	push	{r7, lr}
 8012fd8:	b084      	sub	sp, #16
 8012fda:	af00      	add	r7, sp, #0
 8012fdc:	6078      	str	r0, [r7, #4]
 8012fde:	460b      	mov	r3, r1
 8012fe0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012ff0:	78fa      	ldrb	r2, [r7, #3]
 8012ff2:	4611      	mov	r1, r2
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f7f3 f9cb 	bl	8006390 <HAL_PCD_SetAddress>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012ffe:	7bfb      	ldrb	r3, [r7, #15]
 8013000:	4618      	mov	r0, r3
 8013002:	f000 f8b1 	bl	8013168 <USBD_Get_USB_Status>
 8013006:	4603      	mov	r3, r0
 8013008:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801300a:	7bbb      	ldrb	r3, [r7, #14]
}
 801300c:	4618      	mov	r0, r3
 801300e:	3710      	adds	r7, #16
 8013010:	46bd      	mov	sp, r7
 8013012:	bd80      	pop	{r7, pc}

08013014 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b086      	sub	sp, #24
 8013018:	af00      	add	r7, sp, #0
 801301a:	60f8      	str	r0, [r7, #12]
 801301c:	607a      	str	r2, [r7, #4]
 801301e:	603b      	str	r3, [r7, #0]
 8013020:	460b      	mov	r3, r1
 8013022:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013024:	2300      	movs	r3, #0
 8013026:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013028:	2300      	movs	r3, #0
 801302a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013032:	7af9      	ldrb	r1, [r7, #11]
 8013034:	683b      	ldr	r3, [r7, #0]
 8013036:	687a      	ldr	r2, [r7, #4]
 8013038:	f7f3 fabd 	bl	80065b6 <HAL_PCD_EP_Transmit>
 801303c:	4603      	mov	r3, r0
 801303e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013040:	7dfb      	ldrb	r3, [r7, #23]
 8013042:	4618      	mov	r0, r3
 8013044:	f000 f890 	bl	8013168 <USBD_Get_USB_Status>
 8013048:	4603      	mov	r3, r0
 801304a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801304c:	7dbb      	ldrb	r3, [r7, #22]
}
 801304e:	4618      	mov	r0, r3
 8013050:	3718      	adds	r7, #24
 8013052:	46bd      	mov	sp, r7
 8013054:	bd80      	pop	{r7, pc}

08013056 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013056:	b580      	push	{r7, lr}
 8013058:	b086      	sub	sp, #24
 801305a:	af00      	add	r7, sp, #0
 801305c:	60f8      	str	r0, [r7, #12]
 801305e:	607a      	str	r2, [r7, #4]
 8013060:	603b      	str	r3, [r7, #0]
 8013062:	460b      	mov	r3, r1
 8013064:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013066:	2300      	movs	r3, #0
 8013068:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801306a:	2300      	movs	r3, #0
 801306c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013074:	7af9      	ldrb	r1, [r7, #11]
 8013076:	683b      	ldr	r3, [r7, #0]
 8013078:	687a      	ldr	r2, [r7, #4]
 801307a:	f7f3 fa53 	bl	8006524 <HAL_PCD_EP_Receive>
 801307e:	4603      	mov	r3, r0
 8013080:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013082:	7dfb      	ldrb	r3, [r7, #23]
 8013084:	4618      	mov	r0, r3
 8013086:	f000 f86f 	bl	8013168 <USBD_Get_USB_Status>
 801308a:	4603      	mov	r3, r0
 801308c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801308e:	7dbb      	ldrb	r3, [r7, #22]
}
 8013090:	4618      	mov	r0, r3
 8013092:	3718      	adds	r7, #24
 8013094:	46bd      	mov	sp, r7
 8013096:	bd80      	pop	{r7, pc}

08013098 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013098:	b580      	push	{r7, lr}
 801309a:	b082      	sub	sp, #8
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
 80130a0:	460b      	mov	r3, r1
 80130a2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80130aa:	78fa      	ldrb	r2, [r7, #3]
 80130ac:	4611      	mov	r1, r2
 80130ae:	4618      	mov	r0, r3
 80130b0:	f7f3 fa69 	bl	8006586 <HAL_PCD_EP_GetRxCount>
 80130b4:	4603      	mov	r3, r0
}
 80130b6:	4618      	mov	r0, r3
 80130b8:	3708      	adds	r7, #8
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}
	...

080130c0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b082      	sub	sp, #8
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
 80130c8:	460b      	mov	r3, r1
 80130ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80130cc:	78fb      	ldrb	r3, [r7, #3]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d002      	beq.n	80130d8 <HAL_PCDEx_LPM_Callback+0x18>
 80130d2:	2b01      	cmp	r3, #1
 80130d4:	d013      	beq.n	80130fe <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80130d6:	e023      	b.n	8013120 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	699b      	ldr	r3, [r3, #24]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d007      	beq.n	80130f0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80130e0:	f000 f83c 	bl	801315c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80130e4:	4b10      	ldr	r3, [pc, #64]	; (8013128 <HAL_PCDEx_LPM_Callback+0x68>)
 80130e6:	691b      	ldr	r3, [r3, #16]
 80130e8:	4a0f      	ldr	r2, [pc, #60]	; (8013128 <HAL_PCDEx_LPM_Callback+0x68>)
 80130ea:	f023 0306 	bic.w	r3, r3, #6
 80130ee:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80130f6:	4618      	mov	r0, r3
 80130f8:	f7fa feab 	bl	800de52 <USBD_LL_Resume>
    break;
 80130fc:	e010      	b.n	8013120 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8013104:	4618      	mov	r0, r3
 8013106:	f7fa fe88 	bl	800de1a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	699b      	ldr	r3, [r3, #24]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d005      	beq.n	801311e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013112:	4b05      	ldr	r3, [pc, #20]	; (8013128 <HAL_PCDEx_LPM_Callback+0x68>)
 8013114:	691b      	ldr	r3, [r3, #16]
 8013116:	4a04      	ldr	r2, [pc, #16]	; (8013128 <HAL_PCDEx_LPM_Callback+0x68>)
 8013118:	f043 0306 	orr.w	r3, r3, #6
 801311c:	6113      	str	r3, [r2, #16]
    break;
 801311e:	bf00      	nop
}
 8013120:	bf00      	nop
 8013122:	3708      	adds	r7, #8
 8013124:	46bd      	mov	sp, r7
 8013126:	bd80      	pop	{r7, pc}
 8013128:	e000ed00 	.word	0xe000ed00

0801312c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801312c:	b480      	push	{r7}
 801312e:	b083      	sub	sp, #12
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013134:	4b03      	ldr	r3, [pc, #12]	; (8013144 <USBD_static_malloc+0x18>)
}
 8013136:	4618      	mov	r0, r3
 8013138:	370c      	adds	r7, #12
 801313a:	46bd      	mov	sp, r7
 801313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013140:	4770      	bx	lr
 8013142:	bf00      	nop
 8013144:	20002294 	.word	0x20002294

08013148 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013148:	b480      	push	{r7}
 801314a:	b083      	sub	sp, #12
 801314c:	af00      	add	r7, sp, #0
 801314e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8013150:	bf00      	nop
 8013152:	370c      	adds	r7, #12
 8013154:	46bd      	mov	sp, r7
 8013156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801315a:	4770      	bx	lr

0801315c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801315c:	b580      	push	{r7, lr}
 801315e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8013160:	f7ee fb1e 	bl	80017a0 <SystemClock_Config>
}
 8013164:	bf00      	nop
 8013166:	bd80      	pop	{r7, pc}

08013168 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013168:	b480      	push	{r7}
 801316a:	b085      	sub	sp, #20
 801316c:	af00      	add	r7, sp, #0
 801316e:	4603      	mov	r3, r0
 8013170:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013172:	2300      	movs	r3, #0
 8013174:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013176:	79fb      	ldrb	r3, [r7, #7]
 8013178:	2b03      	cmp	r3, #3
 801317a:	d817      	bhi.n	80131ac <USBD_Get_USB_Status+0x44>
 801317c:	a201      	add	r2, pc, #4	; (adr r2, 8013184 <USBD_Get_USB_Status+0x1c>)
 801317e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013182:	bf00      	nop
 8013184:	08013195 	.word	0x08013195
 8013188:	0801319b 	.word	0x0801319b
 801318c:	080131a1 	.word	0x080131a1
 8013190:	080131a7 	.word	0x080131a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013194:	2300      	movs	r3, #0
 8013196:	73fb      	strb	r3, [r7, #15]
    break;
 8013198:	e00b      	b.n	80131b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801319a:	2303      	movs	r3, #3
 801319c:	73fb      	strb	r3, [r7, #15]
    break;
 801319e:	e008      	b.n	80131b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80131a0:	2301      	movs	r3, #1
 80131a2:	73fb      	strb	r3, [r7, #15]
    break;
 80131a4:	e005      	b.n	80131b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80131a6:	2303      	movs	r3, #3
 80131a8:	73fb      	strb	r3, [r7, #15]
    break;
 80131aa:	e002      	b.n	80131b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80131ac:	2303      	movs	r3, #3
 80131ae:	73fb      	strb	r3, [r7, #15]
    break;
 80131b0:	bf00      	nop
  }
  return usb_status;
 80131b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80131b4:	4618      	mov	r0, r3
 80131b6:	3714      	adds	r7, #20
 80131b8:	46bd      	mov	sp, r7
 80131ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131be:	4770      	bx	lr

080131c0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80131c0:	b480      	push	{r7}
 80131c2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80131c4:	4b05      	ldr	r3, [pc, #20]	; (80131dc <UTIL_LPM_Init+0x1c>)
 80131c6:	2200      	movs	r2, #0
 80131c8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80131ca:	4b05      	ldr	r3, [pc, #20]	; (80131e0 <UTIL_LPM_Init+0x20>)
 80131cc:	2200      	movs	r2, #0
 80131ce:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80131d0:	bf00      	nop
 80131d2:	46bd      	mov	sp, r7
 80131d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d8:	4770      	bx	lr
 80131da:	bf00      	nop
 80131dc:	200024b4 	.word	0x200024b4
 80131e0:	200024b8 	.word	0x200024b8

080131e4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80131e4:	b480      	push	{r7}
 80131e6:	b087      	sub	sp, #28
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
 80131ec:	460b      	mov	r3, r1
 80131ee:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80131f0:	f3ef 8310 	mrs	r3, PRIMASK
 80131f4:	613b      	str	r3, [r7, #16]
  return(result);
 80131f6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80131f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80131fa:	b672      	cpsid	i
}
 80131fc:	bf00      	nop
  
  switch(state)
 80131fe:	78fb      	ldrb	r3, [r7, #3]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d008      	beq.n	8013216 <UTIL_LPM_SetOffMode+0x32>
 8013204:	2b01      	cmp	r3, #1
 8013206:	d10e      	bne.n	8013226 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8013208:	4b0d      	ldr	r3, [pc, #52]	; (8013240 <UTIL_LPM_SetOffMode+0x5c>)
 801320a:	681a      	ldr	r2, [r3, #0]
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	4313      	orrs	r3, r2
 8013210:	4a0b      	ldr	r2, [pc, #44]	; (8013240 <UTIL_LPM_SetOffMode+0x5c>)
 8013212:	6013      	str	r3, [r2, #0]
      break;
 8013214:	e008      	b.n	8013228 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	43da      	mvns	r2, r3
 801321a:	4b09      	ldr	r3, [pc, #36]	; (8013240 <UTIL_LPM_SetOffMode+0x5c>)
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	4013      	ands	r3, r2
 8013220:	4a07      	ldr	r2, [pc, #28]	; (8013240 <UTIL_LPM_SetOffMode+0x5c>)
 8013222:	6013      	str	r3, [r2, #0]
      break;
 8013224:	e000      	b.n	8013228 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8013226:	bf00      	nop
 8013228:	697b      	ldr	r3, [r7, #20]
 801322a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	f383 8810 	msr	PRIMASK, r3
}
 8013232:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8013234:	bf00      	nop
 8013236:	371c      	adds	r7, #28
 8013238:	46bd      	mov	sp, r7
 801323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323e:	4770      	bx	lr
 8013240:	200024b8 	.word	0x200024b8

08013244 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8013244:	b580      	push	{r7, lr}
 8013246:	b090      	sub	sp, #64	; 0x40
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801324c:	4b73      	ldr	r3, [pc, #460]	; (801341c <UTIL_SEQ_Run+0x1d8>)
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8013252:	4b72      	ldr	r3, [pc, #456]	; (801341c <UTIL_SEQ_Run+0x1d8>)
 8013254:	681a      	ldr	r2, [r3, #0]
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	4013      	ands	r3, r2
 801325a:	4a70      	ldr	r2, [pc, #448]	; (801341c <UTIL_SEQ_Run+0x1d8>)
 801325c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801325e:	4b70      	ldr	r3, [pc, #448]	; (8013420 <UTIL_SEQ_Run+0x1dc>)
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8013264:	4b6f      	ldr	r3, [pc, #444]	; (8013424 <UTIL_SEQ_Run+0x1e0>)
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801326a:	4b6f      	ldr	r3, [pc, #444]	; (8013428 <UTIL_SEQ_Run+0x1e4>)
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8013270:	4b6e      	ldr	r3, [pc, #440]	; (801342c <UTIL_SEQ_Run+0x1e8>)
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8013276:	e08d      	b.n	8013394 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8013278:	2300      	movs	r3, #0
 801327a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801327c:	e002      	b.n	8013284 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801327e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013280:	3301      	adds	r3, #1
 8013282:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8013284:	4a6a      	ldr	r2, [pc, #424]	; (8013430 <UTIL_SEQ_Run+0x1ec>)
 8013286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013288:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801328e:	401a      	ands	r2, r3
 8013290:	4b62      	ldr	r3, [pc, #392]	; (801341c <UTIL_SEQ_Run+0x1d8>)
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	4013      	ands	r3, r2
 8013296:	2b00      	cmp	r3, #0
 8013298:	d0f1      	beq.n	801327e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801329a:	4a65      	ldr	r2, [pc, #404]	; (8013430 <UTIL_SEQ_Run+0x1ec>)
 801329c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801329e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80132a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132a4:	401a      	ands	r2, r3
 80132a6:	4b5d      	ldr	r3, [pc, #372]	; (801341c <UTIL_SEQ_Run+0x1d8>)
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	4013      	ands	r3, r2
 80132ac:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80132ae:	4a60      	ldr	r2, [pc, #384]	; (8013430 <UTIL_SEQ_Run+0x1ec>)
 80132b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132b2:	00db      	lsls	r3, r3, #3
 80132b4:	4413      	add	r3, r2
 80132b6:	685a      	ldr	r2, [r3, #4]
 80132b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132ba:	4013      	ands	r3, r2
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d106      	bne.n	80132ce <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80132c0:	4a5b      	ldr	r2, [pc, #364]	; (8013430 <UTIL_SEQ_Run+0x1ec>)
 80132c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132c4:	00db      	lsls	r3, r3, #3
 80132c6:	4413      	add	r3, r2
 80132c8:	f04f 32ff 	mov.w	r2, #4294967295
 80132cc:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80132ce:	4a58      	ldr	r2, [pc, #352]	; (8013430 <UTIL_SEQ_Run+0x1ec>)
 80132d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132d2:	00db      	lsls	r3, r3, #3
 80132d4:	4413      	add	r3, r2
 80132d6:	685a      	ldr	r2, [r3, #4]
 80132d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132da:	4013      	ands	r3, r2
 80132dc:	4618      	mov	r0, r3
 80132de:	f000 f9b3 	bl	8013648 <SEQ_BitPosition>
 80132e2:	4603      	mov	r3, r0
 80132e4:	461a      	mov	r2, r3
 80132e6:	4b53      	ldr	r3, [pc, #332]	; (8013434 <UTIL_SEQ_Run+0x1f0>)
 80132e8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80132ea:	4a51      	ldr	r2, [pc, #324]	; (8013430 <UTIL_SEQ_Run+0x1ec>)
 80132ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132ee:	00db      	lsls	r3, r3, #3
 80132f0:	4413      	add	r3, r2
 80132f2:	685a      	ldr	r2, [r3, #4]
 80132f4:	4b4f      	ldr	r3, [pc, #316]	; (8013434 <UTIL_SEQ_Run+0x1f0>)
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	2101      	movs	r1, #1
 80132fa:	fa01 f303 	lsl.w	r3, r1, r3
 80132fe:	43db      	mvns	r3, r3
 8013300:	401a      	ands	r2, r3
 8013302:	494b      	ldr	r1, [pc, #300]	; (8013430 <UTIL_SEQ_Run+0x1ec>)
 8013304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013306:	00db      	lsls	r3, r3, #3
 8013308:	440b      	add	r3, r1
 801330a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801330c:	f3ef 8310 	mrs	r3, PRIMASK
 8013310:	61bb      	str	r3, [r7, #24]
  return(result);
 8013312:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013314:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8013316:	b672      	cpsid	i
}
 8013318:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801331a:	4b46      	ldr	r3, [pc, #280]	; (8013434 <UTIL_SEQ_Run+0x1f0>)
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	2201      	movs	r2, #1
 8013320:	fa02 f303 	lsl.w	r3, r2, r3
 8013324:	43da      	mvns	r2, r3
 8013326:	4b3e      	ldr	r3, [pc, #248]	; (8013420 <UTIL_SEQ_Run+0x1dc>)
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	4013      	ands	r3, r2
 801332c:	4a3c      	ldr	r2, [pc, #240]	; (8013420 <UTIL_SEQ_Run+0x1dc>)
 801332e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8013330:	2302      	movs	r3, #2
 8013332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013334:	e013      	b.n	801335e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8013336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013338:	3b01      	subs	r3, #1
 801333a:	4a3d      	ldr	r2, [pc, #244]	; (8013430 <UTIL_SEQ_Run+0x1ec>)
 801333c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8013340:	4b3c      	ldr	r3, [pc, #240]	; (8013434 <UTIL_SEQ_Run+0x1f0>)
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	2201      	movs	r2, #1
 8013346:	fa02 f303 	lsl.w	r3, r2, r3
 801334a:	43da      	mvns	r2, r3
 801334c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801334e:	3b01      	subs	r3, #1
 8013350:	400a      	ands	r2, r1
 8013352:	4937      	ldr	r1, [pc, #220]	; (8013430 <UTIL_SEQ_Run+0x1ec>)
 8013354:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8013358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801335a:	3b01      	subs	r3, #1
 801335c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801335e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013360:	2b00      	cmp	r3, #0
 8013362:	d1e8      	bne.n	8013336 <UTIL_SEQ_Run+0xf2>
 8013364:	6a3b      	ldr	r3, [r7, #32]
 8013366:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013368:	697b      	ldr	r3, [r7, #20]
 801336a:	f383 8810 	msr	PRIMASK, r3
}
 801336e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8013370:	4b30      	ldr	r3, [pc, #192]	; (8013434 <UTIL_SEQ_Run+0x1f0>)
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	4a30      	ldr	r2, [pc, #192]	; (8013438 <UTIL_SEQ_Run+0x1f4>)
 8013376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801337a:	4798      	blx	r3

    local_taskset = TaskSet;
 801337c:	4b28      	ldr	r3, [pc, #160]	; (8013420 <UTIL_SEQ_Run+0x1dc>)
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8013382:	4b28      	ldr	r3, [pc, #160]	; (8013424 <UTIL_SEQ_Run+0x1e0>)
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8013388:	4b27      	ldr	r3, [pc, #156]	; (8013428 <UTIL_SEQ_Run+0x1e4>)
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801338e:	4b27      	ldr	r3, [pc, #156]	; (801342c <UTIL_SEQ_Run+0x1e8>)
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8013394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013398:	401a      	ands	r2, r3
 801339a:	4b20      	ldr	r3, [pc, #128]	; (801341c <UTIL_SEQ_Run+0x1d8>)
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	4013      	ands	r3, r2
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d005      	beq.n	80133b0 <UTIL_SEQ_Run+0x16c>
 80133a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80133a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133a8:	4013      	ands	r3, r2
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	f43f af64 	beq.w	8013278 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80133b0:	4b20      	ldr	r3, [pc, #128]	; (8013434 <UTIL_SEQ_Run+0x1f0>)
 80133b2:	f04f 32ff 	mov.w	r2, #4294967295
 80133b6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80133b8:	f000 f938 	bl	801362c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80133bc:	f3ef 8310 	mrs	r3, PRIMASK
 80133c0:	613b      	str	r3, [r7, #16]
  return(result);
 80133c2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80133c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80133c6:	b672      	cpsid	i
}
 80133c8:	bf00      	nop
  local_taskset = TaskSet;
 80133ca:	4b15      	ldr	r3, [pc, #84]	; (8013420 <UTIL_SEQ_Run+0x1dc>)
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80133d0:	4b14      	ldr	r3, [pc, #80]	; (8013424 <UTIL_SEQ_Run+0x1e0>)
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80133d6:	4b14      	ldr	r3, [pc, #80]	; (8013428 <UTIL_SEQ_Run+0x1e4>)
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80133dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80133de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133e0:	401a      	ands	r2, r3
 80133e2:	4b0e      	ldr	r3, [pc, #56]	; (801341c <UTIL_SEQ_Run+0x1d8>)
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	4013      	ands	r3, r2
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d107      	bne.n	80133fc <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80133ec:	4b0f      	ldr	r3, [pc, #60]	; (801342c <UTIL_SEQ_Run+0x1e8>)
 80133ee:	681a      	ldr	r2, [r3, #0]
 80133f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133f2:	4013      	ands	r3, r2
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d101      	bne.n	80133fc <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80133f8:	f7ee f82a 	bl	8001450 <UTIL_SEQ_Idle>
 80133fc:	69fb      	ldr	r3, [r7, #28]
 80133fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	f383 8810 	msr	PRIMASK, r3
}
 8013406:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8013408:	f000 f917 	bl	801363a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801340c:	4a03      	ldr	r2, [pc, #12]	; (801341c <UTIL_SEQ_Run+0x1d8>)
 801340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013410:	6013      	str	r3, [r2, #0]

  return;
 8013412:	bf00      	nop
}
 8013414:	3740      	adds	r7, #64	; 0x40
 8013416:	46bd      	mov	sp, r7
 8013418:	bd80      	pop	{r7, pc}
 801341a:	bf00      	nop
 801341c:	20000148 	.word	0x20000148
 8013420:	200024bc 	.word	0x200024bc
 8013424:	200024c0 	.word	0x200024c0
 8013428:	20000144 	.word	0x20000144
 801342c:	200024c4 	.word	0x200024c4
 8013430:	2000254c 	.word	0x2000254c
 8013434:	200024c8 	.word	0x200024c8
 8013438:	200024cc 	.word	0x200024cc

0801343c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b088      	sub	sp, #32
 8013440:	af00      	add	r7, sp, #0
 8013442:	60f8      	str	r0, [r7, #12]
 8013444:	60b9      	str	r1, [r7, #8]
 8013446:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013448:	f3ef 8310 	mrs	r3, PRIMASK
 801344c:	617b      	str	r3, [r7, #20]
  return(result);
 801344e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8013450:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8013452:	b672      	cpsid	i
}
 8013454:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8013456:	68f8      	ldr	r0, [r7, #12]
 8013458:	f000 f8f6 	bl	8013648 <SEQ_BitPosition>
 801345c:	4603      	mov	r3, r0
 801345e:	4619      	mov	r1, r3
 8013460:	4a06      	ldr	r2, [pc, #24]	; (801347c <UTIL_SEQ_RegTask+0x40>)
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8013468:	69fb      	ldr	r3, [r7, #28]
 801346a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801346c:	69bb      	ldr	r3, [r7, #24]
 801346e:	f383 8810 	msr	PRIMASK, r3
}
 8013472:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8013474:	bf00      	nop
}
 8013476:	3720      	adds	r7, #32
 8013478:	46bd      	mov	sp, r7
 801347a:	bd80      	pop	{r7, pc}
 801347c:	200024cc 	.word	0x200024cc

08013480 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8013480:	b480      	push	{r7}
 8013482:	b087      	sub	sp, #28
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
 8013488:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801348a:	f3ef 8310 	mrs	r3, PRIMASK
 801348e:	60fb      	str	r3, [r7, #12]
  return(result);
 8013490:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013492:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013494:	b672      	cpsid	i
}
 8013496:	bf00      	nop

  TaskSet |= TaskId_bm;
 8013498:	4b0d      	ldr	r3, [pc, #52]	; (80134d0 <UTIL_SEQ_SetTask+0x50>)
 801349a:	681a      	ldr	r2, [r3, #0]
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	4313      	orrs	r3, r2
 80134a0:	4a0b      	ldr	r2, [pc, #44]	; (80134d0 <UTIL_SEQ_SetTask+0x50>)
 80134a2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80134a4:	4a0b      	ldr	r2, [pc, #44]	; (80134d4 <UTIL_SEQ_SetTask+0x54>)
 80134a6:	683b      	ldr	r3, [r7, #0]
 80134a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	431a      	orrs	r2, r3
 80134b0:	4908      	ldr	r1, [pc, #32]	; (80134d4 <UTIL_SEQ_SetTask+0x54>)
 80134b2:	683b      	ldr	r3, [r7, #0]
 80134b4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80134b8:	697b      	ldr	r3, [r7, #20]
 80134ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80134bc:	693b      	ldr	r3, [r7, #16]
 80134be:	f383 8810 	msr	PRIMASK, r3
}
 80134c2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80134c4:	bf00      	nop
}
 80134c6:	371c      	adds	r7, #28
 80134c8:	46bd      	mov	sp, r7
 80134ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ce:	4770      	bx	lr
 80134d0:	200024bc 	.word	0x200024bc
 80134d4:	2000254c 	.word	0x2000254c

080134d8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80134d8:	b480      	push	{r7}
 80134da:	b087      	sub	sp, #28
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80134e0:	f3ef 8310 	mrs	r3, PRIMASK
 80134e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80134e6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80134e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80134ea:	b672      	cpsid	i
}
 80134ec:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	43da      	mvns	r2, r3
 80134f2:	4b08      	ldr	r3, [pc, #32]	; (8013514 <UTIL_SEQ_PauseTask+0x3c>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	4013      	ands	r3, r2
 80134f8:	4a06      	ldr	r2, [pc, #24]	; (8013514 <UTIL_SEQ_PauseTask+0x3c>)
 80134fa:	6013      	str	r3, [r2, #0]
 80134fc:	697b      	ldr	r3, [r7, #20]
 80134fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013500:	693b      	ldr	r3, [r7, #16]
 8013502:	f383 8810 	msr	PRIMASK, r3
}
 8013506:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013508:	bf00      	nop
}
 801350a:	371c      	adds	r7, #28
 801350c:	46bd      	mov	sp, r7
 801350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013512:	4770      	bx	lr
 8013514:	20000144 	.word	0x20000144

08013518 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8013518:	b480      	push	{r7}
 801351a:	b087      	sub	sp, #28
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013520:	f3ef 8310 	mrs	r3, PRIMASK
 8013524:	60fb      	str	r3, [r7, #12]
  return(result);
 8013526:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013528:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801352a:	b672      	cpsid	i
}
 801352c:	bf00      	nop

  TaskMask |= TaskId_bm;
 801352e:	4b09      	ldr	r3, [pc, #36]	; (8013554 <UTIL_SEQ_ResumeTask+0x3c>)
 8013530:	681a      	ldr	r2, [r3, #0]
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	4313      	orrs	r3, r2
 8013536:	4a07      	ldr	r2, [pc, #28]	; (8013554 <UTIL_SEQ_ResumeTask+0x3c>)
 8013538:	6013      	str	r3, [r2, #0]
 801353a:	697b      	ldr	r3, [r7, #20]
 801353c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801353e:	693b      	ldr	r3, [r7, #16]
 8013540:	f383 8810 	msr	PRIMASK, r3
}
 8013544:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013546:	bf00      	nop
}
 8013548:	371c      	adds	r7, #28
 801354a:	46bd      	mov	sp, r7
 801354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013550:	4770      	bx	lr
 8013552:	bf00      	nop
 8013554:	20000144 	.word	0x20000144

08013558 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8013558:	b480      	push	{r7}
 801355a:	b087      	sub	sp, #28
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013560:	f3ef 8310 	mrs	r3, PRIMASK
 8013564:	60fb      	str	r3, [r7, #12]
  return(result);
 8013566:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013568:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801356a:	b672      	cpsid	i
}
 801356c:	bf00      	nop

  EvtSet |= EvtId_bm;
 801356e:	4b09      	ldr	r3, [pc, #36]	; (8013594 <UTIL_SEQ_SetEvt+0x3c>)
 8013570:	681a      	ldr	r2, [r3, #0]
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	4313      	orrs	r3, r2
 8013576:	4a07      	ldr	r2, [pc, #28]	; (8013594 <UTIL_SEQ_SetEvt+0x3c>)
 8013578:	6013      	str	r3, [r2, #0]
 801357a:	697b      	ldr	r3, [r7, #20]
 801357c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801357e:	693b      	ldr	r3, [r7, #16]
 8013580:	f383 8810 	msr	PRIMASK, r3
}
 8013584:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013586:	bf00      	nop
}
 8013588:	371c      	adds	r7, #28
 801358a:	46bd      	mov	sp, r7
 801358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013590:	4770      	bx	lr
 8013592:	bf00      	nop
 8013594:	200024c0 	.word	0x200024c0

08013598 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b088      	sub	sp, #32
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80135a0:	4b1f      	ldr	r3, [pc, #124]	; (8013620 <UTIL_SEQ_WaitEvt+0x88>)
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80135a6:	4b1e      	ldr	r3, [pc, #120]	; (8013620 <UTIL_SEQ_WaitEvt+0x88>)
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135ae:	d102      	bne.n	80135b6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80135b0:	2300      	movs	r3, #0
 80135b2:	61fb      	str	r3, [r7, #28]
 80135b4:	e005      	b.n	80135c2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80135b6:	4b1a      	ldr	r3, [pc, #104]	; (8013620 <UTIL_SEQ_WaitEvt+0x88>)
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	2201      	movs	r2, #1
 80135bc:	fa02 f303 	lsl.w	r3, r2, r3
 80135c0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80135c2:	4b18      	ldr	r3, [pc, #96]	; (8013624 <UTIL_SEQ_WaitEvt+0x8c>)
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80135c8:	4a16      	ldr	r2, [pc, #88]	; (8013624 <UTIL_SEQ_WaitEvt+0x8c>)
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80135ce:	e003      	b.n	80135d8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80135d0:	6879      	ldr	r1, [r7, #4]
 80135d2:	69f8      	ldr	r0, [r7, #28]
 80135d4:	f7ed ff43 	bl	800145e <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80135d8:	4b13      	ldr	r3, [pc, #76]	; (8013628 <UTIL_SEQ_WaitEvt+0x90>)
 80135da:	681a      	ldr	r2, [r3, #0]
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	4013      	ands	r3, r2
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d0f5      	beq.n	80135d0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80135e4:	4a0e      	ldr	r2, [pc, #56]	; (8013620 <UTIL_SEQ_WaitEvt+0x88>)
 80135e6:	69bb      	ldr	r3, [r7, #24]
 80135e8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80135ea:	f3ef 8310 	mrs	r3, PRIMASK
 80135ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80135f0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80135f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80135f4:	b672      	cpsid	i
}
 80135f6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	43da      	mvns	r2, r3
 80135fc:	4b0a      	ldr	r3, [pc, #40]	; (8013628 <UTIL_SEQ_WaitEvt+0x90>)
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	4013      	ands	r3, r2
 8013602:	4a09      	ldr	r2, [pc, #36]	; (8013628 <UTIL_SEQ_WaitEvt+0x90>)
 8013604:	6013      	str	r3, [r2, #0]
 8013606:	693b      	ldr	r3, [r7, #16]
 8013608:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	f383 8810 	msr	PRIMASK, r3
}
 8013610:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8013612:	4a04      	ldr	r2, [pc, #16]	; (8013624 <UTIL_SEQ_WaitEvt+0x8c>)
 8013614:	697b      	ldr	r3, [r7, #20]
 8013616:	6013      	str	r3, [r2, #0]
  return;
 8013618:	bf00      	nop
}
 801361a:	3720      	adds	r7, #32
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}
 8013620:	200024c8 	.word	0x200024c8
 8013624:	200024c4 	.word	0x200024c4
 8013628:	200024c0 	.word	0x200024c0

0801362c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801362c:	b480      	push	{r7}
 801362e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8013630:	bf00      	nop
}
 8013632:	46bd      	mov	sp, r7
 8013634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013638:	4770      	bx	lr

0801363a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801363a:	b480      	push	{r7}
 801363c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801363e:	bf00      	nop
}
 8013640:	46bd      	mov	sp, r7
 8013642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013646:	4770      	bx	lr

08013648 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8013648:	b480      	push	{r7}
 801364a:	b085      	sub	sp, #20
 801364c:	af00      	add	r7, sp, #0
 801364e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8013650:	2300      	movs	r3, #0
 8013652:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8013658:	68bb      	ldr	r3, [r7, #8]
 801365a:	0c1b      	lsrs	r3, r3, #16
 801365c:	041b      	lsls	r3, r3, #16
 801365e:	2b00      	cmp	r3, #0
 8013660:	d104      	bne.n	801366c <SEQ_BitPosition+0x24>
 8013662:	2310      	movs	r3, #16
 8013664:	73fb      	strb	r3, [r7, #15]
 8013666:	68bb      	ldr	r3, [r7, #8]
 8013668:	041b      	lsls	r3, r3, #16
 801366a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801366c:	68bb      	ldr	r3, [r7, #8]
 801366e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013672:	2b00      	cmp	r3, #0
 8013674:	d105      	bne.n	8013682 <SEQ_BitPosition+0x3a>
 8013676:	7bfb      	ldrb	r3, [r7, #15]
 8013678:	3308      	adds	r3, #8
 801367a:	73fb      	strb	r3, [r7, #15]
 801367c:	68bb      	ldr	r3, [r7, #8]
 801367e:	021b      	lsls	r3, r3, #8
 8013680:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8013682:	68bb      	ldr	r3, [r7, #8]
 8013684:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013688:	2b00      	cmp	r3, #0
 801368a:	d105      	bne.n	8013698 <SEQ_BitPosition+0x50>
 801368c:	7bfb      	ldrb	r3, [r7, #15]
 801368e:	3304      	adds	r3, #4
 8013690:	73fb      	strb	r3, [r7, #15]
 8013692:	68bb      	ldr	r3, [r7, #8]
 8013694:	011b      	lsls	r3, r3, #4
 8013696:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8013698:	68bb      	ldr	r3, [r7, #8]
 801369a:	0f1b      	lsrs	r3, r3, #28
 801369c:	4a07      	ldr	r2, [pc, #28]	; (80136bc <SEQ_BitPosition+0x74>)
 801369e:	5cd2      	ldrb	r2, [r2, r3]
 80136a0:	7bfb      	ldrb	r3, [r7, #15]
 80136a2:	4413      	add	r3, r2
 80136a4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80136a6:	7bfb      	ldrb	r3, [r7, #15]
 80136a8:	f1c3 031f 	rsb	r3, r3, #31
 80136ac:	b2db      	uxtb	r3, r3
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	3714      	adds	r7, #20
 80136b2:	46bd      	mov	sp, r7
 80136b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b8:	4770      	bx	lr
 80136ba:	bf00      	nop
 80136bc:	08016a2c 	.word	0x08016a2c

080136c0 <__assert_func>:
 80136c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80136c2:	4614      	mov	r4, r2
 80136c4:	461a      	mov	r2, r3
 80136c6:	4b09      	ldr	r3, [pc, #36]	; (80136ec <__assert_func+0x2c>)
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	4605      	mov	r5, r0
 80136cc:	68d8      	ldr	r0, [r3, #12]
 80136ce:	b14c      	cbz	r4, 80136e4 <__assert_func+0x24>
 80136d0:	4b07      	ldr	r3, [pc, #28]	; (80136f0 <__assert_func+0x30>)
 80136d2:	9100      	str	r1, [sp, #0]
 80136d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80136d8:	4906      	ldr	r1, [pc, #24]	; (80136f4 <__assert_func+0x34>)
 80136da:	462b      	mov	r3, r5
 80136dc:	f000 f838 	bl	8013750 <fiprintf>
 80136e0:	f000 fc30 	bl	8013f44 <abort>
 80136e4:	4b04      	ldr	r3, [pc, #16]	; (80136f8 <__assert_func+0x38>)
 80136e6:	461c      	mov	r4, r3
 80136e8:	e7f3      	b.n	80136d2 <__assert_func+0x12>
 80136ea:	bf00      	nop
 80136ec:	2000014c 	.word	0x2000014c
 80136f0:	08016a3c 	.word	0x08016a3c
 80136f4:	08016a49 	.word	0x08016a49
 80136f8:	08016a77 	.word	0x08016a77

080136fc <gcvt>:
 80136fc:	b530      	push	{r4, r5, lr}
 80136fe:	2200      	movs	r2, #0
 8013700:	b085      	sub	sp, #20
 8013702:	460c      	mov	r4, r1
 8013704:	4605      	mov	r5, r0
 8013706:	2300      	movs	r3, #0
 8013708:	ec51 0b10 	vmov	r0, r1, d0
 801370c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013710:	f7ed f9bc 	bl	8000a8c <__aeabi_dcmplt>
 8013714:	ed9d 0b02 	vldr	d0, [sp, #8]
 8013718:	4622      	mov	r2, r4
 801371a:	b118      	cbz	r0, 8013724 <gcvt+0x28>
 801371c:	232d      	movs	r3, #45	; 0x2d
 801371e:	f802 3b01 	strb.w	r3, [r2], #1
 8013722:	3d01      	subs	r5, #1
 8013724:	2300      	movs	r3, #0
 8013726:	4806      	ldr	r0, [pc, #24]	; (8013740 <gcvt+0x44>)
 8013728:	9300      	str	r3, [sp, #0]
 801372a:	4629      	mov	r1, r5
 801372c:	2367      	movs	r3, #103	; 0x67
 801372e:	6800      	ldr	r0, [r0, #0]
 8013730:	f000 fc86 	bl	8014040 <_gcvt>
 8013734:	2800      	cmp	r0, #0
 8013736:	bf14      	ite	ne
 8013738:	4620      	movne	r0, r4
 801373a:	2000      	moveq	r0, #0
 801373c:	b005      	add	sp, #20
 801373e:	bd30      	pop	{r4, r5, pc}
 8013740:	2000014c 	.word	0x2000014c

08013744 <__errno>:
 8013744:	4b01      	ldr	r3, [pc, #4]	; (801374c <__errno+0x8>)
 8013746:	6818      	ldr	r0, [r3, #0]
 8013748:	4770      	bx	lr
 801374a:	bf00      	nop
 801374c:	2000014c 	.word	0x2000014c

08013750 <fiprintf>:
 8013750:	b40e      	push	{r1, r2, r3}
 8013752:	b503      	push	{r0, r1, lr}
 8013754:	4601      	mov	r1, r0
 8013756:	ab03      	add	r3, sp, #12
 8013758:	4805      	ldr	r0, [pc, #20]	; (8013770 <fiprintf+0x20>)
 801375a:	f853 2b04 	ldr.w	r2, [r3], #4
 801375e:	6800      	ldr	r0, [r0, #0]
 8013760:	9301      	str	r3, [sp, #4]
 8013762:	f000 f86b 	bl	801383c <_vfiprintf_r>
 8013766:	b002      	add	sp, #8
 8013768:	f85d eb04 	ldr.w	lr, [sp], #4
 801376c:	b003      	add	sp, #12
 801376e:	4770      	bx	lr
 8013770:	2000014c 	.word	0x2000014c

08013774 <__libc_init_array>:
 8013774:	b570      	push	{r4, r5, r6, lr}
 8013776:	4d0d      	ldr	r5, [pc, #52]	; (80137ac <__libc_init_array+0x38>)
 8013778:	4c0d      	ldr	r4, [pc, #52]	; (80137b0 <__libc_init_array+0x3c>)
 801377a:	1b64      	subs	r4, r4, r5
 801377c:	10a4      	asrs	r4, r4, #2
 801377e:	2600      	movs	r6, #0
 8013780:	42a6      	cmp	r6, r4
 8013782:	d109      	bne.n	8013798 <__libc_init_array+0x24>
 8013784:	4d0b      	ldr	r5, [pc, #44]	; (80137b4 <__libc_init_array+0x40>)
 8013786:	4c0c      	ldr	r4, [pc, #48]	; (80137b8 <__libc_init_array+0x44>)
 8013788:	f002 fb6a 	bl	8015e60 <_init>
 801378c:	1b64      	subs	r4, r4, r5
 801378e:	10a4      	asrs	r4, r4, #2
 8013790:	2600      	movs	r6, #0
 8013792:	42a6      	cmp	r6, r4
 8013794:	d105      	bne.n	80137a2 <__libc_init_array+0x2e>
 8013796:	bd70      	pop	{r4, r5, r6, pc}
 8013798:	f855 3b04 	ldr.w	r3, [r5], #4
 801379c:	4798      	blx	r3
 801379e:	3601      	adds	r6, #1
 80137a0:	e7ee      	b.n	8013780 <__libc_init_array+0xc>
 80137a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80137a6:	4798      	blx	r3
 80137a8:	3601      	adds	r6, #1
 80137aa:	e7f2      	b.n	8013792 <__libc_init_array+0x1e>
 80137ac:	08016d00 	.word	0x08016d00
 80137b0:	08016d00 	.word	0x08016d00
 80137b4:	08016d00 	.word	0x08016d00
 80137b8:	08016d04 	.word	0x08016d04

080137bc <memcpy>:
 80137bc:	440a      	add	r2, r1
 80137be:	4291      	cmp	r1, r2
 80137c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80137c4:	d100      	bne.n	80137c8 <memcpy+0xc>
 80137c6:	4770      	bx	lr
 80137c8:	b510      	push	{r4, lr}
 80137ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80137ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80137d2:	4291      	cmp	r1, r2
 80137d4:	d1f9      	bne.n	80137ca <memcpy+0xe>
 80137d6:	bd10      	pop	{r4, pc}

080137d8 <memset>:
 80137d8:	4402      	add	r2, r0
 80137da:	4603      	mov	r3, r0
 80137dc:	4293      	cmp	r3, r2
 80137de:	d100      	bne.n	80137e2 <memset+0xa>
 80137e0:	4770      	bx	lr
 80137e2:	f803 1b01 	strb.w	r1, [r3], #1
 80137e6:	e7f9      	b.n	80137dc <memset+0x4>

080137e8 <__sfputc_r>:
 80137e8:	6893      	ldr	r3, [r2, #8]
 80137ea:	3b01      	subs	r3, #1
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	b410      	push	{r4}
 80137f0:	6093      	str	r3, [r2, #8]
 80137f2:	da08      	bge.n	8013806 <__sfputc_r+0x1e>
 80137f4:	6994      	ldr	r4, [r2, #24]
 80137f6:	42a3      	cmp	r3, r4
 80137f8:	db01      	blt.n	80137fe <__sfputc_r+0x16>
 80137fa:	290a      	cmp	r1, #10
 80137fc:	d103      	bne.n	8013806 <__sfputc_r+0x1e>
 80137fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013802:	f000 badf 	b.w	8013dc4 <__swbuf_r>
 8013806:	6813      	ldr	r3, [r2, #0]
 8013808:	1c58      	adds	r0, r3, #1
 801380a:	6010      	str	r0, [r2, #0]
 801380c:	7019      	strb	r1, [r3, #0]
 801380e:	4608      	mov	r0, r1
 8013810:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013814:	4770      	bx	lr

08013816 <__sfputs_r>:
 8013816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013818:	4606      	mov	r6, r0
 801381a:	460f      	mov	r7, r1
 801381c:	4614      	mov	r4, r2
 801381e:	18d5      	adds	r5, r2, r3
 8013820:	42ac      	cmp	r4, r5
 8013822:	d101      	bne.n	8013828 <__sfputs_r+0x12>
 8013824:	2000      	movs	r0, #0
 8013826:	e007      	b.n	8013838 <__sfputs_r+0x22>
 8013828:	f814 1b01 	ldrb.w	r1, [r4], #1
 801382c:	463a      	mov	r2, r7
 801382e:	4630      	mov	r0, r6
 8013830:	f7ff ffda 	bl	80137e8 <__sfputc_r>
 8013834:	1c43      	adds	r3, r0, #1
 8013836:	d1f3      	bne.n	8013820 <__sfputs_r+0xa>
 8013838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801383c <_vfiprintf_r>:
 801383c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013840:	460d      	mov	r5, r1
 8013842:	b09d      	sub	sp, #116	; 0x74
 8013844:	4614      	mov	r4, r2
 8013846:	4698      	mov	r8, r3
 8013848:	4606      	mov	r6, r0
 801384a:	b118      	cbz	r0, 8013854 <_vfiprintf_r+0x18>
 801384c:	6983      	ldr	r3, [r0, #24]
 801384e:	b90b      	cbnz	r3, 8013854 <_vfiprintf_r+0x18>
 8013850:	f000 fdd0 	bl	80143f4 <__sinit>
 8013854:	4b89      	ldr	r3, [pc, #548]	; (8013a7c <_vfiprintf_r+0x240>)
 8013856:	429d      	cmp	r5, r3
 8013858:	d11b      	bne.n	8013892 <_vfiprintf_r+0x56>
 801385a:	6875      	ldr	r5, [r6, #4]
 801385c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801385e:	07d9      	lsls	r1, r3, #31
 8013860:	d405      	bmi.n	801386e <_vfiprintf_r+0x32>
 8013862:	89ab      	ldrh	r3, [r5, #12]
 8013864:	059a      	lsls	r2, r3, #22
 8013866:	d402      	bmi.n	801386e <_vfiprintf_r+0x32>
 8013868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801386a:	f000 fe61 	bl	8014530 <__retarget_lock_acquire_recursive>
 801386e:	89ab      	ldrh	r3, [r5, #12]
 8013870:	071b      	lsls	r3, r3, #28
 8013872:	d501      	bpl.n	8013878 <_vfiprintf_r+0x3c>
 8013874:	692b      	ldr	r3, [r5, #16]
 8013876:	b9eb      	cbnz	r3, 80138b4 <_vfiprintf_r+0x78>
 8013878:	4629      	mov	r1, r5
 801387a:	4630      	mov	r0, r6
 801387c:	f000 faf4 	bl	8013e68 <__swsetup_r>
 8013880:	b1c0      	cbz	r0, 80138b4 <_vfiprintf_r+0x78>
 8013882:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013884:	07dc      	lsls	r4, r3, #31
 8013886:	d50e      	bpl.n	80138a6 <_vfiprintf_r+0x6a>
 8013888:	f04f 30ff 	mov.w	r0, #4294967295
 801388c:	b01d      	add	sp, #116	; 0x74
 801388e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013892:	4b7b      	ldr	r3, [pc, #492]	; (8013a80 <_vfiprintf_r+0x244>)
 8013894:	429d      	cmp	r5, r3
 8013896:	d101      	bne.n	801389c <_vfiprintf_r+0x60>
 8013898:	68b5      	ldr	r5, [r6, #8]
 801389a:	e7df      	b.n	801385c <_vfiprintf_r+0x20>
 801389c:	4b79      	ldr	r3, [pc, #484]	; (8013a84 <_vfiprintf_r+0x248>)
 801389e:	429d      	cmp	r5, r3
 80138a0:	bf08      	it	eq
 80138a2:	68f5      	ldreq	r5, [r6, #12]
 80138a4:	e7da      	b.n	801385c <_vfiprintf_r+0x20>
 80138a6:	89ab      	ldrh	r3, [r5, #12]
 80138a8:	0598      	lsls	r0, r3, #22
 80138aa:	d4ed      	bmi.n	8013888 <_vfiprintf_r+0x4c>
 80138ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80138ae:	f000 fe40 	bl	8014532 <__retarget_lock_release_recursive>
 80138b2:	e7e9      	b.n	8013888 <_vfiprintf_r+0x4c>
 80138b4:	2300      	movs	r3, #0
 80138b6:	9309      	str	r3, [sp, #36]	; 0x24
 80138b8:	2320      	movs	r3, #32
 80138ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80138be:	f8cd 800c 	str.w	r8, [sp, #12]
 80138c2:	2330      	movs	r3, #48	; 0x30
 80138c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013a88 <_vfiprintf_r+0x24c>
 80138c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80138cc:	f04f 0901 	mov.w	r9, #1
 80138d0:	4623      	mov	r3, r4
 80138d2:	469a      	mov	sl, r3
 80138d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138d8:	b10a      	cbz	r2, 80138de <_vfiprintf_r+0xa2>
 80138da:	2a25      	cmp	r2, #37	; 0x25
 80138dc:	d1f9      	bne.n	80138d2 <_vfiprintf_r+0x96>
 80138de:	ebba 0b04 	subs.w	fp, sl, r4
 80138e2:	d00b      	beq.n	80138fc <_vfiprintf_r+0xc0>
 80138e4:	465b      	mov	r3, fp
 80138e6:	4622      	mov	r2, r4
 80138e8:	4629      	mov	r1, r5
 80138ea:	4630      	mov	r0, r6
 80138ec:	f7ff ff93 	bl	8013816 <__sfputs_r>
 80138f0:	3001      	adds	r0, #1
 80138f2:	f000 80aa 	beq.w	8013a4a <_vfiprintf_r+0x20e>
 80138f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80138f8:	445a      	add	r2, fp
 80138fa:	9209      	str	r2, [sp, #36]	; 0x24
 80138fc:	f89a 3000 	ldrb.w	r3, [sl]
 8013900:	2b00      	cmp	r3, #0
 8013902:	f000 80a2 	beq.w	8013a4a <_vfiprintf_r+0x20e>
 8013906:	2300      	movs	r3, #0
 8013908:	f04f 32ff 	mov.w	r2, #4294967295
 801390c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013910:	f10a 0a01 	add.w	sl, sl, #1
 8013914:	9304      	str	r3, [sp, #16]
 8013916:	9307      	str	r3, [sp, #28]
 8013918:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801391c:	931a      	str	r3, [sp, #104]	; 0x68
 801391e:	4654      	mov	r4, sl
 8013920:	2205      	movs	r2, #5
 8013922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013926:	4858      	ldr	r0, [pc, #352]	; (8013a88 <_vfiprintf_r+0x24c>)
 8013928:	f7ec fc32 	bl	8000190 <memchr>
 801392c:	9a04      	ldr	r2, [sp, #16]
 801392e:	b9d8      	cbnz	r0, 8013968 <_vfiprintf_r+0x12c>
 8013930:	06d1      	lsls	r1, r2, #27
 8013932:	bf44      	itt	mi
 8013934:	2320      	movmi	r3, #32
 8013936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801393a:	0713      	lsls	r3, r2, #28
 801393c:	bf44      	itt	mi
 801393e:	232b      	movmi	r3, #43	; 0x2b
 8013940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013944:	f89a 3000 	ldrb.w	r3, [sl]
 8013948:	2b2a      	cmp	r3, #42	; 0x2a
 801394a:	d015      	beq.n	8013978 <_vfiprintf_r+0x13c>
 801394c:	9a07      	ldr	r2, [sp, #28]
 801394e:	4654      	mov	r4, sl
 8013950:	2000      	movs	r0, #0
 8013952:	f04f 0c0a 	mov.w	ip, #10
 8013956:	4621      	mov	r1, r4
 8013958:	f811 3b01 	ldrb.w	r3, [r1], #1
 801395c:	3b30      	subs	r3, #48	; 0x30
 801395e:	2b09      	cmp	r3, #9
 8013960:	d94e      	bls.n	8013a00 <_vfiprintf_r+0x1c4>
 8013962:	b1b0      	cbz	r0, 8013992 <_vfiprintf_r+0x156>
 8013964:	9207      	str	r2, [sp, #28]
 8013966:	e014      	b.n	8013992 <_vfiprintf_r+0x156>
 8013968:	eba0 0308 	sub.w	r3, r0, r8
 801396c:	fa09 f303 	lsl.w	r3, r9, r3
 8013970:	4313      	orrs	r3, r2
 8013972:	9304      	str	r3, [sp, #16]
 8013974:	46a2      	mov	sl, r4
 8013976:	e7d2      	b.n	801391e <_vfiprintf_r+0xe2>
 8013978:	9b03      	ldr	r3, [sp, #12]
 801397a:	1d19      	adds	r1, r3, #4
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	9103      	str	r1, [sp, #12]
 8013980:	2b00      	cmp	r3, #0
 8013982:	bfbb      	ittet	lt
 8013984:	425b      	neglt	r3, r3
 8013986:	f042 0202 	orrlt.w	r2, r2, #2
 801398a:	9307      	strge	r3, [sp, #28]
 801398c:	9307      	strlt	r3, [sp, #28]
 801398e:	bfb8      	it	lt
 8013990:	9204      	strlt	r2, [sp, #16]
 8013992:	7823      	ldrb	r3, [r4, #0]
 8013994:	2b2e      	cmp	r3, #46	; 0x2e
 8013996:	d10c      	bne.n	80139b2 <_vfiprintf_r+0x176>
 8013998:	7863      	ldrb	r3, [r4, #1]
 801399a:	2b2a      	cmp	r3, #42	; 0x2a
 801399c:	d135      	bne.n	8013a0a <_vfiprintf_r+0x1ce>
 801399e:	9b03      	ldr	r3, [sp, #12]
 80139a0:	1d1a      	adds	r2, r3, #4
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	9203      	str	r2, [sp, #12]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	bfb8      	it	lt
 80139aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80139ae:	3402      	adds	r4, #2
 80139b0:	9305      	str	r3, [sp, #20]
 80139b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013a98 <_vfiprintf_r+0x25c>
 80139b6:	7821      	ldrb	r1, [r4, #0]
 80139b8:	2203      	movs	r2, #3
 80139ba:	4650      	mov	r0, sl
 80139bc:	f7ec fbe8 	bl	8000190 <memchr>
 80139c0:	b140      	cbz	r0, 80139d4 <_vfiprintf_r+0x198>
 80139c2:	2340      	movs	r3, #64	; 0x40
 80139c4:	eba0 000a 	sub.w	r0, r0, sl
 80139c8:	fa03 f000 	lsl.w	r0, r3, r0
 80139cc:	9b04      	ldr	r3, [sp, #16]
 80139ce:	4303      	orrs	r3, r0
 80139d0:	3401      	adds	r4, #1
 80139d2:	9304      	str	r3, [sp, #16]
 80139d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139d8:	482c      	ldr	r0, [pc, #176]	; (8013a8c <_vfiprintf_r+0x250>)
 80139da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80139de:	2206      	movs	r2, #6
 80139e0:	f7ec fbd6 	bl	8000190 <memchr>
 80139e4:	2800      	cmp	r0, #0
 80139e6:	d03f      	beq.n	8013a68 <_vfiprintf_r+0x22c>
 80139e8:	4b29      	ldr	r3, [pc, #164]	; (8013a90 <_vfiprintf_r+0x254>)
 80139ea:	bb1b      	cbnz	r3, 8013a34 <_vfiprintf_r+0x1f8>
 80139ec:	9b03      	ldr	r3, [sp, #12]
 80139ee:	3307      	adds	r3, #7
 80139f0:	f023 0307 	bic.w	r3, r3, #7
 80139f4:	3308      	adds	r3, #8
 80139f6:	9303      	str	r3, [sp, #12]
 80139f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139fa:	443b      	add	r3, r7
 80139fc:	9309      	str	r3, [sp, #36]	; 0x24
 80139fe:	e767      	b.n	80138d0 <_vfiprintf_r+0x94>
 8013a00:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a04:	460c      	mov	r4, r1
 8013a06:	2001      	movs	r0, #1
 8013a08:	e7a5      	b.n	8013956 <_vfiprintf_r+0x11a>
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	3401      	adds	r4, #1
 8013a0e:	9305      	str	r3, [sp, #20]
 8013a10:	4619      	mov	r1, r3
 8013a12:	f04f 0c0a 	mov.w	ip, #10
 8013a16:	4620      	mov	r0, r4
 8013a18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a1c:	3a30      	subs	r2, #48	; 0x30
 8013a1e:	2a09      	cmp	r2, #9
 8013a20:	d903      	bls.n	8013a2a <_vfiprintf_r+0x1ee>
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d0c5      	beq.n	80139b2 <_vfiprintf_r+0x176>
 8013a26:	9105      	str	r1, [sp, #20]
 8013a28:	e7c3      	b.n	80139b2 <_vfiprintf_r+0x176>
 8013a2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a2e:	4604      	mov	r4, r0
 8013a30:	2301      	movs	r3, #1
 8013a32:	e7f0      	b.n	8013a16 <_vfiprintf_r+0x1da>
 8013a34:	ab03      	add	r3, sp, #12
 8013a36:	9300      	str	r3, [sp, #0]
 8013a38:	462a      	mov	r2, r5
 8013a3a:	4b16      	ldr	r3, [pc, #88]	; (8013a94 <_vfiprintf_r+0x258>)
 8013a3c:	a904      	add	r1, sp, #16
 8013a3e:	4630      	mov	r0, r6
 8013a40:	f3af 8000 	nop.w
 8013a44:	4607      	mov	r7, r0
 8013a46:	1c78      	adds	r0, r7, #1
 8013a48:	d1d6      	bne.n	80139f8 <_vfiprintf_r+0x1bc>
 8013a4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013a4c:	07d9      	lsls	r1, r3, #31
 8013a4e:	d405      	bmi.n	8013a5c <_vfiprintf_r+0x220>
 8013a50:	89ab      	ldrh	r3, [r5, #12]
 8013a52:	059a      	lsls	r2, r3, #22
 8013a54:	d402      	bmi.n	8013a5c <_vfiprintf_r+0x220>
 8013a56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013a58:	f000 fd6b 	bl	8014532 <__retarget_lock_release_recursive>
 8013a5c:	89ab      	ldrh	r3, [r5, #12]
 8013a5e:	065b      	lsls	r3, r3, #25
 8013a60:	f53f af12 	bmi.w	8013888 <_vfiprintf_r+0x4c>
 8013a64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a66:	e711      	b.n	801388c <_vfiprintf_r+0x50>
 8013a68:	ab03      	add	r3, sp, #12
 8013a6a:	9300      	str	r3, [sp, #0]
 8013a6c:	462a      	mov	r2, r5
 8013a6e:	4b09      	ldr	r3, [pc, #36]	; (8013a94 <_vfiprintf_r+0x258>)
 8013a70:	a904      	add	r1, sp, #16
 8013a72:	4630      	mov	r0, r6
 8013a74:	f000 f880 	bl	8013b78 <_printf_i>
 8013a78:	e7e4      	b.n	8013a44 <_vfiprintf_r+0x208>
 8013a7a:	bf00      	nop
 8013a7c:	08016ad0 	.word	0x08016ad0
 8013a80:	08016af0 	.word	0x08016af0
 8013a84:	08016ab0 	.word	0x08016ab0
 8013a88:	08016a7c 	.word	0x08016a7c
 8013a8c:	08016a86 	.word	0x08016a86
 8013a90:	00000000 	.word	0x00000000
 8013a94:	08013817 	.word	0x08013817
 8013a98:	08016a82 	.word	0x08016a82

08013a9c <_printf_common>:
 8013a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013aa0:	4616      	mov	r6, r2
 8013aa2:	4699      	mov	r9, r3
 8013aa4:	688a      	ldr	r2, [r1, #8]
 8013aa6:	690b      	ldr	r3, [r1, #16]
 8013aa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013aac:	4293      	cmp	r3, r2
 8013aae:	bfb8      	it	lt
 8013ab0:	4613      	movlt	r3, r2
 8013ab2:	6033      	str	r3, [r6, #0]
 8013ab4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013ab8:	4607      	mov	r7, r0
 8013aba:	460c      	mov	r4, r1
 8013abc:	b10a      	cbz	r2, 8013ac2 <_printf_common+0x26>
 8013abe:	3301      	adds	r3, #1
 8013ac0:	6033      	str	r3, [r6, #0]
 8013ac2:	6823      	ldr	r3, [r4, #0]
 8013ac4:	0699      	lsls	r1, r3, #26
 8013ac6:	bf42      	ittt	mi
 8013ac8:	6833      	ldrmi	r3, [r6, #0]
 8013aca:	3302      	addmi	r3, #2
 8013acc:	6033      	strmi	r3, [r6, #0]
 8013ace:	6825      	ldr	r5, [r4, #0]
 8013ad0:	f015 0506 	ands.w	r5, r5, #6
 8013ad4:	d106      	bne.n	8013ae4 <_printf_common+0x48>
 8013ad6:	f104 0a19 	add.w	sl, r4, #25
 8013ada:	68e3      	ldr	r3, [r4, #12]
 8013adc:	6832      	ldr	r2, [r6, #0]
 8013ade:	1a9b      	subs	r3, r3, r2
 8013ae0:	42ab      	cmp	r3, r5
 8013ae2:	dc26      	bgt.n	8013b32 <_printf_common+0x96>
 8013ae4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013ae8:	1e13      	subs	r3, r2, #0
 8013aea:	6822      	ldr	r2, [r4, #0]
 8013aec:	bf18      	it	ne
 8013aee:	2301      	movne	r3, #1
 8013af0:	0692      	lsls	r2, r2, #26
 8013af2:	d42b      	bmi.n	8013b4c <_printf_common+0xb0>
 8013af4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013af8:	4649      	mov	r1, r9
 8013afa:	4638      	mov	r0, r7
 8013afc:	47c0      	blx	r8
 8013afe:	3001      	adds	r0, #1
 8013b00:	d01e      	beq.n	8013b40 <_printf_common+0xa4>
 8013b02:	6823      	ldr	r3, [r4, #0]
 8013b04:	68e5      	ldr	r5, [r4, #12]
 8013b06:	6832      	ldr	r2, [r6, #0]
 8013b08:	f003 0306 	and.w	r3, r3, #6
 8013b0c:	2b04      	cmp	r3, #4
 8013b0e:	bf08      	it	eq
 8013b10:	1aad      	subeq	r5, r5, r2
 8013b12:	68a3      	ldr	r3, [r4, #8]
 8013b14:	6922      	ldr	r2, [r4, #16]
 8013b16:	bf0c      	ite	eq
 8013b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013b1c:	2500      	movne	r5, #0
 8013b1e:	4293      	cmp	r3, r2
 8013b20:	bfc4      	itt	gt
 8013b22:	1a9b      	subgt	r3, r3, r2
 8013b24:	18ed      	addgt	r5, r5, r3
 8013b26:	2600      	movs	r6, #0
 8013b28:	341a      	adds	r4, #26
 8013b2a:	42b5      	cmp	r5, r6
 8013b2c:	d11a      	bne.n	8013b64 <_printf_common+0xc8>
 8013b2e:	2000      	movs	r0, #0
 8013b30:	e008      	b.n	8013b44 <_printf_common+0xa8>
 8013b32:	2301      	movs	r3, #1
 8013b34:	4652      	mov	r2, sl
 8013b36:	4649      	mov	r1, r9
 8013b38:	4638      	mov	r0, r7
 8013b3a:	47c0      	blx	r8
 8013b3c:	3001      	adds	r0, #1
 8013b3e:	d103      	bne.n	8013b48 <_printf_common+0xac>
 8013b40:	f04f 30ff 	mov.w	r0, #4294967295
 8013b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b48:	3501      	adds	r5, #1
 8013b4a:	e7c6      	b.n	8013ada <_printf_common+0x3e>
 8013b4c:	18e1      	adds	r1, r4, r3
 8013b4e:	1c5a      	adds	r2, r3, #1
 8013b50:	2030      	movs	r0, #48	; 0x30
 8013b52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013b56:	4422      	add	r2, r4
 8013b58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013b5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013b60:	3302      	adds	r3, #2
 8013b62:	e7c7      	b.n	8013af4 <_printf_common+0x58>
 8013b64:	2301      	movs	r3, #1
 8013b66:	4622      	mov	r2, r4
 8013b68:	4649      	mov	r1, r9
 8013b6a:	4638      	mov	r0, r7
 8013b6c:	47c0      	blx	r8
 8013b6e:	3001      	adds	r0, #1
 8013b70:	d0e6      	beq.n	8013b40 <_printf_common+0xa4>
 8013b72:	3601      	adds	r6, #1
 8013b74:	e7d9      	b.n	8013b2a <_printf_common+0x8e>
	...

08013b78 <_printf_i>:
 8013b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013b7c:	7e0f      	ldrb	r7, [r1, #24]
 8013b7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013b80:	2f78      	cmp	r7, #120	; 0x78
 8013b82:	4691      	mov	r9, r2
 8013b84:	4680      	mov	r8, r0
 8013b86:	460c      	mov	r4, r1
 8013b88:	469a      	mov	sl, r3
 8013b8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013b8e:	d807      	bhi.n	8013ba0 <_printf_i+0x28>
 8013b90:	2f62      	cmp	r7, #98	; 0x62
 8013b92:	d80a      	bhi.n	8013baa <_printf_i+0x32>
 8013b94:	2f00      	cmp	r7, #0
 8013b96:	f000 80d8 	beq.w	8013d4a <_printf_i+0x1d2>
 8013b9a:	2f58      	cmp	r7, #88	; 0x58
 8013b9c:	f000 80a3 	beq.w	8013ce6 <_printf_i+0x16e>
 8013ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013ba4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013ba8:	e03a      	b.n	8013c20 <_printf_i+0xa8>
 8013baa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013bae:	2b15      	cmp	r3, #21
 8013bb0:	d8f6      	bhi.n	8013ba0 <_printf_i+0x28>
 8013bb2:	a101      	add	r1, pc, #4	; (adr r1, 8013bb8 <_printf_i+0x40>)
 8013bb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013bb8:	08013c11 	.word	0x08013c11
 8013bbc:	08013c25 	.word	0x08013c25
 8013bc0:	08013ba1 	.word	0x08013ba1
 8013bc4:	08013ba1 	.word	0x08013ba1
 8013bc8:	08013ba1 	.word	0x08013ba1
 8013bcc:	08013ba1 	.word	0x08013ba1
 8013bd0:	08013c25 	.word	0x08013c25
 8013bd4:	08013ba1 	.word	0x08013ba1
 8013bd8:	08013ba1 	.word	0x08013ba1
 8013bdc:	08013ba1 	.word	0x08013ba1
 8013be0:	08013ba1 	.word	0x08013ba1
 8013be4:	08013d31 	.word	0x08013d31
 8013be8:	08013c55 	.word	0x08013c55
 8013bec:	08013d13 	.word	0x08013d13
 8013bf0:	08013ba1 	.word	0x08013ba1
 8013bf4:	08013ba1 	.word	0x08013ba1
 8013bf8:	08013d53 	.word	0x08013d53
 8013bfc:	08013ba1 	.word	0x08013ba1
 8013c00:	08013c55 	.word	0x08013c55
 8013c04:	08013ba1 	.word	0x08013ba1
 8013c08:	08013ba1 	.word	0x08013ba1
 8013c0c:	08013d1b 	.word	0x08013d1b
 8013c10:	682b      	ldr	r3, [r5, #0]
 8013c12:	1d1a      	adds	r2, r3, #4
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	602a      	str	r2, [r5, #0]
 8013c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013c1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013c20:	2301      	movs	r3, #1
 8013c22:	e0a3      	b.n	8013d6c <_printf_i+0x1f4>
 8013c24:	6820      	ldr	r0, [r4, #0]
 8013c26:	6829      	ldr	r1, [r5, #0]
 8013c28:	0606      	lsls	r6, r0, #24
 8013c2a:	f101 0304 	add.w	r3, r1, #4
 8013c2e:	d50a      	bpl.n	8013c46 <_printf_i+0xce>
 8013c30:	680e      	ldr	r6, [r1, #0]
 8013c32:	602b      	str	r3, [r5, #0]
 8013c34:	2e00      	cmp	r6, #0
 8013c36:	da03      	bge.n	8013c40 <_printf_i+0xc8>
 8013c38:	232d      	movs	r3, #45	; 0x2d
 8013c3a:	4276      	negs	r6, r6
 8013c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c40:	485e      	ldr	r0, [pc, #376]	; (8013dbc <_printf_i+0x244>)
 8013c42:	230a      	movs	r3, #10
 8013c44:	e019      	b.n	8013c7a <_printf_i+0x102>
 8013c46:	680e      	ldr	r6, [r1, #0]
 8013c48:	602b      	str	r3, [r5, #0]
 8013c4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013c4e:	bf18      	it	ne
 8013c50:	b236      	sxthne	r6, r6
 8013c52:	e7ef      	b.n	8013c34 <_printf_i+0xbc>
 8013c54:	682b      	ldr	r3, [r5, #0]
 8013c56:	6820      	ldr	r0, [r4, #0]
 8013c58:	1d19      	adds	r1, r3, #4
 8013c5a:	6029      	str	r1, [r5, #0]
 8013c5c:	0601      	lsls	r1, r0, #24
 8013c5e:	d501      	bpl.n	8013c64 <_printf_i+0xec>
 8013c60:	681e      	ldr	r6, [r3, #0]
 8013c62:	e002      	b.n	8013c6a <_printf_i+0xf2>
 8013c64:	0646      	lsls	r6, r0, #25
 8013c66:	d5fb      	bpl.n	8013c60 <_printf_i+0xe8>
 8013c68:	881e      	ldrh	r6, [r3, #0]
 8013c6a:	4854      	ldr	r0, [pc, #336]	; (8013dbc <_printf_i+0x244>)
 8013c6c:	2f6f      	cmp	r7, #111	; 0x6f
 8013c6e:	bf0c      	ite	eq
 8013c70:	2308      	moveq	r3, #8
 8013c72:	230a      	movne	r3, #10
 8013c74:	2100      	movs	r1, #0
 8013c76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013c7a:	6865      	ldr	r5, [r4, #4]
 8013c7c:	60a5      	str	r5, [r4, #8]
 8013c7e:	2d00      	cmp	r5, #0
 8013c80:	bfa2      	ittt	ge
 8013c82:	6821      	ldrge	r1, [r4, #0]
 8013c84:	f021 0104 	bicge.w	r1, r1, #4
 8013c88:	6021      	strge	r1, [r4, #0]
 8013c8a:	b90e      	cbnz	r6, 8013c90 <_printf_i+0x118>
 8013c8c:	2d00      	cmp	r5, #0
 8013c8e:	d04d      	beq.n	8013d2c <_printf_i+0x1b4>
 8013c90:	4615      	mov	r5, r2
 8013c92:	fbb6 f1f3 	udiv	r1, r6, r3
 8013c96:	fb03 6711 	mls	r7, r3, r1, r6
 8013c9a:	5dc7      	ldrb	r7, [r0, r7]
 8013c9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013ca0:	4637      	mov	r7, r6
 8013ca2:	42bb      	cmp	r3, r7
 8013ca4:	460e      	mov	r6, r1
 8013ca6:	d9f4      	bls.n	8013c92 <_printf_i+0x11a>
 8013ca8:	2b08      	cmp	r3, #8
 8013caa:	d10b      	bne.n	8013cc4 <_printf_i+0x14c>
 8013cac:	6823      	ldr	r3, [r4, #0]
 8013cae:	07de      	lsls	r6, r3, #31
 8013cb0:	d508      	bpl.n	8013cc4 <_printf_i+0x14c>
 8013cb2:	6923      	ldr	r3, [r4, #16]
 8013cb4:	6861      	ldr	r1, [r4, #4]
 8013cb6:	4299      	cmp	r1, r3
 8013cb8:	bfde      	ittt	le
 8013cba:	2330      	movle	r3, #48	; 0x30
 8013cbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013cc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013cc4:	1b52      	subs	r2, r2, r5
 8013cc6:	6122      	str	r2, [r4, #16]
 8013cc8:	f8cd a000 	str.w	sl, [sp]
 8013ccc:	464b      	mov	r3, r9
 8013cce:	aa03      	add	r2, sp, #12
 8013cd0:	4621      	mov	r1, r4
 8013cd2:	4640      	mov	r0, r8
 8013cd4:	f7ff fee2 	bl	8013a9c <_printf_common>
 8013cd8:	3001      	adds	r0, #1
 8013cda:	d14c      	bne.n	8013d76 <_printf_i+0x1fe>
 8013cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8013ce0:	b004      	add	sp, #16
 8013ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ce6:	4835      	ldr	r0, [pc, #212]	; (8013dbc <_printf_i+0x244>)
 8013ce8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013cec:	6829      	ldr	r1, [r5, #0]
 8013cee:	6823      	ldr	r3, [r4, #0]
 8013cf0:	f851 6b04 	ldr.w	r6, [r1], #4
 8013cf4:	6029      	str	r1, [r5, #0]
 8013cf6:	061d      	lsls	r5, r3, #24
 8013cf8:	d514      	bpl.n	8013d24 <_printf_i+0x1ac>
 8013cfa:	07df      	lsls	r7, r3, #31
 8013cfc:	bf44      	itt	mi
 8013cfe:	f043 0320 	orrmi.w	r3, r3, #32
 8013d02:	6023      	strmi	r3, [r4, #0]
 8013d04:	b91e      	cbnz	r6, 8013d0e <_printf_i+0x196>
 8013d06:	6823      	ldr	r3, [r4, #0]
 8013d08:	f023 0320 	bic.w	r3, r3, #32
 8013d0c:	6023      	str	r3, [r4, #0]
 8013d0e:	2310      	movs	r3, #16
 8013d10:	e7b0      	b.n	8013c74 <_printf_i+0xfc>
 8013d12:	6823      	ldr	r3, [r4, #0]
 8013d14:	f043 0320 	orr.w	r3, r3, #32
 8013d18:	6023      	str	r3, [r4, #0]
 8013d1a:	2378      	movs	r3, #120	; 0x78
 8013d1c:	4828      	ldr	r0, [pc, #160]	; (8013dc0 <_printf_i+0x248>)
 8013d1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013d22:	e7e3      	b.n	8013cec <_printf_i+0x174>
 8013d24:	0659      	lsls	r1, r3, #25
 8013d26:	bf48      	it	mi
 8013d28:	b2b6      	uxthmi	r6, r6
 8013d2a:	e7e6      	b.n	8013cfa <_printf_i+0x182>
 8013d2c:	4615      	mov	r5, r2
 8013d2e:	e7bb      	b.n	8013ca8 <_printf_i+0x130>
 8013d30:	682b      	ldr	r3, [r5, #0]
 8013d32:	6826      	ldr	r6, [r4, #0]
 8013d34:	6961      	ldr	r1, [r4, #20]
 8013d36:	1d18      	adds	r0, r3, #4
 8013d38:	6028      	str	r0, [r5, #0]
 8013d3a:	0635      	lsls	r5, r6, #24
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	d501      	bpl.n	8013d44 <_printf_i+0x1cc>
 8013d40:	6019      	str	r1, [r3, #0]
 8013d42:	e002      	b.n	8013d4a <_printf_i+0x1d2>
 8013d44:	0670      	lsls	r0, r6, #25
 8013d46:	d5fb      	bpl.n	8013d40 <_printf_i+0x1c8>
 8013d48:	8019      	strh	r1, [r3, #0]
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	6123      	str	r3, [r4, #16]
 8013d4e:	4615      	mov	r5, r2
 8013d50:	e7ba      	b.n	8013cc8 <_printf_i+0x150>
 8013d52:	682b      	ldr	r3, [r5, #0]
 8013d54:	1d1a      	adds	r2, r3, #4
 8013d56:	602a      	str	r2, [r5, #0]
 8013d58:	681d      	ldr	r5, [r3, #0]
 8013d5a:	6862      	ldr	r2, [r4, #4]
 8013d5c:	2100      	movs	r1, #0
 8013d5e:	4628      	mov	r0, r5
 8013d60:	f7ec fa16 	bl	8000190 <memchr>
 8013d64:	b108      	cbz	r0, 8013d6a <_printf_i+0x1f2>
 8013d66:	1b40      	subs	r0, r0, r5
 8013d68:	6060      	str	r0, [r4, #4]
 8013d6a:	6863      	ldr	r3, [r4, #4]
 8013d6c:	6123      	str	r3, [r4, #16]
 8013d6e:	2300      	movs	r3, #0
 8013d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013d74:	e7a8      	b.n	8013cc8 <_printf_i+0x150>
 8013d76:	6923      	ldr	r3, [r4, #16]
 8013d78:	462a      	mov	r2, r5
 8013d7a:	4649      	mov	r1, r9
 8013d7c:	4640      	mov	r0, r8
 8013d7e:	47d0      	blx	sl
 8013d80:	3001      	adds	r0, #1
 8013d82:	d0ab      	beq.n	8013cdc <_printf_i+0x164>
 8013d84:	6823      	ldr	r3, [r4, #0]
 8013d86:	079b      	lsls	r3, r3, #30
 8013d88:	d413      	bmi.n	8013db2 <_printf_i+0x23a>
 8013d8a:	68e0      	ldr	r0, [r4, #12]
 8013d8c:	9b03      	ldr	r3, [sp, #12]
 8013d8e:	4298      	cmp	r0, r3
 8013d90:	bfb8      	it	lt
 8013d92:	4618      	movlt	r0, r3
 8013d94:	e7a4      	b.n	8013ce0 <_printf_i+0x168>
 8013d96:	2301      	movs	r3, #1
 8013d98:	4632      	mov	r2, r6
 8013d9a:	4649      	mov	r1, r9
 8013d9c:	4640      	mov	r0, r8
 8013d9e:	47d0      	blx	sl
 8013da0:	3001      	adds	r0, #1
 8013da2:	d09b      	beq.n	8013cdc <_printf_i+0x164>
 8013da4:	3501      	adds	r5, #1
 8013da6:	68e3      	ldr	r3, [r4, #12]
 8013da8:	9903      	ldr	r1, [sp, #12]
 8013daa:	1a5b      	subs	r3, r3, r1
 8013dac:	42ab      	cmp	r3, r5
 8013dae:	dcf2      	bgt.n	8013d96 <_printf_i+0x21e>
 8013db0:	e7eb      	b.n	8013d8a <_printf_i+0x212>
 8013db2:	2500      	movs	r5, #0
 8013db4:	f104 0619 	add.w	r6, r4, #25
 8013db8:	e7f5      	b.n	8013da6 <_printf_i+0x22e>
 8013dba:	bf00      	nop
 8013dbc:	08016a8d 	.word	0x08016a8d
 8013dc0:	08016a9e 	.word	0x08016a9e

08013dc4 <__swbuf_r>:
 8013dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dc6:	460e      	mov	r6, r1
 8013dc8:	4614      	mov	r4, r2
 8013dca:	4605      	mov	r5, r0
 8013dcc:	b118      	cbz	r0, 8013dd6 <__swbuf_r+0x12>
 8013dce:	6983      	ldr	r3, [r0, #24]
 8013dd0:	b90b      	cbnz	r3, 8013dd6 <__swbuf_r+0x12>
 8013dd2:	f000 fb0f 	bl	80143f4 <__sinit>
 8013dd6:	4b21      	ldr	r3, [pc, #132]	; (8013e5c <__swbuf_r+0x98>)
 8013dd8:	429c      	cmp	r4, r3
 8013dda:	d12b      	bne.n	8013e34 <__swbuf_r+0x70>
 8013ddc:	686c      	ldr	r4, [r5, #4]
 8013dde:	69a3      	ldr	r3, [r4, #24]
 8013de0:	60a3      	str	r3, [r4, #8]
 8013de2:	89a3      	ldrh	r3, [r4, #12]
 8013de4:	071a      	lsls	r2, r3, #28
 8013de6:	d52f      	bpl.n	8013e48 <__swbuf_r+0x84>
 8013de8:	6923      	ldr	r3, [r4, #16]
 8013dea:	b36b      	cbz	r3, 8013e48 <__swbuf_r+0x84>
 8013dec:	6923      	ldr	r3, [r4, #16]
 8013dee:	6820      	ldr	r0, [r4, #0]
 8013df0:	1ac0      	subs	r0, r0, r3
 8013df2:	6963      	ldr	r3, [r4, #20]
 8013df4:	b2f6      	uxtb	r6, r6
 8013df6:	4283      	cmp	r3, r0
 8013df8:	4637      	mov	r7, r6
 8013dfa:	dc04      	bgt.n	8013e06 <__swbuf_r+0x42>
 8013dfc:	4621      	mov	r1, r4
 8013dfe:	4628      	mov	r0, r5
 8013e00:	f000 fa64 	bl	80142cc <_fflush_r>
 8013e04:	bb30      	cbnz	r0, 8013e54 <__swbuf_r+0x90>
 8013e06:	68a3      	ldr	r3, [r4, #8]
 8013e08:	3b01      	subs	r3, #1
 8013e0a:	60a3      	str	r3, [r4, #8]
 8013e0c:	6823      	ldr	r3, [r4, #0]
 8013e0e:	1c5a      	adds	r2, r3, #1
 8013e10:	6022      	str	r2, [r4, #0]
 8013e12:	701e      	strb	r6, [r3, #0]
 8013e14:	6963      	ldr	r3, [r4, #20]
 8013e16:	3001      	adds	r0, #1
 8013e18:	4283      	cmp	r3, r0
 8013e1a:	d004      	beq.n	8013e26 <__swbuf_r+0x62>
 8013e1c:	89a3      	ldrh	r3, [r4, #12]
 8013e1e:	07db      	lsls	r3, r3, #31
 8013e20:	d506      	bpl.n	8013e30 <__swbuf_r+0x6c>
 8013e22:	2e0a      	cmp	r6, #10
 8013e24:	d104      	bne.n	8013e30 <__swbuf_r+0x6c>
 8013e26:	4621      	mov	r1, r4
 8013e28:	4628      	mov	r0, r5
 8013e2a:	f000 fa4f 	bl	80142cc <_fflush_r>
 8013e2e:	b988      	cbnz	r0, 8013e54 <__swbuf_r+0x90>
 8013e30:	4638      	mov	r0, r7
 8013e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e34:	4b0a      	ldr	r3, [pc, #40]	; (8013e60 <__swbuf_r+0x9c>)
 8013e36:	429c      	cmp	r4, r3
 8013e38:	d101      	bne.n	8013e3e <__swbuf_r+0x7a>
 8013e3a:	68ac      	ldr	r4, [r5, #8]
 8013e3c:	e7cf      	b.n	8013dde <__swbuf_r+0x1a>
 8013e3e:	4b09      	ldr	r3, [pc, #36]	; (8013e64 <__swbuf_r+0xa0>)
 8013e40:	429c      	cmp	r4, r3
 8013e42:	bf08      	it	eq
 8013e44:	68ec      	ldreq	r4, [r5, #12]
 8013e46:	e7ca      	b.n	8013dde <__swbuf_r+0x1a>
 8013e48:	4621      	mov	r1, r4
 8013e4a:	4628      	mov	r0, r5
 8013e4c:	f000 f80c 	bl	8013e68 <__swsetup_r>
 8013e50:	2800      	cmp	r0, #0
 8013e52:	d0cb      	beq.n	8013dec <__swbuf_r+0x28>
 8013e54:	f04f 37ff 	mov.w	r7, #4294967295
 8013e58:	e7ea      	b.n	8013e30 <__swbuf_r+0x6c>
 8013e5a:	bf00      	nop
 8013e5c:	08016ad0 	.word	0x08016ad0
 8013e60:	08016af0 	.word	0x08016af0
 8013e64:	08016ab0 	.word	0x08016ab0

08013e68 <__swsetup_r>:
 8013e68:	4b32      	ldr	r3, [pc, #200]	; (8013f34 <__swsetup_r+0xcc>)
 8013e6a:	b570      	push	{r4, r5, r6, lr}
 8013e6c:	681d      	ldr	r5, [r3, #0]
 8013e6e:	4606      	mov	r6, r0
 8013e70:	460c      	mov	r4, r1
 8013e72:	b125      	cbz	r5, 8013e7e <__swsetup_r+0x16>
 8013e74:	69ab      	ldr	r3, [r5, #24]
 8013e76:	b913      	cbnz	r3, 8013e7e <__swsetup_r+0x16>
 8013e78:	4628      	mov	r0, r5
 8013e7a:	f000 fabb 	bl	80143f4 <__sinit>
 8013e7e:	4b2e      	ldr	r3, [pc, #184]	; (8013f38 <__swsetup_r+0xd0>)
 8013e80:	429c      	cmp	r4, r3
 8013e82:	d10f      	bne.n	8013ea4 <__swsetup_r+0x3c>
 8013e84:	686c      	ldr	r4, [r5, #4]
 8013e86:	89a3      	ldrh	r3, [r4, #12]
 8013e88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013e8c:	0719      	lsls	r1, r3, #28
 8013e8e:	d42c      	bmi.n	8013eea <__swsetup_r+0x82>
 8013e90:	06dd      	lsls	r5, r3, #27
 8013e92:	d411      	bmi.n	8013eb8 <__swsetup_r+0x50>
 8013e94:	2309      	movs	r3, #9
 8013e96:	6033      	str	r3, [r6, #0]
 8013e98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013e9c:	81a3      	strh	r3, [r4, #12]
 8013e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8013ea2:	e03e      	b.n	8013f22 <__swsetup_r+0xba>
 8013ea4:	4b25      	ldr	r3, [pc, #148]	; (8013f3c <__swsetup_r+0xd4>)
 8013ea6:	429c      	cmp	r4, r3
 8013ea8:	d101      	bne.n	8013eae <__swsetup_r+0x46>
 8013eaa:	68ac      	ldr	r4, [r5, #8]
 8013eac:	e7eb      	b.n	8013e86 <__swsetup_r+0x1e>
 8013eae:	4b24      	ldr	r3, [pc, #144]	; (8013f40 <__swsetup_r+0xd8>)
 8013eb0:	429c      	cmp	r4, r3
 8013eb2:	bf08      	it	eq
 8013eb4:	68ec      	ldreq	r4, [r5, #12]
 8013eb6:	e7e6      	b.n	8013e86 <__swsetup_r+0x1e>
 8013eb8:	0758      	lsls	r0, r3, #29
 8013eba:	d512      	bpl.n	8013ee2 <__swsetup_r+0x7a>
 8013ebc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ebe:	b141      	cbz	r1, 8013ed2 <__swsetup_r+0x6a>
 8013ec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013ec4:	4299      	cmp	r1, r3
 8013ec6:	d002      	beq.n	8013ece <__swsetup_r+0x66>
 8013ec8:	4630      	mov	r0, r6
 8013eca:	f000 ff51 	bl	8014d70 <_free_r>
 8013ece:	2300      	movs	r3, #0
 8013ed0:	6363      	str	r3, [r4, #52]	; 0x34
 8013ed2:	89a3      	ldrh	r3, [r4, #12]
 8013ed4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013ed8:	81a3      	strh	r3, [r4, #12]
 8013eda:	2300      	movs	r3, #0
 8013edc:	6063      	str	r3, [r4, #4]
 8013ede:	6923      	ldr	r3, [r4, #16]
 8013ee0:	6023      	str	r3, [r4, #0]
 8013ee2:	89a3      	ldrh	r3, [r4, #12]
 8013ee4:	f043 0308 	orr.w	r3, r3, #8
 8013ee8:	81a3      	strh	r3, [r4, #12]
 8013eea:	6923      	ldr	r3, [r4, #16]
 8013eec:	b94b      	cbnz	r3, 8013f02 <__swsetup_r+0x9a>
 8013eee:	89a3      	ldrh	r3, [r4, #12]
 8013ef0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013ef8:	d003      	beq.n	8013f02 <__swsetup_r+0x9a>
 8013efa:	4621      	mov	r1, r4
 8013efc:	4630      	mov	r0, r6
 8013efe:	f000 fb3f 	bl	8014580 <__smakebuf_r>
 8013f02:	89a0      	ldrh	r0, [r4, #12]
 8013f04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013f08:	f010 0301 	ands.w	r3, r0, #1
 8013f0c:	d00a      	beq.n	8013f24 <__swsetup_r+0xbc>
 8013f0e:	2300      	movs	r3, #0
 8013f10:	60a3      	str	r3, [r4, #8]
 8013f12:	6963      	ldr	r3, [r4, #20]
 8013f14:	425b      	negs	r3, r3
 8013f16:	61a3      	str	r3, [r4, #24]
 8013f18:	6923      	ldr	r3, [r4, #16]
 8013f1a:	b943      	cbnz	r3, 8013f2e <__swsetup_r+0xc6>
 8013f1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013f20:	d1ba      	bne.n	8013e98 <__swsetup_r+0x30>
 8013f22:	bd70      	pop	{r4, r5, r6, pc}
 8013f24:	0781      	lsls	r1, r0, #30
 8013f26:	bf58      	it	pl
 8013f28:	6963      	ldrpl	r3, [r4, #20]
 8013f2a:	60a3      	str	r3, [r4, #8]
 8013f2c:	e7f4      	b.n	8013f18 <__swsetup_r+0xb0>
 8013f2e:	2000      	movs	r0, #0
 8013f30:	e7f7      	b.n	8013f22 <__swsetup_r+0xba>
 8013f32:	bf00      	nop
 8013f34:	2000014c 	.word	0x2000014c
 8013f38:	08016ad0 	.word	0x08016ad0
 8013f3c:	08016af0 	.word	0x08016af0
 8013f40:	08016ab0 	.word	0x08016ab0

08013f44 <abort>:
 8013f44:	b508      	push	{r3, lr}
 8013f46:	2006      	movs	r0, #6
 8013f48:	f001 f82a 	bl	8014fa0 <raise>
 8013f4c:	2001      	movs	r0, #1
 8013f4e:	f7ee fd05 	bl	800295c <_exit>

08013f52 <print_e>:
 8013f52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f54:	b087      	sub	sp, #28
 8013f56:	ec43 2b10 	vmov	d0, r2, r3
 8013f5a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8013f5c:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8013f60:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8013f62:	ab04      	add	r3, sp, #16
 8013f64:	9301      	str	r3, [sp, #4]
 8013f66:	ab03      	add	r3, sp, #12
 8013f68:	9300      	str	r3, [sp, #0]
 8013f6a:	1c62      	adds	r2, r4, #1
 8013f6c:	ab05      	add	r3, sp, #20
 8013f6e:	460f      	mov	r7, r1
 8013f70:	2102      	movs	r1, #2
 8013f72:	f001 f92d 	bl	80151d0 <_dtoa_r>
 8013f76:	9a05      	ldr	r2, [sp, #20]
 8013f78:	f242 730f 	movw	r3, #9999	; 0x270f
 8013f7c:	429a      	cmp	r2, r3
 8013f7e:	d105      	bne.n	8013f8c <print_e+0x3a>
 8013f80:	4601      	mov	r1, r0
 8013f82:	4638      	mov	r0, r7
 8013f84:	f001 f86b 	bl	801505e <strcpy>
 8013f88:	b007      	add	sp, #28
 8013f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f8c:	463b      	mov	r3, r7
 8013f8e:	7801      	ldrb	r1, [r0, #0]
 8013f90:	f803 1b01 	strb.w	r1, [r3], #1
 8013f94:	2c00      	cmp	r4, #0
 8013f96:	bfc8      	it	gt
 8013f98:	2501      	movgt	r5, #1
 8013f9a:	212e      	movs	r1, #46	; 0x2e
 8013f9c:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8013fa0:	b10f      	cbz	r7, 8013fa6 <print_e+0x54>
 8013fa2:	2c00      	cmp	r4, #0
 8013fa4:	dc37      	bgt.n	8014016 <print_e+0xc4>
 8013fa6:	2e67      	cmp	r6, #103	; 0x67
 8013fa8:	d046      	beq.n	8014038 <print_e+0xe6>
 8013faa:	2e47      	cmp	r6, #71	; 0x47
 8013fac:	d046      	beq.n	801403c <print_e+0xea>
 8013fae:	212e      	movs	r1, #46	; 0x2e
 8013fb0:	2030      	movs	r0, #48	; 0x30
 8013fb2:	2c00      	cmp	r4, #0
 8013fb4:	dc38      	bgt.n	8014028 <print_e+0xd6>
 8013fb6:	1e51      	subs	r1, r2, #1
 8013fb8:	2900      	cmp	r1, #0
 8013fba:	bfb8      	it	lt
 8013fbc:	f1c2 0201 	rsblt	r2, r2, #1
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	9105      	str	r1, [sp, #20]
 8013fc4:	bfac      	ite	ge
 8013fc6:	222b      	movge	r2, #43	; 0x2b
 8013fc8:	9205      	strlt	r2, [sp, #20]
 8013fca:	f800 6b02 	strb.w	r6, [r0], #2
 8013fce:	bfa8      	it	ge
 8013fd0:	705a      	strbge	r2, [r3, #1]
 8013fd2:	9a05      	ldr	r2, [sp, #20]
 8013fd4:	bfbc      	itt	lt
 8013fd6:	212d      	movlt	r1, #45	; 0x2d
 8013fd8:	7059      	strblt	r1, [r3, #1]
 8013fda:	2a63      	cmp	r2, #99	; 0x63
 8013fdc:	dd0b      	ble.n	8013ff6 <print_e+0xa4>
 8013fde:	2164      	movs	r1, #100	; 0x64
 8013fe0:	fb92 f1f1 	sdiv	r1, r2, r1
 8013fe4:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8013fe8:	1cd8      	adds	r0, r3, #3
 8013fea:	709c      	strb	r4, [r3, #2]
 8013fec:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8013ff0:	fb03 2201 	mla	r2, r3, r1, r2
 8013ff4:	9205      	str	r2, [sp, #20]
 8013ff6:	9b05      	ldr	r3, [sp, #20]
 8013ff8:	220a      	movs	r2, #10
 8013ffa:	fb93 f2f2 	sdiv	r2, r3, r2
 8013ffe:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8014002:	7001      	strb	r1, [r0, #0]
 8014004:	f06f 0109 	mvn.w	r1, #9
 8014008:	fb01 3302 	mla	r3, r1, r2, r3
 801400c:	3330      	adds	r3, #48	; 0x30
 801400e:	7043      	strb	r3, [r0, #1]
 8014010:	2300      	movs	r3, #0
 8014012:	7083      	strb	r3, [r0, #2]
 8014014:	e7b8      	b.n	8013f88 <print_e+0x36>
 8014016:	b10d      	cbz	r5, 801401c <print_e+0xca>
 8014018:	f803 1b01 	strb.w	r1, [r3], #1
 801401c:	7805      	ldrb	r5, [r0, #0]
 801401e:	f803 5b01 	strb.w	r5, [r3], #1
 8014022:	3c01      	subs	r4, #1
 8014024:	2500      	movs	r5, #0
 8014026:	e7b9      	b.n	8013f9c <print_e+0x4a>
 8014028:	b10d      	cbz	r5, 801402e <print_e+0xdc>
 801402a:	f803 1b01 	strb.w	r1, [r3], #1
 801402e:	f803 0b01 	strb.w	r0, [r3], #1
 8014032:	3c01      	subs	r4, #1
 8014034:	2500      	movs	r5, #0
 8014036:	e7bc      	b.n	8013fb2 <print_e+0x60>
 8014038:	2665      	movs	r6, #101	; 0x65
 801403a:	e7bc      	b.n	8013fb6 <print_e+0x64>
 801403c:	2645      	movs	r6, #69	; 0x45
 801403e:	e7ba      	b.n	8013fb6 <print_e+0x64>

08014040 <_gcvt>:
 8014040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014044:	ec55 4b10 	vmov	r4, r5, d0
 8014048:	b088      	sub	sp, #32
 801404a:	4681      	mov	r9, r0
 801404c:	4688      	mov	r8, r1
 801404e:	4616      	mov	r6, r2
 8014050:	469a      	mov	sl, r3
 8014052:	ee10 0a10 	vmov	r0, s0
 8014056:	2200      	movs	r2, #0
 8014058:	2300      	movs	r3, #0
 801405a:	4629      	mov	r1, r5
 801405c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801405e:	f7ec fd15 	bl	8000a8c <__aeabi_dcmplt>
 8014062:	b110      	cbz	r0, 801406a <_gcvt+0x2a>
 8014064:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8014068:	461d      	mov	r5, r3
 801406a:	2200      	movs	r2, #0
 801406c:	2300      	movs	r3, #0
 801406e:	4620      	mov	r0, r4
 8014070:	4629      	mov	r1, r5
 8014072:	f7ec fd01 	bl	8000a78 <__aeabi_dcmpeq>
 8014076:	b138      	cbz	r0, 8014088 <_gcvt+0x48>
 8014078:	2330      	movs	r3, #48	; 0x30
 801407a:	7033      	strb	r3, [r6, #0]
 801407c:	2300      	movs	r3, #0
 801407e:	7073      	strb	r3, [r6, #1]
 8014080:	4630      	mov	r0, r6
 8014082:	b008      	add	sp, #32
 8014084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014088:	a34b      	add	r3, pc, #300	; (adr r3, 80141b8 <_gcvt+0x178>)
 801408a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801408e:	4620      	mov	r0, r4
 8014090:	4629      	mov	r1, r5
 8014092:	f7ec fd05 	bl	8000aa0 <__aeabi_dcmple>
 8014096:	b158      	cbz	r0, 80140b0 <_gcvt+0x70>
 8014098:	f108 31ff 	add.w	r1, r8, #4294967295
 801409c:	9100      	str	r1, [sp, #0]
 801409e:	e9cd a701 	strd	sl, r7, [sp, #4]
 80140a2:	4622      	mov	r2, r4
 80140a4:	462b      	mov	r3, r5
 80140a6:	4631      	mov	r1, r6
 80140a8:	4648      	mov	r0, r9
 80140aa:	f7ff ff52 	bl	8013f52 <print_e>
 80140ae:	e7e7      	b.n	8014080 <_gcvt+0x40>
 80140b0:	4640      	mov	r0, r8
 80140b2:	f000 fe29 	bl	8014d08 <_mprec_log10>
 80140b6:	4622      	mov	r2, r4
 80140b8:	ec51 0b10 	vmov	r0, r1, d0
 80140bc:	462b      	mov	r3, r5
 80140be:	f7ec fcef 	bl	8000aa0 <__aeabi_dcmple>
 80140c2:	2800      	cmp	r0, #0
 80140c4:	d1e8      	bne.n	8014098 <_gcvt+0x58>
 80140c6:	ab07      	add	r3, sp, #28
 80140c8:	9301      	str	r3, [sp, #4]
 80140ca:	ab06      	add	r3, sp, #24
 80140cc:	9300      	str	r3, [sp, #0]
 80140ce:	4642      	mov	r2, r8
 80140d0:	ab05      	add	r3, sp, #20
 80140d2:	ec45 4b10 	vmov	d0, r4, r5
 80140d6:	2102      	movs	r1, #2
 80140d8:	4648      	mov	r0, r9
 80140da:	f001 f879 	bl	80151d0 <_dtoa_r>
 80140de:	9a05      	ldr	r2, [sp, #20]
 80140e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80140e4:	429a      	cmp	r2, r3
 80140e6:	d00e      	beq.n	8014106 <_gcvt+0xc6>
 80140e8:	4633      	mov	r3, r6
 80140ea:	44b0      	add	r8, r6
 80140ec:	4605      	mov	r5, r0
 80140ee:	f810 1b01 	ldrb.w	r1, [r0], #1
 80140f2:	9c05      	ldr	r4, [sp, #20]
 80140f4:	eba8 0203 	sub.w	r2, r8, r3
 80140f8:	b109      	cbz	r1, 80140fe <_gcvt+0xbe>
 80140fa:	2c00      	cmp	r4, #0
 80140fc:	dc08      	bgt.n	8014110 <_gcvt+0xd0>
 80140fe:	2100      	movs	r1, #0
 8014100:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8014104:	e00d      	b.n	8014122 <_gcvt+0xe2>
 8014106:	4601      	mov	r1, r0
 8014108:	4630      	mov	r0, r6
 801410a:	f000 ffa8 	bl	801505e <strcpy>
 801410e:	e7b7      	b.n	8014080 <_gcvt+0x40>
 8014110:	3c01      	subs	r4, #1
 8014112:	f803 1b01 	strb.w	r1, [r3], #1
 8014116:	9405      	str	r4, [sp, #20]
 8014118:	e7e8      	b.n	80140ec <_gcvt+0xac>
 801411a:	f803 cb01 	strb.w	ip, [r3], #1
 801411e:	3a01      	subs	r2, #1
 8014120:	2101      	movs	r1, #1
 8014122:	2c00      	cmp	r4, #0
 8014124:	4620      	mov	r0, r4
 8014126:	dc2a      	bgt.n	801417e <_gcvt+0x13e>
 8014128:	b101      	cbz	r1, 801412c <_gcvt+0xec>
 801412a:	9405      	str	r4, [sp, #20]
 801412c:	b90f      	cbnz	r7, 8014132 <_gcvt+0xf2>
 801412e:	7829      	ldrb	r1, [r5, #0]
 8014130:	b311      	cbz	r1, 8014178 <_gcvt+0x138>
 8014132:	42b3      	cmp	r3, r6
 8014134:	bf04      	itt	eq
 8014136:	2130      	moveq	r1, #48	; 0x30
 8014138:	f803 1b01 	strbeq.w	r1, [r3], #1
 801413c:	212e      	movs	r1, #46	; 0x2e
 801413e:	7019      	strb	r1, [r3, #0]
 8014140:	9905      	ldr	r1, [sp, #20]
 8014142:	4618      	mov	r0, r3
 8014144:	2400      	movs	r4, #0
 8014146:	eba1 0c03 	sub.w	ip, r1, r3
 801414a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 801414e:	eb1c 0f00 	cmn.w	ip, r0
 8014152:	d41c      	bmi.n	801418e <_gcvt+0x14e>
 8014154:	2900      	cmp	r1, #0
 8014156:	f1c1 0000 	rsb	r0, r1, #0
 801415a:	bfc8      	it	gt
 801415c:	2000      	movgt	r0, #0
 801415e:	f100 0c01 	add.w	ip, r0, #1
 8014162:	4463      	add	r3, ip
 8014164:	4401      	add	r1, r0
 8014166:	b104      	cbz	r4, 801416a <_gcvt+0x12a>
 8014168:	9105      	str	r1, [sp, #20]
 801416a:	1e69      	subs	r1, r5, #1
 801416c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014170:	b108      	cbz	r0, 8014176 <_gcvt+0x136>
 8014172:	2a00      	cmp	r2, #0
 8014174:	dc0f      	bgt.n	8014196 <_gcvt+0x156>
 8014176:	b9df      	cbnz	r7, 80141b0 <_gcvt+0x170>
 8014178:	2200      	movs	r2, #0
 801417a:	701a      	strb	r2, [r3, #0]
 801417c:	e780      	b.n	8014080 <_gcvt+0x40>
 801417e:	2a00      	cmp	r2, #0
 8014180:	f104 34ff 	add.w	r4, r4, #4294967295
 8014184:	dcc9      	bgt.n	801411a <_gcvt+0xda>
 8014186:	2900      	cmp	r1, #0
 8014188:	d0d0      	beq.n	801412c <_gcvt+0xec>
 801418a:	9005      	str	r0, [sp, #20]
 801418c:	e7ce      	b.n	801412c <_gcvt+0xec>
 801418e:	f800 ef01 	strb.w	lr, [r0, #1]!
 8014192:	2401      	movs	r4, #1
 8014194:	e7db      	b.n	801414e <_gcvt+0x10e>
 8014196:	f803 0b01 	strb.w	r0, [r3], #1
 801419a:	3a01      	subs	r2, #1
 801419c:	e7e6      	b.n	801416c <_gcvt+0x12c>
 801419e:	f801 5b01 	strb.w	r5, [r1], #1
 80141a2:	1a60      	subs	r0, r4, r1
 80141a4:	2800      	cmp	r0, #0
 80141a6:	dcfa      	bgt.n	801419e <_gcvt+0x15e>
 80141a8:	2a00      	cmp	r2, #0
 80141aa:	bfa8      	it	ge
 80141ac:	189b      	addge	r3, r3, r2
 80141ae:	e7e3      	b.n	8014178 <_gcvt+0x138>
 80141b0:	4619      	mov	r1, r3
 80141b2:	189c      	adds	r4, r3, r2
 80141b4:	2530      	movs	r5, #48	; 0x30
 80141b6:	e7f4      	b.n	80141a2 <_gcvt+0x162>
 80141b8:	eb1c432d 	.word	0xeb1c432d
 80141bc:	3f1a36e2 	.word	0x3f1a36e2

080141c0 <__sflush_r>:
 80141c0:	898a      	ldrh	r2, [r1, #12]
 80141c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141c6:	4605      	mov	r5, r0
 80141c8:	0710      	lsls	r0, r2, #28
 80141ca:	460c      	mov	r4, r1
 80141cc:	d458      	bmi.n	8014280 <__sflush_r+0xc0>
 80141ce:	684b      	ldr	r3, [r1, #4]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	dc05      	bgt.n	80141e0 <__sflush_r+0x20>
 80141d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	dc02      	bgt.n	80141e0 <__sflush_r+0x20>
 80141da:	2000      	movs	r0, #0
 80141dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80141e2:	2e00      	cmp	r6, #0
 80141e4:	d0f9      	beq.n	80141da <__sflush_r+0x1a>
 80141e6:	2300      	movs	r3, #0
 80141e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80141ec:	682f      	ldr	r7, [r5, #0]
 80141ee:	602b      	str	r3, [r5, #0]
 80141f0:	d032      	beq.n	8014258 <__sflush_r+0x98>
 80141f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80141f4:	89a3      	ldrh	r3, [r4, #12]
 80141f6:	075a      	lsls	r2, r3, #29
 80141f8:	d505      	bpl.n	8014206 <__sflush_r+0x46>
 80141fa:	6863      	ldr	r3, [r4, #4]
 80141fc:	1ac0      	subs	r0, r0, r3
 80141fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014200:	b10b      	cbz	r3, 8014206 <__sflush_r+0x46>
 8014202:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014204:	1ac0      	subs	r0, r0, r3
 8014206:	2300      	movs	r3, #0
 8014208:	4602      	mov	r2, r0
 801420a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801420c:	6a21      	ldr	r1, [r4, #32]
 801420e:	4628      	mov	r0, r5
 8014210:	47b0      	blx	r6
 8014212:	1c43      	adds	r3, r0, #1
 8014214:	89a3      	ldrh	r3, [r4, #12]
 8014216:	d106      	bne.n	8014226 <__sflush_r+0x66>
 8014218:	6829      	ldr	r1, [r5, #0]
 801421a:	291d      	cmp	r1, #29
 801421c:	d82c      	bhi.n	8014278 <__sflush_r+0xb8>
 801421e:	4a2a      	ldr	r2, [pc, #168]	; (80142c8 <__sflush_r+0x108>)
 8014220:	40ca      	lsrs	r2, r1
 8014222:	07d6      	lsls	r6, r2, #31
 8014224:	d528      	bpl.n	8014278 <__sflush_r+0xb8>
 8014226:	2200      	movs	r2, #0
 8014228:	6062      	str	r2, [r4, #4]
 801422a:	04d9      	lsls	r1, r3, #19
 801422c:	6922      	ldr	r2, [r4, #16]
 801422e:	6022      	str	r2, [r4, #0]
 8014230:	d504      	bpl.n	801423c <__sflush_r+0x7c>
 8014232:	1c42      	adds	r2, r0, #1
 8014234:	d101      	bne.n	801423a <__sflush_r+0x7a>
 8014236:	682b      	ldr	r3, [r5, #0]
 8014238:	b903      	cbnz	r3, 801423c <__sflush_r+0x7c>
 801423a:	6560      	str	r0, [r4, #84]	; 0x54
 801423c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801423e:	602f      	str	r7, [r5, #0]
 8014240:	2900      	cmp	r1, #0
 8014242:	d0ca      	beq.n	80141da <__sflush_r+0x1a>
 8014244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014248:	4299      	cmp	r1, r3
 801424a:	d002      	beq.n	8014252 <__sflush_r+0x92>
 801424c:	4628      	mov	r0, r5
 801424e:	f000 fd8f 	bl	8014d70 <_free_r>
 8014252:	2000      	movs	r0, #0
 8014254:	6360      	str	r0, [r4, #52]	; 0x34
 8014256:	e7c1      	b.n	80141dc <__sflush_r+0x1c>
 8014258:	6a21      	ldr	r1, [r4, #32]
 801425a:	2301      	movs	r3, #1
 801425c:	4628      	mov	r0, r5
 801425e:	47b0      	blx	r6
 8014260:	1c41      	adds	r1, r0, #1
 8014262:	d1c7      	bne.n	80141f4 <__sflush_r+0x34>
 8014264:	682b      	ldr	r3, [r5, #0]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d0c4      	beq.n	80141f4 <__sflush_r+0x34>
 801426a:	2b1d      	cmp	r3, #29
 801426c:	d001      	beq.n	8014272 <__sflush_r+0xb2>
 801426e:	2b16      	cmp	r3, #22
 8014270:	d101      	bne.n	8014276 <__sflush_r+0xb6>
 8014272:	602f      	str	r7, [r5, #0]
 8014274:	e7b1      	b.n	80141da <__sflush_r+0x1a>
 8014276:	89a3      	ldrh	r3, [r4, #12]
 8014278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801427c:	81a3      	strh	r3, [r4, #12]
 801427e:	e7ad      	b.n	80141dc <__sflush_r+0x1c>
 8014280:	690f      	ldr	r7, [r1, #16]
 8014282:	2f00      	cmp	r7, #0
 8014284:	d0a9      	beq.n	80141da <__sflush_r+0x1a>
 8014286:	0793      	lsls	r3, r2, #30
 8014288:	680e      	ldr	r6, [r1, #0]
 801428a:	bf08      	it	eq
 801428c:	694b      	ldreq	r3, [r1, #20]
 801428e:	600f      	str	r7, [r1, #0]
 8014290:	bf18      	it	ne
 8014292:	2300      	movne	r3, #0
 8014294:	eba6 0807 	sub.w	r8, r6, r7
 8014298:	608b      	str	r3, [r1, #8]
 801429a:	f1b8 0f00 	cmp.w	r8, #0
 801429e:	dd9c      	ble.n	80141da <__sflush_r+0x1a>
 80142a0:	6a21      	ldr	r1, [r4, #32]
 80142a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80142a4:	4643      	mov	r3, r8
 80142a6:	463a      	mov	r2, r7
 80142a8:	4628      	mov	r0, r5
 80142aa:	47b0      	blx	r6
 80142ac:	2800      	cmp	r0, #0
 80142ae:	dc06      	bgt.n	80142be <__sflush_r+0xfe>
 80142b0:	89a3      	ldrh	r3, [r4, #12]
 80142b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80142b6:	81a3      	strh	r3, [r4, #12]
 80142b8:	f04f 30ff 	mov.w	r0, #4294967295
 80142bc:	e78e      	b.n	80141dc <__sflush_r+0x1c>
 80142be:	4407      	add	r7, r0
 80142c0:	eba8 0800 	sub.w	r8, r8, r0
 80142c4:	e7e9      	b.n	801429a <__sflush_r+0xda>
 80142c6:	bf00      	nop
 80142c8:	20400001 	.word	0x20400001

080142cc <_fflush_r>:
 80142cc:	b538      	push	{r3, r4, r5, lr}
 80142ce:	690b      	ldr	r3, [r1, #16]
 80142d0:	4605      	mov	r5, r0
 80142d2:	460c      	mov	r4, r1
 80142d4:	b913      	cbnz	r3, 80142dc <_fflush_r+0x10>
 80142d6:	2500      	movs	r5, #0
 80142d8:	4628      	mov	r0, r5
 80142da:	bd38      	pop	{r3, r4, r5, pc}
 80142dc:	b118      	cbz	r0, 80142e6 <_fflush_r+0x1a>
 80142de:	6983      	ldr	r3, [r0, #24]
 80142e0:	b90b      	cbnz	r3, 80142e6 <_fflush_r+0x1a>
 80142e2:	f000 f887 	bl	80143f4 <__sinit>
 80142e6:	4b14      	ldr	r3, [pc, #80]	; (8014338 <_fflush_r+0x6c>)
 80142e8:	429c      	cmp	r4, r3
 80142ea:	d11b      	bne.n	8014324 <_fflush_r+0x58>
 80142ec:	686c      	ldr	r4, [r5, #4]
 80142ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d0ef      	beq.n	80142d6 <_fflush_r+0xa>
 80142f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80142f8:	07d0      	lsls	r0, r2, #31
 80142fa:	d404      	bmi.n	8014306 <_fflush_r+0x3a>
 80142fc:	0599      	lsls	r1, r3, #22
 80142fe:	d402      	bmi.n	8014306 <_fflush_r+0x3a>
 8014300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014302:	f000 f915 	bl	8014530 <__retarget_lock_acquire_recursive>
 8014306:	4628      	mov	r0, r5
 8014308:	4621      	mov	r1, r4
 801430a:	f7ff ff59 	bl	80141c0 <__sflush_r>
 801430e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014310:	07da      	lsls	r2, r3, #31
 8014312:	4605      	mov	r5, r0
 8014314:	d4e0      	bmi.n	80142d8 <_fflush_r+0xc>
 8014316:	89a3      	ldrh	r3, [r4, #12]
 8014318:	059b      	lsls	r3, r3, #22
 801431a:	d4dd      	bmi.n	80142d8 <_fflush_r+0xc>
 801431c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801431e:	f000 f908 	bl	8014532 <__retarget_lock_release_recursive>
 8014322:	e7d9      	b.n	80142d8 <_fflush_r+0xc>
 8014324:	4b05      	ldr	r3, [pc, #20]	; (801433c <_fflush_r+0x70>)
 8014326:	429c      	cmp	r4, r3
 8014328:	d101      	bne.n	801432e <_fflush_r+0x62>
 801432a:	68ac      	ldr	r4, [r5, #8]
 801432c:	e7df      	b.n	80142ee <_fflush_r+0x22>
 801432e:	4b04      	ldr	r3, [pc, #16]	; (8014340 <_fflush_r+0x74>)
 8014330:	429c      	cmp	r4, r3
 8014332:	bf08      	it	eq
 8014334:	68ec      	ldreq	r4, [r5, #12]
 8014336:	e7da      	b.n	80142ee <_fflush_r+0x22>
 8014338:	08016ad0 	.word	0x08016ad0
 801433c:	08016af0 	.word	0x08016af0
 8014340:	08016ab0 	.word	0x08016ab0

08014344 <std>:
 8014344:	2300      	movs	r3, #0
 8014346:	b510      	push	{r4, lr}
 8014348:	4604      	mov	r4, r0
 801434a:	e9c0 3300 	strd	r3, r3, [r0]
 801434e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014352:	6083      	str	r3, [r0, #8]
 8014354:	8181      	strh	r1, [r0, #12]
 8014356:	6643      	str	r3, [r0, #100]	; 0x64
 8014358:	81c2      	strh	r2, [r0, #14]
 801435a:	6183      	str	r3, [r0, #24]
 801435c:	4619      	mov	r1, r3
 801435e:	2208      	movs	r2, #8
 8014360:	305c      	adds	r0, #92	; 0x5c
 8014362:	f7ff fa39 	bl	80137d8 <memset>
 8014366:	4b05      	ldr	r3, [pc, #20]	; (801437c <std+0x38>)
 8014368:	6263      	str	r3, [r4, #36]	; 0x24
 801436a:	4b05      	ldr	r3, [pc, #20]	; (8014380 <std+0x3c>)
 801436c:	62a3      	str	r3, [r4, #40]	; 0x28
 801436e:	4b05      	ldr	r3, [pc, #20]	; (8014384 <std+0x40>)
 8014370:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014372:	4b05      	ldr	r3, [pc, #20]	; (8014388 <std+0x44>)
 8014374:	6224      	str	r4, [r4, #32]
 8014376:	6323      	str	r3, [r4, #48]	; 0x30
 8014378:	bd10      	pop	{r4, pc}
 801437a:	bf00      	nop
 801437c:	08014fd9 	.word	0x08014fd9
 8014380:	08014ffb 	.word	0x08014ffb
 8014384:	08015033 	.word	0x08015033
 8014388:	08015057 	.word	0x08015057

0801438c <_cleanup_r>:
 801438c:	4901      	ldr	r1, [pc, #4]	; (8014394 <_cleanup_r+0x8>)
 801438e:	f000 b8af 	b.w	80144f0 <_fwalk_reent>
 8014392:	bf00      	nop
 8014394:	080142cd 	.word	0x080142cd

08014398 <__sfmoreglue>:
 8014398:	b570      	push	{r4, r5, r6, lr}
 801439a:	2268      	movs	r2, #104	; 0x68
 801439c:	1e4d      	subs	r5, r1, #1
 801439e:	4355      	muls	r5, r2
 80143a0:	460e      	mov	r6, r1
 80143a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80143a6:	f000 fd4f 	bl	8014e48 <_malloc_r>
 80143aa:	4604      	mov	r4, r0
 80143ac:	b140      	cbz	r0, 80143c0 <__sfmoreglue+0x28>
 80143ae:	2100      	movs	r1, #0
 80143b0:	e9c0 1600 	strd	r1, r6, [r0]
 80143b4:	300c      	adds	r0, #12
 80143b6:	60a0      	str	r0, [r4, #8]
 80143b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80143bc:	f7ff fa0c 	bl	80137d8 <memset>
 80143c0:	4620      	mov	r0, r4
 80143c2:	bd70      	pop	{r4, r5, r6, pc}

080143c4 <__sfp_lock_acquire>:
 80143c4:	4801      	ldr	r0, [pc, #4]	; (80143cc <__sfp_lock_acquire+0x8>)
 80143c6:	f000 b8b3 	b.w	8014530 <__retarget_lock_acquire_recursive>
 80143ca:	bf00      	nop
 80143cc:	2000255d 	.word	0x2000255d

080143d0 <__sfp_lock_release>:
 80143d0:	4801      	ldr	r0, [pc, #4]	; (80143d8 <__sfp_lock_release+0x8>)
 80143d2:	f000 b8ae 	b.w	8014532 <__retarget_lock_release_recursive>
 80143d6:	bf00      	nop
 80143d8:	2000255d 	.word	0x2000255d

080143dc <__sinit_lock_acquire>:
 80143dc:	4801      	ldr	r0, [pc, #4]	; (80143e4 <__sinit_lock_acquire+0x8>)
 80143de:	f000 b8a7 	b.w	8014530 <__retarget_lock_acquire_recursive>
 80143e2:	bf00      	nop
 80143e4:	2000255e 	.word	0x2000255e

080143e8 <__sinit_lock_release>:
 80143e8:	4801      	ldr	r0, [pc, #4]	; (80143f0 <__sinit_lock_release+0x8>)
 80143ea:	f000 b8a2 	b.w	8014532 <__retarget_lock_release_recursive>
 80143ee:	bf00      	nop
 80143f0:	2000255e 	.word	0x2000255e

080143f4 <__sinit>:
 80143f4:	b510      	push	{r4, lr}
 80143f6:	4604      	mov	r4, r0
 80143f8:	f7ff fff0 	bl	80143dc <__sinit_lock_acquire>
 80143fc:	69a3      	ldr	r3, [r4, #24]
 80143fe:	b11b      	cbz	r3, 8014408 <__sinit+0x14>
 8014400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014404:	f7ff bff0 	b.w	80143e8 <__sinit_lock_release>
 8014408:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801440c:	6523      	str	r3, [r4, #80]	; 0x50
 801440e:	4b13      	ldr	r3, [pc, #76]	; (801445c <__sinit+0x68>)
 8014410:	4a13      	ldr	r2, [pc, #76]	; (8014460 <__sinit+0x6c>)
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	62a2      	str	r2, [r4, #40]	; 0x28
 8014416:	42a3      	cmp	r3, r4
 8014418:	bf04      	itt	eq
 801441a:	2301      	moveq	r3, #1
 801441c:	61a3      	streq	r3, [r4, #24]
 801441e:	4620      	mov	r0, r4
 8014420:	f000 f820 	bl	8014464 <__sfp>
 8014424:	6060      	str	r0, [r4, #4]
 8014426:	4620      	mov	r0, r4
 8014428:	f000 f81c 	bl	8014464 <__sfp>
 801442c:	60a0      	str	r0, [r4, #8]
 801442e:	4620      	mov	r0, r4
 8014430:	f000 f818 	bl	8014464 <__sfp>
 8014434:	2200      	movs	r2, #0
 8014436:	60e0      	str	r0, [r4, #12]
 8014438:	2104      	movs	r1, #4
 801443a:	6860      	ldr	r0, [r4, #4]
 801443c:	f7ff ff82 	bl	8014344 <std>
 8014440:	68a0      	ldr	r0, [r4, #8]
 8014442:	2201      	movs	r2, #1
 8014444:	2109      	movs	r1, #9
 8014446:	f7ff ff7d 	bl	8014344 <std>
 801444a:	68e0      	ldr	r0, [r4, #12]
 801444c:	2202      	movs	r2, #2
 801444e:	2112      	movs	r1, #18
 8014450:	f7ff ff78 	bl	8014344 <std>
 8014454:	2301      	movs	r3, #1
 8014456:	61a3      	str	r3, [r4, #24]
 8014458:	e7d2      	b.n	8014400 <__sinit+0xc>
 801445a:	bf00      	nop
 801445c:	08016a78 	.word	0x08016a78
 8014460:	0801438d 	.word	0x0801438d

08014464 <__sfp>:
 8014464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014466:	4607      	mov	r7, r0
 8014468:	f7ff ffac 	bl	80143c4 <__sfp_lock_acquire>
 801446c:	4b1e      	ldr	r3, [pc, #120]	; (80144e8 <__sfp+0x84>)
 801446e:	681e      	ldr	r6, [r3, #0]
 8014470:	69b3      	ldr	r3, [r6, #24]
 8014472:	b913      	cbnz	r3, 801447a <__sfp+0x16>
 8014474:	4630      	mov	r0, r6
 8014476:	f7ff ffbd 	bl	80143f4 <__sinit>
 801447a:	3648      	adds	r6, #72	; 0x48
 801447c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014480:	3b01      	subs	r3, #1
 8014482:	d503      	bpl.n	801448c <__sfp+0x28>
 8014484:	6833      	ldr	r3, [r6, #0]
 8014486:	b30b      	cbz	r3, 80144cc <__sfp+0x68>
 8014488:	6836      	ldr	r6, [r6, #0]
 801448a:	e7f7      	b.n	801447c <__sfp+0x18>
 801448c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014490:	b9d5      	cbnz	r5, 80144c8 <__sfp+0x64>
 8014492:	4b16      	ldr	r3, [pc, #88]	; (80144ec <__sfp+0x88>)
 8014494:	60e3      	str	r3, [r4, #12]
 8014496:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801449a:	6665      	str	r5, [r4, #100]	; 0x64
 801449c:	f000 f847 	bl	801452e <__retarget_lock_init_recursive>
 80144a0:	f7ff ff96 	bl	80143d0 <__sfp_lock_release>
 80144a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80144a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80144ac:	6025      	str	r5, [r4, #0]
 80144ae:	61a5      	str	r5, [r4, #24]
 80144b0:	2208      	movs	r2, #8
 80144b2:	4629      	mov	r1, r5
 80144b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80144b8:	f7ff f98e 	bl	80137d8 <memset>
 80144bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80144c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80144c4:	4620      	mov	r0, r4
 80144c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144c8:	3468      	adds	r4, #104	; 0x68
 80144ca:	e7d9      	b.n	8014480 <__sfp+0x1c>
 80144cc:	2104      	movs	r1, #4
 80144ce:	4638      	mov	r0, r7
 80144d0:	f7ff ff62 	bl	8014398 <__sfmoreglue>
 80144d4:	4604      	mov	r4, r0
 80144d6:	6030      	str	r0, [r6, #0]
 80144d8:	2800      	cmp	r0, #0
 80144da:	d1d5      	bne.n	8014488 <__sfp+0x24>
 80144dc:	f7ff ff78 	bl	80143d0 <__sfp_lock_release>
 80144e0:	230c      	movs	r3, #12
 80144e2:	603b      	str	r3, [r7, #0]
 80144e4:	e7ee      	b.n	80144c4 <__sfp+0x60>
 80144e6:	bf00      	nop
 80144e8:	08016a78 	.word	0x08016a78
 80144ec:	ffff0001 	.word	0xffff0001

080144f0 <_fwalk_reent>:
 80144f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80144f4:	4606      	mov	r6, r0
 80144f6:	4688      	mov	r8, r1
 80144f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80144fc:	2700      	movs	r7, #0
 80144fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014502:	f1b9 0901 	subs.w	r9, r9, #1
 8014506:	d505      	bpl.n	8014514 <_fwalk_reent+0x24>
 8014508:	6824      	ldr	r4, [r4, #0]
 801450a:	2c00      	cmp	r4, #0
 801450c:	d1f7      	bne.n	80144fe <_fwalk_reent+0xe>
 801450e:	4638      	mov	r0, r7
 8014510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014514:	89ab      	ldrh	r3, [r5, #12]
 8014516:	2b01      	cmp	r3, #1
 8014518:	d907      	bls.n	801452a <_fwalk_reent+0x3a>
 801451a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801451e:	3301      	adds	r3, #1
 8014520:	d003      	beq.n	801452a <_fwalk_reent+0x3a>
 8014522:	4629      	mov	r1, r5
 8014524:	4630      	mov	r0, r6
 8014526:	47c0      	blx	r8
 8014528:	4307      	orrs	r7, r0
 801452a:	3568      	adds	r5, #104	; 0x68
 801452c:	e7e9      	b.n	8014502 <_fwalk_reent+0x12>

0801452e <__retarget_lock_init_recursive>:
 801452e:	4770      	bx	lr

08014530 <__retarget_lock_acquire_recursive>:
 8014530:	4770      	bx	lr

08014532 <__retarget_lock_release_recursive>:
 8014532:	4770      	bx	lr

08014534 <__swhatbuf_r>:
 8014534:	b570      	push	{r4, r5, r6, lr}
 8014536:	460e      	mov	r6, r1
 8014538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801453c:	2900      	cmp	r1, #0
 801453e:	b096      	sub	sp, #88	; 0x58
 8014540:	4614      	mov	r4, r2
 8014542:	461d      	mov	r5, r3
 8014544:	da08      	bge.n	8014558 <__swhatbuf_r+0x24>
 8014546:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801454a:	2200      	movs	r2, #0
 801454c:	602a      	str	r2, [r5, #0]
 801454e:	061a      	lsls	r2, r3, #24
 8014550:	d410      	bmi.n	8014574 <__swhatbuf_r+0x40>
 8014552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014556:	e00e      	b.n	8014576 <__swhatbuf_r+0x42>
 8014558:	466a      	mov	r2, sp
 801455a:	f001 fc27 	bl	8015dac <_fstat_r>
 801455e:	2800      	cmp	r0, #0
 8014560:	dbf1      	blt.n	8014546 <__swhatbuf_r+0x12>
 8014562:	9a01      	ldr	r2, [sp, #4]
 8014564:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014568:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801456c:	425a      	negs	r2, r3
 801456e:	415a      	adcs	r2, r3
 8014570:	602a      	str	r2, [r5, #0]
 8014572:	e7ee      	b.n	8014552 <__swhatbuf_r+0x1e>
 8014574:	2340      	movs	r3, #64	; 0x40
 8014576:	2000      	movs	r0, #0
 8014578:	6023      	str	r3, [r4, #0]
 801457a:	b016      	add	sp, #88	; 0x58
 801457c:	bd70      	pop	{r4, r5, r6, pc}
	...

08014580 <__smakebuf_r>:
 8014580:	898b      	ldrh	r3, [r1, #12]
 8014582:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014584:	079d      	lsls	r5, r3, #30
 8014586:	4606      	mov	r6, r0
 8014588:	460c      	mov	r4, r1
 801458a:	d507      	bpl.n	801459c <__smakebuf_r+0x1c>
 801458c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014590:	6023      	str	r3, [r4, #0]
 8014592:	6123      	str	r3, [r4, #16]
 8014594:	2301      	movs	r3, #1
 8014596:	6163      	str	r3, [r4, #20]
 8014598:	b002      	add	sp, #8
 801459a:	bd70      	pop	{r4, r5, r6, pc}
 801459c:	ab01      	add	r3, sp, #4
 801459e:	466a      	mov	r2, sp
 80145a0:	f7ff ffc8 	bl	8014534 <__swhatbuf_r>
 80145a4:	9900      	ldr	r1, [sp, #0]
 80145a6:	4605      	mov	r5, r0
 80145a8:	4630      	mov	r0, r6
 80145aa:	f000 fc4d 	bl	8014e48 <_malloc_r>
 80145ae:	b948      	cbnz	r0, 80145c4 <__smakebuf_r+0x44>
 80145b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145b4:	059a      	lsls	r2, r3, #22
 80145b6:	d4ef      	bmi.n	8014598 <__smakebuf_r+0x18>
 80145b8:	f023 0303 	bic.w	r3, r3, #3
 80145bc:	f043 0302 	orr.w	r3, r3, #2
 80145c0:	81a3      	strh	r3, [r4, #12]
 80145c2:	e7e3      	b.n	801458c <__smakebuf_r+0xc>
 80145c4:	4b0d      	ldr	r3, [pc, #52]	; (80145fc <__smakebuf_r+0x7c>)
 80145c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80145c8:	89a3      	ldrh	r3, [r4, #12]
 80145ca:	6020      	str	r0, [r4, #0]
 80145cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80145d0:	81a3      	strh	r3, [r4, #12]
 80145d2:	9b00      	ldr	r3, [sp, #0]
 80145d4:	6163      	str	r3, [r4, #20]
 80145d6:	9b01      	ldr	r3, [sp, #4]
 80145d8:	6120      	str	r0, [r4, #16]
 80145da:	b15b      	cbz	r3, 80145f4 <__smakebuf_r+0x74>
 80145dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80145e0:	4630      	mov	r0, r6
 80145e2:	f001 fbf5 	bl	8015dd0 <_isatty_r>
 80145e6:	b128      	cbz	r0, 80145f4 <__smakebuf_r+0x74>
 80145e8:	89a3      	ldrh	r3, [r4, #12]
 80145ea:	f023 0303 	bic.w	r3, r3, #3
 80145ee:	f043 0301 	orr.w	r3, r3, #1
 80145f2:	81a3      	strh	r3, [r4, #12]
 80145f4:	89a0      	ldrh	r0, [r4, #12]
 80145f6:	4305      	orrs	r5, r0
 80145f8:	81a5      	strh	r5, [r4, #12]
 80145fa:	e7cd      	b.n	8014598 <__smakebuf_r+0x18>
 80145fc:	0801438d 	.word	0x0801438d

08014600 <_Balloc>:
 8014600:	b570      	push	{r4, r5, r6, lr}
 8014602:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014604:	4604      	mov	r4, r0
 8014606:	460d      	mov	r5, r1
 8014608:	b976      	cbnz	r6, 8014628 <_Balloc+0x28>
 801460a:	2010      	movs	r0, #16
 801460c:	f001 fc02 	bl	8015e14 <malloc>
 8014610:	4602      	mov	r2, r0
 8014612:	6260      	str	r0, [r4, #36]	; 0x24
 8014614:	b920      	cbnz	r0, 8014620 <_Balloc+0x20>
 8014616:	4b18      	ldr	r3, [pc, #96]	; (8014678 <_Balloc+0x78>)
 8014618:	4818      	ldr	r0, [pc, #96]	; (801467c <_Balloc+0x7c>)
 801461a:	2166      	movs	r1, #102	; 0x66
 801461c:	f7ff f850 	bl	80136c0 <__assert_func>
 8014620:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014624:	6006      	str	r6, [r0, #0]
 8014626:	60c6      	str	r6, [r0, #12]
 8014628:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801462a:	68f3      	ldr	r3, [r6, #12]
 801462c:	b183      	cbz	r3, 8014650 <_Balloc+0x50>
 801462e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014630:	68db      	ldr	r3, [r3, #12]
 8014632:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014636:	b9b8      	cbnz	r0, 8014668 <_Balloc+0x68>
 8014638:	2101      	movs	r1, #1
 801463a:	fa01 f605 	lsl.w	r6, r1, r5
 801463e:	1d72      	adds	r2, r6, #5
 8014640:	0092      	lsls	r2, r2, #2
 8014642:	4620      	mov	r0, r4
 8014644:	f000 fb7e 	bl	8014d44 <_calloc_r>
 8014648:	b160      	cbz	r0, 8014664 <_Balloc+0x64>
 801464a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801464e:	e00e      	b.n	801466e <_Balloc+0x6e>
 8014650:	2221      	movs	r2, #33	; 0x21
 8014652:	2104      	movs	r1, #4
 8014654:	4620      	mov	r0, r4
 8014656:	f000 fb75 	bl	8014d44 <_calloc_r>
 801465a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801465c:	60f0      	str	r0, [r6, #12]
 801465e:	68db      	ldr	r3, [r3, #12]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d1e4      	bne.n	801462e <_Balloc+0x2e>
 8014664:	2000      	movs	r0, #0
 8014666:	bd70      	pop	{r4, r5, r6, pc}
 8014668:	6802      	ldr	r2, [r0, #0]
 801466a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801466e:	2300      	movs	r3, #0
 8014670:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014674:	e7f7      	b.n	8014666 <_Balloc+0x66>
 8014676:	bf00      	nop
 8014678:	08016b10 	.word	0x08016b10
 801467c:	08016b27 	.word	0x08016b27

08014680 <_Bfree>:
 8014680:	b570      	push	{r4, r5, r6, lr}
 8014682:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014684:	4605      	mov	r5, r0
 8014686:	460c      	mov	r4, r1
 8014688:	b976      	cbnz	r6, 80146a8 <_Bfree+0x28>
 801468a:	2010      	movs	r0, #16
 801468c:	f001 fbc2 	bl	8015e14 <malloc>
 8014690:	4602      	mov	r2, r0
 8014692:	6268      	str	r0, [r5, #36]	; 0x24
 8014694:	b920      	cbnz	r0, 80146a0 <_Bfree+0x20>
 8014696:	4b09      	ldr	r3, [pc, #36]	; (80146bc <_Bfree+0x3c>)
 8014698:	4809      	ldr	r0, [pc, #36]	; (80146c0 <_Bfree+0x40>)
 801469a:	218a      	movs	r1, #138	; 0x8a
 801469c:	f7ff f810 	bl	80136c0 <__assert_func>
 80146a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80146a4:	6006      	str	r6, [r0, #0]
 80146a6:	60c6      	str	r6, [r0, #12]
 80146a8:	b13c      	cbz	r4, 80146ba <_Bfree+0x3a>
 80146aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80146ac:	6862      	ldr	r2, [r4, #4]
 80146ae:	68db      	ldr	r3, [r3, #12]
 80146b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80146b4:	6021      	str	r1, [r4, #0]
 80146b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80146ba:	bd70      	pop	{r4, r5, r6, pc}
 80146bc:	08016b10 	.word	0x08016b10
 80146c0:	08016b27 	.word	0x08016b27

080146c4 <__multadd>:
 80146c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146c8:	690d      	ldr	r5, [r1, #16]
 80146ca:	4607      	mov	r7, r0
 80146cc:	460c      	mov	r4, r1
 80146ce:	461e      	mov	r6, r3
 80146d0:	f101 0c14 	add.w	ip, r1, #20
 80146d4:	2000      	movs	r0, #0
 80146d6:	f8dc 3000 	ldr.w	r3, [ip]
 80146da:	b299      	uxth	r1, r3
 80146dc:	fb02 6101 	mla	r1, r2, r1, r6
 80146e0:	0c1e      	lsrs	r6, r3, #16
 80146e2:	0c0b      	lsrs	r3, r1, #16
 80146e4:	fb02 3306 	mla	r3, r2, r6, r3
 80146e8:	b289      	uxth	r1, r1
 80146ea:	3001      	adds	r0, #1
 80146ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80146f0:	4285      	cmp	r5, r0
 80146f2:	f84c 1b04 	str.w	r1, [ip], #4
 80146f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80146fa:	dcec      	bgt.n	80146d6 <__multadd+0x12>
 80146fc:	b30e      	cbz	r6, 8014742 <__multadd+0x7e>
 80146fe:	68a3      	ldr	r3, [r4, #8]
 8014700:	42ab      	cmp	r3, r5
 8014702:	dc19      	bgt.n	8014738 <__multadd+0x74>
 8014704:	6861      	ldr	r1, [r4, #4]
 8014706:	4638      	mov	r0, r7
 8014708:	3101      	adds	r1, #1
 801470a:	f7ff ff79 	bl	8014600 <_Balloc>
 801470e:	4680      	mov	r8, r0
 8014710:	b928      	cbnz	r0, 801471e <__multadd+0x5a>
 8014712:	4602      	mov	r2, r0
 8014714:	4b0c      	ldr	r3, [pc, #48]	; (8014748 <__multadd+0x84>)
 8014716:	480d      	ldr	r0, [pc, #52]	; (801474c <__multadd+0x88>)
 8014718:	21b5      	movs	r1, #181	; 0xb5
 801471a:	f7fe ffd1 	bl	80136c0 <__assert_func>
 801471e:	6922      	ldr	r2, [r4, #16]
 8014720:	3202      	adds	r2, #2
 8014722:	f104 010c 	add.w	r1, r4, #12
 8014726:	0092      	lsls	r2, r2, #2
 8014728:	300c      	adds	r0, #12
 801472a:	f7ff f847 	bl	80137bc <memcpy>
 801472e:	4621      	mov	r1, r4
 8014730:	4638      	mov	r0, r7
 8014732:	f7ff ffa5 	bl	8014680 <_Bfree>
 8014736:	4644      	mov	r4, r8
 8014738:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801473c:	3501      	adds	r5, #1
 801473e:	615e      	str	r6, [r3, #20]
 8014740:	6125      	str	r5, [r4, #16]
 8014742:	4620      	mov	r0, r4
 8014744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014748:	08016b83 	.word	0x08016b83
 801474c:	08016b27 	.word	0x08016b27

08014750 <__hi0bits>:
 8014750:	0c03      	lsrs	r3, r0, #16
 8014752:	041b      	lsls	r3, r3, #16
 8014754:	b9d3      	cbnz	r3, 801478c <__hi0bits+0x3c>
 8014756:	0400      	lsls	r0, r0, #16
 8014758:	2310      	movs	r3, #16
 801475a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801475e:	bf04      	itt	eq
 8014760:	0200      	lsleq	r0, r0, #8
 8014762:	3308      	addeq	r3, #8
 8014764:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014768:	bf04      	itt	eq
 801476a:	0100      	lsleq	r0, r0, #4
 801476c:	3304      	addeq	r3, #4
 801476e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014772:	bf04      	itt	eq
 8014774:	0080      	lsleq	r0, r0, #2
 8014776:	3302      	addeq	r3, #2
 8014778:	2800      	cmp	r0, #0
 801477a:	db05      	blt.n	8014788 <__hi0bits+0x38>
 801477c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014780:	f103 0301 	add.w	r3, r3, #1
 8014784:	bf08      	it	eq
 8014786:	2320      	moveq	r3, #32
 8014788:	4618      	mov	r0, r3
 801478a:	4770      	bx	lr
 801478c:	2300      	movs	r3, #0
 801478e:	e7e4      	b.n	801475a <__hi0bits+0xa>

08014790 <__lo0bits>:
 8014790:	6803      	ldr	r3, [r0, #0]
 8014792:	f013 0207 	ands.w	r2, r3, #7
 8014796:	4601      	mov	r1, r0
 8014798:	d00b      	beq.n	80147b2 <__lo0bits+0x22>
 801479a:	07da      	lsls	r2, r3, #31
 801479c:	d423      	bmi.n	80147e6 <__lo0bits+0x56>
 801479e:	0798      	lsls	r0, r3, #30
 80147a0:	bf49      	itett	mi
 80147a2:	085b      	lsrmi	r3, r3, #1
 80147a4:	089b      	lsrpl	r3, r3, #2
 80147a6:	2001      	movmi	r0, #1
 80147a8:	600b      	strmi	r3, [r1, #0]
 80147aa:	bf5c      	itt	pl
 80147ac:	600b      	strpl	r3, [r1, #0]
 80147ae:	2002      	movpl	r0, #2
 80147b0:	4770      	bx	lr
 80147b2:	b298      	uxth	r0, r3
 80147b4:	b9a8      	cbnz	r0, 80147e2 <__lo0bits+0x52>
 80147b6:	0c1b      	lsrs	r3, r3, #16
 80147b8:	2010      	movs	r0, #16
 80147ba:	b2da      	uxtb	r2, r3
 80147bc:	b90a      	cbnz	r2, 80147c2 <__lo0bits+0x32>
 80147be:	3008      	adds	r0, #8
 80147c0:	0a1b      	lsrs	r3, r3, #8
 80147c2:	071a      	lsls	r2, r3, #28
 80147c4:	bf04      	itt	eq
 80147c6:	091b      	lsreq	r3, r3, #4
 80147c8:	3004      	addeq	r0, #4
 80147ca:	079a      	lsls	r2, r3, #30
 80147cc:	bf04      	itt	eq
 80147ce:	089b      	lsreq	r3, r3, #2
 80147d0:	3002      	addeq	r0, #2
 80147d2:	07da      	lsls	r2, r3, #31
 80147d4:	d403      	bmi.n	80147de <__lo0bits+0x4e>
 80147d6:	085b      	lsrs	r3, r3, #1
 80147d8:	f100 0001 	add.w	r0, r0, #1
 80147dc:	d005      	beq.n	80147ea <__lo0bits+0x5a>
 80147de:	600b      	str	r3, [r1, #0]
 80147e0:	4770      	bx	lr
 80147e2:	4610      	mov	r0, r2
 80147e4:	e7e9      	b.n	80147ba <__lo0bits+0x2a>
 80147e6:	2000      	movs	r0, #0
 80147e8:	4770      	bx	lr
 80147ea:	2020      	movs	r0, #32
 80147ec:	4770      	bx	lr
	...

080147f0 <__i2b>:
 80147f0:	b510      	push	{r4, lr}
 80147f2:	460c      	mov	r4, r1
 80147f4:	2101      	movs	r1, #1
 80147f6:	f7ff ff03 	bl	8014600 <_Balloc>
 80147fa:	4602      	mov	r2, r0
 80147fc:	b928      	cbnz	r0, 801480a <__i2b+0x1a>
 80147fe:	4b05      	ldr	r3, [pc, #20]	; (8014814 <__i2b+0x24>)
 8014800:	4805      	ldr	r0, [pc, #20]	; (8014818 <__i2b+0x28>)
 8014802:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014806:	f7fe ff5b 	bl	80136c0 <__assert_func>
 801480a:	2301      	movs	r3, #1
 801480c:	6144      	str	r4, [r0, #20]
 801480e:	6103      	str	r3, [r0, #16]
 8014810:	bd10      	pop	{r4, pc}
 8014812:	bf00      	nop
 8014814:	08016b83 	.word	0x08016b83
 8014818:	08016b27 	.word	0x08016b27

0801481c <__multiply>:
 801481c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014820:	4691      	mov	r9, r2
 8014822:	690a      	ldr	r2, [r1, #16]
 8014824:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014828:	429a      	cmp	r2, r3
 801482a:	bfb8      	it	lt
 801482c:	460b      	movlt	r3, r1
 801482e:	460c      	mov	r4, r1
 8014830:	bfbc      	itt	lt
 8014832:	464c      	movlt	r4, r9
 8014834:	4699      	movlt	r9, r3
 8014836:	6927      	ldr	r7, [r4, #16]
 8014838:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801483c:	68a3      	ldr	r3, [r4, #8]
 801483e:	6861      	ldr	r1, [r4, #4]
 8014840:	eb07 060a 	add.w	r6, r7, sl
 8014844:	42b3      	cmp	r3, r6
 8014846:	b085      	sub	sp, #20
 8014848:	bfb8      	it	lt
 801484a:	3101      	addlt	r1, #1
 801484c:	f7ff fed8 	bl	8014600 <_Balloc>
 8014850:	b930      	cbnz	r0, 8014860 <__multiply+0x44>
 8014852:	4602      	mov	r2, r0
 8014854:	4b44      	ldr	r3, [pc, #272]	; (8014968 <__multiply+0x14c>)
 8014856:	4845      	ldr	r0, [pc, #276]	; (801496c <__multiply+0x150>)
 8014858:	f240 115d 	movw	r1, #349	; 0x15d
 801485c:	f7fe ff30 	bl	80136c0 <__assert_func>
 8014860:	f100 0514 	add.w	r5, r0, #20
 8014864:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014868:	462b      	mov	r3, r5
 801486a:	2200      	movs	r2, #0
 801486c:	4543      	cmp	r3, r8
 801486e:	d321      	bcc.n	80148b4 <__multiply+0x98>
 8014870:	f104 0314 	add.w	r3, r4, #20
 8014874:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014878:	f109 0314 	add.w	r3, r9, #20
 801487c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014880:	9202      	str	r2, [sp, #8]
 8014882:	1b3a      	subs	r2, r7, r4
 8014884:	3a15      	subs	r2, #21
 8014886:	f022 0203 	bic.w	r2, r2, #3
 801488a:	3204      	adds	r2, #4
 801488c:	f104 0115 	add.w	r1, r4, #21
 8014890:	428f      	cmp	r7, r1
 8014892:	bf38      	it	cc
 8014894:	2204      	movcc	r2, #4
 8014896:	9201      	str	r2, [sp, #4]
 8014898:	9a02      	ldr	r2, [sp, #8]
 801489a:	9303      	str	r3, [sp, #12]
 801489c:	429a      	cmp	r2, r3
 801489e:	d80c      	bhi.n	80148ba <__multiply+0x9e>
 80148a0:	2e00      	cmp	r6, #0
 80148a2:	dd03      	ble.n	80148ac <__multiply+0x90>
 80148a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d05a      	beq.n	8014962 <__multiply+0x146>
 80148ac:	6106      	str	r6, [r0, #16]
 80148ae:	b005      	add	sp, #20
 80148b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148b4:	f843 2b04 	str.w	r2, [r3], #4
 80148b8:	e7d8      	b.n	801486c <__multiply+0x50>
 80148ba:	f8b3 a000 	ldrh.w	sl, [r3]
 80148be:	f1ba 0f00 	cmp.w	sl, #0
 80148c2:	d024      	beq.n	801490e <__multiply+0xf2>
 80148c4:	f104 0e14 	add.w	lr, r4, #20
 80148c8:	46a9      	mov	r9, r5
 80148ca:	f04f 0c00 	mov.w	ip, #0
 80148ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 80148d2:	f8d9 1000 	ldr.w	r1, [r9]
 80148d6:	fa1f fb82 	uxth.w	fp, r2
 80148da:	b289      	uxth	r1, r1
 80148dc:	fb0a 110b 	mla	r1, sl, fp, r1
 80148e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80148e4:	f8d9 2000 	ldr.w	r2, [r9]
 80148e8:	4461      	add	r1, ip
 80148ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80148ee:	fb0a c20b 	mla	r2, sl, fp, ip
 80148f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80148f6:	b289      	uxth	r1, r1
 80148f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80148fc:	4577      	cmp	r7, lr
 80148fe:	f849 1b04 	str.w	r1, [r9], #4
 8014902:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014906:	d8e2      	bhi.n	80148ce <__multiply+0xb2>
 8014908:	9a01      	ldr	r2, [sp, #4]
 801490a:	f845 c002 	str.w	ip, [r5, r2]
 801490e:	9a03      	ldr	r2, [sp, #12]
 8014910:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014914:	3304      	adds	r3, #4
 8014916:	f1b9 0f00 	cmp.w	r9, #0
 801491a:	d020      	beq.n	801495e <__multiply+0x142>
 801491c:	6829      	ldr	r1, [r5, #0]
 801491e:	f104 0c14 	add.w	ip, r4, #20
 8014922:	46ae      	mov	lr, r5
 8014924:	f04f 0a00 	mov.w	sl, #0
 8014928:	f8bc b000 	ldrh.w	fp, [ip]
 801492c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014930:	fb09 220b 	mla	r2, r9, fp, r2
 8014934:	4492      	add	sl, r2
 8014936:	b289      	uxth	r1, r1
 8014938:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801493c:	f84e 1b04 	str.w	r1, [lr], #4
 8014940:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014944:	f8be 1000 	ldrh.w	r1, [lr]
 8014948:	0c12      	lsrs	r2, r2, #16
 801494a:	fb09 1102 	mla	r1, r9, r2, r1
 801494e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8014952:	4567      	cmp	r7, ip
 8014954:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014958:	d8e6      	bhi.n	8014928 <__multiply+0x10c>
 801495a:	9a01      	ldr	r2, [sp, #4]
 801495c:	50a9      	str	r1, [r5, r2]
 801495e:	3504      	adds	r5, #4
 8014960:	e79a      	b.n	8014898 <__multiply+0x7c>
 8014962:	3e01      	subs	r6, #1
 8014964:	e79c      	b.n	80148a0 <__multiply+0x84>
 8014966:	bf00      	nop
 8014968:	08016b83 	.word	0x08016b83
 801496c:	08016b27 	.word	0x08016b27

08014970 <__pow5mult>:
 8014970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014974:	4615      	mov	r5, r2
 8014976:	f012 0203 	ands.w	r2, r2, #3
 801497a:	4606      	mov	r6, r0
 801497c:	460f      	mov	r7, r1
 801497e:	d007      	beq.n	8014990 <__pow5mult+0x20>
 8014980:	4c25      	ldr	r4, [pc, #148]	; (8014a18 <__pow5mult+0xa8>)
 8014982:	3a01      	subs	r2, #1
 8014984:	2300      	movs	r3, #0
 8014986:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801498a:	f7ff fe9b 	bl	80146c4 <__multadd>
 801498e:	4607      	mov	r7, r0
 8014990:	10ad      	asrs	r5, r5, #2
 8014992:	d03d      	beq.n	8014a10 <__pow5mult+0xa0>
 8014994:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014996:	b97c      	cbnz	r4, 80149b8 <__pow5mult+0x48>
 8014998:	2010      	movs	r0, #16
 801499a:	f001 fa3b 	bl	8015e14 <malloc>
 801499e:	4602      	mov	r2, r0
 80149a0:	6270      	str	r0, [r6, #36]	; 0x24
 80149a2:	b928      	cbnz	r0, 80149b0 <__pow5mult+0x40>
 80149a4:	4b1d      	ldr	r3, [pc, #116]	; (8014a1c <__pow5mult+0xac>)
 80149a6:	481e      	ldr	r0, [pc, #120]	; (8014a20 <__pow5mult+0xb0>)
 80149a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80149ac:	f7fe fe88 	bl	80136c0 <__assert_func>
 80149b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80149b4:	6004      	str	r4, [r0, #0]
 80149b6:	60c4      	str	r4, [r0, #12]
 80149b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80149bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80149c0:	b94c      	cbnz	r4, 80149d6 <__pow5mult+0x66>
 80149c2:	f240 2171 	movw	r1, #625	; 0x271
 80149c6:	4630      	mov	r0, r6
 80149c8:	f7ff ff12 	bl	80147f0 <__i2b>
 80149cc:	2300      	movs	r3, #0
 80149ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80149d2:	4604      	mov	r4, r0
 80149d4:	6003      	str	r3, [r0, #0]
 80149d6:	f04f 0900 	mov.w	r9, #0
 80149da:	07eb      	lsls	r3, r5, #31
 80149dc:	d50a      	bpl.n	80149f4 <__pow5mult+0x84>
 80149de:	4639      	mov	r1, r7
 80149e0:	4622      	mov	r2, r4
 80149e2:	4630      	mov	r0, r6
 80149e4:	f7ff ff1a 	bl	801481c <__multiply>
 80149e8:	4639      	mov	r1, r7
 80149ea:	4680      	mov	r8, r0
 80149ec:	4630      	mov	r0, r6
 80149ee:	f7ff fe47 	bl	8014680 <_Bfree>
 80149f2:	4647      	mov	r7, r8
 80149f4:	106d      	asrs	r5, r5, #1
 80149f6:	d00b      	beq.n	8014a10 <__pow5mult+0xa0>
 80149f8:	6820      	ldr	r0, [r4, #0]
 80149fa:	b938      	cbnz	r0, 8014a0c <__pow5mult+0x9c>
 80149fc:	4622      	mov	r2, r4
 80149fe:	4621      	mov	r1, r4
 8014a00:	4630      	mov	r0, r6
 8014a02:	f7ff ff0b 	bl	801481c <__multiply>
 8014a06:	6020      	str	r0, [r4, #0]
 8014a08:	f8c0 9000 	str.w	r9, [r0]
 8014a0c:	4604      	mov	r4, r0
 8014a0e:	e7e4      	b.n	80149da <__pow5mult+0x6a>
 8014a10:	4638      	mov	r0, r7
 8014a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a16:	bf00      	nop
 8014a18:	08016c88 	.word	0x08016c88
 8014a1c:	08016b10 	.word	0x08016b10
 8014a20:	08016b27 	.word	0x08016b27

08014a24 <__lshift>:
 8014a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a28:	460c      	mov	r4, r1
 8014a2a:	6849      	ldr	r1, [r1, #4]
 8014a2c:	6923      	ldr	r3, [r4, #16]
 8014a2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014a32:	68a3      	ldr	r3, [r4, #8]
 8014a34:	4607      	mov	r7, r0
 8014a36:	4691      	mov	r9, r2
 8014a38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014a3c:	f108 0601 	add.w	r6, r8, #1
 8014a40:	42b3      	cmp	r3, r6
 8014a42:	db0b      	blt.n	8014a5c <__lshift+0x38>
 8014a44:	4638      	mov	r0, r7
 8014a46:	f7ff fddb 	bl	8014600 <_Balloc>
 8014a4a:	4605      	mov	r5, r0
 8014a4c:	b948      	cbnz	r0, 8014a62 <__lshift+0x3e>
 8014a4e:	4602      	mov	r2, r0
 8014a50:	4b2a      	ldr	r3, [pc, #168]	; (8014afc <__lshift+0xd8>)
 8014a52:	482b      	ldr	r0, [pc, #172]	; (8014b00 <__lshift+0xdc>)
 8014a54:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014a58:	f7fe fe32 	bl	80136c0 <__assert_func>
 8014a5c:	3101      	adds	r1, #1
 8014a5e:	005b      	lsls	r3, r3, #1
 8014a60:	e7ee      	b.n	8014a40 <__lshift+0x1c>
 8014a62:	2300      	movs	r3, #0
 8014a64:	f100 0114 	add.w	r1, r0, #20
 8014a68:	f100 0210 	add.w	r2, r0, #16
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	4553      	cmp	r3, sl
 8014a70:	db37      	blt.n	8014ae2 <__lshift+0xbe>
 8014a72:	6920      	ldr	r0, [r4, #16]
 8014a74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014a78:	f104 0314 	add.w	r3, r4, #20
 8014a7c:	f019 091f 	ands.w	r9, r9, #31
 8014a80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014a84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014a88:	d02f      	beq.n	8014aea <__lshift+0xc6>
 8014a8a:	f1c9 0e20 	rsb	lr, r9, #32
 8014a8e:	468a      	mov	sl, r1
 8014a90:	f04f 0c00 	mov.w	ip, #0
 8014a94:	681a      	ldr	r2, [r3, #0]
 8014a96:	fa02 f209 	lsl.w	r2, r2, r9
 8014a9a:	ea42 020c 	orr.w	r2, r2, ip
 8014a9e:	f84a 2b04 	str.w	r2, [sl], #4
 8014aa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8014aa6:	4298      	cmp	r0, r3
 8014aa8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8014aac:	d8f2      	bhi.n	8014a94 <__lshift+0x70>
 8014aae:	1b03      	subs	r3, r0, r4
 8014ab0:	3b15      	subs	r3, #21
 8014ab2:	f023 0303 	bic.w	r3, r3, #3
 8014ab6:	3304      	adds	r3, #4
 8014ab8:	f104 0215 	add.w	r2, r4, #21
 8014abc:	4290      	cmp	r0, r2
 8014abe:	bf38      	it	cc
 8014ac0:	2304      	movcc	r3, #4
 8014ac2:	f841 c003 	str.w	ip, [r1, r3]
 8014ac6:	f1bc 0f00 	cmp.w	ip, #0
 8014aca:	d001      	beq.n	8014ad0 <__lshift+0xac>
 8014acc:	f108 0602 	add.w	r6, r8, #2
 8014ad0:	3e01      	subs	r6, #1
 8014ad2:	4638      	mov	r0, r7
 8014ad4:	612e      	str	r6, [r5, #16]
 8014ad6:	4621      	mov	r1, r4
 8014ad8:	f7ff fdd2 	bl	8014680 <_Bfree>
 8014adc:	4628      	mov	r0, r5
 8014ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ae2:	f842 0f04 	str.w	r0, [r2, #4]!
 8014ae6:	3301      	adds	r3, #1
 8014ae8:	e7c1      	b.n	8014a6e <__lshift+0x4a>
 8014aea:	3904      	subs	r1, #4
 8014aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8014af0:	f841 2f04 	str.w	r2, [r1, #4]!
 8014af4:	4298      	cmp	r0, r3
 8014af6:	d8f9      	bhi.n	8014aec <__lshift+0xc8>
 8014af8:	e7ea      	b.n	8014ad0 <__lshift+0xac>
 8014afa:	bf00      	nop
 8014afc:	08016b83 	.word	0x08016b83
 8014b00:	08016b27 	.word	0x08016b27

08014b04 <__mcmp>:
 8014b04:	b530      	push	{r4, r5, lr}
 8014b06:	6902      	ldr	r2, [r0, #16]
 8014b08:	690c      	ldr	r4, [r1, #16]
 8014b0a:	1b12      	subs	r2, r2, r4
 8014b0c:	d10e      	bne.n	8014b2c <__mcmp+0x28>
 8014b0e:	f100 0314 	add.w	r3, r0, #20
 8014b12:	3114      	adds	r1, #20
 8014b14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014b18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014b1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014b20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014b24:	42a5      	cmp	r5, r4
 8014b26:	d003      	beq.n	8014b30 <__mcmp+0x2c>
 8014b28:	d305      	bcc.n	8014b36 <__mcmp+0x32>
 8014b2a:	2201      	movs	r2, #1
 8014b2c:	4610      	mov	r0, r2
 8014b2e:	bd30      	pop	{r4, r5, pc}
 8014b30:	4283      	cmp	r3, r0
 8014b32:	d3f3      	bcc.n	8014b1c <__mcmp+0x18>
 8014b34:	e7fa      	b.n	8014b2c <__mcmp+0x28>
 8014b36:	f04f 32ff 	mov.w	r2, #4294967295
 8014b3a:	e7f7      	b.n	8014b2c <__mcmp+0x28>

08014b3c <__mdiff>:
 8014b3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b40:	460c      	mov	r4, r1
 8014b42:	4606      	mov	r6, r0
 8014b44:	4611      	mov	r1, r2
 8014b46:	4620      	mov	r0, r4
 8014b48:	4690      	mov	r8, r2
 8014b4a:	f7ff ffdb 	bl	8014b04 <__mcmp>
 8014b4e:	1e05      	subs	r5, r0, #0
 8014b50:	d110      	bne.n	8014b74 <__mdiff+0x38>
 8014b52:	4629      	mov	r1, r5
 8014b54:	4630      	mov	r0, r6
 8014b56:	f7ff fd53 	bl	8014600 <_Balloc>
 8014b5a:	b930      	cbnz	r0, 8014b6a <__mdiff+0x2e>
 8014b5c:	4b3a      	ldr	r3, [pc, #232]	; (8014c48 <__mdiff+0x10c>)
 8014b5e:	4602      	mov	r2, r0
 8014b60:	f240 2132 	movw	r1, #562	; 0x232
 8014b64:	4839      	ldr	r0, [pc, #228]	; (8014c4c <__mdiff+0x110>)
 8014b66:	f7fe fdab 	bl	80136c0 <__assert_func>
 8014b6a:	2301      	movs	r3, #1
 8014b6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014b70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b74:	bfa4      	itt	ge
 8014b76:	4643      	movge	r3, r8
 8014b78:	46a0      	movge	r8, r4
 8014b7a:	4630      	mov	r0, r6
 8014b7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014b80:	bfa6      	itte	ge
 8014b82:	461c      	movge	r4, r3
 8014b84:	2500      	movge	r5, #0
 8014b86:	2501      	movlt	r5, #1
 8014b88:	f7ff fd3a 	bl	8014600 <_Balloc>
 8014b8c:	b920      	cbnz	r0, 8014b98 <__mdiff+0x5c>
 8014b8e:	4b2e      	ldr	r3, [pc, #184]	; (8014c48 <__mdiff+0x10c>)
 8014b90:	4602      	mov	r2, r0
 8014b92:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014b96:	e7e5      	b.n	8014b64 <__mdiff+0x28>
 8014b98:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014b9c:	6926      	ldr	r6, [r4, #16]
 8014b9e:	60c5      	str	r5, [r0, #12]
 8014ba0:	f104 0914 	add.w	r9, r4, #20
 8014ba4:	f108 0514 	add.w	r5, r8, #20
 8014ba8:	f100 0e14 	add.w	lr, r0, #20
 8014bac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014bb0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014bb4:	f108 0210 	add.w	r2, r8, #16
 8014bb8:	46f2      	mov	sl, lr
 8014bba:	2100      	movs	r1, #0
 8014bbc:	f859 3b04 	ldr.w	r3, [r9], #4
 8014bc0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014bc4:	fa1f f883 	uxth.w	r8, r3
 8014bc8:	fa11 f18b 	uxtah	r1, r1, fp
 8014bcc:	0c1b      	lsrs	r3, r3, #16
 8014bce:	eba1 0808 	sub.w	r8, r1, r8
 8014bd2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014bd6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014bda:	fa1f f888 	uxth.w	r8, r8
 8014bde:	1419      	asrs	r1, r3, #16
 8014be0:	454e      	cmp	r6, r9
 8014be2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014be6:	f84a 3b04 	str.w	r3, [sl], #4
 8014bea:	d8e7      	bhi.n	8014bbc <__mdiff+0x80>
 8014bec:	1b33      	subs	r3, r6, r4
 8014bee:	3b15      	subs	r3, #21
 8014bf0:	f023 0303 	bic.w	r3, r3, #3
 8014bf4:	3304      	adds	r3, #4
 8014bf6:	3415      	adds	r4, #21
 8014bf8:	42a6      	cmp	r6, r4
 8014bfa:	bf38      	it	cc
 8014bfc:	2304      	movcc	r3, #4
 8014bfe:	441d      	add	r5, r3
 8014c00:	4473      	add	r3, lr
 8014c02:	469e      	mov	lr, r3
 8014c04:	462e      	mov	r6, r5
 8014c06:	4566      	cmp	r6, ip
 8014c08:	d30e      	bcc.n	8014c28 <__mdiff+0xec>
 8014c0a:	f10c 0203 	add.w	r2, ip, #3
 8014c0e:	1b52      	subs	r2, r2, r5
 8014c10:	f022 0203 	bic.w	r2, r2, #3
 8014c14:	3d03      	subs	r5, #3
 8014c16:	45ac      	cmp	ip, r5
 8014c18:	bf38      	it	cc
 8014c1a:	2200      	movcc	r2, #0
 8014c1c:	441a      	add	r2, r3
 8014c1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014c22:	b17b      	cbz	r3, 8014c44 <__mdiff+0x108>
 8014c24:	6107      	str	r7, [r0, #16]
 8014c26:	e7a3      	b.n	8014b70 <__mdiff+0x34>
 8014c28:	f856 8b04 	ldr.w	r8, [r6], #4
 8014c2c:	fa11 f288 	uxtah	r2, r1, r8
 8014c30:	1414      	asrs	r4, r2, #16
 8014c32:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014c36:	b292      	uxth	r2, r2
 8014c38:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014c3c:	f84e 2b04 	str.w	r2, [lr], #4
 8014c40:	1421      	asrs	r1, r4, #16
 8014c42:	e7e0      	b.n	8014c06 <__mdiff+0xca>
 8014c44:	3f01      	subs	r7, #1
 8014c46:	e7ea      	b.n	8014c1e <__mdiff+0xe2>
 8014c48:	08016b83 	.word	0x08016b83
 8014c4c:	08016b27 	.word	0x08016b27

08014c50 <__d2b>:
 8014c50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014c54:	4689      	mov	r9, r1
 8014c56:	2101      	movs	r1, #1
 8014c58:	ec57 6b10 	vmov	r6, r7, d0
 8014c5c:	4690      	mov	r8, r2
 8014c5e:	f7ff fccf 	bl	8014600 <_Balloc>
 8014c62:	4604      	mov	r4, r0
 8014c64:	b930      	cbnz	r0, 8014c74 <__d2b+0x24>
 8014c66:	4602      	mov	r2, r0
 8014c68:	4b25      	ldr	r3, [pc, #148]	; (8014d00 <__d2b+0xb0>)
 8014c6a:	4826      	ldr	r0, [pc, #152]	; (8014d04 <__d2b+0xb4>)
 8014c6c:	f240 310a 	movw	r1, #778	; 0x30a
 8014c70:	f7fe fd26 	bl	80136c0 <__assert_func>
 8014c74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014c78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014c7c:	bb35      	cbnz	r5, 8014ccc <__d2b+0x7c>
 8014c7e:	2e00      	cmp	r6, #0
 8014c80:	9301      	str	r3, [sp, #4]
 8014c82:	d028      	beq.n	8014cd6 <__d2b+0x86>
 8014c84:	4668      	mov	r0, sp
 8014c86:	9600      	str	r6, [sp, #0]
 8014c88:	f7ff fd82 	bl	8014790 <__lo0bits>
 8014c8c:	9900      	ldr	r1, [sp, #0]
 8014c8e:	b300      	cbz	r0, 8014cd2 <__d2b+0x82>
 8014c90:	9a01      	ldr	r2, [sp, #4]
 8014c92:	f1c0 0320 	rsb	r3, r0, #32
 8014c96:	fa02 f303 	lsl.w	r3, r2, r3
 8014c9a:	430b      	orrs	r3, r1
 8014c9c:	40c2      	lsrs	r2, r0
 8014c9e:	6163      	str	r3, [r4, #20]
 8014ca0:	9201      	str	r2, [sp, #4]
 8014ca2:	9b01      	ldr	r3, [sp, #4]
 8014ca4:	61a3      	str	r3, [r4, #24]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	bf14      	ite	ne
 8014caa:	2202      	movne	r2, #2
 8014cac:	2201      	moveq	r2, #1
 8014cae:	6122      	str	r2, [r4, #16]
 8014cb0:	b1d5      	cbz	r5, 8014ce8 <__d2b+0x98>
 8014cb2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014cb6:	4405      	add	r5, r0
 8014cb8:	f8c9 5000 	str.w	r5, [r9]
 8014cbc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014cc0:	f8c8 0000 	str.w	r0, [r8]
 8014cc4:	4620      	mov	r0, r4
 8014cc6:	b003      	add	sp, #12
 8014cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ccc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014cd0:	e7d5      	b.n	8014c7e <__d2b+0x2e>
 8014cd2:	6161      	str	r1, [r4, #20]
 8014cd4:	e7e5      	b.n	8014ca2 <__d2b+0x52>
 8014cd6:	a801      	add	r0, sp, #4
 8014cd8:	f7ff fd5a 	bl	8014790 <__lo0bits>
 8014cdc:	9b01      	ldr	r3, [sp, #4]
 8014cde:	6163      	str	r3, [r4, #20]
 8014ce0:	2201      	movs	r2, #1
 8014ce2:	6122      	str	r2, [r4, #16]
 8014ce4:	3020      	adds	r0, #32
 8014ce6:	e7e3      	b.n	8014cb0 <__d2b+0x60>
 8014ce8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014cec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014cf0:	f8c9 0000 	str.w	r0, [r9]
 8014cf4:	6918      	ldr	r0, [r3, #16]
 8014cf6:	f7ff fd2b 	bl	8014750 <__hi0bits>
 8014cfa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014cfe:	e7df      	b.n	8014cc0 <__d2b+0x70>
 8014d00:	08016b83 	.word	0x08016b83
 8014d04:	08016b27 	.word	0x08016b27

08014d08 <_mprec_log10>:
 8014d08:	2817      	cmp	r0, #23
 8014d0a:	b5d0      	push	{r4, r6, r7, lr}
 8014d0c:	4604      	mov	r4, r0
 8014d0e:	dc07      	bgt.n	8014d20 <_mprec_log10+0x18>
 8014d10:	4809      	ldr	r0, [pc, #36]	; (8014d38 <_mprec_log10+0x30>)
 8014d12:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8014d16:	e9d4 0100 	ldrd	r0, r1, [r4]
 8014d1a:	ec41 0b10 	vmov	d0, r0, r1
 8014d1e:	bdd0      	pop	{r4, r6, r7, pc}
 8014d20:	4906      	ldr	r1, [pc, #24]	; (8014d3c <_mprec_log10+0x34>)
 8014d22:	4f07      	ldr	r7, [pc, #28]	; (8014d40 <_mprec_log10+0x38>)
 8014d24:	2000      	movs	r0, #0
 8014d26:	2600      	movs	r6, #0
 8014d28:	4632      	mov	r2, r6
 8014d2a:	463b      	mov	r3, r7
 8014d2c:	f7eb fc3c 	bl	80005a8 <__aeabi_dmul>
 8014d30:	3c01      	subs	r4, #1
 8014d32:	d1f9      	bne.n	8014d28 <_mprec_log10+0x20>
 8014d34:	e7f1      	b.n	8014d1a <_mprec_log10+0x12>
 8014d36:	bf00      	nop
 8014d38:	08016bc0 	.word	0x08016bc0
 8014d3c:	3ff00000 	.word	0x3ff00000
 8014d40:	40240000 	.word	0x40240000

08014d44 <_calloc_r>:
 8014d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014d46:	fba1 2402 	umull	r2, r4, r1, r2
 8014d4a:	b94c      	cbnz	r4, 8014d60 <_calloc_r+0x1c>
 8014d4c:	4611      	mov	r1, r2
 8014d4e:	9201      	str	r2, [sp, #4]
 8014d50:	f000 f87a 	bl	8014e48 <_malloc_r>
 8014d54:	9a01      	ldr	r2, [sp, #4]
 8014d56:	4605      	mov	r5, r0
 8014d58:	b930      	cbnz	r0, 8014d68 <_calloc_r+0x24>
 8014d5a:	4628      	mov	r0, r5
 8014d5c:	b003      	add	sp, #12
 8014d5e:	bd30      	pop	{r4, r5, pc}
 8014d60:	220c      	movs	r2, #12
 8014d62:	6002      	str	r2, [r0, #0]
 8014d64:	2500      	movs	r5, #0
 8014d66:	e7f8      	b.n	8014d5a <_calloc_r+0x16>
 8014d68:	4621      	mov	r1, r4
 8014d6a:	f7fe fd35 	bl	80137d8 <memset>
 8014d6e:	e7f4      	b.n	8014d5a <_calloc_r+0x16>

08014d70 <_free_r>:
 8014d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014d72:	2900      	cmp	r1, #0
 8014d74:	d044      	beq.n	8014e00 <_free_r+0x90>
 8014d76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014d7a:	9001      	str	r0, [sp, #4]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	f1a1 0404 	sub.w	r4, r1, #4
 8014d82:	bfb8      	it	lt
 8014d84:	18e4      	addlt	r4, r4, r3
 8014d86:	f001 f84d 	bl	8015e24 <__malloc_lock>
 8014d8a:	4a1e      	ldr	r2, [pc, #120]	; (8014e04 <_free_r+0x94>)
 8014d8c:	9801      	ldr	r0, [sp, #4]
 8014d8e:	6813      	ldr	r3, [r2, #0]
 8014d90:	b933      	cbnz	r3, 8014da0 <_free_r+0x30>
 8014d92:	6063      	str	r3, [r4, #4]
 8014d94:	6014      	str	r4, [r2, #0]
 8014d96:	b003      	add	sp, #12
 8014d98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014d9c:	f001 b848 	b.w	8015e30 <__malloc_unlock>
 8014da0:	42a3      	cmp	r3, r4
 8014da2:	d908      	bls.n	8014db6 <_free_r+0x46>
 8014da4:	6825      	ldr	r5, [r4, #0]
 8014da6:	1961      	adds	r1, r4, r5
 8014da8:	428b      	cmp	r3, r1
 8014daa:	bf01      	itttt	eq
 8014dac:	6819      	ldreq	r1, [r3, #0]
 8014dae:	685b      	ldreq	r3, [r3, #4]
 8014db0:	1949      	addeq	r1, r1, r5
 8014db2:	6021      	streq	r1, [r4, #0]
 8014db4:	e7ed      	b.n	8014d92 <_free_r+0x22>
 8014db6:	461a      	mov	r2, r3
 8014db8:	685b      	ldr	r3, [r3, #4]
 8014dba:	b10b      	cbz	r3, 8014dc0 <_free_r+0x50>
 8014dbc:	42a3      	cmp	r3, r4
 8014dbe:	d9fa      	bls.n	8014db6 <_free_r+0x46>
 8014dc0:	6811      	ldr	r1, [r2, #0]
 8014dc2:	1855      	adds	r5, r2, r1
 8014dc4:	42a5      	cmp	r5, r4
 8014dc6:	d10b      	bne.n	8014de0 <_free_r+0x70>
 8014dc8:	6824      	ldr	r4, [r4, #0]
 8014dca:	4421      	add	r1, r4
 8014dcc:	1854      	adds	r4, r2, r1
 8014dce:	42a3      	cmp	r3, r4
 8014dd0:	6011      	str	r1, [r2, #0]
 8014dd2:	d1e0      	bne.n	8014d96 <_free_r+0x26>
 8014dd4:	681c      	ldr	r4, [r3, #0]
 8014dd6:	685b      	ldr	r3, [r3, #4]
 8014dd8:	6053      	str	r3, [r2, #4]
 8014dda:	4421      	add	r1, r4
 8014ddc:	6011      	str	r1, [r2, #0]
 8014dde:	e7da      	b.n	8014d96 <_free_r+0x26>
 8014de0:	d902      	bls.n	8014de8 <_free_r+0x78>
 8014de2:	230c      	movs	r3, #12
 8014de4:	6003      	str	r3, [r0, #0]
 8014de6:	e7d6      	b.n	8014d96 <_free_r+0x26>
 8014de8:	6825      	ldr	r5, [r4, #0]
 8014dea:	1961      	adds	r1, r4, r5
 8014dec:	428b      	cmp	r3, r1
 8014dee:	bf04      	itt	eq
 8014df0:	6819      	ldreq	r1, [r3, #0]
 8014df2:	685b      	ldreq	r3, [r3, #4]
 8014df4:	6063      	str	r3, [r4, #4]
 8014df6:	bf04      	itt	eq
 8014df8:	1949      	addeq	r1, r1, r5
 8014dfa:	6021      	streq	r1, [r4, #0]
 8014dfc:	6054      	str	r4, [r2, #4]
 8014dfe:	e7ca      	b.n	8014d96 <_free_r+0x26>
 8014e00:	b003      	add	sp, #12
 8014e02:	bd30      	pop	{r4, r5, pc}
 8014e04:	20002560 	.word	0x20002560

08014e08 <sbrk_aligned>:
 8014e08:	b570      	push	{r4, r5, r6, lr}
 8014e0a:	4e0e      	ldr	r6, [pc, #56]	; (8014e44 <sbrk_aligned+0x3c>)
 8014e0c:	460c      	mov	r4, r1
 8014e0e:	6831      	ldr	r1, [r6, #0]
 8014e10:	4605      	mov	r5, r0
 8014e12:	b911      	cbnz	r1, 8014e1a <sbrk_aligned+0x12>
 8014e14:	f000 f88c 	bl	8014f30 <_sbrk_r>
 8014e18:	6030      	str	r0, [r6, #0]
 8014e1a:	4621      	mov	r1, r4
 8014e1c:	4628      	mov	r0, r5
 8014e1e:	f000 f887 	bl	8014f30 <_sbrk_r>
 8014e22:	1c43      	adds	r3, r0, #1
 8014e24:	d00a      	beq.n	8014e3c <sbrk_aligned+0x34>
 8014e26:	1cc4      	adds	r4, r0, #3
 8014e28:	f024 0403 	bic.w	r4, r4, #3
 8014e2c:	42a0      	cmp	r0, r4
 8014e2e:	d007      	beq.n	8014e40 <sbrk_aligned+0x38>
 8014e30:	1a21      	subs	r1, r4, r0
 8014e32:	4628      	mov	r0, r5
 8014e34:	f000 f87c 	bl	8014f30 <_sbrk_r>
 8014e38:	3001      	adds	r0, #1
 8014e3a:	d101      	bne.n	8014e40 <sbrk_aligned+0x38>
 8014e3c:	f04f 34ff 	mov.w	r4, #4294967295
 8014e40:	4620      	mov	r0, r4
 8014e42:	bd70      	pop	{r4, r5, r6, pc}
 8014e44:	20002564 	.word	0x20002564

08014e48 <_malloc_r>:
 8014e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e4c:	1ccd      	adds	r5, r1, #3
 8014e4e:	f025 0503 	bic.w	r5, r5, #3
 8014e52:	3508      	adds	r5, #8
 8014e54:	2d0c      	cmp	r5, #12
 8014e56:	bf38      	it	cc
 8014e58:	250c      	movcc	r5, #12
 8014e5a:	2d00      	cmp	r5, #0
 8014e5c:	4607      	mov	r7, r0
 8014e5e:	db01      	blt.n	8014e64 <_malloc_r+0x1c>
 8014e60:	42a9      	cmp	r1, r5
 8014e62:	d905      	bls.n	8014e70 <_malloc_r+0x28>
 8014e64:	230c      	movs	r3, #12
 8014e66:	603b      	str	r3, [r7, #0]
 8014e68:	2600      	movs	r6, #0
 8014e6a:	4630      	mov	r0, r6
 8014e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e70:	4e2e      	ldr	r6, [pc, #184]	; (8014f2c <_malloc_r+0xe4>)
 8014e72:	f000 ffd7 	bl	8015e24 <__malloc_lock>
 8014e76:	6833      	ldr	r3, [r6, #0]
 8014e78:	461c      	mov	r4, r3
 8014e7a:	bb34      	cbnz	r4, 8014eca <_malloc_r+0x82>
 8014e7c:	4629      	mov	r1, r5
 8014e7e:	4638      	mov	r0, r7
 8014e80:	f7ff ffc2 	bl	8014e08 <sbrk_aligned>
 8014e84:	1c43      	adds	r3, r0, #1
 8014e86:	4604      	mov	r4, r0
 8014e88:	d14d      	bne.n	8014f26 <_malloc_r+0xde>
 8014e8a:	6834      	ldr	r4, [r6, #0]
 8014e8c:	4626      	mov	r6, r4
 8014e8e:	2e00      	cmp	r6, #0
 8014e90:	d140      	bne.n	8014f14 <_malloc_r+0xcc>
 8014e92:	6823      	ldr	r3, [r4, #0]
 8014e94:	4631      	mov	r1, r6
 8014e96:	4638      	mov	r0, r7
 8014e98:	eb04 0803 	add.w	r8, r4, r3
 8014e9c:	f000 f848 	bl	8014f30 <_sbrk_r>
 8014ea0:	4580      	cmp	r8, r0
 8014ea2:	d13a      	bne.n	8014f1a <_malloc_r+0xd2>
 8014ea4:	6821      	ldr	r1, [r4, #0]
 8014ea6:	3503      	adds	r5, #3
 8014ea8:	1a6d      	subs	r5, r5, r1
 8014eaa:	f025 0503 	bic.w	r5, r5, #3
 8014eae:	3508      	adds	r5, #8
 8014eb0:	2d0c      	cmp	r5, #12
 8014eb2:	bf38      	it	cc
 8014eb4:	250c      	movcc	r5, #12
 8014eb6:	4629      	mov	r1, r5
 8014eb8:	4638      	mov	r0, r7
 8014eba:	f7ff ffa5 	bl	8014e08 <sbrk_aligned>
 8014ebe:	3001      	adds	r0, #1
 8014ec0:	d02b      	beq.n	8014f1a <_malloc_r+0xd2>
 8014ec2:	6823      	ldr	r3, [r4, #0]
 8014ec4:	442b      	add	r3, r5
 8014ec6:	6023      	str	r3, [r4, #0]
 8014ec8:	e00e      	b.n	8014ee8 <_malloc_r+0xa0>
 8014eca:	6822      	ldr	r2, [r4, #0]
 8014ecc:	1b52      	subs	r2, r2, r5
 8014ece:	d41e      	bmi.n	8014f0e <_malloc_r+0xc6>
 8014ed0:	2a0b      	cmp	r2, #11
 8014ed2:	d916      	bls.n	8014f02 <_malloc_r+0xba>
 8014ed4:	1961      	adds	r1, r4, r5
 8014ed6:	42a3      	cmp	r3, r4
 8014ed8:	6025      	str	r5, [r4, #0]
 8014eda:	bf18      	it	ne
 8014edc:	6059      	strne	r1, [r3, #4]
 8014ede:	6863      	ldr	r3, [r4, #4]
 8014ee0:	bf08      	it	eq
 8014ee2:	6031      	streq	r1, [r6, #0]
 8014ee4:	5162      	str	r2, [r4, r5]
 8014ee6:	604b      	str	r3, [r1, #4]
 8014ee8:	4638      	mov	r0, r7
 8014eea:	f104 060b 	add.w	r6, r4, #11
 8014eee:	f000 ff9f 	bl	8015e30 <__malloc_unlock>
 8014ef2:	f026 0607 	bic.w	r6, r6, #7
 8014ef6:	1d23      	adds	r3, r4, #4
 8014ef8:	1af2      	subs	r2, r6, r3
 8014efa:	d0b6      	beq.n	8014e6a <_malloc_r+0x22>
 8014efc:	1b9b      	subs	r3, r3, r6
 8014efe:	50a3      	str	r3, [r4, r2]
 8014f00:	e7b3      	b.n	8014e6a <_malloc_r+0x22>
 8014f02:	6862      	ldr	r2, [r4, #4]
 8014f04:	42a3      	cmp	r3, r4
 8014f06:	bf0c      	ite	eq
 8014f08:	6032      	streq	r2, [r6, #0]
 8014f0a:	605a      	strne	r2, [r3, #4]
 8014f0c:	e7ec      	b.n	8014ee8 <_malloc_r+0xa0>
 8014f0e:	4623      	mov	r3, r4
 8014f10:	6864      	ldr	r4, [r4, #4]
 8014f12:	e7b2      	b.n	8014e7a <_malloc_r+0x32>
 8014f14:	4634      	mov	r4, r6
 8014f16:	6876      	ldr	r6, [r6, #4]
 8014f18:	e7b9      	b.n	8014e8e <_malloc_r+0x46>
 8014f1a:	230c      	movs	r3, #12
 8014f1c:	603b      	str	r3, [r7, #0]
 8014f1e:	4638      	mov	r0, r7
 8014f20:	f000 ff86 	bl	8015e30 <__malloc_unlock>
 8014f24:	e7a1      	b.n	8014e6a <_malloc_r+0x22>
 8014f26:	6025      	str	r5, [r4, #0]
 8014f28:	e7de      	b.n	8014ee8 <_malloc_r+0xa0>
 8014f2a:	bf00      	nop
 8014f2c:	20002560 	.word	0x20002560

08014f30 <_sbrk_r>:
 8014f30:	b538      	push	{r3, r4, r5, lr}
 8014f32:	4d06      	ldr	r5, [pc, #24]	; (8014f4c <_sbrk_r+0x1c>)
 8014f34:	2300      	movs	r3, #0
 8014f36:	4604      	mov	r4, r0
 8014f38:	4608      	mov	r0, r1
 8014f3a:	602b      	str	r3, [r5, #0]
 8014f3c:	f7ed fd86 	bl	8002a4c <_sbrk>
 8014f40:	1c43      	adds	r3, r0, #1
 8014f42:	d102      	bne.n	8014f4a <_sbrk_r+0x1a>
 8014f44:	682b      	ldr	r3, [r5, #0]
 8014f46:	b103      	cbz	r3, 8014f4a <_sbrk_r+0x1a>
 8014f48:	6023      	str	r3, [r4, #0]
 8014f4a:	bd38      	pop	{r3, r4, r5, pc}
 8014f4c:	20002568 	.word	0x20002568

08014f50 <_raise_r>:
 8014f50:	291f      	cmp	r1, #31
 8014f52:	b538      	push	{r3, r4, r5, lr}
 8014f54:	4604      	mov	r4, r0
 8014f56:	460d      	mov	r5, r1
 8014f58:	d904      	bls.n	8014f64 <_raise_r+0x14>
 8014f5a:	2316      	movs	r3, #22
 8014f5c:	6003      	str	r3, [r0, #0]
 8014f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8014f62:	bd38      	pop	{r3, r4, r5, pc}
 8014f64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014f66:	b112      	cbz	r2, 8014f6e <_raise_r+0x1e>
 8014f68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014f6c:	b94b      	cbnz	r3, 8014f82 <_raise_r+0x32>
 8014f6e:	4620      	mov	r0, r4
 8014f70:	f000 f830 	bl	8014fd4 <_getpid_r>
 8014f74:	462a      	mov	r2, r5
 8014f76:	4601      	mov	r1, r0
 8014f78:	4620      	mov	r0, r4
 8014f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f7e:	f000 b817 	b.w	8014fb0 <_kill_r>
 8014f82:	2b01      	cmp	r3, #1
 8014f84:	d00a      	beq.n	8014f9c <_raise_r+0x4c>
 8014f86:	1c59      	adds	r1, r3, #1
 8014f88:	d103      	bne.n	8014f92 <_raise_r+0x42>
 8014f8a:	2316      	movs	r3, #22
 8014f8c:	6003      	str	r3, [r0, #0]
 8014f8e:	2001      	movs	r0, #1
 8014f90:	e7e7      	b.n	8014f62 <_raise_r+0x12>
 8014f92:	2400      	movs	r4, #0
 8014f94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014f98:	4628      	mov	r0, r5
 8014f9a:	4798      	blx	r3
 8014f9c:	2000      	movs	r0, #0
 8014f9e:	e7e0      	b.n	8014f62 <_raise_r+0x12>

08014fa0 <raise>:
 8014fa0:	4b02      	ldr	r3, [pc, #8]	; (8014fac <raise+0xc>)
 8014fa2:	4601      	mov	r1, r0
 8014fa4:	6818      	ldr	r0, [r3, #0]
 8014fa6:	f7ff bfd3 	b.w	8014f50 <_raise_r>
 8014faa:	bf00      	nop
 8014fac:	2000014c 	.word	0x2000014c

08014fb0 <_kill_r>:
 8014fb0:	b538      	push	{r3, r4, r5, lr}
 8014fb2:	4d07      	ldr	r5, [pc, #28]	; (8014fd0 <_kill_r+0x20>)
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	4604      	mov	r4, r0
 8014fb8:	4608      	mov	r0, r1
 8014fba:	4611      	mov	r1, r2
 8014fbc:	602b      	str	r3, [r5, #0]
 8014fbe:	f7ed fcbd 	bl	800293c <_kill>
 8014fc2:	1c43      	adds	r3, r0, #1
 8014fc4:	d102      	bne.n	8014fcc <_kill_r+0x1c>
 8014fc6:	682b      	ldr	r3, [r5, #0]
 8014fc8:	b103      	cbz	r3, 8014fcc <_kill_r+0x1c>
 8014fca:	6023      	str	r3, [r4, #0]
 8014fcc:	bd38      	pop	{r3, r4, r5, pc}
 8014fce:	bf00      	nop
 8014fd0:	20002568 	.word	0x20002568

08014fd4 <_getpid_r>:
 8014fd4:	f7ed bcaa 	b.w	800292c <_getpid>

08014fd8 <__sread>:
 8014fd8:	b510      	push	{r4, lr}
 8014fda:	460c      	mov	r4, r1
 8014fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fe0:	f000 ff2c 	bl	8015e3c <_read_r>
 8014fe4:	2800      	cmp	r0, #0
 8014fe6:	bfab      	itete	ge
 8014fe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014fea:	89a3      	ldrhlt	r3, [r4, #12]
 8014fec:	181b      	addge	r3, r3, r0
 8014fee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014ff2:	bfac      	ite	ge
 8014ff4:	6563      	strge	r3, [r4, #84]	; 0x54
 8014ff6:	81a3      	strhlt	r3, [r4, #12]
 8014ff8:	bd10      	pop	{r4, pc}

08014ffa <__swrite>:
 8014ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ffe:	461f      	mov	r7, r3
 8015000:	898b      	ldrh	r3, [r1, #12]
 8015002:	05db      	lsls	r3, r3, #23
 8015004:	4605      	mov	r5, r0
 8015006:	460c      	mov	r4, r1
 8015008:	4616      	mov	r6, r2
 801500a:	d505      	bpl.n	8015018 <__swrite+0x1e>
 801500c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015010:	2302      	movs	r3, #2
 8015012:	2200      	movs	r2, #0
 8015014:	f000 feec 	bl	8015df0 <_lseek_r>
 8015018:	89a3      	ldrh	r3, [r4, #12]
 801501a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801501e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015022:	81a3      	strh	r3, [r4, #12]
 8015024:	4632      	mov	r2, r6
 8015026:	463b      	mov	r3, r7
 8015028:	4628      	mov	r0, r5
 801502a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801502e:	f000 b81f 	b.w	8015070 <_write_r>

08015032 <__sseek>:
 8015032:	b510      	push	{r4, lr}
 8015034:	460c      	mov	r4, r1
 8015036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801503a:	f000 fed9 	bl	8015df0 <_lseek_r>
 801503e:	1c43      	adds	r3, r0, #1
 8015040:	89a3      	ldrh	r3, [r4, #12]
 8015042:	bf15      	itete	ne
 8015044:	6560      	strne	r0, [r4, #84]	; 0x54
 8015046:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801504a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801504e:	81a3      	strheq	r3, [r4, #12]
 8015050:	bf18      	it	ne
 8015052:	81a3      	strhne	r3, [r4, #12]
 8015054:	bd10      	pop	{r4, pc}

08015056 <__sclose>:
 8015056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801505a:	f000 b81b 	b.w	8015094 <_close_r>

0801505e <strcpy>:
 801505e:	4603      	mov	r3, r0
 8015060:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015064:	f803 2b01 	strb.w	r2, [r3], #1
 8015068:	2a00      	cmp	r2, #0
 801506a:	d1f9      	bne.n	8015060 <strcpy+0x2>
 801506c:	4770      	bx	lr
	...

08015070 <_write_r>:
 8015070:	b538      	push	{r3, r4, r5, lr}
 8015072:	4d07      	ldr	r5, [pc, #28]	; (8015090 <_write_r+0x20>)
 8015074:	4604      	mov	r4, r0
 8015076:	4608      	mov	r0, r1
 8015078:	4611      	mov	r1, r2
 801507a:	2200      	movs	r2, #0
 801507c:	602a      	str	r2, [r5, #0]
 801507e:	461a      	mov	r2, r3
 8015080:	f7ed fc93 	bl	80029aa <_write>
 8015084:	1c43      	adds	r3, r0, #1
 8015086:	d102      	bne.n	801508e <_write_r+0x1e>
 8015088:	682b      	ldr	r3, [r5, #0]
 801508a:	b103      	cbz	r3, 801508e <_write_r+0x1e>
 801508c:	6023      	str	r3, [r4, #0]
 801508e:	bd38      	pop	{r3, r4, r5, pc}
 8015090:	20002568 	.word	0x20002568

08015094 <_close_r>:
 8015094:	b538      	push	{r3, r4, r5, lr}
 8015096:	4d06      	ldr	r5, [pc, #24]	; (80150b0 <_close_r+0x1c>)
 8015098:	2300      	movs	r3, #0
 801509a:	4604      	mov	r4, r0
 801509c:	4608      	mov	r0, r1
 801509e:	602b      	str	r3, [r5, #0]
 80150a0:	f7ed fc9f 	bl	80029e2 <_close>
 80150a4:	1c43      	adds	r3, r0, #1
 80150a6:	d102      	bne.n	80150ae <_close_r+0x1a>
 80150a8:	682b      	ldr	r3, [r5, #0]
 80150aa:	b103      	cbz	r3, 80150ae <_close_r+0x1a>
 80150ac:	6023      	str	r3, [r4, #0]
 80150ae:	bd38      	pop	{r3, r4, r5, pc}
 80150b0:	20002568 	.word	0x20002568

080150b4 <quorem>:
 80150b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150b8:	6903      	ldr	r3, [r0, #16]
 80150ba:	690c      	ldr	r4, [r1, #16]
 80150bc:	42a3      	cmp	r3, r4
 80150be:	4607      	mov	r7, r0
 80150c0:	f2c0 8081 	blt.w	80151c6 <quorem+0x112>
 80150c4:	3c01      	subs	r4, #1
 80150c6:	f101 0814 	add.w	r8, r1, #20
 80150ca:	f100 0514 	add.w	r5, r0, #20
 80150ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80150d2:	9301      	str	r3, [sp, #4]
 80150d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80150d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80150dc:	3301      	adds	r3, #1
 80150de:	429a      	cmp	r2, r3
 80150e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80150e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80150e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80150ec:	d331      	bcc.n	8015152 <quorem+0x9e>
 80150ee:	f04f 0e00 	mov.w	lr, #0
 80150f2:	4640      	mov	r0, r8
 80150f4:	46ac      	mov	ip, r5
 80150f6:	46f2      	mov	sl, lr
 80150f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80150fc:	b293      	uxth	r3, r2
 80150fe:	fb06 e303 	mla	r3, r6, r3, lr
 8015102:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015106:	b29b      	uxth	r3, r3
 8015108:	ebaa 0303 	sub.w	r3, sl, r3
 801510c:	f8dc a000 	ldr.w	sl, [ip]
 8015110:	0c12      	lsrs	r2, r2, #16
 8015112:	fa13 f38a 	uxtah	r3, r3, sl
 8015116:	fb06 e202 	mla	r2, r6, r2, lr
 801511a:	9300      	str	r3, [sp, #0]
 801511c:	9b00      	ldr	r3, [sp, #0]
 801511e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015122:	b292      	uxth	r2, r2
 8015124:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8015128:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801512c:	f8bd 3000 	ldrh.w	r3, [sp]
 8015130:	4581      	cmp	r9, r0
 8015132:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015136:	f84c 3b04 	str.w	r3, [ip], #4
 801513a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801513e:	d2db      	bcs.n	80150f8 <quorem+0x44>
 8015140:	f855 300b 	ldr.w	r3, [r5, fp]
 8015144:	b92b      	cbnz	r3, 8015152 <quorem+0x9e>
 8015146:	9b01      	ldr	r3, [sp, #4]
 8015148:	3b04      	subs	r3, #4
 801514a:	429d      	cmp	r5, r3
 801514c:	461a      	mov	r2, r3
 801514e:	d32e      	bcc.n	80151ae <quorem+0xfa>
 8015150:	613c      	str	r4, [r7, #16]
 8015152:	4638      	mov	r0, r7
 8015154:	f7ff fcd6 	bl	8014b04 <__mcmp>
 8015158:	2800      	cmp	r0, #0
 801515a:	db24      	blt.n	80151a6 <quorem+0xf2>
 801515c:	3601      	adds	r6, #1
 801515e:	4628      	mov	r0, r5
 8015160:	f04f 0c00 	mov.w	ip, #0
 8015164:	f858 2b04 	ldr.w	r2, [r8], #4
 8015168:	f8d0 e000 	ldr.w	lr, [r0]
 801516c:	b293      	uxth	r3, r2
 801516e:	ebac 0303 	sub.w	r3, ip, r3
 8015172:	0c12      	lsrs	r2, r2, #16
 8015174:	fa13 f38e 	uxtah	r3, r3, lr
 8015178:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801517c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015180:	b29b      	uxth	r3, r3
 8015182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015186:	45c1      	cmp	r9, r8
 8015188:	f840 3b04 	str.w	r3, [r0], #4
 801518c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015190:	d2e8      	bcs.n	8015164 <quorem+0xb0>
 8015192:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015196:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801519a:	b922      	cbnz	r2, 80151a6 <quorem+0xf2>
 801519c:	3b04      	subs	r3, #4
 801519e:	429d      	cmp	r5, r3
 80151a0:	461a      	mov	r2, r3
 80151a2:	d30a      	bcc.n	80151ba <quorem+0x106>
 80151a4:	613c      	str	r4, [r7, #16]
 80151a6:	4630      	mov	r0, r6
 80151a8:	b003      	add	sp, #12
 80151aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151ae:	6812      	ldr	r2, [r2, #0]
 80151b0:	3b04      	subs	r3, #4
 80151b2:	2a00      	cmp	r2, #0
 80151b4:	d1cc      	bne.n	8015150 <quorem+0x9c>
 80151b6:	3c01      	subs	r4, #1
 80151b8:	e7c7      	b.n	801514a <quorem+0x96>
 80151ba:	6812      	ldr	r2, [r2, #0]
 80151bc:	3b04      	subs	r3, #4
 80151be:	2a00      	cmp	r2, #0
 80151c0:	d1f0      	bne.n	80151a4 <quorem+0xf0>
 80151c2:	3c01      	subs	r4, #1
 80151c4:	e7eb      	b.n	801519e <quorem+0xea>
 80151c6:	2000      	movs	r0, #0
 80151c8:	e7ee      	b.n	80151a8 <quorem+0xf4>
 80151ca:	0000      	movs	r0, r0
 80151cc:	0000      	movs	r0, r0
	...

080151d0 <_dtoa_r>:
 80151d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151d4:	ed2d 8b04 	vpush	{d8-d9}
 80151d8:	ec57 6b10 	vmov	r6, r7, d0
 80151dc:	b093      	sub	sp, #76	; 0x4c
 80151de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80151e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80151e4:	9106      	str	r1, [sp, #24]
 80151e6:	ee10 aa10 	vmov	sl, s0
 80151ea:	4604      	mov	r4, r0
 80151ec:	9209      	str	r2, [sp, #36]	; 0x24
 80151ee:	930c      	str	r3, [sp, #48]	; 0x30
 80151f0:	46bb      	mov	fp, r7
 80151f2:	b975      	cbnz	r5, 8015212 <_dtoa_r+0x42>
 80151f4:	2010      	movs	r0, #16
 80151f6:	f000 fe0d 	bl	8015e14 <malloc>
 80151fa:	4602      	mov	r2, r0
 80151fc:	6260      	str	r0, [r4, #36]	; 0x24
 80151fe:	b920      	cbnz	r0, 801520a <_dtoa_r+0x3a>
 8015200:	4ba7      	ldr	r3, [pc, #668]	; (80154a0 <_dtoa_r+0x2d0>)
 8015202:	21ea      	movs	r1, #234	; 0xea
 8015204:	48a7      	ldr	r0, [pc, #668]	; (80154a4 <_dtoa_r+0x2d4>)
 8015206:	f7fe fa5b 	bl	80136c0 <__assert_func>
 801520a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801520e:	6005      	str	r5, [r0, #0]
 8015210:	60c5      	str	r5, [r0, #12]
 8015212:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015214:	6819      	ldr	r1, [r3, #0]
 8015216:	b151      	cbz	r1, 801522e <_dtoa_r+0x5e>
 8015218:	685a      	ldr	r2, [r3, #4]
 801521a:	604a      	str	r2, [r1, #4]
 801521c:	2301      	movs	r3, #1
 801521e:	4093      	lsls	r3, r2
 8015220:	608b      	str	r3, [r1, #8]
 8015222:	4620      	mov	r0, r4
 8015224:	f7ff fa2c 	bl	8014680 <_Bfree>
 8015228:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801522a:	2200      	movs	r2, #0
 801522c:	601a      	str	r2, [r3, #0]
 801522e:	1e3b      	subs	r3, r7, #0
 8015230:	bfaa      	itet	ge
 8015232:	2300      	movge	r3, #0
 8015234:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8015238:	f8c8 3000 	strge.w	r3, [r8]
 801523c:	4b9a      	ldr	r3, [pc, #616]	; (80154a8 <_dtoa_r+0x2d8>)
 801523e:	bfbc      	itt	lt
 8015240:	2201      	movlt	r2, #1
 8015242:	f8c8 2000 	strlt.w	r2, [r8]
 8015246:	ea33 030b 	bics.w	r3, r3, fp
 801524a:	d11b      	bne.n	8015284 <_dtoa_r+0xb4>
 801524c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801524e:	f242 730f 	movw	r3, #9999	; 0x270f
 8015252:	6013      	str	r3, [r2, #0]
 8015254:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015258:	4333      	orrs	r3, r6
 801525a:	f000 8592 	beq.w	8015d82 <_dtoa_r+0xbb2>
 801525e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015260:	b963      	cbnz	r3, 801527c <_dtoa_r+0xac>
 8015262:	4b92      	ldr	r3, [pc, #584]	; (80154ac <_dtoa_r+0x2dc>)
 8015264:	e022      	b.n	80152ac <_dtoa_r+0xdc>
 8015266:	4b92      	ldr	r3, [pc, #584]	; (80154b0 <_dtoa_r+0x2e0>)
 8015268:	9301      	str	r3, [sp, #4]
 801526a:	3308      	adds	r3, #8
 801526c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801526e:	6013      	str	r3, [r2, #0]
 8015270:	9801      	ldr	r0, [sp, #4]
 8015272:	b013      	add	sp, #76	; 0x4c
 8015274:	ecbd 8b04 	vpop	{d8-d9}
 8015278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801527c:	4b8b      	ldr	r3, [pc, #556]	; (80154ac <_dtoa_r+0x2dc>)
 801527e:	9301      	str	r3, [sp, #4]
 8015280:	3303      	adds	r3, #3
 8015282:	e7f3      	b.n	801526c <_dtoa_r+0x9c>
 8015284:	2200      	movs	r2, #0
 8015286:	2300      	movs	r3, #0
 8015288:	4650      	mov	r0, sl
 801528a:	4659      	mov	r1, fp
 801528c:	f7eb fbf4 	bl	8000a78 <__aeabi_dcmpeq>
 8015290:	ec4b ab19 	vmov	d9, sl, fp
 8015294:	4680      	mov	r8, r0
 8015296:	b158      	cbz	r0, 80152b0 <_dtoa_r+0xe0>
 8015298:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801529a:	2301      	movs	r3, #1
 801529c:	6013      	str	r3, [r2, #0]
 801529e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	f000 856b 	beq.w	8015d7c <_dtoa_r+0xbac>
 80152a6:	4883      	ldr	r0, [pc, #524]	; (80154b4 <_dtoa_r+0x2e4>)
 80152a8:	6018      	str	r0, [r3, #0]
 80152aa:	1e43      	subs	r3, r0, #1
 80152ac:	9301      	str	r3, [sp, #4]
 80152ae:	e7df      	b.n	8015270 <_dtoa_r+0xa0>
 80152b0:	ec4b ab10 	vmov	d0, sl, fp
 80152b4:	aa10      	add	r2, sp, #64	; 0x40
 80152b6:	a911      	add	r1, sp, #68	; 0x44
 80152b8:	4620      	mov	r0, r4
 80152ba:	f7ff fcc9 	bl	8014c50 <__d2b>
 80152be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80152c2:	ee08 0a10 	vmov	s16, r0
 80152c6:	2d00      	cmp	r5, #0
 80152c8:	f000 8084 	beq.w	80153d4 <_dtoa_r+0x204>
 80152cc:	ee19 3a90 	vmov	r3, s19
 80152d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80152d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80152d8:	4656      	mov	r6, sl
 80152da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80152de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80152e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80152e6:	4b74      	ldr	r3, [pc, #464]	; (80154b8 <_dtoa_r+0x2e8>)
 80152e8:	2200      	movs	r2, #0
 80152ea:	4630      	mov	r0, r6
 80152ec:	4639      	mov	r1, r7
 80152ee:	f7ea ffa3 	bl	8000238 <__aeabi_dsub>
 80152f2:	a365      	add	r3, pc, #404	; (adr r3, 8015488 <_dtoa_r+0x2b8>)
 80152f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152f8:	f7eb f956 	bl	80005a8 <__aeabi_dmul>
 80152fc:	a364      	add	r3, pc, #400	; (adr r3, 8015490 <_dtoa_r+0x2c0>)
 80152fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015302:	f7ea ff9b 	bl	800023c <__adddf3>
 8015306:	4606      	mov	r6, r0
 8015308:	4628      	mov	r0, r5
 801530a:	460f      	mov	r7, r1
 801530c:	f7eb f8e2 	bl	80004d4 <__aeabi_i2d>
 8015310:	a361      	add	r3, pc, #388	; (adr r3, 8015498 <_dtoa_r+0x2c8>)
 8015312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015316:	f7eb f947 	bl	80005a8 <__aeabi_dmul>
 801531a:	4602      	mov	r2, r0
 801531c:	460b      	mov	r3, r1
 801531e:	4630      	mov	r0, r6
 8015320:	4639      	mov	r1, r7
 8015322:	f7ea ff8b 	bl	800023c <__adddf3>
 8015326:	4606      	mov	r6, r0
 8015328:	460f      	mov	r7, r1
 801532a:	f7eb fbd7 	bl	8000adc <__aeabi_d2iz>
 801532e:	2200      	movs	r2, #0
 8015330:	9000      	str	r0, [sp, #0]
 8015332:	2300      	movs	r3, #0
 8015334:	4630      	mov	r0, r6
 8015336:	4639      	mov	r1, r7
 8015338:	f7eb fba8 	bl	8000a8c <__aeabi_dcmplt>
 801533c:	b150      	cbz	r0, 8015354 <_dtoa_r+0x184>
 801533e:	9800      	ldr	r0, [sp, #0]
 8015340:	f7eb f8c8 	bl	80004d4 <__aeabi_i2d>
 8015344:	4632      	mov	r2, r6
 8015346:	463b      	mov	r3, r7
 8015348:	f7eb fb96 	bl	8000a78 <__aeabi_dcmpeq>
 801534c:	b910      	cbnz	r0, 8015354 <_dtoa_r+0x184>
 801534e:	9b00      	ldr	r3, [sp, #0]
 8015350:	3b01      	subs	r3, #1
 8015352:	9300      	str	r3, [sp, #0]
 8015354:	9b00      	ldr	r3, [sp, #0]
 8015356:	2b16      	cmp	r3, #22
 8015358:	d85a      	bhi.n	8015410 <_dtoa_r+0x240>
 801535a:	9a00      	ldr	r2, [sp, #0]
 801535c:	4b57      	ldr	r3, [pc, #348]	; (80154bc <_dtoa_r+0x2ec>)
 801535e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015366:	ec51 0b19 	vmov	r0, r1, d9
 801536a:	f7eb fb8f 	bl	8000a8c <__aeabi_dcmplt>
 801536e:	2800      	cmp	r0, #0
 8015370:	d050      	beq.n	8015414 <_dtoa_r+0x244>
 8015372:	9b00      	ldr	r3, [sp, #0]
 8015374:	3b01      	subs	r3, #1
 8015376:	9300      	str	r3, [sp, #0]
 8015378:	2300      	movs	r3, #0
 801537a:	930b      	str	r3, [sp, #44]	; 0x2c
 801537c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801537e:	1b5d      	subs	r5, r3, r5
 8015380:	1e6b      	subs	r3, r5, #1
 8015382:	9305      	str	r3, [sp, #20]
 8015384:	bf45      	ittet	mi
 8015386:	f1c5 0301 	rsbmi	r3, r5, #1
 801538a:	9304      	strmi	r3, [sp, #16]
 801538c:	2300      	movpl	r3, #0
 801538e:	2300      	movmi	r3, #0
 8015390:	bf4c      	ite	mi
 8015392:	9305      	strmi	r3, [sp, #20]
 8015394:	9304      	strpl	r3, [sp, #16]
 8015396:	9b00      	ldr	r3, [sp, #0]
 8015398:	2b00      	cmp	r3, #0
 801539a:	db3d      	blt.n	8015418 <_dtoa_r+0x248>
 801539c:	9b05      	ldr	r3, [sp, #20]
 801539e:	9a00      	ldr	r2, [sp, #0]
 80153a0:	920a      	str	r2, [sp, #40]	; 0x28
 80153a2:	4413      	add	r3, r2
 80153a4:	9305      	str	r3, [sp, #20]
 80153a6:	2300      	movs	r3, #0
 80153a8:	9307      	str	r3, [sp, #28]
 80153aa:	9b06      	ldr	r3, [sp, #24]
 80153ac:	2b09      	cmp	r3, #9
 80153ae:	f200 8089 	bhi.w	80154c4 <_dtoa_r+0x2f4>
 80153b2:	2b05      	cmp	r3, #5
 80153b4:	bfc4      	itt	gt
 80153b6:	3b04      	subgt	r3, #4
 80153b8:	9306      	strgt	r3, [sp, #24]
 80153ba:	9b06      	ldr	r3, [sp, #24]
 80153bc:	f1a3 0302 	sub.w	r3, r3, #2
 80153c0:	bfcc      	ite	gt
 80153c2:	2500      	movgt	r5, #0
 80153c4:	2501      	movle	r5, #1
 80153c6:	2b03      	cmp	r3, #3
 80153c8:	f200 8087 	bhi.w	80154da <_dtoa_r+0x30a>
 80153cc:	e8df f003 	tbb	[pc, r3]
 80153d0:	59383a2d 	.word	0x59383a2d
 80153d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80153d8:	441d      	add	r5, r3
 80153da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80153de:	2b20      	cmp	r3, #32
 80153e0:	bfc1      	itttt	gt
 80153e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80153e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80153ea:	fa0b f303 	lslgt.w	r3, fp, r3
 80153ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80153f2:	bfda      	itte	le
 80153f4:	f1c3 0320 	rsble	r3, r3, #32
 80153f8:	fa06 f003 	lslle.w	r0, r6, r3
 80153fc:	4318      	orrgt	r0, r3
 80153fe:	f7eb f859 	bl	80004b4 <__aeabi_ui2d>
 8015402:	2301      	movs	r3, #1
 8015404:	4606      	mov	r6, r0
 8015406:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801540a:	3d01      	subs	r5, #1
 801540c:	930e      	str	r3, [sp, #56]	; 0x38
 801540e:	e76a      	b.n	80152e6 <_dtoa_r+0x116>
 8015410:	2301      	movs	r3, #1
 8015412:	e7b2      	b.n	801537a <_dtoa_r+0x1aa>
 8015414:	900b      	str	r0, [sp, #44]	; 0x2c
 8015416:	e7b1      	b.n	801537c <_dtoa_r+0x1ac>
 8015418:	9b04      	ldr	r3, [sp, #16]
 801541a:	9a00      	ldr	r2, [sp, #0]
 801541c:	1a9b      	subs	r3, r3, r2
 801541e:	9304      	str	r3, [sp, #16]
 8015420:	4253      	negs	r3, r2
 8015422:	9307      	str	r3, [sp, #28]
 8015424:	2300      	movs	r3, #0
 8015426:	930a      	str	r3, [sp, #40]	; 0x28
 8015428:	e7bf      	b.n	80153aa <_dtoa_r+0x1da>
 801542a:	2300      	movs	r3, #0
 801542c:	9308      	str	r3, [sp, #32]
 801542e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015430:	2b00      	cmp	r3, #0
 8015432:	dc55      	bgt.n	80154e0 <_dtoa_r+0x310>
 8015434:	2301      	movs	r3, #1
 8015436:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801543a:	461a      	mov	r2, r3
 801543c:	9209      	str	r2, [sp, #36]	; 0x24
 801543e:	e00c      	b.n	801545a <_dtoa_r+0x28a>
 8015440:	2301      	movs	r3, #1
 8015442:	e7f3      	b.n	801542c <_dtoa_r+0x25c>
 8015444:	2300      	movs	r3, #0
 8015446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015448:	9308      	str	r3, [sp, #32]
 801544a:	9b00      	ldr	r3, [sp, #0]
 801544c:	4413      	add	r3, r2
 801544e:	9302      	str	r3, [sp, #8]
 8015450:	3301      	adds	r3, #1
 8015452:	2b01      	cmp	r3, #1
 8015454:	9303      	str	r3, [sp, #12]
 8015456:	bfb8      	it	lt
 8015458:	2301      	movlt	r3, #1
 801545a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801545c:	2200      	movs	r2, #0
 801545e:	6042      	str	r2, [r0, #4]
 8015460:	2204      	movs	r2, #4
 8015462:	f102 0614 	add.w	r6, r2, #20
 8015466:	429e      	cmp	r6, r3
 8015468:	6841      	ldr	r1, [r0, #4]
 801546a:	d93d      	bls.n	80154e8 <_dtoa_r+0x318>
 801546c:	4620      	mov	r0, r4
 801546e:	f7ff f8c7 	bl	8014600 <_Balloc>
 8015472:	9001      	str	r0, [sp, #4]
 8015474:	2800      	cmp	r0, #0
 8015476:	d13b      	bne.n	80154f0 <_dtoa_r+0x320>
 8015478:	4b11      	ldr	r3, [pc, #68]	; (80154c0 <_dtoa_r+0x2f0>)
 801547a:	4602      	mov	r2, r0
 801547c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015480:	e6c0      	b.n	8015204 <_dtoa_r+0x34>
 8015482:	2301      	movs	r3, #1
 8015484:	e7df      	b.n	8015446 <_dtoa_r+0x276>
 8015486:	bf00      	nop
 8015488:	636f4361 	.word	0x636f4361
 801548c:	3fd287a7 	.word	0x3fd287a7
 8015490:	8b60c8b3 	.word	0x8b60c8b3
 8015494:	3fc68a28 	.word	0x3fc68a28
 8015498:	509f79fb 	.word	0x509f79fb
 801549c:	3fd34413 	.word	0x3fd34413
 80154a0:	08016b10 	.word	0x08016b10
 80154a4:	08016ca3 	.word	0x08016ca3
 80154a8:	7ff00000 	.word	0x7ff00000
 80154ac:	08016c9d 	.word	0x08016c9d
 80154b0:	08016c94 	.word	0x08016c94
 80154b4:	08016ca2 	.word	0x08016ca2
 80154b8:	3ff80000 	.word	0x3ff80000
 80154bc:	08016bc0 	.word	0x08016bc0
 80154c0:	08016b83 	.word	0x08016b83
 80154c4:	2501      	movs	r5, #1
 80154c6:	2300      	movs	r3, #0
 80154c8:	9306      	str	r3, [sp, #24]
 80154ca:	9508      	str	r5, [sp, #32]
 80154cc:	f04f 33ff 	mov.w	r3, #4294967295
 80154d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80154d4:	2200      	movs	r2, #0
 80154d6:	2312      	movs	r3, #18
 80154d8:	e7b0      	b.n	801543c <_dtoa_r+0x26c>
 80154da:	2301      	movs	r3, #1
 80154dc:	9308      	str	r3, [sp, #32]
 80154de:	e7f5      	b.n	80154cc <_dtoa_r+0x2fc>
 80154e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80154e6:	e7b8      	b.n	801545a <_dtoa_r+0x28a>
 80154e8:	3101      	adds	r1, #1
 80154ea:	6041      	str	r1, [r0, #4]
 80154ec:	0052      	lsls	r2, r2, #1
 80154ee:	e7b8      	b.n	8015462 <_dtoa_r+0x292>
 80154f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80154f2:	9a01      	ldr	r2, [sp, #4]
 80154f4:	601a      	str	r2, [r3, #0]
 80154f6:	9b03      	ldr	r3, [sp, #12]
 80154f8:	2b0e      	cmp	r3, #14
 80154fa:	f200 809d 	bhi.w	8015638 <_dtoa_r+0x468>
 80154fe:	2d00      	cmp	r5, #0
 8015500:	f000 809a 	beq.w	8015638 <_dtoa_r+0x468>
 8015504:	9b00      	ldr	r3, [sp, #0]
 8015506:	2b00      	cmp	r3, #0
 8015508:	dd32      	ble.n	8015570 <_dtoa_r+0x3a0>
 801550a:	4ab7      	ldr	r2, [pc, #732]	; (80157e8 <_dtoa_r+0x618>)
 801550c:	f003 030f 	and.w	r3, r3, #15
 8015510:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015514:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015518:	9b00      	ldr	r3, [sp, #0]
 801551a:	05d8      	lsls	r0, r3, #23
 801551c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8015520:	d516      	bpl.n	8015550 <_dtoa_r+0x380>
 8015522:	4bb2      	ldr	r3, [pc, #712]	; (80157ec <_dtoa_r+0x61c>)
 8015524:	ec51 0b19 	vmov	r0, r1, d9
 8015528:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801552c:	f7eb f966 	bl	80007fc <__aeabi_ddiv>
 8015530:	f007 070f 	and.w	r7, r7, #15
 8015534:	4682      	mov	sl, r0
 8015536:	468b      	mov	fp, r1
 8015538:	2503      	movs	r5, #3
 801553a:	4eac      	ldr	r6, [pc, #688]	; (80157ec <_dtoa_r+0x61c>)
 801553c:	b957      	cbnz	r7, 8015554 <_dtoa_r+0x384>
 801553e:	4642      	mov	r2, r8
 8015540:	464b      	mov	r3, r9
 8015542:	4650      	mov	r0, sl
 8015544:	4659      	mov	r1, fp
 8015546:	f7eb f959 	bl	80007fc <__aeabi_ddiv>
 801554a:	4682      	mov	sl, r0
 801554c:	468b      	mov	fp, r1
 801554e:	e028      	b.n	80155a2 <_dtoa_r+0x3d2>
 8015550:	2502      	movs	r5, #2
 8015552:	e7f2      	b.n	801553a <_dtoa_r+0x36a>
 8015554:	07f9      	lsls	r1, r7, #31
 8015556:	d508      	bpl.n	801556a <_dtoa_r+0x39a>
 8015558:	4640      	mov	r0, r8
 801555a:	4649      	mov	r1, r9
 801555c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015560:	f7eb f822 	bl	80005a8 <__aeabi_dmul>
 8015564:	3501      	adds	r5, #1
 8015566:	4680      	mov	r8, r0
 8015568:	4689      	mov	r9, r1
 801556a:	107f      	asrs	r7, r7, #1
 801556c:	3608      	adds	r6, #8
 801556e:	e7e5      	b.n	801553c <_dtoa_r+0x36c>
 8015570:	f000 809b 	beq.w	80156aa <_dtoa_r+0x4da>
 8015574:	9b00      	ldr	r3, [sp, #0]
 8015576:	4f9d      	ldr	r7, [pc, #628]	; (80157ec <_dtoa_r+0x61c>)
 8015578:	425e      	negs	r6, r3
 801557a:	4b9b      	ldr	r3, [pc, #620]	; (80157e8 <_dtoa_r+0x618>)
 801557c:	f006 020f 	and.w	r2, r6, #15
 8015580:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015588:	ec51 0b19 	vmov	r0, r1, d9
 801558c:	f7eb f80c 	bl	80005a8 <__aeabi_dmul>
 8015590:	1136      	asrs	r6, r6, #4
 8015592:	4682      	mov	sl, r0
 8015594:	468b      	mov	fp, r1
 8015596:	2300      	movs	r3, #0
 8015598:	2502      	movs	r5, #2
 801559a:	2e00      	cmp	r6, #0
 801559c:	d17a      	bne.n	8015694 <_dtoa_r+0x4c4>
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d1d3      	bne.n	801554a <_dtoa_r+0x37a>
 80155a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	f000 8082 	beq.w	80156ae <_dtoa_r+0x4de>
 80155aa:	4b91      	ldr	r3, [pc, #580]	; (80157f0 <_dtoa_r+0x620>)
 80155ac:	2200      	movs	r2, #0
 80155ae:	4650      	mov	r0, sl
 80155b0:	4659      	mov	r1, fp
 80155b2:	f7eb fa6b 	bl	8000a8c <__aeabi_dcmplt>
 80155b6:	2800      	cmp	r0, #0
 80155b8:	d079      	beq.n	80156ae <_dtoa_r+0x4de>
 80155ba:	9b03      	ldr	r3, [sp, #12]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d076      	beq.n	80156ae <_dtoa_r+0x4de>
 80155c0:	9b02      	ldr	r3, [sp, #8]
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	dd36      	ble.n	8015634 <_dtoa_r+0x464>
 80155c6:	9b00      	ldr	r3, [sp, #0]
 80155c8:	4650      	mov	r0, sl
 80155ca:	4659      	mov	r1, fp
 80155cc:	1e5f      	subs	r7, r3, #1
 80155ce:	2200      	movs	r2, #0
 80155d0:	4b88      	ldr	r3, [pc, #544]	; (80157f4 <_dtoa_r+0x624>)
 80155d2:	f7ea ffe9 	bl	80005a8 <__aeabi_dmul>
 80155d6:	9e02      	ldr	r6, [sp, #8]
 80155d8:	4682      	mov	sl, r0
 80155da:	468b      	mov	fp, r1
 80155dc:	3501      	adds	r5, #1
 80155de:	4628      	mov	r0, r5
 80155e0:	f7ea ff78 	bl	80004d4 <__aeabi_i2d>
 80155e4:	4652      	mov	r2, sl
 80155e6:	465b      	mov	r3, fp
 80155e8:	f7ea ffde 	bl	80005a8 <__aeabi_dmul>
 80155ec:	4b82      	ldr	r3, [pc, #520]	; (80157f8 <_dtoa_r+0x628>)
 80155ee:	2200      	movs	r2, #0
 80155f0:	f7ea fe24 	bl	800023c <__adddf3>
 80155f4:	46d0      	mov	r8, sl
 80155f6:	46d9      	mov	r9, fp
 80155f8:	4682      	mov	sl, r0
 80155fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80155fe:	2e00      	cmp	r6, #0
 8015600:	d158      	bne.n	80156b4 <_dtoa_r+0x4e4>
 8015602:	4b7e      	ldr	r3, [pc, #504]	; (80157fc <_dtoa_r+0x62c>)
 8015604:	2200      	movs	r2, #0
 8015606:	4640      	mov	r0, r8
 8015608:	4649      	mov	r1, r9
 801560a:	f7ea fe15 	bl	8000238 <__aeabi_dsub>
 801560e:	4652      	mov	r2, sl
 8015610:	465b      	mov	r3, fp
 8015612:	4680      	mov	r8, r0
 8015614:	4689      	mov	r9, r1
 8015616:	f7eb fa57 	bl	8000ac8 <__aeabi_dcmpgt>
 801561a:	2800      	cmp	r0, #0
 801561c:	f040 8295 	bne.w	8015b4a <_dtoa_r+0x97a>
 8015620:	4652      	mov	r2, sl
 8015622:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015626:	4640      	mov	r0, r8
 8015628:	4649      	mov	r1, r9
 801562a:	f7eb fa2f 	bl	8000a8c <__aeabi_dcmplt>
 801562e:	2800      	cmp	r0, #0
 8015630:	f040 8289 	bne.w	8015b46 <_dtoa_r+0x976>
 8015634:	ec5b ab19 	vmov	sl, fp, d9
 8015638:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801563a:	2b00      	cmp	r3, #0
 801563c:	f2c0 8148 	blt.w	80158d0 <_dtoa_r+0x700>
 8015640:	9a00      	ldr	r2, [sp, #0]
 8015642:	2a0e      	cmp	r2, #14
 8015644:	f300 8144 	bgt.w	80158d0 <_dtoa_r+0x700>
 8015648:	4b67      	ldr	r3, [pc, #412]	; (80157e8 <_dtoa_r+0x618>)
 801564a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801564e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015654:	2b00      	cmp	r3, #0
 8015656:	f280 80d5 	bge.w	8015804 <_dtoa_r+0x634>
 801565a:	9b03      	ldr	r3, [sp, #12]
 801565c:	2b00      	cmp	r3, #0
 801565e:	f300 80d1 	bgt.w	8015804 <_dtoa_r+0x634>
 8015662:	f040 826f 	bne.w	8015b44 <_dtoa_r+0x974>
 8015666:	4b65      	ldr	r3, [pc, #404]	; (80157fc <_dtoa_r+0x62c>)
 8015668:	2200      	movs	r2, #0
 801566a:	4640      	mov	r0, r8
 801566c:	4649      	mov	r1, r9
 801566e:	f7ea ff9b 	bl	80005a8 <__aeabi_dmul>
 8015672:	4652      	mov	r2, sl
 8015674:	465b      	mov	r3, fp
 8015676:	f7eb fa1d 	bl	8000ab4 <__aeabi_dcmpge>
 801567a:	9e03      	ldr	r6, [sp, #12]
 801567c:	4637      	mov	r7, r6
 801567e:	2800      	cmp	r0, #0
 8015680:	f040 8245 	bne.w	8015b0e <_dtoa_r+0x93e>
 8015684:	9d01      	ldr	r5, [sp, #4]
 8015686:	2331      	movs	r3, #49	; 0x31
 8015688:	f805 3b01 	strb.w	r3, [r5], #1
 801568c:	9b00      	ldr	r3, [sp, #0]
 801568e:	3301      	adds	r3, #1
 8015690:	9300      	str	r3, [sp, #0]
 8015692:	e240      	b.n	8015b16 <_dtoa_r+0x946>
 8015694:	07f2      	lsls	r2, r6, #31
 8015696:	d505      	bpl.n	80156a4 <_dtoa_r+0x4d4>
 8015698:	e9d7 2300 	ldrd	r2, r3, [r7]
 801569c:	f7ea ff84 	bl	80005a8 <__aeabi_dmul>
 80156a0:	3501      	adds	r5, #1
 80156a2:	2301      	movs	r3, #1
 80156a4:	1076      	asrs	r6, r6, #1
 80156a6:	3708      	adds	r7, #8
 80156a8:	e777      	b.n	801559a <_dtoa_r+0x3ca>
 80156aa:	2502      	movs	r5, #2
 80156ac:	e779      	b.n	80155a2 <_dtoa_r+0x3d2>
 80156ae:	9f00      	ldr	r7, [sp, #0]
 80156b0:	9e03      	ldr	r6, [sp, #12]
 80156b2:	e794      	b.n	80155de <_dtoa_r+0x40e>
 80156b4:	9901      	ldr	r1, [sp, #4]
 80156b6:	4b4c      	ldr	r3, [pc, #304]	; (80157e8 <_dtoa_r+0x618>)
 80156b8:	4431      	add	r1, r6
 80156ba:	910d      	str	r1, [sp, #52]	; 0x34
 80156bc:	9908      	ldr	r1, [sp, #32]
 80156be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80156c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80156c6:	2900      	cmp	r1, #0
 80156c8:	d043      	beq.n	8015752 <_dtoa_r+0x582>
 80156ca:	494d      	ldr	r1, [pc, #308]	; (8015800 <_dtoa_r+0x630>)
 80156cc:	2000      	movs	r0, #0
 80156ce:	f7eb f895 	bl	80007fc <__aeabi_ddiv>
 80156d2:	4652      	mov	r2, sl
 80156d4:	465b      	mov	r3, fp
 80156d6:	f7ea fdaf 	bl	8000238 <__aeabi_dsub>
 80156da:	9d01      	ldr	r5, [sp, #4]
 80156dc:	4682      	mov	sl, r0
 80156de:	468b      	mov	fp, r1
 80156e0:	4649      	mov	r1, r9
 80156e2:	4640      	mov	r0, r8
 80156e4:	f7eb f9fa 	bl	8000adc <__aeabi_d2iz>
 80156e8:	4606      	mov	r6, r0
 80156ea:	f7ea fef3 	bl	80004d4 <__aeabi_i2d>
 80156ee:	4602      	mov	r2, r0
 80156f0:	460b      	mov	r3, r1
 80156f2:	4640      	mov	r0, r8
 80156f4:	4649      	mov	r1, r9
 80156f6:	f7ea fd9f 	bl	8000238 <__aeabi_dsub>
 80156fa:	3630      	adds	r6, #48	; 0x30
 80156fc:	f805 6b01 	strb.w	r6, [r5], #1
 8015700:	4652      	mov	r2, sl
 8015702:	465b      	mov	r3, fp
 8015704:	4680      	mov	r8, r0
 8015706:	4689      	mov	r9, r1
 8015708:	f7eb f9c0 	bl	8000a8c <__aeabi_dcmplt>
 801570c:	2800      	cmp	r0, #0
 801570e:	d163      	bne.n	80157d8 <_dtoa_r+0x608>
 8015710:	4642      	mov	r2, r8
 8015712:	464b      	mov	r3, r9
 8015714:	4936      	ldr	r1, [pc, #216]	; (80157f0 <_dtoa_r+0x620>)
 8015716:	2000      	movs	r0, #0
 8015718:	f7ea fd8e 	bl	8000238 <__aeabi_dsub>
 801571c:	4652      	mov	r2, sl
 801571e:	465b      	mov	r3, fp
 8015720:	f7eb f9b4 	bl	8000a8c <__aeabi_dcmplt>
 8015724:	2800      	cmp	r0, #0
 8015726:	f040 80b5 	bne.w	8015894 <_dtoa_r+0x6c4>
 801572a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801572c:	429d      	cmp	r5, r3
 801572e:	d081      	beq.n	8015634 <_dtoa_r+0x464>
 8015730:	4b30      	ldr	r3, [pc, #192]	; (80157f4 <_dtoa_r+0x624>)
 8015732:	2200      	movs	r2, #0
 8015734:	4650      	mov	r0, sl
 8015736:	4659      	mov	r1, fp
 8015738:	f7ea ff36 	bl	80005a8 <__aeabi_dmul>
 801573c:	4b2d      	ldr	r3, [pc, #180]	; (80157f4 <_dtoa_r+0x624>)
 801573e:	4682      	mov	sl, r0
 8015740:	468b      	mov	fp, r1
 8015742:	4640      	mov	r0, r8
 8015744:	4649      	mov	r1, r9
 8015746:	2200      	movs	r2, #0
 8015748:	f7ea ff2e 	bl	80005a8 <__aeabi_dmul>
 801574c:	4680      	mov	r8, r0
 801574e:	4689      	mov	r9, r1
 8015750:	e7c6      	b.n	80156e0 <_dtoa_r+0x510>
 8015752:	4650      	mov	r0, sl
 8015754:	4659      	mov	r1, fp
 8015756:	f7ea ff27 	bl	80005a8 <__aeabi_dmul>
 801575a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801575c:	9d01      	ldr	r5, [sp, #4]
 801575e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015760:	4682      	mov	sl, r0
 8015762:	468b      	mov	fp, r1
 8015764:	4649      	mov	r1, r9
 8015766:	4640      	mov	r0, r8
 8015768:	f7eb f9b8 	bl	8000adc <__aeabi_d2iz>
 801576c:	4606      	mov	r6, r0
 801576e:	f7ea feb1 	bl	80004d4 <__aeabi_i2d>
 8015772:	3630      	adds	r6, #48	; 0x30
 8015774:	4602      	mov	r2, r0
 8015776:	460b      	mov	r3, r1
 8015778:	4640      	mov	r0, r8
 801577a:	4649      	mov	r1, r9
 801577c:	f7ea fd5c 	bl	8000238 <__aeabi_dsub>
 8015780:	f805 6b01 	strb.w	r6, [r5], #1
 8015784:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015786:	429d      	cmp	r5, r3
 8015788:	4680      	mov	r8, r0
 801578a:	4689      	mov	r9, r1
 801578c:	f04f 0200 	mov.w	r2, #0
 8015790:	d124      	bne.n	80157dc <_dtoa_r+0x60c>
 8015792:	4b1b      	ldr	r3, [pc, #108]	; (8015800 <_dtoa_r+0x630>)
 8015794:	4650      	mov	r0, sl
 8015796:	4659      	mov	r1, fp
 8015798:	f7ea fd50 	bl	800023c <__adddf3>
 801579c:	4602      	mov	r2, r0
 801579e:	460b      	mov	r3, r1
 80157a0:	4640      	mov	r0, r8
 80157a2:	4649      	mov	r1, r9
 80157a4:	f7eb f990 	bl	8000ac8 <__aeabi_dcmpgt>
 80157a8:	2800      	cmp	r0, #0
 80157aa:	d173      	bne.n	8015894 <_dtoa_r+0x6c4>
 80157ac:	4652      	mov	r2, sl
 80157ae:	465b      	mov	r3, fp
 80157b0:	4913      	ldr	r1, [pc, #76]	; (8015800 <_dtoa_r+0x630>)
 80157b2:	2000      	movs	r0, #0
 80157b4:	f7ea fd40 	bl	8000238 <__aeabi_dsub>
 80157b8:	4602      	mov	r2, r0
 80157ba:	460b      	mov	r3, r1
 80157bc:	4640      	mov	r0, r8
 80157be:	4649      	mov	r1, r9
 80157c0:	f7eb f964 	bl	8000a8c <__aeabi_dcmplt>
 80157c4:	2800      	cmp	r0, #0
 80157c6:	f43f af35 	beq.w	8015634 <_dtoa_r+0x464>
 80157ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80157cc:	1e6b      	subs	r3, r5, #1
 80157ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80157d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80157d4:	2b30      	cmp	r3, #48	; 0x30
 80157d6:	d0f8      	beq.n	80157ca <_dtoa_r+0x5fa>
 80157d8:	9700      	str	r7, [sp, #0]
 80157da:	e049      	b.n	8015870 <_dtoa_r+0x6a0>
 80157dc:	4b05      	ldr	r3, [pc, #20]	; (80157f4 <_dtoa_r+0x624>)
 80157de:	f7ea fee3 	bl	80005a8 <__aeabi_dmul>
 80157e2:	4680      	mov	r8, r0
 80157e4:	4689      	mov	r9, r1
 80157e6:	e7bd      	b.n	8015764 <_dtoa_r+0x594>
 80157e8:	08016bc0 	.word	0x08016bc0
 80157ec:	08016b98 	.word	0x08016b98
 80157f0:	3ff00000 	.word	0x3ff00000
 80157f4:	40240000 	.word	0x40240000
 80157f8:	401c0000 	.word	0x401c0000
 80157fc:	40140000 	.word	0x40140000
 8015800:	3fe00000 	.word	0x3fe00000
 8015804:	9d01      	ldr	r5, [sp, #4]
 8015806:	4656      	mov	r6, sl
 8015808:	465f      	mov	r7, fp
 801580a:	4642      	mov	r2, r8
 801580c:	464b      	mov	r3, r9
 801580e:	4630      	mov	r0, r6
 8015810:	4639      	mov	r1, r7
 8015812:	f7ea fff3 	bl	80007fc <__aeabi_ddiv>
 8015816:	f7eb f961 	bl	8000adc <__aeabi_d2iz>
 801581a:	4682      	mov	sl, r0
 801581c:	f7ea fe5a 	bl	80004d4 <__aeabi_i2d>
 8015820:	4642      	mov	r2, r8
 8015822:	464b      	mov	r3, r9
 8015824:	f7ea fec0 	bl	80005a8 <__aeabi_dmul>
 8015828:	4602      	mov	r2, r0
 801582a:	460b      	mov	r3, r1
 801582c:	4630      	mov	r0, r6
 801582e:	4639      	mov	r1, r7
 8015830:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8015834:	f7ea fd00 	bl	8000238 <__aeabi_dsub>
 8015838:	f805 6b01 	strb.w	r6, [r5], #1
 801583c:	9e01      	ldr	r6, [sp, #4]
 801583e:	9f03      	ldr	r7, [sp, #12]
 8015840:	1bae      	subs	r6, r5, r6
 8015842:	42b7      	cmp	r7, r6
 8015844:	4602      	mov	r2, r0
 8015846:	460b      	mov	r3, r1
 8015848:	d135      	bne.n	80158b6 <_dtoa_r+0x6e6>
 801584a:	f7ea fcf7 	bl	800023c <__adddf3>
 801584e:	4642      	mov	r2, r8
 8015850:	464b      	mov	r3, r9
 8015852:	4606      	mov	r6, r0
 8015854:	460f      	mov	r7, r1
 8015856:	f7eb f937 	bl	8000ac8 <__aeabi_dcmpgt>
 801585a:	b9d0      	cbnz	r0, 8015892 <_dtoa_r+0x6c2>
 801585c:	4642      	mov	r2, r8
 801585e:	464b      	mov	r3, r9
 8015860:	4630      	mov	r0, r6
 8015862:	4639      	mov	r1, r7
 8015864:	f7eb f908 	bl	8000a78 <__aeabi_dcmpeq>
 8015868:	b110      	cbz	r0, 8015870 <_dtoa_r+0x6a0>
 801586a:	f01a 0f01 	tst.w	sl, #1
 801586e:	d110      	bne.n	8015892 <_dtoa_r+0x6c2>
 8015870:	4620      	mov	r0, r4
 8015872:	ee18 1a10 	vmov	r1, s16
 8015876:	f7fe ff03 	bl	8014680 <_Bfree>
 801587a:	2300      	movs	r3, #0
 801587c:	9800      	ldr	r0, [sp, #0]
 801587e:	702b      	strb	r3, [r5, #0]
 8015880:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015882:	3001      	adds	r0, #1
 8015884:	6018      	str	r0, [r3, #0]
 8015886:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015888:	2b00      	cmp	r3, #0
 801588a:	f43f acf1 	beq.w	8015270 <_dtoa_r+0xa0>
 801588e:	601d      	str	r5, [r3, #0]
 8015890:	e4ee      	b.n	8015270 <_dtoa_r+0xa0>
 8015892:	9f00      	ldr	r7, [sp, #0]
 8015894:	462b      	mov	r3, r5
 8015896:	461d      	mov	r5, r3
 8015898:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801589c:	2a39      	cmp	r2, #57	; 0x39
 801589e:	d106      	bne.n	80158ae <_dtoa_r+0x6de>
 80158a0:	9a01      	ldr	r2, [sp, #4]
 80158a2:	429a      	cmp	r2, r3
 80158a4:	d1f7      	bne.n	8015896 <_dtoa_r+0x6c6>
 80158a6:	9901      	ldr	r1, [sp, #4]
 80158a8:	2230      	movs	r2, #48	; 0x30
 80158aa:	3701      	adds	r7, #1
 80158ac:	700a      	strb	r2, [r1, #0]
 80158ae:	781a      	ldrb	r2, [r3, #0]
 80158b0:	3201      	adds	r2, #1
 80158b2:	701a      	strb	r2, [r3, #0]
 80158b4:	e790      	b.n	80157d8 <_dtoa_r+0x608>
 80158b6:	4ba6      	ldr	r3, [pc, #664]	; (8015b50 <_dtoa_r+0x980>)
 80158b8:	2200      	movs	r2, #0
 80158ba:	f7ea fe75 	bl	80005a8 <__aeabi_dmul>
 80158be:	2200      	movs	r2, #0
 80158c0:	2300      	movs	r3, #0
 80158c2:	4606      	mov	r6, r0
 80158c4:	460f      	mov	r7, r1
 80158c6:	f7eb f8d7 	bl	8000a78 <__aeabi_dcmpeq>
 80158ca:	2800      	cmp	r0, #0
 80158cc:	d09d      	beq.n	801580a <_dtoa_r+0x63a>
 80158ce:	e7cf      	b.n	8015870 <_dtoa_r+0x6a0>
 80158d0:	9a08      	ldr	r2, [sp, #32]
 80158d2:	2a00      	cmp	r2, #0
 80158d4:	f000 80d7 	beq.w	8015a86 <_dtoa_r+0x8b6>
 80158d8:	9a06      	ldr	r2, [sp, #24]
 80158da:	2a01      	cmp	r2, #1
 80158dc:	f300 80ba 	bgt.w	8015a54 <_dtoa_r+0x884>
 80158e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80158e2:	2a00      	cmp	r2, #0
 80158e4:	f000 80b2 	beq.w	8015a4c <_dtoa_r+0x87c>
 80158e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80158ec:	9e07      	ldr	r6, [sp, #28]
 80158ee:	9d04      	ldr	r5, [sp, #16]
 80158f0:	9a04      	ldr	r2, [sp, #16]
 80158f2:	441a      	add	r2, r3
 80158f4:	9204      	str	r2, [sp, #16]
 80158f6:	9a05      	ldr	r2, [sp, #20]
 80158f8:	2101      	movs	r1, #1
 80158fa:	441a      	add	r2, r3
 80158fc:	4620      	mov	r0, r4
 80158fe:	9205      	str	r2, [sp, #20]
 8015900:	f7fe ff76 	bl	80147f0 <__i2b>
 8015904:	4607      	mov	r7, r0
 8015906:	2d00      	cmp	r5, #0
 8015908:	dd0c      	ble.n	8015924 <_dtoa_r+0x754>
 801590a:	9b05      	ldr	r3, [sp, #20]
 801590c:	2b00      	cmp	r3, #0
 801590e:	dd09      	ble.n	8015924 <_dtoa_r+0x754>
 8015910:	42ab      	cmp	r3, r5
 8015912:	9a04      	ldr	r2, [sp, #16]
 8015914:	bfa8      	it	ge
 8015916:	462b      	movge	r3, r5
 8015918:	1ad2      	subs	r2, r2, r3
 801591a:	9204      	str	r2, [sp, #16]
 801591c:	9a05      	ldr	r2, [sp, #20]
 801591e:	1aed      	subs	r5, r5, r3
 8015920:	1ad3      	subs	r3, r2, r3
 8015922:	9305      	str	r3, [sp, #20]
 8015924:	9b07      	ldr	r3, [sp, #28]
 8015926:	b31b      	cbz	r3, 8015970 <_dtoa_r+0x7a0>
 8015928:	9b08      	ldr	r3, [sp, #32]
 801592a:	2b00      	cmp	r3, #0
 801592c:	f000 80af 	beq.w	8015a8e <_dtoa_r+0x8be>
 8015930:	2e00      	cmp	r6, #0
 8015932:	dd13      	ble.n	801595c <_dtoa_r+0x78c>
 8015934:	4639      	mov	r1, r7
 8015936:	4632      	mov	r2, r6
 8015938:	4620      	mov	r0, r4
 801593a:	f7ff f819 	bl	8014970 <__pow5mult>
 801593e:	ee18 2a10 	vmov	r2, s16
 8015942:	4601      	mov	r1, r0
 8015944:	4607      	mov	r7, r0
 8015946:	4620      	mov	r0, r4
 8015948:	f7fe ff68 	bl	801481c <__multiply>
 801594c:	ee18 1a10 	vmov	r1, s16
 8015950:	4680      	mov	r8, r0
 8015952:	4620      	mov	r0, r4
 8015954:	f7fe fe94 	bl	8014680 <_Bfree>
 8015958:	ee08 8a10 	vmov	s16, r8
 801595c:	9b07      	ldr	r3, [sp, #28]
 801595e:	1b9a      	subs	r2, r3, r6
 8015960:	d006      	beq.n	8015970 <_dtoa_r+0x7a0>
 8015962:	ee18 1a10 	vmov	r1, s16
 8015966:	4620      	mov	r0, r4
 8015968:	f7ff f802 	bl	8014970 <__pow5mult>
 801596c:	ee08 0a10 	vmov	s16, r0
 8015970:	2101      	movs	r1, #1
 8015972:	4620      	mov	r0, r4
 8015974:	f7fe ff3c 	bl	80147f0 <__i2b>
 8015978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801597a:	2b00      	cmp	r3, #0
 801597c:	4606      	mov	r6, r0
 801597e:	f340 8088 	ble.w	8015a92 <_dtoa_r+0x8c2>
 8015982:	461a      	mov	r2, r3
 8015984:	4601      	mov	r1, r0
 8015986:	4620      	mov	r0, r4
 8015988:	f7fe fff2 	bl	8014970 <__pow5mult>
 801598c:	9b06      	ldr	r3, [sp, #24]
 801598e:	2b01      	cmp	r3, #1
 8015990:	4606      	mov	r6, r0
 8015992:	f340 8081 	ble.w	8015a98 <_dtoa_r+0x8c8>
 8015996:	f04f 0800 	mov.w	r8, #0
 801599a:	6933      	ldr	r3, [r6, #16]
 801599c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80159a0:	6918      	ldr	r0, [r3, #16]
 80159a2:	f7fe fed5 	bl	8014750 <__hi0bits>
 80159a6:	f1c0 0020 	rsb	r0, r0, #32
 80159aa:	9b05      	ldr	r3, [sp, #20]
 80159ac:	4418      	add	r0, r3
 80159ae:	f010 001f 	ands.w	r0, r0, #31
 80159b2:	f000 8092 	beq.w	8015ada <_dtoa_r+0x90a>
 80159b6:	f1c0 0320 	rsb	r3, r0, #32
 80159ba:	2b04      	cmp	r3, #4
 80159bc:	f340 808a 	ble.w	8015ad4 <_dtoa_r+0x904>
 80159c0:	f1c0 001c 	rsb	r0, r0, #28
 80159c4:	9b04      	ldr	r3, [sp, #16]
 80159c6:	4403      	add	r3, r0
 80159c8:	9304      	str	r3, [sp, #16]
 80159ca:	9b05      	ldr	r3, [sp, #20]
 80159cc:	4403      	add	r3, r0
 80159ce:	4405      	add	r5, r0
 80159d0:	9305      	str	r3, [sp, #20]
 80159d2:	9b04      	ldr	r3, [sp, #16]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	dd07      	ble.n	80159e8 <_dtoa_r+0x818>
 80159d8:	ee18 1a10 	vmov	r1, s16
 80159dc:	461a      	mov	r2, r3
 80159de:	4620      	mov	r0, r4
 80159e0:	f7ff f820 	bl	8014a24 <__lshift>
 80159e4:	ee08 0a10 	vmov	s16, r0
 80159e8:	9b05      	ldr	r3, [sp, #20]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	dd05      	ble.n	80159fa <_dtoa_r+0x82a>
 80159ee:	4631      	mov	r1, r6
 80159f0:	461a      	mov	r2, r3
 80159f2:	4620      	mov	r0, r4
 80159f4:	f7ff f816 	bl	8014a24 <__lshift>
 80159f8:	4606      	mov	r6, r0
 80159fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d06e      	beq.n	8015ade <_dtoa_r+0x90e>
 8015a00:	ee18 0a10 	vmov	r0, s16
 8015a04:	4631      	mov	r1, r6
 8015a06:	f7ff f87d 	bl	8014b04 <__mcmp>
 8015a0a:	2800      	cmp	r0, #0
 8015a0c:	da67      	bge.n	8015ade <_dtoa_r+0x90e>
 8015a0e:	9b00      	ldr	r3, [sp, #0]
 8015a10:	3b01      	subs	r3, #1
 8015a12:	ee18 1a10 	vmov	r1, s16
 8015a16:	9300      	str	r3, [sp, #0]
 8015a18:	220a      	movs	r2, #10
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	4620      	mov	r0, r4
 8015a1e:	f7fe fe51 	bl	80146c4 <__multadd>
 8015a22:	9b08      	ldr	r3, [sp, #32]
 8015a24:	ee08 0a10 	vmov	s16, r0
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	f000 81b1 	beq.w	8015d90 <_dtoa_r+0xbc0>
 8015a2e:	2300      	movs	r3, #0
 8015a30:	4639      	mov	r1, r7
 8015a32:	220a      	movs	r2, #10
 8015a34:	4620      	mov	r0, r4
 8015a36:	f7fe fe45 	bl	80146c4 <__multadd>
 8015a3a:	9b02      	ldr	r3, [sp, #8]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	4607      	mov	r7, r0
 8015a40:	f300 808e 	bgt.w	8015b60 <_dtoa_r+0x990>
 8015a44:	9b06      	ldr	r3, [sp, #24]
 8015a46:	2b02      	cmp	r3, #2
 8015a48:	dc51      	bgt.n	8015aee <_dtoa_r+0x91e>
 8015a4a:	e089      	b.n	8015b60 <_dtoa_r+0x990>
 8015a4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015a52:	e74b      	b.n	80158ec <_dtoa_r+0x71c>
 8015a54:	9b03      	ldr	r3, [sp, #12]
 8015a56:	1e5e      	subs	r6, r3, #1
 8015a58:	9b07      	ldr	r3, [sp, #28]
 8015a5a:	42b3      	cmp	r3, r6
 8015a5c:	bfbf      	itttt	lt
 8015a5e:	9b07      	ldrlt	r3, [sp, #28]
 8015a60:	9607      	strlt	r6, [sp, #28]
 8015a62:	1af2      	sublt	r2, r6, r3
 8015a64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8015a66:	bfb6      	itet	lt
 8015a68:	189b      	addlt	r3, r3, r2
 8015a6a:	1b9e      	subge	r6, r3, r6
 8015a6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8015a6e:	9b03      	ldr	r3, [sp, #12]
 8015a70:	bfb8      	it	lt
 8015a72:	2600      	movlt	r6, #0
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	bfb7      	itett	lt
 8015a78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8015a7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8015a80:	1a9d      	sublt	r5, r3, r2
 8015a82:	2300      	movlt	r3, #0
 8015a84:	e734      	b.n	80158f0 <_dtoa_r+0x720>
 8015a86:	9e07      	ldr	r6, [sp, #28]
 8015a88:	9d04      	ldr	r5, [sp, #16]
 8015a8a:	9f08      	ldr	r7, [sp, #32]
 8015a8c:	e73b      	b.n	8015906 <_dtoa_r+0x736>
 8015a8e:	9a07      	ldr	r2, [sp, #28]
 8015a90:	e767      	b.n	8015962 <_dtoa_r+0x792>
 8015a92:	9b06      	ldr	r3, [sp, #24]
 8015a94:	2b01      	cmp	r3, #1
 8015a96:	dc18      	bgt.n	8015aca <_dtoa_r+0x8fa>
 8015a98:	f1ba 0f00 	cmp.w	sl, #0
 8015a9c:	d115      	bne.n	8015aca <_dtoa_r+0x8fa>
 8015a9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015aa2:	b993      	cbnz	r3, 8015aca <_dtoa_r+0x8fa>
 8015aa4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015aa8:	0d1b      	lsrs	r3, r3, #20
 8015aaa:	051b      	lsls	r3, r3, #20
 8015aac:	b183      	cbz	r3, 8015ad0 <_dtoa_r+0x900>
 8015aae:	9b04      	ldr	r3, [sp, #16]
 8015ab0:	3301      	adds	r3, #1
 8015ab2:	9304      	str	r3, [sp, #16]
 8015ab4:	9b05      	ldr	r3, [sp, #20]
 8015ab6:	3301      	adds	r3, #1
 8015ab8:	9305      	str	r3, [sp, #20]
 8015aba:	f04f 0801 	mov.w	r8, #1
 8015abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	f47f af6a 	bne.w	801599a <_dtoa_r+0x7ca>
 8015ac6:	2001      	movs	r0, #1
 8015ac8:	e76f      	b.n	80159aa <_dtoa_r+0x7da>
 8015aca:	f04f 0800 	mov.w	r8, #0
 8015ace:	e7f6      	b.n	8015abe <_dtoa_r+0x8ee>
 8015ad0:	4698      	mov	r8, r3
 8015ad2:	e7f4      	b.n	8015abe <_dtoa_r+0x8ee>
 8015ad4:	f43f af7d 	beq.w	80159d2 <_dtoa_r+0x802>
 8015ad8:	4618      	mov	r0, r3
 8015ada:	301c      	adds	r0, #28
 8015adc:	e772      	b.n	80159c4 <_dtoa_r+0x7f4>
 8015ade:	9b03      	ldr	r3, [sp, #12]
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	dc37      	bgt.n	8015b54 <_dtoa_r+0x984>
 8015ae4:	9b06      	ldr	r3, [sp, #24]
 8015ae6:	2b02      	cmp	r3, #2
 8015ae8:	dd34      	ble.n	8015b54 <_dtoa_r+0x984>
 8015aea:	9b03      	ldr	r3, [sp, #12]
 8015aec:	9302      	str	r3, [sp, #8]
 8015aee:	9b02      	ldr	r3, [sp, #8]
 8015af0:	b96b      	cbnz	r3, 8015b0e <_dtoa_r+0x93e>
 8015af2:	4631      	mov	r1, r6
 8015af4:	2205      	movs	r2, #5
 8015af6:	4620      	mov	r0, r4
 8015af8:	f7fe fde4 	bl	80146c4 <__multadd>
 8015afc:	4601      	mov	r1, r0
 8015afe:	4606      	mov	r6, r0
 8015b00:	ee18 0a10 	vmov	r0, s16
 8015b04:	f7fe fffe 	bl	8014b04 <__mcmp>
 8015b08:	2800      	cmp	r0, #0
 8015b0a:	f73f adbb 	bgt.w	8015684 <_dtoa_r+0x4b4>
 8015b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b10:	9d01      	ldr	r5, [sp, #4]
 8015b12:	43db      	mvns	r3, r3
 8015b14:	9300      	str	r3, [sp, #0]
 8015b16:	f04f 0800 	mov.w	r8, #0
 8015b1a:	4631      	mov	r1, r6
 8015b1c:	4620      	mov	r0, r4
 8015b1e:	f7fe fdaf 	bl	8014680 <_Bfree>
 8015b22:	2f00      	cmp	r7, #0
 8015b24:	f43f aea4 	beq.w	8015870 <_dtoa_r+0x6a0>
 8015b28:	f1b8 0f00 	cmp.w	r8, #0
 8015b2c:	d005      	beq.n	8015b3a <_dtoa_r+0x96a>
 8015b2e:	45b8      	cmp	r8, r7
 8015b30:	d003      	beq.n	8015b3a <_dtoa_r+0x96a>
 8015b32:	4641      	mov	r1, r8
 8015b34:	4620      	mov	r0, r4
 8015b36:	f7fe fda3 	bl	8014680 <_Bfree>
 8015b3a:	4639      	mov	r1, r7
 8015b3c:	4620      	mov	r0, r4
 8015b3e:	f7fe fd9f 	bl	8014680 <_Bfree>
 8015b42:	e695      	b.n	8015870 <_dtoa_r+0x6a0>
 8015b44:	2600      	movs	r6, #0
 8015b46:	4637      	mov	r7, r6
 8015b48:	e7e1      	b.n	8015b0e <_dtoa_r+0x93e>
 8015b4a:	9700      	str	r7, [sp, #0]
 8015b4c:	4637      	mov	r7, r6
 8015b4e:	e599      	b.n	8015684 <_dtoa_r+0x4b4>
 8015b50:	40240000 	.word	0x40240000
 8015b54:	9b08      	ldr	r3, [sp, #32]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	f000 80ca 	beq.w	8015cf0 <_dtoa_r+0xb20>
 8015b5c:	9b03      	ldr	r3, [sp, #12]
 8015b5e:	9302      	str	r3, [sp, #8]
 8015b60:	2d00      	cmp	r5, #0
 8015b62:	dd05      	ble.n	8015b70 <_dtoa_r+0x9a0>
 8015b64:	4639      	mov	r1, r7
 8015b66:	462a      	mov	r2, r5
 8015b68:	4620      	mov	r0, r4
 8015b6a:	f7fe ff5b 	bl	8014a24 <__lshift>
 8015b6e:	4607      	mov	r7, r0
 8015b70:	f1b8 0f00 	cmp.w	r8, #0
 8015b74:	d05b      	beq.n	8015c2e <_dtoa_r+0xa5e>
 8015b76:	6879      	ldr	r1, [r7, #4]
 8015b78:	4620      	mov	r0, r4
 8015b7a:	f7fe fd41 	bl	8014600 <_Balloc>
 8015b7e:	4605      	mov	r5, r0
 8015b80:	b928      	cbnz	r0, 8015b8e <_dtoa_r+0x9be>
 8015b82:	4b87      	ldr	r3, [pc, #540]	; (8015da0 <_dtoa_r+0xbd0>)
 8015b84:	4602      	mov	r2, r0
 8015b86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015b8a:	f7ff bb3b 	b.w	8015204 <_dtoa_r+0x34>
 8015b8e:	693a      	ldr	r2, [r7, #16]
 8015b90:	3202      	adds	r2, #2
 8015b92:	0092      	lsls	r2, r2, #2
 8015b94:	f107 010c 	add.w	r1, r7, #12
 8015b98:	300c      	adds	r0, #12
 8015b9a:	f7fd fe0f 	bl	80137bc <memcpy>
 8015b9e:	2201      	movs	r2, #1
 8015ba0:	4629      	mov	r1, r5
 8015ba2:	4620      	mov	r0, r4
 8015ba4:	f7fe ff3e 	bl	8014a24 <__lshift>
 8015ba8:	9b01      	ldr	r3, [sp, #4]
 8015baa:	f103 0901 	add.w	r9, r3, #1
 8015bae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8015bb2:	4413      	add	r3, r2
 8015bb4:	9305      	str	r3, [sp, #20]
 8015bb6:	f00a 0301 	and.w	r3, sl, #1
 8015bba:	46b8      	mov	r8, r7
 8015bbc:	9304      	str	r3, [sp, #16]
 8015bbe:	4607      	mov	r7, r0
 8015bc0:	4631      	mov	r1, r6
 8015bc2:	ee18 0a10 	vmov	r0, s16
 8015bc6:	f7ff fa75 	bl	80150b4 <quorem>
 8015bca:	4641      	mov	r1, r8
 8015bcc:	9002      	str	r0, [sp, #8]
 8015bce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015bd2:	ee18 0a10 	vmov	r0, s16
 8015bd6:	f7fe ff95 	bl	8014b04 <__mcmp>
 8015bda:	463a      	mov	r2, r7
 8015bdc:	9003      	str	r0, [sp, #12]
 8015bde:	4631      	mov	r1, r6
 8015be0:	4620      	mov	r0, r4
 8015be2:	f7fe ffab 	bl	8014b3c <__mdiff>
 8015be6:	68c2      	ldr	r2, [r0, #12]
 8015be8:	f109 3bff 	add.w	fp, r9, #4294967295
 8015bec:	4605      	mov	r5, r0
 8015bee:	bb02      	cbnz	r2, 8015c32 <_dtoa_r+0xa62>
 8015bf0:	4601      	mov	r1, r0
 8015bf2:	ee18 0a10 	vmov	r0, s16
 8015bf6:	f7fe ff85 	bl	8014b04 <__mcmp>
 8015bfa:	4602      	mov	r2, r0
 8015bfc:	4629      	mov	r1, r5
 8015bfe:	4620      	mov	r0, r4
 8015c00:	9207      	str	r2, [sp, #28]
 8015c02:	f7fe fd3d 	bl	8014680 <_Bfree>
 8015c06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8015c0a:	ea43 0102 	orr.w	r1, r3, r2
 8015c0e:	9b04      	ldr	r3, [sp, #16]
 8015c10:	430b      	orrs	r3, r1
 8015c12:	464d      	mov	r5, r9
 8015c14:	d10f      	bne.n	8015c36 <_dtoa_r+0xa66>
 8015c16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015c1a:	d02a      	beq.n	8015c72 <_dtoa_r+0xaa2>
 8015c1c:	9b03      	ldr	r3, [sp, #12]
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	dd02      	ble.n	8015c28 <_dtoa_r+0xa58>
 8015c22:	9b02      	ldr	r3, [sp, #8]
 8015c24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8015c28:	f88b a000 	strb.w	sl, [fp]
 8015c2c:	e775      	b.n	8015b1a <_dtoa_r+0x94a>
 8015c2e:	4638      	mov	r0, r7
 8015c30:	e7ba      	b.n	8015ba8 <_dtoa_r+0x9d8>
 8015c32:	2201      	movs	r2, #1
 8015c34:	e7e2      	b.n	8015bfc <_dtoa_r+0xa2c>
 8015c36:	9b03      	ldr	r3, [sp, #12]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	db04      	blt.n	8015c46 <_dtoa_r+0xa76>
 8015c3c:	9906      	ldr	r1, [sp, #24]
 8015c3e:	430b      	orrs	r3, r1
 8015c40:	9904      	ldr	r1, [sp, #16]
 8015c42:	430b      	orrs	r3, r1
 8015c44:	d122      	bne.n	8015c8c <_dtoa_r+0xabc>
 8015c46:	2a00      	cmp	r2, #0
 8015c48:	ddee      	ble.n	8015c28 <_dtoa_r+0xa58>
 8015c4a:	ee18 1a10 	vmov	r1, s16
 8015c4e:	2201      	movs	r2, #1
 8015c50:	4620      	mov	r0, r4
 8015c52:	f7fe fee7 	bl	8014a24 <__lshift>
 8015c56:	4631      	mov	r1, r6
 8015c58:	ee08 0a10 	vmov	s16, r0
 8015c5c:	f7fe ff52 	bl	8014b04 <__mcmp>
 8015c60:	2800      	cmp	r0, #0
 8015c62:	dc03      	bgt.n	8015c6c <_dtoa_r+0xa9c>
 8015c64:	d1e0      	bne.n	8015c28 <_dtoa_r+0xa58>
 8015c66:	f01a 0f01 	tst.w	sl, #1
 8015c6a:	d0dd      	beq.n	8015c28 <_dtoa_r+0xa58>
 8015c6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015c70:	d1d7      	bne.n	8015c22 <_dtoa_r+0xa52>
 8015c72:	2339      	movs	r3, #57	; 0x39
 8015c74:	f88b 3000 	strb.w	r3, [fp]
 8015c78:	462b      	mov	r3, r5
 8015c7a:	461d      	mov	r5, r3
 8015c7c:	3b01      	subs	r3, #1
 8015c7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015c82:	2a39      	cmp	r2, #57	; 0x39
 8015c84:	d071      	beq.n	8015d6a <_dtoa_r+0xb9a>
 8015c86:	3201      	adds	r2, #1
 8015c88:	701a      	strb	r2, [r3, #0]
 8015c8a:	e746      	b.n	8015b1a <_dtoa_r+0x94a>
 8015c8c:	2a00      	cmp	r2, #0
 8015c8e:	dd07      	ble.n	8015ca0 <_dtoa_r+0xad0>
 8015c90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015c94:	d0ed      	beq.n	8015c72 <_dtoa_r+0xaa2>
 8015c96:	f10a 0301 	add.w	r3, sl, #1
 8015c9a:	f88b 3000 	strb.w	r3, [fp]
 8015c9e:	e73c      	b.n	8015b1a <_dtoa_r+0x94a>
 8015ca0:	9b05      	ldr	r3, [sp, #20]
 8015ca2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8015ca6:	4599      	cmp	r9, r3
 8015ca8:	d047      	beq.n	8015d3a <_dtoa_r+0xb6a>
 8015caa:	ee18 1a10 	vmov	r1, s16
 8015cae:	2300      	movs	r3, #0
 8015cb0:	220a      	movs	r2, #10
 8015cb2:	4620      	mov	r0, r4
 8015cb4:	f7fe fd06 	bl	80146c4 <__multadd>
 8015cb8:	45b8      	cmp	r8, r7
 8015cba:	ee08 0a10 	vmov	s16, r0
 8015cbe:	f04f 0300 	mov.w	r3, #0
 8015cc2:	f04f 020a 	mov.w	r2, #10
 8015cc6:	4641      	mov	r1, r8
 8015cc8:	4620      	mov	r0, r4
 8015cca:	d106      	bne.n	8015cda <_dtoa_r+0xb0a>
 8015ccc:	f7fe fcfa 	bl	80146c4 <__multadd>
 8015cd0:	4680      	mov	r8, r0
 8015cd2:	4607      	mov	r7, r0
 8015cd4:	f109 0901 	add.w	r9, r9, #1
 8015cd8:	e772      	b.n	8015bc0 <_dtoa_r+0x9f0>
 8015cda:	f7fe fcf3 	bl	80146c4 <__multadd>
 8015cde:	4639      	mov	r1, r7
 8015ce0:	4680      	mov	r8, r0
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	220a      	movs	r2, #10
 8015ce6:	4620      	mov	r0, r4
 8015ce8:	f7fe fcec 	bl	80146c4 <__multadd>
 8015cec:	4607      	mov	r7, r0
 8015cee:	e7f1      	b.n	8015cd4 <_dtoa_r+0xb04>
 8015cf0:	9b03      	ldr	r3, [sp, #12]
 8015cf2:	9302      	str	r3, [sp, #8]
 8015cf4:	9d01      	ldr	r5, [sp, #4]
 8015cf6:	ee18 0a10 	vmov	r0, s16
 8015cfa:	4631      	mov	r1, r6
 8015cfc:	f7ff f9da 	bl	80150b4 <quorem>
 8015d00:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015d04:	9b01      	ldr	r3, [sp, #4]
 8015d06:	f805 ab01 	strb.w	sl, [r5], #1
 8015d0a:	1aea      	subs	r2, r5, r3
 8015d0c:	9b02      	ldr	r3, [sp, #8]
 8015d0e:	4293      	cmp	r3, r2
 8015d10:	dd09      	ble.n	8015d26 <_dtoa_r+0xb56>
 8015d12:	ee18 1a10 	vmov	r1, s16
 8015d16:	2300      	movs	r3, #0
 8015d18:	220a      	movs	r2, #10
 8015d1a:	4620      	mov	r0, r4
 8015d1c:	f7fe fcd2 	bl	80146c4 <__multadd>
 8015d20:	ee08 0a10 	vmov	s16, r0
 8015d24:	e7e7      	b.n	8015cf6 <_dtoa_r+0xb26>
 8015d26:	9b02      	ldr	r3, [sp, #8]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	bfc8      	it	gt
 8015d2c:	461d      	movgt	r5, r3
 8015d2e:	9b01      	ldr	r3, [sp, #4]
 8015d30:	bfd8      	it	le
 8015d32:	2501      	movle	r5, #1
 8015d34:	441d      	add	r5, r3
 8015d36:	f04f 0800 	mov.w	r8, #0
 8015d3a:	ee18 1a10 	vmov	r1, s16
 8015d3e:	2201      	movs	r2, #1
 8015d40:	4620      	mov	r0, r4
 8015d42:	f7fe fe6f 	bl	8014a24 <__lshift>
 8015d46:	4631      	mov	r1, r6
 8015d48:	ee08 0a10 	vmov	s16, r0
 8015d4c:	f7fe feda 	bl	8014b04 <__mcmp>
 8015d50:	2800      	cmp	r0, #0
 8015d52:	dc91      	bgt.n	8015c78 <_dtoa_r+0xaa8>
 8015d54:	d102      	bne.n	8015d5c <_dtoa_r+0xb8c>
 8015d56:	f01a 0f01 	tst.w	sl, #1
 8015d5a:	d18d      	bne.n	8015c78 <_dtoa_r+0xaa8>
 8015d5c:	462b      	mov	r3, r5
 8015d5e:	461d      	mov	r5, r3
 8015d60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015d64:	2a30      	cmp	r2, #48	; 0x30
 8015d66:	d0fa      	beq.n	8015d5e <_dtoa_r+0xb8e>
 8015d68:	e6d7      	b.n	8015b1a <_dtoa_r+0x94a>
 8015d6a:	9a01      	ldr	r2, [sp, #4]
 8015d6c:	429a      	cmp	r2, r3
 8015d6e:	d184      	bne.n	8015c7a <_dtoa_r+0xaaa>
 8015d70:	9b00      	ldr	r3, [sp, #0]
 8015d72:	3301      	adds	r3, #1
 8015d74:	9300      	str	r3, [sp, #0]
 8015d76:	2331      	movs	r3, #49	; 0x31
 8015d78:	7013      	strb	r3, [r2, #0]
 8015d7a:	e6ce      	b.n	8015b1a <_dtoa_r+0x94a>
 8015d7c:	4b09      	ldr	r3, [pc, #36]	; (8015da4 <_dtoa_r+0xbd4>)
 8015d7e:	f7ff ba95 	b.w	80152ac <_dtoa_r+0xdc>
 8015d82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	f47f aa6e 	bne.w	8015266 <_dtoa_r+0x96>
 8015d8a:	4b07      	ldr	r3, [pc, #28]	; (8015da8 <_dtoa_r+0xbd8>)
 8015d8c:	f7ff ba8e 	b.w	80152ac <_dtoa_r+0xdc>
 8015d90:	9b02      	ldr	r3, [sp, #8]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	dcae      	bgt.n	8015cf4 <_dtoa_r+0xb24>
 8015d96:	9b06      	ldr	r3, [sp, #24]
 8015d98:	2b02      	cmp	r3, #2
 8015d9a:	f73f aea8 	bgt.w	8015aee <_dtoa_r+0x91e>
 8015d9e:	e7a9      	b.n	8015cf4 <_dtoa_r+0xb24>
 8015da0:	08016b83 	.word	0x08016b83
 8015da4:	08016ca1 	.word	0x08016ca1
 8015da8:	08016c94 	.word	0x08016c94

08015dac <_fstat_r>:
 8015dac:	b538      	push	{r3, r4, r5, lr}
 8015dae:	4d07      	ldr	r5, [pc, #28]	; (8015dcc <_fstat_r+0x20>)
 8015db0:	2300      	movs	r3, #0
 8015db2:	4604      	mov	r4, r0
 8015db4:	4608      	mov	r0, r1
 8015db6:	4611      	mov	r1, r2
 8015db8:	602b      	str	r3, [r5, #0]
 8015dba:	f7ec fe1e 	bl	80029fa <_fstat>
 8015dbe:	1c43      	adds	r3, r0, #1
 8015dc0:	d102      	bne.n	8015dc8 <_fstat_r+0x1c>
 8015dc2:	682b      	ldr	r3, [r5, #0]
 8015dc4:	b103      	cbz	r3, 8015dc8 <_fstat_r+0x1c>
 8015dc6:	6023      	str	r3, [r4, #0]
 8015dc8:	bd38      	pop	{r3, r4, r5, pc}
 8015dca:	bf00      	nop
 8015dcc:	20002568 	.word	0x20002568

08015dd0 <_isatty_r>:
 8015dd0:	b538      	push	{r3, r4, r5, lr}
 8015dd2:	4d06      	ldr	r5, [pc, #24]	; (8015dec <_isatty_r+0x1c>)
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	4604      	mov	r4, r0
 8015dd8:	4608      	mov	r0, r1
 8015dda:	602b      	str	r3, [r5, #0]
 8015ddc:	f7ec fe1d 	bl	8002a1a <_isatty>
 8015de0:	1c43      	adds	r3, r0, #1
 8015de2:	d102      	bne.n	8015dea <_isatty_r+0x1a>
 8015de4:	682b      	ldr	r3, [r5, #0]
 8015de6:	b103      	cbz	r3, 8015dea <_isatty_r+0x1a>
 8015de8:	6023      	str	r3, [r4, #0]
 8015dea:	bd38      	pop	{r3, r4, r5, pc}
 8015dec:	20002568 	.word	0x20002568

08015df0 <_lseek_r>:
 8015df0:	b538      	push	{r3, r4, r5, lr}
 8015df2:	4d07      	ldr	r5, [pc, #28]	; (8015e10 <_lseek_r+0x20>)
 8015df4:	4604      	mov	r4, r0
 8015df6:	4608      	mov	r0, r1
 8015df8:	4611      	mov	r1, r2
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	602a      	str	r2, [r5, #0]
 8015dfe:	461a      	mov	r2, r3
 8015e00:	f7ec fe16 	bl	8002a30 <_lseek>
 8015e04:	1c43      	adds	r3, r0, #1
 8015e06:	d102      	bne.n	8015e0e <_lseek_r+0x1e>
 8015e08:	682b      	ldr	r3, [r5, #0]
 8015e0a:	b103      	cbz	r3, 8015e0e <_lseek_r+0x1e>
 8015e0c:	6023      	str	r3, [r4, #0]
 8015e0e:	bd38      	pop	{r3, r4, r5, pc}
 8015e10:	20002568 	.word	0x20002568

08015e14 <malloc>:
 8015e14:	4b02      	ldr	r3, [pc, #8]	; (8015e20 <malloc+0xc>)
 8015e16:	4601      	mov	r1, r0
 8015e18:	6818      	ldr	r0, [r3, #0]
 8015e1a:	f7ff b815 	b.w	8014e48 <_malloc_r>
 8015e1e:	bf00      	nop
 8015e20:	2000014c 	.word	0x2000014c

08015e24 <__malloc_lock>:
 8015e24:	4801      	ldr	r0, [pc, #4]	; (8015e2c <__malloc_lock+0x8>)
 8015e26:	f7fe bb83 	b.w	8014530 <__retarget_lock_acquire_recursive>
 8015e2a:	bf00      	nop
 8015e2c:	2000255c 	.word	0x2000255c

08015e30 <__malloc_unlock>:
 8015e30:	4801      	ldr	r0, [pc, #4]	; (8015e38 <__malloc_unlock+0x8>)
 8015e32:	f7fe bb7e 	b.w	8014532 <__retarget_lock_release_recursive>
 8015e36:	bf00      	nop
 8015e38:	2000255c 	.word	0x2000255c

08015e3c <_read_r>:
 8015e3c:	b538      	push	{r3, r4, r5, lr}
 8015e3e:	4d07      	ldr	r5, [pc, #28]	; (8015e5c <_read_r+0x20>)
 8015e40:	4604      	mov	r4, r0
 8015e42:	4608      	mov	r0, r1
 8015e44:	4611      	mov	r1, r2
 8015e46:	2200      	movs	r2, #0
 8015e48:	602a      	str	r2, [r5, #0]
 8015e4a:	461a      	mov	r2, r3
 8015e4c:	f7ec fd90 	bl	8002970 <_read>
 8015e50:	1c43      	adds	r3, r0, #1
 8015e52:	d102      	bne.n	8015e5a <_read_r+0x1e>
 8015e54:	682b      	ldr	r3, [r5, #0]
 8015e56:	b103      	cbz	r3, 8015e5a <_read_r+0x1e>
 8015e58:	6023      	str	r3, [r4, #0]
 8015e5a:	bd38      	pop	{r3, r4, r5, pc}
 8015e5c:	20002568 	.word	0x20002568

08015e60 <_init>:
 8015e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e62:	bf00      	nop
 8015e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e66:	bc08      	pop	{r3}
 8015e68:	469e      	mov	lr, r3
 8015e6a:	4770      	bx	lr

08015e6c <_fini>:
 8015e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e6e:	bf00      	nop
 8015e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e72:	bc08      	pop	{r3}
 8015e74:	469e      	mov	lr, r3
 8015e76:	4770      	bx	lr
