
SNAP_Project_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016440  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb0  08016580  08016580  00026580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08017430  08017430  00027430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08017434  08017434  00027434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001ac  20000004  08017438  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 BLE_DRIVER_CONTEXT 00000035  200001b0  080175e4  000301b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  200001e8  08017619  000301e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000237c  200001fc  0801762a  000301fc  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20002578  0801762a  00032578  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000301f9  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 12 MB_MEM1       000001bb  20030028  20030028  00040000  2**2
                  ALLOC
 13 MB_MEM2       00000883  200301e4  200301e4  00040000  2**2
                  ALLOC
 14 .debug_info   0003f9ce  00000000  00000000  00030229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008232  00000000  00000000  0006fbf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003750  00000000  00000000  00077e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003388  00000000  00000000  0007b580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000327ae  00000000  00000000  0007e908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00040558  00000000  00000000  000b10b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010a7df  00000000  00000000  000f160e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001fbded  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f974  00000000  00000000  001fbe40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001fc 	.word	0x200001fc
 800015c:	00000000 	.word	0x00000000
 8000160:	08016568 	.word	0x08016568

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000200 	.word	0x20000200
 800017c:	08016568 	.word	0x08016568

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <LL_EXTI_EnableIT_32_63+0x24>)
 8000c02:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000c06:	4905      	ldr	r1, [pc, #20]	; (8000c1c <LL_EXTI_EnableIT_32_63+0x24>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	58000800 	.word	0x58000800

08000c20 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4013      	ands	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c44:	68fb      	ldr	r3, [r7, #12]
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b085      	sub	sp, #20
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c5e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000c62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c72:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
}
 8000c7e:	bf00      	nop
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000c8e:	f002 f861 	bl	8002d54 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000c92:	f002 f865 	bl	8002d60 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000c96:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000c9a:	f7ff ffad 	bl	8000bf8 <LL_EXTI_EnableIT_32_63>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 8000c9e:	f000 f821 	bl	8000ce4 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000ca2:	f000 f8c3 	bl	8000e2c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000ca6:	bf00      	nop
}
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000cac:	b5b0      	push	{r4, r5, r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <APPD_EnableCPU2+0x34>)
 8000cb4:	1d3c      	adds	r4, r7, #4
 8000cb6:	461d      	mov	r5, r3
 8000cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cc0:	c403      	stmia	r4!, {r0, r1}
 8000cc2:	8022      	strh	r2, [r4, #0]
 8000cc4:	3402      	adds	r4, #2
 8000cc6:	0c13      	lsrs	r3, r2, #16
 8000cc8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000cca:	f010 f807 	bl	8010cdc <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f00f faa2 	bl	801021a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000cd6:	bf00      	nop
}
 8000cd8:	3720      	adds	r7, #32
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	08016580 	.word	0x08016580

08000ce4 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000d04:	2300      	movs	r3, #0
 8000d06:	77fb      	strb	r3, [r7, #31]
 8000d08:	e038      	b.n	8000d7c <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000d0a:	7ffb      	ldrb	r3, [r7, #31]
 8000d0c:	4a44      	ldr	r2, [pc, #272]	; (8000e20 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	4413      	add	r3, r2
 8000d12:	799b      	ldrb	r3, [r3, #6]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d02b      	beq.n	8000d70 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000d18:	7ffb      	ldrb	r3, [r7, #31]
 8000d1a:	4a41      	ldr	r2, [pc, #260]	; (8000e20 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000d20:	4a40      	ldr	r2, [pc, #256]	; (8000e24 <APPD_SetCPU2GpioConfig+0x140>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d01b      	beq.n	8000d5e <APPD_SetCPU2GpioConfig+0x7a>
 8000d26:	4a3f      	ldr	r2, [pc, #252]	; (8000e24 <APPD_SetCPU2GpioConfig+0x140>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d823      	bhi.n	8000d74 <APPD_SetCPU2GpioConfig+0x90>
 8000d2c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d30:	d003      	beq.n	8000d3a <APPD_SetCPU2GpioConfig+0x56>
 8000d32:	4a3d      	ldr	r2, [pc, #244]	; (8000e28 <APPD_SetCPU2GpioConfig+0x144>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d009      	beq.n	8000d4c <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000d38:	e01c      	b.n	8000d74 <APPD_SetCPU2GpioConfig+0x90>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000d3a:	7ffb      	ldrb	r3, [r7, #31]
 8000d3c:	4a38      	ldr	r2, [pc, #224]	; (8000e20 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	4413      	add	r3, r2
 8000d42:	889a      	ldrh	r2, [r3, #4]
 8000d44:	8bbb      	ldrh	r3, [r7, #28]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	83bb      	strh	r3, [r7, #28]
          break;
 8000d4a:	e014      	b.n	8000d76 <APPD_SetCPU2GpioConfig+0x92>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000d4c:	7ffb      	ldrb	r3, [r7, #31]
 8000d4e:	4a34      	ldr	r2, [pc, #208]	; (8000e20 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	4413      	add	r3, r2
 8000d54:	889a      	ldrh	r2, [r3, #4]
 8000d56:	8b7b      	ldrh	r3, [r7, #26]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	837b      	strh	r3, [r7, #26]
          break;
 8000d5c:	e00b      	b.n	8000d76 <APPD_SetCPU2GpioConfig+0x92>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000d5e:	7ffb      	ldrb	r3, [r7, #31]
 8000d60:	4a2f      	ldr	r2, [pc, #188]	; (8000e20 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	4413      	add	r3, r2
 8000d66:	889a      	ldrh	r2, [r3, #4]
 8000d68:	8b3b      	ldrh	r3, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	833b      	strh	r3, [r7, #24]
          break;
 8000d6e:	e002      	b.n	8000d76 <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000d70:	bf00      	nop
 8000d72:	e000      	b.n	8000d76 <APPD_SetCPU2GpioConfig+0x92>
          break;
 8000d74:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000d76:	7ffb      	ldrb	r3, [r7, #31]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	77fb      	strb	r3, [r7, #31]
 8000d7c:	7ffb      	ldrb	r3, [r7, #31]
 8000d7e:	2b25      	cmp	r3, #37	; 0x25
 8000d80:	d9c3      	bls.n	8000d0a <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000d8e:	8bbb      	ldrh	r3, [r7, #28]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d014      	beq.n	8000dbe <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000d94:	8bbb      	ldrh	r3, [r7, #28]
 8000d96:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f7ff ff41 	bl	8000c20 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f7ff ff57 	bl	8000c52 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	4619      	mov	r1, r3
 8000da8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dac:	f003 fe70 	bl	8004a90 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000db0:	8bbb      	ldrh	r3, [r7, #28]
 8000db2:	2200      	movs	r2, #0
 8000db4:	4619      	mov	r1, r3
 8000db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dba:	f003 ffe9 	bl	8004d90 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000dbe:	8b7b      	ldrh	r3, [r7, #26]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d012      	beq.n	8000dea <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000dc4:	8b7b      	ldrh	r3, [r7, #26]
 8000dc6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f7ff ff29 	bl	8000c20 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000dce:	2002      	movs	r0, #2
 8000dd0:	f7ff ff3f 	bl	8000c52 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4813      	ldr	r0, [pc, #76]	; (8000e28 <APPD_SetCPU2GpioConfig+0x144>)
 8000dda:	f003 fe59 	bl	8004a90 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000dde:	8b7b      	ldrh	r3, [r7, #26]
 8000de0:	2200      	movs	r2, #0
 8000de2:	4619      	mov	r1, r3
 8000de4:	4810      	ldr	r0, [pc, #64]	; (8000e28 <APPD_SetCPU2GpioConfig+0x144>)
 8000de6:	f003 ffd3 	bl	8004d90 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000dea:	8b3b      	ldrh	r3, [r7, #24]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d013      	beq.n	8000e18 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000df0:	8b3b      	ldrh	r3, [r7, #24]
 8000df2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df4:	2004      	movs	r0, #4
 8000df6:	f7ff ff13 	bl	8000c20 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000dfa:	2004      	movs	r0, #4
 8000dfc:	f7ff ff29 	bl	8000c52 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	4619      	mov	r1, r3
 8000e04:	4807      	ldr	r0, [pc, #28]	; (8000e24 <APPD_SetCPU2GpioConfig+0x140>)
 8000e06:	f003 fe43 	bl	8004a90 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000e0a:	8b3b      	ldrh	r3, [r7, #24]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4804      	ldr	r0, [pc, #16]	; (8000e24 <APPD_SetCPU2GpioConfig+0x140>)
 8000e12:	f003 ffbd 	bl	8004d90 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000e16:	bf00      	nop
 8000e18:	bf00      	nop
}
 8000e1a:	3720      	adds	r7, #32
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	08016810 	.word	0x08016810
 8000e24:	48000800 	.word	0x48000800
 8000e28:	48000400 	.word	0x48000400

08000e2c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000e30:	bf00      	nop
}
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
	...

08000e3c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <LL_C2_PWR_SetPowerMode+0x28>)
 8000e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e4a:	f023 0207 	bic.w	r2, r3, #7
 8000e4e:	4905      	ldr	r1, [pc, #20]	; (8000e64 <LL_C2_PWR_SetPowerMode+0x28>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	58000400 	.word	0x58000400

08000e68 <LL_EXTI_EnableIT_32_63>:
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <LL_EXTI_EnableIT_32_63+0x24>)
 8000e72:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000e76:	4905      	ldr	r1, [pc, #20]	; (8000e8c <LL_EXTI_EnableIT_32_63+0x24>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	58000800 	.word	0x58000800

08000e90 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e9c:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000e9e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000eaa:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	cafecafe 	.word	0xcafecafe

08000ecc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000ede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	608b      	str	r3, [r1, #8]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000f4c:	d101      	bne.n	8000f52 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f72:	d101      	bne.n	8000f78 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000f74:	2301      	movs	r3, #1
 8000f76:	e000      	b.n	8000f7a <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <LL_AHB3_GRP1_EnableClock>:
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <LL_DBGMCU_GetDeviceID+0x18>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e0042000 	.word	0xe0042000

08000fd4 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <LL_DBGMCU_GetRevisionID+0x18>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	0c1b      	lsrs	r3, r3, #16
 8000fde:	b29b      	uxth	r3, r3
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e0042000 	.word	0xe0042000

08000ff0 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	041b      	lsls	r3, r3, #16
 8001002:	431a      	orrs	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	605a      	str	r2, [r3, #4]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	431a      	orrs	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	605a      	str	r2, [r3, #4]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	695a      	ldr	r2, [r3, #20]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	041b      	lsls	r3, r3, #16
 8001048:	431a      	orrs	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	615a      	str	r2, [r3, #20]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	695a      	ldr	r2, [r3, #20]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	431a      	orrs	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	615a      	str	r2, [r3, #20]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	609a      	str	r2, [r3, #8]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	619a      	str	r2, [r3, #24]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <LL_LPM_EnableSleep+0x1c>)
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <LL_LPM_EnableSleep+0x1c>)
 80010be:	f023 0304 	bic.w	r3, r3, #4
 80010c2:	6113      	str	r3, [r2, #16]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	22ff      	movs	r2, #255	; 0xff
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	22ca      	movs	r2, #202	; 0xca
 80010fa:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2253      	movs	r2, #83	; 0x53
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f023 0207 	bic.w	r2, r3, #7
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	609a      	str	r2, [r3, #8]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <MX_APPE_Config+0x18>)
 800113a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800113e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001140:	f000 f826 	bl	8001190 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001144:	f000 f866 	bl	8001214 <Config_HSE>

  return;
 8001148:	bf00      	nop
}
 800114a:	bd80      	pop	{r7, pc}
 800114c:	58004000 	.word	0x58004000

08001150 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001154:	f000 f872 	bl	800123c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001158:	f000 f88a 	bl	8001270 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800115c:	4904      	ldr	r1, [pc, #16]	; (8001170 <MX_APPE_Init+0x20>)
 800115e:	2000      	movs	r0, #0
 8001160:	f000 f9e8 	bl	8001534 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001164:	f7ff fd91 	bl	8000c8a <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001168:	f000 f890 	bl	800128c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 800116c:	bf00      	nop
}
 800116e:	bd80      	pop	{r7, pc}
 8001170:	2000040c 	.word	0x2000040c

08001174 <Init_Smps>:

void Init_Smps(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001178:	bf00      	nop
}
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <Init_Exti>:

void Init_Exti(void)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001186:	2050      	movs	r0, #80	; 0x50
 8001188:	f7ff fe6e 	bl	8000e68 <LL_EXTI_EnableIT_32_63>

  return;
 800118c:	bf00      	nop
}
 800118e:	bd80      	pop	{r7, pc}

08001190 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8001194:	f000 f804 	bl	80011a0 <Reset_BackupDomain>

  Reset_IPCC();
 8001198:	f000 f81a 	bl	80011d0 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800119c:	bf00      	nop
}
 800119e:	bd80      	pop	{r7, pc}

080011a0 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80011a4:	f7ff fec8 	bl	8000f38 <LL_RCC_IsActiveFlag_PINRST>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00d      	beq.n	80011ca <Reset_BackupDomain+0x2a>
 80011ae:	f7ff fed6 	bl	8000f5e <LL_RCC_IsActiveFlag_SFTRST>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d108      	bne.n	80011ca <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80011b8:	f006 fc22 	bl	8007a00 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80011bc:	f006 fc20 	bl	8007a00 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80011c0:	f7ff fe98 	bl	8000ef4 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80011c4:	f7ff fea7 	bl	8000f16 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
}
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80011d4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80011d8:	f7ff fed4 	bl	8000f84 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80011dc:	213f      	movs	r1, #63	; 0x3f
 80011de:	480c      	ldr	r0, [pc, #48]	; (8001210 <Reset_IPCC+0x40>)
 80011e0:	f7ff ff4c 	bl	800107c <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80011e4:	213f      	movs	r1, #63	; 0x3f
 80011e6:	480a      	ldr	r0, [pc, #40]	; (8001210 <Reset_IPCC+0x40>)
 80011e8:	f7ff ff56 	bl	8001098 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80011ec:	213f      	movs	r1, #63	; 0x3f
 80011ee:	4808      	ldr	r0, [pc, #32]	; (8001210 <Reset_IPCC+0x40>)
 80011f0:	f7ff fefe 	bl	8000ff0 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80011f4:	213f      	movs	r1, #63	; 0x3f
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <Reset_IPCC+0x40>)
 80011f8:	f7ff ff1d 	bl	8001036 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80011fc:	213f      	movs	r1, #63	; 0x3f
 80011fe:	4804      	ldr	r0, [pc, #16]	; (8001210 <Reset_IPCC+0x40>)
 8001200:	f7ff ff08 	bl	8001014 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001204:	213f      	movs	r1, #63	; 0x3f
 8001206:	4802      	ldr	r0, [pc, #8]	; (8001210 <Reset_IPCC+0x40>)
 8001208:	f7ff ff27 	bl	800105a <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 800120c:	bf00      	nop
}
 800120e:	bd80      	pop	{r7, pc}
 8001210:	58000c00 	.word	0x58000c00

08001214 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800121a:	2000      	movs	r0, #0
 800121c:	f00f fdea 	bl	8010df4 <OTP_Read>
 8001220:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	799b      	ldrb	r3, [r3, #6]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fe2f 	bl	8000e90 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001232:	bf00      	nop
 8001234:	bf00      	nop
}
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <System_Init>:

static void System_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  Init_Smps();
 8001240:	f7ff ff98 	bl	8001174 <Init_Smps>

  Init_Exti();
 8001244:	f7ff ff9d 	bl	8001182 <Init_Exti>

  Init_Rtc();
 8001248:	f000 f802 	bl	8001250 <Init_Rtc>

  return;
 800124c:	bf00      	nop
}
 800124e:	bd80      	pop	{r7, pc}

08001250 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <Init_Rtc+0x1c>)
 8001256:	f7ff ff4a 	bl	80010ee <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800125a:	2100      	movs	r1, #0
 800125c:	4803      	ldr	r0, [pc, #12]	; (800126c <Init_Rtc+0x1c>)
 800125e:	f7ff ff56 	bl	800110e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001262:	4802      	ldr	r0, [pc, #8]	; (800126c <Init_Rtc+0x1c>)
 8001264:	f7ff ff36 	bl	80010d4 <LL_RTC_EnableWriteProtection>

  return;
 8001268:	bf00      	nop
}
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40002800 	.word	0x40002800

08001270 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001274:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001278:	f7ff fe28 	bl	8000ecc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800127c:	f012 f920 	bl	80134c0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001280:	2004      	movs	r0, #4
 8001282:	f7ff fddb 	bl	8000e3c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001286:	bf00      	nop
}
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001292:	f00f fb6d 	bl	8010970 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001296:	4a11      	ldr	r2, [pc, #68]	; (80012dc <appe_Tl_Init+0x50>)
 8001298:	2100      	movs	r1, #0
 800129a:	2080      	movs	r0, #128	; 0x80
 800129c:	f012 fa4e 	bl	801373c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <appe_Tl_Init+0x54>)
 80012a2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <appe_Tl_Init+0x58>)
 80012a6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80012a8:	463b      	mov	r3, r7
 80012aa:	4619      	mov	r1, r3
 80012ac:	480e      	ldr	r0, [pc, #56]	; (80012e8 <appe_Tl_Init+0x5c>)
 80012ae:	f00f fa25 	bl	80106fc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <appe_Tl_Init+0x60>)
 80012b4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <appe_Tl_Init+0x64>)
 80012b8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <appe_Tl_Init+0x68>)
 80012bc:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80012be:	f240 533c 	movw	r3, #1340	; 0x53c
 80012c2:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	4618      	mov	r0, r3
 80012ca:	f00f fc93 	bl	8010bf4 <TL_MM_Init>

  TL_Enable();
 80012ce:	f00f fb49 	bl	8010964 <TL_Enable>

  return;
 80012d2:	bf00      	nop
}
 80012d4:	3720      	adds	r7, #32
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	08010735 	.word	0x08010735
 80012e0:	20030734 	.word	0x20030734
 80012e4:	080012f9 	.word	0x080012f9
 80012e8:	08001311 	.word	0x08001311
 80012ec:	2003094c 	.word	0x2003094c
 80012f0:	20030840 	.word	0x20030840
 80012f4:	200301f8 	.word	0x200301f8

080012f8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001302:	bf00      	nop
}
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	330b      	adds	r3, #11
 800131e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	b29b      	uxth	r3, r3
 8001326:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800132a:	2b07      	cmp	r3, #7
 800132c:	d81f      	bhi.n	800136e <APPE_SysUserEvtRx+0x5e>
 800132e:	a201      	add	r2, pc, #4	; (adr r2, 8001334 <APPE_SysUserEvtRx+0x24>)
 8001330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001334:	08001355 	.word	0x08001355
 8001338:	08001367 	.word	0x08001367
 800133c:	0800136f 	.word	0x0800136f
 8001340:	0800136f 	.word	0x0800136f
 8001344:	0800136f 	.word	0x0800136f
 8001348:	0800136f 	.word	0x0800136f
 800134c:	0800136f 	.word	0x0800136f
 8001350:	0800136f 	.word	0x0800136f
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	4618      	mov	r0, r3
 800135a:	f00e ff8b 	bl	8010274 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f81b 	bl	800139a <APPE_SysEvtReadyProcessing>
    break;
 8001364:	e004      	b.n	8001370 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 f806 	bl	8001378 <APPE_SysEvtError>
    break;
 800136c:	e000      	b.n	8001370 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 800136e:	bf00      	nop
  }

  return;
 8001370:	bf00      	nop
}
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	330b      	adds	r3, #11
 8001386:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	3302      	adds	r3, #2
 800138c:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800138e:	bf00      	nop
}
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b08a      	sub	sp, #40	; 0x28
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	330b      	adds	r3, #11
 80013be:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	3302      	adds	r3, #2
 80013c4:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d11d      	bne.n	800140a <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80013ce:	f7ff fc6d 	bl	8000cac <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80013d2:	230f      	movs	r3, #15
 80013d4:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80013d6:	237f      	movs	r3, #127	; 0x7f
 80013d8:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80013da:	f7ff fdfb 	bl	8000fd4 <LL_DBGMCU_GetRevisionID>
 80013de:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80013e6:	f7ff fde7 	bl	8000fb8 <LL_DBGMCU_GetDeviceID>
 80013ea:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80013ec:	6a3b      	ldr	r3, [r7, #32]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	4618      	mov	r0, r3
 80013f8:	f00e ff26 	bl	8010248 <SHCI_C2_Config>

    APP_BLE_Init();
 80013fc:	f00f fe04 	bl	8011008 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001400:	2100      	movs	r1, #0
 8001402:	2001      	movs	r0, #1
 8001404:	f012 f86e 	bl	80134e4 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001408:	e007      	b.n	800141a <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d103      	bne.n	800141a <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
  return;
 8001418:	bf00      	nop
 800141a:	bf00      	nop
}
 800141c:	3728      	adds	r7, #40	; 0x28
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b084      	sub	sp, #16
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800142a:	f001 fc6f 	bl	8002d0c <HAL_GetTick>
 800142e:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800143a:	d00a      	beq.n	8001452 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800143c:	f001 fc7e 	bl	8002d3c <HAL_GetTickFreq>
 8001440:	4603      	mov	r3, r0
 8001442:	461a      	mov	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4413      	add	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800144a:	e002      	b.n	8001452 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800144c:	f7ff fe32 	bl	80010b4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8001450:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001452:	f001 fc5b 	bl	8002d0c <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	429a      	cmp	r2, r3
 8001460:	d8f4      	bhi.n	800144c <HAL_Delay+0x2a>
  }
}
 8001462:	bf00      	nop
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	f012 f866 	bl	8013544 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}

0800147c <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001480:	bf00      	nop
}
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f012 f854 	bl	8013544 <UTIL_SEQ_Run>

  return;
 800149c:	bf00      	nop
}
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80014ac:	2100      	movs	r1, #0
 80014ae:	2080      	movs	r0, #128	; 0x80
 80014b0:	f012 f966 	bl	8013780 <UTIL_SEQ_SetTask>
  return;
 80014b4:	bf00      	nop
}
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80014c4:	2002      	movs	r0, #2
 80014c6:	f012 f9c7 	bl	8013858 <UTIL_SEQ_SetEvt>
  return;
 80014ca:	bf00      	nop
}
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80014da:	2002      	movs	r0, #2
 80014dc:	f012 f9dc 	bl	8013898 <UTIL_SEQ_WaitEvt>
  return;
 80014e0:	bf00      	nop
}
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <LL_EXTI_EnableIT_0_31>:
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <LL_EXTI_EnableIT_0_31+0x24>)
 80014f2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80014f6:	4905      	ldr	r1, [pc, #20]	; (800150c <LL_EXTI_EnableIT_0_31+0x24>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	58000800 	.word	0x58000800

08001510 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4904      	ldr	r1, [pc, #16]	; (8001530 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4313      	orrs	r3, r2
 8001522:	600b      	str	r3, [r1, #0]

}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	58000800 	.word	0x58000800

08001534 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001540:	4b5e      	ldr	r3, [pc, #376]	; (80016bc <HW_TS_Init+0x188>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	22ca      	movs	r2, #202	; 0xca
 8001546:	625a      	str	r2, [r3, #36]	; 0x24
 8001548:	4b5c      	ldr	r3, [pc, #368]	; (80016bc <HW_TS_Init+0x188>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2253      	movs	r2, #83	; 0x53
 800154e:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001550:	4b5b      	ldr	r3, [pc, #364]	; (80016c0 <HW_TS_Init+0x18c>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	4a5a      	ldr	r2, [pc, #360]	; (80016c0 <HW_TS_Init+0x18c>)
 8001556:	f043 0320 	orr.w	r3, r3, #32
 800155a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800155c:	4b58      	ldr	r3, [pc, #352]	; (80016c0 <HW_TS_Init+0x18c>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	b2db      	uxtb	r3, r3
 8001568:	f1c3 0304 	rsb	r3, r3, #4
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4b55      	ldr	r3, [pc, #340]	; (80016c4 <HW_TS_Init+0x190>)
 8001570:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001572:	4b53      	ldr	r3, [pc, #332]	; (80016c0 <HW_TS_Init+0x18c>)
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800157a:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800157e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	fa92 f2a2 	rbit	r2, r2
 8001586:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	2a00      	cmp	r2, #0
 8001590:	d101      	bne.n	8001596 <HW_TS_Init+0x62>
  {
    return 32U;
 8001592:	2220      	movs	r2, #32
 8001594:	e003      	b.n	800159e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	fab2 f282 	clz	r2, r2
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	40d3      	lsrs	r3, r2
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	3301      	adds	r3, #1
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4b48      	ldr	r3, [pc, #288]	; (80016c8 <HW_TS_Init+0x194>)
 80015a8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80015aa:	4b45      	ldr	r3, [pc, #276]	; (80016c0 <HW_TS_Init+0x18c>)
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	3301      	adds	r3, #1
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	4b44      	ldr	r3, [pc, #272]	; (80016cc <HW_TS_Init+0x198>)
 80015bc:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80015be:	4b43      	ldr	r3, [pc, #268]	; (80016cc <HW_TS_Init+0x198>)
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	4a40      	ldr	r2, [pc, #256]	; (80016c8 <HW_TS_Init+0x194>)
 80015c6:	7812      	ldrb	r2, [r2, #0]
 80015c8:	fb02 f303 	mul.w	r3, r2, r3
 80015cc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80015d0:	4a3c      	ldr	r2, [pc, #240]	; (80016c4 <HW_TS_Init+0x190>)
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	40d3      	lsrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015de:	4293      	cmp	r3, r2
 80015e0:	d904      	bls.n	80015ec <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80015e2:	4b3b      	ldr	r3, [pc, #236]	; (80016d0 <HW_TS_Init+0x19c>)
 80015e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015e8:	801a      	strh	r2, [r3, #0]
 80015ea:	e003      	b.n	80015f4 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	4b37      	ldr	r3, [pc, #220]	; (80016d0 <HW_TS_Init+0x19c>)
 80015f2:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80015f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80015f8:	f7ff ff8a 	bl	8001510 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80015fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001600:	f7ff ff72 	bl	80014e8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d13d      	bne.n	8001686 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800160a:	4b32      	ldr	r3, [pc, #200]	; (80016d4 <HW_TS_Init+0x1a0>)
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001610:	4b31      	ldr	r3, [pc, #196]	; (80016d8 <HW_TS_Init+0x1a4>)
 8001612:	f04f 32ff 	mov.w	r2, #4294967295
 8001616:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001618:	2300      	movs	r3, #0
 800161a:	77fb      	strb	r3, [r7, #31]
 800161c:	e00c      	b.n	8001638 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800161e:	7ffa      	ldrb	r2, [r7, #31]
 8001620:	492e      	ldr	r1, [pc, #184]	; (80016dc <HW_TS_Init+0x1a8>)
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	440b      	add	r3, r1
 800162c:	330c      	adds	r3, #12
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001632:	7ffb      	ldrb	r3, [r7, #31]
 8001634:	3301      	adds	r3, #1
 8001636:	77fb      	strb	r3, [r7, #31]
 8001638:	7ffb      	ldrb	r3, [r7, #31]
 800163a:	2b05      	cmp	r3, #5
 800163c:	d9ef      	bls.n	800161e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800163e:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <HW_TS_Init+0x1ac>)
 8001640:	2206      	movs	r2, #6
 8001642:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001644:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <HW_TS_Init+0x188>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <HW_TS_Init+0x188>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001652:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001654:	4b19      	ldr	r3, [pc, #100]	; (80016bc <HW_TS_Init+0x188>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	4b17      	ldr	r3, [pc, #92]	; (80016bc <HW_TS_Init+0x188>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001664:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001666:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <HW_TS_Init+0x1b0>)
 8001668:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800166c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800166e:	2003      	movs	r0, #3
 8001670:	f002 ff2b 	bl	80044ca <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HW_TS_Init+0x188>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <HW_TS_Init+0x188>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	e009      	b.n	800169a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001686:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <HW_TS_Init+0x188>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001690:	2b00      	cmp	r3, #0
 8001692:	d002      	beq.n	800169a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001694:	2003      	movs	r0, #3
 8001696:	f002 ff0a 	bl	80044ae <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <HW_TS_Init+0x188>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	22ff      	movs	r2, #255	; 0xff
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80016a2:	2200      	movs	r2, #0
 80016a4:	2103      	movs	r1, #3
 80016a6:	2003      	movs	r0, #3
 80016a8:	f002 fecd 	bl	8004446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80016ac:	2003      	movs	r0, #3
 80016ae:	f002 fee4 	bl	800447a <HAL_NVIC_EnableIRQ>

  return;
 80016b2:	bf00      	nop
}
 80016b4:	3720      	adds	r7, #32
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000040c 	.word	0x2000040c
 80016c0:	40002800 	.word	0x40002800
 80016c4:	200002b1 	.word	0x200002b1
 80016c8:	200002b2 	.word	0x200002b2
 80016cc:	200002b4 	.word	0x200002b4
 80016d0:	200002b6 	.word	0x200002b6
 80016d4:	200002b0 	.word	0x200002b0
 80016d8:	200002ac 	.word	0x200002ac
 80016dc:	20000218 	.word	0x20000218
 80016e0:	200002a8 	.word	0x200002a8
 80016e4:	58000800 	.word	0x58000800

080016e8 <LL_RCC_LSE_SetDriveCapability>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80016f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f8:	f023 0218 	bic.w	r2, r3, #24
 80016fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4313      	orrs	r3, r2
 8001704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <LL_AHB1_GRP1_EnableClock>:
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800171c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001720:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001722:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4313      	orrs	r3, r2
 800172a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800172c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001730:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4013      	ands	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001738:	68fb      	ldr	r3, [r7, #12]
}
 800173a:	bf00      	nop
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <LL_AHB2_GRP1_EnableClock>:
{
 8001746:	b480      	push	{r7}
 8001748:	b085      	sub	sp, #20
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800174e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001752:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001754:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4313      	orrs	r3, r2
 800175c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800175e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001762:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4013      	ands	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800176a:	68fb      	ldr	r3, [r7, #12]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800177c:	f001 fa58 	bl	8002c30 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001780:	f7ff fcd8 	bl	8001134 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001784:	f000 f822 	bl	80017cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001788:	f000 f894 	bl	80018b4 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800178c:	f000 f968 	bl	8001a60 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001790:	f000 fa3e 	bl	8001c10 <MX_GPIO_Init>
  MX_DMA_Init();
 8001794:	f000 fa2a 	bl	8001bec <MX_DMA_Init>
  MX_USB_Device_Init();
 8001798:	f011 f956 	bl	8012a48 <MX_USB_Device_Init>
  MX_ADC1_Init();
 800179c:	f000 f8aa 	bl	80018f4 <MX_ADC1_Init>
  MX_I2C1_Init();
 80017a0:	f000 f91e 	bl	80019e0 <MX_I2C1_Init>
  MX_RTC_Init();
 80017a4:	f000 f978 	bl	8001a98 <MX_RTC_Init>
  MX_TIM2_Init();
 80017a8:	f000 f9aa 	bl	8001b00 <MX_TIM2_Init>
  MX_RF_Init();
 80017ac:	f000 f96c 	bl	8001a88 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, MT3608_EN_Pin, GPIO_PIN_SET); 	/*Toggle 5V rail*/
 80017b0:	2201      	movs	r2, #1
 80017b2:	2140      	movs	r1, #64	; 0x40
 80017b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b8:	f003 faea 	bl	8004d90 <HAL_GPIO_WritePin>
  SSD1306_Init();											/*Init OLED Screen*/
 80017bc:	f000 fbfe 	bl	8001fbc <SSD1306_Init>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80017c0:	f7ff fcc6 	bl	8001150 <MX_APPE_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80017c4:	f7ff fe52 	bl	800146c <MX_APPE_Process>
 80017c8:	e7fc      	b.n	80017c4 <main+0x4c>
	...

080017cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b09a      	sub	sp, #104	; 0x68
 80017d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d2:	f107 0320 	add.w	r3, r7, #32
 80017d6:	2248      	movs	r2, #72	; 0x48
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f012 f97c 	bl	8013ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]
 80017ee:	615a      	str	r2, [r3, #20]
 80017f0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80017f2:	f006 f905 	bl	8007a00 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f7ff ff76 	bl	80016e8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017fc:	4b2c      	ldr	r3, [pc, #176]	; (80018b0 <SystemClock_Config+0xe4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001804:	4a2a      	ldr	r2, [pc, #168]	; (80018b0 <SystemClock_Config+0xe4>)
 8001806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <SystemClock_Config+0xe4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001818:	2327      	movs	r3, #39	; 0x27
 800181a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800181c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001822:	2301      	movs	r3, #1
 8001824:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800182c:	2301      	movs	r3, #1
 800182e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001830:	2340      	movs	r3, #64	; 0x40
 8001832:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001834:	2300      	movs	r3, #0
 8001836:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001838:	2360      	movs	r3, #96	; 0x60
 800183a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800183c:	2302      	movs	r3, #2
 800183e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001840:	2301      	movs	r3, #1
 8001842:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001848:	2318      	movs	r3, #24
 800184a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV24;
 800184c:	f44f 1338 	mov.w	r3, #3014656	; 0x2e0000
 8001850:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001852:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001856:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001858:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800185c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800185e:	f107 0320 	add.w	r3, r7, #32
 8001862:	4618      	mov	r0, r3
 8001864:	f006 fc58 	bl	8008118 <HAL_RCC_OscConfig>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800186e:	f000 fa61 	bl	8001d34 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001872:	236f      	movs	r3, #111	; 0x6f
 8001874:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001876:	2302      	movs	r3, #2
 8001878:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001886:	2300      	movs	r3, #0
 8001888:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2101      	movs	r1, #1
 8001892:	4618      	mov	r0, r3
 8001894:	f006 ffb4 	bl	8008800 <HAL_RCC_ClockConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800189e:	f000 fa49 	bl	8001d34 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80018a2:	f007 fd43 	bl	800932c <HAL_RCCEx_EnableMSIPLLMode>
}
 80018a6:	bf00      	nop
 80018a8:	3768      	adds	r7, #104	; 0x68
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	58000400 	.word	0x58000400

080018b4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b094      	sub	sp, #80	; 0x50
 80018b8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018ba:	463b      	mov	r3, r7
 80018bc:	2250      	movs	r2, #80	; 0x50
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f012 f909 	bl	8013ad8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80018c6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80018ca:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80018cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018d0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80018d2:	2300      	movs	r3, #0
 80018d4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80018d6:	2310      	movs	r3, #16
 80018d8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018da:	463b      	mov	r3, r7
 80018dc:	4618      	mov	r0, r3
 80018de:	f007 fbaf 	bl	8009040 <HAL_RCCEx_PeriphCLKConfig>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80018e8:	f000 fa24 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80018ec:	bf00      	nop
 80018ee:	3750      	adds	r7, #80	; 0x50
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018fa:	463b      	mov	r3, r7
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
 8001908:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800190a:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <MX_ADC1_Init+0xdc>)
 800190c:	4a31      	ldr	r2, [pc, #196]	; (80019d4 <MX_ADC1_Init+0xe0>)
 800190e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001910:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <MX_ADC1_Init+0xdc>)
 8001912:	2200      	movs	r2, #0
 8001914:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001916:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <MX_ADC1_Init+0xdc>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800191c:	4b2c      	ldr	r3, [pc, #176]	; (80019d0 <MX_ADC1_Init+0xdc>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001922:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <MX_ADC1_Init+0xdc>)
 8001924:	2201      	movs	r2, #1
 8001926:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001928:	4b29      	ldr	r3, [pc, #164]	; (80019d0 <MX_ADC1_Init+0xdc>)
 800192a:	2204      	movs	r2, #4
 800192c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800192e:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <MX_ADC1_Init+0xdc>)
 8001930:	2200      	movs	r2, #0
 8001932:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001934:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <MX_ADC1_Init+0xdc>)
 8001936:	2200      	movs	r2, #0
 8001938:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800193a:	4b25      	ldr	r3, [pc, #148]	; (80019d0 <MX_ADC1_Init+0xdc>)
 800193c:	2202      	movs	r2, #2
 800193e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001940:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <MX_ADC1_Init+0xdc>)
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001948:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <MX_ADC1_Init+0xdc>)
 800194a:	2200      	movs	r2, #0
 800194c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800194e:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <MX_ADC1_Init+0xdc>)
 8001950:	2200      	movs	r2, #0
 8001952:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001954:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <MX_ADC1_Init+0xdc>)
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800195c:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <MX_ADC1_Init+0xdc>)
 800195e:	2200      	movs	r2, #0
 8001960:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001962:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <MX_ADC1_Init+0xdc>)
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800196a:	4819      	ldr	r0, [pc, #100]	; (80019d0 <MX_ADC1_Init+0xdc>)
 800196c:	f001 fc14 	bl	8003198 <HAL_ADC_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001976:	f000 f9dd 	bl	8001d34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800197a:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <MX_ADC1_Init+0xe4>)
 800197c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800197e:	2306      	movs	r3, #6
 8001980:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001986:	237f      	movs	r3, #127	; 0x7f
 8001988:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800198a:	2304      	movs	r3, #4
 800198c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001992:	463b      	mov	r3, r7
 8001994:	4619      	mov	r1, r3
 8001996:	480e      	ldr	r0, [pc, #56]	; (80019d0 <MX_ADC1_Init+0xdc>)
 8001998:	f001 fe4e 	bl	8003638 <HAL_ADC_ConfigChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80019a2:	f000 f9c7 	bl	8001d34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80019a6:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <MX_ADC1_Init+0xe8>)
 80019a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80019aa:	230c      	movs	r3, #12
 80019ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80019ae:	2307      	movs	r3, #7
 80019b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019b2:	463b      	mov	r3, r7
 80019b4:	4619      	mov	r1, r3
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <MX_ADC1_Init+0xdc>)
 80019b8:	f001 fe3e 	bl	8003638 <HAL_ADC_ConfigChannel>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80019c2:	f000 f9b7 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200002b8 	.word	0x200002b8
 80019d4:	50040000 	.word	0x50040000
 80019d8:	32601000 	.word	0x32601000
 80019dc:	19200040 	.word	0x19200040

080019e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <MX_I2C1_Init+0x74>)
 80019e6:	4a1c      	ldr	r2, [pc, #112]	; (8001a58 <MX_I2C1_Init+0x78>)
 80019e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <MX_I2C1_Init+0x74>)
 80019ec:	4a1b      	ldr	r2, [pc, #108]	; (8001a5c <MX_I2C1_Init+0x7c>)
 80019ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019f0:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <MX_I2C1_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019f6:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <MX_I2C1_Init+0x74>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019fc:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <MX_I2C1_Init+0x74>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a02:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <MX_I2C1_Init+0x74>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <MX_I2C1_Init+0x74>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <MX_I2C1_Init+0x74>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <MX_I2C1_Init+0x74>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a1a:	480e      	ldr	r0, [pc, #56]	; (8001a54 <MX_I2C1_Init+0x74>)
 8001a1c:	f003 fa0c 	bl	8004e38 <HAL_I2C_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a26:	f000 f985 	bl	8001d34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4809      	ldr	r0, [pc, #36]	; (8001a54 <MX_I2C1_Init+0x74>)
 8001a2e:	f004 f985 	bl	8005d3c <HAL_I2CEx_ConfigAnalogFilter>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a38:	f000 f97c 	bl	8001d34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <MX_I2C1_Init+0x74>)
 8001a40:	f004 f9c7 	bl	8005dd2 <HAL_I2CEx_ConfigDigitalFilter>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a4a:	f000 f973 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	2000037c 	.word	0x2000037c
 8001a58:	40005400 	.word	0x40005400
 8001a5c:	0010061a 	.word	0x0010061a

08001a60 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <MX_IPCC_Init+0x20>)
 8001a66:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <MX_IPCC_Init+0x24>)
 8001a68:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001a6a:	4805      	ldr	r0, [pc, #20]	; (8001a80 <MX_IPCC_Init+0x20>)
 8001a6c:	f004 f9fe 	bl	8005e6c <HAL_IPCC_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001a76:	f000 f95d 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200003d0 	.word	0x200003d0
 8001a84:	58000c00 	.word	0x58000c00

08001a88 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a9c:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <MX_RTC_Init+0x60>)
 8001a9e:	4a17      	ldr	r2, [pc, #92]	; (8001afc <MX_RTC_Init+0x64>)
 8001aa0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <MX_RTC_Init+0x60>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <MX_RTC_Init+0x60>)
 8001aaa:	220f      	movs	r2, #15
 8001aac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <MX_RTC_Init+0x60>)
 8001ab0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001ab4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <MX_RTC_Init+0x60>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001abc:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <MX_RTC_Init+0x60>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <MX_RTC_Init+0x60>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <MX_RTC_Init+0x60>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ace:	480a      	ldr	r0, [pc, #40]	; (8001af8 <MX_RTC_Init+0x60>)
 8001ad0:	f007 fd44 	bl	800955c <HAL_RTC_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001ada:	f000 f92b 	bl	8001d34 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_RTC_Init+0x60>)
 8001ae4:	f007 fe3a 	bl	800975c <HAL_RTCEx_SetWakeUpTimer>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001aee:	f000 f921 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	2000040c 	.word	0x2000040c
 8001afc:	40002800 	.word	0x40002800

08001b00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08e      	sub	sp, #56	; 0x38
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b14:	f107 031c 	add.w	r3, r7, #28
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b20:	463b      	mov	r3, r7
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
 8001b2c:	611a      	str	r2, [r3, #16]
 8001b2e:	615a      	str	r2, [r3, #20]
 8001b30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b32:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <MX_TIM2_Init+0xe8>)
 8001b34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b3a:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <MX_TIM2_Init+0xe8>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b40:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <MX_TIM2_Init+0xe8>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b46:	4b28      	ldr	r3, [pc, #160]	; (8001be8 <MX_TIM2_Init+0xe8>)
 8001b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4e:	4b26      	ldr	r3, [pc, #152]	; (8001be8 <MX_TIM2_Init+0xe8>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b54:	4b24      	ldr	r3, [pc, #144]	; (8001be8 <MX_TIM2_Init+0xe8>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b5a:	4823      	ldr	r0, [pc, #140]	; (8001be8 <MX_TIM2_Init+0xe8>)
 8001b5c:	f007 fe99 	bl	8009892 <HAL_TIM_Base_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001b66:	f000 f8e5 	bl	8001d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b74:	4619      	mov	r1, r3
 8001b76:	481c      	ldr	r0, [pc, #112]	; (8001be8 <MX_TIM2_Init+0xe8>)
 8001b78:	f008 f9ba 	bl	8009ef0 <HAL_TIM_ConfigClockSource>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001b82:	f000 f8d7 	bl	8001d34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b86:	4818      	ldr	r0, [pc, #96]	; (8001be8 <MX_TIM2_Init+0xe8>)
 8001b88:	f007 feda 	bl	8009940 <HAL_TIM_PWM_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001b92:	f000 f8cf 	bl	8001d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b9e:	f107 031c 	add.w	r3, r7, #28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4810      	ldr	r0, [pc, #64]	; (8001be8 <MX_TIM2_Init+0xe8>)
 8001ba6:	f008 fe11 	bl	800a7cc <HAL_TIMEx_MasterConfigSynchronization>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001bb0:	f000 f8c0 	bl	8001d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb4:	2360      	movs	r3, #96	; 0x60
 8001bb6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bc4:	463b      	mov	r3, r7
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4807      	ldr	r0, [pc, #28]	; (8001be8 <MX_TIM2_Init+0xe8>)
 8001bcc:	f008 f87c 	bl	8009cc8 <HAL_TIM_PWM_ConfigChannel>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001bd6:	f000 f8ad 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bda:	4803      	ldr	r0, [pc, #12]	; (8001be8 <MX_TIM2_Init+0xe8>)
 8001bdc:	f000 fe3a 	bl	8002854 <HAL_TIM_MspPostInit>

}
 8001be0:	bf00      	nop
 8001be2:	3738      	adds	r7, #56	; 0x38
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000430 	.word	0x20000430

08001bec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001bf0:	2004      	movs	r0, #4
 8001bf2:	f7ff fd8f 	bl	8001714 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	f7ff fd8c 	bl	8001714 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2100      	movs	r1, #0
 8001c00:	200b      	movs	r0, #11
 8001c02:	f002 fc20 	bl	8004446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c06:	200b      	movs	r0, #11
 8001c08:	f002 fc37 	bl	800447a <HAL_NVIC_EnableIRQ>

}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c24:	2004      	movs	r0, #4
 8001c26:	f7ff fd8e 	bl	8001746 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f7ff fd8b 	bl	8001746 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c30:	2002      	movs	r0, #2
 8001c32:	f7ff fd88 	bl	8001746 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c36:	2010      	movs	r0, #16
 8001c38:	f7ff fd85 	bl	8001746 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RGB_RED_Pin|RGB_BLUE_Pin|RGB_GREEN_Pin|MT3608_EN_Pin
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f240 415c 	movw	r1, #1116	; 0x45c
 8001c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c46:	f003 f8a3 	bl	8004d90 <HAL_GPIO_WritePin>
                          |LED_WP7_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_SHT31_GPIO_Port, RESET_SHT31_Pin, GPIO_PIN_SET);
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	2120      	movs	r1, #32
 8001c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c52:	f003 f89d 	bl	8004d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_4273_EN_Pin|LED_4261_EN_Pin, GPIO_PIN_RESET);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2130      	movs	r1, #48	; 0x30
 8001c5a:	4827      	ldr	r0, [pc, #156]	; (8001cf8 <MX_GPIO_Init+0xe8>)
 8001c5c:	f003 f898 	bl	8004d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RGB_RED_Pin RGB_BLUE_Pin RGB_GREEN_Pin RESET_SHT31_Pin
                           MT3608_EN_Pin LED_WP7_EN_Pin */
  GPIO_InitStruct.Pin = RGB_RED_Pin|RGB_BLUE_Pin|RGB_GREEN_Pin|RESET_SHT31_Pin
 8001c60:	f240 437c 	movw	r3, #1148	; 0x47c
 8001c64:	607b      	str	r3, [r7, #4]
                          |MT3608_EN_Pin|LED_WP7_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c66:	2301      	movs	r3, #1
 8001c68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	4619      	mov	r1, r3
 8001c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c7a:	f002 ff09 	bl	8004a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : BATT_STAT_Pin */
  GPIO_InitStruct.Pin = BATT_STAT_Pin;
 8001c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c84:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BATT_STAT_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	4619      	mov	r1, r3
 8001c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c96:	f002 fefb 	bl	8004a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTT_BT_Pin BUTT_1_Pin */
  GPIO_InitStruct.Pin = BUTT_BT_Pin|BUTT_1_Pin;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4813      	ldr	r0, [pc, #76]	; (8001cf8 <MX_GPIO_Init+0xe8>)
 8001cac:	f002 fef0 	bl	8004a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTT_2_Pin */
  GPIO_InitStruct.Pin = BUTT_2_Pin;
 8001cb0:	2310      	movs	r3, #16
 8001cb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTT_2_GPIO_Port, &GPIO_InitStruct);
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	480e      	ldr	r0, [pc, #56]	; (8001cfc <MX_GPIO_Init+0xec>)
 8001cc2:	f002 fee5 	bl	8004a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_4273_EN_Pin LED_4261_EN_Pin */
  GPIO_InitStruct.Pin = LED_4273_EN_Pin|LED_4261_EN_Pin;
 8001cc6:	2330      	movs	r3, #48	; 0x30
 8001cc8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4807      	ldr	r0, [pc, #28]	; (8001cf8 <MX_GPIO_Init+0xe8>)
 8001cdc:	f002 fed8 	bl	8004a90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2017      	movs	r0, #23
 8001ce6:	f002 fbae 	bl	8004446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cea:	2017      	movs	r0, #23
 8001cec:	f002 fbc5 	bl	800447a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cf0:	bf00      	nop
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	48000400 	.word	0x48000400
 8001cfc:	48001000 	.word	0x48001000

08001d00 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	80fb      	strh	r3, [r7, #6]
	while(GPIO_Pin == BATT_STAT_Pin)
 8001d0a:	e008      	b.n	8001d1e <HAL_GPIO_EXTI_Callback+0x1e>
	{
		battery_completed = 1;
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <HAL_GPIO_EXTI_Callback+0x30>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, RGB_GREEN_Pin, GPIO_PIN_SET);
 8001d12:	2201      	movs	r2, #1
 8001d14:	2110      	movs	r1, #16
 8001d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1a:	f003 f839 	bl	8004d90 <HAL_GPIO_WritePin>
	while(GPIO_Pin == BATT_STAT_Pin)
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d24:	d0f2      	beq.n	8001d0c <HAL_GPIO_EXTI_Callback+0xc>
	}

}
 8001d26:	bf00      	nop
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	2000047c 	.word	0x2000047c

08001d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d38:	b672      	cpsid	i
}
 8001d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, RGB_RED_Pin, GPIO_PIN_SET);
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	2104      	movs	r1, #4
 8001d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d44:	f003 f824 	bl	8004d90 <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 8001d48:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d4c:	f7ff fb69 	bl	8001422 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, RGB_RED_Pin, GPIO_PIN_RESET);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2104      	movs	r1, #4
 8001d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d58:	f003 f81a 	bl	8004d90 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, RGB_RED_Pin, GPIO_PIN_SET);
 8001d5c:	e7ee      	b.n	8001d3c <Error_Handler+0x8>

08001d5e <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b087      	sub	sp, #28
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8001d68:	23ff      	movs	r3, #255	; 0xff
 8001d6a:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	e020      	b.n	8001db4 <calculate_crc+0x56>
		crc ^= data[i];
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4413      	add	r3, r2
 8001d78:	781a      	ldrb	r2, [r3, #0]
 8001d7a:	7dfb      	ldrb	r3, [r7, #23]
 8001d7c:	4053      	eors	r3, r2
 8001d7e:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	e010      	b.n	8001da8 <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 8001d86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	da06      	bge.n	8001d9c <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001d98:	75fb      	strb	r3, [r7, #23]
 8001d9a:	e002      	b.n	8001da2 <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8001d9c:	7dfb      	ldrb	r3, [r7, #23]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3301      	adds	r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b07      	cmp	r3, #7
 8001dac:	d9eb      	bls.n	8001d86 <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	3301      	adds	r3, #1
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d3da      	bcc.n	8001d72 <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8001dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	371c      	adds	r7, #28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af02      	add	r7, sp, #8
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 8001dd6:	887b      	ldrh	r3, [r7, #2]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	733b      	strb	r3, [r7, #12]
 8001de0:	887b      	ldrh	r3, [r7, #2]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	889b      	ldrh	r3, [r3, #4]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	b299      	uxth	r1, r3
 8001df2:	f107 020c 	add.w	r2, r7, #12
 8001df6:	231e      	movs	r3, #30
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	f003 f8ac 	bl	8004f58 <HAL_I2C_Master_Transmit>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e000      	b.n	8001e0c <sht3x_send_command+0x42>
	}

	return true;
 8001e0a:	2301      	movs	r3, #1
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <uint8_to_uint16>:


static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	460a      	mov	r2, r1
 8001e1e:	71fb      	strb	r3, [r7, #7]
 8001e20:	4613      	mov	r3, r2
 8001e22:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	021b      	lsls	r3, r3, #8
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	79bb      	ldrb	r3, [r7, #6]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	4313      	orrs	r3, r2
 8001e32:	b29b      	uxth	r3, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <sht3x_init>:


bool sht3x_init(sht3x_handle_t *handle)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af04      	add	r7, sp, #16
 8001e46:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d005      	beq.n	8001e5e <sht3x_init+0x1e>
 8001e52:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <sht3x_init+0x74>)
 8001e54:	4a18      	ldr	r2, [pc, #96]	; (8001eb8 <sht3x_init+0x78>)
 8001e56:	213a      	movs	r1, #58	; 0x3a
 8001e58:	4818      	ldr	r0, [pc, #96]	; (8001ebc <sht3x_init+0x7c>)
 8001e5a:	f011 fdb1 	bl	80139c0 <__assert_func>

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	889b      	ldrh	r3, [r3, #4]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	b299      	uxth	r1, r3
 8001e6a:	231e      	movs	r3, #30
 8001e6c:	9302      	str	r3, [sp, #8]
 8001e6e:	2303      	movs	r3, #3
 8001e70:	9301      	str	r3, [sp, #4]
 8001e72:	f107 030c 	add.w	r3, r7, #12
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	2302      	movs	r3, #2
 8001e7a:	f24f 322d 	movw	r2, #62253	; 0xf32d
 8001e7e:	f003 fa55 	bl	800532c <HAL_I2C_Mem_Read>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e00e      	b.n	8001eaa <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2102      	movs	r1, #2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff63 	bl	8001d5e <calculate_crc>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8001e9c:	7bbb      	ldrb	r3, [r7, #14]
 8001e9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d001      	beq.n	8001ea8 <sht3x_init+0x68>
		return false;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	e000      	b.n	8001eaa <sht3x_init+0x6a>
	}

	return true;
 8001ea8:	2301      	movs	r3, #1
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	0801659c 	.word	0x0801659c
 8001eb8:	080170ac 	.word	0x080170ac
 8001ebc:	080165dc 	.word	0x080165dc

08001ec0 <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af02      	add	r7, sp, #8
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 8001ecc:	f642 4106 	movw	r1, #11270	; 0x2c06
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f7ff ff7a 	bl	8001dca <sht3x_send_command>

	HAL_Delay(1);
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f7ff faa3 	bl	8001422 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	889b      	ldrh	r3, [r3, #4]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	b299      	uxth	r1, r3
 8001ee8:	f107 0214 	add.w	r2, r7, #20
 8001eec:	231e      	movs	r3, #30
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	2306      	movs	r3, #6
 8001ef2:	f003 f925 	bl	8005140 <HAL_I2C_Master_Receive>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <sht3x_read_temperature_and_humidity+0x40>
		return false;
 8001efc:	2300      	movs	r3, #0
 8001efe:	e050      	b.n	8001fa2 <sht3x_read_temperature_and_humidity+0xe2>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	2102      	movs	r1, #2
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ff29 	bl	8001d5e <calculate_crc>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	3303      	adds	r3, #3
 8001f16:	2102      	movs	r1, #2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff20 	bl	8001d5e <calculate_crc>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8001f22:	7dbb      	ldrb	r3, [r7, #22]
 8001f24:	7ffa      	ldrb	r2, [r7, #31]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d103      	bne.n	8001f32 <sht3x_read_temperature_and_humidity+0x72>
 8001f2a:	7e7b      	ldrb	r3, [r7, #25]
 8001f2c:	7fba      	ldrb	r2, [r7, #30]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d001      	beq.n	8001f36 <sht3x_read_temperature_and_humidity+0x76>
		return false;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e035      	b.n	8001fa2 <sht3x_read_temperature_and_humidity+0xe2>
	}

	int16_t temperature_raw = (int16_t)uint8_to_uint16(buffer[0], buffer[1]);
 8001f36:	7d3b      	ldrb	r3, [r7, #20]
 8001f38:	7d7a      	ldrb	r2, [r7, #21]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff69 	bl	8001e14 <uint8_to_uint16>
 8001f42:	4603      	mov	r3, r0
 8001f44:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 8001f46:	7dfb      	ldrb	r3, [r7, #23]
 8001f48:	7e3a      	ldrb	r2, [r7, #24]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff61 	bl	8001e14 <uint8_to_uint16>
 8001f52:	4603      	mov	r3, r0
 8001f54:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * temperature_raw / 65535.0f;
 8001f56:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f5a:	ee07 3a90 	vmov	s15, r3
 8001f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f62:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001fac <sht3x_read_temperature_and_humidity+0xec>
 8001f66:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f6a:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001fb0 <sht3x_read_temperature_and_humidity+0xf0>
 8001f6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f72:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001fb4 <sht3x_read_temperature_and_humidity+0xf4>
 8001f76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * humidity_raw / 65535.0f;
 8001f80:	8b7b      	ldrh	r3, [r7, #26]
 8001f82:	ee07 3a90 	vmov	s15, r3
 8001f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f8a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001fb8 <sht3x_read_temperature_and_humidity+0xf8>
 8001f8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f92:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001fb0 <sht3x_read_temperature_and_humidity+0xf0>
 8001f96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	edc3 7a00 	vstr	s15, [r3]

	return true;
 8001fa0:	2301      	movs	r3, #1
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3720      	adds	r7, #32
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	432f0000 	.word	0x432f0000
 8001fb0:	477fff00 	.word	0x477fff00
 8001fb4:	42340000 	.word	0x42340000
 8001fb8:	42c80000 	.word	0x42c80000

08001fbc <SSD1306_Init>:
}




uint8_t SSD1306_Init(void) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001fc2:	f000 fa29 	bl	8002418 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001fc6:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001fca:	2201      	movs	r2, #1
 8001fcc:	2178      	movs	r1, #120	; 0x78
 8001fce:	485b      	ldr	r0, [pc, #364]	; (800213c <SSD1306_Init+0x180>)
 8001fd0:	f003 fac6 	bl	8005560 <HAL_I2C_IsDeviceReady>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e0a9      	b.n	8002132 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001fde:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001fe2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001fe4:	e002      	b.n	8001fec <SSD1306_Init+0x30>
		p--;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f9      	bne.n	8001fe6 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001ff2:	22ae      	movs	r2, #174	; 0xae
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	2078      	movs	r0, #120	; 0x78
 8001ff8:	f000 fa8a 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001ffc:	2220      	movs	r2, #32
 8001ffe:	2100      	movs	r1, #0
 8002000:	2078      	movs	r0, #120	; 0x78
 8002002:	f000 fa85 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002006:	2210      	movs	r2, #16
 8002008:	2100      	movs	r1, #0
 800200a:	2078      	movs	r0, #120	; 0x78
 800200c:	f000 fa80 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002010:	22b0      	movs	r2, #176	; 0xb0
 8002012:	2100      	movs	r1, #0
 8002014:	2078      	movs	r0, #120	; 0x78
 8002016:	f000 fa7b 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800201a:	22c8      	movs	r2, #200	; 0xc8
 800201c:	2100      	movs	r1, #0
 800201e:	2078      	movs	r0, #120	; 0x78
 8002020:	f000 fa76 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002024:	2200      	movs	r2, #0
 8002026:	2100      	movs	r1, #0
 8002028:	2078      	movs	r0, #120	; 0x78
 800202a:	f000 fa71 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800202e:	2210      	movs	r2, #16
 8002030:	2100      	movs	r1, #0
 8002032:	2078      	movs	r0, #120	; 0x78
 8002034:	f000 fa6c 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002038:	2240      	movs	r2, #64	; 0x40
 800203a:	2100      	movs	r1, #0
 800203c:	2078      	movs	r0, #120	; 0x78
 800203e:	f000 fa67 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002042:	2281      	movs	r2, #129	; 0x81
 8002044:	2100      	movs	r1, #0
 8002046:	2078      	movs	r0, #120	; 0x78
 8002048:	f000 fa62 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800204c:	22ff      	movs	r2, #255	; 0xff
 800204e:	2100      	movs	r1, #0
 8002050:	2078      	movs	r0, #120	; 0x78
 8002052:	f000 fa5d 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002056:	22a1      	movs	r2, #161	; 0xa1
 8002058:	2100      	movs	r1, #0
 800205a:	2078      	movs	r0, #120	; 0x78
 800205c:	f000 fa58 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002060:	22a6      	movs	r2, #166	; 0xa6
 8002062:	2100      	movs	r1, #0
 8002064:	2078      	movs	r0, #120	; 0x78
 8002066:	f000 fa53 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800206a:	22a8      	movs	r2, #168	; 0xa8
 800206c:	2100      	movs	r1, #0
 800206e:	2078      	movs	r0, #120	; 0x78
 8002070:	f000 fa4e 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002074:	223f      	movs	r2, #63	; 0x3f
 8002076:	2100      	movs	r1, #0
 8002078:	2078      	movs	r0, #120	; 0x78
 800207a:	f000 fa49 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800207e:	22a4      	movs	r2, #164	; 0xa4
 8002080:	2100      	movs	r1, #0
 8002082:	2078      	movs	r0, #120	; 0x78
 8002084:	f000 fa44 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002088:	22d3      	movs	r2, #211	; 0xd3
 800208a:	2100      	movs	r1, #0
 800208c:	2078      	movs	r0, #120	; 0x78
 800208e:	f000 fa3f 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002092:	2200      	movs	r2, #0
 8002094:	2100      	movs	r1, #0
 8002096:	2078      	movs	r0, #120	; 0x78
 8002098:	f000 fa3a 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800209c:	22d5      	movs	r2, #213	; 0xd5
 800209e:	2100      	movs	r1, #0
 80020a0:	2078      	movs	r0, #120	; 0x78
 80020a2:	f000 fa35 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80020a6:	22f0      	movs	r2, #240	; 0xf0
 80020a8:	2100      	movs	r1, #0
 80020aa:	2078      	movs	r0, #120	; 0x78
 80020ac:	f000 fa30 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80020b0:	22d9      	movs	r2, #217	; 0xd9
 80020b2:	2100      	movs	r1, #0
 80020b4:	2078      	movs	r0, #120	; 0x78
 80020b6:	f000 fa2b 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80020ba:	2222      	movs	r2, #34	; 0x22
 80020bc:	2100      	movs	r1, #0
 80020be:	2078      	movs	r0, #120	; 0x78
 80020c0:	f000 fa26 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80020c4:	22da      	movs	r2, #218	; 0xda
 80020c6:	2100      	movs	r1, #0
 80020c8:	2078      	movs	r0, #120	; 0x78
 80020ca:	f000 fa21 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80020ce:	2212      	movs	r2, #18
 80020d0:	2100      	movs	r1, #0
 80020d2:	2078      	movs	r0, #120	; 0x78
 80020d4:	f000 fa1c 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80020d8:	22db      	movs	r2, #219	; 0xdb
 80020da:	2100      	movs	r1, #0
 80020dc:	2078      	movs	r0, #120	; 0x78
 80020de:	f000 fa17 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80020e2:	2220      	movs	r2, #32
 80020e4:	2100      	movs	r1, #0
 80020e6:	2078      	movs	r0, #120	; 0x78
 80020e8:	f000 fa12 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80020ec:	228d      	movs	r2, #141	; 0x8d
 80020ee:	2100      	movs	r1, #0
 80020f0:	2078      	movs	r0, #120	; 0x78
 80020f2:	f000 fa0d 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80020f6:	2214      	movs	r2, #20
 80020f8:	2100      	movs	r1, #0
 80020fa:	2078      	movs	r0, #120	; 0x78
 80020fc:	f000 fa08 	bl	8002510 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002100:	22af      	movs	r2, #175	; 0xaf
 8002102:	2100      	movs	r1, #0
 8002104:	2078      	movs	r0, #120	; 0x78
 8002106:	f000 fa03 	bl	8002510 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800210a:	222e      	movs	r2, #46	; 0x2e
 800210c:	2100      	movs	r1, #0
 800210e:	2078      	movs	r0, #120	; 0x78
 8002110:	f000 f9fe 	bl	8002510 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002114:	2000      	movs	r0, #0
 8002116:	f000 f843 	bl	80021a0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800211a:	f000 f813 	bl	8002144 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800211e:	4b08      	ldr	r3, [pc, #32]	; (8002140 <SSD1306_Init+0x184>)
 8002120:	2200      	movs	r2, #0
 8002122:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <SSD1306_Init+0x184>)
 8002126:	2200      	movs	r2, #0
 8002128:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800212a:	4b05      	ldr	r3, [pc, #20]	; (8002140 <SSD1306_Init+0x184>)
 800212c:	2201      	movs	r2, #1
 800212e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8002130:	2301      	movs	r3, #1
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	2000037c 	.word	0x2000037c
 8002140:	20000880 	.word	0x20000880

08002144 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800214a:	2300      	movs	r3, #0
 800214c:	71fb      	strb	r3, [r7, #7]
 800214e:	e01d      	b.n	800218c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	3b50      	subs	r3, #80	; 0x50
 8002154:	b2db      	uxtb	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	2100      	movs	r1, #0
 800215a:	2078      	movs	r0, #120	; 0x78
 800215c:	f000 f9d8 	bl	8002510 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002160:	2200      	movs	r2, #0
 8002162:	2100      	movs	r1, #0
 8002164:	2078      	movs	r0, #120	; 0x78
 8002166:	f000 f9d3 	bl	8002510 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800216a:	2210      	movs	r2, #16
 800216c:	2100      	movs	r1, #0
 800216e:	2078      	movs	r0, #120	; 0x78
 8002170:	f000 f9ce 	bl	8002510 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	01db      	lsls	r3, r3, #7
 8002178:	4a08      	ldr	r2, [pc, #32]	; (800219c <SSD1306_UpdateScreen+0x58>)
 800217a:	441a      	add	r2, r3
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	2140      	movs	r1, #64	; 0x40
 8002180:	2078      	movs	r0, #120	; 0x78
 8002182:	f000 f95f 	bl	8002444 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	3301      	adds	r3, #1
 800218a:	71fb      	strb	r3, [r7, #7]
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	2b07      	cmp	r3, #7
 8002190:	d9de      	bls.n	8002150 <SSD1306_UpdateScreen+0xc>
	}
}
 8002192:	bf00      	nop
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000480 	.word	0x20000480

080021a0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <SSD1306_Fill+0x14>
 80021b0:	2300      	movs	r3, #0
 80021b2:	e000      	b.n	80021b6 <SSD1306_Fill+0x16>
 80021b4:	23ff      	movs	r3, #255	; 0xff
 80021b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021ba:	4619      	mov	r1, r3
 80021bc:	4803      	ldr	r0, [pc, #12]	; (80021cc <SSD1306_Fill+0x2c>)
 80021be:	f011 fc8b 	bl	8013ad8 <memset>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000480 	.word	0x20000480

080021d0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	80fb      	strh	r3, [r7, #6]
 80021da:	460b      	mov	r3, r1
 80021dc:	80bb      	strh	r3, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	70fb      	strb	r3, [r7, #3]
	if (
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	2b7f      	cmp	r3, #127	; 0x7f
 80021e6:	d848      	bhi.n	800227a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80021e8:	88bb      	ldrh	r3, [r7, #4]
 80021ea:	2b3f      	cmp	r3, #63	; 0x3f
 80021ec:	d845      	bhi.n	800227a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80021ee:	4b26      	ldr	r3, [pc, #152]	; (8002288 <SSD1306_DrawPixel+0xb8>)
 80021f0:	791b      	ldrb	r3, [r3, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d006      	beq.n	8002204 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	bf0c      	ite	eq
 80021fc:	2301      	moveq	r3, #1
 80021fe:	2300      	movne	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002204:	78fb      	ldrb	r3, [r7, #3]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d11a      	bne.n	8002240 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800220a:	88fa      	ldrh	r2, [r7, #6]
 800220c:	88bb      	ldrh	r3, [r7, #4]
 800220e:	08db      	lsrs	r3, r3, #3
 8002210:	b298      	uxth	r0, r3
 8002212:	4603      	mov	r3, r0
 8002214:	01db      	lsls	r3, r3, #7
 8002216:	4413      	add	r3, r2
 8002218:	4a1c      	ldr	r2, [pc, #112]	; (800228c <SSD1306_DrawPixel+0xbc>)
 800221a:	5cd3      	ldrb	r3, [r2, r3]
 800221c:	b25a      	sxtb	r2, r3
 800221e:	88bb      	ldrh	r3, [r7, #4]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	2101      	movs	r1, #1
 8002226:	fa01 f303 	lsl.w	r3, r1, r3
 800222a:	b25b      	sxtb	r3, r3
 800222c:	4313      	orrs	r3, r2
 800222e:	b259      	sxtb	r1, r3
 8002230:	88fa      	ldrh	r2, [r7, #6]
 8002232:	4603      	mov	r3, r0
 8002234:	01db      	lsls	r3, r3, #7
 8002236:	4413      	add	r3, r2
 8002238:	b2c9      	uxtb	r1, r1
 800223a:	4a14      	ldr	r2, [pc, #80]	; (800228c <SSD1306_DrawPixel+0xbc>)
 800223c:	54d1      	strb	r1, [r2, r3]
 800223e:	e01d      	b.n	800227c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002240:	88fa      	ldrh	r2, [r7, #6]
 8002242:	88bb      	ldrh	r3, [r7, #4]
 8002244:	08db      	lsrs	r3, r3, #3
 8002246:	b298      	uxth	r0, r3
 8002248:	4603      	mov	r3, r0
 800224a:	01db      	lsls	r3, r3, #7
 800224c:	4413      	add	r3, r2
 800224e:	4a0f      	ldr	r2, [pc, #60]	; (800228c <SSD1306_DrawPixel+0xbc>)
 8002250:	5cd3      	ldrb	r3, [r2, r3]
 8002252:	b25a      	sxtb	r2, r3
 8002254:	88bb      	ldrh	r3, [r7, #4]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	2101      	movs	r1, #1
 800225c:	fa01 f303 	lsl.w	r3, r1, r3
 8002260:	b25b      	sxtb	r3, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	b25b      	sxtb	r3, r3
 8002266:	4013      	ands	r3, r2
 8002268:	b259      	sxtb	r1, r3
 800226a:	88fa      	ldrh	r2, [r7, #6]
 800226c:	4603      	mov	r3, r0
 800226e:	01db      	lsls	r3, r3, #7
 8002270:	4413      	add	r3, r2
 8002272:	b2c9      	uxtb	r1, r1
 8002274:	4a05      	ldr	r2, [pc, #20]	; (800228c <SSD1306_DrawPixel+0xbc>)
 8002276:	54d1      	strb	r1, [r2, r3]
 8002278:	e000      	b.n	800227c <SSD1306_DrawPixel+0xac>
		return;
 800227a:	bf00      	nop
	}
}
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000880 	.word	0x20000880
 800228c:	20000480 	.word	0x20000480

08002290 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	460a      	mov	r2, r1
 800229a:	80fb      	strh	r3, [r7, #6]
 800229c:	4613      	mov	r3, r2
 800229e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80022a0:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <SSD1306_GotoXY+0x28>)
 80022a2:	88fb      	ldrh	r3, [r7, #6]
 80022a4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80022a6:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <SSD1306_GotoXY+0x28>)
 80022a8:	88bb      	ldrh	r3, [r7, #4]
 80022aa:	8053      	strh	r3, [r2, #2]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	20000880 	.word	0x20000880

080022bc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	6039      	str	r1, [r7, #0]
 80022c6:	71fb      	strb	r3, [r7, #7]
 80022c8:	4613      	mov	r3, r2
 80022ca:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80022cc:	4b3a      	ldr	r3, [pc, #232]	; (80023b8 <SSD1306_Putc+0xfc>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	4413      	add	r3, r2
	if (
 80022d8:	2b7f      	cmp	r3, #127	; 0x7f
 80022da:	dc07      	bgt.n	80022ec <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80022dc:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <SSD1306_Putc+0xfc>)
 80022de:	885b      	ldrh	r3, [r3, #2]
 80022e0:	461a      	mov	r2, r3
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	785b      	ldrb	r3, [r3, #1]
 80022e6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80022e8:	2b3f      	cmp	r3, #63	; 0x3f
 80022ea:	dd01      	ble.n	80022f0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	e05e      	b.n	80023ae <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	e04b      	b.n	800238e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	3b20      	subs	r3, #32
 80022fe:	6839      	ldr	r1, [r7, #0]
 8002300:	7849      	ldrb	r1, [r1, #1]
 8002302:	fb01 f303 	mul.w	r3, r1, r3
 8002306:	4619      	mov	r1, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	440b      	add	r3, r1
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4413      	add	r3, r2
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002314:	2300      	movs	r3, #0
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	e030      	b.n	800237c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d010      	beq.n	800234c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800232a:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <SSD1306_Putc+0xfc>)
 800232c:	881a      	ldrh	r2, [r3, #0]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	b29b      	uxth	r3, r3
 8002332:	4413      	add	r3, r2
 8002334:	b298      	uxth	r0, r3
 8002336:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <SSD1306_Putc+0xfc>)
 8002338:	885a      	ldrh	r2, [r3, #2]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	b29b      	uxth	r3, r3
 800233e:	4413      	add	r3, r2
 8002340:	b29b      	uxth	r3, r3
 8002342:	79ba      	ldrb	r2, [r7, #6]
 8002344:	4619      	mov	r1, r3
 8002346:	f7ff ff43 	bl	80021d0 <SSD1306_DrawPixel>
 800234a:	e014      	b.n	8002376 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800234c:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <SSD1306_Putc+0xfc>)
 800234e:	881a      	ldrh	r2, [r3, #0]
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	b29b      	uxth	r3, r3
 8002354:	4413      	add	r3, r2
 8002356:	b298      	uxth	r0, r3
 8002358:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <SSD1306_Putc+0xfc>)
 800235a:	885a      	ldrh	r2, [r3, #2]
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	b29b      	uxth	r3, r3
 8002360:	4413      	add	r3, r2
 8002362:	b299      	uxth	r1, r3
 8002364:	79bb      	ldrb	r3, [r7, #6]
 8002366:	2b00      	cmp	r3, #0
 8002368:	bf0c      	ite	eq
 800236a:	2301      	moveq	r3, #1
 800236c:	2300      	movne	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	f7ff ff2d 	bl	80021d0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	3301      	adds	r3, #1
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4293      	cmp	r3, r2
 8002386:	d3c8      	bcc.n	800231a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	3301      	adds	r3, #1
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	785b      	ldrb	r3, [r3, #1]
 8002392:	461a      	mov	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	4293      	cmp	r3, r2
 8002398:	d3ad      	bcc.n	80022f6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800239a:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <SSD1306_Putc+0xfc>)
 800239c:	881a      	ldrh	r2, [r3, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	4413      	add	r3, r2
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <SSD1306_Putc+0xfc>)
 80023aa:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80023ac:	79fb      	ldrb	r3, [r7, #7]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000880 	.word	0x20000880

080023bc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	4613      	mov	r3, r2
 80023c8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80023ca:	e012      	b.n	80023f2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	79fa      	ldrb	r2, [r7, #7]
 80023d2:	68b9      	ldr	r1, [r7, #8]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff71 	bl	80022bc <SSD1306_Putc>
 80023da:	4603      	mov	r3, r0
 80023dc:	461a      	mov	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d002      	beq.n	80023ec <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	e008      	b.n	80023fe <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	3301      	adds	r3, #1
 80023f0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1e8      	bne.n	80023cc <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	781b      	ldrb	r3, [r3, #0]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800240a:	2000      	movs	r0, #0
 800240c:	f7ff fec8 	bl	80021a0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002410:	f7ff fe98 	bl	8002144 <SSD1306_UpdateScreen>
}
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}

08002418 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800241e:	4b08      	ldr	r3, [pc, #32]	; (8002440 <ssd1306_I2C_Init+0x28>)
 8002420:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002422:	e002      	b.n	800242a <ssd1306_I2C_Init+0x12>
		p--;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3b01      	subs	r3, #1
 8002428:	607b      	str	r3, [r7, #4]
	while(p>0)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f9      	bne.n	8002424 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	0003d090 	.word	0x0003d090

08002444 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002444:	b590      	push	{r4, r7, lr}
 8002446:	b0c7      	sub	sp, #284	; 0x11c
 8002448:	af02      	add	r7, sp, #8
 800244a:	4604      	mov	r4, r0
 800244c:	4608      	mov	r0, r1
 800244e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002452:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8002456:	600a      	str	r2, [r1, #0]
 8002458:	4619      	mov	r1, r3
 800245a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800245e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002462:	4622      	mov	r2, r4
 8002464:	701a      	strb	r2, [r3, #0]
 8002466:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800246a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800246e:	4602      	mov	r2, r0
 8002470:	701a      	strb	r2, [r3, #0]
 8002472:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002476:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800247a:	460a      	mov	r2, r1
 800247c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800247e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002482:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002486:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800248a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800248e:	7812      	ldrb	r2, [r2, #0]
 8002490:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002492:	2300      	movs	r3, #0
 8002494:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002498:	e015      	b.n	80024c6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800249a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800249e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80024a2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	441a      	add	r2, r3
 80024aa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024ae:	3301      	adds	r3, #1
 80024b0:	7811      	ldrb	r1, [r2, #0]
 80024b2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80024b6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80024ba:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80024bc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024c0:	3301      	adds	r3, #1
 80024c2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80024c6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80024d0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80024d4:	8812      	ldrh	r2, [r2, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d8df      	bhi.n	800249a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80024da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024de:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	b299      	uxth	r1, r3
 80024e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	3301      	adds	r3, #1
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	f107 020c 	add.w	r2, r7, #12
 80024f8:	200a      	movs	r0, #10
 80024fa:	9000      	str	r0, [sp, #0]
 80024fc:	4803      	ldr	r0, [pc, #12]	; (800250c <ssd1306_I2C_WriteMulti+0xc8>)
 80024fe:	f002 fd2b 	bl	8004f58 <HAL_I2C_Master_Transmit>
}
 8002502:	bf00      	nop
 8002504:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002508:	46bd      	mov	sp, r7
 800250a:	bd90      	pop	{r4, r7, pc}
 800250c:	2000037c 	.word	0x2000037c

08002510 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af02      	add	r7, sp, #8
 8002516:	4603      	mov	r3, r0
 8002518:	71fb      	strb	r3, [r7, #7]
 800251a:	460b      	mov	r3, r1
 800251c:	71bb      	strb	r3, [r7, #6]
 800251e:	4613      	mov	r3, r2
 8002520:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002522:	79bb      	ldrb	r3, [r7, #6]
 8002524:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002526:	797b      	ldrb	r3, [r7, #5]
 8002528:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	b299      	uxth	r1, r3
 800252e:	f107 020c 	add.w	r2, r7, #12
 8002532:	230a      	movs	r3, #10
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	2302      	movs	r3, #2
 8002538:	4803      	ldr	r0, [pc, #12]	; (8002548 <ssd1306_I2C_Write+0x38>)
 800253a:	f002 fd0d 	bl	8004f58 <HAL_I2C_Master_Transmit>
}
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	2000037c 	.word	0x2000037c

0800254c <LL_RCC_EnableRTC>:
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002558:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800255c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <LL_AHB2_GRP1_EnableClock>:
{
 800256e:	b480      	push	{r7}
 8002570:	b085      	sub	sp, #20
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800257c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4313      	orrs	r3, r2
 8002584:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4013      	ands	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002592:	68fb      	ldr	r3, [r7, #12]
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <LL_AHB3_GRP1_EnableClock>:
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80025a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80025b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4013      	ands	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025c4:	68fb      	ldr	r3, [r7, #12]
}
 80025c6:	bf00      	nop
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <LL_APB1_GRP1_EnableClock>:
{
 80025d2:	b480      	push	{r7}
 80025d4:	b085      	sub	sp, #20
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80025da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80025ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4013      	ands	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025f6:	68fb      	ldr	r3, [r7, #12]
}
 80025f8:	bf00      	nop
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002608:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800260c:	f7ff ffc8 	bl	80025a0 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002610:	2200      	movs	r2, #0
 8002612:	2100      	movs	r1, #0
 8002614:	202e      	movs	r0, #46	; 0x2e
 8002616:	f001 ff16 	bl	8004446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800261a:	202e      	movs	r0, #46	; 0x2e
 800261c:	f001 ff2d 	bl	800447a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b09c      	sub	sp, #112	; 0x70
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800263c:	f107 030c 	add.w	r3, r7, #12
 8002640:	2250      	movs	r2, #80	; 0x50
 8002642:	2100      	movs	r1, #0
 8002644:	4618      	mov	r0, r3
 8002646:	f011 fa47 	bl	8013ad8 <memset>
  if(hadc->Instance==ADC1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a2b      	ldr	r2, [pc, #172]	; (80026fc <HAL_ADC_MspInit+0xd8>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d14e      	bne.n	80026f2 <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002658:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL;
 800265a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800265e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002660:	f107 030c 	add.w	r3, r7, #12
 8002664:	4618      	mov	r0, r3
 8002666:	f006 fceb 	bl	8009040 <HAL_RCCEx_PeriphCLKConfig>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002670:	f7ff fb60 	bl	8001d34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002674:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002678:	f7ff ff79 	bl	800256e <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267c:	2001      	movs	r0, #1
 800267e:	f7ff ff76 	bl	800256e <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = BATT_ADC_Pin|OPAMP_ADC_Pin;
 8002682:	2382      	movs	r3, #130	; 0x82
 8002684:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002686:	2303      	movs	r3, #3
 8002688:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002692:	4619      	mov	r1, r3
 8002694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002698:	f002 f9fa 	bl	8004a90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800269c:	4b18      	ldr	r3, [pc, #96]	; (8002700 <HAL_ADC_MspInit+0xdc>)
 800269e:	4a19      	ldr	r2, [pc, #100]	; (8002704 <HAL_ADC_MspInit+0xe0>)
 80026a0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80026a2:	4b17      	ldr	r3, [pc, #92]	; (8002700 <HAL_ADC_MspInit+0xdc>)
 80026a4:	2205      	movs	r2, #5
 80026a6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026a8:	4b15      	ldr	r3, [pc, #84]	; (8002700 <HAL_ADC_MspInit+0xdc>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ae:	4b14      	ldr	r3, [pc, #80]	; (8002700 <HAL_ADC_MspInit+0xdc>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026b4:	4b12      	ldr	r3, [pc, #72]	; (8002700 <HAL_ADC_MspInit+0xdc>)
 80026b6:	2280      	movs	r2, #128	; 0x80
 80026b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026ba:	4b11      	ldr	r3, [pc, #68]	; (8002700 <HAL_ADC_MspInit+0xdc>)
 80026bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026c0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026c2:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <HAL_ADC_MspInit+0xdc>)
 80026c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80026ca:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <HAL_ADC_MspInit+0xdc>)
 80026cc:	2220      	movs	r2, #32
 80026ce:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <HAL_ADC_MspInit+0xdc>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80026d6:	480a      	ldr	r0, [pc, #40]	; (8002700 <HAL_ADC_MspInit+0xdc>)
 80026d8:	f001 ff06 	bl	80044e8 <HAL_DMA_Init>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80026e2:	f7ff fb27 	bl	8001d34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a05      	ldr	r2, [pc, #20]	; (8002700 <HAL_ADC_MspInit+0xdc>)
 80026ea:	64da      	str	r2, [r3, #76]	; 0x4c
 80026ec:	4a04      	ldr	r2, [pc, #16]	; (8002700 <HAL_ADC_MspInit+0xdc>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026f2:	bf00      	nop
 80026f4:	3770      	adds	r7, #112	; 0x70
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	50040000 	.word	0x50040000
 8002700:	2000031c 	.word	0x2000031c
 8002704:	40020008 	.word	0x40020008

08002708 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b09c      	sub	sp, #112	; 0x70
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002710:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002720:	f107 030c 	add.w	r3, r7, #12
 8002724:	2250      	movs	r2, #80	; 0x50
 8002726:	2100      	movs	r1, #0
 8002728:	4618      	mov	r0, r3
 800272a:	f011 f9d5 	bl	8013ad8 <memset>
  if(hi2c->Instance==I2C1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a16      	ldr	r2, [pc, #88]	; (800278c <HAL_I2C_MspInit+0x84>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d125      	bne.n	8002784 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002738:	2304      	movs	r3, #4
 800273a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800273c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002740:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002742:	f107 030c 	add.w	r3, r7, #12
 8002746:	4618      	mov	r0, r3
 8002748:	f006 fc7a 	bl	8009040 <HAL_RCCEx_PeriphCLKConfig>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002752:	f7ff faef 	bl	8001d34 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002756:	2002      	movs	r0, #2
 8002758:	f7ff ff09 	bl	800256e <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800275c:	23c0      	movs	r3, #192	; 0xc0
 800275e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002760:	2312      	movs	r3, #18
 8002762:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002768:	2300      	movs	r3, #0
 800276a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800276c:	2304      	movs	r3, #4
 800276e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002770:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002774:	4619      	mov	r1, r3
 8002776:	4806      	ldr	r0, [pc, #24]	; (8002790 <HAL_I2C_MspInit+0x88>)
 8002778:	f002 f98a 	bl	8004a90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800277c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002780:	f7ff ff27 	bl	80025d2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002784:	bf00      	nop
 8002786:	3770      	adds	r7, #112	; 0x70
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40005400 	.word	0x40005400
 8002790:	48000400 	.word	0x48000400

08002794 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0d      	ldr	r2, [pc, #52]	; (80027d8 <HAL_IPCC_MspInit+0x44>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d113      	bne.n	80027ce <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80027a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80027aa:	f7ff fef9 	bl	80025a0 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2100      	movs	r1, #0
 80027b2:	202c      	movs	r0, #44	; 0x2c
 80027b4:	f001 fe47 	bl	8004446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80027b8:	202c      	movs	r0, #44	; 0x2c
 80027ba:	f001 fe5e 	bl	800447a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80027be:	2200      	movs	r2, #0
 80027c0:	2100      	movs	r1, #0
 80027c2:	202d      	movs	r0, #45	; 0x2d
 80027c4:	f001 fe3f 	bl	8004446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80027c8:	202d      	movs	r0, #45	; 0x2d
 80027ca:	f001 fe56 	bl	800447a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	58000c00 	.word	0x58000c00

080027dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b096      	sub	sp, #88	; 0x58
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027e4:	f107 0308 	add.w	r3, r7, #8
 80027e8:	2250      	movs	r2, #80	; 0x50
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f011 f973 	bl	8013ad8 <memset>
  if(hrtc->Instance==RTC)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a0e      	ldr	r2, [pc, #56]	; (8002830 <HAL_RTC_MspInit+0x54>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d115      	bne.n	8002828 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80027fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002800:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002806:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002808:	f107 0308 	add.w	r3, r7, #8
 800280c:	4618      	mov	r0, r3
 800280e:	f006 fc17 	bl	8009040 <HAL_RCCEx_PeriphCLKConfig>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002818:	f7ff fa8c 	bl	8001d34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800281c:	f7ff fe96 	bl	800254c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002820:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002824:	f7ff fed5 	bl	80025d2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002828:	bf00      	nop
 800282a:	3758      	adds	r7, #88	; 0x58
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40002800 	.word	0x40002800

08002834 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002844:	d102      	bne.n	800284c <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002846:	2001      	movs	r0, #1
 8002848:	f7ff fec3 	bl	80025d2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	f107 030c 	add.w	r3, r7, #12
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002874:	d114      	bne.n	80028a0 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002876:	2001      	movs	r0, #1
 8002878:	f7ff fe79 	bl	800256e <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_VREF_Pin;
 800287c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002880:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002882:	2302      	movs	r3, #2
 8002884:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288a:	2300      	movs	r3, #0
 800288c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800288e:	2301      	movs	r3, #1
 8002890:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_VREF_GPIO_Port, &GPIO_InitStruct);
 8002892:	f107 030c 	add.w	r3, r7, #12
 8002896:	4619      	mov	r1, r3
 8002898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800289c:	f002 f8f8 	bl	8004a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80028a0:	bf00      	nop
 80028a2:	3720      	adds	r7, #32
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028ac:	e7fe      	b.n	80028ac <NMI_Handler+0x4>

080028ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ae:	b480      	push	{r7}
 80028b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028b2:	e7fe      	b.n	80028b2 <HardFault_Handler+0x4>

080028b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028b8:	e7fe      	b.n	80028b8 <MemManage_Handler+0x4>

080028ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028be:	e7fe      	b.n	80028be <BusFault_Handler+0x4>

080028c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028c4:	e7fe      	b.n	80028c4 <UsageFault_Handler+0x4>

080028c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028f4:	f000 f9f6 	bl	8002ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028f8:	bf00      	nop
 80028fa:	bd80      	pop	{r7, pc}

080028fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002900:	4802      	ldr	r0, [pc, #8]	; (800290c <DMA1_Channel1_IRQHandler+0x10>)
 8002902:	f001 ff73 	bl	80047ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	2000031c 	.word	0x2000031c

08002910 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002914:	4802      	ldr	r0, [pc, #8]	; (8002920 <USB_LP_IRQHandler+0x10>)
 8002916:	f003 fc2a 	bl	800616e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20001fac 	.word	0x20001fac

08002924 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BATT_STAT_Pin);
 8002928:	f44f 7000 	mov.w	r0, #512	; 0x200
 800292c:	f002 fa48 	bl	8004dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}

08002934 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002938:	f00f ff42 	bl	80127c0 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}

08002940 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002944:	f00f ff74 	bl	8012830 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002948:	bf00      	nop
 800294a:	bd80      	pop	{r7, pc}

0800294c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002950:	f002 fa4e 	bl	8004df0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}

08002958 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
	return 1;
 800295c:	2301      	movs	r3, #1
}
 800295e:	4618      	mov	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <_kill>:

int _kill(int pid, int sig)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002972:	f011 f867 	bl	8013a44 <__errno>
 8002976:	4603      	mov	r3, r0
 8002978:	2216      	movs	r2, #22
 800297a:	601a      	str	r2, [r3, #0]
	return -1;
 800297c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <_exit>:

void _exit (int status)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002990:	f04f 31ff 	mov.w	r1, #4294967295
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff ffe7 	bl	8002968 <_kill>
	while (1) {}		/* Make sure we hang here */
 800299a:	e7fe      	b.n	800299a <_exit+0x12>

0800299c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	e00a      	b.n	80029c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029ae:	f3af 8000 	nop.w
 80029b2:	4601      	mov	r1, r0
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	60ba      	str	r2, [r7, #8]
 80029ba:	b2ca      	uxtb	r2, r1
 80029bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	3301      	adds	r3, #1
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	dbf0      	blt.n	80029ae <_read+0x12>
	}

return len;
 80029cc:	687b      	ldr	r3, [r7, #4]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b086      	sub	sp, #24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	e009      	b.n	80029fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	60ba      	str	r2, [r7, #8]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	3301      	adds	r3, #1
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	dbf1      	blt.n	80029e8 <_write+0x12>
	}
	return len;
 8002a04:	687b      	ldr	r3, [r7, #4]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <_close>:

int _close(int file)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
	return -1;
 8002a16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a36:	605a      	str	r2, [r3, #4]
	return 0;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <_isatty>:

int _isatty(int file)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
	return 1;
 8002a4e:	2301      	movs	r3, #1
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
	return 0;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a80:	4a14      	ldr	r2, [pc, #80]	; (8002ad4 <_sbrk+0x5c>)
 8002a82:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <_sbrk+0x60>)
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a8c:	4b13      	ldr	r3, [pc, #76]	; (8002adc <_sbrk+0x64>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d102      	bne.n	8002a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a94:	4b11      	ldr	r3, [pc, #68]	; (8002adc <_sbrk+0x64>)
 8002a96:	4a12      	ldr	r2, [pc, #72]	; (8002ae0 <_sbrk+0x68>)
 8002a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a9a:	4b10      	ldr	r3, [pc, #64]	; (8002adc <_sbrk+0x64>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d207      	bcs.n	8002ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002aa8:	f010 ffcc 	bl	8013a44 <__errno>
 8002aac:	4603      	mov	r3, r0
 8002aae:	220c      	movs	r2, #12
 8002ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab6:	e009      	b.n	8002acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ab8:	4b08      	ldr	r3, [pc, #32]	; (8002adc <_sbrk+0x64>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002abe:	4b07      	ldr	r3, [pc, #28]	; (8002adc <_sbrk+0x64>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	4a05      	ldr	r2, [pc, #20]	; (8002adc <_sbrk+0x64>)
 8002ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aca:	68fb      	ldr	r3, [r7, #12]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	20008000 	.word	0x20008000
 8002ad8:	00000400 	.word	0x00000400
 8002adc:	20000888 	.word	0x20000888
 8002ae0:	20002578 	.word	0x20002578

08002ae4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002ae8:	4b22      	ldr	r3, [pc, #136]	; (8002b74 <SystemInit+0x90>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aee:	4a21      	ldr	r2, [pc, #132]	; (8002b74 <SystemInit+0x90>)
 8002af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002b10:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b1c:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <SystemInit+0x94>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b2e:	f023 0305 	bic.w	r3, r3, #5
 8002b32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b42:	f023 0301 	bic.w	r3, r3, #1
 8002b46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4e:	4a0b      	ldr	r2, [pc, #44]	; (8002b7c <SystemInit+0x98>)
 8002b50:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b60:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b66:	2200      	movs	r2, #0
 8002b68:	619a      	str	r2, [r3, #24]
}
 8002b6a:	bf00      	nop
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000ed00 	.word	0xe000ed00
 8002b78:	faf6fefb 	.word	0xfaf6fefb
 8002b7c:	22041000 	.word	0x22041000

08002b80 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002b80:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b82:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b84:	3304      	adds	r3, #4

08002b86 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b86:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b88:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002b8a:	d3f9      	bcc.n	8002b80 <CopyDataInit>
  bx lr
 8002b8c:	4770      	bx	lr

08002b8e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002b8e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002b90:	3004      	adds	r0, #4

08002b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002b92:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002b94:	d3fb      	bcc.n	8002b8e <FillZerobss>
  bx lr
 8002b96:	4770      	bx	lr

08002b98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b98:	480c      	ldr	r0, [pc, #48]	; (8002bcc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002b9a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b9c:	f7ff ffa2 	bl	8002ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002ba0:	480b      	ldr	r0, [pc, #44]	; (8002bd0 <LoopForever+0x8>)
 8002ba2:	490c      	ldr	r1, [pc, #48]	; (8002bd4 <LoopForever+0xc>)
 8002ba4:	4a0c      	ldr	r2, [pc, #48]	; (8002bd8 <LoopForever+0x10>)
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f7ff ffed 	bl	8002b86 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002bac:	480b      	ldr	r0, [pc, #44]	; (8002bdc <LoopForever+0x14>)
 8002bae:	490c      	ldr	r1, [pc, #48]	; (8002be0 <LoopForever+0x18>)
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f7ff ffee 	bl	8002b92 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002bb6:	480b      	ldr	r0, [pc, #44]	; (8002be4 <LoopForever+0x1c>)
 8002bb8:	490b      	ldr	r1, [pc, #44]	; (8002be8 <LoopForever+0x20>)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f7ff ffe9 	bl	8002b92 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002bc0:	f010 ff58 	bl	8013a74 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002bc4:	f7fe fdd8 	bl	8001778 <main>

08002bc8 <LoopForever>:

LoopForever:
  b LoopForever
 8002bc8:	e7fe      	b.n	8002bc8 <LoopForever>
 8002bca:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002bcc:	20008000 	.word	0x20008000
  INIT_DATA _sdata, _edata, _sidata
 8002bd0:	20000004 	.word	0x20000004
 8002bd4:	200001b0 	.word	0x200001b0
 8002bd8:	08017438 	.word	0x08017438
  INIT_BSS _sbss, _ebss
 8002bdc:	200001fc 	.word	0x200001fc
 8002be0:	20002578 	.word	0x20002578
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002be4:	200301e4 	.word	0x200301e4
 8002be8:	20030a67 	.word	0x20030a67

08002bec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bec:	e7fe      	b.n	8002bec <ADC1_IRQHandler>
	...

08002bf0 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	4a04      	ldr	r2, [pc, #16]	; (8002c0c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	6053      	str	r3, [r2, #4]
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	e0042000 	.word	0xe0042000

08002c10 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002c14:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	4a04      	ldr	r2, [pc, #16]	; (8002c2c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002c1a:	f043 0302 	orr.w	r3, r3, #2
 8002c1e:	6053      	str	r3, [r2, #4]
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	e0042000 	.word	0xe0042000

08002c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <HAL_Init+0x3c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a0b      	ldr	r2, [pc, #44]	; (8002c6c <HAL_Init+0x3c>)
 8002c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c46:	2003      	movs	r0, #3
 8002c48:	f001 fbf2 	bl	8004430 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c4c:	200f      	movs	r0, #15
 8002c4e:	f000 f80f 	bl	8002c70 <HAL_InitTick>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	71fb      	strb	r3, [r7, #7]
 8002c5c:	e001      	b.n	8002c62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c5e:	f7ff fcd1 	bl	8002604 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c62:	79fb      	ldrb	r3, [r7, #7]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	58004000 	.word	0x58004000

08002c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002c7c:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <HAL_InitTick+0x6c>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d024      	beq.n	8002cce <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c84:	f005 ff68 	bl	8008b58 <HAL_RCC_GetHCLKFreq>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	4b14      	ldr	r3, [pc, #80]	; (8002cdc <HAL_InitTick+0x6c>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c94:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f001 fbfa 	bl	8004496 <HAL_SYSTICK_Config>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10f      	bne.n	8002cc8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b0f      	cmp	r3, #15
 8002cac:	d809      	bhi.n	8002cc2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cae:	2200      	movs	r2, #0
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb6:	f001 fbc6 	bl	8004446 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cba:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <HAL_InitTick+0x70>)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	e007      	b.n	8002cd2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	73fb      	strb	r3, [r7, #15]
 8002cc6:	e004      	b.n	8002cd2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
 8002ccc:	e001      	b.n	8002cd2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	20000014 	.word	0x20000014
 8002ce0:	20000010 	.word	0x20000010

08002ce4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_IncTick+0x20>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_IncTick+0x24>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <HAL_IncTick+0x24>)
 8002cf6:	6013      	str	r3, [r2, #0]
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000014 	.word	0x20000014
 8002d08:	2000088c 	.word	0x2000088c

08002d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d10:	4b03      	ldr	r3, [pc, #12]	; (8002d20 <HAL_GetTick+0x14>)
 8002d12:	681b      	ldr	r3, [r3, #0]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	2000088c 	.word	0x2000088c

08002d24 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002d28:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <HAL_GetTickPrio+0x14>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	20000010 	.word	0x20000010

08002d3c <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002d40:	4b03      	ldr	r3, [pc, #12]	; (8002d50 <HAL_GetTickFreq+0x14>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20000014 	.word	0x20000014

08002d54 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002d58:	f7ff ff4a 	bl	8002bf0 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002d5c:	bf00      	nop
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002d64:	f7ff ff54 	bl	8002c10 <LL_DBGMCU_EnableDBGStopMode>
}
 8002d68:	bf00      	nop
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	609a      	str	r2, [r3, #8]
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3360      	adds	r3, #96	; 0x60
 8002de6:	461a      	mov	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <LL_ADC_SetOffset+0x44>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002e0c:	bf00      	nop
 8002e0e:	371c      	adds	r7, #28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	03fff000 	.word	0x03fff000

08002e1c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3360      	adds	r3, #96	; 0x60
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3360      	adds	r3, #96	; 0x60
 8002e58:	461a      	mov	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e72:	bf00      	nop
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e96:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	3330      	adds	r3, #48	; 0x30
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	0a1b      	lsrs	r3, r3, #8
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	f003 030c 	and.w	r3, r3, #12
 8002ec0:	4413      	add	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 031f 	and.w	r3, r3, #31
 8002ece:	211f      	movs	r1, #31
 8002ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	401a      	ands	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	0e9b      	lsrs	r3, r3, #26
 8002edc:	f003 011f 	and.w	r1, r3, #31
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f003 031f 	and.w	r3, r3, #31
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	431a      	orrs	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002ef0:	bf00      	nop
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3314      	adds	r3, #20
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	0e5b      	lsrs	r3, r3, #25
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	4413      	add	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	0d1b      	lsrs	r3, r3, #20
 8002f24:	f003 031f 	and.w	r3, r3, #31
 8002f28:	2107      	movs	r1, #7
 8002f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	401a      	ands	r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	0d1b      	lsrs	r3, r3, #20
 8002f36:	f003 031f 	and.w	r3, r3, #31
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f40:	431a      	orrs	r2, r3
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002f46:	bf00      	nop
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
	...

08002f54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	401a      	ands	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f003 0318 	and.w	r3, r3, #24
 8002f76:	4908      	ldr	r1, [pc, #32]	; (8002f98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f78:	40d9      	lsrs	r1, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	400b      	ands	r3, r1
 8002f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f82:	431a      	orrs	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002f8a:	bf00      	nop
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	0007ffff 	.word	0x0007ffff

08002f9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002fac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6093      	str	r3, [r2, #8]
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fd4:	d101      	bne.n	8002fda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002ff8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ffc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003020:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003024:	d101      	bne.n	800302a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003048:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800304c:	f043 0201 	orr.w	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003070:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003074:	f043 0202 	orr.w	r2, r3, #2
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <LL_ADC_IsEnabled+0x18>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <LL_ADC_IsEnabled+0x1a>
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d101      	bne.n	80030c6 <LL_ADC_IsDisableOngoing+0x18>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <LL_ADC_IsDisableOngoing+0x1a>
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030e8:	f043 0204 	orr.w	r2, r3, #4
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800310c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003110:	f043 0210 	orr.w	r2, r3, #16
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b04      	cmp	r3, #4
 8003136:	d101      	bne.n	800313c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800315a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800315e:	f043 0220 	orr.w	r2, r3, #32
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b08      	cmp	r3, #8
 8003184:	d101      	bne.n	800318a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e12e      	b.n	8003414 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d109      	bne.n	80031d8 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff fa2d 	bl	8002624 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff feef 	bl	8002fc0 <LL_ADC_IsDeepPowerDownEnabled>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d004      	beq.n	80031f2 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fed5 	bl	8002f9c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff ff0a 	bl	8003010 <LL_ADC_IsInternalRegulatorEnabled>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d115      	bne.n	800322e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff feee 	bl	8002fe8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800320c:	4b83      	ldr	r3, [pc, #524]	; (800341c <HAL_ADC_Init+0x284>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	099b      	lsrs	r3, r3, #6
 8003212:	4a83      	ldr	r2, [pc, #524]	; (8003420 <HAL_ADC_Init+0x288>)
 8003214:	fba2 2303 	umull	r2, r3, r2, r3
 8003218:	099b      	lsrs	r3, r3, #6
 800321a:	3301      	adds	r3, #1
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003220:	e002      	b.n	8003228 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	3b01      	subs	r3, #1
 8003226:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f9      	bne.n	8003222 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff feec 	bl	8003010 <LL_ADC_IsInternalRegulatorEnabled>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10d      	bne.n	800325a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003242:	f043 0210 	orr.w	r2, r3, #16
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324e:	f043 0201 	orr.w	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff ff60 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 8003264:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b00      	cmp	r3, #0
 8003270:	f040 80c7 	bne.w	8003402 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	f040 80c3 	bne.w	8003402 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003280:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003284:	f043 0202 	orr.w	r2, r3, #2
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fef9 	bl	8003088 <LL_ADC_IsEnabled>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10b      	bne.n	80032b4 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800329c:	4861      	ldr	r0, [pc, #388]	; (8003424 <HAL_ADC_Init+0x28c>)
 800329e:	f7ff fef3 	bl	8003088 <LL_ADC_IsEnabled>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d105      	bne.n	80032b4 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	4619      	mov	r1, r3
 80032ae:	485e      	ldr	r0, [pc, #376]	; (8003428 <HAL_ADC_Init+0x290>)
 80032b0:	f7ff fd5c 	bl	8002d6c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	7e5b      	ldrb	r3, [r3, #25]
 80032b8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032be:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80032c4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80032ca:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032d2:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80032d4:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d106      	bne.n	80032f4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	3b01      	subs	r3, #1
 80032ec:	045b      	lsls	r3, r3, #17
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d009      	beq.n	8003310 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	4b45      	ldr	r3, [pc, #276]	; (800342c <HAL_ADC_Init+0x294>)
 8003318:	4013      	ands	r3, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	69b9      	ldr	r1, [r7, #24]
 8003320:	430b      	orrs	r3, r1
 8003322:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fefb 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 800332e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff ff1c 	bl	8003172 <LL_ADC_INJ_IsConversionOngoing>
 800333a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d13d      	bne.n	80033be <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d13a      	bne.n	80033be <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800334c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003354:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003356:	4313      	orrs	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003364:	f023 0302 	bic.w	r3, r3, #2
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	69b9      	ldr	r1, [r7, #24]
 800336e:	430b      	orrs	r3, r1
 8003370:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003378:	2b01      	cmp	r3, #1
 800337a:	d118      	bne.n	80033ae <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003386:	f023 0304 	bic.w	r3, r3, #4
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003392:	4311      	orrs	r1, r2
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003398:	4311      	orrs	r1, r2
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800339e:	430a      	orrs	r2, r1
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0201 	orr.w	r2, r2, #1
 80033aa:	611a      	str	r2, [r3, #16]
 80033ac:	e007      	b.n	80033be <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0201 	bic.w	r2, r2, #1
 80033bc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d10c      	bne.n	80033e0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	f023 010f 	bic.w	r1, r3, #15
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	1e5a      	subs	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	631a      	str	r2, [r3, #48]	; 0x30
 80033de:	e007      	b.n	80033f0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 020f 	bic.w	r2, r2, #15
 80033ee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f4:	f023 0303 	bic.w	r3, r3, #3
 80033f8:	f043 0201 	orr.w	r2, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	655a      	str	r2, [r3, #84]	; 0x54
 8003400:	e007      	b.n	8003412 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003406:	f043 0210 	orr.w	r2, r3, #16
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003412:	7ffb      	ldrb	r3, [r7, #31]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3720      	adds	r7, #32
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	2000000c 	.word	0x2000000c
 8003420:	053e2d63 	.word	0x053e2d63
 8003424:	50040000 	.word	0x50040000
 8003428:	50040300 	.word	0x50040300
 800342c:	fff0c007 	.word	0xfff0c007

08003430 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fe6f 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d167      	bne.n	800351c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_ADC_Start_DMA+0x2a>
 8003456:	2302      	movs	r3, #2
 8003458:	e063      	b.n	8003522 <HAL_ADC_Start_DMA+0xf2>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 fd6a 	bl	8003f3c <ADC_Enable>
 8003468:	4603      	mov	r3, r0
 800346a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800346c:	7dfb      	ldrb	r3, [r7, #23]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d14f      	bne.n	8003512 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003476:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800347a:	f023 0301 	bic.w	r3, r3, #1
 800347e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d006      	beq.n	80034a0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003496:	f023 0206 	bic.w	r2, r3, #6
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	659a      	str	r2, [r3, #88]	; 0x58
 800349e:	e002      	b.n	80034a6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034aa:	4a20      	ldr	r2, [pc, #128]	; (800352c <HAL_ADC_Start_DMA+0xfc>)
 80034ac:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b2:	4a1f      	ldr	r2, [pc, #124]	; (8003530 <HAL_ADC_Start_DMA+0x100>)
 80034b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ba:	4a1e      	ldr	r2, [pc, #120]	; (8003534 <HAL_ADC_Start_DMA+0x104>)
 80034bc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	221c      	movs	r2, #28
 80034c4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0210 	orr.w	r2, r2, #16
 80034dc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0201 	orr.w	r2, r2, #1
 80034ec:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	3340      	adds	r3, #64	; 0x40
 80034f8:	4619      	mov	r1, r3
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f001 f89b 	bl	8004638 <HAL_DMA_Start_IT>
 8003502:	4603      	mov	r3, r0
 8003504:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fde2 	bl	80030d4 <LL_ADC_REG_StartConversion>
 8003510:	e006      	b.n	8003520 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800351a:	e001      	b.n	8003520 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800351c:	2302      	movs	r3, #2
 800351e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003520:	7dfb      	ldrb	r3, [r7, #23]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	080040ef 	.word	0x080040ef
 8003530:	080041c7 	.word	0x080041c7
 8003534:	080041e3 	.word	0x080041e3

08003538 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_ADC_Stop_DMA+0x16>
 800354a:	2302      	movs	r3, #2
 800354c:	e051      	b.n	80035f2 <HAL_ADC_Stop_DMA+0xba>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
#if defined(ADC_SUPPORT_2_5_MSPS)
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003556:	2103      	movs	r1, #3
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 fc33 	bl	8003dc4 <ADC_ConversionStop>
 800355e:	4603      	mov	r3, r0
 8003560:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d13f      	bne.n	80035e8 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0201 	bic.w	r2, r2, #1
 8003576:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d10f      	bne.n	80035a6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358a:	4618      	mov	r0, r3
 800358c:	f001 f8cf 	bl	800472e <HAL_DMA_Abort>
 8003590:	4603      	mov	r3, r0
 8003592:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d005      	beq.n	80035a6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0210 	bic.w	r2, r2, #16
 80035b4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d105      	bne.n	80035c8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 fd37 	bl	8004030 <ADC_Disable>
 80035c2:	4603      	mov	r3, r0
 80035c4:	73fb      	strb	r3, [r7, #15]
 80035c6:	e002      	b.n	80035ce <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 fd31 	bl	8004030 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d109      	bne.n	80035e8 <HAL_ADC_Stop_DMA+0xb0>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035dc:	f023 0301 	bic.w	r3, r3, #1
 80035e0:	f043 0201 	orr.w	r2, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
	...

08003638 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b0b6      	sub	sp, #216	; 0xd8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <HAL_ADC_ConfigChannel+0x22>
 8003656:	2302      	movs	r3, #2
 8003658:	e39f      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x762>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff fd5c 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	f040 8384 	bne.w	8003d7c <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	6859      	ldr	r1, [r3, #4]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	f7ff fc0f 	bl	8002ea4 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff fd4a 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 8003690:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff fd6a 	bl	8003172 <LL_ADC_INJ_IsConversionOngoing>
 800369e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f040 81a6 	bne.w	80039f8 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f040 81a1 	bne.w	80039f8 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	6819      	ldr	r1, [r3, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	461a      	mov	r2, r3
 80036c4:	f7ff fc1a 	bl	8002efc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	695a      	ldr	r2, [r3, #20]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	08db      	lsrs	r3, r3, #3
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d00a      	beq.n	8003700 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	6919      	ldr	r1, [r3, #16]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80036fa:	f7ff fb6b 	bl	8002dd4 <LL_ADC_SetOffset>
 80036fe:	e17b      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff fb88 	bl	8002e1c <LL_ADC_GetOffsetChannel>
 800370c:	4603      	mov	r3, r0
 800370e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10a      	bne.n	800372c <HAL_ADC_ConfigChannel+0xf4>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2100      	movs	r1, #0
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff fb7d 	bl	8002e1c <LL_ADC_GetOffsetChannel>
 8003722:	4603      	mov	r3, r0
 8003724:	0e9b      	lsrs	r3, r3, #26
 8003726:	f003 021f 	and.w	r2, r3, #31
 800372a:	e01e      	b.n	800376a <HAL_ADC_ConfigChannel+0x132>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2100      	movs	r1, #0
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fb72 	bl	8002e1c <LL_ADC_GetOffsetChannel>
 8003738:	4603      	mov	r3, r0
 800373a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003742:	fa93 f3a3 	rbit	r3, r3
 8003746:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 800374a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800374e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8003752:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 800375a:	2320      	movs	r3, #32
 800375c:	e004      	b.n	8003768 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 800375e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003762:	fab3 f383 	clz	r3, r3
 8003766:	b2db      	uxtb	r3, r3
 8003768:	461a      	mov	r2, r3
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003772:	2b00      	cmp	r3, #0
 8003774:	d105      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x14a>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	0e9b      	lsrs	r3, r3, #26
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	e018      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x17c>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800378e:	fa93 f3a3 	rbit	r3, r3
 8003792:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800379a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800379e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80037a6:	2320      	movs	r3, #32
 80037a8:	e004      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80037aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037ae:	fab3 f383 	clz	r3, r3
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d106      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2200      	movs	r2, #0
 80037be:	2100      	movs	r1, #0
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff fb41 	bl	8002e48 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2101      	movs	r1, #1
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff fb25 	bl	8002e1c <LL_ADC_GetOffsetChannel>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x1ba>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2101      	movs	r1, #1
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff fb1a 	bl	8002e1c <LL_ADC_GetOffsetChannel>
 80037e8:	4603      	mov	r3, r0
 80037ea:	0e9b      	lsrs	r3, r3, #26
 80037ec:	f003 021f 	and.w	r2, r3, #31
 80037f0:	e01e      	b.n	8003830 <HAL_ADC_ConfigChannel+0x1f8>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2101      	movs	r1, #1
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff fb0f 	bl	8002e1c <LL_ADC_GetOffsetChannel>
 80037fe:	4603      	mov	r3, r0
 8003800:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003804:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003808:	fa93 f3a3 	rbit	r3, r3
 800380c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003810:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003814:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003818:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8003820:	2320      	movs	r3, #32
 8003822:	e004      	b.n	800382e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8003824:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003828:	fab3 f383 	clz	r3, r3
 800382c:	b2db      	uxtb	r3, r3
 800382e:	461a      	mov	r2, r3
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003838:	2b00      	cmp	r3, #0
 800383a:	d105      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x210>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	0e9b      	lsrs	r3, r3, #26
 8003842:	f003 031f 	and.w	r3, r3, #31
 8003846:	e018      	b.n	800387a <HAL_ADC_ConfigChannel+0x242>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003850:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003854:	fa93 f3a3 	rbit	r3, r3
 8003858:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800385c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003860:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003864:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 800386c:	2320      	movs	r3, #32
 800386e:	e004      	b.n	800387a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8003870:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003874:	fab3 f383 	clz	r3, r3
 8003878:	b2db      	uxtb	r3, r3
 800387a:	429a      	cmp	r2, r3
 800387c:	d106      	bne.n	800388c <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2200      	movs	r2, #0
 8003884:	2101      	movs	r1, #1
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff fade 	bl	8002e48 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2102      	movs	r1, #2
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fac2 	bl	8002e1c <LL_ADC_GetOffsetChannel>
 8003898:	4603      	mov	r3, r0
 800389a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10a      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x280>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2102      	movs	r1, #2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff fab7 	bl	8002e1c <LL_ADC_GetOffsetChannel>
 80038ae:	4603      	mov	r3, r0
 80038b0:	0e9b      	lsrs	r3, r3, #26
 80038b2:	f003 021f 	and.w	r2, r3, #31
 80038b6:	e01e      	b.n	80038f6 <HAL_ADC_ConfigChannel+0x2be>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2102      	movs	r1, #2
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff faac 	bl	8002e1c <LL_ADC_GetOffsetChannel>
 80038c4:	4603      	mov	r3, r0
 80038c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038ce:	fa93 f3a3 	rbit	r3, r3
 80038d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80038d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80038de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80038e6:	2320      	movs	r3, #32
 80038e8:	e004      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80038ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038ee:	fab3 f383 	clz	r3, r3
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	461a      	mov	r2, r3
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d105      	bne.n	800390e <HAL_ADC_ConfigChannel+0x2d6>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	0e9b      	lsrs	r3, r3, #26
 8003908:	f003 031f 	and.w	r3, r3, #31
 800390c:	e016      	b.n	800393c <HAL_ADC_ConfigChannel+0x304>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800391a:	fa93 f3a3 	rbit	r3, r3
 800391e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003920:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003922:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003926:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800392e:	2320      	movs	r3, #32
 8003930:	e004      	b.n	800393c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8003932:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003936:	fab3 f383 	clz	r3, r3
 800393a:	b2db      	uxtb	r3, r3
 800393c:	429a      	cmp	r2, r3
 800393e:	d106      	bne.n	800394e <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2200      	movs	r2, #0
 8003946:	2102      	movs	r1, #2
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff fa7d 	bl	8002e48 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2103      	movs	r1, #3
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fa61 	bl	8002e1c <LL_ADC_GetOffsetChannel>
 800395a:	4603      	mov	r3, r0
 800395c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <HAL_ADC_ConfigChannel+0x342>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2103      	movs	r1, #3
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff fa56 	bl	8002e1c <LL_ADC_GetOffsetChannel>
 8003970:	4603      	mov	r3, r0
 8003972:	0e9b      	lsrs	r3, r3, #26
 8003974:	f003 021f 	and.w	r2, r3, #31
 8003978:	e017      	b.n	80039aa <HAL_ADC_ConfigChannel+0x372>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2103      	movs	r1, #3
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff fa4b 	bl	8002e1c <LL_ADC_GetOffsetChannel>
 8003986:	4603      	mov	r3, r0
 8003988:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800398c:	fa93 f3a3 	rbit	r3, r3
 8003990:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003994:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003996:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 800399c:	2320      	movs	r3, #32
 800399e:	e003      	b.n	80039a8 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80039a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039a2:	fab3 f383 	clz	r3, r3
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	461a      	mov	r2, r3
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d105      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x38a>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	0e9b      	lsrs	r3, r3, #26
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	e011      	b.n	80039e6 <HAL_ADC_ConfigChannel+0x3ae>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039ca:	fa93 f3a3 	rbit	r3, r3
 80039ce:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80039d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80039d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80039da:	2320      	movs	r3, #32
 80039dc:	e003      	b.n	80039e6 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80039de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e0:	fab3 f383 	clz	r3, r3
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d106      	bne.n	80039f8 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2200      	movs	r2, #0
 80039f0:	2103      	movs	r1, #3
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff fa28 	bl	8002e48 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fb43 	bl	8003088 <LL_ADC_IsEnabled>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f040 81c2 	bne.w	8003d8e <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6819      	ldr	r1, [r3, #0]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	461a      	mov	r2, r3
 8003a18:	f7ff fa9c 	bl	8002f54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4a8e      	ldr	r2, [pc, #568]	; (8003c5c <HAL_ADC_ConfigChannel+0x624>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	f040 8130 	bne.w	8003c88 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10b      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x418>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	0e9b      	lsrs	r3, r3, #26
 8003a3e:	3301      	adds	r3, #1
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	2b09      	cmp	r3, #9
 8003a46:	bf94      	ite	ls
 8003a48:	2301      	movls	r3, #1
 8003a4a:	2300      	movhi	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e019      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x44c>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a58:	fa93 f3a3 	rbit	r3, r3
 8003a5c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003a5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a60:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8003a68:	2320      	movs	r3, #32
 8003a6a:	e003      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8003a6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a6e:	fab3 f383 	clz	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	3301      	adds	r3, #1
 8003a76:	f003 031f 	and.w	r3, r3, #31
 8003a7a:	2b09      	cmp	r3, #9
 8003a7c:	bf94      	ite	ls
 8003a7e:	2301      	movls	r3, #1
 8003a80:	2300      	movhi	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d079      	beq.n	8003b7c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d107      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x46c>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	0e9b      	lsrs	r3, r3, #26
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	069b      	lsls	r3, r3, #26
 8003a9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aa2:	e015      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x498>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aac:	fa93 f3a3 	rbit	r3, r3
 8003ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003abc:	2320      	movs	r3, #32
 8003abe:	e003      	b.n	8003ac8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003ac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ac2:	fab3 f383 	clz	r3, r3
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	3301      	adds	r3, #1
 8003aca:	069b      	lsls	r3, r3, #26
 8003acc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d109      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x4b8>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	0e9b      	lsrs	r3, r3, #26
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	2101      	movs	r1, #1
 8003aea:	fa01 f303 	lsl.w	r3, r1, r3
 8003aee:	e017      	b.n	8003b20 <HAL_ADC_ConfigChannel+0x4e8>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003af8:	fa93 f3a3 	rbit	r3, r3
 8003afc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b00:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8003b08:	2320      	movs	r3, #32
 8003b0a:	e003      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b0e:	fab3 f383 	clz	r3, r3
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	3301      	adds	r3, #1
 8003b16:	f003 031f 	and.w	r3, r3, #31
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b20:	ea42 0103 	orr.w	r1, r2, r3
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x50e>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	0e9b      	lsrs	r3, r3, #26
 8003b36:	3301      	adds	r3, #1
 8003b38:	f003 021f 	and.w	r2, r3, #31
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	4413      	add	r3, r2
 8003b42:	051b      	lsls	r3, r3, #20
 8003b44:	e018      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x540>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4e:	fa93 f3a3 	rbit	r3, r3
 8003b52:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003b5e:	2320      	movs	r3, #32
 8003b60:	e003      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b64:	fab3 f383 	clz	r3, r3
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	f003 021f 	and.w	r2, r3, #31
 8003b70:	4613      	mov	r3, r2
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	4413      	add	r3, r2
 8003b76:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	e080      	b.n	8003c7e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d107      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x560>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	0e9b      	lsrs	r3, r3, #26
 8003b8e:	3301      	adds	r3, #1
 8003b90:	069b      	lsls	r3, r3, #26
 8003b92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b96:	e015      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x58c>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba0:	fa93 f3a3 	rbit	r3, r3
 8003ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8003bb0:	2320      	movs	r3, #32
 8003bb2:	e003      	b.n	8003bbc <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb6:	fab3 f383 	clz	r3, r3
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	069b      	lsls	r3, r3, #26
 8003bc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d109      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x5ac>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	0e9b      	lsrs	r3, r3, #26
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	2101      	movs	r1, #1
 8003bde:	fa01 f303 	lsl.w	r3, r1, r3
 8003be2:	e017      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x5dc>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	fa93 f3a3 	rbit	r3, r3
 8003bf0:	61fb      	str	r3, [r7, #28]
  return result;
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8003bfc:	2320      	movs	r3, #32
 8003bfe:	e003      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	fab3 f383 	clz	r3, r3
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	3301      	adds	r3, #1
 8003c0a:	f003 031f 	and.w	r3, r3, #31
 8003c0e:	2101      	movs	r1, #1
 8003c10:	fa01 f303 	lsl.w	r3, r1, r3
 8003c14:	ea42 0103 	orr.w	r1, r2, r3
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10d      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x608>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	0e9b      	lsrs	r3, r3, #26
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	f003 021f 	and.w	r2, r3, #31
 8003c30:	4613      	mov	r3, r2
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	4413      	add	r3, r2
 8003c36:	3b1e      	subs	r3, #30
 8003c38:	051b      	lsls	r3, r3, #20
 8003c3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c3e:	e01d      	b.n	8003c7c <HAL_ADC_ConfigChannel+0x644>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	fa93 f3a3 	rbit	r3, r3
 8003c4c:	613b      	str	r3, [r7, #16]
  return result;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d103      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8003c58:	2320      	movs	r3, #32
 8003c5a:	e005      	b.n	8003c68 <HAL_ADC_ConfigChannel+0x630>
 8003c5c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	fab3 f383 	clz	r3, r3
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	3301      	adds	r3, #1
 8003c6a:	f003 021f 	and.w	r2, r3, #31
 8003c6e:	4613      	mov	r3, r2
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	4413      	add	r3, r2
 8003c74:	3b1e      	subs	r3, #30
 8003c76:	051b      	lsls	r3, r3, #20
 8003c78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	6892      	ldr	r2, [r2, #8]
 8003c82:	4619      	mov	r1, r3
 8003c84:	f7ff f93a 	bl	8002efc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4b45      	ldr	r3, [pc, #276]	; (8003da4 <HAL_ADC_ConfigChannel+0x76c>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d07c      	beq.n	8003d8e <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c94:	4844      	ldr	r0, [pc, #272]	; (8003da8 <HAL_ADC_ConfigChannel+0x770>)
 8003c96:	f7ff f88f 	bl	8002db8 <LL_ADC_GetCommonPathInternalCh>
 8003c9a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c9e:	4843      	ldr	r0, [pc, #268]	; (8003dac <HAL_ADC_ConfigChannel+0x774>)
 8003ca0:	f7ff f9f2 	bl	8003088 <LL_ADC_IsEnabled>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d15e      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a40      	ldr	r2, [pc, #256]	; (8003db0 <HAL_ADC_ConfigChannel+0x778>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d127      	bne.n	8003d04 <HAL_ADC_ConfigChannel+0x6cc>
 8003cb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d121      	bne.n	8003d04 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a39      	ldr	r2, [pc, #228]	; (8003dac <HAL_ADC_ConfigChannel+0x774>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d161      	bne.n	8003d8e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003cca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4834      	ldr	r0, [pc, #208]	; (8003da8 <HAL_ADC_ConfigChannel+0x770>)
 8003cd6:	f7ff f85c 	bl	8002d92 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cda:	4b36      	ldr	r3, [pc, #216]	; (8003db4 <HAL_ADC_ConfigChannel+0x77c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	099b      	lsrs	r3, r3, #6
 8003ce0:	4a35      	ldr	r2, [pc, #212]	; (8003db8 <HAL_ADC_ConfigChannel+0x780>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	099b      	lsrs	r3, r3, #6
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	4613      	mov	r3, r2
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003cf4:	e002      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f9      	bne.n	8003cf6 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d02:	e044      	b.n	8003d8e <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a2c      	ldr	r2, [pc, #176]	; (8003dbc <HAL_ADC_ConfigChannel+0x784>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d113      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x6fe>
 8003d0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10d      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a23      	ldr	r2, [pc, #140]	; (8003dac <HAL_ADC_ConfigChannel+0x774>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d134      	bne.n	8003d8e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	481e      	ldr	r0, [pc, #120]	; (8003da8 <HAL_ADC_ConfigChannel+0x770>)
 8003d30:	f7ff f82f 	bl	8002d92 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d34:	e02b      	b.n	8003d8e <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a21      	ldr	r2, [pc, #132]	; (8003dc0 <HAL_ADC_ConfigChannel+0x788>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d126      	bne.n	8003d8e <HAL_ADC_ConfigChannel+0x756>
 8003d40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d120      	bne.n	8003d8e <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a16      	ldr	r2, [pc, #88]	; (8003dac <HAL_ADC_ConfigChannel+0x774>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d11b      	bne.n	8003d8e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003d56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d5e:	4619      	mov	r1, r3
 8003d60:	4811      	ldr	r0, [pc, #68]	; (8003da8 <HAL_ADC_ConfigChannel+0x770>)
 8003d62:	f7ff f816 	bl	8002d92 <LL_ADC_SetCommonPathInternalCh>
 8003d66:	e012      	b.n	8003d8e <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6c:	f043 0220 	orr.w	r2, r3, #32
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003d7a:	e008      	b.n	8003d8e <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d80:	f043 0220 	orr.w	r2, r3, #32
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8003d96:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	37d8      	adds	r7, #216	; 0xd8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	80080000 	.word	0x80080000
 8003da8:	50040300 	.word	0x50040300
 8003dac:	50040000 	.word	0x50040000
 8003db0:	c7520000 	.word	0xc7520000
 8003db4:	2000000c 	.word	0x2000000c
 8003db8:	053e2d63 	.word	0x053e2d63
 8003dbc:	cb840000 	.word	0xcb840000
 8003dc0:	80000001 	.word	0x80000001

08003dc4 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff f9a2 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 8003de0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff f9c3 	bl	8003172 <LL_ADC_INJ_IsConversionOngoing>
 8003dec:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d103      	bne.n	8003dfc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 8098 	beq.w	8003f2c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d02a      	beq.n	8003e60 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	7e5b      	ldrb	r3, [r3, #25]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d126      	bne.n	8003e60 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	7e1b      	ldrb	r3, [r3, #24]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d122      	bne.n	8003e60 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003e1e:	e014      	b.n	8003e4a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	4a45      	ldr	r2, [pc, #276]	; (8003f38 <ADC_ConversionStop+0x174>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d90d      	bls.n	8003e44 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2c:	f043 0210 	orr.w	r2, r3, #16
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e38:	f043 0201 	orr.w	r2, r3, #1
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e074      	b.n	8003f2e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	3301      	adds	r3, #1
 8003e48:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e54:	2b40      	cmp	r3, #64	; 0x40
 8003e56:	d1e3      	bne.n	8003e20 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2240      	movs	r2, #64	; 0x40
 8003e5e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d014      	beq.n	8003e90 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff f95a 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00c      	beq.n	8003e90 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff f917 	bl	80030ae <LL_ADC_IsDisableOngoing>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d104      	bne.n	8003e90 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff f936 	bl	80030fc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d014      	beq.n	8003ec0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff f969 	bl	8003172 <LL_ADC_INJ_IsConversionOngoing>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00c      	beq.n	8003ec0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff f8ff 	bl	80030ae <LL_ADC_IsDisableOngoing>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d104      	bne.n	8003ec0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff f945 	bl	800314a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d005      	beq.n	8003ed2 <ADC_ConversionStop+0x10e>
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d105      	bne.n	8003ed8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003ecc:	230c      	movs	r3, #12
 8003ece:	617b      	str	r3, [r7, #20]
        break;
 8003ed0:	e005      	b.n	8003ede <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003ed2:	2308      	movs	r3, #8
 8003ed4:	617b      	str	r3, [r7, #20]
        break;
 8003ed6:	e002      	b.n	8003ede <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003ed8:	2304      	movs	r3, #4
 8003eda:	617b      	str	r3, [r7, #20]
        break;
 8003edc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003ede:	f7fe ff15 	bl	8002d0c <HAL_GetTick>
 8003ee2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ee4:	e01b      	b.n	8003f1e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003ee6:	f7fe ff11 	bl	8002d0c <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b05      	cmp	r3, #5
 8003ef2:	d914      	bls.n	8003f1e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	4013      	ands	r3, r2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00d      	beq.n	8003f1e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f06:	f043 0210 	orr.w	r2, r3, #16
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f12:	f043 0201 	orr.w	r2, r3, #1
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e007      	b.n	8003f2e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	4013      	ands	r3, r2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1dc      	bne.n	8003ee6 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3720      	adds	r7, #32
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	a33fffff 	.word	0xa33fffff

08003f3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003f44:	2300      	movs	r3, #0
 8003f46:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff f89b 	bl	8003088 <LL_ADC_IsEnabled>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d15e      	bne.n	8004016 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	4b30      	ldr	r3, [pc, #192]	; (8004020 <ADC_Enable+0xe4>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00d      	beq.n	8003f82 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6a:	f043 0210 	orr.w	r2, r3, #16
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f76:	f043 0201 	orr.w	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e04a      	b.n	8004018 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff f856 	bl	8003038 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003f8c:	4825      	ldr	r0, [pc, #148]	; (8004024 <ADC_Enable+0xe8>)
 8003f8e:	f7fe ff13 	bl	8002db8 <LL_ADC_GetCommonPathInternalCh>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00f      	beq.n	8003fbc <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f9c:	4b22      	ldr	r3, [pc, #136]	; (8004028 <ADC_Enable+0xec>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	099b      	lsrs	r3, r3, #6
 8003fa2:	4a22      	ldr	r2, [pc, #136]	; (800402c <ADC_Enable+0xf0>)
 8003fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa8:	099b      	lsrs	r3, r3, #6
 8003faa:	3301      	adds	r3, #1
 8003fac:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003fae:	e002      	b.n	8003fb6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1f9      	bne.n	8003fb0 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003fbc:	f7fe fea6 	bl	8002d0c <HAL_GetTick>
 8003fc0:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fc2:	e021      	b.n	8004008 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff f85d 	bl	8003088 <LL_ADC_IsEnabled>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d104      	bne.n	8003fde <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff f82d 	bl	8003038 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003fde:	f7fe fe95 	bl	8002d0c <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d90d      	bls.n	8004008 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff0:	f043 0210 	orr.w	r2, r3, #16
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffc:	f043 0201 	orr.w	r2, r3, #1
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e007      	b.n	8004018 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b01      	cmp	r3, #1
 8004014:	d1d6      	bne.n	8003fc4 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	8000003f 	.word	0x8000003f
 8004024:	50040300 	.word	0x50040300
 8004028:	2000000c 	.word	0x2000000c
 800402c:	053e2d63 	.word	0x053e2d63

08004030 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff f836 	bl	80030ae <LL_ADC_IsDisableOngoing>
 8004042:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff f81d 	bl	8003088 <LL_ADC_IsEnabled>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d047      	beq.n	80040e4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d144      	bne.n	80040e4 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 030d 	and.w	r3, r3, #13
 8004064:	2b01      	cmp	r3, #1
 8004066:	d10c      	bne.n	8004082 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f7fe fff7 	bl	8003060 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2203      	movs	r2, #3
 8004078:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800407a:	f7fe fe47 	bl	8002d0c <HAL_GetTick>
 800407e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004080:	e029      	b.n	80040d6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	f043 0210 	orr.w	r2, r3, #16
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004092:	f043 0201 	orr.w	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e023      	b.n	80040e6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800409e:	f7fe fe35 	bl	8002d0c <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d914      	bls.n	80040d6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00d      	beq.n	80040d6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040be:	f043 0210 	orr.w	r2, r3, #16
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	f043 0201 	orr.w	r2, r3, #1
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e007      	b.n	80040e6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1dc      	bne.n	800409e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b084      	sub	sp, #16
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004100:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004104:	2b00      	cmp	r3, #0
 8004106:	d14b      	bne.n	80041a0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	2b00      	cmp	r3, #0
 8004120:	d021      	beq.n	8004166 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f7fe fea9 	bl	8002e7e <LL_ADC_REG_IsTriggerSourceSWStart>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d032      	beq.n	8004198 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d12b      	bne.n	8004198 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d11f      	bne.n	8004198 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415c:	f043 0201 	orr.w	r2, r3, #1
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	655a      	str	r2, [r3, #84]	; 0x54
 8004164:	e018      	b.n	8004198 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d111      	bne.n	8004198 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004178:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d105      	bne.n	8004198 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004190:	f043 0201 	orr.w	r2, r3, #1
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f7ff fa2e 	bl	80035fa <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800419e:	e00e      	b.n	80041be <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f7ff fa38 	bl	8003622 <HAL_ADC_ErrorCallback>
}
 80041b2:	e004      	b.n	80041be <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	4798      	blx	r3
}
 80041be:	bf00      	nop
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b084      	sub	sp, #16
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f7ff fa1a 	bl	800360e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041da:	bf00      	nop
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004200:	f043 0204 	orr.w	r2, r3, #4
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f7ff fa0a 	bl	8003622 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800420e:	bf00      	nop
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004228:	4b0c      	ldr	r3, [pc, #48]	; (800425c <__NVIC_SetPriorityGrouping+0x44>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004234:	4013      	ands	r3, r2
 8004236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800424a:	4a04      	ldr	r2, [pc, #16]	; (800425c <__NVIC_SetPriorityGrouping+0x44>)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	60d3      	str	r3, [r2, #12]
}
 8004250:	bf00      	nop
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	e000ed00 	.word	0xe000ed00

08004260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004264:	4b04      	ldr	r3, [pc, #16]	; (8004278 <__NVIC_GetPriorityGrouping+0x18>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	0a1b      	lsrs	r3, r3, #8
 800426a:	f003 0307 	and.w	r3, r3, #7
}
 800426e:	4618      	mov	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	e000ed00 	.word	0xe000ed00

0800427c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428a:	2b00      	cmp	r3, #0
 800428c:	db0b      	blt.n	80042a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	f003 021f 	and.w	r2, r3, #31
 8004294:	4907      	ldr	r1, [pc, #28]	; (80042b4 <__NVIC_EnableIRQ+0x38>)
 8004296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429a:	095b      	lsrs	r3, r3, #5
 800429c:	2001      	movs	r0, #1
 800429e:	fa00 f202 	lsl.w	r2, r0, r2
 80042a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	e000e100 	.word	0xe000e100

080042b8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	4603      	mov	r3, r0
 80042c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	db0c      	blt.n	80042e4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ca:	79fb      	ldrb	r3, [r7, #7]
 80042cc:	f003 021f 	and.w	r2, r3, #31
 80042d0:	4907      	ldr	r1, [pc, #28]	; (80042f0 <__NVIC_SetPendingIRQ+0x38>)
 80042d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	2001      	movs	r0, #1
 80042da:	fa00 f202 	lsl.w	r2, r0, r2
 80042de:	3340      	adds	r3, #64	; 0x40
 80042e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	e000e100 	.word	0xe000e100

080042f4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004302:	2b00      	cmp	r3, #0
 8004304:	db0c      	blt.n	8004320 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004306:	79fb      	ldrb	r3, [r7, #7]
 8004308:	f003 021f 	and.w	r2, r3, #31
 800430c:	4907      	ldr	r1, [pc, #28]	; (800432c <__NVIC_ClearPendingIRQ+0x38>)
 800430e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	2001      	movs	r0, #1
 8004316:	fa00 f202 	lsl.w	r2, r0, r2
 800431a:	3360      	adds	r3, #96	; 0x60
 800431c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	e000e100 	.word	0xe000e100

08004330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	4603      	mov	r3, r0
 8004338:	6039      	str	r1, [r7, #0]
 800433a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800433c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004340:	2b00      	cmp	r3, #0
 8004342:	db0a      	blt.n	800435a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	b2da      	uxtb	r2, r3
 8004348:	490c      	ldr	r1, [pc, #48]	; (800437c <__NVIC_SetPriority+0x4c>)
 800434a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434e:	0112      	lsls	r2, r2, #4
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	440b      	add	r3, r1
 8004354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004358:	e00a      	b.n	8004370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	b2da      	uxtb	r2, r3
 800435e:	4908      	ldr	r1, [pc, #32]	; (8004380 <__NVIC_SetPriority+0x50>)
 8004360:	79fb      	ldrb	r3, [r7, #7]
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	3b04      	subs	r3, #4
 8004368:	0112      	lsls	r2, r2, #4
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	440b      	add	r3, r1
 800436e:	761a      	strb	r2, [r3, #24]
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	e000e100 	.word	0xe000e100
 8004380:	e000ed00 	.word	0xe000ed00

08004384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004384:	b480      	push	{r7}
 8004386:	b089      	sub	sp, #36	; 0x24
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f1c3 0307 	rsb	r3, r3, #7
 800439e:	2b04      	cmp	r3, #4
 80043a0:	bf28      	it	cs
 80043a2:	2304      	movcs	r3, #4
 80043a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	3304      	adds	r3, #4
 80043aa:	2b06      	cmp	r3, #6
 80043ac:	d902      	bls.n	80043b4 <NVIC_EncodePriority+0x30>
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	3b03      	subs	r3, #3
 80043b2:	e000      	b.n	80043b6 <NVIC_EncodePriority+0x32>
 80043b4:	2300      	movs	r3, #0
 80043b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043b8:	f04f 32ff 	mov.w	r2, #4294967295
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	43da      	mvns	r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	401a      	ands	r2, r3
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043cc:	f04f 31ff 	mov.w	r1, #4294967295
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	fa01 f303 	lsl.w	r3, r1, r3
 80043d6:	43d9      	mvns	r1, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043dc:	4313      	orrs	r3, r2
         );
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3724      	adds	r7, #36	; 0x24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
	...

080043ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043fc:	d301      	bcc.n	8004402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043fe:	2301      	movs	r3, #1
 8004400:	e00f      	b.n	8004422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004402:	4a0a      	ldr	r2, [pc, #40]	; (800442c <SysTick_Config+0x40>)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3b01      	subs	r3, #1
 8004408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800440a:	210f      	movs	r1, #15
 800440c:	f04f 30ff 	mov.w	r0, #4294967295
 8004410:	f7ff ff8e 	bl	8004330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004414:	4b05      	ldr	r3, [pc, #20]	; (800442c <SysTick_Config+0x40>)
 8004416:	2200      	movs	r2, #0
 8004418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800441a:	4b04      	ldr	r3, [pc, #16]	; (800442c <SysTick_Config+0x40>)
 800441c:	2207      	movs	r2, #7
 800441e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	e000e010 	.word	0xe000e010

08004430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7ff feed 	bl	8004218 <__NVIC_SetPriorityGrouping>
}
 800443e:	bf00      	nop
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b086      	sub	sp, #24
 800444a:	af00      	add	r7, sp, #0
 800444c:	4603      	mov	r3, r0
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	607a      	str	r2, [r7, #4]
 8004452:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004454:	f7ff ff04 	bl	8004260 <__NVIC_GetPriorityGrouping>
 8004458:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	68b9      	ldr	r1, [r7, #8]
 800445e:	6978      	ldr	r0, [r7, #20]
 8004460:	f7ff ff90 	bl	8004384 <NVIC_EncodePriority>
 8004464:	4602      	mov	r2, r0
 8004466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800446a:	4611      	mov	r1, r2
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff ff5f 	bl	8004330 <__NVIC_SetPriority>
}
 8004472:	bf00      	nop
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b082      	sub	sp, #8
 800447e:	af00      	add	r7, sp, #0
 8004480:	4603      	mov	r3, r0
 8004482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff fef7 	bl	800427c <__NVIC_EnableIRQ>
}
 800448e:	bf00      	nop
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b082      	sub	sp, #8
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7ff ffa4 	bl	80043ec <SysTick_Config>
 80044a4:	4603      	mov	r3, r0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	4603      	mov	r3, r0
 80044b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80044b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fefb 	bl	80042b8 <__NVIC_SetPendingIRQ>
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	4603      	mov	r3, r0
 80044d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80044d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff ff0b 	bl	80042f4 <__NVIC_ClearPendingIRQ>
}
 80044de:	bf00      	nop
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e08e      	b.n	8004618 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	4b47      	ldr	r3, [pc, #284]	; (8004620 <HAL_DMA_Init+0x138>)
 8004502:	429a      	cmp	r2, r3
 8004504:	d80f      	bhi.n	8004526 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	461a      	mov	r2, r3
 800450c:	4b45      	ldr	r3, [pc, #276]	; (8004624 <HAL_DMA_Init+0x13c>)
 800450e:	4413      	add	r3, r2
 8004510:	4a45      	ldr	r2, [pc, #276]	; (8004628 <HAL_DMA_Init+0x140>)
 8004512:	fba2 2303 	umull	r2, r3, r2, r3
 8004516:	091b      	lsrs	r3, r3, #4
 8004518:	009a      	lsls	r2, r3, #2
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a42      	ldr	r2, [pc, #264]	; (800462c <HAL_DMA_Init+0x144>)
 8004522:	641a      	str	r2, [r3, #64]	; 0x40
 8004524:	e00e      	b.n	8004544 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	4b40      	ldr	r3, [pc, #256]	; (8004630 <HAL_DMA_Init+0x148>)
 800452e:	4413      	add	r3, r2
 8004530:	4a3d      	ldr	r2, [pc, #244]	; (8004628 <HAL_DMA_Init+0x140>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	091b      	lsrs	r3, r3, #4
 8004538:	009a      	lsls	r2, r3, #2
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a3c      	ldr	r2, [pc, #240]	; (8004634 <HAL_DMA_Init+0x14c>)
 8004542:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800455a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004568:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004574:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004580:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fa16 	bl	80049c8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045a4:	d102      	bne.n	80045ac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80045b8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045c2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d010      	beq.n	80045ee <HAL_DMA_Init+0x106>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d80c      	bhi.n	80045ee <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fa35 	bl	8004a44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80045ea:	605a      	str	r2, [r3, #4]
 80045ec:	e008      	b.n	8004600 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40020407 	.word	0x40020407
 8004624:	bffdfff8 	.word	0xbffdfff8
 8004628:	cccccccd 	.word	0xcccccccd
 800462c:	40020000 	.word	0x40020000
 8004630:	bffdfbf8 	.word	0xbffdfbf8
 8004634:	40020400 	.word	0x40020400

08004638 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_DMA_Start_IT+0x20>
 8004654:	2302      	movs	r3, #2
 8004656:	e066      	b.n	8004726 <HAL_DMA_Start_IT+0xee>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b01      	cmp	r3, #1
 800466a:	d155      	bne.n	8004718 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0201 	bic.w	r2, r2, #1
 8004688:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	68b9      	ldr	r1, [r7, #8]
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f95a 	bl	800494a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	2b00      	cmp	r3, #0
 800469c:	d008      	beq.n	80046b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f042 020e 	orr.w	r2, r2, #14
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	e00f      	b.n	80046d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0204 	bic.w	r2, r2, #4
 80046be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 020a 	orr.w	r2, r2, #10
 80046ce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d007      	beq.n	80046ee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d007      	beq.n	8004706 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004700:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004704:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f042 0201 	orr.w	r2, r2, #1
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	e005      	b.n	8004724 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004720:	2302      	movs	r3, #2
 8004722:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004724:	7dfb      	ldrb	r3, [r7, #23]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e04f      	b.n	80047e0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d008      	beq.n	800475e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2204      	movs	r2, #4
 8004750:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e040      	b.n	80047e0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 020e 	bic.w	r2, r2, #14
 800476c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800477c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0201 	bic.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004792:	f003 021c 	and.w	r2, r3, #28
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	2101      	movs	r1, #1
 800479c:	fa01 f202 	lsl.w	r2, r1, r2
 80047a0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80047aa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00c      	beq.n	80047ce <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80047cc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004808:	f003 031c 	and.w	r3, r3, #28
 800480c:	2204      	movs	r2, #4
 800480e:	409a      	lsls	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4013      	ands	r3, r2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d026      	beq.n	8004866 <HAL_DMA_IRQHandler+0x7a>
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f003 0304 	and.w	r3, r3, #4
 800481e:	2b00      	cmp	r3, #0
 8004820:	d021      	beq.n	8004866 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0320 	and.w	r3, r3, #32
 800482c:	2b00      	cmp	r3, #0
 800482e:	d107      	bne.n	8004840 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0204 	bic.w	r2, r2, #4
 800483e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004844:	f003 021c 	and.w	r2, r3, #28
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	2104      	movs	r1, #4
 800484e:	fa01 f202 	lsl.w	r2, r1, r2
 8004852:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004858:	2b00      	cmp	r3, #0
 800485a:	d071      	beq.n	8004940 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004864:	e06c      	b.n	8004940 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486a:	f003 031c 	and.w	r3, r3, #28
 800486e:	2202      	movs	r2, #2
 8004870:	409a      	lsls	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4013      	ands	r3, r2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d02e      	beq.n	80048d8 <HAL_DMA_IRQHandler+0xec>
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d029      	beq.n	80048d8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0320 	and.w	r3, r3, #32
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10b      	bne.n	80048aa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 020a 	bic.w	r2, r2, #10
 80048a0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ae:	f003 021c 	and.w	r2, r3, #28
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	2102      	movs	r1, #2
 80048b8:	fa01 f202 	lsl.w	r2, r1, r2
 80048bc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d038      	beq.n	8004940 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80048d6:	e033      	b.n	8004940 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048dc:	f003 031c 	and.w	r3, r3, #28
 80048e0:	2208      	movs	r2, #8
 80048e2:	409a      	lsls	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4013      	ands	r3, r2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d02a      	beq.n	8004942 <HAL_DMA_IRQHandler+0x156>
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d025      	beq.n	8004942 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 020e 	bic.w	r2, r2, #14
 8004904:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490a:	f003 021c 	and.w	r2, r3, #28
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	2101      	movs	r1, #1
 8004914:	fa01 f202 	lsl.w	r2, r1, r2
 8004918:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004934:	2b00      	cmp	r3, #0
 8004936:	d004      	beq.n	8004942 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004940:	bf00      	nop
 8004942:	bf00      	nop
}
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800494a:	b480      	push	{r7}
 800494c:	b085      	sub	sp, #20
 800494e:	af00      	add	r7, sp, #0
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	607a      	str	r2, [r7, #4]
 8004956:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004960:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004966:	2b00      	cmp	r3, #0
 8004968:	d004      	beq.n	8004974 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004972:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004978:	f003 021c 	and.w	r2, r3, #28
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	2101      	movs	r1, #1
 8004982:	fa01 f202 	lsl.w	r2, r1, r2
 8004986:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	2b10      	cmp	r3, #16
 8004996:	d108      	bne.n	80049aa <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80049a8:	e007      	b.n	80049ba <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	60da      	str	r2, [r3, #12]
}
 80049ba:	bf00      	nop
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
	...

080049c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	461a      	mov	r2, r3
 80049d6:	4b17      	ldr	r3, [pc, #92]	; (8004a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80049d8:	429a      	cmp	r2, r3
 80049da:	d80a      	bhi.n	80049f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e0:	089b      	lsrs	r3, r3, #2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80049e8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6493      	str	r3, [r2, #72]	; 0x48
 80049f0:	e007      	b.n	8004a02 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f6:	089b      	lsrs	r3, r3, #2
 80049f8:	009a      	lsls	r2, r3, #2
 80049fa:	4b0f      	ldr	r3, [pc, #60]	; (8004a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80049fc:	4413      	add	r3, r2
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	3b08      	subs	r3, #8
 8004a0a:	4a0c      	ldr	r2, [pc, #48]	; (8004a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a10:	091b      	lsrs	r3, r3, #4
 8004a12:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a0a      	ldr	r2, [pc, #40]	; (8004a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004a18:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f003 031f 	and.w	r3, r3, #31
 8004a20:	2201      	movs	r2, #1
 8004a22:	409a      	lsls	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a28:	bf00      	nop
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	40020407 	.word	0x40020407
 8004a38:	4002081c 	.word	0x4002081c
 8004a3c:	cccccccd 	.word	0xcccccccd
 8004a40:	40020880 	.word	0x40020880

08004a44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a54:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	461a      	mov	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a09      	ldr	r2, [pc, #36]	; (8004a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004a68:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	2201      	movs	r2, #1
 8004a74:	409a      	lsls	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004a7a:	bf00      	nop
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	1000823f 	.word	0x1000823f
 8004a8c:	40020940 	.word	0x40020940

08004a90 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a9e:	e146      	b.n	8004d2e <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8004aac:	4013      	ands	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 8138 	beq.w	8004d28 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f003 0303 	and.w	r3, r3, #3
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d005      	beq.n	8004ad0 <HAL_GPIO_Init+0x40>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f003 0303 	and.w	r3, r3, #3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d130      	bne.n	8004b32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	2203      	movs	r2, #3
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	43db      	mvns	r3, r3
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b06:	2201      	movs	r2, #1
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4013      	ands	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	091b      	lsrs	r3, r3, #4
 8004b1c:	f003 0201 	and.w	r2, r3, #1
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d017      	beq.n	8004b6e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	2203      	movs	r2, #3
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4013      	ands	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	689a      	ldr	r2, [r3, #8]
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d123      	bne.n	8004bc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	08da      	lsrs	r2, r3, #3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	3208      	adds	r2, #8
 8004b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	220f      	movs	r2, #15
 8004b92:	fa02 f303 	lsl.w	r3, r2, r3
 8004b96:	43db      	mvns	r3, r3
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	691a      	ldr	r2, [r3, #16]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	08da      	lsrs	r2, r3, #3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3208      	adds	r2, #8
 8004bbc:	6939      	ldr	r1, [r7, #16]
 8004bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	2203      	movs	r2, #3
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f003 0203 	and.w	r2, r3, #3
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 8092 	beq.w	8004d28 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004c04:	4a51      	ldr	r2, [pc, #324]	; (8004d4c <HAL_GPIO_Init+0x2bc>)
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	089b      	lsrs	r3, r3, #2
 8004c0a:	3302      	adds	r3, #2
 8004c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f003 0303 	and.w	r3, r3, #3
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	220f      	movs	r2, #15
 8004c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c20:	43db      	mvns	r3, r3
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4013      	ands	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c2e:	d013      	beq.n	8004c58 <HAL_GPIO_Init+0x1c8>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a47      	ldr	r2, [pc, #284]	; (8004d50 <HAL_GPIO_Init+0x2c0>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00d      	beq.n	8004c54 <HAL_GPIO_Init+0x1c4>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a46      	ldr	r2, [pc, #280]	; (8004d54 <HAL_GPIO_Init+0x2c4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d007      	beq.n	8004c50 <HAL_GPIO_Init+0x1c0>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a45      	ldr	r2, [pc, #276]	; (8004d58 <HAL_GPIO_Init+0x2c8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d101      	bne.n	8004c4c <HAL_GPIO_Init+0x1bc>
 8004c48:	2304      	movs	r3, #4
 8004c4a:	e006      	b.n	8004c5a <HAL_GPIO_Init+0x1ca>
 8004c4c:	2307      	movs	r3, #7
 8004c4e:	e004      	b.n	8004c5a <HAL_GPIO_Init+0x1ca>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e002      	b.n	8004c5a <HAL_GPIO_Init+0x1ca>
 8004c54:	2301      	movs	r3, #1
 8004c56:	e000      	b.n	8004c5a <HAL_GPIO_Init+0x1ca>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	f002 0203 	and.w	r2, r2, #3
 8004c60:	0092      	lsls	r2, r2, #2
 8004c62:	4093      	lsls	r3, r2
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c6a:	4938      	ldr	r1, [pc, #224]	; (8004d4c <HAL_GPIO_Init+0x2bc>)
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	089b      	lsrs	r3, r3, #2
 8004c70:	3302      	adds	r3, #2
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c78:	4b38      	ldr	r3, [pc, #224]	; (8004d5c <HAL_GPIO_Init+0x2cc>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	43db      	mvns	r3, r3
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	4013      	ands	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c9c:	4a2f      	ldr	r2, [pc, #188]	; (8004d5c <HAL_GPIO_Init+0x2cc>)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004ca2:	4b2e      	ldr	r3, [pc, #184]	; (8004d5c <HAL_GPIO_Init+0x2cc>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	43db      	mvns	r3, r3
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004cc6:	4a25      	ldr	r2, [pc, #148]	; (8004d5c <HAL_GPIO_Init+0x2cc>)
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004ccc:	4b23      	ldr	r3, [pc, #140]	; (8004d5c <HAL_GPIO_Init+0x2cc>)
 8004cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004cf2:	4a1a      	ldr	r2, [pc, #104]	; (8004d5c <HAL_GPIO_Init+0x2cc>)
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004cfa:	4b18      	ldr	r3, [pc, #96]	; (8004d5c <HAL_GPIO_Init+0x2cc>)
 8004cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	43db      	mvns	r3, r3
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d20:	4a0e      	ldr	r2, [pc, #56]	; (8004d5c <HAL_GPIO_Init+0x2cc>)
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	fa22 f303 	lsr.w	r3, r2, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f47f aeb1 	bne.w	8004aa0 <HAL_GPIO_Init+0x10>
  }
}
 8004d3e:	bf00      	nop
 8004d40:	bf00      	nop
 8004d42:	371c      	adds	r7, #28
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	40010000 	.word	0x40010000
 8004d50:	48000400 	.word	0x48000400
 8004d54:	48000800 	.word	0x48000800
 8004d58:	48001000 	.word	0x48001000
 8004d5c:	58000800 	.word	0x58000800

08004d60 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	887b      	ldrh	r3, [r7, #2]
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	73fb      	strb	r3, [r7, #15]
 8004d7c:	e001      	b.n	8004d82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	807b      	strh	r3, [r7, #2]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004da0:	787b      	ldrb	r3, [r7, #1]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004da6:	887a      	ldrh	r2, [r7, #2]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004dac:	e002      	b.n	8004db4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004dae:	887a      	ldrh	r2, [r7, #2]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004dca:	4b08      	ldr	r3, [pc, #32]	; (8004dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	88fb      	ldrh	r3, [r7, #6]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d006      	beq.n	8004de4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004dd6:	4a05      	ldr	r2, [pc, #20]	; (8004dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dd8:	88fb      	ldrh	r3, [r7, #6]
 8004dda:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ddc:	88fb      	ldrh	r3, [r7, #6]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fc ff8e 	bl	8001d00 <HAL_GPIO_EXTI_Callback>
  }
}
 8004de4:	bf00      	nop
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	58000800 	.word	0x58000800

08004df0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004df6:	4b0a      	ldr	r3, [pc, #40]	; (8004e20 <HAL_HSEM_IRQHandler+0x30>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004dfc:	4b08      	ldr	r3, [pc, #32]	; (8004e20 <HAL_HSEM_IRQHandler+0x30>)
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	43db      	mvns	r3, r3
 8004e04:	4906      	ldr	r1, [pc, #24]	; (8004e20 <HAL_HSEM_IRQHandler+0x30>)
 8004e06:	4013      	ands	r3, r2
 8004e08:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004e0a:	4a05      	ldr	r2, [pc, #20]	; (8004e20 <HAL_HSEM_IRQHandler+0x30>)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f807 	bl	8004e24 <HAL_HSEM_FreeCallback>
}
 8004e16:	bf00      	nop
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	58001500 	.word	0x58001500

08004e24 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e081      	b.n	8004f4e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7fd fc52 	bl	8002708 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2224      	movs	r2, #36	; 0x24
 8004e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0201 	bic.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d107      	bne.n	8004eb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eae:	609a      	str	r2, [r3, #8]
 8004eb0:	e006      	b.n	8004ec0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689a      	ldr	r2, [r3, #8]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004ebe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d104      	bne.n	8004ed2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ed0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6812      	ldr	r2, [r2, #0]
 8004edc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ee4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ef4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691a      	ldr	r2, [r3, #16]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	69d9      	ldr	r1, [r3, #28]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a1a      	ldr	r2, [r3, #32]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0201 	orr.w	r2, r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
	...

08004f58 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af02      	add	r7, sp, #8
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	607a      	str	r2, [r7, #4]
 8004f62:	461a      	mov	r2, r3
 8004f64:	460b      	mov	r3, r1
 8004f66:	817b      	strh	r3, [r7, #10]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b20      	cmp	r3, #32
 8004f76:	f040 80da 	bne.w	800512e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_I2C_Master_Transmit+0x30>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e0d3      	b.n	8005130 <HAL_I2C_Master_Transmit+0x1d8>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f90:	f7fd febc 	bl	8002d0c <HAL_GetTick>
 8004f94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	2319      	movs	r3, #25
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 fc5c 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e0be      	b.n	8005130 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2221      	movs	r2, #33	; 0x21
 8004fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2210      	movs	r2, #16
 8004fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	893a      	ldrh	r2, [r7, #8]
 8004fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	2bff      	cmp	r3, #255	; 0xff
 8004fe2:	d90e      	bls.n	8005002 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	22ff      	movs	r2, #255	; 0xff
 8004fe8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	8979      	ldrh	r1, [r7, #10]
 8004ff2:	4b51      	ldr	r3, [pc, #324]	; (8005138 <HAL_I2C_Master_Transmit+0x1e0>)
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 fe6c 	bl	8005cd8 <I2C_TransferConfig>
 8005000:	e06c      	b.n	80050dc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005006:	b29a      	uxth	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005010:	b2da      	uxtb	r2, r3
 8005012:	8979      	ldrh	r1, [r7, #10]
 8005014:	4b48      	ldr	r3, [pc, #288]	; (8005138 <HAL_I2C_Master_Transmit+0x1e0>)
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 fe5b 	bl	8005cd8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005022:	e05b      	b.n	80050dc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	6a39      	ldr	r1, [r7, #32]
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 fc68 	bl	80058fe <I2C_WaitOnTXISFlagUntilTimeout>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e07b      	b.n	8005130 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	781a      	ldrb	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005052:	b29b      	uxth	r3, r3
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005060:	3b01      	subs	r3, #1
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d034      	beq.n	80050dc <HAL_I2C_Master_Transmit+0x184>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005076:	2b00      	cmp	r3, #0
 8005078:	d130      	bne.n	80050dc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	2200      	movs	r2, #0
 8005082:	2180      	movs	r1, #128	; 0x80
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 fbeb 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e04d      	b.n	8005130 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005098:	b29b      	uxth	r3, r3
 800509a:	2bff      	cmp	r3, #255	; 0xff
 800509c:	d90e      	bls.n	80050bc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	22ff      	movs	r2, #255	; 0xff
 80050a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	8979      	ldrh	r1, [r7, #10]
 80050ac:	2300      	movs	r3, #0
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 fe0f 	bl	8005cd8 <I2C_TransferConfig>
 80050ba:	e00f      	b.n	80050dc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	8979      	ldrh	r1, [r7, #10]
 80050ce:	2300      	movs	r3, #0
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 fdfe 	bl	8005cd8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d19e      	bne.n	8005024 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	6a39      	ldr	r1, [r7, #32]
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 fc4e 	bl	800598c <I2C_WaitOnSTOPFlagUntilTimeout>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e01a      	b.n	8005130 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2220      	movs	r2, #32
 8005100:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6859      	ldr	r1, [r3, #4]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	4b0b      	ldr	r3, [pc, #44]	; (800513c <HAL_I2C_Master_Transmit+0x1e4>)
 800510e:	400b      	ands	r3, r1
 8005110:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2220      	movs	r2, #32
 8005116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	e000      	b.n	8005130 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800512e:	2302      	movs	r3, #2
  }
}
 8005130:	4618      	mov	r0, r3
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	80002000 	.word	0x80002000
 800513c:	fe00e800 	.word	0xfe00e800

08005140 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af02      	add	r7, sp, #8
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	607a      	str	r2, [r7, #4]
 800514a:	461a      	mov	r2, r3
 800514c:	460b      	mov	r3, r1
 800514e:	817b      	strh	r3, [r7, #10]
 8005150:	4613      	mov	r3, r2
 8005152:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b20      	cmp	r3, #32
 800515e:	f040 80db 	bne.w	8005318 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_I2C_Master_Receive+0x30>
 800516c:	2302      	movs	r3, #2
 800516e:	e0d4      	b.n	800531a <HAL_I2C_Master_Receive+0x1da>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005178:	f7fd fdc8 	bl	8002d0c <HAL_GetTick>
 800517c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	2319      	movs	r3, #25
 8005184:	2201      	movs	r2, #1
 8005186:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 fb68 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e0bf      	b.n	800531a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2222      	movs	r2, #34	; 0x22
 800519e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2210      	movs	r2, #16
 80051a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	893a      	ldrh	r2, [r7, #8]
 80051ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	2bff      	cmp	r3, #255	; 0xff
 80051ca:	d90e      	bls.n	80051ea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	22ff      	movs	r2, #255	; 0xff
 80051d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	8979      	ldrh	r1, [r7, #10]
 80051da:	4b52      	ldr	r3, [pc, #328]	; (8005324 <HAL_I2C_Master_Receive+0x1e4>)
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 fd78 	bl	8005cd8 <I2C_TransferConfig>
 80051e8:	e06d      	b.n	80052c6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	8979      	ldrh	r1, [r7, #10]
 80051fc:	4b49      	ldr	r3, [pc, #292]	; (8005324 <HAL_I2C_Master_Receive+0x1e4>)
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 fd67 	bl	8005cd8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800520a:	e05c      	b.n	80052c6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	6a39      	ldr	r1, [r7, #32]
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 fbff 	bl	8005a14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e07c      	b.n	800531a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523c:	3b01      	subs	r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005248:	b29b      	uxth	r3, r3
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005256:	b29b      	uxth	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d034      	beq.n	80052c6 <HAL_I2C_Master_Receive+0x186>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005260:	2b00      	cmp	r3, #0
 8005262:	d130      	bne.n	80052c6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	2200      	movs	r2, #0
 800526c:	2180      	movs	r1, #128	; 0x80
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 faf6 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e04d      	b.n	800531a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005282:	b29b      	uxth	r3, r3
 8005284:	2bff      	cmp	r3, #255	; 0xff
 8005286:	d90e      	bls.n	80052a6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	22ff      	movs	r2, #255	; 0xff
 800528c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005292:	b2da      	uxtb	r2, r3
 8005294:	8979      	ldrh	r1, [r7, #10]
 8005296:	2300      	movs	r3, #0
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 fd1a 	bl	8005cd8 <I2C_TransferConfig>
 80052a4:	e00f      	b.n	80052c6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	8979      	ldrh	r1, [r7, #10]
 80052b8:	2300      	movs	r3, #0
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 fd09 	bl	8005cd8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d19d      	bne.n	800520c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	6a39      	ldr	r1, [r7, #32]
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 fb59 	bl	800598c <I2C_WaitOnSTOPFlagUntilTimeout>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e01a      	b.n	800531a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2220      	movs	r2, #32
 80052ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6859      	ldr	r1, [r3, #4]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	4b0c      	ldr	r3, [pc, #48]	; (8005328 <HAL_I2C_Master_Receive+0x1e8>)
 80052f8:	400b      	ands	r3, r1
 80052fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2220      	movs	r2, #32
 8005300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005314:	2300      	movs	r3, #0
 8005316:	e000      	b.n	800531a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005318:	2302      	movs	r3, #2
  }
}
 800531a:	4618      	mov	r0, r3
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	80002400 	.word	0x80002400
 8005328:	fe00e800 	.word	0xfe00e800

0800532c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b088      	sub	sp, #32
 8005330:	af02      	add	r7, sp, #8
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	4608      	mov	r0, r1
 8005336:	4611      	mov	r1, r2
 8005338:	461a      	mov	r2, r3
 800533a:	4603      	mov	r3, r0
 800533c:	817b      	strh	r3, [r7, #10]
 800533e:	460b      	mov	r3, r1
 8005340:	813b      	strh	r3, [r7, #8]
 8005342:	4613      	mov	r3, r2
 8005344:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b20      	cmp	r3, #32
 8005350:	f040 80fd 	bne.w	800554e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <HAL_I2C_Mem_Read+0x34>
 800535a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800535c:	2b00      	cmp	r3, #0
 800535e:	d105      	bne.n	800536c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005366:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e0f1      	b.n	8005550 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <HAL_I2C_Mem_Read+0x4e>
 8005376:	2302      	movs	r3, #2
 8005378:	e0ea      	b.n	8005550 <HAL_I2C_Mem_Read+0x224>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005382:	f7fd fcc3 	bl	8002d0c <HAL_GetTick>
 8005386:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	2319      	movs	r3, #25
 800538e:	2201      	movs	r2, #1
 8005390:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 fa63 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e0d5      	b.n	8005550 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2222      	movs	r2, #34	; 0x22
 80053a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2240      	movs	r2, #64	; 0x40
 80053b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6a3a      	ldr	r2, [r7, #32]
 80053be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80053c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053cc:	88f8      	ldrh	r0, [r7, #6]
 80053ce:	893a      	ldrh	r2, [r7, #8]
 80053d0:	8979      	ldrh	r1, [r7, #10]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	9301      	str	r3, [sp, #4]
 80053d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	4603      	mov	r3, r0
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 f9c7 	bl	8005770 <I2C_RequestMemoryRead>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d005      	beq.n	80053f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e0ad      	b.n	8005550 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	2bff      	cmp	r3, #255	; 0xff
 80053fc:	d90e      	bls.n	800541c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	22ff      	movs	r2, #255	; 0xff
 8005402:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005408:	b2da      	uxtb	r2, r3
 800540a:	8979      	ldrh	r1, [r7, #10]
 800540c:	4b52      	ldr	r3, [pc, #328]	; (8005558 <HAL_I2C_Mem_Read+0x22c>)
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 fc5f 	bl	8005cd8 <I2C_TransferConfig>
 800541a:	e00f      	b.n	800543c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542a:	b2da      	uxtb	r2, r3
 800542c:	8979      	ldrh	r1, [r7, #10]
 800542e:	4b4a      	ldr	r3, [pc, #296]	; (8005558 <HAL_I2C_Mem_Read+0x22c>)
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 fc4e 	bl	8005cd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	2200      	movs	r2, #0
 8005444:	2104      	movs	r1, #4
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 fa0a 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e07c      	b.n	8005550 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	b2d2      	uxtb	r2, r2
 8005462:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005472:	3b01      	subs	r3, #1
 8005474:	b29a      	uxth	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547e:	b29b      	uxth	r3, r3
 8005480:	3b01      	subs	r3, #1
 8005482:	b29a      	uxth	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d034      	beq.n	80054fc <HAL_I2C_Mem_Read+0x1d0>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005496:	2b00      	cmp	r3, #0
 8005498:	d130      	bne.n	80054fc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a0:	2200      	movs	r2, #0
 80054a2:	2180      	movs	r1, #128	; 0x80
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 f9db 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e04d      	b.n	8005550 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	2bff      	cmp	r3, #255	; 0xff
 80054bc:	d90e      	bls.n	80054dc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	22ff      	movs	r2, #255	; 0xff
 80054c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	8979      	ldrh	r1, [r7, #10]
 80054cc:	2300      	movs	r3, #0
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 fbff 	bl	8005cd8 <I2C_TransferConfig>
 80054da:	e00f      	b.n	80054fc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	8979      	ldrh	r1, [r7, #10]
 80054ee:	2300      	movs	r3, #0
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 fbee 	bl	8005cd8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005500:	b29b      	uxth	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d19a      	bne.n	800543c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 fa3e 	bl	800598c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e01a      	b.n	8005550 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2220      	movs	r2, #32
 8005520:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6859      	ldr	r1, [r3, #4]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	4b0b      	ldr	r3, [pc, #44]	; (800555c <HAL_I2C_Mem_Read+0x230>)
 800552e:	400b      	ands	r3, r1
 8005530:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	e000      	b.n	8005550 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800554e:	2302      	movs	r3, #2
  }
}
 8005550:	4618      	mov	r0, r3
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	80002400 	.word	0x80002400
 800555c:	fe00e800 	.word	0xfe00e800

08005560 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08a      	sub	sp, #40	; 0x28
 8005564:	af02      	add	r7, sp, #8
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	607a      	str	r2, [r7, #4]
 800556a:	603b      	str	r3, [r7, #0]
 800556c:	460b      	mov	r3, r1
 800556e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b20      	cmp	r3, #32
 800557e:	f040 80f1 	bne.w	8005764 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800558c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005590:	d101      	bne.n	8005596 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005592:	2302      	movs	r3, #2
 8005594:	e0e7      	b.n	8005766 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_I2C_IsDeviceReady+0x44>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e0e0      	b.n	8005766 <HAL_I2C_IsDeviceReady+0x206>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2224      	movs	r2, #36	; 0x24
 80055b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d107      	bne.n	80055d2 <HAL_I2C_IsDeviceReady+0x72>
 80055c2:	897b      	ldrh	r3, [r7, #10]
 80055c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80055cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055d0:	e004      	b.n	80055dc <HAL_I2C_IsDeviceReady+0x7c>
 80055d2:	897b      	ldrh	r3, [r7, #10]
 80055d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055d8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	6812      	ldr	r2, [r2, #0]
 80055e0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80055e2:	f7fd fb93 	bl	8002d0c <HAL_GetTick>
 80055e6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	f003 0320 	and.w	r3, r3, #32
 80055f2:	2b20      	cmp	r3, #32
 80055f4:	bf0c      	ite	eq
 80055f6:	2301      	moveq	r3, #1
 80055f8:	2300      	movne	r3, #0
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	2b10      	cmp	r3, #16
 800560a:	bf0c      	ite	eq
 800560c:	2301      	moveq	r3, #1
 800560e:	2300      	movne	r3, #0
 8005610:	b2db      	uxtb	r3, r3
 8005612:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005614:	e034      	b.n	8005680 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561c:	d01a      	beq.n	8005654 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800561e:	f7fd fb75 	bl	8002d0c <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	429a      	cmp	r2, r3
 800562c:	d302      	bcc.n	8005634 <HAL_I2C_IsDeviceReady+0xd4>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10f      	bne.n	8005654 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2220      	movs	r2, #32
 8005638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005640:	f043 0220 	orr.w	r2, r3, #32
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e088      	b.n	8005766 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b20      	cmp	r3, #32
 8005660:	bf0c      	ite	eq
 8005662:	2301      	moveq	r3, #1
 8005664:	2300      	movne	r3, #0
 8005666:	b2db      	uxtb	r3, r3
 8005668:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	f003 0310 	and.w	r3, r3, #16
 8005674:	2b10      	cmp	r3, #16
 8005676:	bf0c      	ite	eq
 8005678:	2301      	moveq	r3, #1
 800567a:	2300      	movne	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005680:	7ffb      	ldrb	r3, [r7, #31]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d102      	bne.n	800568c <HAL_I2C_IsDeviceReady+0x12c>
 8005686:	7fbb      	ldrb	r3, [r7, #30]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d0c4      	beq.n	8005616 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	f003 0310 	and.w	r3, r3, #16
 8005696:	2b10      	cmp	r3, #16
 8005698:	d01a      	beq.n	80056d0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2200      	movs	r2, #0
 80056a2:	2120      	movs	r1, #32
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 f8db 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e058      	b.n	8005766 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2220      	movs	r2, #32
 80056ba:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	e04a      	b.n	8005766 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	2200      	movs	r2, #0
 80056d8:	2120      	movs	r1, #32
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 f8c0 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e03d      	b.n	8005766 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2210      	movs	r2, #16
 80056f0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2220      	movs	r2, #32
 80056f8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d118      	bne.n	8005734 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005710:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2200      	movs	r2, #0
 800571a:	2120      	movs	r1, #32
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 f89f 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e01c      	b.n	8005766 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2220      	movs	r2, #32
 8005732:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	3301      	adds	r3, #1
 8005738:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	429a      	cmp	r2, r3
 8005740:	f63f af3b 	bhi.w	80055ba <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005750:	f043 0220 	orr.w	r2, r3, #32
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e000      	b.n	8005766 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005764:	2302      	movs	r3, #2
  }
}
 8005766:	4618      	mov	r0, r3
 8005768:	3720      	adds	r7, #32
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af02      	add	r7, sp, #8
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	4608      	mov	r0, r1
 800577a:	4611      	mov	r1, r2
 800577c:	461a      	mov	r2, r3
 800577e:	4603      	mov	r3, r0
 8005780:	817b      	strh	r3, [r7, #10]
 8005782:	460b      	mov	r3, r1
 8005784:	813b      	strh	r3, [r7, #8]
 8005786:	4613      	mov	r3, r2
 8005788:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800578a:	88fb      	ldrh	r3, [r7, #6]
 800578c:	b2da      	uxtb	r2, r3
 800578e:	8979      	ldrh	r1, [r7, #10]
 8005790:	4b20      	ldr	r3, [pc, #128]	; (8005814 <I2C_RequestMemoryRead+0xa4>)
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	2300      	movs	r3, #0
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 fa9e 	bl	8005cd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800579c:	69fa      	ldr	r2, [r7, #28]
 800579e:	69b9      	ldr	r1, [r7, #24]
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 f8ac 	bl	80058fe <I2C_WaitOnTXISFlagUntilTimeout>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e02c      	b.n	800580a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057b0:	88fb      	ldrh	r3, [r7, #6]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d105      	bne.n	80057c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057b6:	893b      	ldrh	r3, [r7, #8]
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	629a      	str	r2, [r3, #40]	; 0x28
 80057c0:	e015      	b.n	80057ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80057c2:	893b      	ldrh	r3, [r7, #8]
 80057c4:	0a1b      	lsrs	r3, r3, #8
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057d0:	69fa      	ldr	r2, [r7, #28]
 80057d2:	69b9      	ldr	r1, [r7, #24]
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 f892 	bl	80058fe <I2C_WaitOnTXISFlagUntilTimeout>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e012      	b.n	800580a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057e4:	893b      	ldrh	r3, [r7, #8]
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	2200      	movs	r2, #0
 80057f6:	2140      	movs	r1, #64	; 0x40
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 f831 	bl	8005860 <I2C_WaitOnFlagUntilTimeout>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e000      	b.n	800580a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	80002000 	.word	0x80002000

08005818 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b02      	cmp	r3, #2
 800582c:	d103      	bne.n	8005836 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2200      	movs	r2, #0
 8005834:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b01      	cmp	r3, #1
 8005842:	d007      	beq.n	8005854 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	699a      	ldr	r2, [r3, #24]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	619a      	str	r2, [r3, #24]
  }
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	603b      	str	r3, [r7, #0]
 800586c:	4613      	mov	r3, r2
 800586e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005870:	e031      	b.n	80058d6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005878:	d02d      	beq.n	80058d6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800587a:	f7fd fa47 	bl	8002d0c <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	429a      	cmp	r2, r3
 8005888:	d302      	bcc.n	8005890 <I2C_WaitOnFlagUntilTimeout+0x30>
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d122      	bne.n	80058d6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699a      	ldr	r2, [r3, #24]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	4013      	ands	r3, r2
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	429a      	cmp	r2, r3
 800589e:	bf0c      	ite	eq
 80058a0:	2301      	moveq	r3, #1
 80058a2:	2300      	movne	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	461a      	mov	r2, r3
 80058a8:	79fb      	ldrb	r3, [r7, #7]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d113      	bne.n	80058d6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b2:	f043 0220 	orr.w	r2, r3, #32
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2220      	movs	r2, #32
 80058be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e00f      	b.n	80058f6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	699a      	ldr	r2, [r3, #24]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	4013      	ands	r3, r2
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	bf0c      	ite	eq
 80058e6:	2301      	moveq	r3, #1
 80058e8:	2300      	movne	r3, #0
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	461a      	mov	r2, r3
 80058ee:	79fb      	ldrb	r3, [r7, #7]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d0be      	beq.n	8005872 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b084      	sub	sp, #16
 8005902:	af00      	add	r7, sp, #0
 8005904:	60f8      	str	r0, [r7, #12]
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800590a:	e033      	b.n	8005974 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	68b9      	ldr	r1, [r7, #8]
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 f901 	bl	8005b18 <I2C_IsErrorOccurred>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e031      	b.n	8005984 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005926:	d025      	beq.n	8005974 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005928:	f7fd f9f0 	bl	8002d0c <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	429a      	cmp	r2, r3
 8005936:	d302      	bcc.n	800593e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d11a      	bne.n	8005974 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b02      	cmp	r3, #2
 800594a:	d013      	beq.n	8005974 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005950:	f043 0220 	orr.w	r2, r3, #32
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2220      	movs	r2, #32
 800595c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e007      	b.n	8005984 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b02      	cmp	r3, #2
 8005980:	d1c4      	bne.n	800590c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005998:	e02f      	b.n	80059fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	68b9      	ldr	r1, [r7, #8]
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 f8ba 	bl	8005b18 <I2C_IsErrorOccurred>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e02d      	b.n	8005a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ae:	f7fd f9ad 	bl	8002d0c <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d302      	bcc.n	80059c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d11a      	bne.n	80059fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	f003 0320 	and.w	r3, r3, #32
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	d013      	beq.n	80059fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d6:	f043 0220 	orr.w	r2, r3, #32
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e007      	b.n	8005a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	f003 0320 	and.w	r3, r3, #32
 8005a04:	2b20      	cmp	r3, #32
 8005a06:	d1c8      	bne.n	800599a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
	...

08005a14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a20:	e06b      	b.n	8005afa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 f876 	bl	8005b18 <I2C_IsErrorOccurred>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e069      	b.n	8005b0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	f003 0320 	and.w	r3, r3, #32
 8005a40:	2b20      	cmp	r3, #32
 8005a42:	d138      	bne.n	8005ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	f003 0304 	and.w	r3, r3, #4
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d105      	bne.n	8005a5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	e055      	b.n	8005b0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	f003 0310 	and.w	r3, r3, #16
 8005a68:	2b10      	cmp	r3, #16
 8005a6a:	d107      	bne.n	8005a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2210      	movs	r2, #16
 8005a72:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2204      	movs	r2, #4
 8005a78:	645a      	str	r2, [r3, #68]	; 0x44
 8005a7a:	e002      	b.n	8005a82 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2220      	movs	r2, #32
 8005a88:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6859      	ldr	r1, [r3, #4]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	4b1f      	ldr	r3, [pc, #124]	; (8005b14 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8005a96:	400b      	ands	r3, r1
 8005a98:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e029      	b.n	8005b0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ab6:	f7fd f929 	bl	8002d0c <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d302      	bcc.n	8005acc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d116      	bne.n	8005afa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	f003 0304 	and.w	r3, r3, #4
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	d00f      	beq.n	8005afa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ade:	f043 0220 	orr.w	r2, r3, #32
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e007      	b.n	8005b0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b04      	cmp	r3, #4
 8005b06:	d18c      	bne.n	8005a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	fe00e800 	.word	0xfe00e800

08005b18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b08a      	sub	sp, #40	; 0x28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b24:	2300      	movs	r3, #0
 8005b26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	f003 0310 	and.w	r3, r3, #16
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d068      	beq.n	8005c16 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2210      	movs	r2, #16
 8005b4a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b4c:	e049      	b.n	8005be2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b54:	d045      	beq.n	8005be2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b56:	f7fd f8d9 	bl	8002d0c <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d302      	bcc.n	8005b6c <I2C_IsErrorOccurred+0x54>
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d13a      	bne.n	8005be2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b76:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b7e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b8e:	d121      	bne.n	8005bd4 <I2C_IsErrorOccurred+0xbc>
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b96:	d01d      	beq.n	8005bd4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005b98:	7cfb      	ldrb	r3, [r7, #19]
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	d01a      	beq.n	8005bd4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005bae:	f7fd f8ad 	bl	8002d0c <HAL_GetTick>
 8005bb2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bb4:	e00e      	b.n	8005bd4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005bb6:	f7fd f8a9 	bl	8002d0c <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b19      	cmp	r3, #25
 8005bc2:	d907      	bls.n	8005bd4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	f043 0320 	orr.w	r3, r3, #32
 8005bca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005bd2:	e006      	b.n	8005be2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	f003 0320 	and.w	r3, r3, #32
 8005bde:	2b20      	cmp	r3, #32
 8005be0:	d1e9      	bne.n	8005bb6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	f003 0320 	and.w	r3, r3, #32
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	d003      	beq.n	8005bf8 <I2C_IsErrorOccurred+0xe0>
 8005bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0aa      	beq.n	8005b4e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d103      	bne.n	8005c08 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2220      	movs	r2, #32
 8005c06:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	f043 0304 	orr.w	r3, r3, #4
 8005c0e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00b      	beq.n	8005c40 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	f043 0301 	orr.w	r3, r3, #1
 8005c2e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00b      	beq.n	8005c62 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	f043 0308 	orr.w	r3, r3, #8
 8005c50:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00b      	beq.n	8005c84 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	f043 0302 	orr.w	r3, r3, #2
 8005c72:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01c      	beq.n	8005cc6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f7ff fdc3 	bl	8005818 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6859      	ldr	r1, [r3, #4]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	4b0d      	ldr	r3, [pc, #52]	; (8005cd4 <I2C_IsErrorOccurred+0x1bc>)
 8005c9e:	400b      	ands	r3, r1
 8005ca0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3728      	adds	r7, #40	; 0x28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	fe00e800 	.word	0xfe00e800

08005cd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	607b      	str	r3, [r7, #4]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	817b      	strh	r3, [r7, #10]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005cea:	897b      	ldrh	r3, [r7, #10]
 8005cec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005cf0:	7a7b      	ldrb	r3, [r7, #9]
 8005cf2:	041b      	lsls	r3, r3, #16
 8005cf4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005cf8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d06:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	0d5b      	lsrs	r3, r3, #21
 8005d12:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005d16:	4b08      	ldr	r3, [pc, #32]	; (8005d38 <I2C_TransferConfig+0x60>)
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	43db      	mvns	r3, r3
 8005d1c:	ea02 0103 	and.w	r1, r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005d2a:	bf00      	nop
 8005d2c:	371c      	adds	r7, #28
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	03ff63ff 	.word	0x03ff63ff

08005d3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b20      	cmp	r3, #32
 8005d50:	d138      	bne.n	8005dc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e032      	b.n	8005dc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2224      	movs	r2, #36	; 0x24
 8005d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 0201 	bic.w	r2, r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6819      	ldr	r1, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0201 	orr.w	r2, r2, #1
 8005dae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2220      	movs	r2, #32
 8005db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	e000      	b.n	8005dc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005dc4:	2302      	movs	r3, #2
  }
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b085      	sub	sp, #20
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b20      	cmp	r3, #32
 8005de6:	d139      	bne.n	8005e5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d101      	bne.n	8005df6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005df2:	2302      	movs	r3, #2
 8005df4:	e033      	b.n	8005e5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2224      	movs	r2, #36	; 0x24
 8005e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0201 	bic.w	r2, r2, #1
 8005e14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005e24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	021b      	lsls	r3, r3, #8
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0201 	orr.w	r2, r2, #1
 8005e46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	e000      	b.n	8005e5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005e5c:	2302      	movs	r3, #2
  }
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
	...

08005e6c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005e74:	2300      	movs	r3, #0
 8005e76:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d01e      	beq.n	8005ebc <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005e7e:	4b13      	ldr	r3, [pc, #76]	; (8005ecc <HAL_IPCC_Init+0x60>)
 8005e80:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d102      	bne.n	8005e94 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7fc fc80 	bl	8002794 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005e94:	68b8      	ldr	r0, [r7, #8]
 8005e96:	f000 f85b 	bl	8005f50 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f82c 	bl	8005f04 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005eba:	e001      	b.n	8005ec0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	58000c00 	.word	0x58000c00

08005ed0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	4613      	mov	r3, r2
 8005edc:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005ede:	bf00      	nop
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b085      	sub	sp, #20
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	e00f      	b.n	8005f32 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	4a0b      	ldr	r2, [pc, #44]	; (8005f48 <IPCC_SetDefaultCallbacks+0x44>)
 8005f1c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	3306      	adds	r3, #6
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	4a08      	ldr	r2, [pc, #32]	; (8005f4c <IPCC_SetDefaultCallbacks+0x48>)
 8005f2a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b05      	cmp	r3, #5
 8005f36:	d9ec      	bls.n	8005f12 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005f38:	bf00      	nop
 8005f3a:	bf00      	nop
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	08005ed1 	.word	0x08005ed1
 8005f4c:	08005eeb 	.word	0x08005eeb

08005f50 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8005f64:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	223f      	movs	r2, #63	; 0x3f
 8005f6a:	609a      	str	r2, [r3, #8]
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f7a:	b08b      	sub	sp, #44	; 0x2c
 8005f7c:	af06      	add	r7, sp, #24
 8005f7e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e0cb      	b.n	8006122 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f00c ff64 	bl	8012e6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2203      	movs	r2, #3
 8005fa8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f004 fc82 	bl	800a8ba <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	73fb      	strb	r3, [r7, #15]
 8005fba:	e040      	b.n	800603e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	1c5a      	adds	r2, r3, #1
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	00db      	lsls	r3, r3, #3
 8005fca:	440b      	add	r3, r1
 8005fcc:	3301      	adds	r3, #1
 8005fce:	2201      	movs	r2, #1
 8005fd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005fd2:	7bfb      	ldrb	r3, [r7, #15]
 8005fd4:	6879      	ldr	r1, [r7, #4]
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	00db      	lsls	r3, r3, #3
 8005fe0:	440b      	add	r3, r1
 8005fe2:	7bfa      	ldrb	r2, [r7, #15]
 8005fe4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
 8005fe8:	6879      	ldr	r1, [r7, #4]
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	4613      	mov	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	440b      	add	r3, r1
 8005ff6:	3303      	adds	r3, #3
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005ffc:	7bfa      	ldrb	r2, [r7, #15]
 8005ffe:	6879      	ldr	r1, [r7, #4]
 8006000:	4613      	mov	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	00db      	lsls	r3, r3, #3
 8006008:	440b      	add	r3, r1
 800600a:	3338      	adds	r3, #56	; 0x38
 800600c:	2200      	movs	r2, #0
 800600e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006010:	7bfa      	ldrb	r2, [r7, #15]
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	4613      	mov	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	00db      	lsls	r3, r3, #3
 800601c:	440b      	add	r3, r1
 800601e:	333c      	adds	r3, #60	; 0x3c
 8006020:	2200      	movs	r2, #0
 8006022:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006024:	7bfa      	ldrb	r2, [r7, #15]
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	4613      	mov	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	440b      	add	r3, r1
 8006032:	3340      	adds	r3, #64	; 0x40
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006038:	7bfb      	ldrb	r3, [r7, #15]
 800603a:	3301      	adds	r3, #1
 800603c:	73fb      	strb	r3, [r7, #15]
 800603e:	7bfa      	ldrb	r2, [r7, #15]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	429a      	cmp	r2, r3
 8006046:	d3b9      	bcc.n	8005fbc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006048:	2300      	movs	r3, #0
 800604a:	73fb      	strb	r3, [r7, #15]
 800604c:	e044      	b.n	80060d8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800604e:	7bfa      	ldrb	r2, [r7, #15]
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	4613      	mov	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	00db      	lsls	r3, r3, #3
 800605a:	440b      	add	r3, r1
 800605c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006060:	2200      	movs	r2, #0
 8006062:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006064:	7bfa      	ldrb	r2, [r7, #15]
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	4613      	mov	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	440b      	add	r3, r1
 8006072:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006076:	7bfa      	ldrb	r2, [r7, #15]
 8006078:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800607a:	7bfa      	ldrb	r2, [r7, #15]
 800607c:	6879      	ldr	r1, [r7, #4]
 800607e:	4613      	mov	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	440b      	add	r3, r1
 8006088:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800608c:	2200      	movs	r2, #0
 800608e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006090:	7bfa      	ldrb	r2, [r7, #15]
 8006092:	6879      	ldr	r1, [r7, #4]
 8006094:	4613      	mov	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	440b      	add	r3, r1
 800609e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80060a2:	2200      	movs	r2, #0
 80060a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80060a6:	7bfa      	ldrb	r2, [r7, #15]
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	00db      	lsls	r3, r3, #3
 80060b2:	440b      	add	r3, r1
 80060b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80060bc:	7bfa      	ldrb	r2, [r7, #15]
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	440b      	add	r3, r1
 80060ca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80060ce:	2200      	movs	r2, #0
 80060d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
 80060d4:	3301      	adds	r3, #1
 80060d6:	73fb      	strb	r3, [r7, #15]
 80060d8:	7bfa      	ldrb	r2, [r7, #15]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d3b5      	bcc.n	800604e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	603b      	str	r3, [r7, #0]
 80060e8:	687e      	ldr	r6, [r7, #4]
 80060ea:	466d      	mov	r5, sp
 80060ec:	f106 0410 	add.w	r4, r6, #16
 80060f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060f4:	6823      	ldr	r3, [r4, #0]
 80060f6:	602b      	str	r3, [r5, #0]
 80060f8:	1d33      	adds	r3, r6, #4
 80060fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060fc:	6838      	ldr	r0, [r7, #0]
 80060fe:	f004 fbf7 	bl	800a8f0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d102      	bne.n	8006120 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f001 fc45 	bl	80079aa <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800612a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b082      	sub	sp, #8
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006138:	2b01      	cmp	r3, #1
 800613a:	d101      	bne.n	8006140 <HAL_PCD_Start+0x16>
 800613c:	2302      	movs	r3, #2
 800613e:	e012      	b.n	8006166 <HAL_PCD_Start+0x3c>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4618      	mov	r0, r3
 800614e:	f004 fb9d 	bl	800a88c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4618      	mov	r0, r3
 8006158:	f006 fe61 	bl	800ce1e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4618      	mov	r0, r3
 800617c:	f006 fe66 	bl	800ce4c <USB_ReadInterrupts>
 8006180:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d003      	beq.n	8006194 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fb05 	bl	800679c <PCD_EP_ISR_Handler>

    return;
 8006192:	e110      	b.n	80063b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800619a:	2b00      	cmp	r3, #0
 800619c:	d013      	beq.n	80061c6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061b0:	b292      	uxth	r2, r2
 80061b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f00c ff0b 	bl	8012fd2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80061bc:	2100      	movs	r1, #0
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f8fc 	bl	80063bc <HAL_PCD_SetAddress>

    return;
 80061c4:	e0f7      	b.n	80063b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00c      	beq.n	80061ea <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061d8:	b29a      	uxth	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061e2:	b292      	uxth	r2, r2
 80061e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80061e8:	e0e5      	b.n	80063b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00c      	beq.n	800620e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006206:	b292      	uxth	r2, r2
 8006208:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800620c:	e0d3      	b.n	80063b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d034      	beq.n	8006282 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006220:	b29a      	uxth	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0204 	bic.w	r2, r2, #4
 800622a:	b292      	uxth	r2, r2
 800622c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006238:	b29a      	uxth	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0208 	bic.w	r2, r2, #8
 8006242:	b292      	uxth	r2, r2
 8006244:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800624e:	2b01      	cmp	r3, #1
 8006250:	d107      	bne.n	8006262 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800625a:	2100      	movs	r1, #0
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f00d f8af 	bl	80133c0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f00c feee 	bl	8013044 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006270:	b29a      	uxth	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800627a:	b292      	uxth	r2, r2
 800627c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006280:	e099      	b.n	80063b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006288:	2b00      	cmp	r3, #0
 800628a:	d027      	beq.n	80062dc <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006294:	b29a      	uxth	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0208 	orr.w	r2, r2, #8
 800629e:	b292      	uxth	r2, r2
 80062a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062b6:	b292      	uxth	r2, r2
 80062b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f042 0204 	orr.w	r2, r2, #4
 80062ce:	b292      	uxth	r2, r2
 80062d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f00c fe9b 	bl	8013010 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80062da:	e06c      	b.n	80063b6 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d040      	beq.n	8006368 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062f8:	b292      	uxth	r2, r2
 80062fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d12b      	bne.n	8006360 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006310:	b29a      	uxth	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 0204 	orr.w	r2, r2, #4
 800631a:	b292      	uxth	r2, r2
 800631c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006328:	b29a      	uxth	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0208 	orr.w	r2, r2, #8
 8006332:	b292      	uxth	r2, r2
 8006334:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006348:	b29b      	uxth	r3, r3
 800634a:	089b      	lsrs	r3, r3, #2
 800634c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006356:	2101      	movs	r1, #1
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f00d f831 	bl	80133c0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800635e:	e02a      	b.n	80063b6 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f00c fe55 	bl	8013010 <HAL_PCD_SuspendCallback>
    return;
 8006366:	e026      	b.n	80063b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00f      	beq.n	8006392 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800637a:	b29a      	uxth	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006384:	b292      	uxth	r2, r2
 8006386:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f00c fe13 	bl	8012fb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006390:	e011      	b.n	80063b6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00c      	beq.n	80063b6 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063ae:	b292      	uxth	r2, r2
 80063b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80063b4:	bf00      	nop
  }
}
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d101      	bne.n	80063d6 <HAL_PCD_SetAddress+0x1a>
 80063d2:	2302      	movs	r3, #2
 80063d4:	e013      	b.n	80063fe <HAL_PCD_SetAddress+0x42>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	78fa      	ldrb	r2, [r7, #3]
 80063e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	78fa      	ldrb	r2, [r7, #3]
 80063ec:	4611      	mov	r1, r2
 80063ee:	4618      	mov	r0, r3
 80063f0:	f006 fd01 	bl	800cdf6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b084      	sub	sp, #16
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	4608      	mov	r0, r1
 8006410:	4611      	mov	r1, r2
 8006412:	461a      	mov	r2, r3
 8006414:	4603      	mov	r3, r0
 8006416:	70fb      	strb	r3, [r7, #3]
 8006418:	460b      	mov	r3, r1
 800641a:	803b      	strh	r3, [r7, #0]
 800641c:	4613      	mov	r3, r2
 800641e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006420:	2300      	movs	r3, #0
 8006422:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006424:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006428:	2b00      	cmp	r3, #0
 800642a:	da0e      	bge.n	800644a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800642c:	78fb      	ldrb	r3, [r7, #3]
 800642e:	f003 0307 	and.w	r3, r3, #7
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	4613      	mov	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	4413      	add	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2201      	movs	r2, #1
 8006446:	705a      	strb	r2, [r3, #1]
 8006448:	e00e      	b.n	8006468 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800644a:	78fb      	ldrb	r3, [r7, #3]
 800644c:	f003 0207 	and.w	r2, r3, #7
 8006450:	4613      	mov	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	4413      	add	r3, r2
 8006460:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006468:	78fb      	ldrb	r3, [r7, #3]
 800646a:	f003 0307 	and.w	r3, r3, #7
 800646e:	b2da      	uxtb	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006474:	883a      	ldrh	r2, [r7, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	78ba      	ldrb	r2, [r7, #2]
 800647e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006480:	78bb      	ldrb	r3, [r7, #2]
 8006482:	2b02      	cmp	r3, #2
 8006484:	d102      	bne.n	800648c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006492:	2b01      	cmp	r3, #1
 8006494:	d101      	bne.n	800649a <HAL_PCD_EP_Open+0x94>
 8006496:	2302      	movs	r3, #2
 8006498:	e00e      	b.n	80064b8 <HAL_PCD_EP_Open+0xb2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68f9      	ldr	r1, [r7, #12]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f004 fa43 	bl	800a934 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80064b6:	7afb      	ldrb	r3, [r7, #11]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	460b      	mov	r3, r1
 80064ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80064cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	da0e      	bge.n	80064f2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064d4:	78fb      	ldrb	r3, [r7, #3]
 80064d6:	f003 0307 	and.w	r3, r3, #7
 80064da:	1c5a      	adds	r2, r3, #1
 80064dc:	4613      	mov	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	4413      	add	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2201      	movs	r2, #1
 80064ee:	705a      	strb	r2, [r3, #1]
 80064f0:	e00e      	b.n	8006510 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064f2:	78fb      	ldrb	r3, [r7, #3]
 80064f4:	f003 0207 	and.w	r2, r3, #7
 80064f8:	4613      	mov	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	4413      	add	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	f003 0307 	and.w	r3, r3, #7
 8006516:	b2da      	uxtb	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006522:	2b01      	cmp	r3, #1
 8006524:	d101      	bne.n	800652a <HAL_PCD_EP_Close+0x6a>
 8006526:	2302      	movs	r3, #2
 8006528:	e00e      	b.n	8006548 <HAL_PCD_EP_Close+0x88>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68f9      	ldr	r1, [r7, #12]
 8006538:	4618      	mov	r0, r3
 800653a:	f004 fdbf 	bl	800b0bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	607a      	str	r2, [r7, #4]
 800655a:	603b      	str	r3, [r7, #0]
 800655c:	460b      	mov	r3, r1
 800655e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006560:	7afb      	ldrb	r3, [r7, #11]
 8006562:	f003 0207 	and.w	r2, r3, #7
 8006566:	4613      	mov	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	00db      	lsls	r3, r3, #3
 800656e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	4413      	add	r3, r2
 8006576:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	2200      	movs	r2, #0
 8006588:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2200      	movs	r2, #0
 800658e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006590:	7afb      	ldrb	r3, [r7, #11]
 8006592:	f003 0307 	and.w	r3, r3, #7
 8006596:	b2da      	uxtb	r2, r3
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6979      	ldr	r1, [r7, #20]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f004 ff77 	bl	800b496 <USB_EPStartXfer>

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3718      	adds	r7, #24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b083      	sub	sp, #12
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	460b      	mov	r3, r1
 80065bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80065be:	78fb      	ldrb	r3, [r7, #3]
 80065c0:	f003 0207 	and.w	r2, r3, #7
 80065c4:	6879      	ldr	r1, [r7, #4]
 80065c6:	4613      	mov	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	00db      	lsls	r3, r3, #3
 80065ce:	440b      	add	r3, r1
 80065d0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80065d4:	681b      	ldr	r3, [r3, #0]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b086      	sub	sp, #24
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	60f8      	str	r0, [r7, #12]
 80065ea:	607a      	str	r2, [r7, #4]
 80065ec:	603b      	str	r3, [r7, #0]
 80065ee:	460b      	mov	r3, r1
 80065f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065f2:	7afb      	ldrb	r3, [r7, #11]
 80065f4:	f003 0307 	and.w	r3, r3, #7
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	4613      	mov	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	00db      	lsls	r3, r3, #3
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4413      	add	r3, r2
 8006606:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	2200      	movs	r2, #0
 8006626:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	2201      	movs	r2, #1
 800662c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800662e:	7afb      	ldrb	r3, [r7, #11]
 8006630:	f003 0307 	and.w	r3, r3, #7
 8006634:	b2da      	uxtb	r2, r3
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6979      	ldr	r1, [r7, #20]
 8006640:	4618      	mov	r0, r3
 8006642:	f004 ff28 	bl	800b496 <USB_EPStartXfer>

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3718      	adds	r7, #24
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	460b      	mov	r3, r1
 800665a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800665c:	78fb      	ldrb	r3, [r7, #3]
 800665e:	f003 0207 	and.w	r2, r3, #7
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	429a      	cmp	r2, r3
 8006668:	d901      	bls.n	800666e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e03e      	b.n	80066ec <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800666e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006672:	2b00      	cmp	r3, #0
 8006674:	da0e      	bge.n	8006694 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006676:	78fb      	ldrb	r3, [r7, #3]
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	1c5a      	adds	r2, r3, #1
 800667e:	4613      	mov	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	00db      	lsls	r3, r3, #3
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	4413      	add	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2201      	movs	r2, #1
 8006690:	705a      	strb	r2, [r3, #1]
 8006692:	e00c      	b.n	80066ae <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006694:	78fa      	ldrb	r2, [r7, #3]
 8006696:	4613      	mov	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	00db      	lsls	r3, r3, #3
 800669e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	4413      	add	r3, r2
 80066a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2201      	movs	r2, #1
 80066b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066b4:	78fb      	ldrb	r3, [r7, #3]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d101      	bne.n	80066ce <HAL_PCD_EP_SetStall+0x7e>
 80066ca:	2302      	movs	r3, #2
 80066cc:	e00e      	b.n	80066ec <HAL_PCD_EP_SetStall+0x9c>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68f9      	ldr	r1, [r7, #12]
 80066dc:	4618      	mov	r0, r3
 80066de:	f006 fa8b 	bl	800cbf8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	460b      	mov	r3, r1
 80066fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	f003 020f 	and.w	r2, r3, #15
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	429a      	cmp	r2, r3
 800670c:	d901      	bls.n	8006712 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e040      	b.n	8006794 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006712:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006716:	2b00      	cmp	r3, #0
 8006718:	da0e      	bge.n	8006738 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800671a:	78fb      	ldrb	r3, [r7, #3]
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	4413      	add	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2201      	movs	r2, #1
 8006734:	705a      	strb	r2, [r3, #1]
 8006736:	e00e      	b.n	8006756 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	f003 0207 	and.w	r2, r3, #7
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	00db      	lsls	r3, r3, #3
 8006746:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	4413      	add	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800675c:	78fb      	ldrb	r3, [r7, #3]
 800675e:	f003 0307 	and.w	r3, r3, #7
 8006762:	b2da      	uxtb	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800676e:	2b01      	cmp	r3, #1
 8006770:	d101      	bne.n	8006776 <HAL_PCD_EP_ClrStall+0x82>
 8006772:	2302      	movs	r3, #2
 8006774:	e00e      	b.n	8006794 <HAL_PCD_EP_ClrStall+0xa0>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68f9      	ldr	r1, [r7, #12]
 8006784:	4618      	mov	r0, r3
 8006786:	f006 fa88 	bl	800cc9a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b096      	sub	sp, #88	; 0x58
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80067a4:	e3b1      	b.n	8006f0a <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80067ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80067b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	f003 030f 	and.w	r3, r3, #15
 80067bc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80067c0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f040 8173 	bne.w	8006ab0 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80067ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80067ce:	f003 0310 	and.w	r3, r3, #16
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d150      	bne.n	8006878 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	881b      	ldrh	r3, [r3, #0]
 80067dc:	b29b      	uxth	r3, r3
 80067de:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80067e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e6:	81fb      	strh	r3, [r7, #14]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	89fb      	ldrh	r3, [r7, #14]
 80067ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	3328      	adds	r3, #40	; 0x28
 80067fe:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006808:	b29b      	uxth	r3, r3
 800680a:	461a      	mov	r2, r3
 800680c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	00db      	lsls	r3, r3, #3
 8006812:	4413      	add	r3, r2
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	6812      	ldr	r2, [r2, #0]
 8006818:	4413      	add	r3, r2
 800681a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006826:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800682a:	695a      	ldr	r2, [r3, #20]
 800682c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800682e:	69db      	ldr	r3, [r3, #28]
 8006830:	441a      	add	r2, r3
 8006832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006834:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006836:	2100      	movs	r1, #0
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f00c fba2 	bl	8012f82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 835f 	beq.w	8006f0a <PCD_EP_ISR_Handler+0x76e>
 800684c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	2b00      	cmp	r3, #0
 8006852:	f040 835a 	bne.w	8006f0a <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800685c:	b2db      	uxtb	r3, r3
 800685e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006862:	b2da      	uxtb	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	b292      	uxth	r2, r2
 800686a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006876:	e348      	b.n	8006f0a <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800687e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800688a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800688e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006892:	2b00      	cmp	r3, #0
 8006894:	d032      	beq.n	80068fc <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800689e:	b29b      	uxth	r3, r3
 80068a0:	461a      	mov	r2, r3
 80068a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	4413      	add	r3, r2
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	6812      	ldr	r2, [r2, #0]
 80068ae:	4413      	add	r3, r2
 80068b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80068ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068bc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6818      	ldr	r0, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80068c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068ca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80068cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068ce:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	f006 fb0d 	bl	800cef0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	b29a      	uxth	r2, r3
 80068de:	f640 738f 	movw	r3, #3983	; 0xf8f
 80068e2:	4013      	ands	r3, r2
 80068e4:	823b      	strh	r3, [r7, #16]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	8a3a      	ldrh	r2, [r7, #16]
 80068ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80068f0:	b292      	uxth	r2, r2
 80068f2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f00c fb17 	bl	8012f28 <HAL_PCD_SetupStageCallback>
 80068fa:	e306      	b.n	8006f0a <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80068fc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006900:	2b00      	cmp	r3, #0
 8006902:	f280 8302 	bge.w	8006f0a <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	b29a      	uxth	r2, r3
 800690e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006912:	4013      	ands	r3, r2
 8006914:	83fb      	strh	r3, [r7, #30]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	8bfa      	ldrh	r2, [r7, #30]
 800691c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006920:	b292      	uxth	r2, r2
 8006922:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800692c:	b29b      	uxth	r3, r3
 800692e:	461a      	mov	r2, r3
 8006930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	00db      	lsls	r3, r3, #3
 8006936:	4413      	add	r3, r2
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6812      	ldr	r2, [r2, #0]
 800693c:	4413      	add	r3, r2
 800693e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800694a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800694c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800694e:	69db      	ldr	r3, [r3, #28]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d019      	beq.n	8006988 <PCD_EP_ISR_Handler+0x1ec>
 8006954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d015      	beq.n	8006988 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6818      	ldr	r0, [r3, #0]
 8006960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006962:	6959      	ldr	r1, [r3, #20]
 8006964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006966:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800696a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800696c:	b29b      	uxth	r3, r3
 800696e:	f006 fabf 	bl	800cef0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006974:	695a      	ldr	r2, [r3, #20]
 8006976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	441a      	add	r2, r3
 800697c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800697e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006980:	2100      	movs	r1, #0
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f00c fae2 	bl	8012f4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006992:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800699a:	2b00      	cmp	r3, #0
 800699c:	f040 82b5 	bne.w	8006f0a <PCD_EP_ISR_Handler+0x76e>
 80069a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80069a4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80069a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069ac:	f000 82ad 	beq.w	8006f0a <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	61bb      	str	r3, [r7, #24]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069be:	b29b      	uxth	r3, r3
 80069c0:	461a      	mov	r2, r3
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	4413      	add	r3, r2
 80069c6:	61bb      	str	r3, [r7, #24]
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069ce:	617b      	str	r3, [r7, #20]
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069da:	b29a      	uxth	r2, r3
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	801a      	strh	r2, [r3, #0]
 80069e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	2b3e      	cmp	r3, #62	; 0x3e
 80069e6:	d91d      	bls.n	8006a24 <PCD_EP_ISR_Handler+0x288>
 80069e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	095b      	lsrs	r3, r3, #5
 80069ee:	647b      	str	r3, [r7, #68]	; 0x44
 80069f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	f003 031f 	and.w	r3, r3, #31
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d102      	bne.n	8006a02 <PCD_EP_ISR_Handler+0x266>
 80069fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069fe:	3b01      	subs	r3, #1
 8006a00:	647b      	str	r3, [r7, #68]	; 0x44
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	029b      	lsls	r3, r3, #10
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	4313      	orrs	r3, r2
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	801a      	strh	r2, [r3, #0]
 8006a22:	e026      	b.n	8006a72 <PCD_EP_ISR_Handler+0x2d6>
 8006a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10a      	bne.n	8006a42 <PCD_EP_ISR_Handler+0x2a6>
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	801a      	strh	r2, [r3, #0]
 8006a40:	e017      	b.n	8006a72 <PCD_EP_ISR_Handler+0x2d6>
 8006a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	085b      	lsrs	r3, r3, #1
 8006a48:	647b      	str	r3, [r7, #68]	; 0x44
 8006a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d002      	beq.n	8006a5c <PCD_EP_ISR_Handler+0x2c0>
 8006a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a58:	3301      	adds	r3, #1
 8006a5a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	029b      	lsls	r3, r3, #10
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a82:	827b      	strh	r3, [r7, #18]
 8006a84:	8a7b      	ldrh	r3, [r7, #18]
 8006a86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a8a:	827b      	strh	r3, [r7, #18]
 8006a8c:	8a7b      	ldrh	r3, [r7, #18]
 8006a8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a92:	827b      	strh	r3, [r7, #18]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	8a7b      	ldrh	r3, [r7, #18]
 8006a9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	8013      	strh	r3, [r2, #0]
 8006aae:	e22c      	b.n	8006f0a <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	881b      	ldrh	r3, [r3, #0]
 8006ac0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006ac4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f280 80f6 	bge.w	8006cba <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006afc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b00:	b292      	uxth	r2, r2
 8006b02:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006b04:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	00db      	lsls	r3, r3, #3
 8006b10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	4413      	add	r3, r2
 8006b18:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b1c:	7b1b      	ldrb	r3, [r3, #12]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d123      	bne.n	8006b6a <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	00db      	lsls	r3, r3, #3
 8006b34:	4413      	add	r3, r2
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	6812      	ldr	r2, [r2, #0]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b46:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8006b4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 808e 	beq.w	8006c70 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6818      	ldr	r0, [r3, #0]
 8006b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b5a:	6959      	ldr	r1, [r3, #20]
 8006b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b5e:	88da      	ldrh	r2, [r3, #6]
 8006b60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006b64:	f006 f9c4 	bl	800cef0 <USB_ReadPMA>
 8006b68:	e082      	b.n	8006c70 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b6c:	78db      	ldrb	r3, [r3, #3]
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d10a      	bne.n	8006b88 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006b72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006b76:	461a      	mov	r2, r3
 8006b78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f9d3 	bl	8006f26 <HAL_PCD_EP_DB_Receive>
 8006b80:	4603      	mov	r3, r0
 8006b82:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006b86:	e073      	b.n	8006c70 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	441a      	add	r2, r3
 8006bb4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006bb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d022      	beq.n	8006c2c <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	4413      	add	r3, r2
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	6812      	ldr	r2, [r2, #0]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c0a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8006c0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d02c      	beq.n	8006c70 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6818      	ldr	r0, [r3, #0]
 8006c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c1c:	6959      	ldr	r1, [r3, #20]
 8006c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c20:	891a      	ldrh	r2, [r3, #8]
 8006c22:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006c26:	f006 f963 	bl	800cef0 <USB_ReadPMA>
 8006c2a:	e021      	b.n	8006c70 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	461a      	mov	r2, r3
 8006c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	00db      	lsls	r3, r3, #3
 8006c3e:	4413      	add	r3, r2
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	6812      	ldr	r2, [r2, #0]
 8006c44:	4413      	add	r3, r2
 8006c46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c50:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8006c54:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d009      	beq.n	8006c70 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6818      	ldr	r0, [r3, #0]
 8006c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c62:	6959      	ldr	r1, [r3, #20]
 8006c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c66:	895a      	ldrh	r2, [r3, #10]
 8006c68:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006c6c:	f006 f940 	bl	800cef0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c72:	69da      	ldr	r2, [r3, #28]
 8006c74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006c78:	441a      	add	r2, r3
 8006c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c7c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c80:	695a      	ldr	r2, [r3, #20]
 8006c82:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006c86:	441a      	add	r2, r3
 8006c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c8a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d005      	beq.n	8006ca0 <PCD_EP_ISR_Handler+0x504>
 8006c94:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8006c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d206      	bcs.n	8006cae <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f00c f950 	bl	8012f4c <HAL_PCD_DataOutStageCallback>
 8006cac:	e005      	b.n	8006cba <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f004 fbee 	bl	800b496 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006cba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 8121 	beq.w	8006f0a <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8006cc8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006ccc:	1c5a      	adds	r2, r3, #1
 8006cce:	4613      	mov	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	00db      	lsls	r3, r3, #3
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	4413      	add	r3, r2
 8006cda:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	881b      	ldrh	r3, [r3, #0]
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	441a      	add	r2, r3
 8006d08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006d0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d1a:	78db      	ldrb	r3, [r3, #3]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	f040 80a2 	bne.w	8006e66 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8006d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d24:	2200      	movs	r2, #0
 8006d26:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d2a:	7b1b      	ldrb	r3, [r3, #12]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 8093 	beq.w	8006e58 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006d32:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d046      	beq.n	8006dcc <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d40:	785b      	ldrb	r3, [r3, #1]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d126      	bne.n	8006d94 <PCD_EP_ISR_Handler+0x5f8>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	461a      	mov	r2, r3
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	4413      	add	r3, r2
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	00da      	lsls	r2, r3, #3
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	4413      	add	r3, r2
 8006d68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d6c:	623b      	str	r3, [r7, #32]
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	6a3b      	ldr	r3, [r7, #32]
 8006d7c:	801a      	strh	r2, [r3, #0]
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	881b      	ldrh	r3, [r3, #0]
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	801a      	strh	r2, [r3, #0]
 8006d92:	e061      	b.n	8006e58 <PCD_EP_ISR_Handler+0x6bc>
 8006d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d96:	785b      	ldrb	r3, [r3, #1]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d15d      	bne.n	8006e58 <PCD_EP_ISR_Handler+0x6bc>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	461a      	mov	r2, r3
 8006dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db0:	4413      	add	r3, r2
 8006db2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	00da      	lsls	r2, r3, #3
 8006dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006dc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	801a      	strh	r2, [r3, #0]
 8006dca:	e045      	b.n	8006e58 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dd4:	785b      	ldrb	r3, [r3, #1]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d126      	bne.n	8006e28 <PCD_EP_ISR_Handler+0x68c>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	637b      	str	r3, [r7, #52]	; 0x34
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	461a      	mov	r2, r3
 8006dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dee:	4413      	add	r3, r2
 8006df0:	637b      	str	r3, [r7, #52]	; 0x34
 8006df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	00da      	lsls	r2, r3, #3
 8006df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e00:	633b      	str	r3, [r7, #48]	; 0x30
 8006e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	801a      	strh	r2, [r3, #0]
 8006e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	801a      	strh	r2, [r3, #0]
 8006e26:	e017      	b.n	8006e58 <PCD_EP_ISR_Handler+0x6bc>
 8006e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e2a:	785b      	ldrb	r3, [r3, #1]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d113      	bne.n	8006e58 <PCD_EP_ISR_Handler+0x6bc>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3e:	4413      	add	r3, r2
 8006e40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	00da      	lsls	r2, r3, #3
 8006e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e50:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e54:	2200      	movs	r2, #0
 8006e56:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f00c f88f 	bl	8012f82 <HAL_PCD_DataInStageCallback>
 8006e64:	e051      	b.n	8006f0a <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006e66:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d144      	bne.n	8006efc <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	4413      	add	r3, r2
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	6812      	ldr	r2, [r2, #0]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e96:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e9c:	699a      	ldr	r2, [r3, #24]
 8006e9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d907      	bls.n	8006eb6 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8006ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ea8:	699a      	ldr	r2, [r3, #24]
 8006eaa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006eae:	1ad2      	subs	r2, r2, r3
 8006eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eb2:	619a      	str	r2, [r3, #24]
 8006eb4:	e002      	b.n	8006ebc <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8006eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eb8:	2200      	movs	r2, #0
 8006eba:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d106      	bne.n	8006ed2 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f00c f859 	bl	8012f82 <HAL_PCD_DataInStageCallback>
 8006ed0:	e01b      	b.n	8006f0a <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ed4:	695a      	ldr	r2, [r3, #20]
 8006ed6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006eda:	441a      	add	r2, r3
 8006edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ede:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ee2:	69da      	ldr	r2, [r3, #28]
 8006ee4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006ee8:	441a      	add	r2, r3
 8006eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eec:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f004 face 	bl	800b496 <USB_EPStartXfer>
 8006efa:	e006      	b.n	8006f0a <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006efc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006f00:	461a      	mov	r2, r3
 8006f02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f917 	bl	8007138 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	b21b      	sxth	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f6ff ac45 	blt.w	80067a6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3758      	adds	r7, #88	; 0x58
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b088      	sub	sp, #32
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	60f8      	str	r0, [r7, #12]
 8006f2e:	60b9      	str	r1, [r7, #8]
 8006f30:	4613      	mov	r3, r2
 8006f32:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006f34:	88fb      	ldrh	r3, [r7, #6]
 8006f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d07c      	beq.n	8007038 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	461a      	mov	r2, r3
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	00db      	lsls	r3, r3, #3
 8006f50:	4413      	add	r3, r2
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	6812      	ldr	r2, [r2, #0]
 8006f56:	4413      	add	r3, r2
 8006f58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f5c:	881b      	ldrh	r3, [r3, #0]
 8006f5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f62:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	699a      	ldr	r2, [r3, #24]
 8006f68:	8b7b      	ldrh	r3, [r7, #26]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d306      	bcc.n	8006f7c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	699a      	ldr	r2, [r3, #24]
 8006f72:	8b7b      	ldrh	r3, [r7, #26]
 8006f74:	1ad2      	subs	r2, r2, r3
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	619a      	str	r2, [r3, #24]
 8006f7a:	e002      	b.n	8006f82 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d123      	bne.n	8006fd2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa4:	833b      	strh	r3, [r7, #24]
 8006fa6:	8b3b      	ldrh	r3, [r7, #24]
 8006fa8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006fac:	833b      	strh	r3, [r7, #24]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	441a      	add	r2, r3
 8006fbc:	8b3b      	ldrh	r3, [r7, #24]
 8006fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006fd2:	88fb      	ldrh	r3, [r7, #6]
 8006fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d01f      	beq.n	800701c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff6:	82fb      	strh	r3, [r7, #22]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	441a      	add	r2, r3
 8007006:	8afb      	ldrh	r3, [r7, #22]
 8007008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800700c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007014:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007018:	b29b      	uxth	r3, r3
 800701a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800701c:	8b7b      	ldrh	r3, [r7, #26]
 800701e:	2b00      	cmp	r3, #0
 8007020:	f000 8085 	beq.w	800712e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6818      	ldr	r0, [r3, #0]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	6959      	ldr	r1, [r3, #20]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	891a      	ldrh	r2, [r3, #8]
 8007030:	8b7b      	ldrh	r3, [r7, #26]
 8007032:	f005 ff5d 	bl	800cef0 <USB_ReadPMA>
 8007036:	e07a      	b.n	800712e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007040:	b29b      	uxth	r3, r3
 8007042:	461a      	mov	r2, r3
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	00db      	lsls	r3, r3, #3
 800704a:	4413      	add	r3, r2
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	6812      	ldr	r2, [r2, #0]
 8007050:	4413      	add	r3, r2
 8007052:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800705c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	699a      	ldr	r2, [r3, #24]
 8007062:	8b7b      	ldrh	r3, [r7, #26]
 8007064:	429a      	cmp	r2, r3
 8007066:	d306      	bcc.n	8007076 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	699a      	ldr	r2, [r3, #24]
 800706c:	8b7b      	ldrh	r3, [r7, #26]
 800706e:	1ad2      	subs	r2, r2, r3
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	619a      	str	r2, [r3, #24]
 8007074:	e002      	b.n	800707c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2200      	movs	r2, #0
 800707a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d123      	bne.n	80070cc <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	461a      	mov	r2, r3
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	881b      	ldrh	r3, [r3, #0]
 8007094:	b29b      	uxth	r3, r3
 8007096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800709a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709e:	83fb      	strh	r3, [r7, #30]
 80070a0:	8bfb      	ldrh	r3, [r7, #30]
 80070a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80070a6:	83fb      	strh	r3, [r7, #30]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	461a      	mov	r2, r3
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	441a      	add	r2, r3
 80070b6:	8bfb      	ldrh	r3, [r7, #30]
 80070b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80070cc:	88fb      	ldrh	r3, [r7, #6]
 80070ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d11f      	bne.n	8007116 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f0:	83bb      	strh	r3, [r7, #28]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	441a      	add	r2, r3
 8007100:	8bbb      	ldrh	r3, [r7, #28]
 8007102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800710a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800710e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007112:	b29b      	uxth	r3, r3
 8007114:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007116:	8b7b      	ldrh	r3, [r7, #26]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d008      	beq.n	800712e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6818      	ldr	r0, [r3, #0]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	6959      	ldr	r1, [r3, #20]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	895a      	ldrh	r2, [r3, #10]
 8007128:	8b7b      	ldrh	r3, [r7, #26]
 800712a:	f005 fee1 	bl	800cef0 <USB_ReadPMA>
    }
  }

  return count;
 800712e:	8b7b      	ldrh	r3, [r7, #26]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3720      	adds	r7, #32
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b0a4      	sub	sp, #144	; 0x90
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	4613      	mov	r3, r2
 8007144:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007146:	88fb      	ldrh	r3, [r7, #6]
 8007148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 81db 	beq.w	8007508 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800715a:	b29b      	uxth	r3, r3
 800715c:	461a      	mov	r2, r3
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	00db      	lsls	r3, r3, #3
 8007164:	4413      	add	r3, r2
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	6812      	ldr	r2, [r2, #0]
 800716a:	4413      	add	r3, r2
 800716c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007176:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	699a      	ldr	r2, [r3, #24]
 800717e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007182:	429a      	cmp	r2, r3
 8007184:	d907      	bls.n	8007196 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	699a      	ldr	r2, [r3, #24]
 800718a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800718e:	1ad2      	subs	r2, r2, r3
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	619a      	str	r2, [r3, #24]
 8007194:	e002      	b.n	800719c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2200      	movs	r2, #0
 800719a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f040 80b9 	bne.w	8007318 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	785b      	ldrb	r3, [r3, #1]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d126      	bne.n	80071fc <HAL_PCD_EP_DB_Transmit+0xc4>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071bc:	b29b      	uxth	r3, r3
 80071be:	461a      	mov	r2, r3
 80071c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c2:	4413      	add	r3, r2
 80071c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	00da      	lsls	r2, r3, #3
 80071cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ce:	4413      	add	r3, r2
 80071d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80071d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	b29b      	uxth	r3, r3
 80071dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e4:	801a      	strh	r2, [r3, #0]
 80071e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f8:	801a      	strh	r2, [r3, #0]
 80071fa:	e01a      	b.n	8007232 <HAL_PCD_EP_DB_Transmit+0xfa>
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	785b      	ldrb	r3, [r3, #1]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d116      	bne.n	8007232 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	637b      	str	r3, [r7, #52]	; 0x34
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007212:	b29b      	uxth	r3, r3
 8007214:	461a      	mov	r2, r3
 8007216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007218:	4413      	add	r3, r2
 800721a:	637b      	str	r3, [r7, #52]	; 0x34
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	00da      	lsls	r2, r3, #3
 8007222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007224:	4413      	add	r3, r2
 8007226:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800722a:	633b      	str	r3, [r7, #48]	; 0x30
 800722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722e:	2200      	movs	r2, #0
 8007230:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	627b      	str	r3, [r7, #36]	; 0x24
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	785b      	ldrb	r3, [r3, #1]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d126      	bne.n	800728e <HAL_PCD_EP_DB_Transmit+0x156>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	61fb      	str	r3, [r7, #28]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800724e:	b29b      	uxth	r3, r3
 8007250:	461a      	mov	r2, r3
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	4413      	add	r3, r2
 8007256:	61fb      	str	r3, [r7, #28]
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	00da      	lsls	r2, r3, #3
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	4413      	add	r3, r2
 8007262:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007266:	61bb      	str	r3, [r7, #24]
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	881b      	ldrh	r3, [r3, #0]
 800726c:	b29b      	uxth	r3, r3
 800726e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007272:	b29a      	uxth	r2, r3
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	801a      	strh	r2, [r3, #0]
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	881b      	ldrh	r3, [r3, #0]
 800727c:	b29b      	uxth	r3, r3
 800727e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007286:	b29a      	uxth	r2, r3
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	801a      	strh	r2, [r3, #0]
 800728c:	e017      	b.n	80072be <HAL_PCD_EP_DB_Transmit+0x186>
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	785b      	ldrb	r3, [r3, #1]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d113      	bne.n	80072be <HAL_PCD_EP_DB_Transmit+0x186>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800729e:	b29b      	uxth	r3, r3
 80072a0:	461a      	mov	r2, r3
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	4413      	add	r3, r2
 80072a6:	627b      	str	r3, [r7, #36]	; 0x24
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	00da      	lsls	r2, r3, #3
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	4413      	add	r3, r2
 80072b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072b6:	623b      	str	r3, [r7, #32]
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	2200      	movs	r2, #0
 80072bc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	4619      	mov	r1, r3
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f00b fe5c 	bl	8012f82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80072ca:	88fb      	ldrh	r3, [r7, #6]
 80072cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 82fa 	beq.w	80078ca <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	461a      	mov	r2, r3
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f0:	82fb      	strh	r3, [r7, #22]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	461a      	mov	r2, r3
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	441a      	add	r2, r3
 8007300:	8afb      	ldrh	r3, [r7, #22]
 8007302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800730a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800730e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007312:	b29b      	uxth	r3, r3
 8007314:	8013      	strh	r3, [r2, #0]
 8007316:	e2d8      	b.n	80078ca <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007318:	88fb      	ldrh	r3, [r7, #6]
 800731a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d021      	beq.n	8007366 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	461a      	mov	r2, r3
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	b29b      	uxth	r3, r3
 8007334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800733c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	461a      	mov	r2, r3
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	441a      	add	r2, r3
 800734e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800735a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800735e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007362:	b29b      	uxth	r3, r3
 8007364:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800736c:	2b01      	cmp	r3, #1
 800736e:	f040 82ac 	bne.w	80078ca <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	695a      	ldr	r2, [r3, #20]
 8007376:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800737a:	441a      	add	r2, r3
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	69da      	ldr	r2, [r3, #28]
 8007384:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007388:	441a      	add	r2, r3
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	6a1a      	ldr	r2, [r3, #32]
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	429a      	cmp	r2, r3
 8007398:	d30b      	bcc.n	80073b2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	6a1a      	ldr	r2, [r3, #32]
 80073a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073aa:	1ad2      	subs	r2, r2, r3
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	621a      	str	r2, [r3, #32]
 80073b0:	e017      	b.n	80073e2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d108      	bne.n	80073cc <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80073ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80073be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80073ca:	e00a      	b.n	80073e2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	6a1b      	ldr	r3, [r3, #32]
 80073d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2200      	movs	r2, #0
 80073e0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	785b      	ldrb	r3, [r3, #1]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d165      	bne.n	80074b6 <HAL_PCD_EP_DB_Transmit+0x37e>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	461a      	mov	r2, r3
 80073fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073fe:	4413      	add	r3, r2
 8007400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	00da      	lsls	r2, r3, #3
 8007408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800740a:	4413      	add	r3, r2
 800740c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007410:	63bb      	str	r3, [r7, #56]	; 0x38
 8007412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	b29b      	uxth	r3, r3
 8007418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800741c:	b29a      	uxth	r2, r3
 800741e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007420:	801a      	strh	r2, [r3, #0]
 8007422:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007426:	2b3e      	cmp	r3, #62	; 0x3e
 8007428:	d91d      	bls.n	8007466 <HAL_PCD_EP_DB_Transmit+0x32e>
 800742a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800742e:	095b      	lsrs	r3, r3, #5
 8007430:	64bb      	str	r3, [r7, #72]	; 0x48
 8007432:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007436:	f003 031f 	and.w	r3, r3, #31
 800743a:	2b00      	cmp	r3, #0
 800743c:	d102      	bne.n	8007444 <HAL_PCD_EP_DB_Transmit+0x30c>
 800743e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007440:	3b01      	subs	r3, #1
 8007442:	64bb      	str	r3, [r7, #72]	; 0x48
 8007444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007446:	881b      	ldrh	r3, [r3, #0]
 8007448:	b29a      	uxth	r2, r3
 800744a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800744c:	b29b      	uxth	r3, r3
 800744e:	029b      	lsls	r3, r3, #10
 8007450:	b29b      	uxth	r3, r3
 8007452:	4313      	orrs	r3, r2
 8007454:	b29b      	uxth	r3, r3
 8007456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800745a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800745e:	b29a      	uxth	r2, r3
 8007460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007462:	801a      	strh	r2, [r3, #0]
 8007464:	e044      	b.n	80074f0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8007466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10a      	bne.n	8007484 <HAL_PCD_EP_DB_Transmit+0x34c>
 800746e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007470:	881b      	ldrh	r3, [r3, #0]
 8007472:	b29b      	uxth	r3, r3
 8007474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800747c:	b29a      	uxth	r2, r3
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	801a      	strh	r2, [r3, #0]
 8007482:	e035      	b.n	80074f0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8007484:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007488:	085b      	lsrs	r3, r3, #1
 800748a:	64bb      	str	r3, [r7, #72]	; 0x48
 800748c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	2b00      	cmp	r3, #0
 8007496:	d002      	beq.n	800749e <HAL_PCD_EP_DB_Transmit+0x366>
 8007498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800749a:	3301      	adds	r3, #1
 800749c:	64bb      	str	r3, [r7, #72]	; 0x48
 800749e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	029b      	lsls	r3, r3, #10
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	4313      	orrs	r3, r2
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b2:	801a      	strh	r2, [r3, #0]
 80074b4:	e01c      	b.n	80074f0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	785b      	ldrb	r3, [r3, #1]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d118      	bne.n	80074f0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	647b      	str	r3, [r7, #68]	; 0x44
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	461a      	mov	r2, r3
 80074d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074d2:	4413      	add	r3, r2
 80074d4:	647b      	str	r3, [r7, #68]	; 0x44
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	00da      	lsls	r2, r3, #3
 80074dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074de:	4413      	add	r3, r2
 80074e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074e4:	643b      	str	r3, [r7, #64]	; 0x40
 80074e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ee:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6818      	ldr	r0, [r3, #0]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	6959      	ldr	r1, [r3, #20]
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	891a      	ldrh	r2, [r3, #8]
 80074fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007500:	b29b      	uxth	r3, r3
 8007502:	f005 fcb3 	bl	800ce6c <USB_WritePMA>
 8007506:	e1e0      	b.n	80078ca <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007510:	b29b      	uxth	r3, r3
 8007512:	461a      	mov	r2, r3
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	00db      	lsls	r3, r3, #3
 800751a:	4413      	add	r3, r2
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	6812      	ldr	r2, [r2, #0]
 8007520:	4413      	add	r3, r2
 8007522:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800752c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	699a      	ldr	r2, [r3, #24]
 8007534:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007538:	429a      	cmp	r2, r3
 800753a:	d307      	bcc.n	800754c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	699a      	ldr	r2, [r3, #24]
 8007540:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007544:	1ad2      	subs	r2, r2, r3
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	619a      	str	r2, [r3, #24]
 800754a:	e002      	b.n	8007552 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2200      	movs	r2, #0
 8007550:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	2b00      	cmp	r3, #0
 8007558:	f040 80c0 	bne.w	80076dc <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	785b      	ldrb	r3, [r3, #1]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d126      	bne.n	80075b2 <HAL_PCD_EP_DB_Transmit+0x47a>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	67fb      	str	r3, [r7, #124]	; 0x7c
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007572:	b29b      	uxth	r3, r3
 8007574:	461a      	mov	r2, r3
 8007576:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007578:	4413      	add	r3, r2
 800757a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	00da      	lsls	r2, r3, #3
 8007582:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007584:	4413      	add	r3, r2
 8007586:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800758a:	67bb      	str	r3, [r7, #120]	; 0x78
 800758c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800758e:	881b      	ldrh	r3, [r3, #0]
 8007590:	b29b      	uxth	r3, r3
 8007592:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007596:	b29a      	uxth	r2, r3
 8007598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800759a:	801a      	strh	r2, [r3, #0]
 800759c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075ae:	801a      	strh	r2, [r3, #0]
 80075b0:	e01a      	b.n	80075e8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	785b      	ldrb	r3, [r3, #1]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d116      	bne.n	80075e8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	667b      	str	r3, [r7, #100]	; 0x64
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	461a      	mov	r2, r3
 80075cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075ce:	4413      	add	r3, r2
 80075d0:	667b      	str	r3, [r7, #100]	; 0x64
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	00da      	lsls	r2, r3, #3
 80075d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075da:	4413      	add	r3, r2
 80075dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075e0:	663b      	str	r3, [r7, #96]	; 0x60
 80075e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075e4:	2200      	movs	r2, #0
 80075e6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	677b      	str	r3, [r7, #116]	; 0x74
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	785b      	ldrb	r3, [r3, #1]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d12b      	bne.n	800764e <HAL_PCD_EP_DB_Transmit+0x516>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007604:	b29b      	uxth	r3, r3
 8007606:	461a      	mov	r2, r3
 8007608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800760a:	4413      	add	r3, r2
 800760c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	00da      	lsls	r2, r3, #3
 8007614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007616:	4413      	add	r3, r2
 8007618:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800761c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007620:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007624:	881b      	ldrh	r3, [r3, #0]
 8007626:	b29b      	uxth	r3, r3
 8007628:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800762c:	b29a      	uxth	r2, r3
 800762e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007632:	801a      	strh	r2, [r3, #0]
 8007634:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007638:	881b      	ldrh	r3, [r3, #0]
 800763a:	b29b      	uxth	r3, r3
 800763c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007640:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007644:	b29a      	uxth	r2, r3
 8007646:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800764a:	801a      	strh	r2, [r3, #0]
 800764c:	e017      	b.n	800767e <HAL_PCD_EP_DB_Transmit+0x546>
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	785b      	ldrb	r3, [r3, #1]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d113      	bne.n	800767e <HAL_PCD_EP_DB_Transmit+0x546>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800765e:	b29b      	uxth	r3, r3
 8007660:	461a      	mov	r2, r3
 8007662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007664:	4413      	add	r3, r2
 8007666:	677b      	str	r3, [r7, #116]	; 0x74
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	00da      	lsls	r2, r3, #3
 800766e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007670:	4413      	add	r3, r2
 8007672:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007676:	673b      	str	r3, [r7, #112]	; 0x70
 8007678:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800767a:	2200      	movs	r2, #0
 800767c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	4619      	mov	r1, r3
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f00b fc7c 	bl	8012f82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800768a:	88fb      	ldrh	r3, [r7, #6]
 800768c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007690:	2b00      	cmp	r3, #0
 8007692:	f040 811a 	bne.w	80078ca <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	461a      	mov	r2, r3
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	881b      	ldrh	r3, [r3, #0]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	461a      	mov	r2, r3
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	441a      	add	r2, r3
 80076c2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80076c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	8013      	strh	r3, [r2, #0]
 80076da:	e0f6      	b.n	80078ca <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80076dc:	88fb      	ldrh	r3, [r7, #6]
 80076de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d121      	bne.n	800772a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	461a      	mov	r2, r3
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007700:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	461a      	mov	r2, r3
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	441a      	add	r2, r3
 8007712:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800771a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800771e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007726:	b29b      	uxth	r3, r3
 8007728:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007730:	2b01      	cmp	r3, #1
 8007732:	f040 80ca 	bne.w	80078ca <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	695a      	ldr	r2, [r3, #20]
 800773a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800773e:	441a      	add	r2, r3
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	69da      	ldr	r2, [r3, #28]
 8007748:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800774c:	441a      	add	r2, r3
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	6a1a      	ldr	r2, [r3, #32]
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	429a      	cmp	r2, r3
 800775c:	d30b      	bcc.n	8007776 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	6a1a      	ldr	r2, [r3, #32]
 800776a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800776e:	1ad2      	subs	r2, r2, r3
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	621a      	str	r2, [r3, #32]
 8007774:	e017      	b.n	80077a6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d108      	bne.n	8007790 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800777e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007782:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800778e:	e00a      	b.n	80077a6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	6a1b      	ldr	r3, [r3, #32]
 8007794:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2200      	movs	r2, #0
 800779c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	657b      	str	r3, [r7, #84]	; 0x54
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	785b      	ldrb	r3, [r3, #1]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d165      	bne.n	8007880 <HAL_PCD_EP_DB_Transmit+0x748>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	461a      	mov	r2, r3
 80077c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077c8:	4413      	add	r3, r2
 80077ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	00da      	lsls	r2, r3, #3
 80077d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077d4:	4413      	add	r3, r2
 80077d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077da:	65bb      	str	r3, [r7, #88]	; 0x58
 80077dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077ea:	801a      	strh	r2, [r3, #0]
 80077ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077f0:	2b3e      	cmp	r3, #62	; 0x3e
 80077f2:	d91d      	bls.n	8007830 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80077f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077f8:	095b      	lsrs	r3, r3, #5
 80077fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80077fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007800:	f003 031f 	and.w	r3, r3, #31
 8007804:	2b00      	cmp	r3, #0
 8007806:	d102      	bne.n	800780e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8007808:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800780a:	3b01      	subs	r3, #1
 800780c:	66bb      	str	r3, [r7, #104]	; 0x68
 800780e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007810:	881b      	ldrh	r3, [r3, #0]
 8007812:	b29a      	uxth	r2, r3
 8007814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007816:	b29b      	uxth	r3, r3
 8007818:	029b      	lsls	r3, r3, #10
 800781a:	b29b      	uxth	r3, r3
 800781c:	4313      	orrs	r3, r2
 800781e:	b29b      	uxth	r3, r3
 8007820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007828:	b29a      	uxth	r2, r3
 800782a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800782c:	801a      	strh	r2, [r3, #0]
 800782e:	e041      	b.n	80078b4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007830:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10a      	bne.n	800784e <HAL_PCD_EP_DB_Transmit+0x716>
 8007838:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800783a:	881b      	ldrh	r3, [r3, #0]
 800783c:	b29b      	uxth	r3, r3
 800783e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007846:	b29a      	uxth	r2, r3
 8007848:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800784a:	801a      	strh	r2, [r3, #0]
 800784c:	e032      	b.n	80078b4 <HAL_PCD_EP_DB_Transmit+0x77c>
 800784e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007852:	085b      	lsrs	r3, r3, #1
 8007854:	66bb      	str	r3, [r7, #104]	; 0x68
 8007856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d002      	beq.n	8007868 <HAL_PCD_EP_DB_Transmit+0x730>
 8007862:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007864:	3301      	adds	r3, #1
 8007866:	66bb      	str	r3, [r7, #104]	; 0x68
 8007868:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800786a:	881b      	ldrh	r3, [r3, #0]
 800786c:	b29a      	uxth	r2, r3
 800786e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007870:	b29b      	uxth	r3, r3
 8007872:	029b      	lsls	r3, r3, #10
 8007874:	b29b      	uxth	r3, r3
 8007876:	4313      	orrs	r3, r2
 8007878:	b29a      	uxth	r2, r3
 800787a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800787c:	801a      	strh	r2, [r3, #0]
 800787e:	e019      	b.n	80078b4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	785b      	ldrb	r3, [r3, #1]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d115      	bne.n	80078b4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007890:	b29b      	uxth	r3, r3
 8007892:	461a      	mov	r2, r3
 8007894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007896:	4413      	add	r3, r2
 8007898:	657b      	str	r3, [r7, #84]	; 0x54
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	00da      	lsls	r2, r3, #3
 80078a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078a2:	4413      	add	r3, r2
 80078a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078a8:	653b      	str	r3, [r7, #80]	; 0x50
 80078aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078b2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6818      	ldr	r0, [r3, #0]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	6959      	ldr	r1, [r3, #20]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	895a      	ldrh	r2, [r3, #10]
 80078c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	f005 fad1 	bl	800ce6c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	461a      	mov	r2, r3
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4413      	add	r3, r2
 80078d8:	881b      	ldrh	r3, [r3, #0]
 80078da:	b29b      	uxth	r3, r3
 80078dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078e4:	82bb      	strh	r3, [r7, #20]
 80078e6:	8abb      	ldrh	r3, [r7, #20]
 80078e8:	f083 0310 	eor.w	r3, r3, #16
 80078ec:	82bb      	strh	r3, [r7, #20]
 80078ee:	8abb      	ldrh	r3, [r7, #20]
 80078f0:	f083 0320 	eor.w	r3, r3, #32
 80078f4:	82bb      	strh	r3, [r7, #20]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	461a      	mov	r2, r3
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	441a      	add	r2, r3
 8007904:	8abb      	ldrh	r3, [r7, #20]
 8007906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800790a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800790e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007916:	b29b      	uxth	r3, r3
 8007918:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3790      	adds	r7, #144	; 0x90
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	607b      	str	r3, [r7, #4]
 800792e:	460b      	mov	r3, r1
 8007930:	817b      	strh	r3, [r7, #10]
 8007932:	4613      	mov	r3, r2
 8007934:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007936:	897b      	ldrh	r3, [r7, #10]
 8007938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800793c:	b29b      	uxth	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00b      	beq.n	800795a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007942:	897b      	ldrh	r3, [r7, #10]
 8007944:	f003 0307 	and.w	r3, r3, #7
 8007948:	1c5a      	adds	r2, r3, #1
 800794a:	4613      	mov	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4413      	add	r3, r2
 8007950:	00db      	lsls	r3, r3, #3
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	4413      	add	r3, r2
 8007956:	617b      	str	r3, [r7, #20]
 8007958:	e009      	b.n	800796e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800795a:	897a      	ldrh	r2, [r7, #10]
 800795c:	4613      	mov	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4413      	add	r3, r2
 8007962:	00db      	lsls	r3, r3, #3
 8007964:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	4413      	add	r3, r2
 800796c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800796e:	893b      	ldrh	r3, [r7, #8]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d107      	bne.n	8007984 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	2200      	movs	r2, #0
 8007978:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	b29a      	uxth	r2, r3
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	80da      	strh	r2, [r3, #6]
 8007982:	e00b      	b.n	800799c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	2201      	movs	r2, #1
 8007988:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	b29a      	uxth	r2, r3
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	0c1b      	lsrs	r3, r3, #16
 8007996:	b29a      	uxth	r2, r3
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	371c      	adds	r7, #28
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b085      	sub	sp, #20
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	f043 0301 	orr.w	r3, r3, #1
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	f043 0302 	orr.w	r3, r3, #2
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3714      	adds	r7, #20
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
	...

08007a00 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007a00:	b480      	push	{r7}
 8007a02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a04:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a04      	ldr	r2, [pc, #16]	; (8007a1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a0e:	6013      	str	r3, [r2, #0]
}
 8007a10:	bf00      	nop
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	58000400 	.word	0x58000400

08007a20 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007a20:	b480      	push	{r7}
 8007a22:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8007a24:	4b04      	ldr	r3, [pc, #16]	; (8007a38 <HAL_PWREx_GetVoltageRange+0x18>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	58000400 	.word	0x58000400

08007a3c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007a40:	4b05      	ldr	r3, [pc, #20]	; (8007a58 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	4a04      	ldr	r2, [pc, #16]	; (8007a58 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a4a:	6053      	str	r3, [r2, #4]
}
 8007a4c:	bf00      	nop
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	58000400 	.word	0x58000400

08007a5c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a6e:	d101      	bne.n	8007a74 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007a70:	2301      	movs	r3, #1
 8007a72:	e000      	b.n	8007a76 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <LL_RCC_HSE_Enable>:
{
 8007a80:	b480      	push	{r7}
 8007a82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a92:	6013      	str	r3, [r2, #0]
}
 8007a94:	bf00      	nop
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <LL_RCC_HSE_Disable>:
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8007aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ab0:	6013      	str	r3, [r2, #0]
}
 8007ab2:	bf00      	nop
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <LL_RCC_HSE_IsReady>:
{
 8007abc:	b480      	push	{r7}
 8007abe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ace:	d101      	bne.n	8007ad4 <LL_RCC_HSE_IsReady+0x18>
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e000      	b.n	8007ad6 <LL_RCC_HSE_IsReady+0x1a>
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <LL_RCC_HSI_Enable>:
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007af2:	6013      	str	r3, [r2, #0]
}
 8007af4:	bf00      	nop
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <LL_RCC_HSI_Disable>:
{
 8007afe:	b480      	push	{r7}
 8007b00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b10:	6013      	str	r3, [r2, #0]
}
 8007b12:	bf00      	nop
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <LL_RCC_HSI_IsReady>:
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b2e:	d101      	bne.n	8007b34 <LL_RCC_HSI_IsReady+0x18>
 8007b30:	2301      	movs	r3, #1
 8007b32:	e000      	b.n	8007b36 <LL_RCC_HSI_IsReady+0x1a>
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <LL_RCC_HSI_SetCalibTrimming>:
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	061b      	lsls	r3, r3, #24
 8007b56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	604b      	str	r3, [r1, #4]
}
 8007b5e:	bf00      	nop
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <LL_RCC_HSI48_Enable>:
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b7a:	f043 0301 	orr.w	r3, r3, #1
 8007b7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8007b82:	bf00      	nop
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <LL_RCC_HSI48_Disable>:
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b9c:	f023 0301 	bic.w	r3, r3, #1
 8007ba0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8007ba4:	bf00      	nop
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <LL_RCC_HSI48_IsReady>:
{
 8007bae:	b480      	push	{r7}
 8007bb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8007bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007bba:	f003 0302 	and.w	r3, r3, #2
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d101      	bne.n	8007bc6 <LL_RCC_HSI48_IsReady+0x18>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e000      	b.n	8007bc8 <LL_RCC_HSI48_IsReady+0x1a>
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <LL_RCC_LSE_Enable>:
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007be2:	f043 0301 	orr.w	r3, r3, #1
 8007be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007bea:	bf00      	nop
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <LL_RCC_LSE_Disable>:
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c04:	f023 0301 	bic.w	r3, r3, #1
 8007c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007c0c:	bf00      	nop
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <LL_RCC_LSE_EnableBypass>:
{
 8007c16:	b480      	push	{r7}
 8007c18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c26:	f043 0304 	orr.w	r3, r3, #4
 8007c2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007c2e:	bf00      	nop
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <LL_RCC_LSE_DisableBypass>:
{
 8007c38:	b480      	push	{r7}
 8007c3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c48:	f023 0304 	bic.w	r3, r3, #4
 8007c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007c50:	bf00      	nop
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <LL_RCC_LSE_IsReady>:
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c66:	f003 0302 	and.w	r3, r3, #2
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d101      	bne.n	8007c72 <LL_RCC_LSE_IsReady+0x18>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e000      	b.n	8007c74 <LL_RCC_LSE_IsReady+0x1a>
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <LL_RCC_LSI1_Enable>:
{
 8007c7e:	b480      	push	{r7}
 8007c80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c8e:	f043 0301 	orr.w	r3, r3, #1
 8007c92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007c96:	bf00      	nop
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <LL_RCC_LSI1_Disable>:
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cb0:	f023 0301 	bic.w	r3, r3, #1
 8007cb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007cb8:	bf00      	nop
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <LL_RCC_LSI1_IsReady>:
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8007cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d101      	bne.n	8007cda <LL_RCC_LSI1_IsReady+0x18>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e000      	b.n	8007cdc <LL_RCC_LSI1_IsReady+0x1a>
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <LL_RCC_LSI2_Enable>:
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cf6:	f043 0304 	orr.w	r3, r3, #4
 8007cfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007cfe:	bf00      	nop
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <LL_RCC_LSI2_Disable>:
{
 8007d08:	b480      	push	{r7}
 8007d0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d18:	f023 0304 	bic.w	r3, r3, #4
 8007d1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007d20:	bf00      	nop
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr

08007d2a <LL_RCC_LSI2_IsReady>:
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8007d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d36:	f003 0308 	and.w	r3, r3, #8
 8007d3a:	2b08      	cmp	r3, #8
 8007d3c:	d101      	bne.n	8007d42 <LL_RCC_LSI2_IsReady+0x18>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e000      	b.n	8007d44 <LL_RCC_LSI2_IsReady+0x1a>
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <LL_RCC_LSI2_SetTrimming>:
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b083      	sub	sp, #12
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8007d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	021b      	lsls	r3, r3, #8
 8007d66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <LL_RCC_MSI_Enable>:
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d8a:	f043 0301 	orr.w	r3, r3, #1
 8007d8e:	6013      	str	r3, [r2, #0]
}
 8007d90:	bf00      	nop
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <LL_RCC_MSI_Disable>:
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007da8:	f023 0301 	bic.w	r3, r3, #1
 8007dac:	6013      	str	r3, [r2, #0]
}
 8007dae:	bf00      	nop
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <LL_RCC_MSI_IsReady>:
{
 8007db8:	b480      	push	{r7}
 8007dba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0302 	and.w	r3, r3, #2
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d101      	bne.n	8007dce <LL_RCC_MSI_IsReady+0x16>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e000      	b.n	8007dd0 <LL_RCC_MSI_IsReady+0x18>
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <LL_RCC_MSI_SetRange>:
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b083      	sub	sp, #12
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8007de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007dec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	600b      	str	r3, [r1, #0]
}
 8007df6:	bf00      	nop
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <LL_RCC_MSI_GetRange>:
{
 8007e02:	b480      	push	{r7}
 8007e04:	b083      	sub	sp, #12
 8007e06:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8007e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e12:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2bb0      	cmp	r3, #176	; 0xb0
 8007e18:	d901      	bls.n	8007e1e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8007e1a:	23b0      	movs	r3, #176	; 0xb0
 8007e1c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8007e1e:	687b      	ldr	r3, [r7, #4]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <LL_RCC_MSI_SetCalibTrimming>:
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	021b      	lsls	r3, r3, #8
 8007e42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e46:	4313      	orrs	r3, r2
 8007e48:	604b      	str	r3, [r1, #4]
}
 8007e4a:	bf00      	nop
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <LL_RCC_SetSysClkSource>:
{
 8007e56:	b480      	push	{r7}
 8007e58:	b083      	sub	sp, #12
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f023 0203 	bic.w	r2, r3, #3
 8007e68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	608b      	str	r3, [r1, #8]
}
 8007e72:	bf00      	nop
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <LL_RCC_GetSysClkSource>:
{
 8007e7e:	b480      	push	{r7}
 8007e80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f003 030c 	and.w	r3, r3, #12
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <LL_RCC_SetAHBPrescaler>:
{
 8007e96:	b480      	push	{r7}
 8007e98:	b083      	sub	sp, #12
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ea8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	608b      	str	r3, [r1, #8]
}
 8007eb2:	bf00      	nop
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <LL_C2_RCC_SetAHBPrescaler>:
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b083      	sub	sp, #12
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8007ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007ece:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ed2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007ede:	bf00      	nop
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <LL_RCC_SetAHB4Prescaler>:
{
 8007eea:	b480      	push	{r7}
 8007eec:	b083      	sub	sp, #12
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ef6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007efa:	f023 020f 	bic.w	r2, r3, #15
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	091b      	lsrs	r3, r3, #4
 8007f02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f06:	4313      	orrs	r3, r2
 8007f08:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <LL_RCC_SetAPB1Prescaler>:
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	608b      	str	r3, [r1, #8]
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <LL_RCC_SetAPB2Prescaler>:
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007f52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	608b      	str	r3, [r1, #8]
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <LL_RCC_GetAHBPrescaler>:
{
 8007f68:	b480      	push	{r7}
 8007f6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <LL_RCC_GetAHB4Prescaler>:
{
 8007f80:	b480      	push	{r7}
 8007f82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f88:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007f8c:	011b      	lsls	r3, r3, #4
 8007f8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <LL_RCC_PLL_Enable>:
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fae:	6013      	str	r3, [r2, #0]
}
 8007fb0:	bf00      	nop
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <LL_RCC_PLL_Disable>:
{
 8007fba:	b480      	push	{r7}
 8007fbc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8007fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fcc:	6013      	str	r3, [r2, #0]
}
 8007fce:	bf00      	nop
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <LL_RCC_PLL_IsReady>:
{
 8007fd8:	b480      	push	{r7}
 8007fda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fea:	d101      	bne.n	8007ff0 <LL_RCC_PLL_IsReady+0x18>
 8007fec:	2301      	movs	r3, #1
 8007fee:	e000      	b.n	8007ff2 <LL_RCC_PLL_IsReady+0x1a>
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <LL_RCC_PLL_GetN>:
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	0a1b      	lsrs	r3, r3, #8
 8008008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800800c:	4618      	mov	r0, r3
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr

08008016 <LL_RCC_PLL_GetR>:
{
 8008016:	b480      	push	{r7}
 8008018:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800801a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8008024:	4618      	mov	r0, r3
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <LL_RCC_PLL_GetDivider>:
{
 800802e:	b480      	push	{r7}
 8008030:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800803c:	4618      	mov	r0, r3
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <LL_RCC_PLL_GetMainSource>:
{
 8008046:	b480      	push	{r7}
 8008048:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800804a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	f003 0303 	and.w	r3, r3, #3
}
 8008054:	4618      	mov	r0, r3
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <LL_RCC_IsActiveFlag_HPRE>:
{
 800805e:	b480      	push	{r7}
 8008060:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8008062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800806c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008070:	d101      	bne.n	8008076 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8008072:	2301      	movs	r3, #1
 8008074:	e000      	b.n	8008078 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8008082:	b480      	push	{r7}
 8008084:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8008086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800808a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800808e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008092:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008096:	d101      	bne.n	800809c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8008098:	2301      	movs	r3, #1
 800809a:	e000      	b.n	800809e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80080a8:	b480      	push	{r7}
 80080aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80080ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80080b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080bc:	d101      	bne.n	80080c2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80080be:	2301      	movs	r3, #1
 80080c0:	e000      	b.n	80080c4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <LL_RCC_IsActiveFlag_PPRE1>:
{
 80080ce:	b480      	push	{r7}
 80080d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80080d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080e0:	d101      	bne.n	80080e6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80080e2:	2301      	movs	r3, #1
 80080e4:	e000      	b.n	80080e8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80080f2:	b480      	push	{r7}
 80080f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80080f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008100:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008104:	d101      	bne.n	800810a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8008106:	2301      	movs	r3, #1
 8008108:	e000      	b.n	800810c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
	...

08008118 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008118:	b590      	push	{r4, r7, lr}
 800811a:	b08d      	sub	sp, #52	; 0x34
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d101      	bne.n	800812a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e363      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 0320 	and.w	r3, r3, #32
 8008132:	2b00      	cmp	r3, #0
 8008134:	f000 808d 	beq.w	8008252 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008138:	f7ff fea1 	bl	8007e7e <LL_RCC_GetSysClkSource>
 800813c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800813e:	f7ff ff82 	bl	8008046 <LL_RCC_PLL_GetMainSource>
 8008142:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008146:	2b00      	cmp	r3, #0
 8008148:	d005      	beq.n	8008156 <HAL_RCC_OscConfig+0x3e>
 800814a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814c:	2b0c      	cmp	r3, #12
 800814e:	d147      	bne.n	80081e0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8008150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008152:	2b01      	cmp	r3, #1
 8008154:	d144      	bne.n	80081e0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	69db      	ldr	r3, [r3, #28]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d101      	bne.n	8008162 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e347      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008166:	f7ff fe4c 	bl	8007e02 <LL_RCC_MSI_GetRange>
 800816a:	4603      	mov	r3, r0
 800816c:	429c      	cmp	r4, r3
 800816e:	d914      	bls.n	800819a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008174:	4618      	mov	r0, r3
 8008176:	f000 fd03 	bl	8008b80 <RCC_SetFlashLatencyFromMSIRange>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d001      	beq.n	8008184 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e336      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008188:	4618      	mov	r0, r3
 800818a:	f7ff fe26 	bl	8007dda <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	4618      	mov	r0, r3
 8008194:	f7ff fe4a 	bl	8007e2c <LL_RCC_MSI_SetCalibTrimming>
 8008198:	e013      	b.n	80081c2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819e:	4618      	mov	r0, r3
 80081a0:	f7ff fe1b 	bl	8007dda <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a1b      	ldr	r3, [r3, #32]
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7ff fe3f 	bl	8007e2c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 fce4 	bl	8008b80 <RCC_SetFlashLatencyFromMSIRange>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d001      	beq.n	80081c2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e317      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80081c2:	f000 fcc9 	bl	8008b58 <HAL_RCC_GetHCLKFreq>
 80081c6:	4603      	mov	r3, r0
 80081c8:	4aa4      	ldr	r2, [pc, #656]	; (800845c <HAL_RCC_OscConfig+0x344>)
 80081ca:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80081cc:	4ba4      	ldr	r3, [pc, #656]	; (8008460 <HAL_RCC_OscConfig+0x348>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7fa fd4d 	bl	8002c70 <HAL_InitTick>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d039      	beq.n	8008250 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e308      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	69db      	ldr	r3, [r3, #28]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d01e      	beq.n	8008226 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80081e8:	f7ff fdc8 	bl	8007d7c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80081ec:	f7fa fd8e 	bl	8002d0c <HAL_GetTick>
 80081f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80081f2:	e008      	b.n	8008206 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80081f4:	f7fa fd8a 	bl	8002d0c <HAL_GetTick>
 80081f8:	4602      	mov	r2, r0
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d901      	bls.n	8008206 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e2f5      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8008206:	f7ff fdd7 	bl	8007db8 <LL_RCC_MSI_IsReady>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d0f1      	beq.n	80081f4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008214:	4618      	mov	r0, r3
 8008216:	f7ff fde0 	bl	8007dda <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a1b      	ldr	r3, [r3, #32]
 800821e:	4618      	mov	r0, r3
 8008220:	f7ff fe04 	bl	8007e2c <LL_RCC_MSI_SetCalibTrimming>
 8008224:	e015      	b.n	8008252 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008226:	f7ff fdb8 	bl	8007d9a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800822a:	f7fa fd6f 	bl	8002d0c <HAL_GetTick>
 800822e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8008230:	e008      	b.n	8008244 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008232:	f7fa fd6b 	bl	8002d0c <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	2b02      	cmp	r3, #2
 800823e:	d901      	bls.n	8008244 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	e2d6      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8008244:	f7ff fdb8 	bl	8007db8 <LL_RCC_MSI_IsReady>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1f1      	bne.n	8008232 <HAL_RCC_OscConfig+0x11a>
 800824e:	e000      	b.n	8008252 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008250:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	2b00      	cmp	r3, #0
 800825c:	d047      	beq.n	80082ee <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800825e:	f7ff fe0e 	bl	8007e7e <LL_RCC_GetSysClkSource>
 8008262:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008264:	f7ff feef 	bl	8008046 <LL_RCC_PLL_GetMainSource>
 8008268:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800826a:	6a3b      	ldr	r3, [r7, #32]
 800826c:	2b08      	cmp	r3, #8
 800826e:	d005      	beq.n	800827c <HAL_RCC_OscConfig+0x164>
 8008270:	6a3b      	ldr	r3, [r7, #32]
 8008272:	2b0c      	cmp	r3, #12
 8008274:	d108      	bne.n	8008288 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	2b03      	cmp	r3, #3
 800827a:	d105      	bne.n	8008288 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d134      	bne.n	80082ee <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e2b4      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008290:	d102      	bne.n	8008298 <HAL_RCC_OscConfig+0x180>
 8008292:	f7ff fbf5 	bl	8007a80 <LL_RCC_HSE_Enable>
 8008296:	e001      	b.n	800829c <HAL_RCC_OscConfig+0x184>
 8008298:	f7ff fc01 	bl	8007a9e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d012      	beq.n	80082ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082a4:	f7fa fd32 	bl	8002d0c <HAL_GetTick>
 80082a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80082aa:	e008      	b.n	80082be <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082ac:	f7fa fd2e 	bl	8002d0c <HAL_GetTick>
 80082b0:	4602      	mov	r2, r0
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	2b64      	cmp	r3, #100	; 0x64
 80082b8:	d901      	bls.n	80082be <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e299      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80082be:	f7ff fbfd 	bl	8007abc <LL_RCC_HSE_IsReady>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d0f1      	beq.n	80082ac <HAL_RCC_OscConfig+0x194>
 80082c8:	e011      	b.n	80082ee <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ca:	f7fa fd1f 	bl	8002d0c <HAL_GetTick>
 80082ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80082d0:	e008      	b.n	80082e4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082d2:	f7fa fd1b 	bl	8002d0c <HAL_GetTick>
 80082d6:	4602      	mov	r2, r0
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	2b64      	cmp	r3, #100	; 0x64
 80082de:	d901      	bls.n	80082e4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e286      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80082e4:	f7ff fbea 	bl	8007abc <LL_RCC_HSE_IsReady>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1f1      	bne.n	80082d2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 0302 	and.w	r3, r3, #2
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d04c      	beq.n	8008394 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082fa:	f7ff fdc0 	bl	8007e7e <LL_RCC_GetSysClkSource>
 80082fe:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008300:	f7ff fea1 	bl	8008046 <LL_RCC_PLL_GetMainSource>
 8008304:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	2b04      	cmp	r3, #4
 800830a:	d005      	beq.n	8008318 <HAL_RCC_OscConfig+0x200>
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	2b0c      	cmp	r3, #12
 8008310:	d10e      	bne.n	8008330 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	2b02      	cmp	r3, #2
 8008316:	d10b      	bne.n	8008330 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d101      	bne.n	8008324 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e266      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	4618      	mov	r0, r3
 800832a:	f7ff fc09 	bl	8007b40 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800832e:	e031      	b.n	8008394 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d019      	beq.n	800836c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008338:	f7ff fbd2 	bl	8007ae0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800833c:	f7fa fce6 	bl	8002d0c <HAL_GetTick>
 8008340:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008342:	e008      	b.n	8008356 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008344:	f7fa fce2 	bl	8002d0c <HAL_GetTick>
 8008348:	4602      	mov	r2, r0
 800834a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	2b02      	cmp	r3, #2
 8008350:	d901      	bls.n	8008356 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008352:	2303      	movs	r3, #3
 8008354:	e24d      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8008356:	f7ff fbe1 	bl	8007b1c <LL_RCC_HSI_IsReady>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d0f1      	beq.n	8008344 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	4618      	mov	r0, r3
 8008366:	f7ff fbeb 	bl	8007b40 <LL_RCC_HSI_SetCalibTrimming>
 800836a:	e013      	b.n	8008394 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800836c:	f7ff fbc7 	bl	8007afe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008370:	f7fa fccc 	bl	8002d0c <HAL_GetTick>
 8008374:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8008376:	e008      	b.n	800838a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008378:	f7fa fcc8 	bl	8002d0c <HAL_GetTick>
 800837c:	4602      	mov	r2, r0
 800837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	2b02      	cmp	r3, #2
 8008384:	d901      	bls.n	800838a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8008386:	2303      	movs	r3, #3
 8008388:	e233      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800838a:	f7ff fbc7 	bl	8007b1c <LL_RCC_HSI_IsReady>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1f1      	bne.n	8008378 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0308 	and.w	r3, r3, #8
 800839c:	2b00      	cmp	r3, #0
 800839e:	d106      	bne.n	80083ae <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 80a3 	beq.w	80084f4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d076      	beq.n	80084a4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 0310 	and.w	r3, r3, #16
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d046      	beq.n	8008450 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80083c2:	f7ff fc7e 	bl	8007cc2 <LL_RCC_LSI1_IsReady>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d113      	bne.n	80083f4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80083cc:	f7ff fc57 	bl	8007c7e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80083d0:	f7fa fc9c 	bl	8002d0c <HAL_GetTick>
 80083d4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80083d6:	e008      	b.n	80083ea <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80083d8:	f7fa fc98 	bl	8002d0c <HAL_GetTick>
 80083dc:	4602      	mov	r2, r0
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d901      	bls.n	80083ea <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e203      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80083ea:	f7ff fc6a 	bl	8007cc2 <LL_RCC_LSI1_IsReady>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d0f1      	beq.n	80083d8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80083f4:	f7ff fc77 	bl	8007ce6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083f8:	f7fa fc88 	bl	8002d0c <HAL_GetTick>
 80083fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80083fe:	e008      	b.n	8008412 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008400:	f7fa fc84 	bl	8002d0c <HAL_GetTick>
 8008404:	4602      	mov	r2, r0
 8008406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	2b03      	cmp	r3, #3
 800840c:	d901      	bls.n	8008412 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800840e:	2303      	movs	r3, #3
 8008410:	e1ef      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008412:	f7ff fc8a 	bl	8007d2a <LL_RCC_LSI2_IsReady>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d0f1      	beq.n	8008400 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	4618      	mov	r0, r3
 8008422:	f7ff fc94 	bl	8007d4e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8008426:	f7ff fc3b 	bl	8007ca0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800842a:	f7fa fc6f 	bl	8002d0c <HAL_GetTick>
 800842e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008430:	e008      	b.n	8008444 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008432:	f7fa fc6b 	bl	8002d0c <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	2b02      	cmp	r3, #2
 800843e:	d901      	bls.n	8008444 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e1d6      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008444:	f7ff fc3d 	bl	8007cc2 <LL_RCC_LSI1_IsReady>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1f1      	bne.n	8008432 <HAL_RCC_OscConfig+0x31a>
 800844e:	e051      	b.n	80084f4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8008450:	f7ff fc15 	bl	8007c7e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008454:	f7fa fc5a 	bl	8002d0c <HAL_GetTick>
 8008458:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800845a:	e00c      	b.n	8008476 <HAL_RCC_OscConfig+0x35e>
 800845c:	2000000c 	.word	0x2000000c
 8008460:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008464:	f7fa fc52 	bl	8002d0c <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	2b02      	cmp	r3, #2
 8008470:	d901      	bls.n	8008476 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e1bd      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8008476:	f7ff fc24 	bl	8007cc2 <LL_RCC_LSI1_IsReady>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d0f1      	beq.n	8008464 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8008480:	f7ff fc42 	bl	8007d08 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008484:	e008      	b.n	8008498 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008486:	f7fa fc41 	bl	8002d0c <HAL_GetTick>
 800848a:	4602      	mov	r2, r0
 800848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	2b03      	cmp	r3, #3
 8008492:	d901      	bls.n	8008498 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	e1ac      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008498:	f7ff fc47 	bl	8007d2a <LL_RCC_LSI2_IsReady>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1f1      	bne.n	8008486 <HAL_RCC_OscConfig+0x36e>
 80084a2:	e027      	b.n	80084f4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80084a4:	f7ff fc30 	bl	8007d08 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084a8:	f7fa fc30 	bl	8002d0c <HAL_GetTick>
 80084ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80084ae:	e008      	b.n	80084c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80084b0:	f7fa fc2c 	bl	8002d0c <HAL_GetTick>
 80084b4:	4602      	mov	r2, r0
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	2b03      	cmp	r3, #3
 80084bc:	d901      	bls.n	80084c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e197      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80084c2:	f7ff fc32 	bl	8007d2a <LL_RCC_LSI2_IsReady>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1f1      	bne.n	80084b0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80084cc:	f7ff fbe8 	bl	8007ca0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084d0:	f7fa fc1c 	bl	8002d0c <HAL_GetTick>
 80084d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80084d6:	e008      	b.n	80084ea <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80084d8:	f7fa fc18 	bl	8002d0c <HAL_GetTick>
 80084dc:	4602      	mov	r2, r0
 80084de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d901      	bls.n	80084ea <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80084e6:	2303      	movs	r3, #3
 80084e8:	e183      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80084ea:	f7ff fbea 	bl	8007cc2 <LL_RCC_LSI1_IsReady>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1f1      	bne.n	80084d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 0304 	and.w	r3, r3, #4
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d05b      	beq.n	80085b8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008500:	4ba7      	ldr	r3, [pc, #668]	; (80087a0 <HAL_RCC_OscConfig+0x688>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008508:	2b00      	cmp	r3, #0
 800850a:	d114      	bne.n	8008536 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800850c:	f7ff fa78 	bl	8007a00 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008510:	f7fa fbfc 	bl	8002d0c <HAL_GetTick>
 8008514:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008516:	e008      	b.n	800852a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008518:	f7fa fbf8 	bl	8002d0c <HAL_GetTick>
 800851c:	4602      	mov	r2, r0
 800851e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	2b02      	cmp	r3, #2
 8008524:	d901      	bls.n	800852a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e163      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800852a:	4b9d      	ldr	r3, [pc, #628]	; (80087a0 <HAL_RCC_OscConfig+0x688>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008532:	2b00      	cmp	r3, #0
 8008534:	d0f0      	beq.n	8008518 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d102      	bne.n	8008544 <HAL_RCC_OscConfig+0x42c>
 800853e:	f7ff fb48 	bl	8007bd2 <LL_RCC_LSE_Enable>
 8008542:	e00c      	b.n	800855e <HAL_RCC_OscConfig+0x446>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	2b05      	cmp	r3, #5
 800854a:	d104      	bne.n	8008556 <HAL_RCC_OscConfig+0x43e>
 800854c:	f7ff fb63 	bl	8007c16 <LL_RCC_LSE_EnableBypass>
 8008550:	f7ff fb3f 	bl	8007bd2 <LL_RCC_LSE_Enable>
 8008554:	e003      	b.n	800855e <HAL_RCC_OscConfig+0x446>
 8008556:	f7ff fb4d 	bl	8007bf4 <LL_RCC_LSE_Disable>
 800855a:	f7ff fb6d 	bl	8007c38 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d014      	beq.n	8008590 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008566:	f7fa fbd1 	bl	8002d0c <HAL_GetTick>
 800856a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800856c:	e00a      	b.n	8008584 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800856e:	f7fa fbcd 	bl	8002d0c <HAL_GetTick>
 8008572:	4602      	mov	r2, r0
 8008574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	f241 3288 	movw	r2, #5000	; 0x1388
 800857c:	4293      	cmp	r3, r2
 800857e:	d901      	bls.n	8008584 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e136      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8008584:	f7ff fb69 	bl	8007c5a <LL_RCC_LSE_IsReady>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d0ef      	beq.n	800856e <HAL_RCC_OscConfig+0x456>
 800858e:	e013      	b.n	80085b8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008590:	f7fa fbbc 	bl	8002d0c <HAL_GetTick>
 8008594:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8008596:	e00a      	b.n	80085ae <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008598:	f7fa fbb8 	bl	8002d0c <HAL_GetTick>
 800859c:	4602      	mov	r2, r0
 800859e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d901      	bls.n	80085ae <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80085aa:	2303      	movs	r3, #3
 80085ac:	e121      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80085ae:	f7ff fb54 	bl	8007c5a <LL_RCC_LSE_IsReady>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1ef      	bne.n	8008598 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d02c      	beq.n	800861e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d014      	beq.n	80085f6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80085cc:	f7ff facd 	bl	8007b6a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085d0:	f7fa fb9c 	bl	8002d0c <HAL_GetTick>
 80085d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80085d6:	e008      	b.n	80085ea <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80085d8:	f7fa fb98 	bl	8002d0c <HAL_GetTick>
 80085dc:	4602      	mov	r2, r0
 80085de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d901      	bls.n	80085ea <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e103      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80085ea:	f7ff fae0 	bl	8007bae <LL_RCC_HSI48_IsReady>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d0f1      	beq.n	80085d8 <HAL_RCC_OscConfig+0x4c0>
 80085f4:	e013      	b.n	800861e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80085f6:	f7ff fac9 	bl	8007b8c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085fa:	f7fa fb87 	bl	8002d0c <HAL_GetTick>
 80085fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008600:	e008      	b.n	8008614 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008602:	f7fa fb83 	bl	8002d0c <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	2b02      	cmp	r3, #2
 800860e:	d901      	bls.n	8008614 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e0ee      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008614:	f7ff facb 	bl	8007bae <LL_RCC_HSI48_IsReady>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1f1      	bne.n	8008602 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008622:	2b00      	cmp	r3, #0
 8008624:	f000 80e4 	beq.w	80087f0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008628:	f7ff fc29 	bl	8007e7e <LL_RCC_GetSysClkSource>
 800862c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800862e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863a:	2b02      	cmp	r3, #2
 800863c:	f040 80b4 	bne.w	80087a8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f003 0203 	and.w	r2, r3, #3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864a:	429a      	cmp	r2, r3
 800864c:	d123      	bne.n	8008696 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008658:	429a      	cmp	r2, r3
 800865a:	d11c      	bne.n	8008696 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	0a1b      	lsrs	r3, r3, #8
 8008660:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008668:	429a      	cmp	r2, r3
 800866a:	d114      	bne.n	8008696 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008676:	429a      	cmp	r2, r3
 8008678:	d10d      	bne.n	8008696 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008684:	429a      	cmp	r2, r3
 8008686:	d106      	bne.n	8008696 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008692:	429a      	cmp	r2, r3
 8008694:	d05d      	beq.n	8008752 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	2b0c      	cmp	r3, #12
 800869a:	d058      	beq.n	800874e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800869c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d001      	beq.n	80086ae <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	e0a1      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80086ae:	f7ff fc84 	bl	8007fba <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80086b2:	f7fa fb2b 	bl	8002d0c <HAL_GetTick>
 80086b6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80086b8:	e008      	b.n	80086cc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086ba:	f7fa fb27 	bl	8002d0c <HAL_GetTick>
 80086be:	4602      	mov	r2, r0
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d901      	bls.n	80086cc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80086c8:	2303      	movs	r3, #3
 80086ca:	e092      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80086cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1ef      	bne.n	80086ba <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086de:	68da      	ldr	r2, [r3, #12]
 80086e0:	4b30      	ldr	r3, [pc, #192]	; (80087a4 <HAL_RCC_OscConfig+0x68c>)
 80086e2:	4013      	ands	r3, r2
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80086ec:	4311      	orrs	r1, r2
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80086f2:	0212      	lsls	r2, r2, #8
 80086f4:	4311      	orrs	r1, r2
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80086fa:	4311      	orrs	r1, r2
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008700:	4311      	orrs	r1, r2
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008706:	430a      	orrs	r2, r1
 8008708:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800870c:	4313      	orrs	r3, r2
 800870e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008710:	f7ff fc44 	bl	8007f9c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800871e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008722:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008724:	f7fa faf2 	bl	8002d0c <HAL_GetTick>
 8008728:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800872a:	e008      	b.n	800873e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800872c:	f7fa faee 	bl	8002d0c <HAL_GetTick>
 8008730:	4602      	mov	r2, r0
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	2b02      	cmp	r3, #2
 8008738:	d901      	bls.n	800873e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800873a:	2303      	movs	r3, #3
 800873c:	e059      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800873e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d0ef      	beq.n	800872c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800874c:	e050      	b.n	80087f0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e04f      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d147      	bne.n	80087f0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008760:	f7ff fc1c 	bl	8007f9c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800876e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008772:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008774:	f7fa faca 	bl	8002d0c <HAL_GetTick>
 8008778:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800877a:	e008      	b.n	800878e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800877c:	f7fa fac6 	bl	8002d0c <HAL_GetTick>
 8008780:	4602      	mov	r2, r0
 8008782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	2b02      	cmp	r3, #2
 8008788:	d901      	bls.n	800878e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	e031      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800878e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d0ef      	beq.n	800877c <HAL_RCC_OscConfig+0x664>
 800879c:	e028      	b.n	80087f0 <HAL_RCC_OscConfig+0x6d8>
 800879e:	bf00      	nop
 80087a0:	58000400 	.word	0x58000400
 80087a4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	2b0c      	cmp	r3, #12
 80087ac:	d01e      	beq.n	80087ec <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087ae:	f7ff fc04 	bl	8007fba <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087b2:	f7fa faab 	bl	8002d0c <HAL_GetTick>
 80087b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80087b8:	e008      	b.n	80087cc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087ba:	f7fa faa7 	bl	8002d0c <HAL_GetTick>
 80087be:	4602      	mov	r2, r0
 80087c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c2:	1ad3      	subs	r3, r2, r3
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d901      	bls.n	80087cc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80087c8:	2303      	movs	r3, #3
 80087ca:	e012      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80087cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1ef      	bne.n	80087ba <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80087da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087de:	68da      	ldr	r2, [r3, #12]
 80087e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80087e4:	4b05      	ldr	r3, [pc, #20]	; (80087fc <HAL_RCC_OscConfig+0x6e4>)
 80087e6:	4013      	ands	r3, r2
 80087e8:	60cb      	str	r3, [r1, #12]
 80087ea:	e001      	b.n	80087f0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e000      	b.n	80087f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3734      	adds	r7, #52	; 0x34
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd90      	pop	{r4, r7, pc}
 80087fa:	bf00      	nop
 80087fc:	eefefffc 	.word	0xeefefffc

08008800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d101      	bne.n	8008814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e12d      	b.n	8008a70 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008814:	4b98      	ldr	r3, [pc, #608]	; (8008a78 <HAL_RCC_ClockConfig+0x278>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0307 	and.w	r3, r3, #7
 800881c:	683a      	ldr	r2, [r7, #0]
 800881e:	429a      	cmp	r2, r3
 8008820:	d91b      	bls.n	800885a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008822:	4b95      	ldr	r3, [pc, #596]	; (8008a78 <HAL_RCC_ClockConfig+0x278>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f023 0207 	bic.w	r2, r3, #7
 800882a:	4993      	ldr	r1, [pc, #588]	; (8008a78 <HAL_RCC_ClockConfig+0x278>)
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	4313      	orrs	r3, r2
 8008830:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008832:	f7fa fa6b 	bl	8002d0c <HAL_GetTick>
 8008836:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008838:	e008      	b.n	800884c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800883a:	f7fa fa67 	bl	8002d0c <HAL_GetTick>
 800883e:	4602      	mov	r2, r0
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	2b02      	cmp	r3, #2
 8008846:	d901      	bls.n	800884c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008848:	2303      	movs	r3, #3
 800884a:	e111      	b.n	8008a70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800884c:	4b8a      	ldr	r3, [pc, #552]	; (8008a78 <HAL_RCC_ClockConfig+0x278>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 0307 	and.w	r3, r3, #7
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	429a      	cmp	r2, r3
 8008858:	d1ef      	bne.n	800883a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 0302 	and.w	r3, r3, #2
 8008862:	2b00      	cmp	r3, #0
 8008864:	d016      	beq.n	8008894 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	4618      	mov	r0, r3
 800886c:	f7ff fb13 	bl	8007e96 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008870:	f7fa fa4c 	bl	8002d0c <HAL_GetTick>
 8008874:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008876:	e008      	b.n	800888a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008878:	f7fa fa48 	bl	8002d0c <HAL_GetTick>
 800887c:	4602      	mov	r2, r0
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	2b02      	cmp	r3, #2
 8008884:	d901      	bls.n	800888a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8008886:	2303      	movs	r3, #3
 8008888:	e0f2      	b.n	8008a70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800888a:	f7ff fbe8 	bl	800805e <LL_RCC_IsActiveFlag_HPRE>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d0f1      	beq.n	8008878 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 0320 	and.w	r3, r3, #32
 800889c:	2b00      	cmp	r3, #0
 800889e:	d016      	beq.n	80088ce <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7ff fb0a 	bl	8007ebe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80088aa:	f7fa fa2f 	bl	8002d0c <HAL_GetTick>
 80088ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80088b0:	e008      	b.n	80088c4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80088b2:	f7fa fa2b 	bl	8002d0c <HAL_GetTick>
 80088b6:	4602      	mov	r2, r0
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d901      	bls.n	80088c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e0d5      	b.n	8008a70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80088c4:	f7ff fbdd 	bl	8008082 <LL_RCC_IsActiveFlag_C2HPRE>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d0f1      	beq.n	80088b2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d016      	beq.n	8008908 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	699b      	ldr	r3, [r3, #24]
 80088de:	4618      	mov	r0, r3
 80088e0:	f7ff fb03 	bl	8007eea <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80088e4:	f7fa fa12 	bl	8002d0c <HAL_GetTick>
 80088e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80088ea:	e008      	b.n	80088fe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80088ec:	f7fa fa0e 	bl	8002d0c <HAL_GetTick>
 80088f0:	4602      	mov	r2, r0
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d901      	bls.n	80088fe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80088fa:	2303      	movs	r3, #3
 80088fc:	e0b8      	b.n	8008a70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80088fe:	f7ff fbd3 	bl	80080a8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d0f1      	beq.n	80088ec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 0304 	and.w	r3, r3, #4
 8008910:	2b00      	cmp	r3, #0
 8008912:	d016      	beq.n	8008942 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	4618      	mov	r0, r3
 800891a:	f7ff fafd 	bl	8007f18 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800891e:	f7fa f9f5 	bl	8002d0c <HAL_GetTick>
 8008922:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008924:	e008      	b.n	8008938 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008926:	f7fa f9f1 	bl	8002d0c <HAL_GetTick>
 800892a:	4602      	mov	r2, r0
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	2b02      	cmp	r3, #2
 8008932:	d901      	bls.n	8008938 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8008934:	2303      	movs	r3, #3
 8008936:	e09b      	b.n	8008a70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008938:	f7ff fbc9 	bl	80080ce <LL_RCC_IsActiveFlag_PPRE1>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d0f1      	beq.n	8008926 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 0308 	and.w	r3, r3, #8
 800894a:	2b00      	cmp	r3, #0
 800894c:	d017      	beq.n	800897e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	00db      	lsls	r3, r3, #3
 8008954:	4618      	mov	r0, r3
 8008956:	f7ff faf3 	bl	8007f40 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800895a:	f7fa f9d7 	bl	8002d0c <HAL_GetTick>
 800895e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008960:	e008      	b.n	8008974 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008962:	f7fa f9d3 	bl	8002d0c <HAL_GetTick>
 8008966:	4602      	mov	r2, r0
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	2b02      	cmp	r3, #2
 800896e:	d901      	bls.n	8008974 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	e07d      	b.n	8008a70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008974:	f7ff fbbd 	bl	80080f2 <LL_RCC_IsActiveFlag_PPRE2>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d0f1      	beq.n	8008962 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	2b00      	cmp	r3, #0
 8008988:	d043      	beq.n	8008a12 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	2b02      	cmp	r3, #2
 8008990:	d106      	bne.n	80089a0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008992:	f7ff f893 	bl	8007abc <LL_RCC_HSE_IsReady>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d11e      	bne.n	80089da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e067      	b.n	8008a70 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	2b03      	cmp	r3, #3
 80089a6:	d106      	bne.n	80089b6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80089a8:	f7ff fb16 	bl	8007fd8 <LL_RCC_PLL_IsReady>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d113      	bne.n	80089da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e05c      	b.n	8008a70 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d106      	bne.n	80089cc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80089be:	f7ff f9fb 	bl	8007db8 <LL_RCC_MSI_IsReady>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d108      	bne.n	80089da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e051      	b.n	8008a70 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80089cc:	f7ff f8a6 	bl	8007b1c <LL_RCC_HSI_IsReady>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d101      	bne.n	80089da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e04a      	b.n	8008a70 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	4618      	mov	r0, r3
 80089e0:	f7ff fa39 	bl	8007e56 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089e4:	f7fa f992 	bl	8002d0c <HAL_GetTick>
 80089e8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089ea:	e00a      	b.n	8008a02 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089ec:	f7fa f98e 	bl	8002d0c <HAL_GetTick>
 80089f0:	4602      	mov	r2, r0
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d901      	bls.n	8008a02 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80089fe:	2303      	movs	r3, #3
 8008a00:	e036      	b.n	8008a70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a02:	f7ff fa3c 	bl	8007e7e <LL_RCC_GetSysClkSource>
 8008a06:	4602      	mov	r2, r0
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d1ec      	bne.n	80089ec <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a12:	4b19      	ldr	r3, [pc, #100]	; (8008a78 <HAL_RCC_ClockConfig+0x278>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f003 0307 	and.w	r3, r3, #7
 8008a1a:	683a      	ldr	r2, [r7, #0]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d21b      	bcs.n	8008a58 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a20:	4b15      	ldr	r3, [pc, #84]	; (8008a78 <HAL_RCC_ClockConfig+0x278>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f023 0207 	bic.w	r2, r3, #7
 8008a28:	4913      	ldr	r1, [pc, #76]	; (8008a78 <HAL_RCC_ClockConfig+0x278>)
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a30:	f7fa f96c 	bl	8002d0c <HAL_GetTick>
 8008a34:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a36:	e008      	b.n	8008a4a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008a38:	f7fa f968 	bl	8002d0c <HAL_GetTick>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d901      	bls.n	8008a4a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	e012      	b.n	8008a70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a4a:	4b0b      	ldr	r3, [pc, #44]	; (8008a78 <HAL_RCC_ClockConfig+0x278>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 0307 	and.w	r3, r3, #7
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d1ef      	bne.n	8008a38 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008a58:	f000 f87e 	bl	8008b58 <HAL_RCC_GetHCLKFreq>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	4a07      	ldr	r2, [pc, #28]	; (8008a7c <HAL_RCC_ClockConfig+0x27c>)
 8008a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8008a62:	f7fa f95f 	bl	8002d24 <HAL_GetTickPrio>
 8008a66:	4603      	mov	r3, r0
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fa f901 	bl	8002c70 <HAL_InitTick>
 8008a6e:	4603      	mov	r3, r0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	58004000 	.word	0x58004000
 8008a7c:	2000000c 	.word	0x2000000c

08008a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a80:	b590      	push	{r4, r7, lr}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a86:	f7ff f9fa 	bl	8007e7e <LL_RCC_GetSysClkSource>
 8008a8a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10a      	bne.n	8008aa8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008a92:	f7ff f9b6 	bl	8007e02 <LL_RCC_MSI_GetRange>
 8008a96:	4603      	mov	r3, r0
 8008a98:	091b      	lsrs	r3, r3, #4
 8008a9a:	f003 030f 	and.w	r3, r3, #15
 8008a9e:	4a2b      	ldr	r2, [pc, #172]	; (8008b4c <HAL_RCC_GetSysClockFreq+0xcc>)
 8008aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008aa4:	60fb      	str	r3, [r7, #12]
 8008aa6:	e04b      	b.n	8008b40 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2b04      	cmp	r3, #4
 8008aac:	d102      	bne.n	8008ab4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008aae:	4b28      	ldr	r3, [pc, #160]	; (8008b50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008ab0:	60fb      	str	r3, [r7, #12]
 8008ab2:	e045      	b.n	8008b40 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b08      	cmp	r3, #8
 8008ab8:	d10a      	bne.n	8008ad0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008aba:	f7fe ffcf 	bl	8007a5c <LL_RCC_HSE_IsEnabledDiv2>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d102      	bne.n	8008aca <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008ac4:	4b22      	ldr	r3, [pc, #136]	; (8008b50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008ac6:	60fb      	str	r3, [r7, #12]
 8008ac8:	e03a      	b.n	8008b40 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008aca:	4b22      	ldr	r3, [pc, #136]	; (8008b54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008acc:	60fb      	str	r3, [r7, #12]
 8008ace:	e037      	b.n	8008b40 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008ad0:	f7ff fab9 	bl	8008046 <LL_RCC_PLL_GetMainSource>
 8008ad4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d003      	beq.n	8008ae4 <HAL_RCC_GetSysClockFreq+0x64>
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	2b03      	cmp	r3, #3
 8008ae0:	d003      	beq.n	8008aea <HAL_RCC_GetSysClockFreq+0x6a>
 8008ae2:	e00d      	b.n	8008b00 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008ae4:	4b1a      	ldr	r3, [pc, #104]	; (8008b50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008ae6:	60bb      	str	r3, [r7, #8]
        break;
 8008ae8:	e015      	b.n	8008b16 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008aea:	f7fe ffb7 	bl	8007a5c <LL_RCC_HSE_IsEnabledDiv2>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d102      	bne.n	8008afa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008af4:	4b16      	ldr	r3, [pc, #88]	; (8008b50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008af6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008af8:	e00d      	b.n	8008b16 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8008afa:	4b16      	ldr	r3, [pc, #88]	; (8008b54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008afc:	60bb      	str	r3, [r7, #8]
        break;
 8008afe:	e00a      	b.n	8008b16 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008b00:	f7ff f97f 	bl	8007e02 <LL_RCC_MSI_GetRange>
 8008b04:	4603      	mov	r3, r0
 8008b06:	091b      	lsrs	r3, r3, #4
 8008b08:	f003 030f 	and.w	r3, r3, #15
 8008b0c:	4a0f      	ldr	r2, [pc, #60]	; (8008b4c <HAL_RCC_GetSysClockFreq+0xcc>)
 8008b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b12:	60bb      	str	r3, [r7, #8]
        break;
 8008b14:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8008b16:	f7ff fa71 	bl	8007ffc <LL_RCC_PLL_GetN>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	fb03 f402 	mul.w	r4, r3, r2
 8008b22:	f7ff fa84 	bl	800802e <LL_RCC_PLL_GetDivider>
 8008b26:	4603      	mov	r3, r0
 8008b28:	091b      	lsrs	r3, r3, #4
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	fbb4 f4f3 	udiv	r4, r4, r3
 8008b30:	f7ff fa71 	bl	8008016 <LL_RCC_PLL_GetR>
 8008b34:	4603      	mov	r3, r0
 8008b36:	0f5b      	lsrs	r3, r3, #29
 8008b38:	3301      	adds	r3, #1
 8008b3a:	fbb4 f3f3 	udiv	r3, r4, r3
 8008b3e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8008b40:	68fb      	ldr	r3, [r7, #12]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd90      	pop	{r4, r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	080170f8 	.word	0x080170f8
 8008b50:	00f42400 	.word	0x00f42400
 8008b54:	01e84800 	.word	0x01e84800

08008b58 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b58:	b598      	push	{r3, r4, r7, lr}
 8008b5a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008b5c:	f7ff ff90 	bl	8008a80 <HAL_RCC_GetSysClockFreq>
 8008b60:	4604      	mov	r4, r0
 8008b62:	f7ff fa01 	bl	8007f68 <LL_RCC_GetAHBPrescaler>
 8008b66:	4603      	mov	r3, r0
 8008b68:	091b      	lsrs	r3, r3, #4
 8008b6a:	f003 030f 	and.w	r3, r3, #15
 8008b6e:	4a03      	ldr	r2, [pc, #12]	; (8008b7c <HAL_RCC_GetHCLKFreq+0x24>)
 8008b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b74:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	bd98      	pop	{r3, r4, r7, pc}
 8008b7c:	080170b8 	.word	0x080170b8

08008b80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008b80:	b590      	push	{r4, r7, lr}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2bb0      	cmp	r3, #176	; 0xb0
 8008b8c:	d903      	bls.n	8008b96 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8008b8e:	4b15      	ldr	r3, [pc, #84]	; (8008be4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b92:	60fb      	str	r3, [r7, #12]
 8008b94:	e007      	b.n	8008ba6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	091b      	lsrs	r3, r3, #4
 8008b9a:	f003 030f 	and.w	r3, r3, #15
 8008b9e:	4a11      	ldr	r2, [pc, #68]	; (8008be4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ba4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8008ba6:	f7ff f9eb 	bl	8007f80 <LL_RCC_GetAHB4Prescaler>
 8008baa:	4603      	mov	r3, r0
 8008bac:	091b      	lsrs	r3, r3, #4
 8008bae:	f003 030f 	and.w	r3, r3, #15
 8008bb2:	4a0d      	ldr	r2, [pc, #52]	; (8008be8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8008bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bbe:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	4a0a      	ldr	r2, [pc, #40]	; (8008bec <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8008bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc8:	0c9c      	lsrs	r4, r3, #18
 8008bca:	f7fe ff29 	bl	8007a20 <HAL_PWREx_GetVoltageRange>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	f000 f80c 	bl	8008bf0 <RCC_SetFlashLatency>
 8008bd8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3714      	adds	r7, #20
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd90      	pop	{r4, r7, pc}
 8008be2:	bf00      	nop
 8008be4:	080170f8 	.word	0x080170f8
 8008be8:	080170b8 	.word	0x080170b8
 8008bec:	431bde83 	.word	0x431bde83

08008bf0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008bf0:	b590      	push	{r4, r7, lr}
 8008bf2:	b093      	sub	sp, #76	; 0x4c
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8008bfa:	4b37      	ldr	r3, [pc, #220]	; (8008cd8 <RCC_SetFlashLatency+0xe8>)
 8008bfc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8008c00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8008c06:	4a35      	ldr	r2, [pc, #212]	; (8008cdc <RCC_SetFlashLatency+0xec>)
 8008c08:	f107 031c 	add.w	r3, r7, #28
 8008c0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8008c0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8008c12:	4b33      	ldr	r3, [pc, #204]	; (8008ce0 <RCC_SetFlashLatency+0xf0>)
 8008c14:	f107 040c 	add.w	r4, r7, #12
 8008c18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8008c1e:	2300      	movs	r3, #0
 8008c20:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c28:	d11a      	bne.n	8008c60 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	643b      	str	r3, [r7, #64]	; 0x40
 8008c2e:	e013      	b.n	8008c58 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	3348      	adds	r3, #72	; 0x48
 8008c36:	443b      	add	r3, r7
 8008c38:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d807      	bhi.n	8008c52 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	3348      	adds	r3, #72	; 0x48
 8008c48:	443b      	add	r3, r7
 8008c4a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008c4e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8008c50:	e020      	b.n	8008c94 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c54:	3301      	adds	r3, #1
 8008c56:	643b      	str	r3, [r7, #64]	; 0x40
 8008c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c5a:	2b03      	cmp	r3, #3
 8008c5c:	d9e8      	bls.n	8008c30 <RCC_SetFlashLatency+0x40>
 8008c5e:	e019      	b.n	8008c94 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008c60:	2300      	movs	r3, #0
 8008c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c64:	e013      	b.n	8008c8e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8008c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	3348      	adds	r3, #72	; 0x48
 8008c6c:	443b      	add	r3, r7
 8008c6e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d807      	bhi.n	8008c88 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	3348      	adds	r3, #72	; 0x48
 8008c7e:	443b      	add	r3, r7
 8008c80:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008c84:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8008c86:	e005      	b.n	8008c94 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d9e8      	bls.n	8008c66 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8008c94:	4b13      	ldr	r3, [pc, #76]	; (8008ce4 <RCC_SetFlashLatency+0xf4>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f023 0207 	bic.w	r2, r3, #7
 8008c9c:	4911      	ldr	r1, [pc, #68]	; (8008ce4 <RCC_SetFlashLatency+0xf4>)
 8008c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008ca4:	f7fa f832 	bl	8002d0c <HAL_GetTick>
 8008ca8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008caa:	e008      	b.n	8008cbe <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008cac:	f7fa f82e 	bl	8002d0c <HAL_GetTick>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d901      	bls.n	8008cbe <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	e007      	b.n	8008cce <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008cbe:	4b09      	ldr	r3, [pc, #36]	; (8008ce4 <RCC_SetFlashLatency+0xf4>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 0307 	and.w	r3, r3, #7
 8008cc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d1ef      	bne.n	8008cac <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	374c      	adds	r7, #76	; 0x4c
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd90      	pop	{r4, r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	080165f0 	.word	0x080165f0
 8008cdc:	08016600 	.word	0x08016600
 8008ce0:	0801660c 	.word	0x0801660c
 8008ce4:	58004000 	.word	0x58004000

08008ce8 <LL_RCC_LSE_IsEnabled>:
{
 8008ce8:	b480      	push	{r7}
 8008cea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8008cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cf4:	f003 0301 	and.w	r3, r3, #1
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d101      	bne.n	8008d00 <LL_RCC_LSE_IsEnabled+0x18>
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e000      	b.n	8008d02 <LL_RCC_LSE_IsEnabled+0x1a>
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <LL_RCC_LSE_IsReady>:
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d18:	f003 0302 	and.w	r3, r3, #2
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	d101      	bne.n	8008d24 <LL_RCC_LSE_IsReady+0x18>
 8008d20:	2301      	movs	r3, #1
 8008d22:	e000      	b.n	8008d26 <LL_RCC_LSE_IsReady+0x1a>
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <LL_RCC_MSI_EnablePLLMode>:
{
 8008d30:	b480      	push	{r7}
 8008d32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8008d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d3e:	f043 0304 	orr.w	r3, r3, #4
 8008d42:	6013      	str	r3, [r2, #0]
}
 8008d44:	bf00      	nop
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr

08008d4e <LL_RCC_SetRFWKPClockSource>:
{
 8008d4e:	b480      	push	{r7}
 8008d50:	b083      	sub	sp, #12
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8008d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8008d6e:	bf00      	nop
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <LL_RCC_SetSMPSClockSource>:
{
 8008d7a:	b480      	push	{r7}
 8008d7c:	b083      	sub	sp, #12
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8008d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d88:	f023 0203 	bic.w	r2, r3, #3
 8008d8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008d96:	bf00      	nop
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <LL_RCC_SetSMPSPrescaler>:
{
 8008da2:	b480      	push	{r7}
 8008da4:	b083      	sub	sp, #12
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8008daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008db4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008dbe:	bf00      	nop
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <LL_RCC_SetUSARTClockSource>:
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b083      	sub	sp, #12
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8008dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dda:	f023 0203 	bic.w	r2, r3, #3
 8008dde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008dea:	bf00      	nop
 8008dec:	370c      	adds	r7, #12
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <LL_RCC_SetLPUARTClockSource>:
{
 8008df6:	b480      	push	{r7}
 8008df8:	b083      	sub	sp, #12
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008e0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008e16:	bf00      	nop
 8008e18:	370c      	adds	r7, #12
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr

08008e22 <LL_RCC_SetI2CClockSource>:
{
 8008e22:	b480      	push	{r7}
 8008e24:	b083      	sub	sp, #12
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	091b      	lsrs	r3, r3, #4
 8008e36:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008e3a:	43db      	mvns	r3, r3
 8008e3c:	401a      	ands	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	011b      	lsls	r3, r3, #4
 8008e42:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008e46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <LL_RCC_SetLPTIMClockSource>:
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e68:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	0c1b      	lsrs	r3, r3, #16
 8008e70:	041b      	lsls	r3, r3, #16
 8008e72:	43db      	mvns	r3, r3
 8008e74:	401a      	ands	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	041b      	lsls	r3, r3, #16
 8008e7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008e84:	bf00      	nop
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <LL_RCC_SetSAIClockSource>:
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8008e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ea0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008ea4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008eb0:	bf00      	nop
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <LL_RCC_SetRNGClockSource>:
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ecc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008ed0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <LL_RCC_SetCLK48ClockSource>:
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8008ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ef8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008efc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <LL_RCC_SetUSBClockSource>:
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f7ff ffe3 	bl	8008ee8 <LL_RCC_SetCLK48ClockSource>
}
 8008f22:	bf00      	nop
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <LL_RCC_SetADCClockSource>:
{
 8008f2a:	b480      	push	{r7}
 8008f2c:	b083      	sub	sp, #12
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8008f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008f3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008f4a:	bf00      	nop
 8008f4c:	370c      	adds	r7, #12
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <LL_RCC_SetRTCClockSource>:
{
 8008f56:	b480      	push	{r7}
 8008f58:	b083      	sub	sp, #12
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008f76:	bf00      	nop
 8008f78:	370c      	adds	r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <LL_RCC_GetRTCClockSource>:
{
 8008f82:	b480      	push	{r7}
 8008f84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <LL_RCC_ForceBackupDomainReset>:
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008fb4:	bf00      	nop
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <LL_RCC_ReleaseBackupDomainReset>:
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008fd6:	bf00      	nop
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <LL_RCC_PLLSAI1_Enable>:
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008ff2:	6013      	str	r3, [r2, #0]
}
 8008ff4:	bf00      	nop
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <LL_RCC_PLLSAI1_Disable>:
{
 8008ffe:	b480      	push	{r7}
 8009000:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800900c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009010:	6013      	str	r3, [r2, #0]
}
 8009012:	bf00      	nop
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <LL_RCC_PLLSAI1_IsReady>:
{
 800901c:	b480      	push	{r7}
 800901e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8009020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800902a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800902e:	d101      	bne.n	8009034 <LL_RCC_PLLSAI1_IsReady+0x18>
 8009030:	2301      	movs	r3, #1
 8009032:	e000      	b.n	8009036 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b088      	sub	sp, #32
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8009048:	2300      	movs	r3, #0
 800904a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800904c:	2300      	movs	r3, #0
 800904e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009058:	2b00      	cmp	r3, #0
 800905a:	d034      	beq.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009060:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009064:	d021      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8009066:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800906a:	d81b      	bhi.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800906c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009070:	d01d      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8009072:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009076:	d815      	bhi.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00b      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800907c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009080:	d110      	bne.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8009082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800908c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009090:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8009092:	e00d      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	3304      	adds	r3, #4
 8009098:	4618      	mov	r0, r3
 800909a:	f000 f94d 	bl	8009338 <RCCEx_PLLSAI1_ConfigNP>
 800909e:	4603      	mov	r3, r0
 80090a0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80090a2:	e005      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	77fb      	strb	r3, [r7, #31]
        break;
 80090a8:	e002      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80090aa:	bf00      	nop
 80090ac:	e000      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80090ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090b0:	7ffb      	ldrb	r3, [r7, #31]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d105      	bne.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7ff fee8 	bl	8008e90 <LL_RCC_SetSAIClockSource>
 80090c0:	e001      	b.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090c2:	7ffb      	ldrb	r3, [r7, #31]
 80090c4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d046      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80090d2:	f7ff ff56 	bl	8008f82 <LL_RCC_GetRTCClockSource>
 80090d6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090dc:	69ba      	ldr	r2, [r7, #24]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d03c      	beq.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80090e2:	f7fe fc8d 	bl	8007a00 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d105      	bne.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7ff ff30 	bl	8008f56 <LL_RCC_SetRTCClockSource>
 80090f6:	e02e      	b.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80090f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009100:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8009102:	f7ff ff4b 	bl	8008f9c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8009106:	f7ff ff5a 	bl	8008fbe <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009114:	4313      	orrs	r3, r2
 8009116:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8009118:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8009122:	f7ff fde1 	bl	8008ce8 <LL_RCC_LSE_IsEnabled>
 8009126:	4603      	mov	r3, r0
 8009128:	2b01      	cmp	r3, #1
 800912a:	d114      	bne.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800912c:	f7f9 fdee 	bl	8002d0c <HAL_GetTick>
 8009130:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8009132:	e00b      	b.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009134:	f7f9 fdea 	bl	8002d0c <HAL_GetTick>
 8009138:	4602      	mov	r2, r0
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	1ad3      	subs	r3, r2, r3
 800913e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009142:	4293      	cmp	r3, r2
 8009144:	d902      	bls.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8009146:	2303      	movs	r3, #3
 8009148:	77fb      	strb	r3, [r7, #31]
              break;
 800914a:	e004      	b.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800914c:	f7ff fdde 	bl	8008d0c <LL_RCC_LSE_IsReady>
 8009150:	4603      	mov	r3, r0
 8009152:	2b01      	cmp	r3, #1
 8009154:	d1ee      	bne.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8009156:	7ffb      	ldrb	r3, [r7, #31]
 8009158:	77bb      	strb	r3, [r7, #30]
 800915a:	e001      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800915c:	7ffb      	ldrb	r3, [r7, #31]
 800915e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0301 	and.w	r3, r3, #1
 8009168:	2b00      	cmp	r3, #0
 800916a:	d004      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	4618      	mov	r0, r3
 8009172:	f7ff fe2a 	bl	8008dca <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 0302 	and.w	r3, r3, #2
 800917e:	2b00      	cmp	r3, #0
 8009180:	d004      	beq.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	69db      	ldr	r3, [r3, #28]
 8009186:	4618      	mov	r0, r3
 8009188:	f7ff fe35 	bl	8008df6 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 0310 	and.w	r3, r3, #16
 8009194:	2b00      	cmp	r3, #0
 8009196:	d004      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919c:	4618      	mov	r0, r3
 800919e:	f7ff fe5d 	bl	8008e5c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 0320 	and.w	r3, r3, #32
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d004      	beq.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7ff fe52 	bl	8008e5c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 0304 	and.w	r3, r3, #4
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d004      	beq.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6a1b      	ldr	r3, [r3, #32]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7ff fe2a 	bl	8008e22 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0308 	and.w	r3, r3, #8
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d004      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091de:	4618      	mov	r0, r3
 80091e0:	f7ff fe1f 	bl	8008e22 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d022      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7ff fe8d 	bl	8008f14 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009202:	d107      	bne.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8009204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800920e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009212:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009218:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800921c:	d10b      	bne.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	3304      	adds	r3, #4
 8009222:	4618      	mov	r0, r3
 8009224:	f000 f8e3 	bl	80093ee <RCCEx_PLLSAI1_ConfigNQ>
 8009228:	4603      	mov	r3, r0
 800922a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800922c:	7ffb      	ldrb	r3, [r7, #31]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d001      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8009232:	7ffb      	ldrb	r3, [r7, #31]
 8009234:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800923e:	2b00      	cmp	r3, #0
 8009240:	d02b      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800924a:	d008      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009250:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009254:	d003      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925a:	2b00      	cmp	r3, #0
 800925c:	d105      	bne.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009262:	4618      	mov	r0, r3
 8009264:	f7ff fe2a 	bl	8008ebc <LL_RCC_SetRNGClockSource>
 8009268:	e00a      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009272:	60fb      	str	r3, [r7, #12]
 8009274:	2000      	movs	r0, #0
 8009276:	f7ff fe21 	bl	8008ebc <LL_RCC_SetRNGClockSource>
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f7ff fe34 	bl	8008ee8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009284:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8009288:	d107      	bne.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800928a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009294:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009298:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d022      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7ff fe3d 	bl	8008f2a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092b8:	d107      	bne.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80092ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092c8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092d2:	d10b      	bne.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	3304      	adds	r3, #4
 80092d8:	4618      	mov	r0, r3
 80092da:	f000 f8e3 	bl	80094a4 <RCCEx_PLLSAI1_ConfigNR>
 80092de:	4603      	mov	r3, r0
 80092e0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80092e2:	7ffb      	ldrb	r3, [r7, #31]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d001      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80092e8:	7ffb      	ldrb	r3, [r7, #31]
 80092ea:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d004      	beq.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7ff fd26 	bl	8008d4e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800930a:	2b00      	cmp	r3, #0
 800930c:	d009      	beq.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009312:	4618      	mov	r0, r3
 8009314:	f7ff fd45 	bl	8008da2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800931c:	4618      	mov	r0, r3
 800931e:	f7ff fd2c 	bl	8008d7a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8009322:	7fbb      	ldrb	r3, [r7, #30]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3720      	adds	r7, #32
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8009330:	f7ff fcfe 	bl	8008d30 <LL_RCC_MSI_EnablePLLMode>
}
 8009334:	bf00      	nop
 8009336:	bd80      	pop	{r7, pc}

08009338 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009340:	2300      	movs	r3, #0
 8009342:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009344:	f7ff fe5b 	bl	8008ffe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009348:	f7f9 fce0 	bl	8002d0c <HAL_GetTick>
 800934c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800934e:	e009      	b.n	8009364 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009350:	f7f9 fcdc 	bl	8002d0c <HAL_GetTick>
 8009354:	4602      	mov	r2, r0
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	2b02      	cmp	r3, #2
 800935c:	d902      	bls.n	8009364 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800935e:	2303      	movs	r3, #3
 8009360:	73fb      	strb	r3, [r7, #15]
      break;
 8009362:	e004      	b.n	800936e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009364:	f7ff fe5a 	bl	800901c <LL_RCC_PLLSAI1_IsReady>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1f0      	bne.n	8009350 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800936e:	7bfb      	ldrb	r3, [r7, #15]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d137      	bne.n	80093e4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	021b      	lsls	r3, r3, #8
 8009384:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009388:	4313      	orrs	r3, r2
 800938a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800938c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800939e:	4313      	orrs	r3, r2
 80093a0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80093a2:	f7ff fe1d 	bl	8008fe0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093a6:	f7f9 fcb1 	bl	8002d0c <HAL_GetTick>
 80093aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80093ac:	e009      	b.n	80093c2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80093ae:	f7f9 fcad 	bl	8002d0c <HAL_GetTick>
 80093b2:	4602      	mov	r2, r0
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	1ad3      	subs	r3, r2, r3
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	d902      	bls.n	80093c2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80093bc:	2303      	movs	r3, #3
 80093be:	73fb      	strb	r3, [r7, #15]
        break;
 80093c0:	e004      	b.n	80093cc <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80093c2:	f7ff fe2b 	bl	800901c <LL_RCC_PLLSAI1_IsReady>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d1f0      	bne.n	80093ae <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80093cc:	7bfb      	ldrb	r3, [r7, #15]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d108      	bne.n	80093e4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80093d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093d6:	691a      	ldr	r2, [r3, #16]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80093e0:	4313      	orrs	r3, r2
 80093e2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80093e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b084      	sub	sp, #16
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093f6:	2300      	movs	r3, #0
 80093f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80093fa:	f7ff fe00 	bl	8008ffe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80093fe:	f7f9 fc85 	bl	8002d0c <HAL_GetTick>
 8009402:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009404:	e009      	b.n	800941a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009406:	f7f9 fc81 	bl	8002d0c <HAL_GetTick>
 800940a:	4602      	mov	r2, r0
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	2b02      	cmp	r3, #2
 8009412:	d902      	bls.n	800941a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8009414:	2303      	movs	r3, #3
 8009416:	73fb      	strb	r3, [r7, #15]
      break;
 8009418:	e004      	b.n	8009424 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800941a:	f7ff fdff 	bl	800901c <LL_RCC_PLLSAI1_IsReady>
 800941e:	4603      	mov	r3, r0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1f0      	bne.n	8009406 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8009424:	7bfb      	ldrb	r3, [r7, #15]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d137      	bne.n	800949a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800942a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	021b      	lsls	r3, r3, #8
 800943a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800943e:	4313      	orrs	r3, r2
 8009440:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8009442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009446:	691b      	ldr	r3, [r3, #16]
 8009448:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009454:	4313      	orrs	r3, r2
 8009456:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009458:	f7ff fdc2 	bl	8008fe0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800945c:	f7f9 fc56 	bl	8002d0c <HAL_GetTick>
 8009460:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009462:	e009      	b.n	8009478 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009464:	f7f9 fc52 	bl	8002d0c <HAL_GetTick>
 8009468:	4602      	mov	r2, r0
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	2b02      	cmp	r3, #2
 8009470:	d902      	bls.n	8009478 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8009472:	2303      	movs	r3, #3
 8009474:	73fb      	strb	r3, [r7, #15]
        break;
 8009476:	e004      	b.n	8009482 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009478:	f7ff fdd0 	bl	800901c <LL_RCC_PLLSAI1_IsReady>
 800947c:	4603      	mov	r3, r0
 800947e:	2b01      	cmp	r3, #1
 8009480:	d1f0      	bne.n	8009464 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8009482:	7bfb      	ldrb	r3, [r7, #15]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d108      	bne.n	800949a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800948c:	691a      	ldr	r2, [r3, #16]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009496:	4313      	orrs	r3, r2
 8009498:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800949a:	7bfb      	ldrb	r3, [r7, #15]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094ac:	2300      	movs	r3, #0
 80094ae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80094b0:	f7ff fda5 	bl	8008ffe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80094b4:	f7f9 fc2a 	bl	8002d0c <HAL_GetTick>
 80094b8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80094ba:	e009      	b.n	80094d0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80094bc:	f7f9 fc26 	bl	8002d0c <HAL_GetTick>
 80094c0:	4602      	mov	r2, r0
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	1ad3      	subs	r3, r2, r3
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d902      	bls.n	80094d0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80094ca:	2303      	movs	r3, #3
 80094cc:	73fb      	strb	r3, [r7, #15]
      break;
 80094ce:	e004      	b.n	80094da <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80094d0:	f7ff fda4 	bl	800901c <LL_RCC_PLLSAI1_IsReady>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1f0      	bne.n	80094bc <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80094da:	7bfb      	ldrb	r3, [r7, #15]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d137      	bne.n	8009550 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80094e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	021b      	lsls	r3, r3, #8
 80094f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094f4:	4313      	orrs	r3, r2
 80094f6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80094f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800950a:	4313      	orrs	r3, r2
 800950c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800950e:	f7ff fd67 	bl	8008fe0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009512:	f7f9 fbfb 	bl	8002d0c <HAL_GetTick>
 8009516:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009518:	e009      	b.n	800952e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800951a:	f7f9 fbf7 	bl	8002d0c <HAL_GetTick>
 800951e:	4602      	mov	r2, r0
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	2b02      	cmp	r3, #2
 8009526:	d902      	bls.n	800952e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8009528:	2303      	movs	r3, #3
 800952a:	73fb      	strb	r3, [r7, #15]
        break;
 800952c:	e004      	b.n	8009538 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800952e:	f7ff fd75 	bl	800901c <LL_RCC_PLLSAI1_IsReady>
 8009532:	4603      	mov	r3, r0
 8009534:	2b01      	cmp	r3, #1
 8009536:	d1f0      	bne.n	800951a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8009538:	7bfb      	ldrb	r3, [r7, #15]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d108      	bne.n	8009550 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800953e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009542:	691a      	ldr	r2, [r3, #16]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800954c:	4313      	orrs	r3, r2
 800954e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009550:	7bfb      	ldrb	r3, [r7, #15]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
	...

0800955c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d101      	bne.n	800956e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e09f      	b.n	80096ae <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009574:	b2db      	uxtb	r3, r3
 8009576:	2b00      	cmp	r3, #0
 8009578:	d106      	bne.n	8009588 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f7f9 f92a 	bl	80027dc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2202      	movs	r2, #2
 800958c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009590:	4b49      	ldr	r3, [pc, #292]	; (80096b8 <HAL_RTC_Init+0x15c>)
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	f003 0310 	and.w	r3, r3, #16
 8009598:	2b10      	cmp	r3, #16
 800959a:	d07e      	beq.n	800969a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	22ca      	movs	r2, #202	; 0xca
 80095a2:	625a      	str	r2, [r3, #36]	; 0x24
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2253      	movs	r2, #83	; 0x53
 80095aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 f8ab 	bl	8009708 <RTC_EnterInitMode>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00a      	beq.n	80095ce <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	22ff      	movs	r2, #255	; 0xff
 80095be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2204      	movs	r2, #4
 80095c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	73fb      	strb	r3, [r7, #15]
 80095cc:	e067      	b.n	800969e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	6812      	ldr	r2, [r2, #0]
 80095d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80095dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095e0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6899      	ldr	r1, [r3, #8]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	431a      	orrs	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	699b      	ldr	r3, [r3, #24]
 80095f6:	431a      	orrs	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	430a      	orrs	r2, r1
 80095fe:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	68d2      	ldr	r2, [r2, #12]
 8009608:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	6919      	ldr	r1, [r3, #16]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	041a      	lsls	r2, r3, #16
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	430a      	orrs	r2, r1
 800961c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	68da      	ldr	r2, [r3, #12]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800962c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f022 0203 	bic.w	r2, r2, #3
 800963c:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	69da      	ldr	r2, [r3, #28]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	695b      	ldr	r3, [r3, #20]
 800964c:	431a      	orrs	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	430a      	orrs	r2, r1
 8009654:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	f003 0320 	and.w	r3, r3, #32
 8009660:	2b00      	cmp	r3, #0
 8009662:	d113      	bne.n	800968c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 f829 	bl	80096bc <HAL_RTC_WaitForSynchro>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00d      	beq.n	800968c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	22ff      	movs	r2, #255	; 0xff
 8009676:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2204      	movs	r2, #4
 800967c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	e010      	b.n	80096ae <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	22ff      	movs	r2, #255	; 0xff
 8009692:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8009694:	2300      	movs	r3, #0
 8009696:	73fb      	strb	r3, [r7, #15]
 8009698:	e001      	b.n	800969e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800969e:	7bfb      	ldrb	r3, [r7, #15]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d103      	bne.n	80096ac <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80096ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	40002800 	.word	0x40002800

080096bc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68da      	ldr	r2, [r3, #12]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80096d2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80096d4:	f7f9 fb1a 	bl	8002d0c <HAL_GetTick>
 80096d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80096da:	e009      	b.n	80096f0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80096dc:	f7f9 fb16 	bl	8002d0c <HAL_GetTick>
 80096e0:	4602      	mov	r2, r0
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096ea:	d901      	bls.n	80096f0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80096ec:	2303      	movs	r3, #3
 80096ee:	e007      	b.n	8009700 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	f003 0320 	and.w	r3, r3, #32
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d0ee      	beq.n	80096dc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800971a:	2b00      	cmp	r3, #0
 800971c:	d119      	bne.n	8009752 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f04f 32ff 	mov.w	r2, #4294967295
 8009726:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009728:	f7f9 faf0 	bl	8002d0c <HAL_GetTick>
 800972c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800972e:	e009      	b.n	8009744 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009730:	f7f9 faec 	bl	8002d0c <HAL_GetTick>
 8009734:	4602      	mov	r2, r0
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800973e:	d901      	bls.n	8009744 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8009740:	2303      	movs	r3, #3
 8009742:	e007      	b.n	8009754 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800974e:	2b00      	cmp	r3, #0
 8009750:	d0ee      	beq.n	8009730 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b086      	sub	sp, #24
 8009760:	af00      	add	r7, sp, #0
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800976e:	2b01      	cmp	r3, #1
 8009770:	d101      	bne.n	8009776 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8009772:	2302      	movs	r3, #2
 8009774:	e089      	b.n	800988a <HAL_RTCEx_SetWakeUpTimer+0x12e>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2201      	movs	r2, #1
 800977a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2202      	movs	r2, #2
 8009782:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	22ca      	movs	r2, #202	; 0xca
 800978c:	625a      	str	r2, [r3, #36]	; 0x24
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2253      	movs	r2, #83	; 0x53
 8009794:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d020      	beq.n	80097e6 <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 80097a4:	f7f9 fab2 	bl	8002d0c <HAL_GetTick>
 80097a8:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80097aa:	e015      	b.n	80097d8 <HAL_RTCEx_SetWakeUpTimer+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80097ac:	f7f9 faae 	bl	8002d0c <HAL_GetTick>
 80097b0:	4602      	mov	r2, r0
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	1ad3      	subs	r3, r2, r3
 80097b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097ba:	d90d      	bls.n	80097d8 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	22ff      	movs	r2, #255	; 0xff
 80097c2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2203      	movs	r2, #3
 80097c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80097d4:	2303      	movs	r3, #3
 80097d6:	e058      	b.n	800988a <HAL_RTCEx_SetWakeUpTimer+0x12e>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	f003 0304 	and.w	r3, r3, #4
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1e2      	bne.n	80097ac <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	689a      	ldr	r2, [r3, #8]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097f4:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80097f6:	f7f9 fa89 	bl	8002d0c <HAL_GetTick>
 80097fa:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80097fc:	e015      	b.n	800982a <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80097fe:	f7f9 fa85 	bl	8002d0c <HAL_GetTick>
 8009802:	4602      	mov	r2, r0
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800980c:	d90d      	bls.n	800982a <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	22ff      	movs	r2, #255	; 0xff
 8009814:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2203      	movs	r2, #3
 800981a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8009826:	2303      	movs	r3, #3
 8009828:	e02f      	b.n	800988a <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	f003 0304 	and.w	r3, r3, #4
 8009834:	2b00      	cmp	r3, #0
 8009836:	d0e2      	beq.n	80097fe <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	689a      	ldr	r2, [r3, #8]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f022 0207 	bic.w	r2, r2, #7
 8009846:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6899      	ldr	r1, [r3, #8]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	430a      	orrs	r2, r1
 8009856:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	689a      	ldr	r2, [r3, #8]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800986e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	22ff      	movs	r2, #255	; 0xff
 8009876:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3718      	adds	r7, #24
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b082      	sub	sp, #8
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d101      	bne.n	80098a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	e049      	b.n	8009938 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d106      	bne.n	80098be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f7f8 ffbb 	bl	8002834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2202      	movs	r2, #2
 80098c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	3304      	adds	r3, #4
 80098ce:	4619      	mov	r1, r3
 80098d0:	4610      	mov	r0, r2
 80098d2:	f000 fbd7 	bl	800a084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2201      	movs	r2, #1
 80098da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2201      	movs	r2, #1
 8009902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2201      	movs	r2, #1
 800990a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2201      	movs	r2, #1
 800992a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2201      	movs	r2, #1
 8009932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d101      	bne.n	8009952 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	e049      	b.n	80099e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009958:	b2db      	uxtb	r3, r3
 800995a:	2b00      	cmp	r3, #0
 800995c:	d106      	bne.n	800996c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 f841 	bl	80099ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2202      	movs	r2, #2
 8009970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	3304      	adds	r3, #4
 800997c:	4619      	mov	r1, r3
 800997e:	4610      	mov	r0, r2
 8009980:	f000 fb80 	bl	800a084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80099ee:	b480      	push	{r7}
 80099f0:	b083      	sub	sp, #12
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80099f6:	bf00      	nop
 80099f8:	370c      	adds	r7, #12
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
	...

08009a04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d109      	bne.n	8009a28 <HAL_TIM_PWM_Start+0x24>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	bf14      	ite	ne
 8009a20:	2301      	movne	r3, #1
 8009a22:	2300      	moveq	r3, #0
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	e03c      	b.n	8009aa2 <HAL_TIM_PWM_Start+0x9e>
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	2b04      	cmp	r3, #4
 8009a2c:	d109      	bne.n	8009a42 <HAL_TIM_PWM_Start+0x3e>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	bf14      	ite	ne
 8009a3a:	2301      	movne	r3, #1
 8009a3c:	2300      	moveq	r3, #0
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	e02f      	b.n	8009aa2 <HAL_TIM_PWM_Start+0x9e>
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	2b08      	cmp	r3, #8
 8009a46:	d109      	bne.n	8009a5c <HAL_TIM_PWM_Start+0x58>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	bf14      	ite	ne
 8009a54:	2301      	movne	r3, #1
 8009a56:	2300      	moveq	r3, #0
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	e022      	b.n	8009aa2 <HAL_TIM_PWM_Start+0x9e>
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	2b0c      	cmp	r3, #12
 8009a60:	d109      	bne.n	8009a76 <HAL_TIM_PWM_Start+0x72>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	bf14      	ite	ne
 8009a6e:	2301      	movne	r3, #1
 8009a70:	2300      	moveq	r3, #0
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	e015      	b.n	8009aa2 <HAL_TIM_PWM_Start+0x9e>
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	2b10      	cmp	r3, #16
 8009a7a:	d109      	bne.n	8009a90 <HAL_TIM_PWM_Start+0x8c>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	bf14      	ite	ne
 8009a88:	2301      	movne	r3, #1
 8009a8a:	2300      	moveq	r3, #0
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	e008      	b.n	8009aa2 <HAL_TIM_PWM_Start+0x9e>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	bf14      	ite	ne
 8009a9c:	2301      	movne	r3, #1
 8009a9e:	2300      	moveq	r3, #0
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d001      	beq.n	8009aaa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e079      	b.n	8009b9e <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d104      	bne.n	8009aba <HAL_TIM_PWM_Start+0xb6>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2202      	movs	r2, #2
 8009ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ab8:	e023      	b.n	8009b02 <HAL_TIM_PWM_Start+0xfe>
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	2b04      	cmp	r3, #4
 8009abe:	d104      	bne.n	8009aca <HAL_TIM_PWM_Start+0xc6>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ac8:	e01b      	b.n	8009b02 <HAL_TIM_PWM_Start+0xfe>
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	2b08      	cmp	r3, #8
 8009ace:	d104      	bne.n	8009ada <HAL_TIM_PWM_Start+0xd6>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2202      	movs	r2, #2
 8009ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ad8:	e013      	b.n	8009b02 <HAL_TIM_PWM_Start+0xfe>
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	2b0c      	cmp	r3, #12
 8009ade:	d104      	bne.n	8009aea <HAL_TIM_PWM_Start+0xe6>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ae8:	e00b      	b.n	8009b02 <HAL_TIM_PWM_Start+0xfe>
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	2b10      	cmp	r3, #16
 8009aee:	d104      	bne.n	8009afa <HAL_TIM_PWM_Start+0xf6>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2202      	movs	r2, #2
 8009af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009af8:	e003      	b.n	8009b02 <HAL_TIM_PWM_Start+0xfe>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2202      	movs	r2, #2
 8009afe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2201      	movs	r2, #1
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f000 fe38 	bl	800a780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a24      	ldr	r2, [pc, #144]	; (8009ba8 <HAL_TIM_PWM_Start+0x1a4>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d009      	beq.n	8009b2e <HAL_TIM_PWM_Start+0x12a>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a23      	ldr	r2, [pc, #140]	; (8009bac <HAL_TIM_PWM_Start+0x1a8>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d004      	beq.n	8009b2e <HAL_TIM_PWM_Start+0x12a>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a21      	ldr	r2, [pc, #132]	; (8009bb0 <HAL_TIM_PWM_Start+0x1ac>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d101      	bne.n	8009b32 <HAL_TIM_PWM_Start+0x12e>
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e000      	b.n	8009b34 <HAL_TIM_PWM_Start+0x130>
 8009b32:	2300      	movs	r3, #0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d007      	beq.n	8009b48 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b46:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a16      	ldr	r2, [pc, #88]	; (8009ba8 <HAL_TIM_PWM_Start+0x1a4>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d004      	beq.n	8009b5c <HAL_TIM_PWM_Start+0x158>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b5a:	d115      	bne.n	8009b88 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	689a      	ldr	r2, [r3, #8]
 8009b62:	4b14      	ldr	r3, [pc, #80]	; (8009bb4 <HAL_TIM_PWM_Start+0x1b0>)
 8009b64:	4013      	ands	r3, r2
 8009b66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2b06      	cmp	r3, #6
 8009b6c:	d015      	beq.n	8009b9a <HAL_TIM_PWM_Start+0x196>
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b74:	d011      	beq.n	8009b9a <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f042 0201 	orr.w	r2, r2, #1
 8009b84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b86:	e008      	b.n	8009b9a <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f042 0201 	orr.w	r2, r2, #1
 8009b96:	601a      	str	r2, [r3, #0]
 8009b98:	e000      	b.n	8009b9c <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	40012c00 	.word	0x40012c00
 8009bac:	40014400 	.word	0x40014400
 8009bb0:	40014800 	.word	0x40014800
 8009bb4:	00010007 	.word	0x00010007

08009bb8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	6839      	ldr	r1, [r7, #0]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 fdd8 	bl	800a780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a39      	ldr	r2, [pc, #228]	; (8009cbc <HAL_TIM_PWM_Stop+0x104>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d009      	beq.n	8009bee <HAL_TIM_PWM_Stop+0x36>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a38      	ldr	r2, [pc, #224]	; (8009cc0 <HAL_TIM_PWM_Stop+0x108>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d004      	beq.n	8009bee <HAL_TIM_PWM_Stop+0x36>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a36      	ldr	r2, [pc, #216]	; (8009cc4 <HAL_TIM_PWM_Stop+0x10c>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d101      	bne.n	8009bf2 <HAL_TIM_PWM_Stop+0x3a>
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e000      	b.n	8009bf4 <HAL_TIM_PWM_Stop+0x3c>
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d017      	beq.n	8009c28 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	6a1a      	ldr	r2, [r3, #32]
 8009bfe:	f241 1311 	movw	r3, #4369	; 0x1111
 8009c02:	4013      	ands	r3, r2
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d10f      	bne.n	8009c28 <HAL_TIM_PWM_Stop+0x70>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	6a1a      	ldr	r2, [r3, #32]
 8009c0e:	f240 4344 	movw	r3, #1092	; 0x444
 8009c12:	4013      	ands	r3, r2
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d107      	bne.n	8009c28 <HAL_TIM_PWM_Stop+0x70>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009c26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	6a1a      	ldr	r2, [r3, #32]
 8009c2e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009c32:	4013      	ands	r3, r2
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d10f      	bne.n	8009c58 <HAL_TIM_PWM_Stop+0xa0>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6a1a      	ldr	r2, [r3, #32]
 8009c3e:	f240 4344 	movw	r3, #1092	; 0x444
 8009c42:	4013      	ands	r3, r2
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d107      	bne.n	8009c58 <HAL_TIM_PWM_Stop+0xa0>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f022 0201 	bic.w	r2, r2, #1
 8009c56:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d104      	bne.n	8009c68 <HAL_TIM_PWM_Stop+0xb0>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2201      	movs	r2, #1
 8009c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c66:	e023      	b.n	8009cb0 <HAL_TIM_PWM_Stop+0xf8>
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	2b04      	cmp	r3, #4
 8009c6c:	d104      	bne.n	8009c78 <HAL_TIM_PWM_Stop+0xc0>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2201      	movs	r2, #1
 8009c72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c76:	e01b      	b.n	8009cb0 <HAL_TIM_PWM_Stop+0xf8>
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	2b08      	cmp	r3, #8
 8009c7c:	d104      	bne.n	8009c88 <HAL_TIM_PWM_Stop+0xd0>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2201      	movs	r2, #1
 8009c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c86:	e013      	b.n	8009cb0 <HAL_TIM_PWM_Stop+0xf8>
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	2b0c      	cmp	r3, #12
 8009c8c:	d104      	bne.n	8009c98 <HAL_TIM_PWM_Stop+0xe0>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2201      	movs	r2, #1
 8009c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c96:	e00b      	b.n	8009cb0 <HAL_TIM_PWM_Stop+0xf8>
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	2b10      	cmp	r3, #16
 8009c9c:	d104      	bne.n	8009ca8 <HAL_TIM_PWM_Stop+0xf0>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ca6:	e003      	b.n	8009cb0 <HAL_TIM_PWM_Stop+0xf8>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3708      	adds	r7, #8
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	40012c00 	.word	0x40012c00
 8009cc0:	40014400 	.word	0x40014400
 8009cc4:	40014800 	.word	0x40014800

08009cc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b086      	sub	sp, #24
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d101      	bne.n	8009ce6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009ce2:	2302      	movs	r3, #2
 8009ce4:	e0ff      	b.n	8009ee6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2b14      	cmp	r3, #20
 8009cf2:	f200 80f0 	bhi.w	8009ed6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009cf6:	a201      	add	r2, pc, #4	; (adr r2, 8009cfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cfc:	08009d51 	.word	0x08009d51
 8009d00:	08009ed7 	.word	0x08009ed7
 8009d04:	08009ed7 	.word	0x08009ed7
 8009d08:	08009ed7 	.word	0x08009ed7
 8009d0c:	08009d91 	.word	0x08009d91
 8009d10:	08009ed7 	.word	0x08009ed7
 8009d14:	08009ed7 	.word	0x08009ed7
 8009d18:	08009ed7 	.word	0x08009ed7
 8009d1c:	08009dd3 	.word	0x08009dd3
 8009d20:	08009ed7 	.word	0x08009ed7
 8009d24:	08009ed7 	.word	0x08009ed7
 8009d28:	08009ed7 	.word	0x08009ed7
 8009d2c:	08009e13 	.word	0x08009e13
 8009d30:	08009ed7 	.word	0x08009ed7
 8009d34:	08009ed7 	.word	0x08009ed7
 8009d38:	08009ed7 	.word	0x08009ed7
 8009d3c:	08009e55 	.word	0x08009e55
 8009d40:	08009ed7 	.word	0x08009ed7
 8009d44:	08009ed7 	.word	0x08009ed7
 8009d48:	08009ed7 	.word	0x08009ed7
 8009d4c:	08009e95 	.word	0x08009e95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68b9      	ldr	r1, [r7, #8]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 f9f8 	bl	800a14c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	699a      	ldr	r2, [r3, #24]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f042 0208 	orr.w	r2, r2, #8
 8009d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	699a      	ldr	r2, [r3, #24]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f022 0204 	bic.w	r2, r2, #4
 8009d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	6999      	ldr	r1, [r3, #24]
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	691a      	ldr	r2, [r3, #16]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	430a      	orrs	r2, r1
 8009d8c:	619a      	str	r2, [r3, #24]
      break;
 8009d8e:	e0a5      	b.n	8009edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	68b9      	ldr	r1, [r7, #8]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f000 fa54 	bl	800a244 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	699a      	ldr	r2, [r3, #24]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	699a      	ldr	r2, [r3, #24]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	6999      	ldr	r1, [r3, #24]
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	021a      	lsls	r2, r3, #8
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	430a      	orrs	r2, r1
 8009dce:	619a      	str	r2, [r3, #24]
      break;
 8009dd0:	e084      	b.n	8009edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68b9      	ldr	r1, [r7, #8]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 faad 	bl	800a338 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	69da      	ldr	r2, [r3, #28]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f042 0208 	orr.w	r2, r2, #8
 8009dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	69da      	ldr	r2, [r3, #28]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f022 0204 	bic.w	r2, r2, #4
 8009dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	69d9      	ldr	r1, [r3, #28]
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	691a      	ldr	r2, [r3, #16]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	430a      	orrs	r2, r1
 8009e0e:	61da      	str	r2, [r3, #28]
      break;
 8009e10:	e064      	b.n	8009edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68b9      	ldr	r1, [r7, #8]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f000 fb05 	bl	800a428 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	69da      	ldr	r2, [r3, #28]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	69da      	ldr	r2, [r3, #28]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	69d9      	ldr	r1, [r3, #28]
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	021a      	lsls	r2, r3, #8
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	430a      	orrs	r2, r1
 8009e50:	61da      	str	r2, [r3, #28]
      break;
 8009e52:	e043      	b.n	8009edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68b9      	ldr	r1, [r7, #8]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f000 fb42 	bl	800a4e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f042 0208 	orr.w	r2, r2, #8
 8009e6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f022 0204 	bic.w	r2, r2, #4
 8009e7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	691a      	ldr	r2, [r3, #16]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	430a      	orrs	r2, r1
 8009e90:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009e92:	e023      	b.n	8009edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	68b9      	ldr	r1, [r7, #8]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 fb7a 	bl	800a594 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009eae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ebe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	021a      	lsls	r2, r3, #8
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	430a      	orrs	r2, r1
 8009ed2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009ed4:	e002      	b.n	8009edc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8009eda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3718      	adds	r7, #24
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop

08009ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d101      	bne.n	8009f0c <HAL_TIM_ConfigClockSource+0x1c>
 8009f08:	2302      	movs	r3, #2
 8009f0a:	e0b6      	b.n	800a07a <HAL_TIM_ConfigClockSource+0x18a>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2202      	movs	r2, #2
 8009f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009f2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68ba      	ldr	r2, [r7, #8]
 8009f3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f48:	d03e      	beq.n	8009fc8 <HAL_TIM_ConfigClockSource+0xd8>
 8009f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f4e:	f200 8087 	bhi.w	800a060 <HAL_TIM_ConfigClockSource+0x170>
 8009f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f56:	f000 8086 	beq.w	800a066 <HAL_TIM_ConfigClockSource+0x176>
 8009f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f5e:	d87f      	bhi.n	800a060 <HAL_TIM_ConfigClockSource+0x170>
 8009f60:	2b70      	cmp	r3, #112	; 0x70
 8009f62:	d01a      	beq.n	8009f9a <HAL_TIM_ConfigClockSource+0xaa>
 8009f64:	2b70      	cmp	r3, #112	; 0x70
 8009f66:	d87b      	bhi.n	800a060 <HAL_TIM_ConfigClockSource+0x170>
 8009f68:	2b60      	cmp	r3, #96	; 0x60
 8009f6a:	d050      	beq.n	800a00e <HAL_TIM_ConfigClockSource+0x11e>
 8009f6c:	2b60      	cmp	r3, #96	; 0x60
 8009f6e:	d877      	bhi.n	800a060 <HAL_TIM_ConfigClockSource+0x170>
 8009f70:	2b50      	cmp	r3, #80	; 0x50
 8009f72:	d03c      	beq.n	8009fee <HAL_TIM_ConfigClockSource+0xfe>
 8009f74:	2b50      	cmp	r3, #80	; 0x50
 8009f76:	d873      	bhi.n	800a060 <HAL_TIM_ConfigClockSource+0x170>
 8009f78:	2b40      	cmp	r3, #64	; 0x40
 8009f7a:	d058      	beq.n	800a02e <HAL_TIM_ConfigClockSource+0x13e>
 8009f7c:	2b40      	cmp	r3, #64	; 0x40
 8009f7e:	d86f      	bhi.n	800a060 <HAL_TIM_ConfigClockSource+0x170>
 8009f80:	2b30      	cmp	r3, #48	; 0x30
 8009f82:	d064      	beq.n	800a04e <HAL_TIM_ConfigClockSource+0x15e>
 8009f84:	2b30      	cmp	r3, #48	; 0x30
 8009f86:	d86b      	bhi.n	800a060 <HAL_TIM_ConfigClockSource+0x170>
 8009f88:	2b20      	cmp	r3, #32
 8009f8a:	d060      	beq.n	800a04e <HAL_TIM_ConfigClockSource+0x15e>
 8009f8c:	2b20      	cmp	r3, #32
 8009f8e:	d867      	bhi.n	800a060 <HAL_TIM_ConfigClockSource+0x170>
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d05c      	beq.n	800a04e <HAL_TIM_ConfigClockSource+0x15e>
 8009f94:	2b10      	cmp	r3, #16
 8009f96:	d05a      	beq.n	800a04e <HAL_TIM_ConfigClockSource+0x15e>
 8009f98:	e062      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6818      	ldr	r0, [r3, #0]
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	6899      	ldr	r1, [r3, #8]
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	685a      	ldr	r2, [r3, #4]
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	f000 fbc9 	bl	800a740 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009fbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	609a      	str	r2, [r3, #8]
      break;
 8009fc6:	e04f      	b.n	800a068 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6818      	ldr	r0, [r3, #0]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	6899      	ldr	r1, [r3, #8]
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	685a      	ldr	r2, [r3, #4]
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	f000 fbb2 	bl	800a740 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	689a      	ldr	r2, [r3, #8]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009fea:	609a      	str	r2, [r3, #8]
      break;
 8009fec:	e03c      	b.n	800a068 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6818      	ldr	r0, [r3, #0]
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	6859      	ldr	r1, [r3, #4]
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	f000 fb24 	bl	800a648 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2150      	movs	r1, #80	; 0x50
 800a006:	4618      	mov	r0, r3
 800a008:	f000 fb7d 	bl	800a706 <TIM_ITRx_SetConfig>
      break;
 800a00c:	e02c      	b.n	800a068 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6818      	ldr	r0, [r3, #0]
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	6859      	ldr	r1, [r3, #4]
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	461a      	mov	r2, r3
 800a01c:	f000 fb43 	bl	800a6a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2160      	movs	r1, #96	; 0x60
 800a026:	4618      	mov	r0, r3
 800a028:	f000 fb6d 	bl	800a706 <TIM_ITRx_SetConfig>
      break;
 800a02c:	e01c      	b.n	800a068 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6818      	ldr	r0, [r3, #0]
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	6859      	ldr	r1, [r3, #4]
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	68db      	ldr	r3, [r3, #12]
 800a03a:	461a      	mov	r2, r3
 800a03c:	f000 fb04 	bl	800a648 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2140      	movs	r1, #64	; 0x40
 800a046:	4618      	mov	r0, r3
 800a048:	f000 fb5d 	bl	800a706 <TIM_ITRx_SetConfig>
      break;
 800a04c:	e00c      	b.n	800a068 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4619      	mov	r1, r3
 800a058:	4610      	mov	r0, r2
 800a05a:	f000 fb54 	bl	800a706 <TIM_ITRx_SetConfig>
      break;
 800a05e:	e003      	b.n	800a068 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	73fb      	strb	r3, [r7, #15]
      break;
 800a064:	e000      	b.n	800a068 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a066:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2201      	movs	r2, #1
 800a06c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a078:	7bfb      	ldrb	r3, [r7, #15]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
	...

0800a084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a084:	b480      	push	{r7}
 800a086:	b085      	sub	sp, #20
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4a2a      	ldr	r2, [pc, #168]	; (800a140 <TIM_Base_SetConfig+0xbc>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d003      	beq.n	800a0a4 <TIM_Base_SetConfig+0x20>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0a2:	d108      	bne.n	800a0b6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4a21      	ldr	r2, [pc, #132]	; (800a140 <TIM_Base_SetConfig+0xbc>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d00b      	beq.n	800a0d6 <TIM_Base_SetConfig+0x52>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0c4:	d007      	beq.n	800a0d6 <TIM_Base_SetConfig+0x52>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	4a1e      	ldr	r2, [pc, #120]	; (800a144 <TIM_Base_SetConfig+0xc0>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d003      	beq.n	800a0d6 <TIM_Base_SetConfig+0x52>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4a1d      	ldr	r2, [pc, #116]	; (800a148 <TIM_Base_SetConfig+0xc4>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d108      	bne.n	800a0e8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	695b      	ldr	r3, [r3, #20]
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	689a      	ldr	r2, [r3, #8]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a0c      	ldr	r2, [pc, #48]	; (800a140 <TIM_Base_SetConfig+0xbc>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d007      	beq.n	800a124 <TIM_Base_SetConfig+0xa0>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a0b      	ldr	r2, [pc, #44]	; (800a144 <TIM_Base_SetConfig+0xc0>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d003      	beq.n	800a124 <TIM_Base_SetConfig+0xa0>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4a0a      	ldr	r2, [pc, #40]	; (800a148 <TIM_Base_SetConfig+0xc4>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d103      	bne.n	800a12c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	691a      	ldr	r2, [r3, #16]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	615a      	str	r2, [r3, #20]
}
 800a132:	bf00      	nop
 800a134:	3714      	adds	r7, #20
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr
 800a13e:	bf00      	nop
 800a140:	40012c00 	.word	0x40012c00
 800a144:	40014400 	.word	0x40014400
 800a148:	40014800 	.word	0x40014800

0800a14c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b087      	sub	sp, #28
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a1b      	ldr	r3, [r3, #32]
 800a15a:	f023 0201 	bic.w	r2, r3, #1
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a1b      	ldr	r3, [r3, #32]
 800a166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a17a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a17e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f023 0303 	bic.w	r3, r3, #3
 800a186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	4313      	orrs	r3, r2
 800a190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	f023 0302 	bic.w	r3, r3, #2
 800a198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	697a      	ldr	r2, [r7, #20]
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4a24      	ldr	r2, [pc, #144]	; (800a238 <TIM_OC1_SetConfig+0xec>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d007      	beq.n	800a1bc <TIM_OC1_SetConfig+0x70>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4a23      	ldr	r2, [pc, #140]	; (800a23c <TIM_OC1_SetConfig+0xf0>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d003      	beq.n	800a1bc <TIM_OC1_SetConfig+0x70>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a22      	ldr	r2, [pc, #136]	; (800a240 <TIM_OC1_SetConfig+0xf4>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d10c      	bne.n	800a1d6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	f023 0308 	bic.w	r3, r3, #8
 800a1c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	f023 0304 	bic.w	r3, r3, #4
 800a1d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a17      	ldr	r2, [pc, #92]	; (800a238 <TIM_OC1_SetConfig+0xec>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d007      	beq.n	800a1ee <TIM_OC1_SetConfig+0xa2>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4a17      	ldr	r2, [pc, #92]	; (800a240 <TIM_OC1_SetConfig+0xf4>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d003      	beq.n	800a1ee <TIM_OC1_SetConfig+0xa2>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a14      	ldr	r2, [pc, #80]	; (800a23c <TIM_OC1_SetConfig+0xf0>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d111      	bne.n	800a212 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	695b      	ldr	r3, [r3, #20]
 800a202:	693a      	ldr	r2, [r7, #16]
 800a204:	4313      	orrs	r3, r2
 800a206:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	699b      	ldr	r3, [r3, #24]
 800a20c:	693a      	ldr	r2, [r7, #16]
 800a20e:	4313      	orrs	r3, r2
 800a210:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	693a      	ldr	r2, [r7, #16]
 800a216:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	68fa      	ldr	r2, [r7, #12]
 800a21c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	685a      	ldr	r2, [r3, #4]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	697a      	ldr	r2, [r7, #20]
 800a22a:	621a      	str	r2, [r3, #32]
}
 800a22c:	bf00      	nop
 800a22e:	371c      	adds	r7, #28
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr
 800a238:	40012c00 	.word	0x40012c00
 800a23c:	40014800 	.word	0x40014800
 800a240:	40014400 	.word	0x40014400

0800a244 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a244:	b480      	push	{r7}
 800a246:	b087      	sub	sp, #28
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a1b      	ldr	r3, [r3, #32]
 800a252:	f023 0210 	bic.w	r2, r3, #16
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a1b      	ldr	r3, [r3, #32]
 800a25e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a27e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	021b      	lsls	r3, r3, #8
 800a286:	68fa      	ldr	r2, [r7, #12]
 800a288:	4313      	orrs	r3, r2
 800a28a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	f023 0320 	bic.w	r3, r3, #32
 800a292:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	011b      	lsls	r3, r3, #4
 800a29a:	697a      	ldr	r2, [r7, #20]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a22      	ldr	r2, [pc, #136]	; (800a32c <TIM_OC2_SetConfig+0xe8>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d10d      	bne.n	800a2c4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	011b      	lsls	r3, r3, #4
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4a19      	ldr	r2, [pc, #100]	; (800a32c <TIM_OC2_SetConfig+0xe8>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d007      	beq.n	800a2dc <TIM_OC2_SetConfig+0x98>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	4a18      	ldr	r2, [pc, #96]	; (800a330 <TIM_OC2_SetConfig+0xec>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d003      	beq.n	800a2dc <TIM_OC2_SetConfig+0x98>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	4a17      	ldr	r2, [pc, #92]	; (800a334 <TIM_OC2_SetConfig+0xf0>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d113      	bne.n	800a304 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	695b      	ldr	r3, [r3, #20]
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	693a      	ldr	r2, [r7, #16]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	693a      	ldr	r2, [r7, #16]
 800a300:	4313      	orrs	r3, r2
 800a302:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	693a      	ldr	r2, [r7, #16]
 800a308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	685a      	ldr	r2, [r3, #4]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	697a      	ldr	r2, [r7, #20]
 800a31c:	621a      	str	r2, [r3, #32]
}
 800a31e:	bf00      	nop
 800a320:	371c      	adds	r7, #28
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	40012c00 	.word	0x40012c00
 800a330:	40014400 	.word	0x40014400
 800a334:	40014800 	.word	0x40014800

0800a338 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a338:	b480      	push	{r7}
 800a33a:	b087      	sub	sp, #28
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a1b      	ldr	r3, [r3, #32]
 800a352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	69db      	ldr	r3, [r3, #28]
 800a35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a36a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f023 0303 	bic.w	r3, r3, #3
 800a372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	021b      	lsls	r3, r3, #8
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	4313      	orrs	r3, r2
 800a390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4a21      	ldr	r2, [pc, #132]	; (800a41c <TIM_OC3_SetConfig+0xe4>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d10d      	bne.n	800a3b6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	68db      	ldr	r3, [r3, #12]
 800a3a6:	021b      	lsls	r3, r3, #8
 800a3a8:	697a      	ldr	r2, [r7, #20]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4a18      	ldr	r2, [pc, #96]	; (800a41c <TIM_OC3_SetConfig+0xe4>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d007      	beq.n	800a3ce <TIM_OC3_SetConfig+0x96>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4a17      	ldr	r2, [pc, #92]	; (800a420 <TIM_OC3_SetConfig+0xe8>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d003      	beq.n	800a3ce <TIM_OC3_SetConfig+0x96>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4a16      	ldr	r2, [pc, #88]	; (800a424 <TIM_OC3_SetConfig+0xec>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d113      	bne.n	800a3f6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	695b      	ldr	r3, [r3, #20]
 800a3e2:	011b      	lsls	r3, r3, #4
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	699b      	ldr	r3, [r3, #24]
 800a3ee:	011b      	lsls	r3, r3, #4
 800a3f0:	693a      	ldr	r2, [r7, #16]
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	693a      	ldr	r2, [r7, #16]
 800a3fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	685a      	ldr	r2, [r3, #4]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	697a      	ldr	r2, [r7, #20]
 800a40e:	621a      	str	r2, [r3, #32]
}
 800a410:	bf00      	nop
 800a412:	371c      	adds	r7, #28
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr
 800a41c:	40012c00 	.word	0x40012c00
 800a420:	40014400 	.word	0x40014400
 800a424:	40014800 	.word	0x40014800

0800a428 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a428:	b480      	push	{r7}
 800a42a:	b087      	sub	sp, #28
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a1b      	ldr	r3, [r3, #32]
 800a436:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a1b      	ldr	r3, [r3, #32]
 800a442:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	69db      	ldr	r3, [r3, #28]
 800a44e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a45a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	021b      	lsls	r3, r3, #8
 800a46a:	68fa      	ldr	r2, [r7, #12]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a476:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	031b      	lsls	r3, r3, #12
 800a47e:	693a      	ldr	r2, [r7, #16]
 800a480:	4313      	orrs	r3, r2
 800a482:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	4a14      	ldr	r2, [pc, #80]	; (800a4d8 <TIM_OC4_SetConfig+0xb0>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d007      	beq.n	800a49c <TIM_OC4_SetConfig+0x74>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a13      	ldr	r2, [pc, #76]	; (800a4dc <TIM_OC4_SetConfig+0xb4>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d003      	beq.n	800a49c <TIM_OC4_SetConfig+0x74>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4a12      	ldr	r2, [pc, #72]	; (800a4e0 <TIM_OC4_SetConfig+0xb8>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d109      	bne.n	800a4b0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	695b      	ldr	r3, [r3, #20]
 800a4a8:	019b      	lsls	r3, r3, #6
 800a4aa:	697a      	ldr	r2, [r7, #20]
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	697a      	ldr	r2, [r7, #20]
 800a4b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	685a      	ldr	r2, [r3, #4]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	693a      	ldr	r2, [r7, #16]
 800a4c8:	621a      	str	r2, [r3, #32]
}
 800a4ca:	bf00      	nop
 800a4cc:	371c      	adds	r7, #28
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr
 800a4d6:	bf00      	nop
 800a4d8:	40012c00 	.word	0x40012c00
 800a4dc:	40014400 	.word	0x40014400
 800a4e0:	40014800 	.word	0x40014800

0800a4e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b087      	sub	sp, #28
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6a1b      	ldr	r3, [r3, #32]
 800a4f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a1b      	ldr	r3, [r3, #32]
 800a4fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a50a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68fa      	ldr	r2, [r7, #12]
 800a51e:	4313      	orrs	r3, r2
 800a520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a528:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	041b      	lsls	r3, r3, #16
 800a530:	693a      	ldr	r2, [r7, #16]
 800a532:	4313      	orrs	r3, r2
 800a534:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4a13      	ldr	r2, [pc, #76]	; (800a588 <TIM_OC5_SetConfig+0xa4>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d007      	beq.n	800a54e <TIM_OC5_SetConfig+0x6a>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4a12      	ldr	r2, [pc, #72]	; (800a58c <TIM_OC5_SetConfig+0xa8>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d003      	beq.n	800a54e <TIM_OC5_SetConfig+0x6a>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4a11      	ldr	r2, [pc, #68]	; (800a590 <TIM_OC5_SetConfig+0xac>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d109      	bne.n	800a562 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a554:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	695b      	ldr	r3, [r3, #20]
 800a55a:	021b      	lsls	r3, r3, #8
 800a55c:	697a      	ldr	r2, [r7, #20]
 800a55e:	4313      	orrs	r3, r2
 800a560:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	697a      	ldr	r2, [r7, #20]
 800a566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	68fa      	ldr	r2, [r7, #12]
 800a56c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	685a      	ldr	r2, [r3, #4]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	693a      	ldr	r2, [r7, #16]
 800a57a:	621a      	str	r2, [r3, #32]
}
 800a57c:	bf00      	nop
 800a57e:	371c      	adds	r7, #28
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr
 800a588:	40012c00 	.word	0x40012c00
 800a58c:	40014400 	.word	0x40014400
 800a590:	40014800 	.word	0x40014800

0800a594 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a594:	b480      	push	{r7}
 800a596:	b087      	sub	sp, #28
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a1b      	ldr	r3, [r3, #32]
 800a5a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a1b      	ldr	r3, [r3, #32]
 800a5ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a5c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	021b      	lsls	r3, r3, #8
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a5da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	051b      	lsls	r3, r3, #20
 800a5e2:	693a      	ldr	r2, [r7, #16]
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	4a14      	ldr	r2, [pc, #80]	; (800a63c <TIM_OC6_SetConfig+0xa8>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d007      	beq.n	800a600 <TIM_OC6_SetConfig+0x6c>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	4a13      	ldr	r2, [pc, #76]	; (800a640 <TIM_OC6_SetConfig+0xac>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d003      	beq.n	800a600 <TIM_OC6_SetConfig+0x6c>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	4a12      	ldr	r2, [pc, #72]	; (800a644 <TIM_OC6_SetConfig+0xb0>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d109      	bne.n	800a614 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a606:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	695b      	ldr	r3, [r3, #20]
 800a60c:	029b      	lsls	r3, r3, #10
 800a60e:	697a      	ldr	r2, [r7, #20]
 800a610:	4313      	orrs	r3, r2
 800a612:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	68fa      	ldr	r2, [r7, #12]
 800a61e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	685a      	ldr	r2, [r3, #4]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	693a      	ldr	r2, [r7, #16]
 800a62c:	621a      	str	r2, [r3, #32]
}
 800a62e:	bf00      	nop
 800a630:	371c      	adds	r7, #28
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop
 800a63c:	40012c00 	.word	0x40012c00
 800a640:	40014400 	.word	0x40014400
 800a644:	40014800 	.word	0x40014800

0800a648 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a648:	b480      	push	{r7}
 800a64a:	b087      	sub	sp, #28
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6a1b      	ldr	r3, [r3, #32]
 800a658:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6a1b      	ldr	r3, [r3, #32]
 800a65e:	f023 0201 	bic.w	r2, r3, #1
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	011b      	lsls	r3, r3, #4
 800a678:	693a      	ldr	r2, [r7, #16]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	f023 030a 	bic.w	r3, r3, #10
 800a684:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a686:	697a      	ldr	r2, [r7, #20]
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	4313      	orrs	r3, r2
 800a68c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	693a      	ldr	r2, [r7, #16]
 800a692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	697a      	ldr	r2, [r7, #20]
 800a698:	621a      	str	r2, [r3, #32]
}
 800a69a:	bf00      	nop
 800a69c:	371c      	adds	r7, #28
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr

0800a6a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6a6:	b480      	push	{r7}
 800a6a8:	b087      	sub	sp, #28
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	60f8      	str	r0, [r7, #12]
 800a6ae:	60b9      	str	r1, [r7, #8]
 800a6b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6a1b      	ldr	r3, [r3, #32]
 800a6b6:	f023 0210 	bic.w	r2, r3, #16
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	699b      	ldr	r3, [r3, #24]
 800a6c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6a1b      	ldr	r3, [r3, #32]
 800a6c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a6d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	031b      	lsls	r3, r3, #12
 800a6d6:	697a      	ldr	r2, [r7, #20]
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a6e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	011b      	lsls	r3, r3, #4
 800a6e8:	693a      	ldr	r2, [r7, #16]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	697a      	ldr	r2, [r7, #20]
 800a6f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	693a      	ldr	r2, [r7, #16]
 800a6f8:	621a      	str	r2, [r3, #32]
}
 800a6fa:	bf00      	nop
 800a6fc:	371c      	adds	r7, #28
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr

0800a706 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a706:	b480      	push	{r7}
 800a708:	b085      	sub	sp, #20
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
 800a70e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a71c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a720:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a722:	683a      	ldr	r2, [r7, #0]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	4313      	orrs	r3, r2
 800a728:	f043 0307 	orr.w	r3, r3, #7
 800a72c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	609a      	str	r2, [r3, #8]
}
 800a734:	bf00      	nop
 800a736:	3714      	adds	r7, #20
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a740:	b480      	push	{r7}
 800a742:	b087      	sub	sp, #28
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	607a      	str	r2, [r7, #4]
 800a74c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a75a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	021a      	lsls	r2, r3, #8
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	431a      	orrs	r2, r3
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	4313      	orrs	r3, r2
 800a768:	697a      	ldr	r2, [r7, #20]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	697a      	ldr	r2, [r7, #20]
 800a772:	609a      	str	r2, [r3, #8]
}
 800a774:	bf00      	nop
 800a776:	371c      	adds	r7, #28
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a780:	b480      	push	{r7}
 800a782:	b087      	sub	sp, #28
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	f003 031f 	and.w	r3, r3, #31
 800a792:	2201      	movs	r2, #1
 800a794:	fa02 f303 	lsl.w	r3, r2, r3
 800a798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	6a1a      	ldr	r2, [r3, #32]
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	43db      	mvns	r3, r3
 800a7a2:	401a      	ands	r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6a1a      	ldr	r2, [r3, #32]
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	f003 031f 	and.w	r3, r3, #31
 800a7b2:	6879      	ldr	r1, [r7, #4]
 800a7b4:	fa01 f303 	lsl.w	r3, r1, r3
 800a7b8:	431a      	orrs	r2, r3
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	621a      	str	r2, [r3, #32]
}
 800a7be:	bf00      	nop
 800a7c0:	371c      	adds	r7, #28
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr
	...

0800a7cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d101      	bne.n	800a7e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a7e0:	2302      	movs	r3, #2
 800a7e2:	e04a      	b.n	800a87a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2202      	movs	r2, #2
 800a7f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a1f      	ldr	r2, [pc, #124]	; (800a888 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d108      	bne.n	800a820 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a814:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	68fa      	ldr	r2, [r7, #12]
 800a81c:	4313      	orrs	r3, r2
 800a81e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	4313      	orrs	r3, r2
 800a830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a12      	ldr	r2, [pc, #72]	; (800a888 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d004      	beq.n	800a84e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a84c:	d10c      	bne.n	800a868 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a854:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	4313      	orrs	r3, r2
 800a85e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3714      	adds	r7, #20
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr
 800a886:	bf00      	nop
 800a888:	40012c00 	.word	0x40012c00

0800a88c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a89c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a8a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3714      	adds	r7, #20
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr

0800a8ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a8ba:	b480      	push	{r7}
 800a8bc:	b085      	sub	sp, #20
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a8c2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a8c6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	43db      	mvns	r3, r3
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	4013      	ands	r3, r2
 800a8da:	b29a      	uxth	r2, r3
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a8f0:	b084      	sub	sp, #16
 800a8f2:	b480      	push	{r7}
 800a8f4:	b083      	sub	sp, #12
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
 800a8fa:	f107 0014 	add.w	r0, r7, #20
 800a8fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2201      	movs	r2, #1
 800a906:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	4618      	mov	r0, r3
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	b004      	add	sp, #16
 800a930:	4770      	bx	lr
	...

0800a934 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a934:	b480      	push	{r7}
 800a936:	b09d      	sub	sp, #116	; 0x74
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a93e:	2300      	movs	r3, #0
 800a940:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	4413      	add	r3, r2
 800a94e:	881b      	ldrh	r3, [r3, #0]
 800a950:	b29b      	uxth	r3, r3
 800a952:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a95a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	78db      	ldrb	r3, [r3, #3]
 800a962:	2b03      	cmp	r3, #3
 800a964:	d81f      	bhi.n	800a9a6 <USB_ActivateEndpoint+0x72>
 800a966:	a201      	add	r2, pc, #4	; (adr r2, 800a96c <USB_ActivateEndpoint+0x38>)
 800a968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a96c:	0800a97d 	.word	0x0800a97d
 800a970:	0800a999 	.word	0x0800a999
 800a974:	0800a9af 	.word	0x0800a9af
 800a978:	0800a98b 	.word	0x0800a98b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a97c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a980:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a984:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a988:	e012      	b.n	800a9b0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a98a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a98e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a992:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a996:	e00b      	b.n	800a9b0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a998:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a99c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a9a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a9a4:	e004      	b.n	800a9b0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a9ac:	e000      	b.n	800a9b0 <USB_ActivateEndpoint+0x7c>
      break;
 800a9ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	441a      	add	r2, r3
 800a9ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a9be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	4413      	add	r3, r2
 800a9dc:	881b      	ldrh	r3, [r3, #0]
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	b21b      	sxth	r3, r3
 800a9e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9ea:	b21a      	sxth	r2, r3
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	b21b      	sxth	r3, r3
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	b21b      	sxth	r3, r3
 800a9f6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	441a      	add	r2, r3
 800aa04:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800aa08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	7b1b      	ldrb	r3, [r3, #12]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f040 8178 	bne.w	800ad16 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	785b      	ldrb	r3, [r3, #1]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f000 8084 	beq.w	800ab38 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	61bb      	str	r3, [r7, #24]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	4413      	add	r3, r2
 800aa42:	61bb      	str	r3, [r7, #24]
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	00da      	lsls	r2, r3, #3
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa52:	617b      	str	r3, [r7, #20]
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	88db      	ldrh	r3, [r3, #6]
 800aa58:	085b      	lsrs	r3, r3, #1
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	005b      	lsls	r3, r3, #1
 800aa5e:	b29a      	uxth	r2, r3
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	4413      	add	r3, r2
 800aa6e:	881b      	ldrh	r3, [r3, #0]
 800aa70:	827b      	strh	r3, [r7, #18]
 800aa72:	8a7b      	ldrh	r3, [r7, #18]
 800aa74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d01b      	beq.n	800aab4 <USB_ActivateEndpoint+0x180>
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	4413      	add	r3, r2
 800aa86:	881b      	ldrh	r3, [r3, #0]
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa92:	823b      	strh	r3, [r7, #16]
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	441a      	add	r2, r3
 800aa9e:	8a3b      	ldrh	r3, [r7, #16]
 800aaa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	78db      	ldrb	r3, [r3, #3]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d020      	beq.n	800aafe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	4413      	add	r3, r2
 800aac6:	881b      	ldrh	r3, [r3, #0]
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aad2:	81bb      	strh	r3, [r7, #12]
 800aad4:	89bb      	ldrh	r3, [r7, #12]
 800aad6:	f083 0320 	eor.w	r3, r3, #32
 800aada:	81bb      	strh	r3, [r7, #12]
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	441a      	add	r2, r3
 800aae6:	89bb      	ldrh	r3, [r7, #12]
 800aae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	8013      	strh	r3, [r2, #0]
 800aafc:	e2d5      	b.n	800b0aa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	4413      	add	r3, r2
 800ab08:	881b      	ldrh	r3, [r3, #0]
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab14:	81fb      	strh	r3, [r7, #14]
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	441a      	add	r2, r3
 800ab20:	89fb      	ldrh	r3, [r7, #14]
 800ab22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	8013      	strh	r3, [r2, #0]
 800ab36:	e2b8      	b.n	800b0aa <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	633b      	str	r3, [r7, #48]	; 0x30
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	461a      	mov	r2, r3
 800ab46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab48:	4413      	add	r3, r2
 800ab4a:	633b      	str	r3, [r7, #48]	; 0x30
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	00da      	lsls	r2, r3, #3
 800ab52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab54:	4413      	add	r3, r2
 800ab56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ab5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	88db      	ldrh	r3, [r3, #6]
 800ab60:	085b      	lsrs	r3, r3, #1
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	005b      	lsls	r3, r3, #1
 800ab66:	b29a      	uxth	r2, r3
 800ab68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	461a      	mov	r2, r3
 800ab7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7c:	4413      	add	r3, r2
 800ab7e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	00da      	lsls	r2, r3, #3
 800ab86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab88:	4413      	add	r3, r2
 800ab8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab8e:	627b      	str	r3, [r7, #36]	; 0x24
 800ab90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab92:	881b      	ldrh	r3, [r3, #0]
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab9a:	b29a      	uxth	r2, r3
 800ab9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9e:	801a      	strh	r2, [r3, #0]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	2b3e      	cmp	r3, #62	; 0x3e
 800aba6:	d91d      	bls.n	800abe4 <USB_ActivateEndpoint+0x2b0>
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	095b      	lsrs	r3, r3, #5
 800abae:	66bb      	str	r3, [r7, #104]	; 0x68
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	691b      	ldr	r3, [r3, #16]
 800abb4:	f003 031f 	and.w	r3, r3, #31
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d102      	bne.n	800abc2 <USB_ActivateEndpoint+0x28e>
 800abbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abbe:	3b01      	subs	r3, #1
 800abc0:	66bb      	str	r3, [r7, #104]	; 0x68
 800abc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc4:	881b      	ldrh	r3, [r3, #0]
 800abc6:	b29a      	uxth	r2, r3
 800abc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abca:	b29b      	uxth	r3, r3
 800abcc:	029b      	lsls	r3, r3, #10
 800abce:	b29b      	uxth	r3, r3
 800abd0:	4313      	orrs	r3, r2
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abdc:	b29a      	uxth	r2, r3
 800abde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe0:	801a      	strh	r2, [r3, #0]
 800abe2:	e026      	b.n	800ac32 <USB_ActivateEndpoint+0x2fe>
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d10a      	bne.n	800ac02 <USB_ActivateEndpoint+0x2ce>
 800abec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abee:	881b      	ldrh	r3, [r3, #0]
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfe:	801a      	strh	r2, [r3, #0]
 800ac00:	e017      	b.n	800ac32 <USB_ActivateEndpoint+0x2fe>
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	085b      	lsrs	r3, r3, #1
 800ac08:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	691b      	ldr	r3, [r3, #16]
 800ac0e:	f003 0301 	and.w	r3, r3, #1
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d002      	beq.n	800ac1c <USB_ActivateEndpoint+0x2e8>
 800ac16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac18:	3301      	adds	r3, #1
 800ac1a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1e:	881b      	ldrh	r3, [r3, #0]
 800ac20:	b29a      	uxth	r2, r3
 800ac22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	029b      	lsls	r3, r3, #10
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	b29a      	uxth	r2, r3
 800ac2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac30:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	4413      	add	r3, r2
 800ac3c:	881b      	ldrh	r3, [r3, #0]
 800ac3e:	847b      	strh	r3, [r7, #34]	; 0x22
 800ac40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d01b      	beq.n	800ac82 <USB_ActivateEndpoint+0x34e>
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	4413      	add	r3, r2
 800ac54:	881b      	ldrh	r3, [r3, #0]
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac60:	843b      	strh	r3, [r7, #32]
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	441a      	add	r2, r3
 800ac6c:	8c3b      	ldrh	r3, [r7, #32]
 800ac6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d124      	bne.n	800acd4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	4413      	add	r3, r2
 800ac94:	881b      	ldrh	r3, [r3, #0]
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aca0:	83bb      	strh	r3, [r7, #28]
 800aca2:	8bbb      	ldrh	r3, [r7, #28]
 800aca4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aca8:	83bb      	strh	r3, [r7, #28]
 800acaa:	8bbb      	ldrh	r3, [r7, #28]
 800acac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800acb0:	83bb      	strh	r3, [r7, #28]
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	441a      	add	r2, r3
 800acbc:	8bbb      	ldrh	r3, [r7, #28]
 800acbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acce:	b29b      	uxth	r3, r3
 800acd0:	8013      	strh	r3, [r2, #0]
 800acd2:	e1ea      	b.n	800b0aa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	4413      	add	r3, r2
 800acde:	881b      	ldrh	r3, [r3, #0]
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ace6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acea:	83fb      	strh	r3, [r7, #30]
 800acec:	8bfb      	ldrh	r3, [r7, #30]
 800acee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800acf2:	83fb      	strh	r3, [r7, #30]
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	441a      	add	r2, r3
 800acfe:	8bfb      	ldrh	r3, [r7, #30]
 800ad00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	8013      	strh	r3, [r2, #0]
 800ad14:	e1c9      	b.n	800b0aa <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	78db      	ldrb	r3, [r3, #3]
 800ad1a:	2b02      	cmp	r3, #2
 800ad1c:	d11e      	bne.n	800ad5c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	4413      	add	r3, r2
 800ad28:	881b      	ldrh	r3, [r3, #0]
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad34:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	441a      	add	r2, r3
 800ad42:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ad46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad4e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ad52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	8013      	strh	r3, [r2, #0]
 800ad5a:	e01d      	b.n	800ad98 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	4413      	add	r3, r2
 800ad66:	881b      	ldrh	r3, [r3, #0]
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ad6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad72:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	441a      	add	r2, r3
 800ad80:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800ad84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	461a      	mov	r2, r3
 800ada6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ada8:	4413      	add	r3, r2
 800adaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	00da      	lsls	r2, r3, #3
 800adb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adb4:	4413      	add	r3, r2
 800adb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800adba:	65bb      	str	r3, [r7, #88]	; 0x58
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	891b      	ldrh	r3, [r3, #8]
 800adc0:	085b      	lsrs	r3, r3, #1
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	005b      	lsls	r3, r3, #1
 800adc6:	b29a      	uxth	r2, r3
 800adc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800adca:	801a      	strh	r2, [r3, #0]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	657b      	str	r3, [r7, #84]	; 0x54
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800add6:	b29b      	uxth	r3, r3
 800add8:	461a      	mov	r2, r3
 800adda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800addc:	4413      	add	r3, r2
 800adde:	657b      	str	r3, [r7, #84]	; 0x54
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	00da      	lsls	r2, r3, #3
 800ade6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ade8:	4413      	add	r3, r2
 800adea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800adee:	653b      	str	r3, [r7, #80]	; 0x50
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	895b      	ldrh	r3, [r3, #10]
 800adf4:	085b      	lsrs	r3, r3, #1
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	005b      	lsls	r3, r3, #1
 800adfa:	b29a      	uxth	r2, r3
 800adfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adfe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	785b      	ldrb	r3, [r3, #1]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f040 8093 	bne.w	800af30 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	4413      	add	r3, r2
 800ae14:	881b      	ldrh	r3, [r3, #0]
 800ae16:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ae1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ae1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d01b      	beq.n	800ae5e <USB_ActivateEndpoint+0x52a>
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4413      	add	r3, r2
 800ae30:	881b      	ldrh	r3, [r3, #0]
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae3c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	441a      	add	r2, r3
 800ae48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ae4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ae56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	4413      	add	r3, r2
 800ae68:	881b      	ldrh	r3, [r3, #0]
 800ae6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ae6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ae6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d01b      	beq.n	800aeae <USB_ActivateEndpoint+0x57a>
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	009b      	lsls	r3, r3, #2
 800ae7e:	4413      	add	r3, r2
 800ae80:	881b      	ldrh	r3, [r3, #0]
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae8c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	441a      	add	r2, r3
 800ae98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ae9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aea6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	4413      	add	r3, r2
 800aeb8:	881b      	ldrh	r3, [r3, #0]
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aec4:	873b      	strh	r3, [r7, #56]	; 0x38
 800aec6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aec8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aecc:	873b      	strh	r3, [r7, #56]	; 0x38
 800aece:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aed0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aed4:	873b      	strh	r3, [r7, #56]	; 0x38
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	441a      	add	r2, r3
 800aee0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aeea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aeee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	4413      	add	r3, r2
 800af00:	881b      	ldrh	r3, [r3, #0]
 800af02:	b29b      	uxth	r3, r3
 800af04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af0c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	441a      	add	r2, r3
 800af18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800af1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	8013      	strh	r3, [r2, #0]
 800af2e:	e0bc      	b.n	800b0aa <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	4413      	add	r3, r2
 800af3a:	881b      	ldrh	r3, [r3, #0]
 800af3c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800af40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800af44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d01d      	beq.n	800af88 <USB_ActivateEndpoint+0x654>
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	4413      	add	r3, r2
 800af56:	881b      	ldrh	r3, [r3, #0]
 800af58:	b29b      	uxth	r3, r3
 800af5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af62:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	441a      	add	r2, r3
 800af70:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800af74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af84:	b29b      	uxth	r3, r3
 800af86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	4413      	add	r3, r2
 800af92:	881b      	ldrh	r3, [r3, #0]
 800af94:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800af98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800af9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d01d      	beq.n	800afe0 <USB_ActivateEndpoint+0x6ac>
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	4413      	add	r3, r2
 800afae:	881b      	ldrh	r3, [r3, #0]
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	441a      	add	r2, r3
 800afc8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800afcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800afdc:	b29b      	uxth	r3, r3
 800afde:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	78db      	ldrb	r3, [r3, #3]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d024      	beq.n	800b032 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	4413      	add	r3, r2
 800aff2:	881b      	ldrh	r3, [r3, #0]
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800affa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800affe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800b002:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b006:	f083 0320 	eor.w	r3, r3, #32
 800b00a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	441a      	add	r2, r3
 800b018:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b01c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	8013      	strh	r3, [r2, #0]
 800b030:	e01d      	b.n	800b06e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	4413      	add	r3, r2
 800b03c:	881b      	ldrh	r3, [r3, #0]
 800b03e:	b29b      	uxth	r3, r3
 800b040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b048:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	441a      	add	r2, r3
 800b056:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b05a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b05e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	4413      	add	r3, r2
 800b078:	881b      	ldrh	r3, [r3, #0]
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b084:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	441a      	add	r2, r3
 800b092:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b09a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b09e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b0aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3774      	adds	r7, #116	; 0x74
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop

0800b0bc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b08d      	sub	sp, #52	; 0x34
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	7b1b      	ldrb	r3, [r3, #12]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	f040 808e 	bne.w	800b1ec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	785b      	ldrb	r3, [r3, #1]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d044      	beq.n	800b162 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	4413      	add	r3, r2
 800b0e2:	881b      	ldrh	r3, [r3, #0]
 800b0e4:	81bb      	strh	r3, [r7, #12]
 800b0e6:	89bb      	ldrh	r3, [r7, #12]
 800b0e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d01b      	beq.n	800b128 <USB_DeactivateEndpoint+0x6c>
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	4413      	add	r3, r2
 800b0fa:	881b      	ldrh	r3, [r3, #0]
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b106:	817b      	strh	r3, [r7, #10]
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	441a      	add	r2, r3
 800b112:	897b      	ldrh	r3, [r7, #10]
 800b114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b11c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b120:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b124:	b29b      	uxth	r3, r3
 800b126:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	4413      	add	r3, r2
 800b132:	881b      	ldrh	r3, [r3, #0]
 800b134:	b29b      	uxth	r3, r3
 800b136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b13a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b13e:	813b      	strh	r3, [r7, #8]
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	441a      	add	r2, r3
 800b14a:	893b      	ldrh	r3, [r7, #8]
 800b14c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	8013      	strh	r3, [r2, #0]
 800b160:	e192      	b.n	800b488 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	4413      	add	r3, r2
 800b16c:	881b      	ldrh	r3, [r3, #0]
 800b16e:	827b      	strh	r3, [r7, #18]
 800b170:	8a7b      	ldrh	r3, [r7, #18]
 800b172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b176:	2b00      	cmp	r3, #0
 800b178:	d01b      	beq.n	800b1b2 <USB_DeactivateEndpoint+0xf6>
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	4413      	add	r3, r2
 800b184:	881b      	ldrh	r3, [r3, #0]
 800b186:	b29b      	uxth	r3, r3
 800b188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b18c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b190:	823b      	strh	r3, [r7, #16]
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	441a      	add	r2, r3
 800b19c:	8a3b      	ldrh	r3, [r7, #16]
 800b19e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b1aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	4413      	add	r3, r2
 800b1bc:	881b      	ldrh	r3, [r3, #0]
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1c8:	81fb      	strh	r3, [r7, #14]
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	441a      	add	r2, r3
 800b1d4:	89fb      	ldrh	r3, [r7, #14]
 800b1d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	8013      	strh	r3, [r2, #0]
 800b1ea:	e14d      	b.n	800b488 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	785b      	ldrb	r3, [r3, #1]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	f040 80a5 	bne.w	800b340 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	4413      	add	r3, r2
 800b200:	881b      	ldrh	r3, [r3, #0]
 800b202:	843b      	strh	r3, [r7, #32]
 800b204:	8c3b      	ldrh	r3, [r7, #32]
 800b206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d01b      	beq.n	800b246 <USB_DeactivateEndpoint+0x18a>
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	4413      	add	r3, r2
 800b218:	881b      	ldrh	r3, [r3, #0]
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b224:	83fb      	strh	r3, [r7, #30]
 800b226:	687a      	ldr	r2, [r7, #4]
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	441a      	add	r2, r3
 800b230:	8bfb      	ldrh	r3, [r7, #30]
 800b232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b23a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b23e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b242:	b29b      	uxth	r3, r3
 800b244:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	009b      	lsls	r3, r3, #2
 800b24e:	4413      	add	r3, r2
 800b250:	881b      	ldrh	r3, [r3, #0]
 800b252:	83bb      	strh	r3, [r7, #28]
 800b254:	8bbb      	ldrh	r3, [r7, #28]
 800b256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d01b      	beq.n	800b296 <USB_DeactivateEndpoint+0x1da>
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	009b      	lsls	r3, r3, #2
 800b266:	4413      	add	r3, r2
 800b268:	881b      	ldrh	r3, [r3, #0]
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b274:	837b      	strh	r3, [r7, #26]
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	441a      	add	r2, r3
 800b280:	8b7b      	ldrh	r3, [r7, #26]
 800b282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b28a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b28e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b292:	b29b      	uxth	r3, r3
 800b294:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	4413      	add	r3, r2
 800b2a0:	881b      	ldrh	r3, [r3, #0]
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2ac:	833b      	strh	r3, [r7, #24]
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	441a      	add	r2, r3
 800b2b8:	8b3b      	ldrh	r3, [r7, #24]
 800b2ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	4413      	add	r3, r2
 800b2d8:	881b      	ldrh	r3, [r3, #0]
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2e4:	82fb      	strh	r3, [r7, #22]
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	441a      	add	r2, r3
 800b2f0:	8afb      	ldrh	r3, [r7, #22]
 800b2f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b302:	b29b      	uxth	r3, r3
 800b304:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	4413      	add	r3, r2
 800b310:	881b      	ldrh	r3, [r3, #0]
 800b312:	b29b      	uxth	r3, r3
 800b314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b31c:	82bb      	strh	r3, [r7, #20]
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	441a      	add	r2, r3
 800b328:	8abb      	ldrh	r3, [r7, #20]
 800b32a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b32e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	8013      	strh	r3, [r2, #0]
 800b33e:	e0a3      	b.n	800b488 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	4413      	add	r3, r2
 800b34a:	881b      	ldrh	r3, [r3, #0]
 800b34c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b34e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b354:	2b00      	cmp	r3, #0
 800b356:	d01b      	beq.n	800b390 <USB_DeactivateEndpoint+0x2d4>
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	4413      	add	r3, r2
 800b362:	881b      	ldrh	r3, [r3, #0]
 800b364:	b29b      	uxth	r3, r3
 800b366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b36a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b36e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	441a      	add	r2, r3
 800b37a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b37c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b384:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b38c:	b29b      	uxth	r3, r3
 800b38e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	4413      	add	r3, r2
 800b39a:	881b      	ldrh	r3, [r3, #0]
 800b39c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b39e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b3a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d01b      	beq.n	800b3e0 <USB_DeactivateEndpoint+0x324>
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	4413      	add	r3, r2
 800b3b2:	881b      	ldrh	r3, [r3, #0]
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3be:	853b      	strh	r3, [r7, #40]	; 0x28
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	441a      	add	r2, r3
 800b3ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b3cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	4413      	add	r3, r2
 800b3ea:	881b      	ldrh	r3, [r3, #0]
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	009b      	lsls	r3, r3, #2
 800b400:	441a      	add	r2, r3
 800b402:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b40c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b414:	b29b      	uxth	r3, r3
 800b416:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	4413      	add	r3, r2
 800b422:	881b      	ldrh	r3, [r3, #0]
 800b424:	b29b      	uxth	r3, r3
 800b426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b42a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b42e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	441a      	add	r2, r3
 800b43a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b43c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b440:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b44c:	b29b      	uxth	r3, r3
 800b44e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	4413      	add	r3, r2
 800b45a:	881b      	ldrh	r3, [r3, #0]
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b466:	847b      	strh	r3, [r7, #34]	; 0x22
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	441a      	add	r2, r3
 800b472:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b47c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b484:	b29b      	uxth	r3, r3
 800b486:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b488:	2300      	movs	r3, #0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3734      	adds	r7, #52	; 0x34
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr

0800b496 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b0c2      	sub	sp, #264	; 0x108
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4a4:	6018      	str	r0, [r3, #0]
 800b4a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ae:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b4b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	785b      	ldrb	r3, [r3, #1]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	f040 86b7 	bne.w	800c230 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b4c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	699a      	ldr	r2, [r3, #24]
 800b4ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	691b      	ldr	r3, [r3, #16]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d908      	bls.n	800b4f0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b4de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b4ee:	e007      	b.n	800b500 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b4f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	699b      	ldr	r3, [r3, #24]
 800b4fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	7b1b      	ldrb	r3, [r3, #12]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d13a      	bne.n	800b586 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	6959      	ldr	r1, [r3, #20]
 800b51c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	88da      	ldrh	r2, [r3, #6]
 800b528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b532:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b536:	6800      	ldr	r0, [r0, #0]
 800b538:	f001 fc98 	bl	800ce6c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b53c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b540:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	613b      	str	r3, [r7, #16]
 800b548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b54c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b556:	b29b      	uxth	r3, r3
 800b558:	461a      	mov	r2, r3
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	4413      	add	r3, r2
 800b55e:	613b      	str	r3, [r7, #16]
 800b560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	00da      	lsls	r2, r3, #3
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	4413      	add	r3, r2
 800b572:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b576:	60fb      	str	r3, [r7, #12]
 800b578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b57c:	b29a      	uxth	r2, r3
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	801a      	strh	r2, [r3, #0]
 800b582:	f000 be1f 	b.w	800c1c4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b58a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	78db      	ldrb	r3, [r3, #3]
 800b592:	2b02      	cmp	r3, #2
 800b594:	f040 8462 	bne.w	800be5c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b59c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	6a1a      	ldr	r2, [r3, #32]
 800b5a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	691b      	ldr	r3, [r3, #16]
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	f240 83df 	bls.w	800bd74 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b5b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5be:	681a      	ldr	r2, [r3, #0]
 800b5c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	4413      	add	r3, r2
 800b5d0:	881b      	ldrh	r3, [r3, #0]
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b5e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5e8:	681a      	ldr	r2, [r3, #0]
 800b5ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	441a      	add	r2, r3
 800b5fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b5fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b606:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b60a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b60e:	b29b      	uxth	r3, r3
 800b610:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	6a1a      	ldr	r2, [r3, #32]
 800b61e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b622:	1ad2      	subs	r2, r2, r3
 800b624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b634:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b63e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	009b      	lsls	r3, r3, #2
 800b648:	4413      	add	r3, r2
 800b64a:	881b      	ldrh	r3, [r3, #0]
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b652:	2b00      	cmp	r3, #0
 800b654:	f000 81c7 	beq.w	800b9e6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b65c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	633b      	str	r3, [r7, #48]	; 0x30
 800b664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	785b      	ldrb	r3, [r3, #1]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d177      	bne.n	800b764 <USB_EPStartXfer+0x2ce>
 800b674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b678:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b684:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b68e:	b29b      	uxth	r3, r3
 800b690:	461a      	mov	r2, r3
 800b692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b694:	4413      	add	r3, r2
 800b696:	62bb      	str	r3, [r7, #40]	; 0x28
 800b698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b69c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	00da      	lsls	r2, r3, #3
 800b6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a8:	4413      	add	r3, r2
 800b6aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b6ae:	627b      	str	r3, [r7, #36]	; 0x24
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b2:	881b      	ldrh	r3, [r3, #0]
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b6ba:	b29a      	uxth	r2, r3
 800b6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6be:	801a      	strh	r2, [r3, #0]
 800b6c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6c4:	2b3e      	cmp	r3, #62	; 0x3e
 800b6c6:	d921      	bls.n	800b70c <USB_EPStartXfer+0x276>
 800b6c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6cc:	095b      	lsrs	r3, r3, #5
 800b6ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b6d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d6:	f003 031f 	and.w	r3, r3, #31
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d104      	bne.n	800b6e8 <USB_EPStartXfer+0x252>
 800b6de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b6e2:	3b01      	subs	r3, #1
 800b6e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ea:	881b      	ldrh	r3, [r3, #0]
 800b6ec:	b29a      	uxth	r2, r3
 800b6ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	029b      	lsls	r3, r3, #10
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b704:	b29a      	uxth	r2, r3
 800b706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b708:	801a      	strh	r2, [r3, #0]
 800b70a:	e050      	b.n	800b7ae <USB_EPStartXfer+0x318>
 800b70c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b710:	2b00      	cmp	r3, #0
 800b712:	d10a      	bne.n	800b72a <USB_EPStartXfer+0x294>
 800b714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b716:	881b      	ldrh	r3, [r3, #0]
 800b718:	b29b      	uxth	r3, r3
 800b71a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b71e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b722:	b29a      	uxth	r2, r3
 800b724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b726:	801a      	strh	r2, [r3, #0]
 800b728:	e041      	b.n	800b7ae <USB_EPStartXfer+0x318>
 800b72a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b72e:	085b      	lsrs	r3, r3, #1
 800b730:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b738:	f003 0301 	and.w	r3, r3, #1
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d004      	beq.n	800b74a <USB_EPStartXfer+0x2b4>
 800b740:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b744:	3301      	adds	r3, #1
 800b746:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74c:	881b      	ldrh	r3, [r3, #0]
 800b74e:	b29a      	uxth	r2, r3
 800b750:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b754:	b29b      	uxth	r3, r3
 800b756:	029b      	lsls	r3, r3, #10
 800b758:	b29b      	uxth	r3, r3
 800b75a:	4313      	orrs	r3, r2
 800b75c:	b29a      	uxth	r2, r3
 800b75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b760:	801a      	strh	r2, [r3, #0]
 800b762:	e024      	b.n	800b7ae <USB_EPStartXfer+0x318>
 800b764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	785b      	ldrb	r3, [r3, #1]
 800b770:	2b01      	cmp	r3, #1
 800b772:	d11c      	bne.n	800b7ae <USB_EPStartXfer+0x318>
 800b774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b778:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b782:	b29b      	uxth	r3, r3
 800b784:	461a      	mov	r2, r3
 800b786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b788:	4413      	add	r3, r2
 800b78a:	633b      	str	r3, [r7, #48]	; 0x30
 800b78c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	00da      	lsls	r2, r3, #3
 800b79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79c:	4413      	add	r3, r2
 800b79e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b7a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a8:	b29a      	uxth	r2, r3
 800b7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b7ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	895b      	ldrh	r3, [r3, #10]
 800b7ba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b7be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	6959      	ldr	r1, [r3, #20]
 800b7ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b7d4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b7d8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b7dc:	6800      	ldr	r0, [r0, #0]
 800b7de:	f001 fb45 	bl	800ce6c <USB_WritePMA>
            ep->xfer_buff += len;
 800b7e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	695a      	ldr	r2, [r3, #20]
 800b7ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f2:	441a      	add	r2, r3
 800b7f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	6a1a      	ldr	r2, [r3, #32]
 800b80c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	691b      	ldr	r3, [r3, #16]
 800b818:	429a      	cmp	r2, r3
 800b81a:	d90f      	bls.n	800b83c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b81c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	6a1a      	ldr	r2, [r3, #32]
 800b828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b82c:	1ad2      	subs	r2, r2, r3
 800b82e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	621a      	str	r2, [r3, #32]
 800b83a:	e00e      	b.n	800b85a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b83c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	6a1b      	ldr	r3, [r3, #32]
 800b848:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b84c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	2200      	movs	r2, #0
 800b858:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b85a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b85e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	785b      	ldrb	r3, [r3, #1]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d177      	bne.n	800b95a <USB_EPStartXfer+0x4c4>
 800b86a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b86e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	61bb      	str	r3, [r7, #24]
 800b876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b87a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b884:	b29b      	uxth	r3, r3
 800b886:	461a      	mov	r2, r3
 800b888:	69bb      	ldr	r3, [r7, #24]
 800b88a:	4413      	add	r3, r2
 800b88c:	61bb      	str	r3, [r7, #24]
 800b88e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	00da      	lsls	r2, r3, #3
 800b89c:	69bb      	ldr	r3, [r7, #24]
 800b89e:	4413      	add	r3, r2
 800b8a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b8a4:	617b      	str	r3, [r7, #20]
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	881b      	ldrh	r3, [r3, #0]
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8b0:	b29a      	uxth	r2, r3
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	801a      	strh	r2, [r3, #0]
 800b8b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ba:	2b3e      	cmp	r3, #62	; 0x3e
 800b8bc:	d921      	bls.n	800b902 <USB_EPStartXfer+0x46c>
 800b8be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c2:	095b      	lsrs	r3, r3, #5
 800b8c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b8c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8cc:	f003 031f 	and.w	r3, r3, #31
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d104      	bne.n	800b8de <USB_EPStartXfer+0x448>
 800b8d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8d8:	3b01      	subs	r3, #1
 800b8da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	881b      	ldrh	r3, [r3, #0]
 800b8e2:	b29a      	uxth	r2, r3
 800b8e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	029b      	lsls	r3, r3, #10
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8fa:	b29a      	uxth	r2, r3
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	801a      	strh	r2, [r3, #0]
 800b900:	e056      	b.n	800b9b0 <USB_EPStartXfer+0x51a>
 800b902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b906:	2b00      	cmp	r3, #0
 800b908:	d10a      	bne.n	800b920 <USB_EPStartXfer+0x48a>
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	881b      	ldrh	r3, [r3, #0]
 800b90e:	b29b      	uxth	r3, r3
 800b910:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b914:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b918:	b29a      	uxth	r2, r3
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	801a      	strh	r2, [r3, #0]
 800b91e:	e047      	b.n	800b9b0 <USB_EPStartXfer+0x51a>
 800b920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b924:	085b      	lsrs	r3, r3, #1
 800b926:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b92e:	f003 0301 	and.w	r3, r3, #1
 800b932:	2b00      	cmp	r3, #0
 800b934:	d004      	beq.n	800b940 <USB_EPStartXfer+0x4aa>
 800b936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b93a:	3301      	adds	r3, #1
 800b93c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	881b      	ldrh	r3, [r3, #0]
 800b944:	b29a      	uxth	r2, r3
 800b946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	029b      	lsls	r3, r3, #10
 800b94e:	b29b      	uxth	r3, r3
 800b950:	4313      	orrs	r3, r2
 800b952:	b29a      	uxth	r2, r3
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	801a      	strh	r2, [r3, #0]
 800b958:	e02a      	b.n	800b9b0 <USB_EPStartXfer+0x51a>
 800b95a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b95e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	785b      	ldrb	r3, [r3, #1]
 800b966:	2b01      	cmp	r3, #1
 800b968:	d122      	bne.n	800b9b0 <USB_EPStartXfer+0x51a>
 800b96a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b96e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	623b      	str	r3, [r7, #32]
 800b976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b97a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b984:	b29b      	uxth	r3, r3
 800b986:	461a      	mov	r2, r3
 800b988:	6a3b      	ldr	r3, [r7, #32]
 800b98a:	4413      	add	r3, r2
 800b98c:	623b      	str	r3, [r7, #32]
 800b98e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	00da      	lsls	r2, r3, #3
 800b99c:	6a3b      	ldr	r3, [r7, #32]
 800b99e:	4413      	add	r3, r2
 800b9a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b9a4:	61fb      	str	r3, [r7, #28]
 800b9a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9aa:	b29a      	uxth	r2, r3
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b9b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	891b      	ldrh	r3, [r3, #8]
 800b9bc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b9c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	6959      	ldr	r1, [r3, #20]
 800b9cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b9d6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b9da:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b9de:	6800      	ldr	r0, [r0, #0]
 800b9e0:	f001 fa44 	bl	800ce6c <USB_WritePMA>
 800b9e4:	e3ee      	b.n	800c1c4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b9e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	785b      	ldrb	r3, [r3, #1]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d177      	bne.n	800bae6 <USB_EPStartXfer+0x650>
 800b9f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	461a      	mov	r2, r3
 800ba14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba16:	4413      	add	r3, r2
 800ba18:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	00da      	lsls	r2, r3, #3
 800ba28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba2a:	4413      	add	r3, r2
 800ba2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ba30:	647b      	str	r3, [r7, #68]	; 0x44
 800ba32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba34:	881b      	ldrh	r3, [r3, #0]
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba3c:	b29a      	uxth	r2, r3
 800ba3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba40:	801a      	strh	r2, [r3, #0]
 800ba42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba46:	2b3e      	cmp	r3, #62	; 0x3e
 800ba48:	d921      	bls.n	800ba8e <USB_EPStartXfer+0x5f8>
 800ba4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba4e:	095b      	lsrs	r3, r3, #5
 800ba50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ba54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba58:	f003 031f 	and.w	r3, r3, #31
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d104      	bne.n	800ba6a <USB_EPStartXfer+0x5d4>
 800ba60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba64:	3b01      	subs	r3, #1
 800ba66:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ba6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba6c:	881b      	ldrh	r3, [r3, #0]
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	029b      	lsls	r3, r3, #10
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba86:	b29a      	uxth	r2, r3
 800ba88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba8a:	801a      	strh	r2, [r3, #0]
 800ba8c:	e056      	b.n	800bb3c <USB_EPStartXfer+0x6a6>
 800ba8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d10a      	bne.n	800baac <USB_EPStartXfer+0x616>
 800ba96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba98:	881b      	ldrh	r3, [r3, #0]
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800baa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800baa4:	b29a      	uxth	r2, r3
 800baa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baa8:	801a      	strh	r2, [r3, #0]
 800baaa:	e047      	b.n	800bb3c <USB_EPStartXfer+0x6a6>
 800baac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bab0:	085b      	lsrs	r3, r3, #1
 800bab2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baba:	f003 0301 	and.w	r3, r3, #1
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d004      	beq.n	800bacc <USB_EPStartXfer+0x636>
 800bac2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bac6:	3301      	adds	r3, #1
 800bac8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bacc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bace:	881b      	ldrh	r3, [r3, #0]
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	029b      	lsls	r3, r3, #10
 800bada:	b29b      	uxth	r3, r3
 800badc:	4313      	orrs	r3, r2
 800bade:	b29a      	uxth	r2, r3
 800bae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bae2:	801a      	strh	r2, [r3, #0]
 800bae4:	e02a      	b.n	800bb3c <USB_EPStartXfer+0x6a6>
 800bae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	785b      	ldrb	r3, [r3, #1]
 800baf2:	2b01      	cmp	r3, #1
 800baf4:	d122      	bne.n	800bb3c <USB_EPStartXfer+0x6a6>
 800baf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bafa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	653b      	str	r3, [r7, #80]	; 0x50
 800bb02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	461a      	mov	r2, r3
 800bb14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb16:	4413      	add	r3, r2
 800bb18:	653b      	str	r3, [r7, #80]	; 0x50
 800bb1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	00da      	lsls	r2, r3, #3
 800bb28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb2a:	4413      	add	r3, r2
 800bb2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bb30:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb36:	b29a      	uxth	r2, r3
 800bb38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb3a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bb3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	891b      	ldrh	r3, [r3, #8]
 800bb48:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	6959      	ldr	r1, [r3, #20]
 800bb58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb5c:	b29b      	uxth	r3, r3
 800bb5e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bb62:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bb66:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bb6a:	6800      	ldr	r0, [r0, #0]
 800bb6c:	f001 f97e 	bl	800ce6c <USB_WritePMA>
            ep->xfer_buff += len;
 800bb70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	695a      	ldr	r2, [r3, #20]
 800bb7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb80:	441a      	add	r2, r3
 800bb82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bb8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	6a1a      	ldr	r2, [r3, #32]
 800bb9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	691b      	ldr	r3, [r3, #16]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d90f      	bls.n	800bbca <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800bbaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	6a1a      	ldr	r2, [r3, #32]
 800bbb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbba:	1ad2      	subs	r2, r2, r3
 800bbbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	621a      	str	r2, [r3, #32]
 800bbc8:	e00e      	b.n	800bbe8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800bbca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	6a1b      	ldr	r3, [r3, #32]
 800bbd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800bbda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bbe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	643b      	str	r3, [r7, #64]	; 0x40
 800bbf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	785b      	ldrb	r3, [r3, #1]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d177      	bne.n	800bcf4 <USB_EPStartXfer+0x85e>
 800bc04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	461a      	mov	r2, r3
 800bc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc24:	4413      	add	r3, r2
 800bc26:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	00da      	lsls	r2, r3, #3
 800bc36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc38:	4413      	add	r3, r2
 800bc3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bc3e:	637b      	str	r3, [r7, #52]	; 0x34
 800bc40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc42:	881b      	ldrh	r3, [r3, #0]
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc4a:	b29a      	uxth	r2, r3
 800bc4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc4e:	801a      	strh	r2, [r3, #0]
 800bc50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc54:	2b3e      	cmp	r3, #62	; 0x3e
 800bc56:	d921      	bls.n	800bc9c <USB_EPStartXfer+0x806>
 800bc58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc5c:	095b      	lsrs	r3, r3, #5
 800bc5e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bc62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc66:	f003 031f 	and.w	r3, r3, #31
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d104      	bne.n	800bc78 <USB_EPStartXfer+0x7e2>
 800bc6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc72:	3b01      	subs	r3, #1
 800bc74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bc78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc7a:	881b      	ldrh	r3, [r3, #0]
 800bc7c:	b29a      	uxth	r2, r3
 800bc7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	029b      	lsls	r3, r3, #10
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc98:	801a      	strh	r2, [r3, #0]
 800bc9a:	e050      	b.n	800bd3e <USB_EPStartXfer+0x8a8>
 800bc9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d10a      	bne.n	800bcba <USB_EPStartXfer+0x824>
 800bca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca6:	881b      	ldrh	r3, [r3, #0]
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcb2:	b29a      	uxth	r2, r3
 800bcb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcb6:	801a      	strh	r2, [r3, #0]
 800bcb8:	e041      	b.n	800bd3e <USB_EPStartXfer+0x8a8>
 800bcba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcbe:	085b      	lsrs	r3, r3, #1
 800bcc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bcc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcc8:	f003 0301 	and.w	r3, r3, #1
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d004      	beq.n	800bcda <USB_EPStartXfer+0x844>
 800bcd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bcda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcdc:	881b      	ldrh	r3, [r3, #0]
 800bcde:	b29a      	uxth	r2, r3
 800bce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	029b      	lsls	r3, r3, #10
 800bce8:	b29b      	uxth	r3, r3
 800bcea:	4313      	orrs	r3, r2
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcf0:	801a      	strh	r2, [r3, #0]
 800bcf2:	e024      	b.n	800bd3e <USB_EPStartXfer+0x8a8>
 800bcf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	785b      	ldrb	r3, [r3, #1]
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d11c      	bne.n	800bd3e <USB_EPStartXfer+0x8a8>
 800bd04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	461a      	mov	r2, r3
 800bd16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd18:	4413      	add	r3, r2
 800bd1a:	643b      	str	r3, [r7, #64]	; 0x40
 800bd1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	00da      	lsls	r2, r3, #3
 800bd2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd2c:	4413      	add	r3, r2
 800bd2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bd32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd38:	b29a      	uxth	r2, r3
 800bd3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bd3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	895b      	ldrh	r3, [r3, #10]
 800bd4a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bd4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	6959      	ldr	r1, [r3, #20]
 800bd5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bd64:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bd68:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bd6c:	6800      	ldr	r0, [r0, #0]
 800bd6e:	f001 f87d 	bl	800ce6c <USB_WritePMA>
 800bd72:	e227      	b.n	800c1c4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800bd74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	6a1b      	ldr	r3, [r3, #32]
 800bd80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800bd84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	4413      	add	r3, r2
 800bd9e:	881b      	ldrh	r3, [r3, #0]
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bda6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdaa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800bdae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	441a      	add	r2, r3
 800bdc8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800bdcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bddc:	b29b      	uxth	r3, r3
 800bdde:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bde0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bde4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be00:	4413      	add	r3, r2
 800be02:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	00da      	lsls	r2, r3, #3
 800be12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be14:	4413      	add	r3, r2
 800be16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800be1a:	65bb      	str	r3, [r7, #88]	; 0x58
 800be1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be20:	b29a      	uxth	r2, r3
 800be22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be24:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800be26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	891b      	ldrh	r3, [r3, #8]
 800be32:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800be36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	6959      	ldr	r1, [r3, #20]
 800be42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be46:	b29b      	uxth	r3, r3
 800be48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800be4c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800be50:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800be54:	6800      	ldr	r0, [r0, #0]
 800be56:	f001 f809 	bl	800ce6c <USB_WritePMA>
 800be5a:	e1b3      	b.n	800c1c4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800be5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	6a1a      	ldr	r2, [r3, #32]
 800be68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be6c:	1ad2      	subs	r2, r2, r3
 800be6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800be7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be82:	681a      	ldr	r2, [r3, #0]
 800be84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	4413      	add	r3, r2
 800be94:	881b      	ldrh	r3, [r3, #0]
 800be96:	b29b      	uxth	r3, r3
 800be98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	f000 80c6 	beq.w	800c02e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	673b      	str	r3, [r7, #112]	; 0x70
 800beae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800beb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	785b      	ldrb	r3, [r3, #1]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d177      	bne.n	800bfae <USB_EPStartXfer+0xb18>
 800bebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bec2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	66bb      	str	r3, [r7, #104]	; 0x68
 800beca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bece:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bed8:	b29b      	uxth	r3, r3
 800beda:	461a      	mov	r2, r3
 800bedc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bede:	4413      	add	r3, r2
 800bee0:	66bb      	str	r3, [r7, #104]	; 0x68
 800bee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	00da      	lsls	r2, r3, #3
 800bef0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bef2:	4413      	add	r3, r2
 800bef4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bef8:	667b      	str	r3, [r7, #100]	; 0x64
 800befa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800befc:	881b      	ldrh	r3, [r3, #0]
 800befe:	b29b      	uxth	r3, r3
 800bf00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf04:	b29a      	uxth	r2, r3
 800bf06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf08:	801a      	strh	r2, [r3, #0]
 800bf0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf0e:	2b3e      	cmp	r3, #62	; 0x3e
 800bf10:	d921      	bls.n	800bf56 <USB_EPStartXfer+0xac0>
 800bf12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf16:	095b      	lsrs	r3, r3, #5
 800bf18:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bf1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf20:	f003 031f 	and.w	r3, r3, #31
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d104      	bne.n	800bf32 <USB_EPStartXfer+0xa9c>
 800bf28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bf2c:	3b01      	subs	r3, #1
 800bf2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bf32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf34:	881b      	ldrh	r3, [r3, #0]
 800bf36:	b29a      	uxth	r2, r3
 800bf38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	029b      	lsls	r3, r3, #10
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	4313      	orrs	r3, r2
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf4e:	b29a      	uxth	r2, r3
 800bf50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf52:	801a      	strh	r2, [r3, #0]
 800bf54:	e050      	b.n	800bff8 <USB_EPStartXfer+0xb62>
 800bf56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d10a      	bne.n	800bf74 <USB_EPStartXfer+0xade>
 800bf5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf60:	881b      	ldrh	r3, [r3, #0]
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf6c:	b29a      	uxth	r2, r3
 800bf6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf70:	801a      	strh	r2, [r3, #0]
 800bf72:	e041      	b.n	800bff8 <USB_EPStartXfer+0xb62>
 800bf74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf78:	085b      	lsrs	r3, r3, #1
 800bf7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bf7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf82:	f003 0301 	and.w	r3, r3, #1
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d004      	beq.n	800bf94 <USB_EPStartXfer+0xafe>
 800bf8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bf8e:	3301      	adds	r3, #1
 800bf90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bf94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf96:	881b      	ldrh	r3, [r3, #0]
 800bf98:	b29a      	uxth	r2, r3
 800bf9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bf9e:	b29b      	uxth	r3, r3
 800bfa0:	029b      	lsls	r3, r3, #10
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	b29a      	uxth	r2, r3
 800bfa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bfaa:	801a      	strh	r2, [r3, #0]
 800bfac:	e024      	b.n	800bff8 <USB_EPStartXfer+0xb62>
 800bfae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	785b      	ldrb	r3, [r3, #1]
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d11c      	bne.n	800bff8 <USB_EPStartXfer+0xb62>
 800bfbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	461a      	mov	r2, r3
 800bfd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bfd2:	4413      	add	r3, r2
 800bfd4:	673b      	str	r3, [r7, #112]	; 0x70
 800bfd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	00da      	lsls	r2, r3, #3
 800bfe4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bfe6:	4413      	add	r3, r2
 800bfe8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bfec:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bfee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bff2:	b29a      	uxth	r2, r3
 800bff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bff6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	895b      	ldrh	r3, [r3, #10]
 800c004:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c00c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	6959      	ldr	r1, [r3, #20]
 800c014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c018:	b29b      	uxth	r3, r3
 800c01a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c01e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c022:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c026:	6800      	ldr	r0, [r0, #0]
 800c028:	f000 ff20 	bl	800ce6c <USB_WritePMA>
 800c02c:	e0ca      	b.n	800c1c4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c02e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	785b      	ldrb	r3, [r3, #1]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d177      	bne.n	800c12e <USB_EPStartXfer+0xc98>
 800c03e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c042:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c04a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c04e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c058:	b29b      	uxth	r3, r3
 800c05a:	461a      	mov	r2, r3
 800c05c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c05e:	4413      	add	r3, r2
 800c060:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	00da      	lsls	r2, r3, #3
 800c070:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c072:	4413      	add	r3, r2
 800c074:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c078:	67bb      	str	r3, [r7, #120]	; 0x78
 800c07a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c07c:	881b      	ldrh	r3, [r3, #0]
 800c07e:	b29b      	uxth	r3, r3
 800c080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c084:	b29a      	uxth	r2, r3
 800c086:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c088:	801a      	strh	r2, [r3, #0]
 800c08a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c08e:	2b3e      	cmp	r3, #62	; 0x3e
 800c090:	d921      	bls.n	800c0d6 <USB_EPStartXfer+0xc40>
 800c092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c096:	095b      	lsrs	r3, r3, #5
 800c098:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c09c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0a0:	f003 031f 	and.w	r3, r3, #31
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d104      	bne.n	800c0b2 <USB_EPStartXfer+0xc1c>
 800c0a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c0ac:	3b01      	subs	r3, #1
 800c0ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c0b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0b4:	881b      	ldrh	r3, [r3, #0]
 800c0b6:	b29a      	uxth	r2, r3
 800c0b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	029b      	lsls	r3, r3, #10
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0ce:	b29a      	uxth	r2, r3
 800c0d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0d2:	801a      	strh	r2, [r3, #0]
 800c0d4:	e05c      	b.n	800c190 <USB_EPStartXfer+0xcfa>
 800c0d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d10a      	bne.n	800c0f4 <USB_EPStartXfer+0xc5e>
 800c0de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0e0:	881b      	ldrh	r3, [r3, #0]
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0ec:	b29a      	uxth	r2, r3
 800c0ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0f0:	801a      	strh	r2, [r3, #0]
 800c0f2:	e04d      	b.n	800c190 <USB_EPStartXfer+0xcfa>
 800c0f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0f8:	085b      	lsrs	r3, r3, #1
 800c0fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c0fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c102:	f003 0301 	and.w	r3, r3, #1
 800c106:	2b00      	cmp	r3, #0
 800c108:	d004      	beq.n	800c114 <USB_EPStartXfer+0xc7e>
 800c10a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c10e:	3301      	adds	r3, #1
 800c110:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c114:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c116:	881b      	ldrh	r3, [r3, #0]
 800c118:	b29a      	uxth	r2, r3
 800c11a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c11e:	b29b      	uxth	r3, r3
 800c120:	029b      	lsls	r3, r3, #10
 800c122:	b29b      	uxth	r3, r3
 800c124:	4313      	orrs	r3, r2
 800c126:	b29a      	uxth	r2, r3
 800c128:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c12a:	801a      	strh	r2, [r3, #0]
 800c12c:	e030      	b.n	800c190 <USB_EPStartXfer+0xcfa>
 800c12e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	785b      	ldrb	r3, [r3, #1]
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d128      	bne.n	800c190 <USB_EPStartXfer+0xcfa>
 800c13e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c142:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c14c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c150:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	461a      	mov	r2, r3
 800c15e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c162:	4413      	add	r3, r2
 800c164:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c16c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	00da      	lsls	r2, r3, #3
 800c176:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c17a:	4413      	add	r3, r2
 800c17c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c180:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c188:	b29a      	uxth	r2, r3
 800c18a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c18e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	891b      	ldrh	r3, [r3, #8]
 800c19c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c1a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	6959      	ldr	r1, [r3, #20]
 800c1ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c1b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c1ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c1be:	6800      	ldr	r0, [r0, #0]
 800c1c0:	f000 fe54 	bl	800ce6c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c1c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1cc:	681a      	ldr	r2, [r3, #0]
 800c1ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	4413      	add	r3, r2
 800c1de:	881b      	ldrh	r3, [r3, #0]
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c1e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1ea:	817b      	strh	r3, [r7, #10]
 800c1ec:	897b      	ldrh	r3, [r7, #10]
 800c1ee:	f083 0310 	eor.w	r3, r3, #16
 800c1f2:	817b      	strh	r3, [r7, #10]
 800c1f4:	897b      	ldrh	r3, [r7, #10]
 800c1f6:	f083 0320 	eor.w	r3, r3, #32
 800c1fa:	817b      	strh	r3, [r7, #10]
 800c1fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c200:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c20a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	441a      	add	r2, r3
 800c216:	897b      	ldrh	r3, [r7, #10]
 800c218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c21c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c228:	b29b      	uxth	r3, r3
 800c22a:	8013      	strh	r3, [r2, #0]
 800c22c:	f000 bcde 	b.w	800cbec <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	7b1b      	ldrb	r3, [r3, #12]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f040 80bb 	bne.w	800c3b8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	699a      	ldr	r2, [r3, #24]
 800c24e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	691b      	ldr	r3, [r3, #16]
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d917      	bls.n	800c28e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800c25e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	691b      	ldr	r3, [r3, #16]
 800c26a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800c26e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	699a      	ldr	r2, [r3, #24]
 800c27a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c27e:	1ad2      	subs	r2, r2, r3
 800c280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	619a      	str	r2, [r3, #24]
 800c28c:	e00e      	b.n	800c2ac <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800c28e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	699b      	ldr	r3, [r3, #24]
 800c29a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800c29e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c2ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c2ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c2d0:	4413      	add	r3, r2
 800c2d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c2d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	00da      	lsls	r2, r3, #3
 800c2e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c2e8:	4413      	add	r3, r2
 800c2ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c2ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c2f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c2f6:	881b      	ldrh	r3, [r3, #0]
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2fe:	b29a      	uxth	r2, r3
 800c300:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c304:	801a      	strh	r2, [r3, #0]
 800c306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c30a:	2b3e      	cmp	r3, #62	; 0x3e
 800c30c:	d924      	bls.n	800c358 <USB_EPStartXfer+0xec2>
 800c30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c312:	095b      	lsrs	r3, r3, #5
 800c314:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c31c:	f003 031f 	and.w	r3, r3, #31
 800c320:	2b00      	cmp	r3, #0
 800c322:	d104      	bne.n	800c32e <USB_EPStartXfer+0xe98>
 800c324:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c328:	3b01      	subs	r3, #1
 800c32a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c32e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c332:	881b      	ldrh	r3, [r3, #0]
 800c334:	b29a      	uxth	r2, r3
 800c336:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	029b      	lsls	r3, r3, #10
 800c33e:	b29b      	uxth	r3, r3
 800c340:	4313      	orrs	r3, r2
 800c342:	b29b      	uxth	r3, r3
 800c344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c34c:	b29a      	uxth	r2, r3
 800c34e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c352:	801a      	strh	r2, [r3, #0]
 800c354:	f000 bc10 	b.w	800cb78 <USB_EPStartXfer+0x16e2>
 800c358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d10c      	bne.n	800c37a <USB_EPStartXfer+0xee4>
 800c360:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c364:	881b      	ldrh	r3, [r3, #0]
 800c366:	b29b      	uxth	r3, r3
 800c368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c36c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c370:	b29a      	uxth	r2, r3
 800c372:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c376:	801a      	strh	r2, [r3, #0]
 800c378:	e3fe      	b.n	800cb78 <USB_EPStartXfer+0x16e2>
 800c37a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c37e:	085b      	lsrs	r3, r3, #1
 800c380:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c388:	f003 0301 	and.w	r3, r3, #1
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d004      	beq.n	800c39a <USB_EPStartXfer+0xf04>
 800c390:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c394:	3301      	adds	r3, #1
 800c396:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c39a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c39e:	881b      	ldrh	r3, [r3, #0]
 800c3a0:	b29a      	uxth	r2, r3
 800c3a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c3a6:	b29b      	uxth	r3, r3
 800c3a8:	029b      	lsls	r3, r3, #10
 800c3aa:	b29b      	uxth	r3, r3
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	b29a      	uxth	r2, r3
 800c3b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c3b4:	801a      	strh	r2, [r3, #0]
 800c3b6:	e3df      	b.n	800cb78 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c3b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	78db      	ldrb	r3, [r3, #3]
 800c3c4:	2b02      	cmp	r3, #2
 800c3c6:	f040 8218 	bne.w	800c7fa <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c3ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	785b      	ldrb	r3, [r3, #1]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	f040 809d 	bne.w	800c516 <USB_EPStartXfer+0x1080>
 800c3dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c3ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c400:	4413      	add	r3, r2
 800c402:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c40a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	00da      	lsls	r2, r3, #3
 800c414:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c418:	4413      	add	r3, r2
 800c41a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c41e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c422:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c426:	881b      	ldrh	r3, [r3, #0]
 800c428:	b29b      	uxth	r3, r3
 800c42a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c42e:	b29a      	uxth	r2, r3
 800c430:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c434:	801a      	strh	r2, [r3, #0]
 800c436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c43a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	691b      	ldr	r3, [r3, #16]
 800c442:	2b3e      	cmp	r3, #62	; 0x3e
 800c444:	d92b      	bls.n	800c49e <USB_EPStartXfer+0x1008>
 800c446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c44a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	691b      	ldr	r3, [r3, #16]
 800c452:	095b      	lsrs	r3, r3, #5
 800c454:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c45c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	691b      	ldr	r3, [r3, #16]
 800c464:	f003 031f 	and.w	r3, r3, #31
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d104      	bne.n	800c476 <USB_EPStartXfer+0xfe0>
 800c46c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c470:	3b01      	subs	r3, #1
 800c472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c476:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c47a:	881b      	ldrh	r3, [r3, #0]
 800c47c:	b29a      	uxth	r2, r3
 800c47e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c482:	b29b      	uxth	r3, r3
 800c484:	029b      	lsls	r3, r3, #10
 800c486:	b29b      	uxth	r3, r3
 800c488:	4313      	orrs	r3, r2
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c494:	b29a      	uxth	r2, r3
 800c496:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c49a:	801a      	strh	r2, [r3, #0]
 800c49c:	e070      	b.n	800c580 <USB_EPStartXfer+0x10ea>
 800c49e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	691b      	ldr	r3, [r3, #16]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d10c      	bne.n	800c4c8 <USB_EPStartXfer+0x1032>
 800c4ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c4b2:	881b      	ldrh	r3, [r3, #0]
 800c4b4:	b29b      	uxth	r3, r3
 800c4b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4be:	b29a      	uxth	r2, r3
 800c4c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c4c4:	801a      	strh	r2, [r3, #0]
 800c4c6:	e05b      	b.n	800c580 <USB_EPStartXfer+0x10ea>
 800c4c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	691b      	ldr	r3, [r3, #16]
 800c4d4:	085b      	lsrs	r3, r3, #1
 800c4d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c4da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	691b      	ldr	r3, [r3, #16]
 800c4e6:	f003 0301 	and.w	r3, r3, #1
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d004      	beq.n	800c4f8 <USB_EPStartXfer+0x1062>
 800c4ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c4f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c4fc:	881b      	ldrh	r3, [r3, #0]
 800c4fe:	b29a      	uxth	r2, r3
 800c500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c504:	b29b      	uxth	r3, r3
 800c506:	029b      	lsls	r3, r3, #10
 800c508:	b29b      	uxth	r3, r3
 800c50a:	4313      	orrs	r3, r2
 800c50c:	b29a      	uxth	r2, r3
 800c50e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c512:	801a      	strh	r2, [r3, #0]
 800c514:	e034      	b.n	800c580 <USB_EPStartXfer+0x10ea>
 800c516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c51a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	785b      	ldrb	r3, [r3, #1]
 800c522:	2b01      	cmp	r3, #1
 800c524:	d12c      	bne.n	800c580 <USB_EPStartXfer+0x10ea>
 800c526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c52a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c538:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c542:	b29b      	uxth	r3, r3
 800c544:	461a      	mov	r2, r3
 800c546:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c54a:	4413      	add	r3, r2
 800c54c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	00da      	lsls	r2, r3, #3
 800c55e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c562:	4413      	add	r3, r2
 800c564:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c568:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c56c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	691b      	ldr	r3, [r3, #16]
 800c578:	b29a      	uxth	r2, r3
 800c57a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c57e:	801a      	strh	r2, [r3, #0]
 800c580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c584:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c58e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	785b      	ldrb	r3, [r3, #1]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	f040 809d 	bne.w	800c6da <USB_EPStartXfer+0x1244>
 800c5a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c5ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	461a      	mov	r2, r3
 800c5c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c5c4:	4413      	add	r3, r2
 800c5c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c5ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	00da      	lsls	r2, r3, #3
 800c5d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c5dc:	4413      	add	r3, r2
 800c5de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c5e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c5e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c5ea:	881b      	ldrh	r3, [r3, #0]
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c5f2:	b29a      	uxth	r2, r3
 800c5f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c5f8:	801a      	strh	r2, [r3, #0]
 800c5fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	691b      	ldr	r3, [r3, #16]
 800c606:	2b3e      	cmp	r3, #62	; 0x3e
 800c608:	d92b      	bls.n	800c662 <USB_EPStartXfer+0x11cc>
 800c60a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c60e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	691b      	ldr	r3, [r3, #16]
 800c616:	095b      	lsrs	r3, r3, #5
 800c618:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c61c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	691b      	ldr	r3, [r3, #16]
 800c628:	f003 031f 	and.w	r3, r3, #31
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d104      	bne.n	800c63a <USB_EPStartXfer+0x11a4>
 800c630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c634:	3b01      	subs	r3, #1
 800c636:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c63a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c63e:	881b      	ldrh	r3, [r3, #0]
 800c640:	b29a      	uxth	r2, r3
 800c642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c646:	b29b      	uxth	r3, r3
 800c648:	029b      	lsls	r3, r3, #10
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	4313      	orrs	r3, r2
 800c64e:	b29b      	uxth	r3, r3
 800c650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c658:	b29a      	uxth	r2, r3
 800c65a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c65e:	801a      	strh	r2, [r3, #0]
 800c660:	e069      	b.n	800c736 <USB_EPStartXfer+0x12a0>
 800c662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	691b      	ldr	r3, [r3, #16]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d10c      	bne.n	800c68c <USB_EPStartXfer+0x11f6>
 800c672:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c676:	881b      	ldrh	r3, [r3, #0]
 800c678:	b29b      	uxth	r3, r3
 800c67a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c67e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c682:	b29a      	uxth	r2, r3
 800c684:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c688:	801a      	strh	r2, [r3, #0]
 800c68a:	e054      	b.n	800c736 <USB_EPStartXfer+0x12a0>
 800c68c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	691b      	ldr	r3, [r3, #16]
 800c698:	085b      	lsrs	r3, r3, #1
 800c69a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c69e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	691b      	ldr	r3, [r3, #16]
 800c6aa:	f003 0301 	and.w	r3, r3, #1
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d004      	beq.n	800c6bc <USB_EPStartXfer+0x1226>
 800c6b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c6bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c6c0:	881b      	ldrh	r3, [r3, #0]
 800c6c2:	b29a      	uxth	r2, r3
 800c6c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	029b      	lsls	r3, r3, #10
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	b29a      	uxth	r2, r3
 800c6d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c6d6:	801a      	strh	r2, [r3, #0]
 800c6d8:	e02d      	b.n	800c736 <USB_EPStartXfer+0x12a0>
 800c6da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	785b      	ldrb	r3, [r3, #1]
 800c6e6:	2b01      	cmp	r3, #1
 800c6e8:	d125      	bne.n	800c736 <USB_EPStartXfer+0x12a0>
 800c6ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c6f8:	b29b      	uxth	r3, r3
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c700:	4413      	add	r3, r2
 800c702:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c70a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	00da      	lsls	r2, r3, #3
 800c714:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c718:	4413      	add	r3, r2
 800c71a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c71e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	691b      	ldr	r3, [r3, #16]
 800c72e:	b29a      	uxth	r2, r3
 800c730:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c734:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c73a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	69db      	ldr	r3, [r3, #28]
 800c742:	2b00      	cmp	r3, #0
 800c744:	f000 8218 	beq.w	800cb78 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c74c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c750:	681a      	ldr	r2, [r3, #0]
 800c752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	4413      	add	r3, r2
 800c762:	881b      	ldrh	r3, [r3, #0]
 800c764:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c768:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c76c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c770:	2b00      	cmp	r3, #0
 800c772:	d005      	beq.n	800c780 <USB_EPStartXfer+0x12ea>
 800c774:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d10d      	bne.n	800c79c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c780:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c788:	2b00      	cmp	r3, #0
 800c78a:	f040 81f5 	bne.w	800cb78 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c78e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c796:	2b00      	cmp	r3, #0
 800c798:	f040 81ee 	bne.w	800cb78 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c79c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	009b      	lsls	r3, r3, #2
 800c7b4:	4413      	add	r3, r2
 800c7b6:	881b      	ldrh	r3, [r3, #0]
 800c7b8:	b29b      	uxth	r3, r3
 800c7ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7c2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c7c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	009b      	lsls	r3, r3, #2
 800c7de:	441a      	add	r2, r3
 800c7e0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c7e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c7ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c7f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	8013      	strh	r3, [r2, #0]
 800c7f8:	e1be      	b.n	800cb78 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c7fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	78db      	ldrb	r3, [r3, #3]
 800c806:	2b01      	cmp	r3, #1
 800c808:	f040 81b4 	bne.w	800cb74 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c80c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	699a      	ldr	r2, [r3, #24]
 800c818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c81c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	691b      	ldr	r3, [r3, #16]
 800c824:	429a      	cmp	r2, r3
 800c826:	d917      	bls.n	800c858 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c82c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	691b      	ldr	r3, [r3, #16]
 800c834:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800c838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c83c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	699a      	ldr	r2, [r3, #24]
 800c844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c848:	1ad2      	subs	r2, r2, r3
 800c84a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c84e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	619a      	str	r2, [r3, #24]
 800c856:	e00e      	b.n	800c876 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c85c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	699b      	ldr	r3, [r3, #24]
 800c864:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800c868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c86c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	2200      	movs	r2, #0
 800c874:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c87a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	785b      	ldrb	r3, [r3, #1]
 800c882:	2b00      	cmp	r3, #0
 800c884:	f040 8085 	bne.w	800c992 <USB_EPStartXfer+0x14fc>
 800c888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c88c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c89a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8a4:	b29b      	uxth	r3, r3
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c8ac:	4413      	add	r3, r2
 800c8ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c8b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	00da      	lsls	r2, r3, #3
 800c8c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c8c4:	4413      	add	r3, r2
 800c8c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c8ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c8ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c8d2:	881b      	ldrh	r3, [r3, #0]
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c8da:	b29a      	uxth	r2, r3
 800c8dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c8e0:	801a      	strh	r2, [r3, #0]
 800c8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8e6:	2b3e      	cmp	r3, #62	; 0x3e
 800c8e8:	d923      	bls.n	800c932 <USB_EPStartXfer+0x149c>
 800c8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8ee:	095b      	lsrs	r3, r3, #5
 800c8f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c8f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8f8:	f003 031f 	and.w	r3, r3, #31
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d104      	bne.n	800c90a <USB_EPStartXfer+0x1474>
 800c900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c904:	3b01      	subs	r3, #1
 800c906:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c90a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c90e:	881b      	ldrh	r3, [r3, #0]
 800c910:	b29a      	uxth	r2, r3
 800c912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c916:	b29b      	uxth	r3, r3
 800c918:	029b      	lsls	r3, r3, #10
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	4313      	orrs	r3, r2
 800c91e:	b29b      	uxth	r3, r3
 800c920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c928:	b29a      	uxth	r2, r3
 800c92a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c92e:	801a      	strh	r2, [r3, #0]
 800c930:	e060      	b.n	800c9f4 <USB_EPStartXfer+0x155e>
 800c932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c936:	2b00      	cmp	r3, #0
 800c938:	d10c      	bne.n	800c954 <USB_EPStartXfer+0x14be>
 800c93a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c93e:	881b      	ldrh	r3, [r3, #0]
 800c940:	b29b      	uxth	r3, r3
 800c942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c94a:	b29a      	uxth	r2, r3
 800c94c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c950:	801a      	strh	r2, [r3, #0]
 800c952:	e04f      	b.n	800c9f4 <USB_EPStartXfer+0x155e>
 800c954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c958:	085b      	lsrs	r3, r3, #1
 800c95a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c95e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c962:	f003 0301 	and.w	r3, r3, #1
 800c966:	2b00      	cmp	r3, #0
 800c968:	d004      	beq.n	800c974 <USB_EPStartXfer+0x14de>
 800c96a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c96e:	3301      	adds	r3, #1
 800c970:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c974:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c978:	881b      	ldrh	r3, [r3, #0]
 800c97a:	b29a      	uxth	r2, r3
 800c97c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c980:	b29b      	uxth	r3, r3
 800c982:	029b      	lsls	r3, r3, #10
 800c984:	b29b      	uxth	r3, r3
 800c986:	4313      	orrs	r3, r2
 800c988:	b29a      	uxth	r2, r3
 800c98a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c98e:	801a      	strh	r2, [r3, #0]
 800c990:	e030      	b.n	800c9f4 <USB_EPStartXfer+0x155e>
 800c992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	785b      	ldrb	r3, [r3, #1]
 800c99e:	2b01      	cmp	r3, #1
 800c9a0:	d128      	bne.n	800c9f4 <USB_EPStartXfer+0x155e>
 800c9a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c9b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c9c6:	4413      	add	r3, r2
 800c9c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c9cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	00da      	lsls	r2, r3, #3
 800c9da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c9de:	4413      	add	r3, r2
 800c9e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c9e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c9e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9ec:	b29a      	uxth	r2, r3
 800c9ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c9f2:	801a      	strh	r2, [r3, #0]
 800c9f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ca02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	785b      	ldrb	r3, [r3, #1]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	f040 8085 	bne.w	800cb1e <USB_EPStartXfer+0x1688>
 800ca14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ca22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca30:	b29b      	uxth	r3, r3
 800ca32:	461a      	mov	r2, r3
 800ca34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ca38:	4413      	add	r3, r2
 800ca3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ca3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	00da      	lsls	r2, r3, #3
 800ca4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ca50:	4413      	add	r3, r2
 800ca52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ca56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ca5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ca5e:	881b      	ldrh	r3, [r3, #0]
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca66:	b29a      	uxth	r2, r3
 800ca68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ca6c:	801a      	strh	r2, [r3, #0]
 800ca6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca72:	2b3e      	cmp	r3, #62	; 0x3e
 800ca74:	d923      	bls.n	800cabe <USB_EPStartXfer+0x1628>
 800ca76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca7a:	095b      	lsrs	r3, r3, #5
 800ca7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ca80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca84:	f003 031f 	and.w	r3, r3, #31
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d104      	bne.n	800ca96 <USB_EPStartXfer+0x1600>
 800ca8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca90:	3b01      	subs	r3, #1
 800ca92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ca96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ca9a:	881b      	ldrh	r3, [r3, #0]
 800ca9c:	b29a      	uxth	r2, r3
 800ca9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	029b      	lsls	r3, r3, #10
 800caa6:	b29b      	uxth	r3, r3
 800caa8:	4313      	orrs	r3, r2
 800caaa:	b29b      	uxth	r3, r3
 800caac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cab4:	b29a      	uxth	r2, r3
 800cab6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800caba:	801a      	strh	r2, [r3, #0]
 800cabc:	e05c      	b.n	800cb78 <USB_EPStartXfer+0x16e2>
 800cabe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d10c      	bne.n	800cae0 <USB_EPStartXfer+0x164a>
 800cac6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800caca:	881b      	ldrh	r3, [r3, #0]
 800cacc:	b29b      	uxth	r3, r3
 800cace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cad6:	b29a      	uxth	r2, r3
 800cad8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cadc:	801a      	strh	r2, [r3, #0]
 800cade:	e04b      	b.n	800cb78 <USB_EPStartXfer+0x16e2>
 800cae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cae4:	085b      	lsrs	r3, r3, #1
 800cae6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800caea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800caee:	f003 0301 	and.w	r3, r3, #1
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d004      	beq.n	800cb00 <USB_EPStartXfer+0x166a>
 800caf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cafa:	3301      	adds	r3, #1
 800cafc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cb00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cb04:	881b      	ldrh	r3, [r3, #0]
 800cb06:	b29a      	uxth	r2, r3
 800cb08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cb0c:	b29b      	uxth	r3, r3
 800cb0e:	029b      	lsls	r3, r3, #10
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	4313      	orrs	r3, r2
 800cb14:	b29a      	uxth	r2, r3
 800cb16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cb1a:	801a      	strh	r2, [r3, #0]
 800cb1c:	e02c      	b.n	800cb78 <USB_EPStartXfer+0x16e2>
 800cb1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	785b      	ldrb	r3, [r3, #1]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d124      	bne.n	800cb78 <USB_EPStartXfer+0x16e2>
 800cb2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb3c:	b29b      	uxth	r3, r3
 800cb3e:	461a      	mov	r2, r3
 800cb40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cb44:	4413      	add	r3, r2
 800cb46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cb4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	00da      	lsls	r2, r3, #3
 800cb58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cb5c:	4413      	add	r3, r2
 800cb5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cb62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cb66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb6a:	b29a      	uxth	r2, r3
 800cb6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cb70:	801a      	strh	r2, [r3, #0]
 800cb72:	e001      	b.n	800cb78 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800cb74:	2301      	movs	r3, #1
 800cb76:	e03a      	b.n	800cbee <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cb78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb80:	681a      	ldr	r2, [r3, #0]
 800cb82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	4413      	add	r3, r2
 800cb92:	881b      	ldrh	r3, [r3, #0]
 800cb94:	b29b      	uxth	r3, r3
 800cb96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb9e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800cba2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cba6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cbaa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800cbae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cbb2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cbb6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800cbba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cbc2:	681a      	ldr	r2, [r3, #0]
 800cbc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	009b      	lsls	r3, r3, #2
 800cbd2:	441a      	add	r2, r3
 800cbd4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cbd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cbdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cbe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cbec:	2300      	movs	r3, #0
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b085      	sub	sp, #20
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	785b      	ldrb	r3, [r3, #1]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d020      	beq.n	800cc4c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800cc0a:	687a      	ldr	r2, [r7, #4]
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	009b      	lsls	r3, r3, #2
 800cc12:	4413      	add	r3, r2
 800cc14:	881b      	ldrh	r3, [r3, #0]
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc20:	81bb      	strh	r3, [r7, #12]
 800cc22:	89bb      	ldrh	r3, [r7, #12]
 800cc24:	f083 0310 	eor.w	r3, r3, #16
 800cc28:	81bb      	strh	r3, [r7, #12]
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	009b      	lsls	r3, r3, #2
 800cc32:	441a      	add	r2, r3
 800cc34:	89bb      	ldrh	r3, [r7, #12]
 800cc36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	8013      	strh	r3, [r2, #0]
 800cc4a:	e01f      	b.n	800cc8c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	009b      	lsls	r3, r3, #2
 800cc54:	4413      	add	r3, r2
 800cc56:	881b      	ldrh	r3, [r3, #0]
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc62:	81fb      	strh	r3, [r7, #14]
 800cc64:	89fb      	ldrh	r3, [r7, #14]
 800cc66:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cc6a:	81fb      	strh	r3, [r7, #14]
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	009b      	lsls	r3, r3, #2
 800cc74:	441a      	add	r2, r3
 800cc76:	89fb      	ldrh	r3, [r7, #14]
 800cc78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cc8c:	2300      	movs	r3, #0
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3714      	adds	r7, #20
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr

0800cc9a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cc9a:	b480      	push	{r7}
 800cc9c:	b087      	sub	sp, #28
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
 800cca2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	7b1b      	ldrb	r3, [r3, #12]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	f040 809d 	bne.w	800cde8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	785b      	ldrb	r3, [r3, #1]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d04c      	beq.n	800cd50 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	009b      	lsls	r3, r3, #2
 800ccbe:	4413      	add	r3, r2
 800ccc0:	881b      	ldrh	r3, [r3, #0]
 800ccc2:	823b      	strh	r3, [r7, #16]
 800ccc4:	8a3b      	ldrh	r3, [r7, #16]
 800ccc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d01b      	beq.n	800cd06 <USB_EPClearStall+0x6c>
 800ccce:	687a      	ldr	r2, [r7, #4]
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	009b      	lsls	r3, r3, #2
 800ccd6:	4413      	add	r3, r2
 800ccd8:	881b      	ldrh	r3, [r3, #0]
 800ccda:	b29b      	uxth	r3, r3
 800ccdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cce4:	81fb      	strh	r3, [r7, #14]
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	009b      	lsls	r3, r3, #2
 800ccee:	441a      	add	r2, r3
 800ccf0:	89fb      	ldrh	r3, [r7, #14]
 800ccf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ccf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ccfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ccfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	78db      	ldrb	r3, [r3, #3]
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d06c      	beq.n	800cde8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	009b      	lsls	r3, r3, #2
 800cd16:	4413      	add	r3, r2
 800cd18:	881b      	ldrh	r3, [r3, #0]
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd24:	81bb      	strh	r3, [r7, #12]
 800cd26:	89bb      	ldrh	r3, [r7, #12]
 800cd28:	f083 0320 	eor.w	r3, r3, #32
 800cd2c:	81bb      	strh	r3, [r7, #12]
 800cd2e:	687a      	ldr	r2, [r7, #4]
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	009b      	lsls	r3, r3, #2
 800cd36:	441a      	add	r2, r3
 800cd38:	89bb      	ldrh	r3, [r7, #12]
 800cd3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd4a:	b29b      	uxth	r3, r3
 800cd4c:	8013      	strh	r3, [r2, #0]
 800cd4e:	e04b      	b.n	800cde8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	4413      	add	r3, r2
 800cd5a:	881b      	ldrh	r3, [r3, #0]
 800cd5c:	82fb      	strh	r3, [r7, #22]
 800cd5e:	8afb      	ldrh	r3, [r7, #22]
 800cd60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d01b      	beq.n	800cda0 <USB_EPClearStall+0x106>
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	009b      	lsls	r3, r3, #2
 800cd70:	4413      	add	r3, r2
 800cd72:	881b      	ldrh	r3, [r3, #0]
 800cd74:	b29b      	uxth	r3, r3
 800cd76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd7e:	82bb      	strh	r3, [r7, #20]
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	009b      	lsls	r3, r3, #2
 800cd88:	441a      	add	r2, r3
 800cd8a:	8abb      	ldrh	r3, [r7, #20]
 800cd8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cd98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	4413      	add	r3, r2
 800cdaa:	881b      	ldrh	r3, [r3, #0]
 800cdac:	b29b      	uxth	r3, r3
 800cdae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cdb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdb6:	827b      	strh	r3, [r7, #18]
 800cdb8:	8a7b      	ldrh	r3, [r7, #18]
 800cdba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cdbe:	827b      	strh	r3, [r7, #18]
 800cdc0:	8a7b      	ldrh	r3, [r7, #18]
 800cdc2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cdc6:	827b      	strh	r3, [r7, #18]
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	441a      	add	r2, r3
 800cdd2:	8a7b      	ldrh	r3, [r7, #18]
 800cdd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cdd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cde0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800cde8:	2300      	movs	r3, #0
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	371c      	adds	r7, #28
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf4:	4770      	bx	lr

0800cdf6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800cdf6:	b480      	push	{r7}
 800cdf8:	b083      	sub	sp, #12
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	6078      	str	r0, [r7, #4]
 800cdfe:	460b      	mov	r3, r1
 800ce00:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ce02:	78fb      	ldrb	r3, [r7, #3]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d103      	bne.n	800ce10 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2280      	movs	r2, #128	; 0x80
 800ce0c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ce10:	2300      	movs	r3, #0
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	370c      	adds	r7, #12
 800ce16:	46bd      	mov	sp, r7
 800ce18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1c:	4770      	bx	lr

0800ce1e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ce1e:	b480      	push	{r7}
 800ce20:	b083      	sub	sp, #12
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce36:	b29a      	uxth	r2, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ce3e:	2300      	movs	r3, #0
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	370c      	adds	r7, #12
 800ce44:	46bd      	mov	sp, r7
 800ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4a:	4770      	bx	lr

0800ce4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b085      	sub	sp, #20
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ce5a:	b29b      	uxth	r3, r3
 800ce5c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3714      	adds	r7, #20
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr

0800ce6c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b08b      	sub	sp, #44	; 0x2c
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	60f8      	str	r0, [r7, #12]
 800ce74:	60b9      	str	r1, [r7, #8]
 800ce76:	4611      	mov	r1, r2
 800ce78:	461a      	mov	r2, r3
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	80fb      	strh	r3, [r7, #6]
 800ce7e:	4613      	mov	r3, r2
 800ce80:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ce82:	88bb      	ldrh	r3, [r7, #4]
 800ce84:	3301      	adds	r3, #1
 800ce86:	085b      	lsrs	r3, r3, #1
 800ce88:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ce92:	88fa      	ldrh	r2, [r7, #6]
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	4413      	add	r3, r2
 800ce98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce9c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ce9e:	69bb      	ldr	r3, [r7, #24]
 800cea0:	627b      	str	r3, [r7, #36]	; 0x24
 800cea2:	e01b      	b.n	800cedc <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ceaa:	69fb      	ldr	r3, [r7, #28]
 800ceac:	3301      	adds	r3, #1
 800ceae:	781b      	ldrb	r3, [r3, #0]
 800ceb0:	021b      	lsls	r3, r3, #8
 800ceb2:	b21a      	sxth	r2, r3
 800ceb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ceb8:	4313      	orrs	r3, r2
 800ceba:	b21b      	sxth	r3, r3
 800cebc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800cebe:	6a3b      	ldr	r3, [r7, #32]
 800cec0:	8a7a      	ldrh	r2, [r7, #18]
 800cec2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800cec4:	6a3b      	ldr	r3, [r7, #32]
 800cec6:	3302      	adds	r3, #2
 800cec8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	3301      	adds	r3, #1
 800cece:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ced0:	69fb      	ldr	r3, [r7, #28]
 800ced2:	3301      	adds	r3, #1
 800ced4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ced6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced8:	3b01      	subs	r3, #1
 800ceda:	627b      	str	r3, [r7, #36]	; 0x24
 800cedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d1e0      	bne.n	800cea4 <USB_WritePMA+0x38>
  }
}
 800cee2:	bf00      	nop
 800cee4:	bf00      	nop
 800cee6:	372c      	adds	r7, #44	; 0x2c
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr

0800cef0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b08b      	sub	sp, #44	; 0x2c
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	4611      	mov	r1, r2
 800cefc:	461a      	mov	r2, r3
 800cefe:	460b      	mov	r3, r1
 800cf00:	80fb      	strh	r3, [r7, #6]
 800cf02:	4613      	mov	r3, r2
 800cf04:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800cf06:	88bb      	ldrh	r3, [r7, #4]
 800cf08:	085b      	lsrs	r3, r3, #1
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cf16:	88fa      	ldrh	r2, [r7, #6]
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	4413      	add	r3, r2
 800cf1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf20:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cf22:	69bb      	ldr	r3, [r7, #24]
 800cf24:	627b      	str	r3, [r7, #36]	; 0x24
 800cf26:	e018      	b.n	800cf5a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800cf28:	6a3b      	ldr	r3, [r7, #32]
 800cf2a:	881b      	ldrh	r3, [r3, #0]
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800cf30:	6a3b      	ldr	r3, [r7, #32]
 800cf32:	3302      	adds	r3, #2
 800cf34:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	b2da      	uxtb	r2, r3
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cf3e:	69fb      	ldr	r3, [r7, #28]
 800cf40:	3301      	adds	r3, #1
 800cf42:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	0a1b      	lsrs	r3, r3, #8
 800cf48:	b2da      	uxtb	r2, r3
 800cf4a:	69fb      	ldr	r3, [r7, #28]
 800cf4c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cf4e:	69fb      	ldr	r3, [r7, #28]
 800cf50:	3301      	adds	r3, #1
 800cf52:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf56:	3b01      	subs	r3, #1
 800cf58:	627b      	str	r3, [r7, #36]	; 0x24
 800cf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d1e3      	bne.n	800cf28 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800cf60:	88bb      	ldrh	r3, [r7, #4]
 800cf62:	f003 0301 	and.w	r3, r3, #1
 800cf66:	b29b      	uxth	r3, r3
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d007      	beq.n	800cf7c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800cf6c:	6a3b      	ldr	r3, [r7, #32]
 800cf6e:	881b      	ldrh	r3, [r3, #0]
 800cf70:	b29b      	uxth	r3, r3
 800cf72:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	b2da      	uxtb	r2, r3
 800cf78:	69fb      	ldr	r3, [r7, #28]
 800cf7a:	701a      	strb	r2, [r3, #0]
  }
}
 800cf7c:	bf00      	nop
 800cf7e:	372c      	adds	r7, #44	; 0x2c
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr

0800cf88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b084      	sub	sp, #16
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	460b      	mov	r3, r1
 800cf92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cf94:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cf98:	f006 fa48 	bl	801342c <USBD_static_malloc>
 800cf9c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d109      	bne.n	800cfb8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	32b0      	adds	r2, #176	; 0xb0
 800cfae:	2100      	movs	r1, #0
 800cfb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cfb4:	2302      	movs	r3, #2
 800cfb6:	e0d4      	b.n	800d162 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cfb8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800cfbc:	2100      	movs	r1, #0
 800cfbe:	68f8      	ldr	r0, [r7, #12]
 800cfc0:	f006 fd8a 	bl	8013ad8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	32b0      	adds	r2, #176	; 0xb0
 800cfce:	68f9      	ldr	r1, [r7, #12]
 800cfd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	32b0      	adds	r2, #176	; 0xb0
 800cfde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	7c1b      	ldrb	r3, [r3, #16]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d138      	bne.n	800d062 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cff0:	4b5e      	ldr	r3, [pc, #376]	; (800d16c <USBD_CDC_Init+0x1e4>)
 800cff2:	7819      	ldrb	r1, [r3, #0]
 800cff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cff8:	2202      	movs	r2, #2
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f006 f8bb 	bl	8013176 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d000:	4b5a      	ldr	r3, [pc, #360]	; (800d16c <USBD_CDC_Init+0x1e4>)
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	f003 020f 	and.w	r2, r3, #15
 800d008:	6879      	ldr	r1, [r7, #4]
 800d00a:	4613      	mov	r3, r2
 800d00c:	009b      	lsls	r3, r3, #2
 800d00e:	4413      	add	r3, r2
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	440b      	add	r3, r1
 800d014:	3324      	adds	r3, #36	; 0x24
 800d016:	2201      	movs	r2, #1
 800d018:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d01a:	4b55      	ldr	r3, [pc, #340]	; (800d170 <USBD_CDC_Init+0x1e8>)
 800d01c:	7819      	ldrb	r1, [r3, #0]
 800d01e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d022:	2202      	movs	r2, #2
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f006 f8a6 	bl	8013176 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d02a:	4b51      	ldr	r3, [pc, #324]	; (800d170 <USBD_CDC_Init+0x1e8>)
 800d02c:	781b      	ldrb	r3, [r3, #0]
 800d02e:	f003 020f 	and.w	r2, r3, #15
 800d032:	6879      	ldr	r1, [r7, #4]
 800d034:	4613      	mov	r3, r2
 800d036:	009b      	lsls	r3, r3, #2
 800d038:	4413      	add	r3, r2
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	440b      	add	r3, r1
 800d03e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d042:	2201      	movs	r2, #1
 800d044:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d046:	4b4b      	ldr	r3, [pc, #300]	; (800d174 <USBD_CDC_Init+0x1ec>)
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	f003 020f 	and.w	r2, r3, #15
 800d04e:	6879      	ldr	r1, [r7, #4]
 800d050:	4613      	mov	r3, r2
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	4413      	add	r3, r2
 800d056:	009b      	lsls	r3, r3, #2
 800d058:	440b      	add	r3, r1
 800d05a:	3326      	adds	r3, #38	; 0x26
 800d05c:	2210      	movs	r2, #16
 800d05e:	801a      	strh	r2, [r3, #0]
 800d060:	e035      	b.n	800d0ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d062:	4b42      	ldr	r3, [pc, #264]	; (800d16c <USBD_CDC_Init+0x1e4>)
 800d064:	7819      	ldrb	r1, [r3, #0]
 800d066:	2340      	movs	r3, #64	; 0x40
 800d068:	2202      	movs	r2, #2
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f006 f883 	bl	8013176 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d070:	4b3e      	ldr	r3, [pc, #248]	; (800d16c <USBD_CDC_Init+0x1e4>)
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	f003 020f 	and.w	r2, r3, #15
 800d078:	6879      	ldr	r1, [r7, #4]
 800d07a:	4613      	mov	r3, r2
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	4413      	add	r3, r2
 800d080:	009b      	lsls	r3, r3, #2
 800d082:	440b      	add	r3, r1
 800d084:	3324      	adds	r3, #36	; 0x24
 800d086:	2201      	movs	r2, #1
 800d088:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d08a:	4b39      	ldr	r3, [pc, #228]	; (800d170 <USBD_CDC_Init+0x1e8>)
 800d08c:	7819      	ldrb	r1, [r3, #0]
 800d08e:	2340      	movs	r3, #64	; 0x40
 800d090:	2202      	movs	r2, #2
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f006 f86f 	bl	8013176 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d098:	4b35      	ldr	r3, [pc, #212]	; (800d170 <USBD_CDC_Init+0x1e8>)
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	f003 020f 	and.w	r2, r3, #15
 800d0a0:	6879      	ldr	r1, [r7, #4]
 800d0a2:	4613      	mov	r3, r2
 800d0a4:	009b      	lsls	r3, r3, #2
 800d0a6:	4413      	add	r3, r2
 800d0a8:	009b      	lsls	r3, r3, #2
 800d0aa:	440b      	add	r3, r1
 800d0ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d0b4:	4b2f      	ldr	r3, [pc, #188]	; (800d174 <USBD_CDC_Init+0x1ec>)
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	f003 020f 	and.w	r2, r3, #15
 800d0bc:	6879      	ldr	r1, [r7, #4]
 800d0be:	4613      	mov	r3, r2
 800d0c0:	009b      	lsls	r3, r3, #2
 800d0c2:	4413      	add	r3, r2
 800d0c4:	009b      	lsls	r3, r3, #2
 800d0c6:	440b      	add	r3, r1
 800d0c8:	3326      	adds	r3, #38	; 0x26
 800d0ca:	2210      	movs	r2, #16
 800d0cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d0ce:	4b29      	ldr	r3, [pc, #164]	; (800d174 <USBD_CDC_Init+0x1ec>)
 800d0d0:	7819      	ldrb	r1, [r3, #0]
 800d0d2:	2308      	movs	r3, #8
 800d0d4:	2203      	movs	r2, #3
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f006 f84d 	bl	8013176 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d0dc:	4b25      	ldr	r3, [pc, #148]	; (800d174 <USBD_CDC_Init+0x1ec>)
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	f003 020f 	and.w	r2, r3, #15
 800d0e4:	6879      	ldr	r1, [r7, #4]
 800d0e6:	4613      	mov	r3, r2
 800d0e8:	009b      	lsls	r3, r3, #2
 800d0ea:	4413      	add	r3, r2
 800d0ec:	009b      	lsls	r3, r3, #2
 800d0ee:	440b      	add	r3, r1
 800d0f0:	3324      	adds	r3, #36	; 0x24
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	33b0      	adds	r3, #176	; 0xb0
 800d108:	009b      	lsls	r3, r3, #2
 800d10a:	4413      	add	r3, r2
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2200      	movs	r2, #0
 800d116:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2200      	movs	r2, #0
 800d11e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d101      	bne.n	800d130 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d12c:	2302      	movs	r3, #2
 800d12e:	e018      	b.n	800d162 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	7c1b      	ldrb	r3, [r3, #16]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d10a      	bne.n	800d14e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d138:	4b0d      	ldr	r3, [pc, #52]	; (800d170 <USBD_CDC_Init+0x1e8>)
 800d13a:	7819      	ldrb	r1, [r3, #0]
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d142:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f006 f905 	bl	8013356 <USBD_LL_PrepareReceive>
 800d14c:	e008      	b.n	800d160 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d14e:	4b08      	ldr	r3, [pc, #32]	; (800d170 <USBD_CDC_Init+0x1e8>)
 800d150:	7819      	ldrb	r1, [r3, #0]
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d158:	2340      	movs	r3, #64	; 0x40
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f006 f8fb 	bl	8013356 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d160:	2300      	movs	r3, #0
}
 800d162:	4618      	mov	r0, r3
 800d164:	3710      	adds	r7, #16
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	2000009f 	.word	0x2000009f
 800d170:	200000a0 	.word	0x200000a0
 800d174:	200000a1 	.word	0x200000a1

0800d178 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	460b      	mov	r3, r1
 800d182:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d184:	4b3a      	ldr	r3, [pc, #232]	; (800d270 <USBD_CDC_DeInit+0xf8>)
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	4619      	mov	r1, r3
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f006 f819 	bl	80131c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d190:	4b37      	ldr	r3, [pc, #220]	; (800d270 <USBD_CDC_DeInit+0xf8>)
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	f003 020f 	and.w	r2, r3, #15
 800d198:	6879      	ldr	r1, [r7, #4]
 800d19a:	4613      	mov	r3, r2
 800d19c:	009b      	lsls	r3, r3, #2
 800d19e:	4413      	add	r3, r2
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	440b      	add	r3, r1
 800d1a4:	3324      	adds	r3, #36	; 0x24
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d1aa:	4b32      	ldr	r3, [pc, #200]	; (800d274 <USBD_CDC_DeInit+0xfc>)
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f006 f806 	bl	80131c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d1b6:	4b2f      	ldr	r3, [pc, #188]	; (800d274 <USBD_CDC_DeInit+0xfc>)
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	f003 020f 	and.w	r2, r3, #15
 800d1be:	6879      	ldr	r1, [r7, #4]
 800d1c0:	4613      	mov	r3, r2
 800d1c2:	009b      	lsls	r3, r3, #2
 800d1c4:	4413      	add	r3, r2
 800d1c6:	009b      	lsls	r3, r3, #2
 800d1c8:	440b      	add	r3, r1
 800d1ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d1d2:	4b29      	ldr	r3, [pc, #164]	; (800d278 <USBD_CDC_DeInit+0x100>)
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f005 fff2 	bl	80131c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d1de:	4b26      	ldr	r3, [pc, #152]	; (800d278 <USBD_CDC_DeInit+0x100>)
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	f003 020f 	and.w	r2, r3, #15
 800d1e6:	6879      	ldr	r1, [r7, #4]
 800d1e8:	4613      	mov	r3, r2
 800d1ea:	009b      	lsls	r3, r3, #2
 800d1ec:	4413      	add	r3, r2
 800d1ee:	009b      	lsls	r3, r3, #2
 800d1f0:	440b      	add	r3, r1
 800d1f2:	3324      	adds	r3, #36	; 0x24
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d1f8:	4b1f      	ldr	r3, [pc, #124]	; (800d278 <USBD_CDC_DeInit+0x100>)
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	f003 020f 	and.w	r2, r3, #15
 800d200:	6879      	ldr	r1, [r7, #4]
 800d202:	4613      	mov	r3, r2
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	4413      	add	r3, r2
 800d208:	009b      	lsls	r3, r3, #2
 800d20a:	440b      	add	r3, r1
 800d20c:	3326      	adds	r3, #38	; 0x26
 800d20e:	2200      	movs	r2, #0
 800d210:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	32b0      	adds	r2, #176	; 0xb0
 800d21c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d01f      	beq.n	800d264 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	33b0      	adds	r3, #176	; 0xb0
 800d22e:	009b      	lsls	r3, r3, #2
 800d230:	4413      	add	r3, r2
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	32b0      	adds	r2, #176	; 0xb0
 800d242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d246:	4618      	mov	r0, r3
 800d248:	f006 f8fe 	bl	8013448 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	32b0      	adds	r2, #176	; 0xb0
 800d256:	2100      	movs	r1, #0
 800d258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2200      	movs	r2, #0
 800d260:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d264:	2300      	movs	r3, #0
}
 800d266:	4618      	mov	r0, r3
 800d268:	3708      	adds	r7, #8
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	2000009f 	.word	0x2000009f
 800d274:	200000a0 	.word	0x200000a0
 800d278:	200000a1 	.word	0x200000a1

0800d27c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b086      	sub	sp, #24
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	32b0      	adds	r2, #176	; 0xb0
 800d290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d294:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d296:	2300      	movs	r3, #0
 800d298:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d29a:	2300      	movs	r3, #0
 800d29c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d101      	bne.n	800d2ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d2a8:	2303      	movs	r3, #3
 800d2aa:	e0bf      	b.n	800d42c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d050      	beq.n	800d35a <USBD_CDC_Setup+0xde>
 800d2b8:	2b20      	cmp	r3, #32
 800d2ba:	f040 80af 	bne.w	800d41c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	88db      	ldrh	r3, [r3, #6]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d03a      	beq.n	800d33c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	b25b      	sxtb	r3, r3
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	da1b      	bge.n	800d308 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d2d6:	687a      	ldr	r2, [r7, #4]
 800d2d8:	33b0      	adds	r3, #176	; 0xb0
 800d2da:	009b      	lsls	r3, r3, #2
 800d2dc:	4413      	add	r3, r2
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	689b      	ldr	r3, [r3, #8]
 800d2e2:	683a      	ldr	r2, [r7, #0]
 800d2e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d2e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d2e8:	683a      	ldr	r2, [r7, #0]
 800d2ea:	88d2      	ldrh	r2, [r2, #6]
 800d2ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	88db      	ldrh	r3, [r3, #6]
 800d2f2:	2b07      	cmp	r3, #7
 800d2f4:	bf28      	it	cs
 800d2f6:	2307      	movcs	r3, #7
 800d2f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	89fa      	ldrh	r2, [r7, #14]
 800d2fe:	4619      	mov	r1, r3
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f001 fce1 	bl	800ecc8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d306:	e090      	b.n	800d42a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	785a      	ldrb	r2, [r3, #1]
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	88db      	ldrh	r3, [r3, #6]
 800d316:	2b3f      	cmp	r3, #63	; 0x3f
 800d318:	d803      	bhi.n	800d322 <USBD_CDC_Setup+0xa6>
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	88db      	ldrh	r3, [r3, #6]
 800d31e:	b2da      	uxtb	r2, r3
 800d320:	e000      	b.n	800d324 <USBD_CDC_Setup+0xa8>
 800d322:	2240      	movs	r2, #64	; 0x40
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d32a:	6939      	ldr	r1, [r7, #16]
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d332:	461a      	mov	r2, r3
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f001 fcf3 	bl	800ed20 <USBD_CtlPrepareRx>
      break;
 800d33a:	e076      	b.n	800d42a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d342:	687a      	ldr	r2, [r7, #4]
 800d344:	33b0      	adds	r3, #176	; 0xb0
 800d346:	009b      	lsls	r3, r3, #2
 800d348:	4413      	add	r3, r2
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	689b      	ldr	r3, [r3, #8]
 800d34e:	683a      	ldr	r2, [r7, #0]
 800d350:	7850      	ldrb	r0, [r2, #1]
 800d352:	2200      	movs	r2, #0
 800d354:	6839      	ldr	r1, [r7, #0]
 800d356:	4798      	blx	r3
      break;
 800d358:	e067      	b.n	800d42a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	785b      	ldrb	r3, [r3, #1]
 800d35e:	2b0b      	cmp	r3, #11
 800d360:	d851      	bhi.n	800d406 <USBD_CDC_Setup+0x18a>
 800d362:	a201      	add	r2, pc, #4	; (adr r2, 800d368 <USBD_CDC_Setup+0xec>)
 800d364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d368:	0800d399 	.word	0x0800d399
 800d36c:	0800d415 	.word	0x0800d415
 800d370:	0800d407 	.word	0x0800d407
 800d374:	0800d407 	.word	0x0800d407
 800d378:	0800d407 	.word	0x0800d407
 800d37c:	0800d407 	.word	0x0800d407
 800d380:	0800d407 	.word	0x0800d407
 800d384:	0800d407 	.word	0x0800d407
 800d388:	0800d407 	.word	0x0800d407
 800d38c:	0800d407 	.word	0x0800d407
 800d390:	0800d3c3 	.word	0x0800d3c3
 800d394:	0800d3ed 	.word	0x0800d3ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	2b03      	cmp	r3, #3
 800d3a2:	d107      	bne.n	800d3b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d3a4:	f107 030a 	add.w	r3, r7, #10
 800d3a8:	2202      	movs	r2, #2
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f001 fc8b 	bl	800ecc8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d3b2:	e032      	b.n	800d41a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d3b4:	6839      	ldr	r1, [r7, #0]
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f001 fc15 	bl	800ebe6 <USBD_CtlError>
            ret = USBD_FAIL;
 800d3bc:	2303      	movs	r3, #3
 800d3be:	75fb      	strb	r3, [r7, #23]
          break;
 800d3c0:	e02b      	b.n	800d41a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	2b03      	cmp	r3, #3
 800d3cc:	d107      	bne.n	800d3de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d3ce:	f107 030d 	add.w	r3, r7, #13
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f001 fc76 	bl	800ecc8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d3dc:	e01d      	b.n	800d41a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d3de:	6839      	ldr	r1, [r7, #0]
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f001 fc00 	bl	800ebe6 <USBD_CtlError>
            ret = USBD_FAIL;
 800d3e6:	2303      	movs	r3, #3
 800d3e8:	75fb      	strb	r3, [r7, #23]
          break;
 800d3ea:	e016      	b.n	800d41a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	2b03      	cmp	r3, #3
 800d3f6:	d00f      	beq.n	800d418 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d3f8:	6839      	ldr	r1, [r7, #0]
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f001 fbf3 	bl	800ebe6 <USBD_CtlError>
            ret = USBD_FAIL;
 800d400:	2303      	movs	r3, #3
 800d402:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d404:	e008      	b.n	800d418 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d406:	6839      	ldr	r1, [r7, #0]
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f001 fbec 	bl	800ebe6 <USBD_CtlError>
          ret = USBD_FAIL;
 800d40e:	2303      	movs	r3, #3
 800d410:	75fb      	strb	r3, [r7, #23]
          break;
 800d412:	e002      	b.n	800d41a <USBD_CDC_Setup+0x19e>
          break;
 800d414:	bf00      	nop
 800d416:	e008      	b.n	800d42a <USBD_CDC_Setup+0x1ae>
          break;
 800d418:	bf00      	nop
      }
      break;
 800d41a:	e006      	b.n	800d42a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d41c:	6839      	ldr	r1, [r7, #0]
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f001 fbe1 	bl	800ebe6 <USBD_CtlError>
      ret = USBD_FAIL;
 800d424:	2303      	movs	r3, #3
 800d426:	75fb      	strb	r3, [r7, #23]
      break;
 800d428:	bf00      	nop
  }

  return (uint8_t)ret;
 800d42a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3718      	adds	r7, #24
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b084      	sub	sp, #16
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	460b      	mov	r3, r1
 800d43e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d446:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	32b0      	adds	r2, #176	; 0xb0
 800d452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d101      	bne.n	800d45e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d45a:	2303      	movs	r3, #3
 800d45c:	e065      	b.n	800d52a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	32b0      	adds	r2, #176	; 0xb0
 800d468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d46c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d46e:	78fb      	ldrb	r3, [r7, #3]
 800d470:	f003 020f 	and.w	r2, r3, #15
 800d474:	6879      	ldr	r1, [r7, #4]
 800d476:	4613      	mov	r3, r2
 800d478:	009b      	lsls	r3, r3, #2
 800d47a:	4413      	add	r3, r2
 800d47c:	009b      	lsls	r3, r3, #2
 800d47e:	440b      	add	r3, r1
 800d480:	3318      	adds	r3, #24
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d02f      	beq.n	800d4e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d488:	78fb      	ldrb	r3, [r7, #3]
 800d48a:	f003 020f 	and.w	r2, r3, #15
 800d48e:	6879      	ldr	r1, [r7, #4]
 800d490:	4613      	mov	r3, r2
 800d492:	009b      	lsls	r3, r3, #2
 800d494:	4413      	add	r3, r2
 800d496:	009b      	lsls	r3, r3, #2
 800d498:	440b      	add	r3, r1
 800d49a:	3318      	adds	r3, #24
 800d49c:	681a      	ldr	r2, [r3, #0]
 800d49e:	78fb      	ldrb	r3, [r7, #3]
 800d4a0:	f003 010f 	and.w	r1, r3, #15
 800d4a4:	68f8      	ldr	r0, [r7, #12]
 800d4a6:	460b      	mov	r3, r1
 800d4a8:	009b      	lsls	r3, r3, #2
 800d4aa:	440b      	add	r3, r1
 800d4ac:	00db      	lsls	r3, r3, #3
 800d4ae:	4403      	add	r3, r0
 800d4b0:	3338      	adds	r3, #56	; 0x38
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	fbb2 f1f3 	udiv	r1, r2, r3
 800d4b8:	fb01 f303 	mul.w	r3, r1, r3
 800d4bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d112      	bne.n	800d4e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d4c2:	78fb      	ldrb	r3, [r7, #3]
 800d4c4:	f003 020f 	and.w	r2, r3, #15
 800d4c8:	6879      	ldr	r1, [r7, #4]
 800d4ca:	4613      	mov	r3, r2
 800d4cc:	009b      	lsls	r3, r3, #2
 800d4ce:	4413      	add	r3, r2
 800d4d0:	009b      	lsls	r3, r3, #2
 800d4d2:	440b      	add	r3, r1
 800d4d4:	3318      	adds	r3, #24
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d4da:	78f9      	ldrb	r1, [r7, #3]
 800d4dc:	2300      	movs	r3, #0
 800d4de:	2200      	movs	r2, #0
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f005 ff17 	bl	8013314 <USBD_LL_Transmit>
 800d4e6:	e01f      	b.n	800d528 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	33b0      	adds	r3, #176	; 0xb0
 800d4fa:	009b      	lsls	r3, r3, #2
 800d4fc:	4413      	add	r3, r2
 800d4fe:	685b      	ldr	r3, [r3, #4]
 800d500:	691b      	ldr	r3, [r3, #16]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d010      	beq.n	800d528 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	33b0      	adds	r3, #176	; 0xb0
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	4413      	add	r3, r2
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	691b      	ldr	r3, [r3, #16]
 800d518:	68ba      	ldr	r2, [r7, #8]
 800d51a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d51e:	68ba      	ldr	r2, [r7, #8]
 800d520:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d524:	78fa      	ldrb	r2, [r7, #3]
 800d526:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d528:	2300      	movs	r3, #0
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3710      	adds	r7, #16
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}

0800d532 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d532:	b580      	push	{r7, lr}
 800d534:	b084      	sub	sp, #16
 800d536:	af00      	add	r7, sp, #0
 800d538:	6078      	str	r0, [r7, #4]
 800d53a:	460b      	mov	r3, r1
 800d53c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	32b0      	adds	r2, #176	; 0xb0
 800d548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d54c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	32b0      	adds	r2, #176	; 0xb0
 800d558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d101      	bne.n	800d564 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d560:	2303      	movs	r3, #3
 800d562:	e01a      	b.n	800d59a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d564:	78fb      	ldrb	r3, [r7, #3]
 800d566:	4619      	mov	r1, r3
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f005 ff15 	bl	8013398 <USBD_LL_GetRxDataSize>
 800d56e:	4602      	mov	r2, r0
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d57c:	687a      	ldr	r2, [r7, #4]
 800d57e:	33b0      	adds	r3, #176	; 0xb0
 800d580:	009b      	lsls	r3, r3, #2
 800d582:	4413      	add	r3, r2
 800d584:	685b      	ldr	r3, [r3, #4]
 800d586:	68db      	ldr	r3, [r3, #12]
 800d588:	68fa      	ldr	r2, [r7, #12]
 800d58a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d58e:	68fa      	ldr	r2, [r7, #12]
 800d590:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d594:	4611      	mov	r1, r2
 800d596:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d598:	2300      	movs	r3, #0
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3710      	adds	r7, #16
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}

0800d5a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d5a2:	b580      	push	{r7, lr}
 800d5a4:	b084      	sub	sp, #16
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	32b0      	adds	r2, #176	; 0xb0
 800d5b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d101      	bne.n	800d5c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d5c0:	2303      	movs	r3, #3
 800d5c2:	e025      	b.n	800d610 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d5ca:	687a      	ldr	r2, [r7, #4]
 800d5cc:	33b0      	adds	r3, #176	; 0xb0
 800d5ce:	009b      	lsls	r3, r3, #2
 800d5d0:	4413      	add	r3, r2
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d01a      	beq.n	800d60e <USBD_CDC_EP0_RxReady+0x6c>
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d5de:	2bff      	cmp	r3, #255	; 0xff
 800d5e0:	d015      	beq.n	800d60e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d5e8:	687a      	ldr	r2, [r7, #4]
 800d5ea:	33b0      	adds	r3, #176	; 0xb0
 800d5ec:	009b      	lsls	r3, r3, #2
 800d5ee:	4413      	add	r3, r2
 800d5f0:	685b      	ldr	r3, [r3, #4]
 800d5f2:	689b      	ldr	r3, [r3, #8]
 800d5f4:	68fa      	ldr	r2, [r7, #12]
 800d5f6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d5fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d5fc:	68fa      	ldr	r2, [r7, #12]
 800d5fe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d602:	b292      	uxth	r2, r2
 800d604:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	22ff      	movs	r2, #255	; 0xff
 800d60a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d60e:	2300      	movs	r3, #0
}
 800d610:	4618      	mov	r0, r3
 800d612:	3710      	adds	r7, #16
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b086      	sub	sp, #24
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d620:	2182      	movs	r1, #130	; 0x82
 800d622:	4818      	ldr	r0, [pc, #96]	; (800d684 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d624:	f000 fc7d 	bl	800df22 <USBD_GetEpDesc>
 800d628:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d62a:	2101      	movs	r1, #1
 800d62c:	4815      	ldr	r0, [pc, #84]	; (800d684 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d62e:	f000 fc78 	bl	800df22 <USBD_GetEpDesc>
 800d632:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d634:	2181      	movs	r1, #129	; 0x81
 800d636:	4813      	ldr	r0, [pc, #76]	; (800d684 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d638:	f000 fc73 	bl	800df22 <USBD_GetEpDesc>
 800d63c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d002      	beq.n	800d64a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	2210      	movs	r2, #16
 800d648:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d006      	beq.n	800d65e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	2200      	movs	r2, #0
 800d654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d658:	711a      	strb	r2, [r3, #4]
 800d65a:	2200      	movs	r2, #0
 800d65c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d006      	beq.n	800d672 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2200      	movs	r2, #0
 800d668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d66c:	711a      	strb	r2, [r3, #4]
 800d66e:	2200      	movs	r2, #0
 800d670:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2243      	movs	r2, #67	; 0x43
 800d676:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d678:	4b02      	ldr	r3, [pc, #8]	; (800d684 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3718      	adds	r7, #24
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	2000005c 	.word	0x2000005c

0800d688 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b086      	sub	sp, #24
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d690:	2182      	movs	r1, #130	; 0x82
 800d692:	4818      	ldr	r0, [pc, #96]	; (800d6f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d694:	f000 fc45 	bl	800df22 <USBD_GetEpDesc>
 800d698:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d69a:	2101      	movs	r1, #1
 800d69c:	4815      	ldr	r0, [pc, #84]	; (800d6f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d69e:	f000 fc40 	bl	800df22 <USBD_GetEpDesc>
 800d6a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d6a4:	2181      	movs	r1, #129	; 0x81
 800d6a6:	4813      	ldr	r0, [pc, #76]	; (800d6f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d6a8:	f000 fc3b 	bl	800df22 <USBD_GetEpDesc>
 800d6ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d002      	beq.n	800d6ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	2210      	movs	r2, #16
 800d6b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d006      	beq.n	800d6ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	711a      	strb	r2, [r3, #4]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	f042 0202 	orr.w	r2, r2, #2
 800d6cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d006      	beq.n	800d6e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	711a      	strb	r2, [r3, #4]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	f042 0202 	orr.w	r2, r2, #2
 800d6e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2243      	movs	r2, #67	; 0x43
 800d6e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d6e8:	4b02      	ldr	r3, [pc, #8]	; (800d6f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3718      	adds	r7, #24
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	2000005c 	.word	0x2000005c

0800d6f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b086      	sub	sp, #24
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d700:	2182      	movs	r1, #130	; 0x82
 800d702:	4818      	ldr	r0, [pc, #96]	; (800d764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d704:	f000 fc0d 	bl	800df22 <USBD_GetEpDesc>
 800d708:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d70a:	2101      	movs	r1, #1
 800d70c:	4815      	ldr	r0, [pc, #84]	; (800d764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d70e:	f000 fc08 	bl	800df22 <USBD_GetEpDesc>
 800d712:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d714:	2181      	movs	r1, #129	; 0x81
 800d716:	4813      	ldr	r0, [pc, #76]	; (800d764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d718:	f000 fc03 	bl	800df22 <USBD_GetEpDesc>
 800d71c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d002      	beq.n	800d72a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	2210      	movs	r2, #16
 800d728:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d006      	beq.n	800d73e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	2200      	movs	r2, #0
 800d734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d738:	711a      	strb	r2, [r3, #4]
 800d73a:	2200      	movs	r2, #0
 800d73c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d006      	beq.n	800d752 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2200      	movs	r2, #0
 800d748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d74c:	711a      	strb	r2, [r3, #4]
 800d74e:	2200      	movs	r2, #0
 800d750:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2243      	movs	r2, #67	; 0x43
 800d756:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d758:	4b02      	ldr	r3, [pc, #8]	; (800d764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3718      	adds	r7, #24
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	2000005c 	.word	0x2000005c

0800d768 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	220a      	movs	r2, #10
 800d774:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d776:	4b03      	ldr	r3, [pc, #12]	; (800d784 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d778:	4618      	mov	r0, r3
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr
 800d784:	20000018 	.word	0x20000018

0800d788 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d788:	b480      	push	{r7}
 800d78a:	b083      	sub	sp, #12
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d101      	bne.n	800d79c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d798:	2303      	movs	r3, #3
 800d79a:	e009      	b.n	800d7b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	33b0      	adds	r3, #176	; 0xb0
 800d7a6:	009b      	lsls	r3, r3, #2
 800d7a8:	4413      	add	r3, r2
 800d7aa:	683a      	ldr	r2, [r7, #0]
 800d7ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d7ae:	2300      	movs	r3, #0
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	370c      	adds	r7, #12
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr

0800d7bc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b087      	sub	sp, #28
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	60f8      	str	r0, [r7, #12]
 800d7c4:	60b9      	str	r1, [r7, #8]
 800d7c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	32b0      	adds	r2, #176	; 0xb0
 800d7d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7d6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d101      	bne.n	800d7e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d7de:	2303      	movs	r3, #3
 800d7e0:	e008      	b.n	800d7f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	68ba      	ldr	r2, [r7, #8]
 800d7e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	687a      	ldr	r2, [r7, #4]
 800d7ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d7f2:	2300      	movs	r3, #0
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	371c      	adds	r7, #28
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr

0800d800 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d800:	b480      	push	{r7}
 800d802:	b085      	sub	sp, #20
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	32b0      	adds	r2, #176	; 0xb0
 800d814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d818:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d101      	bne.n	800d824 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d820:	2303      	movs	r3, #3
 800d822:	e004      	b.n	800d82e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	683a      	ldr	r2, [r7, #0]
 800d828:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d82c:	2300      	movs	r3, #0
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3714      	adds	r7, #20
 800d832:	46bd      	mov	sp, r7
 800d834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d838:	4770      	bx	lr
	...

0800d83c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b084      	sub	sp, #16
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	32b0      	adds	r2, #176	; 0xb0
 800d84e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d852:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	32b0      	adds	r2, #176	; 0xb0
 800d85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d101      	bne.n	800d86a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d866:	2303      	movs	r3, #3
 800d868:	e018      	b.n	800d89c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	7c1b      	ldrb	r3, [r3, #16]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d10a      	bne.n	800d888 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d872:	4b0c      	ldr	r3, [pc, #48]	; (800d8a4 <USBD_CDC_ReceivePacket+0x68>)
 800d874:	7819      	ldrb	r1, [r3, #0]
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d87c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f005 fd68 	bl	8013356 <USBD_LL_PrepareReceive>
 800d886:	e008      	b.n	800d89a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d888:	4b06      	ldr	r3, [pc, #24]	; (800d8a4 <USBD_CDC_ReceivePacket+0x68>)
 800d88a:	7819      	ldrb	r1, [r3, #0]
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d892:	2340      	movs	r3, #64	; 0x40
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f005 fd5e 	bl	8013356 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d89a:	2300      	movs	r3, #0
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3710      	adds	r7, #16
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}
 800d8a4:	200000a0 	.word	0x200000a0

0800d8a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b086      	sub	sp, #24
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	60f8      	str	r0, [r7, #12]
 800d8b0:	60b9      	str	r1, [r7, #8]
 800d8b2:	4613      	mov	r3, r2
 800d8b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d101      	bne.n	800d8c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d8bc:	2303      	movs	r3, #3
 800d8be:	e01f      	b.n	800d900 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d003      	beq.n	800d8e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	68ba      	ldr	r2, [r7, #8]
 800d8e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	79fa      	ldrb	r2, [r7, #7]
 800d8f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d8f4:	68f8      	ldr	r0, [r7, #12]
 800d8f6:	f005 fbc1 	bl	801307c <USBD_LL_Init>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d8fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800d900:	4618      	mov	r0, r3
 800d902:	3718      	adds	r7, #24
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b084      	sub	sp, #16
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d912:	2300      	movs	r3, #0
 800d914:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d101      	bne.n	800d920 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d91c:	2303      	movs	r3, #3
 800d91e:	e025      	b.n	800d96c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	683a      	ldr	r2, [r7, #0]
 800d924:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	32ae      	adds	r2, #174	; 0xae
 800d932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d00f      	beq.n	800d95c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	32ae      	adds	r2, #174	; 0xae
 800d946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d94c:	f107 020e 	add.w	r2, r7, #14
 800d950:	4610      	mov	r0, r2
 800d952:	4798      	blx	r3
 800d954:	4602      	mov	r2, r0
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d962:	1c5a      	adds	r2, r3, #1
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d96a:	2300      	movs	r3, #0
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3710      	adds	r7, #16
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b082      	sub	sp, #8
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f005 fbdf 	bl	8013140 <USBD_LL_Start>
 800d982:	4603      	mov	r3, r0
}
 800d984:	4618      	mov	r0, r3
 800d986:	3708      	adds	r7, #8
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b083      	sub	sp, #12
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d994:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d996:	4618      	mov	r0, r3
 800d998:	370c      	adds	r7, #12
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr

0800d9a2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d9a2:	b580      	push	{r7, lr}
 800d9a4:	b084      	sub	sp, #16
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
 800d9aa:	460b      	mov	r3, r1
 800d9ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d009      	beq.n	800d9d0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	78fa      	ldrb	r2, [r7, #3]
 800d9c6:	4611      	mov	r1, r2
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	4798      	blx	r3
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d9d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3710      	adds	r7, #16
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}

0800d9da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d9da:	b580      	push	{r7, lr}
 800d9dc:	b084      	sub	sp, #16
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
 800d9e2:	460b      	mov	r3, r1
 800d9e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	78fa      	ldrb	r2, [r7, #3]
 800d9f4:	4611      	mov	r1, r2
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	4798      	blx	r3
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d001      	beq.n	800da04 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800da00:	2303      	movs	r3, #3
 800da02:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800da04:	7bfb      	ldrb	r3, [r7, #15]
}
 800da06:	4618      	mov	r0, r3
 800da08:	3710      	adds	r7, #16
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}

0800da0e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800da0e:	b580      	push	{r7, lr}
 800da10:	b084      	sub	sp, #16
 800da12:	af00      	add	r7, sp, #0
 800da14:	6078      	str	r0, [r7, #4]
 800da16:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800da1e:	6839      	ldr	r1, [r7, #0]
 800da20:	4618      	mov	r0, r3
 800da22:	f001 f8a6 	bl	800eb72 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2201      	movs	r2, #1
 800da2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800da34:	461a      	mov	r2, r3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800da42:	f003 031f 	and.w	r3, r3, #31
 800da46:	2b02      	cmp	r3, #2
 800da48:	d01a      	beq.n	800da80 <USBD_LL_SetupStage+0x72>
 800da4a:	2b02      	cmp	r3, #2
 800da4c:	d822      	bhi.n	800da94 <USBD_LL_SetupStage+0x86>
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d002      	beq.n	800da58 <USBD_LL_SetupStage+0x4a>
 800da52:	2b01      	cmp	r3, #1
 800da54:	d00a      	beq.n	800da6c <USBD_LL_SetupStage+0x5e>
 800da56:	e01d      	b.n	800da94 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800da5e:	4619      	mov	r1, r3
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f000 fad3 	bl	800e00c <USBD_StdDevReq>
 800da66:	4603      	mov	r3, r0
 800da68:	73fb      	strb	r3, [r7, #15]
      break;
 800da6a:	e020      	b.n	800daae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800da72:	4619      	mov	r1, r3
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f000 fb3b 	bl	800e0f0 <USBD_StdItfReq>
 800da7a:	4603      	mov	r3, r0
 800da7c:	73fb      	strb	r3, [r7, #15]
      break;
 800da7e:	e016      	b.n	800daae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800da86:	4619      	mov	r1, r3
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f000 fb9d 	bl	800e1c8 <USBD_StdEPReq>
 800da8e:	4603      	mov	r3, r0
 800da90:	73fb      	strb	r3, [r7, #15]
      break;
 800da92:	e00c      	b.n	800daae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800da9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800da9e:	b2db      	uxtb	r3, r3
 800daa0:	4619      	mov	r1, r3
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f005 fbac 	bl	8013200 <USBD_LL_StallEP>
 800daa8:	4603      	mov	r3, r0
 800daaa:	73fb      	strb	r3, [r7, #15]
      break;
 800daac:	bf00      	nop
  }

  return ret;
 800daae:	7bfb      	ldrb	r3, [r7, #15]
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3710      	adds	r7, #16
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b086      	sub	sp, #24
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	60f8      	str	r0, [r7, #12]
 800dac0:	460b      	mov	r3, r1
 800dac2:	607a      	str	r2, [r7, #4]
 800dac4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800dac6:	2300      	movs	r3, #0
 800dac8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800daca:	7afb      	ldrb	r3, [r7, #11]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d16e      	bne.n	800dbae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800dad6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dade:	2b03      	cmp	r3, #3
 800dae0:	f040 8098 	bne.w	800dc14 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	689a      	ldr	r2, [r3, #8]
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	68db      	ldr	r3, [r3, #12]
 800daec:	429a      	cmp	r2, r3
 800daee:	d913      	bls.n	800db18 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	689a      	ldr	r2, [r3, #8]
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	68db      	ldr	r3, [r3, #12]
 800daf8:	1ad2      	subs	r2, r2, r3
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	68da      	ldr	r2, [r3, #12]
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	689b      	ldr	r3, [r3, #8]
 800db06:	4293      	cmp	r3, r2
 800db08:	bf28      	it	cs
 800db0a:	4613      	movcs	r3, r2
 800db0c:	461a      	mov	r2, r3
 800db0e:	6879      	ldr	r1, [r7, #4]
 800db10:	68f8      	ldr	r0, [r7, #12]
 800db12:	f001 f922 	bl	800ed5a <USBD_CtlContinueRx>
 800db16:	e07d      	b.n	800dc14 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800db1e:	f003 031f 	and.w	r3, r3, #31
 800db22:	2b02      	cmp	r3, #2
 800db24:	d014      	beq.n	800db50 <USBD_LL_DataOutStage+0x98>
 800db26:	2b02      	cmp	r3, #2
 800db28:	d81d      	bhi.n	800db66 <USBD_LL_DataOutStage+0xae>
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d002      	beq.n	800db34 <USBD_LL_DataOutStage+0x7c>
 800db2e:	2b01      	cmp	r3, #1
 800db30:	d003      	beq.n	800db3a <USBD_LL_DataOutStage+0x82>
 800db32:	e018      	b.n	800db66 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800db34:	2300      	movs	r3, #0
 800db36:	75bb      	strb	r3, [r7, #22]
            break;
 800db38:	e018      	b.n	800db6c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800db40:	b2db      	uxtb	r3, r3
 800db42:	4619      	mov	r1, r3
 800db44:	68f8      	ldr	r0, [r7, #12]
 800db46:	f000 f9d2 	bl	800deee <USBD_CoreFindIF>
 800db4a:	4603      	mov	r3, r0
 800db4c:	75bb      	strb	r3, [r7, #22]
            break;
 800db4e:	e00d      	b.n	800db6c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800db56:	b2db      	uxtb	r3, r3
 800db58:	4619      	mov	r1, r3
 800db5a:	68f8      	ldr	r0, [r7, #12]
 800db5c:	f000 f9d4 	bl	800df08 <USBD_CoreFindEP>
 800db60:	4603      	mov	r3, r0
 800db62:	75bb      	strb	r3, [r7, #22]
            break;
 800db64:	e002      	b.n	800db6c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800db66:	2300      	movs	r3, #0
 800db68:	75bb      	strb	r3, [r7, #22]
            break;
 800db6a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800db6c:	7dbb      	ldrb	r3, [r7, #22]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d119      	bne.n	800dba6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	2b03      	cmp	r3, #3
 800db7c:	d113      	bne.n	800dba6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800db7e:	7dba      	ldrb	r2, [r7, #22]
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	32ae      	adds	r2, #174	; 0xae
 800db84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db88:	691b      	ldr	r3, [r3, #16]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d00b      	beq.n	800dba6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800db8e:	7dba      	ldrb	r2, [r7, #22]
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800db96:	7dba      	ldrb	r2, [r7, #22]
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	32ae      	adds	r2, #174	; 0xae
 800db9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dba0:	691b      	ldr	r3, [r3, #16]
 800dba2:	68f8      	ldr	r0, [r7, #12]
 800dba4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dba6:	68f8      	ldr	r0, [r7, #12]
 800dba8:	f001 f8e8 	bl	800ed7c <USBD_CtlSendStatus>
 800dbac:	e032      	b.n	800dc14 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800dbae:	7afb      	ldrb	r3, [r7, #11]
 800dbb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbb4:	b2db      	uxtb	r3, r3
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	68f8      	ldr	r0, [r7, #12]
 800dbba:	f000 f9a5 	bl	800df08 <USBD_CoreFindEP>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dbc2:	7dbb      	ldrb	r3, [r7, #22]
 800dbc4:	2bff      	cmp	r3, #255	; 0xff
 800dbc6:	d025      	beq.n	800dc14 <USBD_LL_DataOutStage+0x15c>
 800dbc8:	7dbb      	ldrb	r3, [r7, #22]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d122      	bne.n	800dc14 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbd4:	b2db      	uxtb	r3, r3
 800dbd6:	2b03      	cmp	r3, #3
 800dbd8:	d117      	bne.n	800dc0a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800dbda:	7dba      	ldrb	r2, [r7, #22]
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	32ae      	adds	r2, #174	; 0xae
 800dbe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbe4:	699b      	ldr	r3, [r3, #24]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d00f      	beq.n	800dc0a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800dbea:	7dba      	ldrb	r2, [r7, #22]
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800dbf2:	7dba      	ldrb	r2, [r7, #22]
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	32ae      	adds	r2, #174	; 0xae
 800dbf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbfc:	699b      	ldr	r3, [r3, #24]
 800dbfe:	7afa      	ldrb	r2, [r7, #11]
 800dc00:	4611      	mov	r1, r2
 800dc02:	68f8      	ldr	r0, [r7, #12]
 800dc04:	4798      	blx	r3
 800dc06:	4603      	mov	r3, r0
 800dc08:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800dc0a:	7dfb      	ldrb	r3, [r7, #23]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d001      	beq.n	800dc14 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800dc10:	7dfb      	ldrb	r3, [r7, #23]
 800dc12:	e000      	b.n	800dc16 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800dc14:	2300      	movs	r3, #0
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3718      	adds	r7, #24
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}

0800dc1e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dc1e:	b580      	push	{r7, lr}
 800dc20:	b086      	sub	sp, #24
 800dc22:	af00      	add	r7, sp, #0
 800dc24:	60f8      	str	r0, [r7, #12]
 800dc26:	460b      	mov	r3, r1
 800dc28:	607a      	str	r2, [r7, #4]
 800dc2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800dc2c:	7afb      	ldrb	r3, [r7, #11]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d16f      	bne.n	800dd12 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	3314      	adds	r3, #20
 800dc36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dc3e:	2b02      	cmp	r3, #2
 800dc40:	d15a      	bne.n	800dcf8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	689a      	ldr	r2, [r3, #8]
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d914      	bls.n	800dc78 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	689a      	ldr	r2, [r3, #8]
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	68db      	ldr	r3, [r3, #12]
 800dc56:	1ad2      	subs	r2, r2, r3
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	689b      	ldr	r3, [r3, #8]
 800dc60:	461a      	mov	r2, r3
 800dc62:	6879      	ldr	r1, [r7, #4]
 800dc64:	68f8      	ldr	r0, [r7, #12]
 800dc66:	f001 f84a 	bl	800ecfe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	2100      	movs	r1, #0
 800dc70:	68f8      	ldr	r0, [r7, #12]
 800dc72:	f005 fb70 	bl	8013356 <USBD_LL_PrepareReceive>
 800dc76:	e03f      	b.n	800dcf8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	68da      	ldr	r2, [r3, #12]
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	689b      	ldr	r3, [r3, #8]
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d11c      	bne.n	800dcbe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	685a      	ldr	r2, [r3, #4]
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	d316      	bcc.n	800dcbe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	685a      	ldr	r2, [r3, #4]
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d20f      	bcs.n	800dcbe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dc9e:	2200      	movs	r2, #0
 800dca0:	2100      	movs	r1, #0
 800dca2:	68f8      	ldr	r0, [r7, #12]
 800dca4:	f001 f82b 	bl	800ecfe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	2100      	movs	r1, #0
 800dcb6:	68f8      	ldr	r0, [r7, #12]
 800dcb8:	f005 fb4d 	bl	8013356 <USBD_LL_PrepareReceive>
 800dcbc:	e01c      	b.n	800dcf8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	2b03      	cmp	r3, #3
 800dcc8:	d10f      	bne.n	800dcea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcd0:	68db      	ldr	r3, [r3, #12]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d009      	beq.n	800dcea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dce4:	68db      	ldr	r3, [r3, #12]
 800dce6:	68f8      	ldr	r0, [r7, #12]
 800dce8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dcea:	2180      	movs	r1, #128	; 0x80
 800dcec:	68f8      	ldr	r0, [r7, #12]
 800dcee:	f005 fa87 	bl	8013200 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dcf2:	68f8      	ldr	r0, [r7, #12]
 800dcf4:	f001 f855 	bl	800eda2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d03a      	beq.n	800dd78 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800dd02:	68f8      	ldr	r0, [r7, #12]
 800dd04:	f7ff fe42 	bl	800d98c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800dd10:	e032      	b.n	800dd78 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800dd12:	7afb      	ldrb	r3, [r7, #11]
 800dd14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	68f8      	ldr	r0, [r7, #12]
 800dd1e:	f000 f8f3 	bl	800df08 <USBD_CoreFindEP>
 800dd22:	4603      	mov	r3, r0
 800dd24:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dd26:	7dfb      	ldrb	r3, [r7, #23]
 800dd28:	2bff      	cmp	r3, #255	; 0xff
 800dd2a:	d025      	beq.n	800dd78 <USBD_LL_DataInStage+0x15a>
 800dd2c:	7dfb      	ldrb	r3, [r7, #23]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d122      	bne.n	800dd78 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd38:	b2db      	uxtb	r3, r3
 800dd3a:	2b03      	cmp	r3, #3
 800dd3c:	d11c      	bne.n	800dd78 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800dd3e:	7dfa      	ldrb	r2, [r7, #23]
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	32ae      	adds	r2, #174	; 0xae
 800dd44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd48:	695b      	ldr	r3, [r3, #20]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d014      	beq.n	800dd78 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800dd4e:	7dfa      	ldrb	r2, [r7, #23]
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800dd56:	7dfa      	ldrb	r2, [r7, #23]
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	32ae      	adds	r2, #174	; 0xae
 800dd5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd60:	695b      	ldr	r3, [r3, #20]
 800dd62:	7afa      	ldrb	r2, [r7, #11]
 800dd64:	4611      	mov	r1, r2
 800dd66:	68f8      	ldr	r0, [r7, #12]
 800dd68:	4798      	blx	r3
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800dd6e:	7dbb      	ldrb	r3, [r7, #22]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d001      	beq.n	800dd78 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800dd74:	7dbb      	ldrb	r3, [r7, #22]
 800dd76:	e000      	b.n	800dd7a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800dd78:	2300      	movs	r3, #0
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3718      	adds	r7, #24
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}

0800dd82 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dd82:	b580      	push	{r7, lr}
 800dd84:	b084      	sub	sp, #16
 800dd86:	af00      	add	r7, sp, #0
 800dd88:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2201      	movs	r2, #1
 800dd92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2200      	movs	r2, #0
 800dda2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2200      	movs	r2, #0
 800dda8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2200      	movs	r2, #0
 800ddb0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d014      	beq.n	800dde8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddc4:	685b      	ldr	r3, [r3, #4]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d00e      	beq.n	800dde8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddd0:	685b      	ldr	r3, [r3, #4]
 800ddd2:	687a      	ldr	r2, [r7, #4]
 800ddd4:	6852      	ldr	r2, [r2, #4]
 800ddd6:	b2d2      	uxtb	r2, r2
 800ddd8:	4611      	mov	r1, r2
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	4798      	blx	r3
 800ddde:	4603      	mov	r3, r0
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d001      	beq.n	800dde8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dde4:	2303      	movs	r3, #3
 800dde6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dde8:	2340      	movs	r3, #64	; 0x40
 800ddea:	2200      	movs	r2, #0
 800ddec:	2100      	movs	r1, #0
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f005 f9c1 	bl	8013176 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2201      	movs	r2, #1
 800ddf8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2240      	movs	r2, #64	; 0x40
 800de00:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800de04:	2340      	movs	r3, #64	; 0x40
 800de06:	2200      	movs	r2, #0
 800de08:	2180      	movs	r1, #128	; 0x80
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f005 f9b3 	bl	8013176 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2201      	movs	r2, #1
 800de14:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2240      	movs	r2, #64	; 0x40
 800de1a:	621a      	str	r2, [r3, #32]

  return ret;
 800de1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3710      	adds	r7, #16
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800de26:	b480      	push	{r7}
 800de28:	b083      	sub	sp, #12
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
 800de2e:	460b      	mov	r3, r1
 800de30:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	78fa      	ldrb	r2, [r7, #3]
 800de36:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800de38:	2300      	movs	r3, #0
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	370c      	adds	r7, #12
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr

0800de46 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800de46:	b480      	push	{r7}
 800de48:	b083      	sub	sp, #12
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de54:	b2db      	uxtb	r3, r3
 800de56:	2b04      	cmp	r3, #4
 800de58:	d006      	beq.n	800de68 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de60:	b2da      	uxtb	r2, r3
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2204      	movs	r2, #4
 800de6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	370c      	adds	r7, #12
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr

0800de7e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800de7e:	b480      	push	{r7}
 800de80:	b083      	sub	sp, #12
 800de82:	af00      	add	r7, sp, #0
 800de84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de8c:	b2db      	uxtb	r3, r3
 800de8e:	2b04      	cmp	r3, #4
 800de90:	d106      	bne.n	800dea0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800de98:	b2da      	uxtb	r2, r3
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800dea0:	2300      	movs	r3, #0
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	370c      	adds	r7, #12
 800dea6:	46bd      	mov	sp, r7
 800dea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deac:	4770      	bx	lr

0800deae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800deae:	b580      	push	{r7, lr}
 800deb0:	b082      	sub	sp, #8
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800debc:	b2db      	uxtb	r3, r3
 800debe:	2b03      	cmp	r3, #3
 800dec0:	d110      	bne.n	800dee4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d00b      	beq.n	800dee4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ded2:	69db      	ldr	r3, [r3, #28]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d005      	beq.n	800dee4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dede:	69db      	ldr	r3, [r3, #28]
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dee4:	2300      	movs	r3, #0
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3708      	adds	r7, #8
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}

0800deee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800deee:	b480      	push	{r7}
 800def0:	b083      	sub	sp, #12
 800def2:	af00      	add	r7, sp, #0
 800def4:	6078      	str	r0, [r7, #4]
 800def6:	460b      	mov	r3, r1
 800def8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800defa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800defc:	4618      	mov	r0, r3
 800defe:	370c      	adds	r7, #12
 800df00:	46bd      	mov	sp, r7
 800df02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df06:	4770      	bx	lr

0800df08 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800df08:	b480      	push	{r7}
 800df0a:	b083      	sub	sp, #12
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
 800df10:	460b      	mov	r3, r1
 800df12:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800df14:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800df16:	4618      	mov	r0, r3
 800df18:	370c      	adds	r7, #12
 800df1a:	46bd      	mov	sp, r7
 800df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df20:	4770      	bx	lr

0800df22 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800df22:	b580      	push	{r7, lr}
 800df24:	b086      	sub	sp, #24
 800df26:	af00      	add	r7, sp, #0
 800df28:	6078      	str	r0, [r7, #4]
 800df2a:	460b      	mov	r3, r1
 800df2c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800df36:	2300      	movs	r3, #0
 800df38:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	885b      	ldrh	r3, [r3, #2]
 800df3e:	b29a      	uxth	r2, r3
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	b29b      	uxth	r3, r3
 800df46:	429a      	cmp	r2, r3
 800df48:	d920      	bls.n	800df8c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	b29b      	uxth	r3, r3
 800df50:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800df52:	e013      	b.n	800df7c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800df54:	f107 030a 	add.w	r3, r7, #10
 800df58:	4619      	mov	r1, r3
 800df5a:	6978      	ldr	r0, [r7, #20]
 800df5c:	f000 f81b 	bl	800df96 <USBD_GetNextDesc>
 800df60:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	785b      	ldrb	r3, [r3, #1]
 800df66:	2b05      	cmp	r3, #5
 800df68:	d108      	bne.n	800df7c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	789b      	ldrb	r3, [r3, #2]
 800df72:	78fa      	ldrb	r2, [r7, #3]
 800df74:	429a      	cmp	r2, r3
 800df76:	d008      	beq.n	800df8a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800df78:	2300      	movs	r3, #0
 800df7a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	885b      	ldrh	r3, [r3, #2]
 800df80:	b29a      	uxth	r2, r3
 800df82:	897b      	ldrh	r3, [r7, #10]
 800df84:	429a      	cmp	r2, r3
 800df86:	d8e5      	bhi.n	800df54 <USBD_GetEpDesc+0x32>
 800df88:	e000      	b.n	800df8c <USBD_GetEpDesc+0x6a>
          break;
 800df8a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800df8c:	693b      	ldr	r3, [r7, #16]
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3718      	adds	r7, #24
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}

0800df96 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800df96:	b480      	push	{r7}
 800df98:	b085      	sub	sp, #20
 800df9a:	af00      	add	r7, sp, #0
 800df9c:	6078      	str	r0, [r7, #4]
 800df9e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	881a      	ldrh	r2, [r3, #0]
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	4413      	add	r3, r2
 800dfb0:	b29a      	uxth	r2, r3
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	781b      	ldrb	r3, [r3, #0]
 800dfba:	461a      	mov	r2, r3
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	4413      	add	r3, r2
 800dfc0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dfc2:	68fb      	ldr	r3, [r7, #12]
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3714      	adds	r7, #20
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfce:	4770      	bx	lr

0800dfd0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b087      	sub	sp, #28
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	3301      	adds	r3, #1
 800dfe6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dfee:	8a3b      	ldrh	r3, [r7, #16]
 800dff0:	021b      	lsls	r3, r3, #8
 800dff2:	b21a      	sxth	r2, r3
 800dff4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dff8:	4313      	orrs	r3, r2
 800dffa:	b21b      	sxth	r3, r3
 800dffc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dffe:	89fb      	ldrh	r3, [r7, #14]
}
 800e000:	4618      	mov	r0, r3
 800e002:	371c      	adds	r7, #28
 800e004:	46bd      	mov	sp, r7
 800e006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00a:	4770      	bx	lr

0800e00c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b084      	sub	sp, #16
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e016:	2300      	movs	r3, #0
 800e018:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e022:	2b40      	cmp	r3, #64	; 0x40
 800e024:	d005      	beq.n	800e032 <USBD_StdDevReq+0x26>
 800e026:	2b40      	cmp	r3, #64	; 0x40
 800e028:	d857      	bhi.n	800e0da <USBD_StdDevReq+0xce>
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d00f      	beq.n	800e04e <USBD_StdDevReq+0x42>
 800e02e:	2b20      	cmp	r3, #32
 800e030:	d153      	bne.n	800e0da <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	32ae      	adds	r2, #174	; 0xae
 800e03c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e040:	689b      	ldr	r3, [r3, #8]
 800e042:	6839      	ldr	r1, [r7, #0]
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	4798      	blx	r3
 800e048:	4603      	mov	r3, r0
 800e04a:	73fb      	strb	r3, [r7, #15]
      break;
 800e04c:	e04a      	b.n	800e0e4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	785b      	ldrb	r3, [r3, #1]
 800e052:	2b09      	cmp	r3, #9
 800e054:	d83b      	bhi.n	800e0ce <USBD_StdDevReq+0xc2>
 800e056:	a201      	add	r2, pc, #4	; (adr r2, 800e05c <USBD_StdDevReq+0x50>)
 800e058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e05c:	0800e0b1 	.word	0x0800e0b1
 800e060:	0800e0c5 	.word	0x0800e0c5
 800e064:	0800e0cf 	.word	0x0800e0cf
 800e068:	0800e0bb 	.word	0x0800e0bb
 800e06c:	0800e0cf 	.word	0x0800e0cf
 800e070:	0800e08f 	.word	0x0800e08f
 800e074:	0800e085 	.word	0x0800e085
 800e078:	0800e0cf 	.word	0x0800e0cf
 800e07c:	0800e0a7 	.word	0x0800e0a7
 800e080:	0800e099 	.word	0x0800e099
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e084:	6839      	ldr	r1, [r7, #0]
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f000 fa3c 	bl	800e504 <USBD_GetDescriptor>
          break;
 800e08c:	e024      	b.n	800e0d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e08e:	6839      	ldr	r1, [r7, #0]
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f000 fbcb 	bl	800e82c <USBD_SetAddress>
          break;
 800e096:	e01f      	b.n	800e0d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e098:	6839      	ldr	r1, [r7, #0]
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f000 fc0a 	bl	800e8b4 <USBD_SetConfig>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	73fb      	strb	r3, [r7, #15]
          break;
 800e0a4:	e018      	b.n	800e0d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e0a6:	6839      	ldr	r1, [r7, #0]
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f000 fcad 	bl	800ea08 <USBD_GetConfig>
          break;
 800e0ae:	e013      	b.n	800e0d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e0b0:	6839      	ldr	r1, [r7, #0]
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f000 fcde 	bl	800ea74 <USBD_GetStatus>
          break;
 800e0b8:	e00e      	b.n	800e0d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e0ba:	6839      	ldr	r1, [r7, #0]
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f000 fd0d 	bl	800eadc <USBD_SetFeature>
          break;
 800e0c2:	e009      	b.n	800e0d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e0c4:	6839      	ldr	r1, [r7, #0]
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f000 fd31 	bl	800eb2e <USBD_ClrFeature>
          break;
 800e0cc:	e004      	b.n	800e0d8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e0ce:	6839      	ldr	r1, [r7, #0]
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f000 fd88 	bl	800ebe6 <USBD_CtlError>
          break;
 800e0d6:	bf00      	nop
      }
      break;
 800e0d8:	e004      	b.n	800e0e4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e0da:	6839      	ldr	r1, [r7, #0]
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f000 fd82 	bl	800ebe6 <USBD_CtlError>
      break;
 800e0e2:	bf00      	nop
  }

  return ret;
 800e0e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3710      	adds	r7, #16
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop

0800e0f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b084      	sub	sp, #16
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	781b      	ldrb	r3, [r3, #0]
 800e102:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e106:	2b40      	cmp	r3, #64	; 0x40
 800e108:	d005      	beq.n	800e116 <USBD_StdItfReq+0x26>
 800e10a:	2b40      	cmp	r3, #64	; 0x40
 800e10c:	d852      	bhi.n	800e1b4 <USBD_StdItfReq+0xc4>
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d001      	beq.n	800e116 <USBD_StdItfReq+0x26>
 800e112:	2b20      	cmp	r3, #32
 800e114:	d14e      	bne.n	800e1b4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e11c:	b2db      	uxtb	r3, r3
 800e11e:	3b01      	subs	r3, #1
 800e120:	2b02      	cmp	r3, #2
 800e122:	d840      	bhi.n	800e1a6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	889b      	ldrh	r3, [r3, #4]
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	2b01      	cmp	r3, #1
 800e12c:	d836      	bhi.n	800e19c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	889b      	ldrh	r3, [r3, #4]
 800e132:	b2db      	uxtb	r3, r3
 800e134:	4619      	mov	r1, r3
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f7ff fed9 	bl	800deee <USBD_CoreFindIF>
 800e13c:	4603      	mov	r3, r0
 800e13e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e140:	7bbb      	ldrb	r3, [r7, #14]
 800e142:	2bff      	cmp	r3, #255	; 0xff
 800e144:	d01d      	beq.n	800e182 <USBD_StdItfReq+0x92>
 800e146:	7bbb      	ldrb	r3, [r7, #14]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d11a      	bne.n	800e182 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e14c:	7bba      	ldrb	r2, [r7, #14]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	32ae      	adds	r2, #174	; 0xae
 800e152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e156:	689b      	ldr	r3, [r3, #8]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d00f      	beq.n	800e17c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e15c:	7bba      	ldrb	r2, [r7, #14]
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e164:	7bba      	ldrb	r2, [r7, #14]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	32ae      	adds	r2, #174	; 0xae
 800e16a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e16e:	689b      	ldr	r3, [r3, #8]
 800e170:	6839      	ldr	r1, [r7, #0]
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	4798      	blx	r3
 800e176:	4603      	mov	r3, r0
 800e178:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e17a:	e004      	b.n	800e186 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e17c:	2303      	movs	r3, #3
 800e17e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e180:	e001      	b.n	800e186 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e182:	2303      	movs	r3, #3
 800e184:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	88db      	ldrh	r3, [r3, #6]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d110      	bne.n	800e1b0 <USBD_StdItfReq+0xc0>
 800e18e:	7bfb      	ldrb	r3, [r7, #15]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d10d      	bne.n	800e1b0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f000 fdf1 	bl	800ed7c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e19a:	e009      	b.n	800e1b0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e19c:	6839      	ldr	r1, [r7, #0]
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f000 fd21 	bl	800ebe6 <USBD_CtlError>
          break;
 800e1a4:	e004      	b.n	800e1b0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e1a6:	6839      	ldr	r1, [r7, #0]
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f000 fd1c 	bl	800ebe6 <USBD_CtlError>
          break;
 800e1ae:	e000      	b.n	800e1b2 <USBD_StdItfReq+0xc2>
          break;
 800e1b0:	bf00      	nop
      }
      break;
 800e1b2:	e004      	b.n	800e1be <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e1b4:	6839      	ldr	r1, [r7, #0]
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f000 fd15 	bl	800ebe6 <USBD_CtlError>
      break;
 800e1bc:	bf00      	nop
  }

  return ret;
 800e1be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3710      	adds	r7, #16
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b084      	sub	sp, #16
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	889b      	ldrh	r3, [r3, #4]
 800e1da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e1e4:	2b40      	cmp	r3, #64	; 0x40
 800e1e6:	d007      	beq.n	800e1f8 <USBD_StdEPReq+0x30>
 800e1e8:	2b40      	cmp	r3, #64	; 0x40
 800e1ea:	f200 817f 	bhi.w	800e4ec <USBD_StdEPReq+0x324>
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d02a      	beq.n	800e248 <USBD_StdEPReq+0x80>
 800e1f2:	2b20      	cmp	r3, #32
 800e1f4:	f040 817a 	bne.w	800e4ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e1f8:	7bbb      	ldrb	r3, [r7, #14]
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f7ff fe83 	bl	800df08 <USBD_CoreFindEP>
 800e202:	4603      	mov	r3, r0
 800e204:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e206:	7b7b      	ldrb	r3, [r7, #13]
 800e208:	2bff      	cmp	r3, #255	; 0xff
 800e20a:	f000 8174 	beq.w	800e4f6 <USBD_StdEPReq+0x32e>
 800e20e:	7b7b      	ldrb	r3, [r7, #13]
 800e210:	2b00      	cmp	r3, #0
 800e212:	f040 8170 	bne.w	800e4f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e216:	7b7a      	ldrb	r2, [r7, #13]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e21e:	7b7a      	ldrb	r2, [r7, #13]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	32ae      	adds	r2, #174	; 0xae
 800e224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e228:	689b      	ldr	r3, [r3, #8]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	f000 8163 	beq.w	800e4f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e230:	7b7a      	ldrb	r2, [r7, #13]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	32ae      	adds	r2, #174	; 0xae
 800e236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e23a:	689b      	ldr	r3, [r3, #8]
 800e23c:	6839      	ldr	r1, [r7, #0]
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	4798      	blx	r3
 800e242:	4603      	mov	r3, r0
 800e244:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e246:	e156      	b.n	800e4f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	785b      	ldrb	r3, [r3, #1]
 800e24c:	2b03      	cmp	r3, #3
 800e24e:	d008      	beq.n	800e262 <USBD_StdEPReq+0x9a>
 800e250:	2b03      	cmp	r3, #3
 800e252:	f300 8145 	bgt.w	800e4e0 <USBD_StdEPReq+0x318>
 800e256:	2b00      	cmp	r3, #0
 800e258:	f000 809b 	beq.w	800e392 <USBD_StdEPReq+0x1ca>
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	d03c      	beq.n	800e2da <USBD_StdEPReq+0x112>
 800e260:	e13e      	b.n	800e4e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	2b02      	cmp	r3, #2
 800e26c:	d002      	beq.n	800e274 <USBD_StdEPReq+0xac>
 800e26e:	2b03      	cmp	r3, #3
 800e270:	d016      	beq.n	800e2a0 <USBD_StdEPReq+0xd8>
 800e272:	e02c      	b.n	800e2ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e274:	7bbb      	ldrb	r3, [r7, #14]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d00d      	beq.n	800e296 <USBD_StdEPReq+0xce>
 800e27a:	7bbb      	ldrb	r3, [r7, #14]
 800e27c:	2b80      	cmp	r3, #128	; 0x80
 800e27e:	d00a      	beq.n	800e296 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e280:	7bbb      	ldrb	r3, [r7, #14]
 800e282:	4619      	mov	r1, r3
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f004 ffbb 	bl	8013200 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e28a:	2180      	movs	r1, #128	; 0x80
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f004 ffb7 	bl	8013200 <USBD_LL_StallEP>
 800e292:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e294:	e020      	b.n	800e2d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e296:	6839      	ldr	r1, [r7, #0]
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f000 fca4 	bl	800ebe6 <USBD_CtlError>
              break;
 800e29e:	e01b      	b.n	800e2d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	885b      	ldrh	r3, [r3, #2]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d10e      	bne.n	800e2c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e2a8:	7bbb      	ldrb	r3, [r7, #14]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d00b      	beq.n	800e2c6 <USBD_StdEPReq+0xfe>
 800e2ae:	7bbb      	ldrb	r3, [r7, #14]
 800e2b0:	2b80      	cmp	r3, #128	; 0x80
 800e2b2:	d008      	beq.n	800e2c6 <USBD_StdEPReq+0xfe>
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	88db      	ldrh	r3, [r3, #6]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d104      	bne.n	800e2c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e2bc:	7bbb      	ldrb	r3, [r7, #14]
 800e2be:	4619      	mov	r1, r3
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f004 ff9d 	bl	8013200 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f000 fd58 	bl	800ed7c <USBD_CtlSendStatus>

              break;
 800e2cc:	e004      	b.n	800e2d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e2ce:	6839      	ldr	r1, [r7, #0]
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f000 fc88 	bl	800ebe6 <USBD_CtlError>
              break;
 800e2d6:	bf00      	nop
          }
          break;
 800e2d8:	e107      	b.n	800e4ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2e0:	b2db      	uxtb	r3, r3
 800e2e2:	2b02      	cmp	r3, #2
 800e2e4:	d002      	beq.n	800e2ec <USBD_StdEPReq+0x124>
 800e2e6:	2b03      	cmp	r3, #3
 800e2e8:	d016      	beq.n	800e318 <USBD_StdEPReq+0x150>
 800e2ea:	e04b      	b.n	800e384 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e2ec:	7bbb      	ldrb	r3, [r7, #14]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d00d      	beq.n	800e30e <USBD_StdEPReq+0x146>
 800e2f2:	7bbb      	ldrb	r3, [r7, #14]
 800e2f4:	2b80      	cmp	r3, #128	; 0x80
 800e2f6:	d00a      	beq.n	800e30e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e2f8:	7bbb      	ldrb	r3, [r7, #14]
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f004 ff7f 	bl	8013200 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e302:	2180      	movs	r1, #128	; 0x80
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f004 ff7b 	bl	8013200 <USBD_LL_StallEP>
 800e30a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e30c:	e040      	b.n	800e390 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e30e:	6839      	ldr	r1, [r7, #0]
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f000 fc68 	bl	800ebe6 <USBD_CtlError>
              break;
 800e316:	e03b      	b.n	800e390 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	885b      	ldrh	r3, [r3, #2]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d136      	bne.n	800e38e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e320:	7bbb      	ldrb	r3, [r7, #14]
 800e322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e326:	2b00      	cmp	r3, #0
 800e328:	d004      	beq.n	800e334 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e32a:	7bbb      	ldrb	r3, [r7, #14]
 800e32c:	4619      	mov	r1, r3
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f004 ff85 	bl	801323e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f000 fd21 	bl	800ed7c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e33a:	7bbb      	ldrb	r3, [r7, #14]
 800e33c:	4619      	mov	r1, r3
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f7ff fde2 	bl	800df08 <USBD_CoreFindEP>
 800e344:	4603      	mov	r3, r0
 800e346:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e348:	7b7b      	ldrb	r3, [r7, #13]
 800e34a:	2bff      	cmp	r3, #255	; 0xff
 800e34c:	d01f      	beq.n	800e38e <USBD_StdEPReq+0x1c6>
 800e34e:	7b7b      	ldrb	r3, [r7, #13]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d11c      	bne.n	800e38e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e354:	7b7a      	ldrb	r2, [r7, #13]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e35c:	7b7a      	ldrb	r2, [r7, #13]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	32ae      	adds	r2, #174	; 0xae
 800e362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e366:	689b      	ldr	r3, [r3, #8]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d010      	beq.n	800e38e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e36c:	7b7a      	ldrb	r2, [r7, #13]
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	32ae      	adds	r2, #174	; 0xae
 800e372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e376:	689b      	ldr	r3, [r3, #8]
 800e378:	6839      	ldr	r1, [r7, #0]
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	4798      	blx	r3
 800e37e:	4603      	mov	r3, r0
 800e380:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e382:	e004      	b.n	800e38e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e384:	6839      	ldr	r1, [r7, #0]
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f000 fc2d 	bl	800ebe6 <USBD_CtlError>
              break;
 800e38c:	e000      	b.n	800e390 <USBD_StdEPReq+0x1c8>
              break;
 800e38e:	bf00      	nop
          }
          break;
 800e390:	e0ab      	b.n	800e4ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	2b02      	cmp	r3, #2
 800e39c:	d002      	beq.n	800e3a4 <USBD_StdEPReq+0x1dc>
 800e39e:	2b03      	cmp	r3, #3
 800e3a0:	d032      	beq.n	800e408 <USBD_StdEPReq+0x240>
 800e3a2:	e097      	b.n	800e4d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e3a4:	7bbb      	ldrb	r3, [r7, #14]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d007      	beq.n	800e3ba <USBD_StdEPReq+0x1f2>
 800e3aa:	7bbb      	ldrb	r3, [r7, #14]
 800e3ac:	2b80      	cmp	r3, #128	; 0x80
 800e3ae:	d004      	beq.n	800e3ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e3b0:	6839      	ldr	r1, [r7, #0]
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f000 fc17 	bl	800ebe6 <USBD_CtlError>
                break;
 800e3b8:	e091      	b.n	800e4de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e3ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	da0b      	bge.n	800e3da <USBD_StdEPReq+0x212>
 800e3c2:	7bbb      	ldrb	r3, [r7, #14]
 800e3c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e3c8:	4613      	mov	r3, r2
 800e3ca:	009b      	lsls	r3, r3, #2
 800e3cc:	4413      	add	r3, r2
 800e3ce:	009b      	lsls	r3, r3, #2
 800e3d0:	3310      	adds	r3, #16
 800e3d2:	687a      	ldr	r2, [r7, #4]
 800e3d4:	4413      	add	r3, r2
 800e3d6:	3304      	adds	r3, #4
 800e3d8:	e00b      	b.n	800e3f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e3da:	7bbb      	ldrb	r3, [r7, #14]
 800e3dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e3e0:	4613      	mov	r3, r2
 800e3e2:	009b      	lsls	r3, r3, #2
 800e3e4:	4413      	add	r3, r2
 800e3e6:	009b      	lsls	r3, r3, #2
 800e3e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e3ec:	687a      	ldr	r2, [r7, #4]
 800e3ee:	4413      	add	r3, r2
 800e3f0:	3304      	adds	r3, #4
 800e3f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	2202      	movs	r2, #2
 800e3fe:	4619      	mov	r1, r3
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f000 fc61 	bl	800ecc8 <USBD_CtlSendData>
              break;
 800e406:	e06a      	b.n	800e4de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e408:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	da11      	bge.n	800e434 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e410:	7bbb      	ldrb	r3, [r7, #14]
 800e412:	f003 020f 	and.w	r2, r3, #15
 800e416:	6879      	ldr	r1, [r7, #4]
 800e418:	4613      	mov	r3, r2
 800e41a:	009b      	lsls	r3, r3, #2
 800e41c:	4413      	add	r3, r2
 800e41e:	009b      	lsls	r3, r3, #2
 800e420:	440b      	add	r3, r1
 800e422:	3324      	adds	r3, #36	; 0x24
 800e424:	881b      	ldrh	r3, [r3, #0]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d117      	bne.n	800e45a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e42a:	6839      	ldr	r1, [r7, #0]
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f000 fbda 	bl	800ebe6 <USBD_CtlError>
                  break;
 800e432:	e054      	b.n	800e4de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e434:	7bbb      	ldrb	r3, [r7, #14]
 800e436:	f003 020f 	and.w	r2, r3, #15
 800e43a:	6879      	ldr	r1, [r7, #4]
 800e43c:	4613      	mov	r3, r2
 800e43e:	009b      	lsls	r3, r3, #2
 800e440:	4413      	add	r3, r2
 800e442:	009b      	lsls	r3, r3, #2
 800e444:	440b      	add	r3, r1
 800e446:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e44a:	881b      	ldrh	r3, [r3, #0]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d104      	bne.n	800e45a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e450:	6839      	ldr	r1, [r7, #0]
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f000 fbc7 	bl	800ebe6 <USBD_CtlError>
                  break;
 800e458:	e041      	b.n	800e4de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e45a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	da0b      	bge.n	800e47a <USBD_StdEPReq+0x2b2>
 800e462:	7bbb      	ldrb	r3, [r7, #14]
 800e464:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e468:	4613      	mov	r3, r2
 800e46a:	009b      	lsls	r3, r3, #2
 800e46c:	4413      	add	r3, r2
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	3310      	adds	r3, #16
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	4413      	add	r3, r2
 800e476:	3304      	adds	r3, #4
 800e478:	e00b      	b.n	800e492 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e47a:	7bbb      	ldrb	r3, [r7, #14]
 800e47c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e480:	4613      	mov	r3, r2
 800e482:	009b      	lsls	r3, r3, #2
 800e484:	4413      	add	r3, r2
 800e486:	009b      	lsls	r3, r3, #2
 800e488:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e48c:	687a      	ldr	r2, [r7, #4]
 800e48e:	4413      	add	r3, r2
 800e490:	3304      	adds	r3, #4
 800e492:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e494:	7bbb      	ldrb	r3, [r7, #14]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d002      	beq.n	800e4a0 <USBD_StdEPReq+0x2d8>
 800e49a:	7bbb      	ldrb	r3, [r7, #14]
 800e49c:	2b80      	cmp	r3, #128	; 0x80
 800e49e:	d103      	bne.n	800e4a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	601a      	str	r2, [r3, #0]
 800e4a6:	e00e      	b.n	800e4c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e4a8:	7bbb      	ldrb	r3, [r7, #14]
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f004 fee5 	bl	801327c <USBD_LL_IsStallEP>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d003      	beq.n	800e4c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	601a      	str	r2, [r3, #0]
 800e4be:	e002      	b.n	800e4c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	2202      	movs	r2, #2
 800e4ca:	4619      	mov	r1, r3
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f000 fbfb 	bl	800ecc8 <USBD_CtlSendData>
              break;
 800e4d2:	e004      	b.n	800e4de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e4d4:	6839      	ldr	r1, [r7, #0]
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f000 fb85 	bl	800ebe6 <USBD_CtlError>
              break;
 800e4dc:	bf00      	nop
          }
          break;
 800e4de:	e004      	b.n	800e4ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e4e0:	6839      	ldr	r1, [r7, #0]
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f000 fb7f 	bl	800ebe6 <USBD_CtlError>
          break;
 800e4e8:	bf00      	nop
      }
      break;
 800e4ea:	e005      	b.n	800e4f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e4ec:	6839      	ldr	r1, [r7, #0]
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f000 fb79 	bl	800ebe6 <USBD_CtlError>
      break;
 800e4f4:	e000      	b.n	800e4f8 <USBD_StdEPReq+0x330>
      break;
 800e4f6:	bf00      	nop
  }

  return ret;
 800e4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3710      	adds	r7, #16
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
	...

0800e504 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b084      	sub	sp, #16
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e50e:	2300      	movs	r3, #0
 800e510:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e512:	2300      	movs	r3, #0
 800e514:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e516:	2300      	movs	r3, #0
 800e518:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	885b      	ldrh	r3, [r3, #2]
 800e51e:	0a1b      	lsrs	r3, r3, #8
 800e520:	b29b      	uxth	r3, r3
 800e522:	3b01      	subs	r3, #1
 800e524:	2b0e      	cmp	r3, #14
 800e526:	f200 8152 	bhi.w	800e7ce <USBD_GetDescriptor+0x2ca>
 800e52a:	a201      	add	r2, pc, #4	; (adr r2, 800e530 <USBD_GetDescriptor+0x2c>)
 800e52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e530:	0800e5a1 	.word	0x0800e5a1
 800e534:	0800e5b9 	.word	0x0800e5b9
 800e538:	0800e5f9 	.word	0x0800e5f9
 800e53c:	0800e7cf 	.word	0x0800e7cf
 800e540:	0800e7cf 	.word	0x0800e7cf
 800e544:	0800e76f 	.word	0x0800e76f
 800e548:	0800e79b 	.word	0x0800e79b
 800e54c:	0800e7cf 	.word	0x0800e7cf
 800e550:	0800e7cf 	.word	0x0800e7cf
 800e554:	0800e7cf 	.word	0x0800e7cf
 800e558:	0800e7cf 	.word	0x0800e7cf
 800e55c:	0800e7cf 	.word	0x0800e7cf
 800e560:	0800e7cf 	.word	0x0800e7cf
 800e564:	0800e7cf 	.word	0x0800e7cf
 800e568:	0800e56d 	.word	0x0800e56d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e572:	69db      	ldr	r3, [r3, #28]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d00b      	beq.n	800e590 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e57e:	69db      	ldr	r3, [r3, #28]
 800e580:	687a      	ldr	r2, [r7, #4]
 800e582:	7c12      	ldrb	r2, [r2, #16]
 800e584:	f107 0108 	add.w	r1, r7, #8
 800e588:	4610      	mov	r0, r2
 800e58a:	4798      	blx	r3
 800e58c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e58e:	e126      	b.n	800e7de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e590:	6839      	ldr	r1, [r7, #0]
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f000 fb27 	bl	800ebe6 <USBD_CtlError>
        err++;
 800e598:	7afb      	ldrb	r3, [r7, #11]
 800e59a:	3301      	adds	r3, #1
 800e59c:	72fb      	strb	r3, [r7, #11]
      break;
 800e59e:	e11e      	b.n	800e7de <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	687a      	ldr	r2, [r7, #4]
 800e5aa:	7c12      	ldrb	r2, [r2, #16]
 800e5ac:	f107 0108 	add.w	r1, r7, #8
 800e5b0:	4610      	mov	r0, r2
 800e5b2:	4798      	blx	r3
 800e5b4:	60f8      	str	r0, [r7, #12]
      break;
 800e5b6:	e112      	b.n	800e7de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	7c1b      	ldrb	r3, [r3, #16]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d10d      	bne.n	800e5dc <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5c8:	f107 0208 	add.w	r2, r7, #8
 800e5cc:	4610      	mov	r0, r2
 800e5ce:	4798      	blx	r3
 800e5d0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	2202      	movs	r2, #2
 800e5d8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e5da:	e100      	b.n	800e7de <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5e4:	f107 0208 	add.w	r2, r7, #8
 800e5e8:	4610      	mov	r0, r2
 800e5ea:	4798      	blx	r3
 800e5ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	2202      	movs	r2, #2
 800e5f4:	701a      	strb	r2, [r3, #0]
      break;
 800e5f6:	e0f2      	b.n	800e7de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	885b      	ldrh	r3, [r3, #2]
 800e5fc:	b2db      	uxtb	r3, r3
 800e5fe:	2b05      	cmp	r3, #5
 800e600:	f200 80ac 	bhi.w	800e75c <USBD_GetDescriptor+0x258>
 800e604:	a201      	add	r2, pc, #4	; (adr r2, 800e60c <USBD_GetDescriptor+0x108>)
 800e606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e60a:	bf00      	nop
 800e60c:	0800e625 	.word	0x0800e625
 800e610:	0800e659 	.word	0x0800e659
 800e614:	0800e68d 	.word	0x0800e68d
 800e618:	0800e6c1 	.word	0x0800e6c1
 800e61c:	0800e6f5 	.word	0x0800e6f5
 800e620:	0800e729 	.word	0x0800e729
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d00b      	beq.n	800e648 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	687a      	ldr	r2, [r7, #4]
 800e63a:	7c12      	ldrb	r2, [r2, #16]
 800e63c:	f107 0108 	add.w	r1, r7, #8
 800e640:	4610      	mov	r0, r2
 800e642:	4798      	blx	r3
 800e644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e646:	e091      	b.n	800e76c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e648:	6839      	ldr	r1, [r7, #0]
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f000 facb 	bl	800ebe6 <USBD_CtlError>
            err++;
 800e650:	7afb      	ldrb	r3, [r7, #11]
 800e652:	3301      	adds	r3, #1
 800e654:	72fb      	strb	r3, [r7, #11]
          break;
 800e656:	e089      	b.n	800e76c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e65e:	689b      	ldr	r3, [r3, #8]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d00b      	beq.n	800e67c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e66a:	689b      	ldr	r3, [r3, #8]
 800e66c:	687a      	ldr	r2, [r7, #4]
 800e66e:	7c12      	ldrb	r2, [r2, #16]
 800e670:	f107 0108 	add.w	r1, r7, #8
 800e674:	4610      	mov	r0, r2
 800e676:	4798      	blx	r3
 800e678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e67a:	e077      	b.n	800e76c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e67c:	6839      	ldr	r1, [r7, #0]
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 fab1 	bl	800ebe6 <USBD_CtlError>
            err++;
 800e684:	7afb      	ldrb	r3, [r7, #11]
 800e686:	3301      	adds	r3, #1
 800e688:	72fb      	strb	r3, [r7, #11]
          break;
 800e68a:	e06f      	b.n	800e76c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e692:	68db      	ldr	r3, [r3, #12]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d00b      	beq.n	800e6b0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e69e:	68db      	ldr	r3, [r3, #12]
 800e6a0:	687a      	ldr	r2, [r7, #4]
 800e6a2:	7c12      	ldrb	r2, [r2, #16]
 800e6a4:	f107 0108 	add.w	r1, r7, #8
 800e6a8:	4610      	mov	r0, r2
 800e6aa:	4798      	blx	r3
 800e6ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6ae:	e05d      	b.n	800e76c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e6b0:	6839      	ldr	r1, [r7, #0]
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f000 fa97 	bl	800ebe6 <USBD_CtlError>
            err++;
 800e6b8:	7afb      	ldrb	r3, [r7, #11]
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	72fb      	strb	r3, [r7, #11]
          break;
 800e6be:	e055      	b.n	800e76c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6c6:	691b      	ldr	r3, [r3, #16]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d00b      	beq.n	800e6e4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6d2:	691b      	ldr	r3, [r3, #16]
 800e6d4:	687a      	ldr	r2, [r7, #4]
 800e6d6:	7c12      	ldrb	r2, [r2, #16]
 800e6d8:	f107 0108 	add.w	r1, r7, #8
 800e6dc:	4610      	mov	r0, r2
 800e6de:	4798      	blx	r3
 800e6e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6e2:	e043      	b.n	800e76c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e6e4:	6839      	ldr	r1, [r7, #0]
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f000 fa7d 	bl	800ebe6 <USBD_CtlError>
            err++;
 800e6ec:	7afb      	ldrb	r3, [r7, #11]
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	72fb      	strb	r3, [r7, #11]
          break;
 800e6f2:	e03b      	b.n	800e76c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6fa:	695b      	ldr	r3, [r3, #20]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d00b      	beq.n	800e718 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e706:	695b      	ldr	r3, [r3, #20]
 800e708:	687a      	ldr	r2, [r7, #4]
 800e70a:	7c12      	ldrb	r2, [r2, #16]
 800e70c:	f107 0108 	add.w	r1, r7, #8
 800e710:	4610      	mov	r0, r2
 800e712:	4798      	blx	r3
 800e714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e716:	e029      	b.n	800e76c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e718:	6839      	ldr	r1, [r7, #0]
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f000 fa63 	bl	800ebe6 <USBD_CtlError>
            err++;
 800e720:	7afb      	ldrb	r3, [r7, #11]
 800e722:	3301      	adds	r3, #1
 800e724:	72fb      	strb	r3, [r7, #11]
          break;
 800e726:	e021      	b.n	800e76c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e72e:	699b      	ldr	r3, [r3, #24]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d00b      	beq.n	800e74c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e73a:	699b      	ldr	r3, [r3, #24]
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	7c12      	ldrb	r2, [r2, #16]
 800e740:	f107 0108 	add.w	r1, r7, #8
 800e744:	4610      	mov	r0, r2
 800e746:	4798      	blx	r3
 800e748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e74a:	e00f      	b.n	800e76c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e74c:	6839      	ldr	r1, [r7, #0]
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f000 fa49 	bl	800ebe6 <USBD_CtlError>
            err++;
 800e754:	7afb      	ldrb	r3, [r7, #11]
 800e756:	3301      	adds	r3, #1
 800e758:	72fb      	strb	r3, [r7, #11]
          break;
 800e75a:	e007      	b.n	800e76c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e75c:	6839      	ldr	r1, [r7, #0]
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f000 fa41 	bl	800ebe6 <USBD_CtlError>
          err++;
 800e764:	7afb      	ldrb	r3, [r7, #11]
 800e766:	3301      	adds	r3, #1
 800e768:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e76a:	bf00      	nop
      }
      break;
 800e76c:	e037      	b.n	800e7de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	7c1b      	ldrb	r3, [r3, #16]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d109      	bne.n	800e78a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e77c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e77e:	f107 0208 	add.w	r2, r7, #8
 800e782:	4610      	mov	r0, r2
 800e784:	4798      	blx	r3
 800e786:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e788:	e029      	b.n	800e7de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e78a:	6839      	ldr	r1, [r7, #0]
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f000 fa2a 	bl	800ebe6 <USBD_CtlError>
        err++;
 800e792:	7afb      	ldrb	r3, [r7, #11]
 800e794:	3301      	adds	r3, #1
 800e796:	72fb      	strb	r3, [r7, #11]
      break;
 800e798:	e021      	b.n	800e7de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	7c1b      	ldrb	r3, [r3, #16]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d10d      	bne.n	800e7be <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7aa:	f107 0208 	add.w	r2, r7, #8
 800e7ae:	4610      	mov	r0, r2
 800e7b0:	4798      	blx	r3
 800e7b2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	3301      	adds	r3, #1
 800e7b8:	2207      	movs	r2, #7
 800e7ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e7bc:	e00f      	b.n	800e7de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e7be:	6839      	ldr	r1, [r7, #0]
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f000 fa10 	bl	800ebe6 <USBD_CtlError>
        err++;
 800e7c6:	7afb      	ldrb	r3, [r7, #11]
 800e7c8:	3301      	adds	r3, #1
 800e7ca:	72fb      	strb	r3, [r7, #11]
      break;
 800e7cc:	e007      	b.n	800e7de <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e7ce:	6839      	ldr	r1, [r7, #0]
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f000 fa08 	bl	800ebe6 <USBD_CtlError>
      err++;
 800e7d6:	7afb      	ldrb	r3, [r7, #11]
 800e7d8:	3301      	adds	r3, #1
 800e7da:	72fb      	strb	r3, [r7, #11]
      break;
 800e7dc:	bf00      	nop
  }

  if (err != 0U)
 800e7de:	7afb      	ldrb	r3, [r7, #11]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d11e      	bne.n	800e822 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	88db      	ldrh	r3, [r3, #6]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d016      	beq.n	800e81a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e7ec:	893b      	ldrh	r3, [r7, #8]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d00e      	beq.n	800e810 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	88da      	ldrh	r2, [r3, #6]
 800e7f6:	893b      	ldrh	r3, [r7, #8]
 800e7f8:	4293      	cmp	r3, r2
 800e7fa:	bf28      	it	cs
 800e7fc:	4613      	movcs	r3, r2
 800e7fe:	b29b      	uxth	r3, r3
 800e800:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e802:	893b      	ldrh	r3, [r7, #8]
 800e804:	461a      	mov	r2, r3
 800e806:	68f9      	ldr	r1, [r7, #12]
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f000 fa5d 	bl	800ecc8 <USBD_CtlSendData>
 800e80e:	e009      	b.n	800e824 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e810:	6839      	ldr	r1, [r7, #0]
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	f000 f9e7 	bl	800ebe6 <USBD_CtlError>
 800e818:	e004      	b.n	800e824 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f000 faae 	bl	800ed7c <USBD_CtlSendStatus>
 800e820:	e000      	b.n	800e824 <USBD_GetDescriptor+0x320>
    return;
 800e822:	bf00      	nop
  }
}
 800e824:	3710      	adds	r7, #16
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	bf00      	nop

0800e82c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b084      	sub	sp, #16
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	889b      	ldrh	r3, [r3, #4]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d131      	bne.n	800e8a2 <USBD_SetAddress+0x76>
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	88db      	ldrh	r3, [r3, #6]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d12d      	bne.n	800e8a2 <USBD_SetAddress+0x76>
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	885b      	ldrh	r3, [r3, #2]
 800e84a:	2b7f      	cmp	r3, #127	; 0x7f
 800e84c:	d829      	bhi.n	800e8a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	885b      	ldrh	r3, [r3, #2]
 800e852:	b2db      	uxtb	r3, r3
 800e854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e858:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e860:	b2db      	uxtb	r3, r3
 800e862:	2b03      	cmp	r3, #3
 800e864:	d104      	bne.n	800e870 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e866:	6839      	ldr	r1, [r7, #0]
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f000 f9bc 	bl	800ebe6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e86e:	e01d      	b.n	800e8ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	7bfa      	ldrb	r2, [r7, #15]
 800e874:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e878:	7bfb      	ldrb	r3, [r7, #15]
 800e87a:	4619      	mov	r1, r3
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f004 fd2a 	bl	80132d6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f000 fa7a 	bl	800ed7c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e888:	7bfb      	ldrb	r3, [r7, #15]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d004      	beq.n	800e898 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2202      	movs	r2, #2
 800e892:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e896:	e009      	b.n	800e8ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2201      	movs	r2, #1
 800e89c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8a0:	e004      	b.n	800e8ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e8a2:	6839      	ldr	r1, [r7, #0]
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f000 f99e 	bl	800ebe6 <USBD_CtlError>
  }
}
 800e8aa:	bf00      	nop
 800e8ac:	bf00      	nop
 800e8ae:	3710      	adds	r7, #16
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}

0800e8b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b084      	sub	sp, #16
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	885b      	ldrh	r3, [r3, #2]
 800e8c6:	b2da      	uxtb	r2, r3
 800e8c8:	4b4e      	ldr	r3, [pc, #312]	; (800ea04 <USBD_SetConfig+0x150>)
 800e8ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e8cc:	4b4d      	ldr	r3, [pc, #308]	; (800ea04 <USBD_SetConfig+0x150>)
 800e8ce:	781b      	ldrb	r3, [r3, #0]
 800e8d0:	2b01      	cmp	r3, #1
 800e8d2:	d905      	bls.n	800e8e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e8d4:	6839      	ldr	r1, [r7, #0]
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f000 f985 	bl	800ebe6 <USBD_CtlError>
    return USBD_FAIL;
 800e8dc:	2303      	movs	r3, #3
 800e8de:	e08c      	b.n	800e9fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8e6:	b2db      	uxtb	r3, r3
 800e8e8:	2b02      	cmp	r3, #2
 800e8ea:	d002      	beq.n	800e8f2 <USBD_SetConfig+0x3e>
 800e8ec:	2b03      	cmp	r3, #3
 800e8ee:	d029      	beq.n	800e944 <USBD_SetConfig+0x90>
 800e8f0:	e075      	b.n	800e9de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e8f2:	4b44      	ldr	r3, [pc, #272]	; (800ea04 <USBD_SetConfig+0x150>)
 800e8f4:	781b      	ldrb	r3, [r3, #0]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d020      	beq.n	800e93c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e8fa:	4b42      	ldr	r3, [pc, #264]	; (800ea04 <USBD_SetConfig+0x150>)
 800e8fc:	781b      	ldrb	r3, [r3, #0]
 800e8fe:	461a      	mov	r2, r3
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e904:	4b3f      	ldr	r3, [pc, #252]	; (800ea04 <USBD_SetConfig+0x150>)
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	4619      	mov	r1, r3
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f7ff f849 	bl	800d9a2 <USBD_SetClassConfig>
 800e910:	4603      	mov	r3, r0
 800e912:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e914:	7bfb      	ldrb	r3, [r7, #15]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d008      	beq.n	800e92c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e91a:	6839      	ldr	r1, [r7, #0]
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f000 f962 	bl	800ebe6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2202      	movs	r2, #2
 800e926:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e92a:	e065      	b.n	800e9f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f000 fa25 	bl	800ed7c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2203      	movs	r2, #3
 800e936:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e93a:	e05d      	b.n	800e9f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f000 fa1d 	bl	800ed7c <USBD_CtlSendStatus>
      break;
 800e942:	e059      	b.n	800e9f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e944:	4b2f      	ldr	r3, [pc, #188]	; (800ea04 <USBD_SetConfig+0x150>)
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d112      	bne.n	800e972 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2202      	movs	r2, #2
 800e950:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e954:	4b2b      	ldr	r3, [pc, #172]	; (800ea04 <USBD_SetConfig+0x150>)
 800e956:	781b      	ldrb	r3, [r3, #0]
 800e958:	461a      	mov	r2, r3
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e95e:	4b29      	ldr	r3, [pc, #164]	; (800ea04 <USBD_SetConfig+0x150>)
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	4619      	mov	r1, r3
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f7ff f838 	bl	800d9da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f000 fa06 	bl	800ed7c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e970:	e042      	b.n	800e9f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e972:	4b24      	ldr	r3, [pc, #144]	; (800ea04 <USBD_SetConfig+0x150>)
 800e974:	781b      	ldrb	r3, [r3, #0]
 800e976:	461a      	mov	r2, r3
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	685b      	ldr	r3, [r3, #4]
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d02a      	beq.n	800e9d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	685b      	ldr	r3, [r3, #4]
 800e984:	b2db      	uxtb	r3, r3
 800e986:	4619      	mov	r1, r3
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f7ff f826 	bl	800d9da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e98e:	4b1d      	ldr	r3, [pc, #116]	; (800ea04 <USBD_SetConfig+0x150>)
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	461a      	mov	r2, r3
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e998:	4b1a      	ldr	r3, [pc, #104]	; (800ea04 <USBD_SetConfig+0x150>)
 800e99a:	781b      	ldrb	r3, [r3, #0]
 800e99c:	4619      	mov	r1, r3
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f7fe ffff 	bl	800d9a2 <USBD_SetClassConfig>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e9a8:	7bfb      	ldrb	r3, [r7, #15]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d00f      	beq.n	800e9ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e9ae:	6839      	ldr	r1, [r7, #0]
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f000 f918 	bl	800ebe6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	685b      	ldr	r3, [r3, #4]
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	4619      	mov	r1, r3
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f7ff f80b 	bl	800d9da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2202      	movs	r2, #2
 800e9c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e9cc:	e014      	b.n	800e9f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f000 f9d4 	bl	800ed7c <USBD_CtlSendStatus>
      break;
 800e9d4:	e010      	b.n	800e9f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f000 f9d0 	bl	800ed7c <USBD_CtlSendStatus>
      break;
 800e9dc:	e00c      	b.n	800e9f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e9de:	6839      	ldr	r1, [r7, #0]
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f000 f900 	bl	800ebe6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e9e6:	4b07      	ldr	r3, [pc, #28]	; (800ea04 <USBD_SetConfig+0x150>)
 800e9e8:	781b      	ldrb	r3, [r3, #0]
 800e9ea:	4619      	mov	r1, r3
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	f7fe fff4 	bl	800d9da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e9f2:	2303      	movs	r3, #3
 800e9f4:	73fb      	strb	r3, [r7, #15]
      break;
 800e9f6:	bf00      	nop
  }

  return ret;
 800e9f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3710      	adds	r7, #16
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	20000890 	.word	0x20000890

0800ea08 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b082      	sub	sp, #8
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	88db      	ldrh	r3, [r3, #6]
 800ea16:	2b01      	cmp	r3, #1
 800ea18:	d004      	beq.n	800ea24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ea1a:	6839      	ldr	r1, [r7, #0]
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	f000 f8e2 	bl	800ebe6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ea22:	e023      	b.n	800ea6c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea2a:	b2db      	uxtb	r3, r3
 800ea2c:	2b02      	cmp	r3, #2
 800ea2e:	dc02      	bgt.n	800ea36 <USBD_GetConfig+0x2e>
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	dc03      	bgt.n	800ea3c <USBD_GetConfig+0x34>
 800ea34:	e015      	b.n	800ea62 <USBD_GetConfig+0x5a>
 800ea36:	2b03      	cmp	r3, #3
 800ea38:	d00b      	beq.n	800ea52 <USBD_GetConfig+0x4a>
 800ea3a:	e012      	b.n	800ea62 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2200      	movs	r2, #0
 800ea40:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	3308      	adds	r3, #8
 800ea46:	2201      	movs	r2, #1
 800ea48:	4619      	mov	r1, r3
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f000 f93c 	bl	800ecc8 <USBD_CtlSendData>
        break;
 800ea50:	e00c      	b.n	800ea6c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	3304      	adds	r3, #4
 800ea56:	2201      	movs	r2, #1
 800ea58:	4619      	mov	r1, r3
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f000 f934 	bl	800ecc8 <USBD_CtlSendData>
        break;
 800ea60:	e004      	b.n	800ea6c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ea62:	6839      	ldr	r1, [r7, #0]
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f000 f8be 	bl	800ebe6 <USBD_CtlError>
        break;
 800ea6a:	bf00      	nop
}
 800ea6c:	bf00      	nop
 800ea6e:	3708      	adds	r7, #8
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b082      	sub	sp, #8
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea84:	b2db      	uxtb	r3, r3
 800ea86:	3b01      	subs	r3, #1
 800ea88:	2b02      	cmp	r3, #2
 800ea8a:	d81e      	bhi.n	800eaca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	88db      	ldrh	r3, [r3, #6]
 800ea90:	2b02      	cmp	r3, #2
 800ea92:	d004      	beq.n	800ea9e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ea94:	6839      	ldr	r1, [r7, #0]
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	f000 f8a5 	bl	800ebe6 <USBD_CtlError>
        break;
 800ea9c:	e01a      	b.n	800ead4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2201      	movs	r2, #1
 800eaa2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d005      	beq.n	800eaba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	68db      	ldr	r3, [r3, #12]
 800eab2:	f043 0202 	orr.w	r2, r3, #2
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	330c      	adds	r3, #12
 800eabe:	2202      	movs	r2, #2
 800eac0:	4619      	mov	r1, r3
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f000 f900 	bl	800ecc8 <USBD_CtlSendData>
      break;
 800eac8:	e004      	b.n	800ead4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800eaca:	6839      	ldr	r1, [r7, #0]
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f000 f88a 	bl	800ebe6 <USBD_CtlError>
      break;
 800ead2:	bf00      	nop
  }
}
 800ead4:	bf00      	nop
 800ead6:	3708      	adds	r7, #8
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}

0800eadc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b082      	sub	sp, #8
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	885b      	ldrh	r3, [r3, #2]
 800eaea:	2b01      	cmp	r3, #1
 800eaec:	d107      	bne.n	800eafe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2201      	movs	r2, #1
 800eaf2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f000 f940 	bl	800ed7c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800eafc:	e013      	b.n	800eb26 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	885b      	ldrh	r3, [r3, #2]
 800eb02:	2b02      	cmp	r3, #2
 800eb04:	d10b      	bne.n	800eb1e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	889b      	ldrh	r3, [r3, #4]
 800eb0a:	0a1b      	lsrs	r3, r3, #8
 800eb0c:	b29b      	uxth	r3, r3
 800eb0e:	b2da      	uxtb	r2, r3
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f000 f930 	bl	800ed7c <USBD_CtlSendStatus>
}
 800eb1c:	e003      	b.n	800eb26 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800eb1e:	6839      	ldr	r1, [r7, #0]
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f000 f860 	bl	800ebe6 <USBD_CtlError>
}
 800eb26:	bf00      	nop
 800eb28:	3708      	adds	r7, #8
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}

0800eb2e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb2e:	b580      	push	{r7, lr}
 800eb30:	b082      	sub	sp, #8
 800eb32:	af00      	add	r7, sp, #0
 800eb34:	6078      	str	r0, [r7, #4]
 800eb36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	3b01      	subs	r3, #1
 800eb42:	2b02      	cmp	r3, #2
 800eb44:	d80b      	bhi.n	800eb5e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	885b      	ldrh	r3, [r3, #2]
 800eb4a:	2b01      	cmp	r3, #1
 800eb4c:	d10c      	bne.n	800eb68 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2200      	movs	r2, #0
 800eb52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f000 f910 	bl	800ed7c <USBD_CtlSendStatus>
      }
      break;
 800eb5c:	e004      	b.n	800eb68 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800eb5e:	6839      	ldr	r1, [r7, #0]
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f000 f840 	bl	800ebe6 <USBD_CtlError>
      break;
 800eb66:	e000      	b.n	800eb6a <USBD_ClrFeature+0x3c>
      break;
 800eb68:	bf00      	nop
  }
}
 800eb6a:	bf00      	nop
 800eb6c:	3708      	adds	r7, #8
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}

0800eb72 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800eb72:	b580      	push	{r7, lr}
 800eb74:	b084      	sub	sp, #16
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	6078      	str	r0, [r7, #4]
 800eb7a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	781a      	ldrb	r2, [r3, #0]
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	3301      	adds	r3, #1
 800eb8c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	781a      	ldrb	r2, [r3, #0]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	3301      	adds	r3, #1
 800eb9a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800eb9c:	68f8      	ldr	r0, [r7, #12]
 800eb9e:	f7ff fa17 	bl	800dfd0 <SWAPBYTE>
 800eba2:	4603      	mov	r3, r0
 800eba4:	461a      	mov	r2, r3
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	3301      	adds	r3, #1
 800ebae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ebb6:	68f8      	ldr	r0, [r7, #12]
 800ebb8:	f7ff fa0a 	bl	800dfd0 <SWAPBYTE>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	3301      	adds	r3, #1
 800ebc8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	3301      	adds	r3, #1
 800ebce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ebd0:	68f8      	ldr	r0, [r7, #12]
 800ebd2:	f7ff f9fd 	bl	800dfd0 <SWAPBYTE>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	461a      	mov	r2, r3
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	80da      	strh	r2, [r3, #6]
}
 800ebde:	bf00      	nop
 800ebe0:	3710      	adds	r7, #16
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}

0800ebe6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebe6:	b580      	push	{r7, lr}
 800ebe8:	b082      	sub	sp, #8
 800ebea:	af00      	add	r7, sp, #0
 800ebec:	6078      	str	r0, [r7, #4]
 800ebee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ebf0:	2180      	movs	r1, #128	; 0x80
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f004 fb04 	bl	8013200 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ebf8:	2100      	movs	r1, #0
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f004 fb00 	bl	8013200 <USBD_LL_StallEP>
}
 800ec00:	bf00      	nop
 800ec02:	3708      	adds	r7, #8
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}

0800ec08 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b086      	sub	sp, #24
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	60f8      	str	r0, [r7, #12]
 800ec10:	60b9      	str	r1, [r7, #8]
 800ec12:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ec14:	2300      	movs	r3, #0
 800ec16:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d036      	beq.n	800ec8c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ec22:	6938      	ldr	r0, [r7, #16]
 800ec24:	f000 f836 	bl	800ec94 <USBD_GetLen>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	3301      	adds	r3, #1
 800ec2c:	b29b      	uxth	r3, r3
 800ec2e:	005b      	lsls	r3, r3, #1
 800ec30:	b29a      	uxth	r2, r3
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ec36:	7dfb      	ldrb	r3, [r7, #23]
 800ec38:	68ba      	ldr	r2, [r7, #8]
 800ec3a:	4413      	add	r3, r2
 800ec3c:	687a      	ldr	r2, [r7, #4]
 800ec3e:	7812      	ldrb	r2, [r2, #0]
 800ec40:	701a      	strb	r2, [r3, #0]
  idx++;
 800ec42:	7dfb      	ldrb	r3, [r7, #23]
 800ec44:	3301      	adds	r3, #1
 800ec46:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ec48:	7dfb      	ldrb	r3, [r7, #23]
 800ec4a:	68ba      	ldr	r2, [r7, #8]
 800ec4c:	4413      	add	r3, r2
 800ec4e:	2203      	movs	r2, #3
 800ec50:	701a      	strb	r2, [r3, #0]
  idx++;
 800ec52:	7dfb      	ldrb	r3, [r7, #23]
 800ec54:	3301      	adds	r3, #1
 800ec56:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ec58:	e013      	b.n	800ec82 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ec5a:	7dfb      	ldrb	r3, [r7, #23]
 800ec5c:	68ba      	ldr	r2, [r7, #8]
 800ec5e:	4413      	add	r3, r2
 800ec60:	693a      	ldr	r2, [r7, #16]
 800ec62:	7812      	ldrb	r2, [r2, #0]
 800ec64:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	3301      	adds	r3, #1
 800ec6a:	613b      	str	r3, [r7, #16]
    idx++;
 800ec6c:	7dfb      	ldrb	r3, [r7, #23]
 800ec6e:	3301      	adds	r3, #1
 800ec70:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ec72:	7dfb      	ldrb	r3, [r7, #23]
 800ec74:	68ba      	ldr	r2, [r7, #8]
 800ec76:	4413      	add	r3, r2
 800ec78:	2200      	movs	r2, #0
 800ec7a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ec7c:	7dfb      	ldrb	r3, [r7, #23]
 800ec7e:	3301      	adds	r3, #1
 800ec80:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	781b      	ldrb	r3, [r3, #0]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d1e7      	bne.n	800ec5a <USBD_GetString+0x52>
 800ec8a:	e000      	b.n	800ec8e <USBD_GetString+0x86>
    return;
 800ec8c:	bf00      	nop
  }
}
 800ec8e:	3718      	adds	r7, #24
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b085      	sub	sp, #20
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800eca4:	e005      	b.n	800ecb2 <USBD_GetLen+0x1e>
  {
    len++;
 800eca6:	7bfb      	ldrb	r3, [r7, #15]
 800eca8:	3301      	adds	r3, #1
 800ecaa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	3301      	adds	r3, #1
 800ecb0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	781b      	ldrb	r3, [r3, #0]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d1f5      	bne.n	800eca6 <USBD_GetLen+0x12>
  }

  return len;
 800ecba:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3714      	adds	r7, #20
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr

0800ecc8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b084      	sub	sp, #16
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	60f8      	str	r0, [r7, #12]
 800ecd0:	60b9      	str	r1, [r7, #8]
 800ecd2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2202      	movs	r2, #2
 800ecd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	687a      	ldr	r2, [r7, #4]
 800ece0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	687a      	ldr	r2, [r7, #4]
 800ece6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	68ba      	ldr	r2, [r7, #8]
 800ecec:	2100      	movs	r1, #0
 800ecee:	68f8      	ldr	r0, [r7, #12]
 800ecf0:	f004 fb10 	bl	8013314 <USBD_LL_Transmit>

  return USBD_OK;
 800ecf4:	2300      	movs	r3, #0
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3710      	adds	r7, #16
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}

0800ecfe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ecfe:	b580      	push	{r7, lr}
 800ed00:	b084      	sub	sp, #16
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	60f8      	str	r0, [r7, #12]
 800ed06:	60b9      	str	r1, [r7, #8]
 800ed08:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	68ba      	ldr	r2, [r7, #8]
 800ed0e:	2100      	movs	r1, #0
 800ed10:	68f8      	ldr	r0, [r7, #12]
 800ed12:	f004 faff 	bl	8013314 <USBD_LL_Transmit>

  return USBD_OK;
 800ed16:	2300      	movs	r3, #0
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3710      	adds	r7, #16
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}

0800ed20 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	60f8      	str	r0, [r7, #12]
 800ed28:	60b9      	str	r1, [r7, #8]
 800ed2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	2203      	movs	r2, #3
 800ed30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	687a      	ldr	r2, [r7, #4]
 800ed38:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	687a      	ldr	r2, [r7, #4]
 800ed40:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	68ba      	ldr	r2, [r7, #8]
 800ed48:	2100      	movs	r1, #0
 800ed4a:	68f8      	ldr	r0, [r7, #12]
 800ed4c:	f004 fb03 	bl	8013356 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ed50:	2300      	movs	r3, #0
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3710      	adds	r7, #16
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}

0800ed5a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ed5a:	b580      	push	{r7, lr}
 800ed5c:	b084      	sub	sp, #16
 800ed5e:	af00      	add	r7, sp, #0
 800ed60:	60f8      	str	r0, [r7, #12]
 800ed62:	60b9      	str	r1, [r7, #8]
 800ed64:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	68ba      	ldr	r2, [r7, #8]
 800ed6a:	2100      	movs	r1, #0
 800ed6c:	68f8      	ldr	r0, [r7, #12]
 800ed6e:	f004 faf2 	bl	8013356 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ed72:	2300      	movs	r3, #0
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3710      	adds	r7, #16
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}

0800ed7c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2204      	movs	r2, #4
 800ed88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	2200      	movs	r2, #0
 800ed90:	2100      	movs	r1, #0
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f004 fabe 	bl	8013314 <USBD_LL_Transmit>

  return USBD_OK;
 800ed98:	2300      	movs	r3, #0
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3708      	adds	r7, #8
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}

0800eda2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800eda2:	b580      	push	{r7, lr}
 800eda4:	b082      	sub	sp, #8
 800eda6:	af00      	add	r7, sp, #0
 800eda8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2205      	movs	r2, #5
 800edae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800edb2:	2300      	movs	r3, #0
 800edb4:	2200      	movs	r2, #0
 800edb6:	2100      	movs	r1, #0
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f004 facc 	bl	8013356 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800edbe:	2300      	movs	r3, #0
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	3708      	adds	r7, #8
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}

0800edc8 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b088      	sub	sp, #32
 800edcc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800edce:	2300      	movs	r3, #0
 800edd0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800edd2:	f107 0308 	add.w	r3, r7, #8
 800edd6:	2218      	movs	r2, #24
 800edd8:	2100      	movs	r1, #0
 800edda:	4618      	mov	r0, r3
 800eddc:	f001 f8d8 	bl	800ff90 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ede0:	233f      	movs	r3, #63	; 0x3f
 800ede2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800ede4:	2381      	movs	r3, #129	; 0x81
 800ede6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ede8:	1dfb      	adds	r3, r7, #7
 800edea:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800edec:	2301      	movs	r3, #1
 800edee:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800edf0:	f107 0308 	add.w	r3, r7, #8
 800edf4:	2100      	movs	r1, #0
 800edf6:	4618      	mov	r0, r3
 800edf8:	f001 fb54 	bl	80104a4 <hci_send_req>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	da01      	bge.n	800ee06 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ee02:	23ff      	movs	r3, #255	; 0xff
 800ee04:	e000      	b.n	800ee08 <aci_gap_set_non_discoverable+0x40>
  return status;
 800ee06:	79fb      	ldrb	r3, [r7, #7]
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	3720      	adds	r7, #32
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800ee10:	b5b0      	push	{r4, r5, r7, lr}
 800ee12:	b0ce      	sub	sp, #312	; 0x138
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	4605      	mov	r5, r0
 800ee18:	460c      	mov	r4, r1
 800ee1a:	4610      	mov	r0, r2
 800ee1c:	4619      	mov	r1, r3
 800ee1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ee22:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800ee26:	462a      	mov	r2, r5
 800ee28:	701a      	strb	r2, [r3, #0]
 800ee2a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ee2e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ee32:	4622      	mov	r2, r4
 800ee34:	801a      	strh	r2, [r3, #0]
 800ee36:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ee3a:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800ee3e:	4602      	mov	r2, r0
 800ee40:	801a      	strh	r2, [r3, #0]
 800ee42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ee46:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800ee4a:	460a      	mov	r2, r1
 800ee4c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800ee4e:	f107 0310 	add.w	r3, r7, #16
 800ee52:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800ee56:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800ee5a:	3308      	adds	r3, #8
 800ee5c:	f107 0210 	add.w	r2, r7, #16
 800ee60:	4413      	add	r3, r2
 800ee62:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800ee66:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800ee6a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800ee6e:	4413      	add	r3, r2
 800ee70:	3309      	adds	r3, #9
 800ee72:	f107 0210 	add.w	r2, r7, #16
 800ee76:	4413      	add	r3, r2
 800ee78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ee7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ee80:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ee84:	2200      	movs	r2, #0
 800ee86:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ee88:	2300      	movs	r3, #0
 800ee8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800ee8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ee92:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ee96:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800ee9a:	7812      	ldrb	r2, [r2, #0]
 800ee9c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ee9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eea2:	3301      	adds	r3, #1
 800eea4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800eea8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800eeac:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800eeb0:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800eeb4:	8812      	ldrh	r2, [r2, #0]
 800eeb6:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800eeba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eebe:	3302      	adds	r3, #2
 800eec0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800eec4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800eec8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800eecc:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800eed0:	8812      	ldrh	r2, [r2, #0]
 800eed2:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800eed6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eeda:	3302      	adds	r3, #2
 800eedc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800eee0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800eee4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800eee8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800eeec:	7812      	ldrb	r2, [r2, #0]
 800eeee:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800eef0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eef4:	3301      	adds	r3, #1
 800eef6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800eefa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800eefe:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800ef02:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800ef04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ef08:	3301      	adds	r3, #1
 800ef0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800ef0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ef12:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800ef16:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800ef18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ef1c:	3301      	adds	r3, #1
 800ef1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800ef22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ef26:	3308      	adds	r3, #8
 800ef28:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800ef2c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800ef30:	4618      	mov	r0, r3
 800ef32:	f001 f81d 	bl	800ff70 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800ef36:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800ef3a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ef3e:	4413      	add	r3, r2
 800ef40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800ef44:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ef48:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800ef4c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800ef4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ef52:	3301      	adds	r3, #1
 800ef54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800ef58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ef5c:	3301      	adds	r3, #1
 800ef5e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800ef62:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800ef66:	4618      	mov	r0, r3
 800ef68:	f001 f802 	bl	800ff70 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800ef6c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800ef70:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ef74:	4413      	add	r3, r2
 800ef76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800ef7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ef7e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800ef82:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800ef84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ef88:	3302      	adds	r3, #2
 800ef8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800ef8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ef92:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800ef96:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800ef98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ef9c:	3302      	adds	r3, #2
 800ef9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800efa2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800efa6:	2218      	movs	r2, #24
 800efa8:	2100      	movs	r1, #0
 800efaa:	4618      	mov	r0, r3
 800efac:	f000 fff0 	bl	800ff90 <Osal_MemSet>
  rq.ogf = 0x3f;
 800efb0:	233f      	movs	r3, #63	; 0x3f
 800efb2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800efb6:	2383      	movs	r3, #131	; 0x83
 800efb8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800efbc:	f107 0310 	add.w	r3, r7, #16
 800efc0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800efc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800efc8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800efcc:	f107 030f 	add.w	r3, r7, #15
 800efd0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800efd4:	2301      	movs	r3, #1
 800efd6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800efda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800efde:	2100      	movs	r1, #0
 800efe0:	4618      	mov	r0, r3
 800efe2:	f001 fa5f 	bl	80104a4 <hci_send_req>
 800efe6:	4603      	mov	r3, r0
 800efe8:	2b00      	cmp	r3, #0
 800efea:	da01      	bge.n	800eff0 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800efec:	23ff      	movs	r3, #255	; 0xff
 800efee:	e004      	b.n	800effa <aci_gap_set_discoverable+0x1ea>
  return status;
 800eff0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800eff4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800eff8:	781b      	ldrb	r3, [r3, #0]
}
 800effa:	4618      	mov	r0, r3
 800effc:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800f000:	46bd      	mov	sp, r7
 800f002:	bdb0      	pop	{r4, r5, r7, pc}

0800f004 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b0cc      	sub	sp, #304	; 0x130
 800f008:	af00      	add	r7, sp, #0
 800f00a:	4602      	mov	r2, r0
 800f00c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f010:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f014:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800f016:	f107 0310 	add.w	r3, r7, #16
 800f01a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f01e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f022:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f026:	2200      	movs	r2, #0
 800f028:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f02a:	2300      	movs	r3, #0
 800f02c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800f030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f034:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f038:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800f03c:	7812      	ldrb	r2, [r2, #0]
 800f03e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f040:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f044:	3301      	adds	r3, #1
 800f046:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f04a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f04e:	2218      	movs	r2, #24
 800f050:	2100      	movs	r1, #0
 800f052:	4618      	mov	r0, r3
 800f054:	f000 ff9c 	bl	800ff90 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f058:	233f      	movs	r3, #63	; 0x3f
 800f05a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800f05e:	2385      	movs	r3, #133	; 0x85
 800f060:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f064:	f107 0310 	add.w	r3, r7, #16
 800f068:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f06c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f070:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f074:	f107 030f 	add.w	r3, r7, #15
 800f078:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f07c:	2301      	movs	r3, #1
 800f07e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f082:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f086:	2100      	movs	r1, #0
 800f088:	4618      	mov	r0, r3
 800f08a:	f001 fa0b 	bl	80104a4 <hci_send_req>
 800f08e:	4603      	mov	r3, r0
 800f090:	2b00      	cmp	r3, #0
 800f092:	da01      	bge.n	800f098 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800f094:	23ff      	movs	r3, #255	; 0xff
 800f096:	e004      	b.n	800f0a2 <aci_gap_set_io_capability+0x9e>
  return status;
 800f098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f09c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f0a0:	781b      	ldrb	r3, [r3, #0]
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800f0ac:	b5b0      	push	{r4, r5, r7, lr}
 800f0ae:	b0cc      	sub	sp, #304	; 0x130
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	4605      	mov	r5, r0
 800f0b4:	460c      	mov	r4, r1
 800f0b6:	4610      	mov	r0, r2
 800f0b8:	4619      	mov	r1, r3
 800f0ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f0be:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f0c2:	462a      	mov	r2, r5
 800f0c4:	701a      	strb	r2, [r3, #0]
 800f0c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f0ca:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f0ce:	4622      	mov	r2, r4
 800f0d0:	701a      	strb	r2, [r3, #0]
 800f0d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f0d6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800f0da:	4602      	mov	r2, r0
 800f0dc:	701a      	strb	r2, [r3, #0]
 800f0de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f0e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f0e6:	460a      	mov	r2, r1
 800f0e8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800f0ea:	f107 0310 	add.w	r3, r7, #16
 800f0ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f0f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f0f6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f0fe:	2300      	movs	r3, #0
 800f100:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800f104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f108:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f10c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800f110:	7812      	ldrb	r2, [r2, #0]
 800f112:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f114:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f118:	3301      	adds	r3, #1
 800f11a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800f11e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f122:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f126:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800f12a:	7812      	ldrb	r2, [r2, #0]
 800f12c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f12e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f132:	3301      	adds	r3, #1
 800f134:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800f138:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f13c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f140:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800f144:	7812      	ldrb	r2, [r2, #0]
 800f146:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f148:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f14c:	3301      	adds	r3, #1
 800f14e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800f152:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f156:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f15a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800f15e:	7812      	ldrb	r2, [r2, #0]
 800f160:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800f162:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f166:	3301      	adds	r3, #1
 800f168:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800f16c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f170:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800f174:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800f176:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f17a:	3301      	adds	r3, #1
 800f17c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800f180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f184:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800f188:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800f18a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f18e:	3301      	adds	r3, #1
 800f190:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800f194:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f198:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800f19c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800f19e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f1a2:	3301      	adds	r3, #1
 800f1a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800f1a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f1ac:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800f1b0:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800f1b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f1b8:	3304      	adds	r3, #4
 800f1ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800f1be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f1c2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800f1c6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800f1c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f1cc:	3301      	adds	r3, #1
 800f1ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f1d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f1d6:	2218      	movs	r2, #24
 800f1d8:	2100      	movs	r1, #0
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f000 fed8 	bl	800ff90 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f1e0:	233f      	movs	r3, #63	; 0x3f
 800f1e2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800f1e6:	2386      	movs	r3, #134	; 0x86
 800f1e8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f1ec:	f107 0310 	add.w	r3, r7, #16
 800f1f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f1f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f1f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f1fc:	f107 030f 	add.w	r3, r7, #15
 800f200:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f204:	2301      	movs	r3, #1
 800f206:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f20a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f20e:	2100      	movs	r1, #0
 800f210:	4618      	mov	r0, r3
 800f212:	f001 f947 	bl	80104a4 <hci_send_req>
 800f216:	4603      	mov	r3, r0
 800f218:	2b00      	cmp	r3, #0
 800f21a:	da01      	bge.n	800f220 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800f21c:	23ff      	movs	r3, #255	; 0xff
 800f21e:	e004      	b.n	800f22a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800f220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f224:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f228:	781b      	ldrb	r3, [r3, #0]
}
 800f22a:	4618      	mov	r0, r3
 800f22c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f230:	46bd      	mov	sp, r7
 800f232:	bdb0      	pop	{r4, r5, r7, pc}

0800f234 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b0cc      	sub	sp, #304	; 0x130
 800f238:	af00      	add	r7, sp, #0
 800f23a:	4602      	mov	r2, r0
 800f23c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f240:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f244:	6019      	str	r1, [r3, #0]
 800f246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f24a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f24e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800f250:	f107 0310 	add.w	r3, r7, #16
 800f254:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f25c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f260:	2200      	movs	r2, #0
 800f262:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f264:	2300      	movs	r3, #0
 800f266:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800f26a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f26e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f272:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800f276:	8812      	ldrh	r2, [r2, #0]
 800f278:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f27a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f27e:	3302      	adds	r3, #2
 800f280:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800f284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f288:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f28c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800f290:	6812      	ldr	r2, [r2, #0]
 800f292:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800f296:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f29a:	3304      	adds	r3, #4
 800f29c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f2a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f2a4:	2218      	movs	r2, #24
 800f2a6:	2100      	movs	r1, #0
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f000 fe71 	bl	800ff90 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f2ae:	233f      	movs	r3, #63	; 0x3f
 800f2b0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800f2b4:	2388      	movs	r3, #136	; 0x88
 800f2b6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f2ba:	f107 0310 	add.w	r3, r7, #16
 800f2be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f2c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f2c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f2ca:	f107 030f 	add.w	r3, r7, #15
 800f2ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f2d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f2dc:	2100      	movs	r1, #0
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f001 f8e0 	bl	80104a4 <hci_send_req>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	da01      	bge.n	800f2ee <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800f2ea:	23ff      	movs	r3, #255	; 0xff
 800f2ec:	e004      	b.n	800f2f8 <aci_gap_pass_key_resp+0xc4>
  return status;
 800f2ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f2f2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f2f6:	781b      	ldrb	r3, [r3, #0]
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}

0800f302 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800f302:	b590      	push	{r4, r7, lr}
 800f304:	b0cd      	sub	sp, #308	; 0x134
 800f306:	af00      	add	r7, sp, #0
 800f308:	4604      	mov	r4, r0
 800f30a:	4608      	mov	r0, r1
 800f30c:	4611      	mov	r1, r2
 800f30e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f312:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800f316:	6013      	str	r3, [r2, #0]
 800f318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f31c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f320:	4622      	mov	r2, r4
 800f322:	701a      	strb	r2, [r3, #0]
 800f324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f328:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f32c:	4602      	mov	r2, r0
 800f32e:	701a      	strb	r2, [r3, #0]
 800f330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f334:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800f338:	460a      	mov	r2, r1
 800f33a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800f33c:	f107 0310 	add.w	r3, r7, #16
 800f340:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800f344:	f107 0308 	add.w	r3, r7, #8
 800f348:	2207      	movs	r2, #7
 800f34a:	2100      	movs	r1, #0
 800f34c:	4618      	mov	r0, r3
 800f34e:	f000 fe1f 	bl	800ff90 <Osal_MemSet>
  int index_input = 0;
 800f352:	2300      	movs	r3, #0
 800f354:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800f358:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f35c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f360:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800f364:	7812      	ldrb	r2, [r2, #0]
 800f366:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f368:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f36c:	3301      	adds	r3, #1
 800f36e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800f372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f376:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f37a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800f37e:	7812      	ldrb	r2, [r2, #0]
 800f380:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f382:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f386:	3301      	adds	r3, #1
 800f388:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800f38c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f390:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f394:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800f398:	7812      	ldrb	r2, [r2, #0]
 800f39a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f39c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f3a0:	3301      	adds	r3, #1
 800f3a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f3a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f3aa:	2218      	movs	r2, #24
 800f3ac:	2100      	movs	r1, #0
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f000 fdee 	bl	800ff90 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f3b4:	233f      	movs	r3, #63	; 0x3f
 800f3b6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800f3ba:	238a      	movs	r3, #138	; 0x8a
 800f3bc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f3c0:	f107 0310 	add.w	r3, r7, #16
 800f3c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f3c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f3cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800f3d0:	f107 0308 	add.w	r3, r7, #8
 800f3d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800f3d8:	2307      	movs	r3, #7
 800f3da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f3de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f3e2:	2100      	movs	r1, #0
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f001 f85d 	bl	80104a4 <hci_send_req>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	da01      	bge.n	800f3f4 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800f3f0:	23ff      	movs	r3, #255	; 0xff
 800f3f2:	e02e      	b.n	800f452 <aci_gap_init+0x150>
  if ( resp.Status )
 800f3f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f3f8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f3fc:	781b      	ldrb	r3, [r3, #0]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d005      	beq.n	800f40e <aci_gap_init+0x10c>
    return resp.Status;
 800f402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f406:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f40a:	781b      	ldrb	r3, [r3, #0]
 800f40c:	e021      	b.n	800f452 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800f40e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f412:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f416:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f41a:	b29a      	uxth	r2, r3
 800f41c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f420:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800f428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f42c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f430:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f434:	b29a      	uxth	r2, r3
 800f436:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800f43a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800f43c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f440:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800f444:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800f448:	b29a      	uxth	r2, r3
 800f44a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800f44e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800f450:	2300      	movs	r3, #0
}
 800f452:	4618      	mov	r0, r3
 800f454:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd90      	pop	{r4, r7, pc}

0800f45c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b0cc      	sub	sp, #304	; 0x130
 800f460:	af00      	add	r7, sp, #0
 800f462:	4602      	mov	r2, r0
 800f464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f46c:	6019      	str	r1, [r3, #0]
 800f46e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f472:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f476:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800f478:	f107 0310 	add.w	r3, r7, #16
 800f47c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f484:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f488:	2200      	movs	r2, #0
 800f48a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f48c:	2300      	movs	r3, #0
 800f48e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800f492:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f496:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f49a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800f49e:	7812      	ldrb	r2, [r2, #0]
 800f4a0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f4a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800f4ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f4b0:	1c58      	adds	r0, r3, #1
 800f4b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f4b6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f4ba:	781a      	ldrb	r2, [r3, #0]
 800f4bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f4c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f4c4:	6819      	ldr	r1, [r3, #0]
 800f4c6:	f000 fd53 	bl	800ff70 <Osal_MemCpy>
  index_input += AdvDataLen;
 800f4ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f4ce:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800f4d2:	781b      	ldrb	r3, [r3, #0]
 800f4d4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800f4d8:	4413      	add	r3, r2
 800f4da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f4de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f4e2:	2218      	movs	r2, #24
 800f4e4:	2100      	movs	r1, #0
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f000 fd52 	bl	800ff90 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f4ec:	233f      	movs	r3, #63	; 0x3f
 800f4ee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800f4f2:	238e      	movs	r3, #142	; 0x8e
 800f4f4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f4f8:	f107 0310 	add.w	r3, r7, #16
 800f4fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f500:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f504:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f508:	f107 030f 	add.w	r3, r7, #15
 800f50c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f510:	2301      	movs	r3, #1
 800f512:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f516:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f51a:	2100      	movs	r1, #0
 800f51c:	4618      	mov	r0, r3
 800f51e:	f000 ffc1 	bl	80104a4 <hci_send_req>
 800f522:	4603      	mov	r3, r0
 800f524:	2b00      	cmp	r3, #0
 800f526:	da01      	bge.n	800f52c <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800f528:	23ff      	movs	r3, #255	; 0xff
 800f52a:	e004      	b.n	800f536 <aci_gap_update_adv_data+0xda>
  return status;
 800f52c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f530:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f534:	781b      	ldrb	r3, [r3, #0]
}
 800f536:	4618      	mov	r0, r3
 800f538:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd80      	pop	{r7, pc}

0800f540 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b088      	sub	sp, #32
 800f544:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800f546:	2300      	movs	r3, #0
 800f548:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f54a:	f107 0308 	add.w	r3, r7, #8
 800f54e:	2218      	movs	r2, #24
 800f550:	2100      	movs	r1, #0
 800f552:	4618      	mov	r0, r3
 800f554:	f000 fd1c 	bl	800ff90 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f558:	233f      	movs	r3, #63	; 0x3f
 800f55a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800f55c:	2392      	movs	r3, #146	; 0x92
 800f55e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f560:	1dfb      	adds	r3, r7, #7
 800f562:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f564:	2301      	movs	r3, #1
 800f566:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f568:	f107 0308 	add.w	r3, r7, #8
 800f56c:	2100      	movs	r1, #0
 800f56e:	4618      	mov	r0, r3
 800f570:	f000 ff98 	bl	80104a4 <hci_send_req>
 800f574:	4603      	mov	r3, r0
 800f576:	2b00      	cmp	r3, #0
 800f578:	da01      	bge.n	800f57e <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800f57a:	23ff      	movs	r3, #255	; 0xff
 800f57c:	e000      	b.n	800f580 <aci_gap_configure_whitelist+0x40>
  return status;
 800f57e:	79fb      	ldrb	r3, [r7, #7]
}
 800f580:	4618      	mov	r0, r3
 800f582:	3720      	adds	r7, #32
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}

0800f588 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b0cc      	sub	sp, #304	; 0x130
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	4602      	mov	r2, r0
 800f590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f594:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800f598:	801a      	strh	r2, [r3, #0]
 800f59a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f59e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800f5a2:	460a      	mov	r2, r1
 800f5a4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800f5a6:	f107 0310 	add.w	r3, r7, #16
 800f5aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800f5ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f5b2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800f5c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f5c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f5c8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800f5cc:	8812      	ldrh	r2, [r2, #0]
 800f5ce:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f5d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f5d4:	3302      	adds	r3, #2
 800f5d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800f5da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f5de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f5e2:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800f5e6:	7812      	ldrb	r2, [r2, #0]
 800f5e8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f5ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f5ee:	3301      	adds	r3, #1
 800f5f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f5f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f5f8:	2218      	movs	r2, #24
 800f5fa:	2100      	movs	r1, #0
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f000 fcc7 	bl	800ff90 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f602:	233f      	movs	r3, #63	; 0x3f
 800f604:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800f608:	23a5      	movs	r3, #165	; 0xa5
 800f60a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f60e:	f107 0310 	add.w	r3, r7, #16
 800f612:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f616:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f61a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f61e:	f107 030f 	add.w	r3, r7, #15
 800f622:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f626:	2301      	movs	r3, #1
 800f628:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f62c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f630:	2100      	movs	r1, #0
 800f632:	4618      	mov	r0, r3
 800f634:	f000 ff36 	bl	80104a4 <hci_send_req>
 800f638:	4603      	mov	r3, r0
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	da01      	bge.n	800f642 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800f63e:	23ff      	movs	r3, #255	; 0xff
 800f640:	e004      	b.n	800f64c <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800f642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f646:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800f64a:	781b      	ldrb	r3, [r3, #0]
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}

0800f656 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800f656:	b580      	push	{r7, lr}
 800f658:	b088      	sub	sp, #32
 800f65a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800f65c:	2300      	movs	r3, #0
 800f65e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f660:	f107 0308 	add.w	r3, r7, #8
 800f664:	2218      	movs	r2, #24
 800f666:	2100      	movs	r1, #0
 800f668:	4618      	mov	r0, r3
 800f66a:	f000 fc91 	bl	800ff90 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f66e:	233f      	movs	r3, #63	; 0x3f
 800f670:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800f672:	f240 1301 	movw	r3, #257	; 0x101
 800f676:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f678:	1dfb      	adds	r3, r7, #7
 800f67a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f67c:	2301      	movs	r3, #1
 800f67e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f680:	f107 0308 	add.w	r3, r7, #8
 800f684:	2100      	movs	r1, #0
 800f686:	4618      	mov	r0, r3
 800f688:	f000 ff0c 	bl	80104a4 <hci_send_req>
 800f68c:	4603      	mov	r3, r0
 800f68e:	2b00      	cmp	r3, #0
 800f690:	da01      	bge.n	800f696 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800f692:	23ff      	movs	r3, #255	; 0xff
 800f694:	e000      	b.n	800f698 <aci_gatt_init+0x42>
  return status;
 800f696:	79fb      	ldrb	r3, [r7, #7]
}
 800f698:	4618      	mov	r0, r3
 800f69a:	3720      	adds	r7, #32
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}

0800f6a0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800f6a0:	b590      	push	{r4, r7, lr}
 800f6a2:	b0cf      	sub	sp, #316	; 0x13c
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	4604      	mov	r4, r0
 800f6a8:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800f6ac:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800f6b0:	6001      	str	r1, [r0, #0]
 800f6b2:	4610      	mov	r0, r2
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f6ba:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800f6be:	4622      	mov	r2, r4
 800f6c0:	701a      	strb	r2, [r3, #0]
 800f6c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f6c6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800f6ca:	4602      	mov	r2, r0
 800f6cc:	701a      	strb	r2, [r3, #0]
 800f6ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f6d2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800f6d6:	460a      	mov	r2, r1
 800f6d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800f6da:	f107 0310 	add.w	r3, r7, #16
 800f6de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800f6e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f6e6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800f6ea:	781b      	ldrb	r3, [r3, #0]
 800f6ec:	2b01      	cmp	r3, #1
 800f6ee:	d00a      	beq.n	800f706 <aci_gatt_add_service+0x66>
 800f6f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f6f4:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800f6f8:	781b      	ldrb	r3, [r3, #0]
 800f6fa:	2b02      	cmp	r3, #2
 800f6fc:	d101      	bne.n	800f702 <aci_gatt_add_service+0x62>
 800f6fe:	2311      	movs	r3, #17
 800f700:	e002      	b.n	800f708 <aci_gatt_add_service+0x68>
 800f702:	2301      	movs	r3, #1
 800f704:	e000      	b.n	800f708 <aci_gatt_add_service+0x68>
 800f706:	2303      	movs	r3, #3
 800f708:	f107 0210 	add.w	r2, r7, #16
 800f70c:	4413      	add	r3, r2
 800f70e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800f712:	f107 030c 	add.w	r3, r7, #12
 800f716:	2203      	movs	r2, #3
 800f718:	2100      	movs	r1, #0
 800f71a:	4618      	mov	r0, r3
 800f71c:	f000 fc38 	bl	800ff90 <Osal_MemSet>
  int index_input = 0;
 800f720:	2300      	movs	r3, #0
 800f722:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800f726:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f72a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800f72e:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800f732:	7812      	ldrb	r2, [r2, #0]
 800f734:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f736:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f73a:	3301      	adds	r3, #1
 800f73c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800f740:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f744:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	2b01      	cmp	r3, #1
 800f74c:	d002      	beq.n	800f754 <aci_gatt_add_service+0xb4>
 800f74e:	2b02      	cmp	r3, #2
 800f750:	d004      	beq.n	800f75c <aci_gatt_add_service+0xbc>
 800f752:	e007      	b.n	800f764 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800f754:	2302      	movs	r3, #2
 800f756:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800f75a:	e005      	b.n	800f768 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800f75c:	2310      	movs	r3, #16
 800f75e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800f762:	e001      	b.n	800f768 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800f764:	2397      	movs	r3, #151	; 0x97
 800f766:	e06c      	b.n	800f842 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800f768:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f76c:	1c58      	adds	r0, r3, #1
 800f76e:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800f772:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f776:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800f77a:	6819      	ldr	r1, [r3, #0]
 800f77c:	f000 fbf8 	bl	800ff70 <Osal_MemCpy>
    index_input += size;
 800f780:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800f784:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800f788:	4413      	add	r3, r2
 800f78a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800f78e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f792:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800f796:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800f79a:	7812      	ldrb	r2, [r2, #0]
 800f79c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800f79e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800f7a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f7ac:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800f7b0:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800f7b4:	7812      	ldrb	r2, [r2, #0]
 800f7b6:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800f7b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f7bc:	3301      	adds	r3, #1
 800f7be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f7c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f7c6:	2218      	movs	r2, #24
 800f7c8:	2100      	movs	r1, #0
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f000 fbe0 	bl	800ff90 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f7d0:	233f      	movs	r3, #63	; 0x3f
 800f7d2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800f7d6:	f44f 7381 	mov.w	r3, #258	; 0x102
 800f7da:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f7de:	f107 0310 	add.w	r3, r7, #16
 800f7e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f7e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f7ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800f7ee:	f107 030c 	add.w	r3, r7, #12
 800f7f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800f7f6:	2303      	movs	r3, #3
 800f7f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f7fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f800:	2100      	movs	r1, #0
 800f802:	4618      	mov	r0, r3
 800f804:	f000 fe4e 	bl	80104a4 <hci_send_req>
 800f808:	4603      	mov	r3, r0
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	da01      	bge.n	800f812 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800f80e:	23ff      	movs	r3, #255	; 0xff
 800f810:	e017      	b.n	800f842 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800f812:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f816:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d005      	beq.n	800f82c <aci_gatt_add_service+0x18c>
    return resp.Status;
 800f820:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f824:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f828:	781b      	ldrb	r3, [r3, #0]
 800f82a:	e00a      	b.n	800f842 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800f82c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800f830:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f834:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f838:	b29a      	uxth	r2, r3
 800f83a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f83e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800f840:	2300      	movs	r3, #0
}
 800f842:	4618      	mov	r0, r3
 800f844:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd90      	pop	{r4, r7, pc}

0800f84c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800f84c:	b590      	push	{r4, r7, lr}
 800f84e:	b0d1      	sub	sp, #324	; 0x144
 800f850:	af00      	add	r7, sp, #0
 800f852:	4604      	mov	r4, r0
 800f854:	4608      	mov	r0, r1
 800f856:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800f85a:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800f85e:	600a      	str	r2, [r1, #0]
 800f860:	4619      	mov	r1, r3
 800f862:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f866:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800f86a:	4622      	mov	r2, r4
 800f86c:	801a      	strh	r2, [r3, #0]
 800f86e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f872:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800f876:	4602      	mov	r2, r0
 800f878:	701a      	strb	r2, [r3, #0]
 800f87a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f87e:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800f882:	460a      	mov	r2, r1
 800f884:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800f886:	f107 0318 	add.w	r3, r7, #24
 800f88a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800f88e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f892:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800f896:	781b      	ldrb	r3, [r3, #0]
 800f898:	2b01      	cmp	r3, #1
 800f89a:	d00a      	beq.n	800f8b2 <aci_gatt_add_char+0x66>
 800f89c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f8a0:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800f8a4:	781b      	ldrb	r3, [r3, #0]
 800f8a6:	2b02      	cmp	r3, #2
 800f8a8:	d101      	bne.n	800f8ae <aci_gatt_add_char+0x62>
 800f8aa:	2313      	movs	r3, #19
 800f8ac:	e002      	b.n	800f8b4 <aci_gatt_add_char+0x68>
 800f8ae:	2303      	movs	r3, #3
 800f8b0:	e000      	b.n	800f8b4 <aci_gatt_add_char+0x68>
 800f8b2:	2305      	movs	r3, #5
 800f8b4:	f107 0218 	add.w	r2, r7, #24
 800f8b8:	4413      	add	r3, r2
 800f8ba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800f8be:	f107 0314 	add.w	r3, r7, #20
 800f8c2:	2203      	movs	r2, #3
 800f8c4:	2100      	movs	r1, #0
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f000 fb62 	bl	800ff90 <Osal_MemSet>
  int index_input = 0;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800f8d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f8d6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800f8da:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800f8de:	8812      	ldrh	r2, [r2, #0]
 800f8e0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f8e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f8e6:	3302      	adds	r3, #2
 800f8e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800f8ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f8f0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800f8f4:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800f8f8:	7812      	ldrb	r2, [r2, #0]
 800f8fa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f8fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f900:	3301      	adds	r3, #1
 800f902:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800f906:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f90a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800f90e:	781b      	ldrb	r3, [r3, #0]
 800f910:	2b01      	cmp	r3, #1
 800f912:	d002      	beq.n	800f91a <aci_gatt_add_char+0xce>
 800f914:	2b02      	cmp	r3, #2
 800f916:	d004      	beq.n	800f922 <aci_gatt_add_char+0xd6>
 800f918:	e007      	b.n	800f92a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800f91a:	2302      	movs	r3, #2
 800f91c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800f920:	e005      	b.n	800f92e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800f922:	2310      	movs	r3, #16
 800f924:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800f928:	e001      	b.n	800f92e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800f92a:	2397      	movs	r3, #151	; 0x97
 800f92c:	e091      	b.n	800fa52 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800f92e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f932:	1cd8      	adds	r0, r3, #3
 800f934:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800f938:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800f93c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800f940:	6819      	ldr	r1, [r3, #0]
 800f942:	f000 fb15 	bl	800ff70 <Osal_MemCpy>
    index_input += size;
 800f946:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800f94a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800f94e:	4413      	add	r3, r2
 800f950:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800f954:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f958:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800f95c:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800f960:	8812      	ldrh	r2, [r2, #0]
 800f962:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800f964:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f968:	3302      	adds	r3, #2
 800f96a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800f96e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f972:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800f976:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800f978:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f97c:	3301      	adds	r3, #1
 800f97e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800f982:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f986:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800f98a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800f98c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f990:	3301      	adds	r3, #1
 800f992:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800f996:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f99a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800f99e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800f9a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f9a4:	3301      	adds	r3, #1
 800f9a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800f9aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f9ae:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800f9b2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800f9b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f9b8:	3301      	adds	r3, #1
 800f9ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800f9be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f9c2:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800f9c6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800f9c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f9cc:	3301      	adds	r3, #1
 800f9ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f9d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800f9d6:	2218      	movs	r2, #24
 800f9d8:	2100      	movs	r1, #0
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f000 fad8 	bl	800ff90 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f9e0:	233f      	movs	r3, #63	; 0x3f
 800f9e2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800f9e6:	f44f 7382 	mov.w	r3, #260	; 0x104
 800f9ea:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800f9ee:	f107 0318 	add.w	r3, r7, #24
 800f9f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800f9f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800f9fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800f9fe:	f107 0314 	add.w	r3, r7, #20
 800fa02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800fa06:	2303      	movs	r3, #3
 800fa08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fa0c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800fa10:	2100      	movs	r1, #0
 800fa12:	4618      	mov	r0, r3
 800fa14:	f000 fd46 	bl	80104a4 <hci_send_req>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	da01      	bge.n	800fa22 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800fa1e:	23ff      	movs	r3, #255	; 0xff
 800fa20:	e017      	b.n	800fa52 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800fa22:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fa26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fa2a:	781b      	ldrb	r3, [r3, #0]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d005      	beq.n	800fa3c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800fa30:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fa34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fa38:	781b      	ldrb	r3, [r3, #0]
 800fa3a:	e00a      	b.n	800fa52 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800fa3c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fa40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fa44:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fa48:	b29a      	uxth	r2, r3
 800fa4a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800fa4e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800fa50:	2300      	movs	r3, #0
}
 800fa52:	4618      	mov	r0, r3
 800fa54:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd90      	pop	{r4, r7, pc}

0800fa5c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800fa5c:	b5b0      	push	{r4, r5, r7, lr}
 800fa5e:	b0cc      	sub	sp, #304	; 0x130
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	4605      	mov	r5, r0
 800fa64:	460c      	mov	r4, r1
 800fa66:	4610      	mov	r0, r2
 800fa68:	4619      	mov	r1, r3
 800fa6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fa6e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fa72:	462a      	mov	r2, r5
 800fa74:	801a      	strh	r2, [r3, #0]
 800fa76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fa7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fa7e:	4622      	mov	r2, r4
 800fa80:	801a      	strh	r2, [r3, #0]
 800fa82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fa86:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800fa8a:	4602      	mov	r2, r0
 800fa8c:	701a      	strb	r2, [r3, #0]
 800fa8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fa92:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800fa96:	460a      	mov	r2, r1
 800fa98:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800fa9a:	f107 0310 	add.w	r3, r7, #16
 800fa9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800faa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800faa6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800faaa:	2200      	movs	r2, #0
 800faac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800faae:	2300      	movs	r3, #0
 800fab0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800fab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fab8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fabc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800fac0:	8812      	ldrh	r2, [r2, #0]
 800fac2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800fac4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fac8:	3302      	adds	r3, #2
 800faca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800face:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fad2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fad6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800fada:	8812      	ldrh	r2, [r2, #0]
 800fadc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800fade:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fae2:	3302      	adds	r3, #2
 800fae4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800fae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800faec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800faf0:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800faf4:	7812      	ldrb	r2, [r2, #0]
 800faf6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800faf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fafc:	3301      	adds	r3, #1
 800fafe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800fb02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fb06:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fb0a:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800fb0e:	7812      	ldrb	r2, [r2, #0]
 800fb10:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800fb12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fb16:	3301      	adds	r3, #1
 800fb18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800fb1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fb20:	1d98      	adds	r0, r3, #6
 800fb22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb26:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800fb2a:	781b      	ldrb	r3, [r3, #0]
 800fb2c:	461a      	mov	r2, r3
 800fb2e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800fb32:	f000 fa1d 	bl	800ff70 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800fb36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb3a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800fb44:	4413      	add	r3, r2
 800fb46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fb4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fb4e:	2218      	movs	r2, #24
 800fb50:	2100      	movs	r1, #0
 800fb52:	4618      	mov	r0, r3
 800fb54:	f000 fa1c 	bl	800ff90 <Osal_MemSet>
  rq.ogf = 0x3f;
 800fb58:	233f      	movs	r3, #63	; 0x3f
 800fb5a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800fb5e:	f44f 7383 	mov.w	r3, #262	; 0x106
 800fb62:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800fb66:	f107 0310 	add.w	r3, r7, #16
 800fb6a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800fb6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fb72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800fb76:	f107 030f 	add.w	r3, r7, #15
 800fb7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800fb7e:	2301      	movs	r3, #1
 800fb80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fb84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fb88:	2100      	movs	r1, #0
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f000 fc8a 	bl	80104a4 <hci_send_req>
 800fb90:	4603      	mov	r3, r0
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	da01      	bge.n	800fb9a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800fb96:	23ff      	movs	r3, #255	; 0xff
 800fb98:	e004      	b.n	800fba4 <aci_gatt_update_char_value+0x148>
  return status;
 800fb9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb9e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fba2:	781b      	ldrb	r3, [r3, #0]
}
 800fba4:	4618      	mov	r0, r3
 800fba6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bdb0      	pop	{r4, r5, r7, pc}

0800fbae <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800fbae:	b580      	push	{r7, lr}
 800fbb0:	b0cc      	sub	sp, #304	; 0x130
 800fbb2:	af00      	add	r7, sp, #0
 800fbb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fbb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fbbc:	601a      	str	r2, [r3, #0]
 800fbbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fbc2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800fbc6:	4602      	mov	r2, r0
 800fbc8:	701a      	strb	r2, [r3, #0]
 800fbca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fbce:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fbd2:	460a      	mov	r2, r1
 800fbd4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800fbd6:	f107 0310 	add.w	r3, r7, #16
 800fbda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800fbde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fbe2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fbea:	2300      	movs	r3, #0
 800fbec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800fbf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fbf4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fbf8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800fbfc:	7812      	ldrb	r2, [r2, #0]
 800fbfe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fc00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fc04:	3301      	adds	r3, #1
 800fc06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800fc0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fc0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fc12:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800fc16:	7812      	ldrb	r2, [r2, #0]
 800fc18:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800fc1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fc1e:	3301      	adds	r3, #1
 800fc20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800fc24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fc28:	1c98      	adds	r0, r3, #2
 800fc2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fc2e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fc32:	781a      	ldrb	r2, [r3, #0]
 800fc34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fc38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fc3c:	6819      	ldr	r1, [r3, #0]
 800fc3e:	f000 f997 	bl	800ff70 <Osal_MemCpy>
  index_input += Length;
 800fc42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fc46:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fc4a:	781b      	ldrb	r3, [r3, #0]
 800fc4c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800fc50:	4413      	add	r3, r2
 800fc52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fc56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fc5a:	2218      	movs	r2, #24
 800fc5c:	2100      	movs	r1, #0
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f000 f996 	bl	800ff90 <Osal_MemSet>
  rq.ogf = 0x3f;
 800fc64:	233f      	movs	r3, #63	; 0x3f
 800fc66:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800fc6a:	230c      	movs	r3, #12
 800fc6c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800fc70:	f107 0310 	add.w	r3, r7, #16
 800fc74:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800fc78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fc7c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800fc80:	f107 030f 	add.w	r3, r7, #15
 800fc84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800fc88:	2301      	movs	r3, #1
 800fc8a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fc8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fc92:	2100      	movs	r1, #0
 800fc94:	4618      	mov	r0, r3
 800fc96:	f000 fc05 	bl	80104a4 <hci_send_req>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	da01      	bge.n	800fca4 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800fca0:	23ff      	movs	r3, #255	; 0xff
 800fca2:	e004      	b.n	800fcae <aci_hal_write_config_data+0x100>
  return status;
 800fca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fca8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fcac:	781b      	ldrb	r3, [r3, #0]
}
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b0cc      	sub	sp, #304	; 0x130
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	4602      	mov	r2, r0
 800fcc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fcc4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800fcc8:	701a      	strb	r2, [r3, #0]
 800fcca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fcce:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fcd2:	460a      	mov	r2, r1
 800fcd4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800fcd6:	f107 0310 	add.w	r3, r7, #16
 800fcda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800fcde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fce2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fce6:	2200      	movs	r2, #0
 800fce8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fcea:	2300      	movs	r3, #0
 800fcec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800fcf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fcf4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fcf8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800fcfc:	7812      	ldrb	r2, [r2, #0]
 800fcfe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fd00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fd04:	3301      	adds	r3, #1
 800fd06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800fd0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fd0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fd12:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800fd16:	7812      	ldrb	r2, [r2, #0]
 800fd18:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800fd1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fd1e:	3301      	adds	r3, #1
 800fd20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fd24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fd28:	2218      	movs	r2, #24
 800fd2a:	2100      	movs	r1, #0
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f000 f92f 	bl	800ff90 <Osal_MemSet>
  rq.ogf = 0x3f;
 800fd32:	233f      	movs	r3, #63	; 0x3f
 800fd34:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800fd38:	230f      	movs	r3, #15
 800fd3a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800fd3e:	f107 0310 	add.w	r3, r7, #16
 800fd42:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800fd46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fd4a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800fd4e:	f107 030f 	add.w	r3, r7, #15
 800fd52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800fd56:	2301      	movs	r3, #1
 800fd58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fd5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fd60:	2100      	movs	r1, #0
 800fd62:	4618      	mov	r0, r3
 800fd64:	f000 fb9e 	bl	80104a4 <hci_send_req>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	da01      	bge.n	800fd72 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800fd6e:	23ff      	movs	r3, #255	; 0xff
 800fd70:	e004      	b.n	800fd7c <aci_hal_set_tx_power_level+0xc4>
  return status;
 800fd72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fd76:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fd7a:	781b      	ldrb	r3, [r3, #0]
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}

0800fd86 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800fd86:	b580      	push	{r7, lr}
 800fd88:	b0cc      	sub	sp, #304	; 0x130
 800fd8a:	af00      	add	r7, sp, #0
 800fd8c:	4602      	mov	r2, r0
 800fd8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fd92:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fd96:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800fd98:	f107 0310 	add.w	r3, r7, #16
 800fd9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800fda0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fda4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fda8:	2200      	movs	r2, #0
 800fdaa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fdac:	2300      	movs	r3, #0
 800fdae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800fdb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fdb6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fdba:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800fdbe:	8812      	ldrh	r2, [r2, #0]
 800fdc0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800fdc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fdc6:	3302      	adds	r3, #2
 800fdc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fdcc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fdd0:	2218      	movs	r2, #24
 800fdd2:	2100      	movs	r1, #0
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f000 f8db 	bl	800ff90 <Osal_MemSet>
  rq.ogf = 0x3f;
 800fdda:	233f      	movs	r3, #63	; 0x3f
 800fddc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800fde0:	2318      	movs	r3, #24
 800fde2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800fde6:	f107 0310 	add.w	r3, r7, #16
 800fdea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800fdee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fdf2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800fdf6:	f107 030f 	add.w	r3, r7, #15
 800fdfa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800fdfe:	2301      	movs	r3, #1
 800fe00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fe04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fe08:	2100      	movs	r1, #0
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f000 fb4a 	bl	80104a4 <hci_send_req>
 800fe10:	4603      	mov	r3, r0
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	da01      	bge.n	800fe1a <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800fe16:	23ff      	movs	r3, #255	; 0xff
 800fe18:	e004      	b.n	800fe24 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800fe1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fe1e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800fe22:	781b      	ldrb	r3, [r3, #0]
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}

0800fe2e <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800fe2e:	b580      	push	{r7, lr}
 800fe30:	b088      	sub	sp, #32
 800fe32:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800fe34:	2300      	movs	r3, #0
 800fe36:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fe38:	f107 0308 	add.w	r3, r7, #8
 800fe3c:	2218      	movs	r2, #24
 800fe3e:	2100      	movs	r1, #0
 800fe40:	4618      	mov	r0, r3
 800fe42:	f000 f8a5 	bl	800ff90 <Osal_MemSet>
  rq.ogf = 0x03;
 800fe46:	2303      	movs	r3, #3
 800fe48:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800fe4a:	2303      	movs	r3, #3
 800fe4c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800fe4e:	1dfb      	adds	r3, r7, #7
 800fe50:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800fe52:	2301      	movs	r3, #1
 800fe54:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fe56:	f107 0308 	add.w	r3, r7, #8
 800fe5a:	2100      	movs	r1, #0
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f000 fb21 	bl	80104a4 <hci_send_req>
 800fe62:	4603      	mov	r3, r0
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	da01      	bge.n	800fe6c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800fe68:	23ff      	movs	r3, #255	; 0xff
 800fe6a:	e000      	b.n	800fe6e <hci_reset+0x40>
  return status;
 800fe6c:	79fb      	ldrb	r3, [r7, #7]
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3720      	adds	r7, #32
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}

0800fe76 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800fe76:	b590      	push	{r4, r7, lr}
 800fe78:	b0cd      	sub	sp, #308	; 0x134
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	4604      	mov	r4, r0
 800fe7e:	4608      	mov	r0, r1
 800fe80:	4611      	mov	r1, r2
 800fe82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fe86:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800fe8a:	4622      	mov	r2, r4
 800fe8c:	701a      	strb	r2, [r3, #0]
 800fe8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fe92:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800fe96:	4602      	mov	r2, r0
 800fe98:	701a      	strb	r2, [r3, #0]
 800fe9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fe9e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800fea2:	460a      	mov	r2, r1
 800fea4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800fea6:	f107 0310 	add.w	r3, r7, #16
 800feaa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800feae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800feb2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800feb6:	2200      	movs	r2, #0
 800feb8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800feba:	2300      	movs	r3, #0
 800febc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800fec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fec4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fec8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800fecc:	7812      	ldrb	r2, [r2, #0]
 800fece:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fed0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fed4:	3301      	adds	r3, #1
 800fed6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800feda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fede:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fee2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800fee6:	7812      	ldrb	r2, [r2, #0]
 800fee8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800feea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800feee:	3301      	adds	r3, #1
 800fef0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800fef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fef8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fefc:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800ff00:	7812      	ldrb	r2, [r2, #0]
 800ff02:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ff04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ff08:	3301      	adds	r3, #1
 800ff0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ff0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ff12:	2218      	movs	r2, #24
 800ff14:	2100      	movs	r1, #0
 800ff16:	4618      	mov	r0, r3
 800ff18:	f000 f83a 	bl	800ff90 <Osal_MemSet>
  rq.ogf = 0x08;
 800ff1c:	2308      	movs	r3, #8
 800ff1e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800ff22:	2331      	movs	r3, #49	; 0x31
 800ff24:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ff28:	f107 0310 	add.w	r3, r7, #16
 800ff2c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ff30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ff34:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ff38:	f107 030f 	add.w	r3, r7, #15
 800ff3c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ff40:	2301      	movs	r3, #1
 800ff42:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ff46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ff4a:	2100      	movs	r1, #0
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f000 faa9 	bl	80104a4 <hci_send_req>
 800ff52:	4603      	mov	r3, r0
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	da01      	bge.n	800ff5c <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800ff58:	23ff      	movs	r3, #255	; 0xff
 800ff5a:	e004      	b.n	800ff66 <hci_le_set_default_phy+0xf0>
  return status;
 800ff5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ff60:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ff64:	781b      	ldrb	r3, [r3, #0]
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd90      	pop	{r4, r7, pc}

0800ff70 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b084      	sub	sp, #16
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	60f8      	str	r0, [r7, #12]
 800ff78:	60b9      	str	r1, [r7, #8]
 800ff7a:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800ff7c:	687a      	ldr	r2, [r7, #4]
 800ff7e:	68b9      	ldr	r1, [r7, #8]
 800ff80:	68f8      	ldr	r0, [r7, #12]
 800ff82:	f003 fd9b 	bl	8013abc <memcpy>
 800ff86:	4603      	mov	r3, r0
}
 800ff88:	4618      	mov	r0, r3
 800ff8a:	3710      	adds	r7, #16
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	bd80      	pop	{r7, pc}

0800ff90 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b084      	sub	sp, #16
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	60f8      	str	r0, [r7, #12]
 800ff98:	60b9      	str	r1, [r7, #8]
 800ff9a:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800ff9c:	687a      	ldr	r2, [r7, #4]
 800ff9e:	68b9      	ldr	r1, [r7, #8]
 800ffa0:	68f8      	ldr	r0, [r7, #12]
 800ffa2:	f003 fd99 	bl	8013ad8 <memset>
 800ffa6:	4603      	mov	r3, r0
}
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3710      	adds	r7, #16
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}

0800ffb0 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	af00      	add	r7, sp, #0
  return;
 800ffb4:	bf00      	nop
}
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbc:	4770      	bx	lr

0800ffbe <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800ffbe:	b480      	push	{r7}
 800ffc0:	af00      	add	r7, sp, #0
  return;
 800ffc2:	bf00      	nop
}
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffca:	4770      	bx	lr

0800ffcc <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800ffcc:	b480      	push	{r7}
 800ffce:	af00      	add	r7, sp, #0
  return;
 800ffd0:	bf00      	nop
}
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd8:	4770      	bx	lr

0800ffda <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800ffda:	b480      	push	{r7}
 800ffdc:	af00      	add	r7, sp, #0
  return;
 800ffde:	bf00      	nop
}
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe6:	4770      	bx	lr

0800ffe8 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800ffe8:	b480      	push	{r7}
 800ffea:	af00      	add	r7, sp, #0
  return;
 800ffec:	bf00      	nop
}
 800ffee:	46bd      	mov	sp, r7
 800fff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff4:	4770      	bx	lr

0800fff6 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800fff6:	b480      	push	{r7}
 800fff8:	af00      	add	r7, sp, #0
  return;
 800fffa:	bf00      	nop
}
 800fffc:	46bd      	mov	sp, r7
 800fffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010002:	4770      	bx	lr

08010004 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8010004:	b480      	push	{r7}
 8010006:	af00      	add	r7, sp, #0
  return;
 8010008:	bf00      	nop
}
 801000a:	46bd      	mov	sp, r7
 801000c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010010:	4770      	bx	lr

08010012 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8010012:	b480      	push	{r7}
 8010014:	af00      	add	r7, sp, #0
  return;
 8010016:	bf00      	nop
}
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr

08010020 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8010020:	b480      	push	{r7}
 8010022:	af00      	add	r7, sp, #0
  return;
 8010024:	bf00      	nop
}
 8010026:	46bd      	mov	sp, r7
 8010028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002c:	4770      	bx	lr

0801002e <LLS_Init>:
__WEAK void LLS_Init( void )
{
 801002e:	b480      	push	{r7}
 8010030:	af00      	add	r7, sp, #0
  return;
 8010032:	bf00      	nop
}
 8010034:	46bd      	mov	sp, r7
 8010036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003a:	4770      	bx	lr

0801003c <TPS_Init>:
__WEAK void TPS_Init( void )
{
 801003c:	b480      	push	{r7}
 801003e:	af00      	add	r7, sp, #0
  return;
 8010040:	bf00      	nop
}
 8010042:	46bd      	mov	sp, r7
 8010044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010048:	4770      	bx	lr

0801004a <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 801004a:	b480      	push	{r7}
 801004c:	af00      	add	r7, sp, #0
  return;
 801004e:	bf00      	nop
}
 8010050:	46bd      	mov	sp, r7
 8010052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010056:	4770      	bx	lr

08010058 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8010058:	b480      	push	{r7}
 801005a:	af00      	add	r7, sp, #0
  return;
 801005c:	bf00      	nop
}
 801005e:	46bd      	mov	sp, r7
 8010060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010064:	4770      	bx	lr

08010066 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8010066:	b480      	push	{r7}
 8010068:	af00      	add	r7, sp, #0
  return;
 801006a:	bf00      	nop
}
 801006c:	46bd      	mov	sp, r7
 801006e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010072:	4770      	bx	lr

08010074 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8010074:	b480      	push	{r7}
 8010076:	af00      	add	r7, sp, #0
  return;
 8010078:	bf00      	nop
}
 801007a:	46bd      	mov	sp, r7
 801007c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010080:	4770      	bx	lr

08010082 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8010082:	b480      	push	{r7}
 8010084:	af00      	add	r7, sp, #0
  return;
 8010086:	bf00      	nop
}
 8010088:	46bd      	mov	sp, r7
 801008a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008e:	4770      	bx	lr

08010090 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8010090:	b480      	push	{r7}
 8010092:	af00      	add	r7, sp, #0
  return;
 8010094:	bf00      	nop
}
 8010096:	46bd      	mov	sp, r7
 8010098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009c:	4770      	bx	lr
	...

080100a0 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80100a4:	4b04      	ldr	r3, [pc, #16]	; (80100b8 <SVCCTL_Init+0x18>)
 80100a6:	2200      	movs	r2, #0
 80100a8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80100aa:	4b04      	ldr	r3, [pc, #16]	; (80100bc <SVCCTL_Init+0x1c>)
 80100ac:	2200      	movs	r2, #0
 80100ae:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80100b0:	f000 f806 	bl	80100c0 <SVCCTL_SvcInit>

  return;
 80100b4:	bf00      	nop
}
 80100b6:	bd80      	pop	{r7, pc}
 80100b8:	200001b0 	.word	0x200001b0
 80100bc:	200001d0 	.word	0x200001d0

080100c0 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	af00      	add	r7, sp, #0
  BAS_Init();
 80100c4:	f7ff ff74 	bl	800ffb0 <BAS_Init>

  BLS_Init();
 80100c8:	f7ff ff79 	bl	800ffbe <BLS_Init>

  CRS_STM_Init();
 80100cc:	f7ff ff7e 	bl	800ffcc <CRS_STM_Init>

  DIS_Init();
 80100d0:	f7ff ff83 	bl	800ffda <DIS_Init>

  EDS_STM_Init();
 80100d4:	f7ff ff88 	bl	800ffe8 <EDS_STM_Init>

  HIDS_Init();
 80100d8:	f7ff ff8d 	bl	800fff6 <HIDS_Init>

  HRS_Init();
 80100dc:	f7ff ff92 	bl	8010004 <HRS_Init>

  HTS_Init();
 80100e0:	f7ff ff97 	bl	8010012 <HTS_Init>

  IAS_Init();
 80100e4:	f7ff ff9c 	bl	8010020 <IAS_Init>

  LLS_Init();
 80100e8:	f7ff ffa1 	bl	801002e <LLS_Init>

  TPS_Init();
 80100ec:	f7ff ffa6 	bl	801003c <TPS_Init>

  MOTENV_STM_Init();
 80100f0:	f7ff ffab 	bl	801004a <MOTENV_STM_Init>

  P2PS_STM_Init();
 80100f4:	f7ff ffb0 	bl	8010058 <P2PS_STM_Init>

  ZDD_STM_Init();
 80100f8:	f7ff ffb5 	bl	8010066 <ZDD_STM_Init>

  OTAS_STM_Init();
 80100fc:	f7ff ffba 	bl	8010074 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8010100:	f7ff ffc6 	bl	8010090 <BVOPUS_STM_Init>

  MESH_Init();
 8010104:	f7ff ffbd 	bl	8010082 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8010108:	f002 f8c8 	bl	801229c <SVCCTL_InitCustomSvc>
  
  return;
 801010c:	bf00      	nop
}
 801010e:	bd80      	pop	{r7, pc}

08010110 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8010110:	b480      	push	{r7}
 8010112:	b083      	sub	sp, #12
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8010118:	4b09      	ldr	r3, [pc, #36]	; (8010140 <SVCCTL_RegisterSvcHandler+0x30>)
 801011a:	7f1b      	ldrb	r3, [r3, #28]
 801011c:	4619      	mov	r1, r3
 801011e:	4a08      	ldr	r2, [pc, #32]	; (8010140 <SVCCTL_RegisterSvcHandler+0x30>)
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8010126:	4b06      	ldr	r3, [pc, #24]	; (8010140 <SVCCTL_RegisterSvcHandler+0x30>)
 8010128:	7f1b      	ldrb	r3, [r3, #28]
 801012a:	3301      	adds	r3, #1
 801012c:	b2da      	uxtb	r2, r3
 801012e:	4b04      	ldr	r3, [pc, #16]	; (8010140 <SVCCTL_RegisterSvcHandler+0x30>)
 8010130:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8010132:	bf00      	nop
}
 8010134:	370c      	adds	r7, #12
 8010136:	46bd      	mov	sp, r7
 8010138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013c:	4770      	bx	lr
 801013e:	bf00      	nop
 8010140:	200001b0 	.word	0x200001b0

08010144 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b086      	sub	sp, #24
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	3301      	adds	r3, #1
 8010150:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8010152:	2300      	movs	r3, #0
 8010154:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8010156:	693b      	ldr	r3, [r7, #16]
 8010158:	781b      	ldrb	r3, [r3, #0]
 801015a:	2bff      	cmp	r3, #255	; 0xff
 801015c:	d125      	bne.n	80101aa <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	3302      	adds	r3, #2
 8010162:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	881b      	ldrh	r3, [r3, #0]
 8010168:	b29b      	uxth	r3, r3
 801016a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801016e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010172:	d118      	bne.n	80101a6 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8010174:	2300      	movs	r3, #0
 8010176:	757b      	strb	r3, [r7, #21]
 8010178:	e00d      	b.n	8010196 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 801017a:	7d7b      	ldrb	r3, [r7, #21]
 801017c:	4a1a      	ldr	r2, [pc, #104]	; (80101e8 <SVCCTL_UserEvtRx+0xa4>)
 801017e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	4798      	blx	r3
 8010186:	4603      	mov	r3, r0
 8010188:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 801018a:	7dfb      	ldrb	r3, [r7, #23]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d108      	bne.n	80101a2 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8010190:	7d7b      	ldrb	r3, [r7, #21]
 8010192:	3301      	adds	r3, #1
 8010194:	757b      	strb	r3, [r7, #21]
 8010196:	4b14      	ldr	r3, [pc, #80]	; (80101e8 <SVCCTL_UserEvtRx+0xa4>)
 8010198:	7f1b      	ldrb	r3, [r3, #28]
 801019a:	7d7a      	ldrb	r2, [r7, #21]
 801019c:	429a      	cmp	r2, r3
 801019e:	d3ec      	bcc.n	801017a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80101a0:	e002      	b.n	80101a8 <SVCCTL_UserEvtRx+0x64>
              break;
 80101a2:	bf00      	nop
          break;
 80101a4:	e000      	b.n	80101a8 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80101a6:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80101a8:	e000      	b.n	80101ac <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80101aa:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 80101ac:	7dfb      	ldrb	r3, [r7, #23]
 80101ae:	2b02      	cmp	r3, #2
 80101b0:	d00f      	beq.n	80101d2 <SVCCTL_UserEvtRx+0x8e>
 80101b2:	2b02      	cmp	r3, #2
 80101b4:	dc10      	bgt.n	80101d8 <SVCCTL_UserEvtRx+0x94>
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d002      	beq.n	80101c0 <SVCCTL_UserEvtRx+0x7c>
 80101ba:	2b01      	cmp	r3, #1
 80101bc:	d006      	beq.n	80101cc <SVCCTL_UserEvtRx+0x88>
 80101be:	e00b      	b.n	80101d8 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f000 ff7f 	bl	80110c4 <SVCCTL_App_Notification>
 80101c6:	4603      	mov	r3, r0
 80101c8:	75bb      	strb	r3, [r7, #22]
      break;
 80101ca:	e008      	b.n	80101de <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80101cc:	2301      	movs	r3, #1
 80101ce:	75bb      	strb	r3, [r7, #22]
      break;
 80101d0:	e005      	b.n	80101de <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80101d2:	2300      	movs	r3, #0
 80101d4:	75bb      	strb	r3, [r7, #22]
      break;
 80101d6:	e002      	b.n	80101de <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80101d8:	2301      	movs	r3, #1
 80101da:	75bb      	strb	r3, [r7, #22]
      break;
 80101dc:	bf00      	nop
  }

  return (return_status);
 80101de:	7dbb      	ldrb	r3, [r7, #22]
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3718      	adds	r7, #24
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}
 80101e8:	200001b0 	.word	0x200001b0

080101ec <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b088      	sub	sp, #32
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80101f4:	f107 030c 	add.w	r3, r7, #12
 80101f8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8010200:	69fb      	ldr	r3, [r7, #28]
 8010202:	212e      	movs	r1, #46	; 0x2e
 8010204:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8010208:	f000 fae2 	bl	80107d0 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 801020c:	69fb      	ldr	r3, [r7, #28]
 801020e:	330b      	adds	r3, #11
 8010210:	78db      	ldrb	r3, [r3, #3]
}
 8010212:	4618      	mov	r0, r3
 8010214:	3720      	adds	r7, #32
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}

0801021a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 801021a:	b580      	push	{r7, lr}
 801021c:	b088      	sub	sp, #32
 801021e:	af00      	add	r7, sp, #0
 8010220:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8010222:	f107 030c 	add.w	r3, r7, #12
 8010226:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 801022e:	69fb      	ldr	r3, [r7, #28]
 8010230:	210f      	movs	r1, #15
 8010232:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8010236:	f000 facb 	bl	80107d0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 801023a:	69fb      	ldr	r3, [r7, #28]
 801023c:	330b      	adds	r3, #11
 801023e:	78db      	ldrb	r3, [r3, #3]
}
 8010240:	4618      	mov	r0, r3
 8010242:	3720      	adds	r7, #32
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}

08010248 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b088      	sub	sp, #32
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8010250:	f107 030c 	add.w	r3, r7, #12
 8010254:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8010256:	69fb      	ldr	r3, [r7, #28]
 8010258:	687a      	ldr	r2, [r7, #4]
 801025a:	2110      	movs	r1, #16
 801025c:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8010260:	f000 fab6 	bl	80107d0 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8010264:	69fb      	ldr	r3, [r7, #28]
 8010266:	330b      	adds	r3, #11
 8010268:	78db      	ldrb	r3, [r3, #3]
}
 801026a:	4618      	mov	r0, r3
 801026c:	3720      	adds	r7, #32
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}
	...

08010274 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8010274:	b480      	push	{r7}
 8010276:	b08b      	sub	sp, #44	; 0x2c
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 801027c:	2300      	movs	r3, #0
 801027e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8010280:	2300      	movs	r3, #0
 8010282:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8010284:	2300      	movs	r3, #0
 8010286:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8010288:	2300      	movs	r3, #0
 801028a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 801028c:	2300      	movs	r3, #0
 801028e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8010290:	2300      	movs	r3, #0
 8010292:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8010294:	2300      	movs	r3, #0
 8010296:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8010298:	2300      	movs	r3, #0
 801029a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 801029c:	4b4a      	ldr	r3, [pc, #296]	; (80103c8 <SHCI_GetWirelessFwInfo+0x154>)
 801029e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80102a4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80102a6:	693b      	ldr	r3, [r7, #16]
 80102a8:	009b      	lsls	r3, r3, #2
 80102aa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80102ae:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	4a44      	ldr	r2, [pc, #272]	; (80103cc <SHCI_GetWirelessFwInfo+0x158>)
 80102bc:	4293      	cmp	r3, r2
 80102be:	d10f      	bne.n	80102e0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	695b      	ldr	r3, [r3, #20]
 80102c4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	699b      	ldr	r3, [r3, #24]
 80102ca:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	69db      	ldr	r3, [r3, #28]
 80102d0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80102d2:	68bb      	ldr	r3, [r7, #8]
 80102d4:	68db      	ldr	r3, [r3, #12]
 80102d6:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	691b      	ldr	r3, [r3, #16]
 80102dc:	617b      	str	r3, [r7, #20]
 80102de:	e01a      	b.n	8010316 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	009b      	lsls	r3, r3, #2
 80102e4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80102e8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80102ec:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	691b      	ldr	r3, [r3, #16]
 80102f4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	695b      	ldr	r3, [r3, #20]
 80102fc:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	699b      	ldr	r3, [r3, #24]
 8010304:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	685b      	ldr	r3, [r3, #4]
 801030c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	689b      	ldr	r3, [r3, #8]
 8010314:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8010316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010318:	0e1b      	lsrs	r3, r3, #24
 801031a:	b2da      	uxtb	r2, r3
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8010320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010322:	0c1b      	lsrs	r3, r3, #16
 8010324:	b2da      	uxtb	r2, r3
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 801032a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801032c:	0a1b      	lsrs	r3, r3, #8
 801032e:	b2da      	uxtb	r2, r3
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8010334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010336:	091b      	lsrs	r3, r3, #4
 8010338:	b2db      	uxtb	r3, r3
 801033a:	f003 030f 	and.w	r3, r3, #15
 801033e:	b2da      	uxtb	r2, r3
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8010344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010346:	b2db      	uxtb	r3, r3
 8010348:	f003 030f 	and.w	r3, r3, #15
 801034c:	b2da      	uxtb	r2, r3
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8010352:	6a3b      	ldr	r3, [r7, #32]
 8010354:	0e1b      	lsrs	r3, r3, #24
 8010356:	b2da      	uxtb	r2, r3
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 801035c:	6a3b      	ldr	r3, [r7, #32]
 801035e:	0c1b      	lsrs	r3, r3, #16
 8010360:	b2da      	uxtb	r2, r3
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8010366:	6a3b      	ldr	r3, [r7, #32]
 8010368:	0a1b      	lsrs	r3, r3, #8
 801036a:	b2da      	uxtb	r2, r3
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8010370:	6a3b      	ldr	r3, [r7, #32]
 8010372:	b2da      	uxtb	r2, r3
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8010378:	69fb      	ldr	r3, [r7, #28]
 801037a:	b2da      	uxtb	r2, r3
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8010380:	69bb      	ldr	r3, [r7, #24]
 8010382:	0e1b      	lsrs	r3, r3, #24
 8010384:	b2da      	uxtb	r2, r3
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801038a:	69bb      	ldr	r3, [r7, #24]
 801038c:	0c1b      	lsrs	r3, r3, #16
 801038e:	b2da      	uxtb	r2, r3
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8010394:	69bb      	ldr	r3, [r7, #24]
 8010396:	0a1b      	lsrs	r3, r3, #8
 8010398:	b2da      	uxtb	r2, r3
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	0e1b      	lsrs	r3, r3, #24
 80103a2:	b2da      	uxtb	r2, r3
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	0c1b      	lsrs	r3, r3, #16
 80103ac:	b2da      	uxtb	r2, r3
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80103b2:	697b      	ldr	r3, [r7, #20]
 80103b4:	b2da      	uxtb	r2, r3
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80103ba:	2300      	movs	r3, #0
}
 80103bc:	4618      	mov	r0, r3
 80103be:	372c      	adds	r7, #44	; 0x2c
 80103c0:	46bd      	mov	sp, r7
 80103c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c6:	4770      	bx	lr
 80103c8:	58004000 	.word	0x58004000
 80103cc:	a94656b9 	.word	0xa94656b9

080103d0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b082      	sub	sp, #8
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
 80103d8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	685b      	ldr	r3, [r3, #4]
 80103de:	4a08      	ldr	r2, [pc, #32]	; (8010400 <hci_init+0x30>)
 80103e0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80103e2:	4a08      	ldr	r2, [pc, #32]	; (8010404 <hci_init+0x34>)
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80103e8:	4806      	ldr	r0, [pc, #24]	; (8010404 <hci_init+0x34>)
 80103ea:	f000 f973 	bl	80106d4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	4618      	mov	r0, r3
 80103f4:	f000 f8d4 	bl	80105a0 <TlInit>

  return;
 80103f8:	bf00      	nop
}
 80103fa:	3708      	adds	r7, #8
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}
 8010400:	200008bc 	.word	0x200008bc
 8010404:	20000894 	.word	0x20000894

08010408 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b084      	sub	sp, #16
 801040c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 801040e:	4822      	ldr	r0, [pc, #136]	; (8010498 <hci_user_evt_proc+0x90>)
 8010410:	f000 fd28 	bl	8010e64 <LST_is_empty>
 8010414:	4603      	mov	r3, r0
 8010416:	2b00      	cmp	r3, #0
 8010418:	d12b      	bne.n	8010472 <hci_user_evt_proc+0x6a>
 801041a:	4b20      	ldr	r3, [pc, #128]	; (801049c <hci_user_evt_proc+0x94>)
 801041c:	781b      	ldrb	r3, [r3, #0]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d027      	beq.n	8010472 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8010422:	f107 030c 	add.w	r3, r7, #12
 8010426:	4619      	mov	r1, r3
 8010428:	481b      	ldr	r0, [pc, #108]	; (8010498 <hci_user_evt_proc+0x90>)
 801042a:	f000 fdaa 	bl	8010f82 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 801042e:	4b1c      	ldr	r3, [pc, #112]	; (80104a0 <hci_user_evt_proc+0x98>)
 8010430:	69db      	ldr	r3, [r3, #28]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d00c      	beq.n	8010450 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 801043a:	2301      	movs	r3, #1
 801043c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 801043e:	4b18      	ldr	r3, [pc, #96]	; (80104a0 <hci_user_evt_proc+0x98>)
 8010440:	69db      	ldr	r3, [r3, #28]
 8010442:	1d3a      	adds	r2, r7, #4
 8010444:	4610      	mov	r0, r2
 8010446:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8010448:	793a      	ldrb	r2, [r7, #4]
 801044a:	4b14      	ldr	r3, [pc, #80]	; (801049c <hci_user_evt_proc+0x94>)
 801044c:	701a      	strb	r2, [r3, #0]
 801044e:	e002      	b.n	8010456 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8010450:	4b12      	ldr	r3, [pc, #72]	; (801049c <hci_user_evt_proc+0x94>)
 8010452:	2201      	movs	r2, #1
 8010454:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8010456:	4b11      	ldr	r3, [pc, #68]	; (801049c <hci_user_evt_proc+0x94>)
 8010458:	781b      	ldrb	r3, [r3, #0]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d004      	beq.n	8010468 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	4618      	mov	r0, r3
 8010462:	f000 fc03 	bl	8010c6c <TL_MM_EvtDone>
 8010466:	e004      	b.n	8010472 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	4619      	mov	r1, r3
 801046c:	480a      	ldr	r0, [pc, #40]	; (8010498 <hci_user_evt_proc+0x90>)
 801046e:	f000 fd1b 	bl	8010ea8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8010472:	4809      	ldr	r0, [pc, #36]	; (8010498 <hci_user_evt_proc+0x90>)
 8010474:	f000 fcf6 	bl	8010e64 <LST_is_empty>
 8010478:	4603      	mov	r3, r0
 801047a:	2b00      	cmp	r3, #0
 801047c:	d107      	bne.n	801048e <hci_user_evt_proc+0x86>
 801047e:	4b07      	ldr	r3, [pc, #28]	; (801049c <hci_user_evt_proc+0x94>)
 8010480:	781b      	ldrb	r3, [r3, #0]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d003      	beq.n	801048e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8010486:	4804      	ldr	r0, [pc, #16]	; (8010498 <hci_user_evt_proc+0x90>)
 8010488:	f001 f834 	bl	80114f4 <hci_notify_asynch_evt>
  }


  return;
 801048c:	bf00      	nop
 801048e:	bf00      	nop
}
 8010490:	3710      	adds	r7, #16
 8010492:	46bd      	mov	sp, r7
 8010494:	bd80      	pop	{r7, pc}
 8010496:	bf00      	nop
 8010498:	200001d8 	.word	0x200001d8
 801049c:	200001e4 	.word	0x200001e4
 80104a0:	20000894 	.word	0x20000894

080104a4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b088      	sub	sp, #32
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
 80104ac:	460b      	mov	r3, r1
 80104ae:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80104b0:	2000      	movs	r0, #0
 80104b2:	f000 f8cb 	bl	801064c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80104b6:	2300      	movs	r3, #0
 80104b8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	885b      	ldrh	r3, [r3, #2]
 80104be:	b21b      	sxth	r3, r3
 80104c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80104c4:	b21a      	sxth	r2, r3
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	881b      	ldrh	r3, [r3, #0]
 80104ca:	029b      	lsls	r3, r3, #10
 80104cc:	b21b      	sxth	r3, r3
 80104ce:	4313      	orrs	r3, r2
 80104d0:	b21b      	sxth	r3, r3
 80104d2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	68db      	ldr	r3, [r3, #12]
 80104d8:	b2d9      	uxtb	r1, r3
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	689a      	ldr	r2, [r3, #8]
 80104de:	8bbb      	ldrh	r3, [r7, #28]
 80104e0:	4618      	mov	r0, r3
 80104e2:	f000 f88d 	bl	8010600 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80104e6:	e04e      	b.n	8010586 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80104e8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80104ec:	f001 f819 	bl	8011522 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80104f0:	e043      	b.n	801057a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80104f2:	f107 030c 	add.w	r3, r7, #12
 80104f6:	4619      	mov	r1, r3
 80104f8:	4828      	ldr	r0, [pc, #160]	; (801059c <hci_send_req+0xf8>)
 80104fa:	f000 fd42 	bl	8010f82 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	7a5b      	ldrb	r3, [r3, #9]
 8010502:	2b0f      	cmp	r3, #15
 8010504:	d114      	bne.n	8010530 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	330b      	adds	r3, #11
 801050a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 801050c:	693b      	ldr	r3, [r7, #16]
 801050e:	885b      	ldrh	r3, [r3, #2]
 8010510:	b29b      	uxth	r3, r3
 8010512:	8bba      	ldrh	r2, [r7, #28]
 8010514:	429a      	cmp	r2, r3
 8010516:	d104      	bne.n	8010522 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	691b      	ldr	r3, [r3, #16]
 801051c:	693a      	ldr	r2, [r7, #16]
 801051e:	7812      	ldrb	r2, [r2, #0]
 8010520:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	785b      	ldrb	r3, [r3, #1]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d027      	beq.n	801057a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801052a:	2301      	movs	r3, #1
 801052c:	77fb      	strb	r3, [r7, #31]
 801052e:	e024      	b.n	801057a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	330b      	adds	r3, #11
 8010534:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8010536:	69bb      	ldr	r3, [r7, #24]
 8010538:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801053c:	b29b      	uxth	r3, r3
 801053e:	8bba      	ldrh	r2, [r7, #28]
 8010540:	429a      	cmp	r2, r3
 8010542:	d114      	bne.n	801056e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	7a9b      	ldrb	r3, [r3, #10]
 8010548:	3b03      	subs	r3, #3
 801054a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	695a      	ldr	r2, [r3, #20]
 8010550:	7dfb      	ldrb	r3, [r7, #23]
 8010552:	429a      	cmp	r2, r3
 8010554:	bfa8      	it	ge
 8010556:	461a      	movge	r2, r3
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	6918      	ldr	r0, [r3, #16]
 8010560:	69bb      	ldr	r3, [r7, #24]
 8010562:	1cd9      	adds	r1, r3, #3
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	695b      	ldr	r3, [r3, #20]
 8010568:	461a      	mov	r2, r3
 801056a:	f003 faa7 	bl	8013abc <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 801056e:	69bb      	ldr	r3, [r7, #24]
 8010570:	781b      	ldrb	r3, [r3, #0]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d001      	beq.n	801057a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8010576:	2301      	movs	r3, #1
 8010578:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 801057a:	4808      	ldr	r0, [pc, #32]	; (801059c <hci_send_req+0xf8>)
 801057c:	f000 fc72 	bl	8010e64 <LST_is_empty>
 8010580:	4603      	mov	r3, r0
 8010582:	2b00      	cmp	r3, #0
 8010584:	d0b5      	beq.n	80104f2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8010586:	7ffb      	ldrb	r3, [r7, #31]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d0ad      	beq.n	80104e8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 801058c:	2001      	movs	r0, #1
 801058e:	f000 f85d 	bl	801064c <NotifyCmdStatus>

  return 0;
 8010592:	2300      	movs	r3, #0
}
 8010594:	4618      	mov	r0, r3
 8010596:	3720      	adds	r7, #32
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}
 801059c:	200008b4 	.word	0x200008b4

080105a0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b086      	sub	sp, #24
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80105a8:	480f      	ldr	r0, [pc, #60]	; (80105e8 <TlInit+0x48>)
 80105aa:	f000 fc4b 	bl	8010e44 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80105ae:	4a0f      	ldr	r2, [pc, #60]	; (80105ec <TlInit+0x4c>)
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80105b4:	480e      	ldr	r0, [pc, #56]	; (80105f0 <TlInit+0x50>)
 80105b6:	f000 fc45 	bl	8010e44 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80105ba:	4b0e      	ldr	r3, [pc, #56]	; (80105f4 <TlInit+0x54>)
 80105bc:	2201      	movs	r2, #1
 80105be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80105c0:	4b0d      	ldr	r3, [pc, #52]	; (80105f8 <TlInit+0x58>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d00a      	beq.n	80105de <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80105cc:	4b0b      	ldr	r3, [pc, #44]	; (80105fc <TlInit+0x5c>)
 80105ce:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80105d0:	4b09      	ldr	r3, [pc, #36]	; (80105f8 <TlInit+0x58>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	f107 0208 	add.w	r2, r7, #8
 80105d8:	4610      	mov	r0, r2
 80105da:	4798      	blx	r3
  }

  return;
 80105dc:	bf00      	nop
 80105de:	bf00      	nop
}
 80105e0:	3718      	adds	r7, #24
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bd80      	pop	{r7, pc}
 80105e6:	bf00      	nop
 80105e8:	200008b4 	.word	0x200008b4
 80105ec:	200001e0 	.word	0x200001e0
 80105f0:	200001d8 	.word	0x200001d8
 80105f4:	200001e4 	.word	0x200001e4
 80105f8:	20000894 	.word	0x20000894
 80105fc:	0801068d 	.word	0x0801068d

08010600 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b082      	sub	sp, #8
 8010604:	af00      	add	r7, sp, #0
 8010606:	4603      	mov	r3, r0
 8010608:	603a      	str	r2, [r7, #0]
 801060a:	80fb      	strh	r3, [r7, #6]
 801060c:	460b      	mov	r3, r1
 801060e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8010610:	4b0c      	ldr	r3, [pc, #48]	; (8010644 <SendCmd+0x44>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	88fa      	ldrh	r2, [r7, #6]
 8010616:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 801061a:	4b0a      	ldr	r3, [pc, #40]	; (8010644 <SendCmd+0x44>)
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	797a      	ldrb	r2, [r7, #5]
 8010620:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8010622:	4b08      	ldr	r3, [pc, #32]	; (8010644 <SendCmd+0x44>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	330c      	adds	r3, #12
 8010628:	797a      	ldrb	r2, [r7, #5]
 801062a:	6839      	ldr	r1, [r7, #0]
 801062c:	4618      	mov	r0, r3
 801062e:	f003 fa45 	bl	8013abc <memcpy>

  hciContext.io.Send(0,0);
 8010632:	4b05      	ldr	r3, [pc, #20]	; (8010648 <SendCmd+0x48>)
 8010634:	691b      	ldr	r3, [r3, #16]
 8010636:	2100      	movs	r1, #0
 8010638:	2000      	movs	r0, #0
 801063a:	4798      	blx	r3

  return;
 801063c:	bf00      	nop
}
 801063e:	3708      	adds	r7, #8
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}
 8010644:	200001e0 	.word	0x200001e0
 8010648:	20000894 	.word	0x20000894

0801064c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b082      	sub	sp, #8
 8010650:	af00      	add	r7, sp, #0
 8010652:	4603      	mov	r3, r0
 8010654:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8010656:	79fb      	ldrb	r3, [r7, #7]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d108      	bne.n	801066e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 801065c:	4b0a      	ldr	r3, [pc, #40]	; (8010688 <NotifyCmdStatus+0x3c>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d00d      	beq.n	8010680 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8010664:	4b08      	ldr	r3, [pc, #32]	; (8010688 <NotifyCmdStatus+0x3c>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	2000      	movs	r0, #0
 801066a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 801066c:	e008      	b.n	8010680 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 801066e:	4b06      	ldr	r3, [pc, #24]	; (8010688 <NotifyCmdStatus+0x3c>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d004      	beq.n	8010680 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8010676:	4b04      	ldr	r3, [pc, #16]	; (8010688 <NotifyCmdStatus+0x3c>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	2001      	movs	r0, #1
 801067c:	4798      	blx	r3
  return;
 801067e:	bf00      	nop
 8010680:	bf00      	nop
}
 8010682:	3708      	adds	r7, #8
 8010684:	46bd      	mov	sp, r7
 8010686:	bd80      	pop	{r7, pc}
 8010688:	200008bc 	.word	0x200008bc

0801068c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b082      	sub	sp, #8
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	7a5b      	ldrb	r3, [r3, #9]
 8010698:	2b0f      	cmp	r3, #15
 801069a:	d003      	beq.n	80106a4 <TlEvtReceived+0x18>
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	7a5b      	ldrb	r3, [r3, #9]
 80106a0:	2b0e      	cmp	r3, #14
 80106a2:	d107      	bne.n	80106b4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80106a4:	6879      	ldr	r1, [r7, #4]
 80106a6:	4809      	ldr	r0, [pc, #36]	; (80106cc <TlEvtReceived+0x40>)
 80106a8:	f000 fc24 	bl	8010ef4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80106ac:	2000      	movs	r0, #0
 80106ae:	f000 ff2d 	bl	801150c <hci_cmd_resp_release>
 80106b2:	e006      	b.n	80106c2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80106b4:	6879      	ldr	r1, [r7, #4]
 80106b6:	4806      	ldr	r0, [pc, #24]	; (80106d0 <TlEvtReceived+0x44>)
 80106b8:	f000 fc1c 	bl	8010ef4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80106bc:	4804      	ldr	r0, [pc, #16]	; (80106d0 <TlEvtReceived+0x44>)
 80106be:	f000 ff19 	bl	80114f4 <hci_notify_asynch_evt>
  }

  return;
 80106c2:	bf00      	nop
}
 80106c4:	3708      	adds	r7, #8
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}
 80106ca:	bf00      	nop
 80106cc:	200008b4 	.word	0x200008b4
 80106d0:	200001d8 	.word	0x200001d8

080106d4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80106d4:	b480      	push	{r7}
 80106d6:	b083      	sub	sp, #12
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	4a05      	ldr	r2, [pc, #20]	; (80106f4 <hci_register_io_bus+0x20>)
 80106e0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	4a04      	ldr	r2, [pc, #16]	; (80106f8 <hci_register_io_bus+0x24>)
 80106e6:	611a      	str	r2, [r3, #16]

  return;
 80106e8:	bf00      	nop
}
 80106ea:	370c      	adds	r7, #12
 80106ec:	46bd      	mov	sp, r7
 80106ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f2:	4770      	bx	lr
 80106f4:	080109e5 	.word	0x080109e5
 80106f8:	08010a4d 	.word	0x08010a4d

080106fc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8010706:	683b      	ldr	r3, [r7, #0]
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	4a08      	ldr	r2, [pc, #32]	; (801072c <shci_init+0x30>)
 801070c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 801070e:	4a08      	ldr	r2, [pc, #32]	; (8010730 <shci_init+0x34>)
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8010714:	4806      	ldr	r0, [pc, #24]	; (8010730 <shci_init+0x34>)
 8010716:	f000 f911 	bl	801093c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	4618      	mov	r0, r3
 8010720:	f000 f894 	bl	801084c <TlInit>

  return;
 8010724:	bf00      	nop
}
 8010726:	3708      	adds	r7, #8
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}
 801072c:	200008e0 	.word	0x200008e0
 8010730:	200008c0 	.word	0x200008c0

08010734 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b084      	sub	sp, #16
 8010738:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801073a:	4822      	ldr	r0, [pc, #136]	; (80107c4 <shci_user_evt_proc+0x90>)
 801073c:	f000 fb92 	bl	8010e64 <LST_is_empty>
 8010740:	4603      	mov	r3, r0
 8010742:	2b00      	cmp	r3, #0
 8010744:	d12b      	bne.n	801079e <shci_user_evt_proc+0x6a>
 8010746:	4b20      	ldr	r3, [pc, #128]	; (80107c8 <shci_user_evt_proc+0x94>)
 8010748:	781b      	ldrb	r3, [r3, #0]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d027      	beq.n	801079e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801074e:	f107 030c 	add.w	r3, r7, #12
 8010752:	4619      	mov	r1, r3
 8010754:	481b      	ldr	r0, [pc, #108]	; (80107c4 <shci_user_evt_proc+0x90>)
 8010756:	f000 fc14 	bl	8010f82 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 801075a:	4b1c      	ldr	r3, [pc, #112]	; (80107cc <shci_user_evt_proc+0x98>)
 801075c:	69db      	ldr	r3, [r3, #28]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d00c      	beq.n	801077c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8010766:	2301      	movs	r3, #1
 8010768:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 801076a:	4b18      	ldr	r3, [pc, #96]	; (80107cc <shci_user_evt_proc+0x98>)
 801076c:	69db      	ldr	r3, [r3, #28]
 801076e:	1d3a      	adds	r2, r7, #4
 8010770:	4610      	mov	r0, r2
 8010772:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8010774:	793a      	ldrb	r2, [r7, #4]
 8010776:	4b14      	ldr	r3, [pc, #80]	; (80107c8 <shci_user_evt_proc+0x94>)
 8010778:	701a      	strb	r2, [r3, #0]
 801077a:	e002      	b.n	8010782 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 801077c:	4b12      	ldr	r3, [pc, #72]	; (80107c8 <shci_user_evt_proc+0x94>)
 801077e:	2201      	movs	r2, #1
 8010780:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8010782:	4b11      	ldr	r3, [pc, #68]	; (80107c8 <shci_user_evt_proc+0x94>)
 8010784:	781b      	ldrb	r3, [r3, #0]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d004      	beq.n	8010794 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	4618      	mov	r0, r3
 801078e:	f000 fa6d 	bl	8010c6c <TL_MM_EvtDone>
 8010792:	e004      	b.n	801079e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	4619      	mov	r1, r3
 8010798:	480a      	ldr	r0, [pc, #40]	; (80107c4 <shci_user_evt_proc+0x90>)
 801079a:	f000 fb85 	bl	8010ea8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801079e:	4809      	ldr	r0, [pc, #36]	; (80107c4 <shci_user_evt_proc+0x90>)
 80107a0:	f000 fb60 	bl	8010e64 <LST_is_empty>
 80107a4:	4603      	mov	r3, r0
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d107      	bne.n	80107ba <shci_user_evt_proc+0x86>
 80107aa:	4b07      	ldr	r3, [pc, #28]	; (80107c8 <shci_user_evt_proc+0x94>)
 80107ac:	781b      	ldrb	r3, [r3, #0]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d003      	beq.n	80107ba <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80107b2:	4804      	ldr	r0, [pc, #16]	; (80107c4 <shci_user_evt_proc+0x90>)
 80107b4:	f7f0 fe76 	bl	80014a4 <shci_notify_asynch_evt>
  }


  return;
 80107b8:	bf00      	nop
 80107ba:	bf00      	nop
}
 80107bc:	3710      	adds	r7, #16
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}
 80107c2:	bf00      	nop
 80107c4:	200001e8 	.word	0x200001e8
 80107c8:	200001f8 	.word	0x200001f8
 80107cc:	200008c0 	.word	0x200008c0

080107d0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b084      	sub	sp, #16
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	60ba      	str	r2, [r7, #8]
 80107d8:	607b      	str	r3, [r7, #4]
 80107da:	4603      	mov	r3, r0
 80107dc:	81fb      	strh	r3, [r7, #14]
 80107de:	460b      	mov	r3, r1
 80107e0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80107e2:	2000      	movs	r0, #0
 80107e4:	f000 f864 	bl	80108b0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80107e8:	4b16      	ldr	r3, [pc, #88]	; (8010844 <shci_send+0x74>)
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	89fa      	ldrh	r2, [r7, #14]
 80107ee:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80107f2:	4b14      	ldr	r3, [pc, #80]	; (8010844 <shci_send+0x74>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	7b7a      	ldrb	r2, [r7, #13]
 80107f8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80107fa:	4b12      	ldr	r3, [pc, #72]	; (8010844 <shci_send+0x74>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	330c      	adds	r3, #12
 8010800:	7b7a      	ldrb	r2, [r7, #13]
 8010802:	68b9      	ldr	r1, [r7, #8]
 8010804:	4618      	mov	r0, r3
 8010806:	f003 f959 	bl	8013abc <memcpy>

  shciContext.io.Send(0,0);
 801080a:	4b0f      	ldr	r3, [pc, #60]	; (8010848 <shci_send+0x78>)
 801080c:	691b      	ldr	r3, [r3, #16]
 801080e:	2100      	movs	r1, #0
 8010810:	2000      	movs	r0, #0
 8010812:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8010814:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8010818:	f7f0 fe5b 	bl	80014d2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f103 0008 	add.w	r0, r3, #8
 8010822:	4b08      	ldr	r3, [pc, #32]	; (8010844 <shci_send+0x74>)
 8010824:	6819      	ldr	r1, [r3, #0]
 8010826:	4b07      	ldr	r3, [pc, #28]	; (8010844 <shci_send+0x74>)
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	789b      	ldrb	r3, [r3, #2]
 801082c:	3303      	adds	r3, #3
 801082e:	461a      	mov	r2, r3
 8010830:	f003 f944 	bl	8013abc <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8010834:	2001      	movs	r0, #1
 8010836:	f000 f83b 	bl	80108b0 <Cmd_SetStatus>

  return;
 801083a:	bf00      	nop
}
 801083c:	3710      	adds	r7, #16
 801083e:	46bd      	mov	sp, r7
 8010840:	bd80      	pop	{r7, pc}
 8010842:	bf00      	nop
 8010844:	200001f4 	.word	0x200001f4
 8010848:	200008c0 	.word	0x200008c0

0801084c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b086      	sub	sp, #24
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8010854:	4a10      	ldr	r2, [pc, #64]	; (8010898 <TlInit+0x4c>)
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 801085a:	4810      	ldr	r0, [pc, #64]	; (801089c <TlInit+0x50>)
 801085c:	f000 faf2 	bl	8010e44 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8010860:	2001      	movs	r0, #1
 8010862:	f000 f825 	bl	80108b0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8010866:	4b0e      	ldr	r3, [pc, #56]	; (80108a0 <TlInit+0x54>)
 8010868:	2201      	movs	r2, #1
 801086a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 801086c:	4b0d      	ldr	r3, [pc, #52]	; (80108a4 <TlInit+0x58>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d00c      	beq.n	801088e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8010878:	4b0b      	ldr	r3, [pc, #44]	; (80108a8 <TlInit+0x5c>)
 801087a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 801087c:	4b0b      	ldr	r3, [pc, #44]	; (80108ac <TlInit+0x60>)
 801087e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8010880:	4b08      	ldr	r3, [pc, #32]	; (80108a4 <TlInit+0x58>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	f107 020c 	add.w	r2, r7, #12
 8010888:	4610      	mov	r0, r2
 801088a:	4798      	blx	r3
  }

  return;
 801088c:	bf00      	nop
 801088e:	bf00      	nop
}
 8010890:	3718      	adds	r7, #24
 8010892:	46bd      	mov	sp, r7
 8010894:	bd80      	pop	{r7, pc}
 8010896:	bf00      	nop
 8010898:	200001f4 	.word	0x200001f4
 801089c:	200001e8 	.word	0x200001e8
 80108a0:	200001f8 	.word	0x200001f8
 80108a4:	200008c0 	.word	0x200008c0
 80108a8:	08010901 	.word	0x08010901
 80108ac:	08010919 	.word	0x08010919

080108b0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b082      	sub	sp, #8
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	4603      	mov	r3, r0
 80108b8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80108ba:	79fb      	ldrb	r3, [r7, #7]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d10b      	bne.n	80108d8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80108c0:	4b0d      	ldr	r3, [pc, #52]	; (80108f8 <Cmd_SetStatus+0x48>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d003      	beq.n	80108d0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80108c8:	4b0b      	ldr	r3, [pc, #44]	; (80108f8 <Cmd_SetStatus+0x48>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	2000      	movs	r0, #0
 80108ce:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80108d0:	4b0a      	ldr	r3, [pc, #40]	; (80108fc <Cmd_SetStatus+0x4c>)
 80108d2:	2200      	movs	r2, #0
 80108d4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80108d6:	e00b      	b.n	80108f0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80108d8:	4b08      	ldr	r3, [pc, #32]	; (80108fc <Cmd_SetStatus+0x4c>)
 80108da:	2201      	movs	r2, #1
 80108dc:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80108de:	4b06      	ldr	r3, [pc, #24]	; (80108f8 <Cmd_SetStatus+0x48>)
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d004      	beq.n	80108f0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80108e6:	4b04      	ldr	r3, [pc, #16]	; (80108f8 <Cmd_SetStatus+0x48>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	2001      	movs	r0, #1
 80108ec:	4798      	blx	r3
  return;
 80108ee:	bf00      	nop
 80108f0:	bf00      	nop
}
 80108f2:	3708      	adds	r7, #8
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}
 80108f8:	200008e0 	.word	0x200008e0
 80108fc:	200001f0 	.word	0x200001f0

08010900 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b082      	sub	sp, #8
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8010908:	2000      	movs	r0, #0
 801090a:	f7f0 fdd7 	bl	80014bc <shci_cmd_resp_release>

  return;
 801090e:	bf00      	nop
}
 8010910:	3708      	adds	r7, #8
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}
	...

08010918 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b082      	sub	sp, #8
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8010920:	6879      	ldr	r1, [r7, #4]
 8010922:	4805      	ldr	r0, [pc, #20]	; (8010938 <TlUserEvtReceived+0x20>)
 8010924:	f000 fae6 	bl	8010ef4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8010928:	4803      	ldr	r0, [pc, #12]	; (8010938 <TlUserEvtReceived+0x20>)
 801092a:	f7f0 fdbb 	bl	80014a4 <shci_notify_asynch_evt>

  return;
 801092e:	bf00      	nop
}
 8010930:	3708      	adds	r7, #8
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
 8010936:	bf00      	nop
 8010938:	200001e8 	.word	0x200001e8

0801093c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 801093c:	b480      	push	{r7}
 801093e:	b083      	sub	sp, #12
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	4a05      	ldr	r2, [pc, #20]	; (801095c <shci_register_io_bus+0x20>)
 8010948:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	4a04      	ldr	r2, [pc, #16]	; (8010960 <shci_register_io_bus+0x24>)
 801094e:	611a      	str	r2, [r3, #16]

  return;
 8010950:	bf00      	nop
}
 8010952:	370c      	adds	r7, #12
 8010954:	46bd      	mov	sp, r7
 8010956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095a:	4770      	bx	lr
 801095c:	08010af9 	.word	0x08010af9
 8010960:	08010b4d 	.word	0x08010b4d

08010964 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8010964:	b580      	push	{r7, lr}
 8010966:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8010968:	f001 ff9c 	bl	80128a4 <HW_IPCC_Enable>

  return;
 801096c:	bf00      	nop
}
 801096e:	bd80      	pop	{r7, pc}

08010970 <TL_Init>:


void TL_Init( void )
{
 8010970:	b580      	push	{r7, lr}
 8010972:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8010974:	4b10      	ldr	r3, [pc, #64]	; (80109b8 <TL_Init+0x48>)
 8010976:	4a11      	ldr	r2, [pc, #68]	; (80109bc <TL_Init+0x4c>)
 8010978:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 801097a:	4b0f      	ldr	r3, [pc, #60]	; (80109b8 <TL_Init+0x48>)
 801097c:	4a10      	ldr	r2, [pc, #64]	; (80109c0 <TL_Init+0x50>)
 801097e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8010980:	4b0d      	ldr	r3, [pc, #52]	; (80109b8 <TL_Init+0x48>)
 8010982:	4a10      	ldr	r2, [pc, #64]	; (80109c4 <TL_Init+0x54>)
 8010984:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8010986:	4b0c      	ldr	r3, [pc, #48]	; (80109b8 <TL_Init+0x48>)
 8010988:	4a0f      	ldr	r2, [pc, #60]	; (80109c8 <TL_Init+0x58>)
 801098a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 801098c:	4b0a      	ldr	r3, [pc, #40]	; (80109b8 <TL_Init+0x48>)
 801098e:	4a0f      	ldr	r2, [pc, #60]	; (80109cc <TL_Init+0x5c>)
 8010990:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8010992:	4b09      	ldr	r3, [pc, #36]	; (80109b8 <TL_Init+0x48>)
 8010994:	4a0e      	ldr	r2, [pc, #56]	; (80109d0 <TL_Init+0x60>)
 8010996:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8010998:	4b07      	ldr	r3, [pc, #28]	; (80109b8 <TL_Init+0x48>)
 801099a:	4a0e      	ldr	r2, [pc, #56]	; (80109d4 <TL_Init+0x64>)
 801099c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 801099e:	4b06      	ldr	r3, [pc, #24]	; (80109b8 <TL_Init+0x48>)
 80109a0:	4a0d      	ldr	r2, [pc, #52]	; (80109d8 <TL_Init+0x68>)
 80109a2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80109a4:	4b04      	ldr	r3, [pc, #16]	; (80109b8 <TL_Init+0x48>)
 80109a6:	4a0d      	ldr	r2, [pc, #52]	; (80109dc <TL_Init+0x6c>)
 80109a8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80109aa:	4b03      	ldr	r3, [pc, #12]	; (80109b8 <TL_Init+0x48>)
 80109ac:	4a0c      	ldr	r2, [pc, #48]	; (80109e0 <TL_Init+0x70>)
 80109ae:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80109b0:	f001 ff8c 	bl	80128cc <HW_IPCC_Init>

  return;
 80109b4:	bf00      	nop
}
 80109b6:	bd80      	pop	{r7, pc}
 80109b8:	20030000 	.word	0x20030000
 80109bc:	20030028 	.word	0x20030028
 80109c0:	20030048 	.word	0x20030048
 80109c4:	20030058 	.word	0x20030058
 80109c8:	20030068 	.word	0x20030068
 80109cc:	20030070 	.word	0x20030070
 80109d0:	20030078 	.word	0x20030078
 80109d4:	20030080 	.word	0x20030080
 80109d8:	2003009c 	.word	0x2003009c
 80109dc:	200300a0 	.word	0x200300a0
 80109e0:	200300ac 	.word	0x200300ac

080109e4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b084      	sub	sp, #16
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80109f0:	4811      	ldr	r0, [pc, #68]	; (8010a38 <TL_BLE_Init+0x54>)
 80109f2:	f000 fa27 	bl	8010e44 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80109f6:	4b11      	ldr	r3, [pc, #68]	; (8010a3c <TL_BLE_Init+0x58>)
 80109f8:	685b      	ldr	r3, [r3, #4]
 80109fa:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	689a      	ldr	r2, [r3, #8]
 8010a00:	68bb      	ldr	r3, [r7, #8]
 8010a02:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	68da      	ldr	r2, [r3, #12]
 8010a08:	68bb      	ldr	r3, [r7, #8]
 8010a0a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	4a0c      	ldr	r2, [pc, #48]	; (8010a40 <TL_BLE_Init+0x5c>)
 8010a10:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8010a12:	68bb      	ldr	r3, [r7, #8]
 8010a14:	4a08      	ldr	r2, [pc, #32]	; (8010a38 <TL_BLE_Init+0x54>)
 8010a16:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8010a18:	f001 ff6e 	bl	80128f8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	4a08      	ldr	r2, [pc, #32]	; (8010a44 <TL_BLE_Init+0x60>)
 8010a22:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	685b      	ldr	r3, [r3, #4]
 8010a28:	4a07      	ldr	r2, [pc, #28]	; (8010a48 <TL_BLE_Init+0x64>)
 8010a2a:	6013      	str	r3, [r2, #0]

  return 0;
 8010a2c:	2300      	movs	r3, #0
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	3710      	adds	r7, #16
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}
 8010a36:	bf00      	nop
 8010a38:	200300c8 	.word	0x200300c8
 8010a3c:	20030000 	.word	0x20030000
 8010a40:	20030a58 	.word	0x20030a58
 8010a44:	200008ec 	.word	0x200008ec
 8010a48:	200008f0 	.word	0x200008f0

08010a4c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b082      	sub	sp, #8
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	460b      	mov	r3, r1
 8010a56:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8010a58:	4b09      	ldr	r3, [pc, #36]	; (8010a80 <TL_BLE_SendCmd+0x34>)
 8010a5a:	685b      	ldr	r3, [r3, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	2201      	movs	r2, #1
 8010a60:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8010a62:	4b07      	ldr	r3, [pc, #28]	; (8010a80 <TL_BLE_SendCmd+0x34>)
 8010a64:	685b      	ldr	r3, [r3, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	4619      	mov	r1, r3
 8010a6a:	2001      	movs	r0, #1
 8010a6c:	f000 f96c 	bl	8010d48 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8010a70:	f001 ff4c 	bl	801290c <HW_IPCC_BLE_SendCmd>

  return 0;
 8010a74:	2300      	movs	r3, #0
}
 8010a76:	4618      	mov	r0, r3
 8010a78:	3708      	adds	r7, #8
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}
 8010a7e:	bf00      	nop
 8010a80:	20030000 	.word	0x20030000

08010a84 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8010a8a:	e01c      	b.n	8010ac6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8010a8c:	1d3b      	adds	r3, r7, #4
 8010a8e:	4619      	mov	r1, r3
 8010a90:	4812      	ldr	r0, [pc, #72]	; (8010adc <HW_IPCC_BLE_RxEvtNot+0x58>)
 8010a92:	f000 fa76 	bl	8010f82 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	7a5b      	ldrb	r3, [r3, #9]
 8010a9a:	2b0f      	cmp	r3, #15
 8010a9c:	d003      	beq.n	8010aa6 <HW_IPCC_BLE_RxEvtNot+0x22>
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	7a5b      	ldrb	r3, [r3, #9]
 8010aa2:	2b0e      	cmp	r3, #14
 8010aa4:	d105      	bne.n	8010ab2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	4619      	mov	r1, r3
 8010aaa:	2002      	movs	r0, #2
 8010aac:	f000 f94c 	bl	8010d48 <OutputDbgTrace>
 8010ab0:	e004      	b.n	8010abc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	4619      	mov	r1, r3
 8010ab6:	2003      	movs	r0, #3
 8010ab8:	f000 f946 	bl	8010d48 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8010abc:	4b08      	ldr	r3, [pc, #32]	; (8010ae0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	687a      	ldr	r2, [r7, #4]
 8010ac2:	4610      	mov	r0, r2
 8010ac4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8010ac6:	4805      	ldr	r0, [pc, #20]	; (8010adc <HW_IPCC_BLE_RxEvtNot+0x58>)
 8010ac8:	f000 f9cc 	bl	8010e64 <LST_is_empty>
 8010acc:	4603      	mov	r3, r0
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d0dc      	beq.n	8010a8c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8010ad2:	bf00      	nop
}
 8010ad4:	3708      	adds	r7, #8
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd80      	pop	{r7, pc}
 8010ada:	bf00      	nop
 8010adc:	200300c8 	.word	0x200300c8
 8010ae0:	200008ec 	.word	0x200008ec

08010ae4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8010ae8:	4b02      	ldr	r3, [pc, #8]	; (8010af4 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	4798      	blx	r3

  return;
 8010aee:	bf00      	nop
}
 8010af0:	bd80      	pop	{r7, pc}
 8010af2:	bf00      	nop
 8010af4:	200008f0 	.word	0x200008f0

08010af8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b084      	sub	sp, #16
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8010b04:	480d      	ldr	r0, [pc, #52]	; (8010b3c <TL_SYS_Init+0x44>)
 8010b06:	f000 f99d 	bl	8010e44 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8010b0a:	4b0d      	ldr	r3, [pc, #52]	; (8010b40 <TL_SYS_Init+0x48>)
 8010b0c:	68db      	ldr	r3, [r3, #12]
 8010b0e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	689a      	ldr	r2, [r3, #8]
 8010b14:	68bb      	ldr	r3, [r7, #8]
 8010b16:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	4a08      	ldr	r2, [pc, #32]	; (8010b3c <TL_SYS_Init+0x44>)
 8010b1c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8010b1e:	f001 ff17 	bl	8012950 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	4a07      	ldr	r2, [pc, #28]	; (8010b44 <TL_SYS_Init+0x4c>)
 8010b28:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	685b      	ldr	r3, [r3, #4]
 8010b2e:	4a06      	ldr	r2, [pc, #24]	; (8010b48 <TL_SYS_Init+0x50>)
 8010b30:	6013      	str	r3, [r2, #0]

  return 0;
 8010b32:	2300      	movs	r3, #0
}
 8010b34:	4618      	mov	r0, r3
 8010b36:	3710      	adds	r7, #16
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	bd80      	pop	{r7, pc}
 8010b3c:	200300d0 	.word	0x200300d0
 8010b40:	20030000 	.word	0x20030000
 8010b44:	200008f4 	.word	0x200008f4
 8010b48:	200008f8 	.word	0x200008f8

08010b4c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b082      	sub	sp, #8
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
 8010b54:	460b      	mov	r3, r1
 8010b56:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8010b58:	4b09      	ldr	r3, [pc, #36]	; (8010b80 <TL_SYS_SendCmd+0x34>)
 8010b5a:	68db      	ldr	r3, [r3, #12]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	2210      	movs	r2, #16
 8010b60:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8010b62:	4b07      	ldr	r3, [pc, #28]	; (8010b80 <TL_SYS_SendCmd+0x34>)
 8010b64:	68db      	ldr	r3, [r3, #12]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	4619      	mov	r1, r3
 8010b6a:	2004      	movs	r0, #4
 8010b6c:	f000 f8ec 	bl	8010d48 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8010b70:	f001 fef8 	bl	8012964 <HW_IPCC_SYS_SendCmd>

  return 0;
 8010b74:	2300      	movs	r3, #0
}
 8010b76:	4618      	mov	r0, r3
 8010b78:	3708      	adds	r7, #8
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}
 8010b7e:	bf00      	nop
 8010b80:	20030000 	.word	0x20030000

08010b84 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8010b88:	4b07      	ldr	r3, [pc, #28]	; (8010ba8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8010b8a:	68db      	ldr	r3, [r3, #12]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	4619      	mov	r1, r3
 8010b90:	2005      	movs	r0, #5
 8010b92:	f000 f8d9 	bl	8010d48 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8010b96:	4b05      	ldr	r3, [pc, #20]	; (8010bac <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	4a03      	ldr	r2, [pc, #12]	; (8010ba8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8010b9c:	68d2      	ldr	r2, [r2, #12]
 8010b9e:	6812      	ldr	r2, [r2, #0]
 8010ba0:	4610      	mov	r0, r2
 8010ba2:	4798      	blx	r3

  return;
 8010ba4:	bf00      	nop
}
 8010ba6:	bd80      	pop	{r7, pc}
 8010ba8:	20030000 	.word	0x20030000
 8010bac:	200008f4 	.word	0x200008f4

08010bb0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b082      	sub	sp, #8
 8010bb4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8010bb6:	e00e      	b.n	8010bd6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8010bb8:	1d3b      	adds	r3, r7, #4
 8010bba:	4619      	mov	r1, r3
 8010bbc:	480b      	ldr	r0, [pc, #44]	; (8010bec <HW_IPCC_SYS_EvtNot+0x3c>)
 8010bbe:	f000 f9e0 	bl	8010f82 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	4619      	mov	r1, r3
 8010bc6:	2006      	movs	r0, #6
 8010bc8:	f000 f8be 	bl	8010d48 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8010bcc:	4b08      	ldr	r3, [pc, #32]	; (8010bf0 <HW_IPCC_SYS_EvtNot+0x40>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	687a      	ldr	r2, [r7, #4]
 8010bd2:	4610      	mov	r0, r2
 8010bd4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8010bd6:	4805      	ldr	r0, [pc, #20]	; (8010bec <HW_IPCC_SYS_EvtNot+0x3c>)
 8010bd8:	f000 f944 	bl	8010e64 <LST_is_empty>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d0ea      	beq.n	8010bb8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8010be2:	bf00      	nop
}
 8010be4:	3708      	adds	r7, #8
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}
 8010bea:	bf00      	nop
 8010bec:	200300d0 	.word	0x200300d0
 8010bf0:	200008f8 	.word	0x200008f8

08010bf4 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b082      	sub	sp, #8
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8010bfc:	4817      	ldr	r0, [pc, #92]	; (8010c5c <TL_MM_Init+0x68>)
 8010bfe:	f000 f921 	bl	8010e44 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8010c02:	4817      	ldr	r0, [pc, #92]	; (8010c60 <TL_MM_Init+0x6c>)
 8010c04:	f000 f91e 	bl	8010e44 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8010c08:	4b16      	ldr	r3, [pc, #88]	; (8010c64 <TL_MM_Init+0x70>)
 8010c0a:	691b      	ldr	r3, [r3, #16]
 8010c0c:	4a16      	ldr	r2, [pc, #88]	; (8010c68 <TL_MM_Init+0x74>)
 8010c0e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8010c10:	4b15      	ldr	r3, [pc, #84]	; (8010c68 <TL_MM_Init+0x74>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	687a      	ldr	r2, [r7, #4]
 8010c16:	6892      	ldr	r2, [r2, #8]
 8010c18:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8010c1a:	4b13      	ldr	r3, [pc, #76]	; (8010c68 <TL_MM_Init+0x74>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	687a      	ldr	r2, [r7, #4]
 8010c20:	68d2      	ldr	r2, [r2, #12]
 8010c22:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8010c24:	4b10      	ldr	r3, [pc, #64]	; (8010c68 <TL_MM_Init+0x74>)
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	4a0c      	ldr	r2, [pc, #48]	; (8010c5c <TL_MM_Init+0x68>)
 8010c2a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8010c2c:	4b0e      	ldr	r3, [pc, #56]	; (8010c68 <TL_MM_Init+0x74>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	687a      	ldr	r2, [r7, #4]
 8010c32:	6812      	ldr	r2, [r2, #0]
 8010c34:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8010c36:	4b0c      	ldr	r3, [pc, #48]	; (8010c68 <TL_MM_Init+0x74>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	687a      	ldr	r2, [r7, #4]
 8010c3c:	6852      	ldr	r2, [r2, #4]
 8010c3e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8010c40:	4b09      	ldr	r3, [pc, #36]	; (8010c68 <TL_MM_Init+0x74>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	687a      	ldr	r2, [r7, #4]
 8010c46:	6912      	ldr	r2, [r2, #16]
 8010c48:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8010c4a:	4b07      	ldr	r3, [pc, #28]	; (8010c68 <TL_MM_Init+0x74>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	687a      	ldr	r2, [r7, #4]
 8010c50:	6952      	ldr	r2, [r2, #20]
 8010c52:	619a      	str	r2, [r3, #24]

  return;
 8010c54:	bf00      	nop
}
 8010c56:	3708      	adds	r7, #8
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}
 8010c5c:	200300b8 	.word	0x200300b8
 8010c60:	200008e4 	.word	0x200008e4
 8010c64:	20030000 	.word	0x20030000
 8010c68:	200008fc 	.word	0x200008fc

08010c6c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b082      	sub	sp, #8
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8010c74:	6879      	ldr	r1, [r7, #4]
 8010c76:	4807      	ldr	r0, [pc, #28]	; (8010c94 <TL_MM_EvtDone+0x28>)
 8010c78:	f000 f93c 	bl	8010ef4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8010c7c:	6879      	ldr	r1, [r7, #4]
 8010c7e:	2000      	movs	r0, #0
 8010c80:	f000 f862 	bl	8010d48 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8010c84:	4804      	ldr	r0, [pc, #16]	; (8010c98 <TL_MM_EvtDone+0x2c>)
 8010c86:	f001 fe93 	bl	80129b0 <HW_IPCC_MM_SendFreeBuf>

  return;
 8010c8a:	bf00      	nop
}
 8010c8c:	3708      	adds	r7, #8
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	bd80      	pop	{r7, pc}
 8010c92:	bf00      	nop
 8010c94:	200008e4 	.word	0x200008e4
 8010c98:	08010c9d 	.word	0x08010c9d

08010c9c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b082      	sub	sp, #8
 8010ca0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8010ca2:	e00c      	b.n	8010cbe <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8010ca4:	1d3b      	adds	r3, r7, #4
 8010ca6:	4619      	mov	r1, r3
 8010ca8:	480a      	ldr	r0, [pc, #40]	; (8010cd4 <SendFreeBuf+0x38>)
 8010caa:	f000 f96a 	bl	8010f82 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8010cae:	4b0a      	ldr	r3, [pc, #40]	; (8010cd8 <SendFreeBuf+0x3c>)
 8010cb0:	691b      	ldr	r3, [r3, #16]
 8010cb2:	691b      	ldr	r3, [r3, #16]
 8010cb4:	687a      	ldr	r2, [r7, #4]
 8010cb6:	4611      	mov	r1, r2
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f000 f91b 	bl	8010ef4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8010cbe:	4805      	ldr	r0, [pc, #20]	; (8010cd4 <SendFreeBuf+0x38>)
 8010cc0:	f000 f8d0 	bl	8010e64 <LST_is_empty>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d0ec      	beq.n	8010ca4 <SendFreeBuf+0x8>
  }

  return;
 8010cca:	bf00      	nop
}
 8010ccc:	3708      	adds	r7, #8
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bd80      	pop	{r7, pc}
 8010cd2:	bf00      	nop
 8010cd4:	200008e4 	.word	0x200008e4
 8010cd8:	20030000 	.word	0x20030000

08010cdc <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8010ce0:	4805      	ldr	r0, [pc, #20]	; (8010cf8 <TL_TRACES_Init+0x1c>)
 8010ce2:	f000 f8af 	bl	8010e44 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8010ce6:	4b05      	ldr	r3, [pc, #20]	; (8010cfc <TL_TRACES_Init+0x20>)
 8010ce8:	695b      	ldr	r3, [r3, #20]
 8010cea:	4a03      	ldr	r2, [pc, #12]	; (8010cf8 <TL_TRACES_Init+0x1c>)
 8010cec:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8010cee:	f001 fe95 	bl	8012a1c <HW_IPCC_TRACES_Init>

  return;
 8010cf2:	bf00      	nop
}
 8010cf4:	bd80      	pop	{r7, pc}
 8010cf6:	bf00      	nop
 8010cf8:	200300c0 	.word	0x200300c0
 8010cfc:	20030000 	.word	0x20030000

08010d00 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b082      	sub	sp, #8
 8010d04:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8010d06:	e008      	b.n	8010d1a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8010d08:	1d3b      	adds	r3, r7, #4
 8010d0a:	4619      	mov	r1, r3
 8010d0c:	4808      	ldr	r0, [pc, #32]	; (8010d30 <HW_IPCC_TRACES_EvtNot+0x30>)
 8010d0e:	f000 f938 	bl	8010f82 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	4618      	mov	r0, r3
 8010d16:	f000 f80d 	bl	8010d34 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8010d1a:	4805      	ldr	r0, [pc, #20]	; (8010d30 <HW_IPCC_TRACES_EvtNot+0x30>)
 8010d1c:	f000 f8a2 	bl	8010e64 <LST_is_empty>
 8010d20:	4603      	mov	r3, r0
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d0f0      	beq.n	8010d08 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8010d26:	bf00      	nop
}
 8010d28:	3708      	adds	r7, #8
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}
 8010d2e:	bf00      	nop
 8010d30:	200300c0 	.word	0x200300c0

08010d34 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8010d34:	b480      	push	{r7}
 8010d36:	b083      	sub	sp, #12
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8010d3c:	bf00      	nop
 8010d3e:	370c      	adds	r7, #12
 8010d40:	46bd      	mov	sp, r7
 8010d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d46:	4770      	bx	lr

08010d48 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8010d48:	b480      	push	{r7}
 8010d4a:	b085      	sub	sp, #20
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	4603      	mov	r3, r0
 8010d50:	6039      	str	r1, [r7, #0]
 8010d52:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8010d54:	79fb      	ldrb	r3, [r7, #7]
 8010d56:	2b06      	cmp	r3, #6
 8010d58:	d845      	bhi.n	8010de6 <OutputDbgTrace+0x9e>
 8010d5a:	a201      	add	r2, pc, #4	; (adr r2, 8010d60 <OutputDbgTrace+0x18>)
 8010d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d60:	08010d7d 	.word	0x08010d7d
 8010d64:	08010da1 	.word	0x08010da1
 8010d68:	08010da7 	.word	0x08010da7
 8010d6c:	08010dbb 	.word	0x08010dbb
 8010d70:	08010dc7 	.word	0x08010dc7
 8010d74:	08010dcd 	.word	0x08010dcd
 8010d78:	08010ddb 	.word	0x08010ddb
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	7a5b      	ldrb	r3, [r3, #9]
 8010d84:	2bff      	cmp	r3, #255	; 0xff
 8010d86:	d005      	beq.n	8010d94 <OutputDbgTrace+0x4c>
 8010d88:	2bff      	cmp	r3, #255	; 0xff
 8010d8a:	dc05      	bgt.n	8010d98 <OutputDbgTrace+0x50>
 8010d8c:	2b0e      	cmp	r3, #14
 8010d8e:	d005      	beq.n	8010d9c <OutputDbgTrace+0x54>
 8010d90:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8010d92:	e001      	b.n	8010d98 <OutputDbgTrace+0x50>
          break;
 8010d94:	bf00      	nop
 8010d96:	e027      	b.n	8010de8 <OutputDbgTrace+0xa0>
          break;
 8010d98:	bf00      	nop
 8010d9a:	e025      	b.n	8010de8 <OutputDbgTrace+0xa0>
          break;
 8010d9c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8010d9e:	e023      	b.n	8010de8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8010da4:	e020      	b.n	8010de8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010da6:	683b      	ldr	r3, [r7, #0]
 8010da8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	7a5b      	ldrb	r3, [r3, #9]
 8010dae:	2b0e      	cmp	r3, #14
 8010db0:	d001      	beq.n	8010db6 <OutputDbgTrace+0x6e>
 8010db2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8010db4:	e000      	b.n	8010db8 <OutputDbgTrace+0x70>
          break;
 8010db6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010db8:	e016      	b.n	8010de8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	7a5b      	ldrb	r3, [r3, #9]
 8010dc2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010dc4:	e010      	b.n	8010de8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8010dc6:	683b      	ldr	r3, [r7, #0]
 8010dc8:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8010dca:	e00d      	b.n	8010de8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010dcc:	683b      	ldr	r3, [r7, #0]
 8010dce:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	7a5b      	ldrb	r3, [r3, #9]
 8010dd4:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8010dd6:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010dd8:	e006      	b.n	8010de8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	7a5b      	ldrb	r3, [r3, #9]
 8010de2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010de4:	e000      	b.n	8010de8 <OutputDbgTrace+0xa0>

    default:
      break;
 8010de6:	bf00      	nop
  }

  return;
 8010de8:	bf00      	nop
}
 8010dea:	3714      	adds	r7, #20
 8010dec:	46bd      	mov	sp, r7
 8010dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df2:	4770      	bx	lr

08010df4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8010df4:	b480      	push	{r7}
 8010df6:	b085      	sub	sp, #20
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8010dfe:	4b0f      	ldr	r3, [pc, #60]	; (8010e3c <OTP_Read+0x48>)
 8010e00:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8010e02:	e002      	b.n	8010e0a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	3b08      	subs	r3, #8
 8010e08:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	3307      	adds	r3, #7
 8010e0e:	781b      	ldrb	r3, [r3, #0]
 8010e10:	79fa      	ldrb	r2, [r7, #7]
 8010e12:	429a      	cmp	r2, r3
 8010e14:	d003      	beq.n	8010e1e <OTP_Read+0x2a>
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	4a09      	ldr	r2, [pc, #36]	; (8010e40 <OTP_Read+0x4c>)
 8010e1a:	4293      	cmp	r3, r2
 8010e1c:	d1f2      	bne.n	8010e04 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	3307      	adds	r3, #7
 8010e22:	781b      	ldrb	r3, [r3, #0]
 8010e24:	79fa      	ldrb	r2, [r7, #7]
 8010e26:	429a      	cmp	r2, r3
 8010e28:	d001      	beq.n	8010e2e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8010e2e:	68fb      	ldr	r3, [r7, #12]
}
 8010e30:	4618      	mov	r0, r3
 8010e32:	3714      	adds	r7, #20
 8010e34:	46bd      	mov	sp, r7
 8010e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3a:	4770      	bx	lr
 8010e3c:	1fff73f8 	.word	0x1fff73f8
 8010e40:	1fff7000 	.word	0x1fff7000

08010e44 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8010e44:	b480      	push	{r7}
 8010e46:	b083      	sub	sp, #12
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	687a      	ldr	r2, [r7, #4]
 8010e50:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	687a      	ldr	r2, [r7, #4]
 8010e56:	605a      	str	r2, [r3, #4]
}
 8010e58:	bf00      	nop
 8010e5a:	370c      	adds	r7, #12
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e62:	4770      	bx	lr

08010e64 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8010e64:	b480      	push	{r7}
 8010e66:	b087      	sub	sp, #28
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e6c:	f3ef 8310 	mrs	r3, PRIMASK
 8010e70:	60fb      	str	r3, [r7, #12]
  return(result);
 8010e72:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010e74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8010e76:	b672      	cpsid	i
}
 8010e78:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	687a      	ldr	r2, [r7, #4]
 8010e80:	429a      	cmp	r2, r3
 8010e82:	d102      	bne.n	8010e8a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8010e84:	2301      	movs	r3, #1
 8010e86:	75fb      	strb	r3, [r7, #23]
 8010e88:	e001      	b.n	8010e8e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	75fb      	strb	r3, [r7, #23]
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e92:	68bb      	ldr	r3, [r7, #8]
 8010e94:	f383 8810 	msr	PRIMASK, r3
}
 8010e98:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8010e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	371c      	adds	r7, #28
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea6:	4770      	bx	lr

08010ea8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8010ea8:	b480      	push	{r7}
 8010eaa:	b087      	sub	sp, #28
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
 8010eb0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010eb2:	f3ef 8310 	mrs	r3, PRIMASK
 8010eb6:	60fb      	str	r3, [r7, #12]
  return(result);
 8010eb8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010eba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010ebc:	b672      	cpsid	i
}
 8010ebe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681a      	ldr	r2, [r3, #0]
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8010ec8:	683b      	ldr	r3, [r7, #0]
 8010eca:	687a      	ldr	r2, [r7, #4]
 8010ecc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	683a      	ldr	r2, [r7, #0]
 8010ed2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	683a      	ldr	r2, [r7, #0]
 8010eda:	605a      	str	r2, [r3, #4]
 8010edc:	697b      	ldr	r3, [r7, #20]
 8010ede:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010ee0:	693b      	ldr	r3, [r7, #16]
 8010ee2:	f383 8810 	msr	PRIMASK, r3
}
 8010ee6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010ee8:	bf00      	nop
 8010eea:	371c      	adds	r7, #28
 8010eec:	46bd      	mov	sp, r7
 8010eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef2:	4770      	bx	lr

08010ef4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b087      	sub	sp, #28
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
 8010efc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010efe:	f3ef 8310 	mrs	r3, PRIMASK
 8010f02:	60fb      	str	r3, [r7, #12]
  return(result);
 8010f04:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010f06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010f08:	b672      	cpsid	i
}
 8010f0a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	687a      	ldr	r2, [r7, #4]
 8010f10:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	685a      	ldr	r2, [r3, #4]
 8010f16:	683b      	ldr	r3, [r7, #0]
 8010f18:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	683a      	ldr	r2, [r7, #0]
 8010f1e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	685b      	ldr	r3, [r3, #4]
 8010f24:	683a      	ldr	r2, [r7, #0]
 8010f26:	601a      	str	r2, [r3, #0]
 8010f28:	697b      	ldr	r3, [r7, #20]
 8010f2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f2c:	693b      	ldr	r3, [r7, #16]
 8010f2e:	f383 8810 	msr	PRIMASK, r3
}
 8010f32:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010f34:	bf00      	nop
 8010f36:	371c      	adds	r7, #28
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3e:	4770      	bx	lr

08010f40 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8010f40:	b480      	push	{r7}
 8010f42:	b087      	sub	sp, #28
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f48:	f3ef 8310 	mrs	r3, PRIMASK
 8010f4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8010f4e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010f50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010f52:	b672      	cpsid	i
}
 8010f54:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	687a      	ldr	r2, [r7, #4]
 8010f5c:	6812      	ldr	r2, [r2, #0]
 8010f5e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	687a      	ldr	r2, [r7, #4]
 8010f66:	6852      	ldr	r2, [r2, #4]
 8010f68:	605a      	str	r2, [r3, #4]
 8010f6a:	697b      	ldr	r3, [r7, #20]
 8010f6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f6e:	693b      	ldr	r3, [r7, #16]
 8010f70:	f383 8810 	msr	PRIMASK, r3
}
 8010f74:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010f76:	bf00      	nop
 8010f78:	371c      	adds	r7, #28
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f80:	4770      	bx	lr

08010f82 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8010f82:	b580      	push	{r7, lr}
 8010f84:	b086      	sub	sp, #24
 8010f86:	af00      	add	r7, sp, #0
 8010f88:	6078      	str	r0, [r7, #4]
 8010f8a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8010f90:	60fb      	str	r3, [r7, #12]
  return(result);
 8010f92:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010f94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010f96:	b672      	cpsid	i
}
 8010f98:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681a      	ldr	r2, [r3, #0]
 8010f9e:	683b      	ldr	r3, [r7, #0]
 8010fa0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7ff ffca 	bl	8010f40 <LST_remove_node>
 8010fac:	697b      	ldr	r3, [r7, #20]
 8010fae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010fb0:	693b      	ldr	r3, [r7, #16]
 8010fb2:	f383 8810 	msr	PRIMASK, r3
}
 8010fb6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010fb8:	bf00      	nop
 8010fba:	3718      	adds	r7, #24
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}

08010fc0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8010fc0:	b480      	push	{r7}
 8010fc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8010fc4:	4b03      	ldr	r3, [pc, #12]	; (8010fd4 <LL_FLASH_GetUDN+0x14>)
 8010fc6:	681b      	ldr	r3, [r3, #0]
}
 8010fc8:	4618      	mov	r0, r3
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd0:	4770      	bx	lr
 8010fd2:	bf00      	nop
 8010fd4:	1fff7580 	.word	0x1fff7580

08010fd8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8010fd8:	b480      	push	{r7}
 8010fda:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8010fdc:	4b03      	ldr	r3, [pc, #12]	; (8010fec <LL_FLASH_GetDeviceID+0x14>)
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	b2db      	uxtb	r3, r3
}
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fea:	4770      	bx	lr
 8010fec:	1fff7584 	.word	0x1fff7584

08010ff0 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8010ff0:	b480      	push	{r7}
 8010ff2:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8010ff4:	4b03      	ldr	r3, [pc, #12]	; (8011004 <LL_FLASH_GetSTCompanyID+0x14>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	0a1b      	lsrs	r3, r3, #8
}
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011002:	4770      	bx	lr
 8011004:	1fff7584 	.word	0x1fff7584

08011008 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8011008:	b5b0      	push	{r4, r5, r7, lr}
 801100a:	b090      	sub	sp, #64	; 0x40
 801100c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801100e:	2392      	movs	r3, #146	; 0x92
 8011010:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8011014:	4b27      	ldr	r3, [pc, #156]	; (80110b4 <APP_BLE_Init+0xac>)
 8011016:	1d3c      	adds	r4, r7, #4
 8011018:	461d      	mov	r5, r3
 801101a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801101c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801101e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011026:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801102a:	c403      	stmia	r4!, {r0, r1}
 801102c:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 801102e:	f000 f909 	bl	8011244 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8011032:	2101      	movs	r1, #1
 8011034:	2002      	movs	r0, #2
 8011036:	f002 fa55 	bl	80134e4 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 801103a:	4a1f      	ldr	r2, [pc, #124]	; (80110b8 <APP_BLE_Init+0xb0>)
 801103c:	2100      	movs	r1, #0
 801103e:	2002      	movs	r0, #2
 8011040:	f002 fb7c 	bl	801373c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8011044:	1d3b      	adds	r3, r7, #4
 8011046:	4618      	mov	r0, r3
 8011048:	f7ff f8d0 	bl	80101ec <SHCI_C2_BLE_Init>
 801104c:	4603      	mov	r3, r0
 801104e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8011052:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8011056:	2b00      	cmp	r3, #0
 8011058:	d001      	beq.n	801105e <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 801105a:	f7f0 fe6b 	bl	8001d34 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 801105e:	f000 f907 	bl	8011270 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8011062:	f7ff f81d 	bl	80100a0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8011066:	4b15      	ldr	r3, [pc, #84]	; (80110bc <APP_BLE_Init+0xb4>)
 8011068:	2200      	movs	r2, #0
 801106a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 801106e:	4b13      	ldr	r3, [pc, #76]	; (80110bc <APP_BLE_Init+0xb4>)
 8011070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011074:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8011076:	4a12      	ldr	r2, [pc, #72]	; (80110c0 <APP_BLE_Init+0xb8>)
 8011078:	2100      	movs	r1, #0
 801107a:	2001      	movs	r0, #1
 801107c:	f002 fb5e 	bl	801373c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8011080:	2006      	movs	r0, #6
 8011082:	f7fe fe80 	bl	800fd86 <aci_hal_set_radio_activity_mask>
 8011086:	4603      	mov	r3, r0
 8011088:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 801108c:	f000 fb00 	bl	8011690 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8011090:	4b0a      	ldr	r3, [pc, #40]	; (80110bc <APP_BLE_Init+0xb4>)
 8011092:	2200      	movs	r2, #0
 8011094:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8011096:	4b09      	ldr	r3, [pc, #36]	; (80110bc <APP_BLE_Init+0xb4>)
 8011098:	2200      	movs	r2, #0
 801109a:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 801109c:	2001      	movs	r0, #1
 801109e:	f000 f99b 	bl	80113d8 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */
  //Ejecutar Task 1
  UTIL_SEQ_SetTask( 1<< CFG_TASK_MAIN, CFG_SCH_PRIO_0);
 80110a2:	2100      	movs	r1, #0
 80110a4:	2004      	movs	r0, #4
 80110a6:	f002 fb6b 	bl	8013780 <UTIL_SEQ_SetTask>
  /* USER CODE END APP_BLE_Init_2 */

  return;
 80110aa:	bf00      	nop
}
 80110ac:	3740      	adds	r7, #64	; 0x40
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bdb0      	pop	{r4, r5, r7, pc}
 80110b2:	bf00      	nop
 80110b4:	0801661c 	.word	0x0801661c
 80110b8:	08010409 	.word	0x08010409
 80110bc:	20000908 	.word	0x20000908
 80110c0:	080114c1 	.word	0x080114c1

080110c4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b08a      	sub	sp, #40	; 0x28
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 80110cc:	2392      	movs	r3, #146	; 0x92
 80110ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	3301      	adds	r3, #1
 80110d6:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 80110d8:	6a3b      	ldr	r3, [r7, #32]
 80110da:	781b      	ldrb	r3, [r3, #0]
 80110dc:	2bff      	cmp	r3, #255	; 0xff
 80110de:	d053      	beq.n	8011188 <SVCCTL_App_Notification+0xc4>
 80110e0:	2bff      	cmp	r3, #255	; 0xff
 80110e2:	f300 80a1 	bgt.w	8011228 <SVCCTL_App_Notification+0x164>
 80110e6:	2b05      	cmp	r3, #5
 80110e8:	d002      	beq.n	80110f0 <SVCCTL_App_Notification+0x2c>
 80110ea:	2b3e      	cmp	r3, #62	; 0x3e
 80110ec:	d020      	beq.n	8011130 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80110ee:	e09b      	b.n	8011228 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80110f0:	6a3b      	ldr	r3, [r7, #32]
 80110f2:	3302      	adds	r3, #2
 80110f4:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80110fc:	b29a      	uxth	r2, r3
 80110fe:	4b4e      	ldr	r3, [pc, #312]	; (8011238 <SVCCTL_App_Notification+0x174>)
 8011100:	8adb      	ldrh	r3, [r3, #22]
 8011102:	429a      	cmp	r2, r3
 8011104:	d106      	bne.n	8011114 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8011106:	4b4c      	ldr	r3, [pc, #304]	; (8011238 <SVCCTL_App_Notification+0x174>)
 8011108:	2200      	movs	r2, #0
 801110a:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 801110c:	4b4a      	ldr	r3, [pc, #296]	; (8011238 <SVCCTL_App_Notification+0x174>)
 801110e:	2200      	movs	r2, #0
 8011110:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8011114:	2001      	movs	r0, #1
 8011116:	f000 f95f 	bl	80113d8 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 801111a:	4b48      	ldr	r3, [pc, #288]	; (801123c <SVCCTL_App_Notification+0x178>)
 801111c:	2201      	movs	r2, #1
 801111e:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8011120:	4b45      	ldr	r3, [pc, #276]	; (8011238 <SVCCTL_App_Notification+0x174>)
 8011122:	8ada      	ldrh	r2, [r3, #22]
 8011124:	4b45      	ldr	r3, [pc, #276]	; (801123c <SVCCTL_App_Notification+0x178>)
 8011126:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8011128:	4844      	ldr	r0, [pc, #272]	; (801123c <SVCCTL_App_Notification+0x178>)
 801112a:	f000 fa9d 	bl	8011668 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 801112e:	e07e      	b.n	801122e <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8011130:	6a3b      	ldr	r3, [r7, #32]
 8011132:	3302      	adds	r3, #2
 8011134:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8011136:	697b      	ldr	r3, [r7, #20]
 8011138:	781b      	ldrb	r3, [r3, #0]
 801113a:	2b01      	cmp	r3, #1
 801113c:	d001      	beq.n	8011142 <SVCCTL_App_Notification+0x7e>
 801113e:	2b03      	cmp	r3, #3
          break;
 8011140:	e021      	b.n	8011186 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	3301      	adds	r3, #1
 8011146:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8011148:	4b3b      	ldr	r3, [pc, #236]	; (8011238 <SVCCTL_App_Notification+0x174>)
 801114a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801114e:	2b04      	cmp	r3, #4
 8011150:	d104      	bne.n	801115c <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8011152:	4b39      	ldr	r3, [pc, #228]	; (8011238 <SVCCTL_App_Notification+0x174>)
 8011154:	2206      	movs	r2, #6
 8011156:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 801115a:	e003      	b.n	8011164 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 801115c:	4b36      	ldr	r3, [pc, #216]	; (8011238 <SVCCTL_App_Notification+0x174>)
 801115e:	2205      	movs	r2, #5
 8011160:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8011164:	693b      	ldr	r3, [r7, #16]
 8011166:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801116a:	b29a      	uxth	r2, r3
 801116c:	4b32      	ldr	r3, [pc, #200]	; (8011238 <SVCCTL_App_Notification+0x174>)
 801116e:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8011170:	4b32      	ldr	r3, [pc, #200]	; (801123c <SVCCTL_App_Notification+0x178>)
 8011172:	2200      	movs	r2, #0
 8011174:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8011176:	4b30      	ldr	r3, [pc, #192]	; (8011238 <SVCCTL_App_Notification+0x174>)
 8011178:	8ada      	ldrh	r2, [r3, #22]
 801117a:	4b30      	ldr	r3, [pc, #192]	; (801123c <SVCCTL_App_Notification+0x178>)
 801117c:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 801117e:	482f      	ldr	r0, [pc, #188]	; (801123c <SVCCTL_App_Notification+0x178>)
 8011180:	f000 fa72 	bl	8011668 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8011184:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8011186:	e052      	b.n	801122e <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8011188:	6a3b      	ldr	r3, [r7, #32]
 801118a:	3302      	adds	r3, #2
 801118c:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 801118e:	69fb      	ldr	r3, [r7, #28]
 8011190:	881b      	ldrh	r3, [r3, #0]
 8011192:	b29b      	uxth	r3, r3
 8011194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011198:	d040      	beq.n	801121c <SVCCTL_App_Notification+0x158>
 801119a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801119e:	dc45      	bgt.n	801122c <SVCCTL_App_Notification+0x168>
 80111a0:	2b04      	cmp	r3, #4
 80111a2:	d03d      	beq.n	8011220 <SVCCTL_App_Notification+0x15c>
 80111a4:	2b04      	cmp	r3, #4
 80111a6:	db41      	blt.n	801122c <SVCCTL_App_Notification+0x168>
 80111a8:	f240 420a 	movw	r2, #1034	; 0x40a
 80111ac:	4293      	cmp	r3, r2
 80111ae:	dc3d      	bgt.n	801122c <SVCCTL_App_Notification+0x168>
 80111b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80111b4:	dd3a      	ble.n	801122c <SVCCTL_App_Notification+0x168>
 80111b6:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 80111ba:	2b09      	cmp	r3, #9
 80111bc:	d836      	bhi.n	801122c <SVCCTL_App_Notification+0x168>
 80111be:	a201      	add	r2, pc, #4	; (adr r2, 80111c4 <SVCCTL_App_Notification+0x100>)
 80111c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111c4:	08011215 	.word	0x08011215
 80111c8:	080111ed 	.word	0x080111ed
 80111cc:	0801122d 	.word	0x0801122d
 80111d0:	0801122d 	.word	0x0801122d
 80111d4:	0801122d 	.word	0x0801122d
 80111d8:	0801122d 	.word	0x0801122d
 80111dc:	08011225 	.word	0x08011225
 80111e0:	0801122d 	.word	0x0801122d
 80111e4:	08011201 	.word	0x08011201
 80111e8:	08011225 	.word	0x08011225
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80111ec:	4b12      	ldr	r3, [pc, #72]	; (8011238 <SVCCTL_App_Notification+0x174>)
 80111ee:	8adb      	ldrh	r3, [r3, #22]
 80111f0:	4913      	ldr	r1, [pc, #76]	; (8011240 <SVCCTL_App_Notification+0x17c>)
 80111f2:	4618      	mov	r0, r3
 80111f4:	f7fe f81e 	bl	800f234 <aci_gap_pass_key_resp>
 80111f8:	4603      	mov	r3, r0
 80111fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80111fe:	e012      	b.n	8011226 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8011200:	4b0d      	ldr	r3, [pc, #52]	; (8011238 <SVCCTL_App_Notification+0x174>)
 8011202:	8adb      	ldrh	r3, [r3, #22]
 8011204:	2101      	movs	r1, #1
 8011206:	4618      	mov	r0, r3
 8011208:	f7fe f9be 	bl	800f588 <aci_gap_numeric_comparison_value_confirm_yesno>
 801120c:	4603      	mov	r3, r0
 801120e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8011212:	e008      	b.n	8011226 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8011214:	69fb      	ldr	r3, [r7, #28]
 8011216:	3302      	adds	r3, #2
 8011218:	61bb      	str	r3, [r7, #24]
          break;
 801121a:	e004      	b.n	8011226 <SVCCTL_App_Notification+0x162>
          break;
 801121c:	bf00      	nop
 801121e:	e005      	b.n	801122c <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8011220:	bf00      	nop
 8011222:	e003      	b.n	801122c <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8011224:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8011226:	e001      	b.n	801122c <SVCCTL_App_Notification+0x168>
      break;
 8011228:	bf00      	nop
 801122a:	e000      	b.n	801122e <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 801122c:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 801122e:	2301      	movs	r3, #1
}
 8011230:	4618      	mov	r0, r3
 8011232:	3728      	adds	r7, #40	; 0x28
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}
 8011238:	20000908 	.word	0x20000908
 801123c:	2000098c 	.word	0x2000098c
 8011240:	0001b207 	.word	0x0001b207

08011244 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b082      	sub	sp, #8
 8011248:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 801124a:	4b06      	ldr	r3, [pc, #24]	; (8011264 <Ble_Tl_Init+0x20>)
 801124c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 801124e:	4b06      	ldr	r3, [pc, #24]	; (8011268 <Ble_Tl_Init+0x24>)
 8011250:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8011252:	463b      	mov	r3, r7
 8011254:	4619      	mov	r1, r3
 8011256:	4805      	ldr	r0, [pc, #20]	; (801126c <Ble_Tl_Init+0x28>)
 8011258:	f7ff f8ba 	bl	80103d0 <hci_init>

  return;
 801125c:	bf00      	nop
}
 801125e:	3708      	adds	r7, #8
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}
 8011264:	200300d8 	.word	0x200300d8
 8011268:	08011571 	.word	0x08011571
 801126c:	08011539 	.word	0x08011539

08011270 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8011270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011272:	b08d      	sub	sp, #52	; 0x34
 8011274:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8011276:	2300      	movs	r3, #0
 8011278:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801127a:	2392      	movs	r3, #146	; 0x92
 801127c:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 801127e:	f7fe fdd6 	bl	800fe2e <hci_reset>
 8011282:	4603      	mov	r3, r0
 8011284:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8011286:	f000 f8d7 	bl	8011438 <BleGetBdAddress>
 801128a:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 801128c:	693a      	ldr	r2, [r7, #16]
 801128e:	2106      	movs	r1, #6
 8011290:	2000      	movs	r0, #0
 8011292:	f7fe fc8c 	bl	800fbae <aci_hal_write_config_data>
 8011296:	4603      	mov	r3, r0
 8011298:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 801129a:	4a4a      	ldr	r2, [pc, #296]	; (80113c4 <Ble_Hci_Gap_Gatt_Init+0x154>)
 801129c:	2110      	movs	r1, #16
 801129e:	2018      	movs	r0, #24
 80112a0:	f7fe fc85 	bl	800fbae <aci_hal_write_config_data>
 80112a4:	4603      	mov	r3, r0
 80112a6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 80112a8:	4a47      	ldr	r2, [pc, #284]	; (80113c8 <Ble_Hci_Gap_Gatt_Init+0x158>)
 80112aa:	2110      	movs	r1, #16
 80112ac:	2008      	movs	r0, #8
 80112ae:	f7fe fc7e 	bl	800fbae <aci_hal_write_config_data>
 80112b2:	4603      	mov	r3, r0
 80112b4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80112b6:	2117      	movs	r1, #23
 80112b8:	2001      	movs	r0, #1
 80112ba:	f7fe fcfd 	bl	800fcb8 <aci_hal_set_tx_power_level>
 80112be:	4603      	mov	r3, r0
 80112c0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80112c2:	f7fe f9c8 	bl	800f656 <aci_gatt_init>
 80112c6:	4603      	mov	r3, r0
 80112c8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80112ca:	2300      	movs	r3, #0
 80112cc:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80112ce:	7bfb      	ldrb	r3, [r7, #15]
 80112d0:	f043 0301 	orr.w	r3, r3, #1
 80112d4:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 80112d6:	7bfb      	ldrb	r3, [r7, #15]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d01f      	beq.n	801131c <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 80112dc:	4b3b      	ldr	r3, [pc, #236]	; (80113cc <Ble_Hci_Gap_Gatt_Init+0x15c>)
 80112de:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80112e0:	1dba      	adds	r2, r7, #6
 80112e2:	7bf8      	ldrb	r0, [r7, #15]
 80112e4:	1cbb      	adds	r3, r7, #2
 80112e6:	9301      	str	r3, [sp, #4]
 80112e8:	1d3b      	adds	r3, r7, #4
 80112ea:	9300      	str	r3, [sp, #0]
 80112ec:	4613      	mov	r3, r2
 80112ee:	2204      	movs	r2, #4
 80112f0:	2100      	movs	r1, #0
 80112f2:	f7fe f806 	bl	800f302 <aci_gap_init>
 80112f6:	4603      	mov	r3, r0
 80112f8:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80112fa:	88fc      	ldrh	r4, [r7, #6]
 80112fc:	88bd      	ldrh	r5, [r7, #4]
 80112fe:	68b8      	ldr	r0, [r7, #8]
 8011300:	f7ee ff3e 	bl	8000180 <strlen>
 8011304:	4603      	mov	r3, r0
 8011306:	b2da      	uxtb	r2, r3
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	9300      	str	r3, [sp, #0]
 801130c:	4613      	mov	r3, r2
 801130e:	2200      	movs	r2, #0
 8011310:	4629      	mov	r1, r5
 8011312:	4620      	mov	r0, r4
 8011314:	f7fe fba2 	bl	800fa5c <aci_gatt_update_char_value>
 8011318:	4603      	mov	r3, r0
 801131a:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 801131c:	88f8      	ldrh	r0, [r7, #6]
 801131e:	8879      	ldrh	r1, [r7, #2]
 8011320:	463b      	mov	r3, r7
 8011322:	9300      	str	r3, [sp, #0]
 8011324:	2302      	movs	r3, #2
 8011326:	2200      	movs	r2, #0
 8011328:	f7fe fb98 	bl	800fa5c <aci_gatt_update_char_value>
 801132c:	4603      	mov	r3, r0
 801132e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8011330:	2202      	movs	r2, #2
 8011332:	2102      	movs	r1, #2
 8011334:	2000      	movs	r0, #0
 8011336:	f7fe fd9e 	bl	800fe76 <hci_le_set_default_phy>
 801133a:	4603      	mov	r3, r0
 801133c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 801133e:	4b24      	ldr	r3, [pc, #144]	; (80113d0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011340:	2203      	movs	r2, #3
 8011342:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8011344:	4b22      	ldr	r3, [pc, #136]	; (80113d0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011346:	781b      	ldrb	r3, [r3, #0]
 8011348:	4618      	mov	r0, r3
 801134a:	f7fd fe5b 	bl	800f004 <aci_gap_set_io_capability>
 801134e:	4603      	mov	r3, r0
 8011350:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8011352:	4b1f      	ldr	r3, [pc, #124]	; (80113d0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011354:	2200      	movs	r2, #0
 8011356:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8011358:	4b1d      	ldr	r3, [pc, #116]	; (80113d0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801135a:	2208      	movs	r2, #8
 801135c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 801135e:	4b1c      	ldr	r3, [pc, #112]	; (80113d0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011360:	2210      	movs	r2, #16
 8011362:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8011364:	4b1a      	ldr	r3, [pc, #104]	; (80113d0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011366:	2200      	movs	r2, #0
 8011368:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 801136a:	4b19      	ldr	r3, [pc, #100]	; (80113d0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801136c:	4a19      	ldr	r2, [pc, #100]	; (80113d4 <Ble_Hci_Gap_Gatt_Init+0x164>)
 801136e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8011370:	4b17      	ldr	r3, [pc, #92]	; (80113d0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011372:	2201      	movs	r2, #1
 8011374:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8011376:	4b16      	ldr	r3, [pc, #88]	; (80113d0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011378:	789c      	ldrb	r4, [r3, #2]
 801137a:	4b15      	ldr	r3, [pc, #84]	; (80113d0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801137c:	785d      	ldrb	r5, [r3, #1]
 801137e:	4b14      	ldr	r3, [pc, #80]	; (80113d0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011380:	791b      	ldrb	r3, [r3, #4]
 8011382:	4a13      	ldr	r2, [pc, #76]	; (80113d0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011384:	7952      	ldrb	r2, [r2, #5]
 8011386:	4912      	ldr	r1, [pc, #72]	; (80113d0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011388:	78c9      	ldrb	r1, [r1, #3]
 801138a:	4811      	ldr	r0, [pc, #68]	; (80113d0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801138c:	6880      	ldr	r0, [r0, #8]
 801138e:	2600      	movs	r6, #0
 8011390:	9604      	str	r6, [sp, #16]
 8011392:	9003      	str	r0, [sp, #12]
 8011394:	9102      	str	r1, [sp, #8]
 8011396:	9201      	str	r2, [sp, #4]
 8011398:	9300      	str	r3, [sp, #0]
 801139a:	2300      	movs	r3, #0
 801139c:	2201      	movs	r2, #1
 801139e:	4629      	mov	r1, r5
 80113a0:	4620      	mov	r0, r4
 80113a2:	f7fd fe83 	bl	800f0ac <aci_gap_set_authentication_requirement>
 80113a6:	4603      	mov	r3, r0
 80113a8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80113aa:	4b09      	ldr	r3, [pc, #36]	; (80113d0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80113ac:	789b      	ldrb	r3, [r3, #2]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d003      	beq.n	80113ba <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 80113b2:	f7fe f8c5 	bl	800f540 <aci_gap_configure_whitelist>
 80113b6:	4603      	mov	r3, r0
 80113b8:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 80113ba:	bf00      	nop
 80113bc:	371c      	adds	r7, #28
 80113be:	46bd      	mov	sp, r7
 80113c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113c2:	bf00      	nop
 80113c4:	08017140 	.word	0x08017140
 80113c8:	08017150 	.word	0x08017150
 80113cc:	08016658 	.word	0x08016658
 80113d0:	20000908 	.word	0x20000908
 80113d4:	0001b207 	.word	0x0001b207

080113d8 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b08c      	sub	sp, #48	; 0x30
 80113dc:	af08      	add	r7, sp, #32
 80113de:	4603      	mov	r3, r0
 80113e0:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80113e2:	2392      	movs	r3, #146	; 0x92
 80113e4:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80113e6:	4a12      	ldr	r2, [pc, #72]	; (8011430 <Adv_Request+0x58>)
 80113e8:	79fb      	ldrb	r3, [r7, #7]
 80113ea:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 80113ee:	2300      	movs	r3, #0
 80113f0:	9306      	str	r3, [sp, #24]
 80113f2:	2300      	movs	r3, #0
 80113f4:	9305      	str	r3, [sp, #20]
 80113f6:	2300      	movs	r3, #0
 80113f8:	9304      	str	r3, [sp, #16]
 80113fa:	2300      	movs	r3, #0
 80113fc:	9303      	str	r3, [sp, #12]
 80113fe:	2300      	movs	r3, #0
 8011400:	9302      	str	r3, [sp, #8]
 8011402:	2300      	movs	r3, #0
 8011404:	9301      	str	r3, [sp, #4]
 8011406:	2300      	movs	r3, #0
 8011408:	9300      	str	r3, [sp, #0]
 801140a:	2300      	movs	r3, #0
 801140c:	22a0      	movs	r2, #160	; 0xa0
 801140e:	2180      	movs	r1, #128	; 0x80
 8011410:	2000      	movs	r0, #0
 8011412:	f7fd fcfd 	bl	800ee10 <aci_gap_set_discoverable>
 8011416:	4603      	mov	r3, r0
 8011418:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 801141a:	4906      	ldr	r1, [pc, #24]	; (8011434 <Adv_Request+0x5c>)
 801141c:	2012      	movs	r0, #18
 801141e:	f7fe f81d 	bl	800f45c <aci_gap_update_adv_data>
 8011422:	4603      	mov	r3, r0
 8011424:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8011426:	bf00      	nop
}
 8011428:	3710      	adds	r7, #16
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
 801142e:	bf00      	nop
 8011430:	20000908 	.word	0x20000908
 8011434:	200000a4 	.word	0x200000a4

08011438 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b086      	sub	sp, #24
 801143c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 801143e:	f7ff fdbf 	bl	8010fc0 <LL_FLASH_GetUDN>
 8011442:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8011444:	693b      	ldr	r3, [r7, #16]
 8011446:	f1b3 3fff 	cmp.w	r3, #4294967295
 801144a:	d023      	beq.n	8011494 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 801144c:	f7ff fdd0 	bl	8010ff0 <LL_FLASH_GetSTCompanyID>
 8011450:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8011452:	f7ff fdc1 	bl	8010fd8 <LL_FLASH_GetDeviceID>
 8011456:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8011458:	693b      	ldr	r3, [r7, #16]
 801145a:	b2da      	uxtb	r2, r3
 801145c:	4b16      	ldr	r3, [pc, #88]	; (80114b8 <BleGetBdAddress+0x80>)
 801145e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8011460:	693b      	ldr	r3, [r7, #16]
 8011462:	0a1b      	lsrs	r3, r3, #8
 8011464:	b2da      	uxtb	r2, r3
 8011466:	4b14      	ldr	r3, [pc, #80]	; (80114b8 <BleGetBdAddress+0x80>)
 8011468:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	b2da      	uxtb	r2, r3
 801146e:	4b12      	ldr	r3, [pc, #72]	; (80114b8 <BleGetBdAddress+0x80>)
 8011470:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8011472:	68bb      	ldr	r3, [r7, #8]
 8011474:	b2da      	uxtb	r2, r3
 8011476:	4b10      	ldr	r3, [pc, #64]	; (80114b8 <BleGetBdAddress+0x80>)
 8011478:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 801147a:	68bb      	ldr	r3, [r7, #8]
 801147c:	0a1b      	lsrs	r3, r3, #8
 801147e:	b2da      	uxtb	r2, r3
 8011480:	4b0d      	ldr	r3, [pc, #52]	; (80114b8 <BleGetBdAddress+0x80>)
 8011482:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8011484:	68bb      	ldr	r3, [r7, #8]
 8011486:	0c1b      	lsrs	r3, r3, #16
 8011488:	b2da      	uxtb	r2, r3
 801148a:	4b0b      	ldr	r3, [pc, #44]	; (80114b8 <BleGetBdAddress+0x80>)
 801148c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 801148e:	4b0a      	ldr	r3, [pc, #40]	; (80114b8 <BleGetBdAddress+0x80>)
 8011490:	617b      	str	r3, [r7, #20]
 8011492:	e00b      	b.n	80114ac <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8011494:	2000      	movs	r0, #0
 8011496:	f7ff fcad 	bl	8010df4 <OTP_Read>
 801149a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d002      	beq.n	80114a8 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	617b      	str	r3, [r7, #20]
 80114a6:	e001      	b.n	80114ac <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80114a8:	4b04      	ldr	r3, [pc, #16]	; (80114bc <BleGetBdAddress+0x84>)
 80114aa:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80114ac:	697b      	ldr	r3, [r7, #20]
}
 80114ae:	4618      	mov	r0, r3
 80114b0:	3718      	adds	r7, #24
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}
 80114b6:	bf00      	nop
 80114b8:	20000900 	.word	0x20000900
 80114bc:	08017138 	.word	0x08017138

080114c0 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80114c0:	b580      	push	{r7, lr}
 80114c2:	b082      	sub	sp, #8
 80114c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80114c6:	4b0a      	ldr	r3, [pc, #40]	; (80114f0 <Adv_Cancel+0x30>)
 80114c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80114cc:	2b05      	cmp	r3, #5
 80114ce:	d00a      	beq.n	80114e6 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80114d0:	2392      	movs	r3, #146	; 0x92
 80114d2:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80114d4:	f7fd fc78 	bl	800edc8 <aci_gap_set_non_discoverable>
 80114d8:	4603      	mov	r3, r0
 80114da:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80114dc:	4b04      	ldr	r3, [pc, #16]	; (80114f0 <Adv_Cancel+0x30>)
 80114de:	2200      	movs	r2, #0
 80114e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 80114e4:	bf00      	nop
 80114e6:	bf00      	nop
}
 80114e8:	3708      	adds	r7, #8
 80114ea:	46bd      	mov	sp, r7
 80114ec:	bd80      	pop	{r7, pc}
 80114ee:	bf00      	nop
 80114f0:	20000908 	.word	0x20000908

080114f4 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b082      	sub	sp, #8
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80114fc:	2100      	movs	r1, #0
 80114fe:	2002      	movs	r0, #2
 8011500:	f002 f93e 	bl	8013780 <UTIL_SEQ_SetTask>

  return;
 8011504:	bf00      	nop
}
 8011506:	3708      	adds	r7, #8
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}

0801150c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b082      	sub	sp, #8
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8011514:	2001      	movs	r0, #1
 8011516:	f002 f99f 	bl	8013858 <UTIL_SEQ_SetEvt>

  return;
 801151a:	bf00      	nop
}
 801151c:	3708      	adds	r7, #8
 801151e:	46bd      	mov	sp, r7
 8011520:	bd80      	pop	{r7, pc}

08011522 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8011522:	b580      	push	{r7, lr}
 8011524:	b082      	sub	sp, #8
 8011526:	af00      	add	r7, sp, #0
 8011528:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 801152a:	2001      	movs	r0, #1
 801152c:	f002 f9b4 	bl	8013898 <UTIL_SEQ_WaitEvt>

  return;
 8011530:	bf00      	nop
}
 8011532:	3708      	adds	r7, #8
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}

08011538 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b084      	sub	sp, #16
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	685b      	ldr	r3, [r3, #4]
 8011548:	3308      	adds	r3, #8
 801154a:	4618      	mov	r0, r3
 801154c:	f7fe fdfa 	bl	8010144 <SVCCTL_UserEvtRx>
 8011550:	4603      	mov	r3, r0
 8011552:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8011554:	7afb      	ldrb	r3, [r7, #11]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d003      	beq.n	8011562 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	2201      	movs	r2, #1
 801155e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8011560:	e003      	b.n	801156a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	2200      	movs	r2, #0
 8011566:	701a      	strb	r2, [r3, #0]
  return;
 8011568:	bf00      	nop
}
 801156a:	3710      	adds	r7, #16
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}

08011570 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b084      	sub	sp, #16
 8011574:	af00      	add	r7, sp, #0
 8011576:	4603      	mov	r3, r0
 8011578:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 801157a:	79fb      	ldrb	r3, [r7, #7]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d002      	beq.n	8011586 <BLE_StatusNot+0x16>
 8011580:	2b01      	cmp	r3, #1
 8011582:	d006      	beq.n	8011592 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8011584:	e00b      	b.n	801159e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8011586:	237f      	movs	r3, #127	; 0x7f
 8011588:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 801158a:	68f8      	ldr	r0, [r7, #12]
 801158c:	f002 f924 	bl	80137d8 <UTIL_SEQ_PauseTask>
      break;
 8011590:	e005      	b.n	801159e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8011592:	237f      	movs	r3, #127	; 0x7f
 8011594:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8011596:	68f8      	ldr	r0, [r7, #12]
 8011598:	f002 f93e 	bl	8013818 <UTIL_SEQ_ResumeTask>
      break;
 801159c:	bf00      	nop
  }

  return;
 801159e:	bf00      	nop
}
 80115a0:	3710      	adds	r7, #16
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bd80      	pop	{r7, pc}
	...

080115a8 <task_main>:
void Amplification_Function(void);
void Sample_Function(char* str, uint8_t sample_type);
void MeasureChemical_Function(GPIO_TypeDef *GPIO_Port, uint16_t GPIO_Pin);

void task_main(void)
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	af00      	add	r7, sp, #0
	//Initialize temp/hum sensor
	sht3x_init(&sht3x_handle);
 80115ac:	4828      	ldr	r0, [pc, #160]	; (8011650 <task_main+0xa8>)
 80115ae:	f7f0 fc47 	bl	8001e40 <sht3x_init>

	//Check if battery was done charging
	if(battery_completed == 1)
 80115b2:	4b28      	ldr	r3, [pc, #160]	; (8011654 <task_main+0xac>)
 80115b4:	781b      	ldrb	r3, [r3, #0]
 80115b6:	2b01      	cmp	r3, #1
 80115b8:	d124      	bne.n	8011604 <task_main+0x5c>
	{


		SSD1306_Clear();
 80115ba:	f7f0 ff24 	bl	8002406 <SSD1306_Clear>
		SSD1306_GotoXY(15, 5);
 80115be:	2105      	movs	r1, #5
 80115c0:	200f      	movs	r0, #15
 80115c2:	f7f0 fe65 	bl	8002290 <SSD1306_GotoXY>
		SSD1306_Puts("Bateria cargada", &Font_7x10, 1);
 80115c6:	2201      	movs	r2, #1
 80115c8:	4923      	ldr	r1, [pc, #140]	; (8011658 <task_main+0xb0>)
 80115ca:	4824      	ldr	r0, [pc, #144]	; (801165c <task_main+0xb4>)
 80115cc:	f7f0 fef6 	bl	80023bc <SSD1306_Puts>
		SSD1306_GotoXY(5, 15);
 80115d0:	210f      	movs	r1, #15
 80115d2:	2005      	movs	r0, #5
 80115d4:	f7f0 fe5c 	bl	8002290 <SSD1306_GotoXY>
		SSD1306_Puts("Desconectar cable USB", &Font_7x10, 1);
 80115d8:	2201      	movs	r2, #1
 80115da:	491f      	ldr	r1, [pc, #124]	; (8011658 <task_main+0xb0>)
 80115dc:	4820      	ldr	r0, [pc, #128]	; (8011660 <task_main+0xb8>)
 80115de:	f7f0 feed 	bl	80023bc <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80115e2:	f7f0 fdaf 	bl	8002144 <SSD1306_UpdateScreen>
		HAL_Delay(3000);
 80115e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80115ea:	f7ef ff1a 	bl	8001422 <HAL_Delay>

		SSD1306_Clear();
 80115ee:	f7f0 ff0a 	bl	8002406 <SSD1306_Clear>
		HAL_GPIO_WritePin(GPIOA, RGB_GREEN_Pin, GPIO_PIN_RESET);
 80115f2:	2200      	movs	r2, #0
 80115f4:	2110      	movs	r1, #16
 80115f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80115fa:	f7f3 fbc9 	bl	8004d90 <HAL_GPIO_WritePin>
		battery_completed = 0;
 80115fe:	4b15      	ldr	r3, [pc, #84]	; (8011654 <task_main+0xac>)
 8011600:	2200      	movs	r2, #0
 8011602:	701a      	strb	r2, [r3, #0]
	}

	if(menu_counter == 0)
 8011604:	4b17      	ldr	r3, [pc, #92]	; (8011664 <task_main+0xbc>)
 8011606:	781b      	ldrb	r3, [r3, #0]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d106      	bne.n	801161a <task_main+0x72>
	{
		DisplayMenu_Function();
 801160c:	f000 f862 	bl	80116d4 <DisplayMenu_Function>
		UTIL_SEQ_SetTask(1 << CFG_TASK_MAIN, CFG_SCH_PRIO_0);
 8011610:	2100      	movs	r1, #0
 8011612:	2004      	movs	r0, #4
 8011614:	f002 f8b4 	bl	8013780 <UTIL_SEQ_SetTask>
	{
		HAL_Delay(500);
		SSD1306_Clear();
		UTIL_SEQ_SetTask(1 << CFG_TASK_READ_TEMP_HUM, CFG_SCH_PRIO_0);
	}
}
 8011618:	e018      	b.n	801164c <task_main+0xa4>
	else if(menu_counter == 1)
 801161a:	4b12      	ldr	r3, [pc, #72]	; (8011664 <task_main+0xbc>)
 801161c:	781b      	ldrb	r3, [r3, #0]
 801161e:	2b01      	cmp	r3, #1
 8011620:	d106      	bne.n	8011630 <task_main+0x88>
		SSD1306_Clear();
 8011622:	f7f0 fef0 	bl	8002406 <SSD1306_Clear>
		UTIL_SEQ_SetTask(1 << CFG_TASK_MAIN_2, CFG_SCH_PRIO_0);
 8011626:	2100      	movs	r1, #0
 8011628:	2010      	movs	r0, #16
 801162a:	f002 f8a9 	bl	8013780 <UTIL_SEQ_SetTask>
}
 801162e:	e00d      	b.n	801164c <task_main+0xa4>
	else if(menu_counter == 2)
 8011630:	4b0c      	ldr	r3, [pc, #48]	; (8011664 <task_main+0xbc>)
 8011632:	781b      	ldrb	r3, [r3, #0]
 8011634:	2b02      	cmp	r3, #2
 8011636:	d109      	bne.n	801164c <task_main+0xa4>
		HAL_Delay(500);
 8011638:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801163c:	f7ef fef1 	bl	8001422 <HAL_Delay>
		SSD1306_Clear();
 8011640:	f7f0 fee1 	bl	8002406 <SSD1306_Clear>
		UTIL_SEQ_SetTask(1 << CFG_TASK_READ_TEMP_HUM, CFG_SCH_PRIO_0);
 8011644:	2100      	movs	r1, #0
 8011646:	2008      	movs	r0, #8
 8011648:	f002 f89a 	bl	8013780 <UTIL_SEQ_SetTask>
}
 801164c:	bf00      	nop
 801164e:	bd80      	pop	{r7, pc}
 8011650:	200000d0 	.word	0x200000d0
 8011654:	2000047c 	.word	0x2000047c
 8011658:	20000004 	.word	0x20000004
 801165c:	080166b8 	.word	0x080166b8
 8011660:	080166c8 	.word	0x080166c8
 8011664:	20000a87 	.word	0x20000a87

08011668 <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8011668:	b480      	push	{r7}
 801166a:	b083      	sub	sp, #12
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	781b      	ldrb	r3, [r3, #0]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d002      	beq.n	801167e <Custom_APP_Notification+0x16>
 8011678:	2b01      	cmp	r3, #1
 801167a:	d002      	beq.n	8011682 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 801167c:	e002      	b.n	8011684 <Custom_APP_Notification+0x1c>
      break;
 801167e:	bf00      	nop
 8011680:	e000      	b.n	8011684 <Custom_APP_Notification+0x1c>
      break;
 8011682:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8011684:	bf00      	nop
}
 8011686:	370c      	adds	r7, #12
 8011688:	46bd      	mov	sp, r7
 801168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168e:	4770      	bx	lr

08011690 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	  //Advertising OFF
	  //ADV_Stop();

	  //Check if battery has sufficient charge
	  Battery_Percentage();
 8011694:	f000 fd58 	bl	8012148 <Battery_Percentage>

	  //Task 1
	  UTIL_SEQ_RegTask( 1 << CFG_TASK_MAIN, UTIL_SEQ_RFU, task_main);
 8011698:	4a0a      	ldr	r2, [pc, #40]	; (80116c4 <Custom_APP_Init+0x34>)
 801169a:	2100      	movs	r1, #0
 801169c:	2004      	movs	r0, #4
 801169e:	f002 f84d 	bl	801373c <UTIL_SEQ_RegTask>

	  //Task 2
	  UTIL_SEQ_RegTask( 1 << CFG_TASK_READ_TEMP_HUM, UTIL_SEQ_RFU, TempHum_Function);
 80116a2:	4a09      	ldr	r2, [pc, #36]	; (80116c8 <Custom_APP_Init+0x38>)
 80116a4:	2100      	movs	r1, #0
 80116a6:	2008      	movs	r0, #8
 80116a8:	f002 f848 	bl	801373c <UTIL_SEQ_RegTask>

	  //Task 3
	  UTIL_SEQ_RegTask( 1 << CFG_TASK_MAIN_2, UTIL_SEQ_RFU, Amplification_Function);
 80116ac:	4a07      	ldr	r2, [pc, #28]	; (80116cc <Custom_APP_Init+0x3c>)
 80116ae:	2100      	movs	r1, #0
 80116b0:	2010      	movs	r0, #16
 80116b2:	f002 f843 	bl	801373c <UTIL_SEQ_RegTask>

	  //Task 4
	  UTIL_SEQ_RegTask( 1 << CFG_TASK_SHOW_VALUES, UTIL_SEQ_RFU, ShowValues_Function);
 80116b6:	4a06      	ldr	r2, [pc, #24]	; (80116d0 <Custom_APP_Init+0x40>)
 80116b8:	2100      	movs	r1, #0
 80116ba:	2020      	movs	r0, #32
 80116bc:	f002 f83e 	bl	801373c <UTIL_SEQ_RegTask>


  /* USER CODE END CUSTOM_APP_Init */
  return;
 80116c0:	bf00      	nop
}
 80116c2:	bd80      	pop	{r7, pc}
 80116c4:	080115a9 	.word	0x080115a9
 80116c8:	08011939 	.word	0x08011939
 80116cc:	080117e9 	.word	0x080117e9
 80116d0:	08011b5d 	.word	0x08011b5d

080116d4 <DisplayMenu_Function>:

/* USER CODE BEGIN FD */
void DisplayMenu_Function(void)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b082      	sub	sp, #8
 80116d8:	af00      	add	r7, sp, #0
	//Se presiona boton 1
	if((HAL_GPIO_ReadPin(BUTT_2_GPIO_Port, BUTT_2_Pin) == GPIO_PIN_RESET))
 80116da:	2110      	movs	r1, #16
 80116dc:	4838      	ldr	r0, [pc, #224]	; (80117c0 <DisplayMenu_Function+0xec>)
 80116de:	f7f3 fb3f 	bl	8004d60 <HAL_GPIO_ReadPin>
 80116e2:	4603      	mov	r3, r0
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d113      	bne.n	8011710 <DisplayMenu_Function+0x3c>
	{
		//SSD1306_Clear();
		if (selected_main >= 1)
 80116e8:	4b36      	ldr	r3, [pc, #216]	; (80117c4 <DisplayMenu_Function+0xf0>)
 80116ea:	781b      	ldrb	r3, [r3, #0]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d005      	beq.n	80116fc <DisplayMenu_Function+0x28>
		{
			SSD1306_Clear();
 80116f0:	f7f0 fe89 	bl	8002406 <SSD1306_Clear>
			selected_main = 0;
 80116f4:	4b33      	ldr	r3, [pc, #204]	; (80117c4 <DisplayMenu_Function+0xf0>)
 80116f6:	2200      	movs	r2, #0
 80116f8:	701a      	strb	r2, [r3, #0]
 80116fa:	e009      	b.n	8011710 <DisplayMenu_Function+0x3c>
		}
		else
		{
			HAL_Delay(500);
 80116fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011700:	f7ef fe8f 	bl	8001422 <HAL_Delay>
			selected_main++;
 8011704:	4b2f      	ldr	r3, [pc, #188]	; (80117c4 <DisplayMenu_Function+0xf0>)
 8011706:	781b      	ldrb	r3, [r3, #0]
 8011708:	3301      	adds	r3, #1
 801170a:	b2da      	uxtb	r2, r3
 801170c:	4b2d      	ldr	r3, [pc, #180]	; (80117c4 <DisplayMenu_Function+0xf0>)
 801170e:	701a      	strb	r2, [r3, #0]
		}
	}

	//Se presiona boton 2
	if((HAL_GPIO_ReadPin(BUTT_1_GPIO_Port, BUTT_1_Pin) == GPIO_PIN_RESET))
 8011710:	2102      	movs	r1, #2
 8011712:	482d      	ldr	r0, [pc, #180]	; (80117c8 <DisplayMenu_Function+0xf4>)
 8011714:	f7f3 fb24 	bl	8004d60 <HAL_GPIO_ReadPin>
 8011718:	4603      	mov	r3, r0
 801171a:	2b00      	cmp	r3, #0
 801171c:	d109      	bne.n	8011732 <DisplayMenu_Function+0x5e>
	{
		HAL_Delay(500);
 801171e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011722:	f7ef fe7e 	bl	8001422 <HAL_Delay>
		entered_main = selected_main + 1;
 8011726:	4b27      	ldr	r3, [pc, #156]	; (80117c4 <DisplayMenu_Function+0xf0>)
 8011728:	781b      	ldrb	r3, [r3, #0]
 801172a:	3301      	adds	r3, #1
 801172c:	b2da      	uxtb	r2, r3
 801172e:	4b27      	ldr	r3, [pc, #156]	; (80117cc <DisplayMenu_Function+0xf8>)
 8011730:	701a      	strb	r2, [r3, #0]
	}

	//No se presiona ningun boton y solo se muestra el menu inicial
	if (entered_main == 0)
 8011732:	4b26      	ldr	r3, [pc, #152]	; (80117cc <DisplayMenu_Function+0xf8>)
 8011734:	781b      	ldrb	r3, [r3, #0]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d128      	bne.n	801178c <DisplayMenu_Function+0xb8>
	{
		SSD1306_GotoXY(1, 0);
 801173a:	2100      	movs	r1, #0
 801173c:	2001      	movs	r0, #1
 801173e:	f7f0 fda7 	bl	8002290 <SSD1306_GotoXY>
		SSD1306_Puts("SNAP Menu", &Font_7x10, 1);
 8011742:	2201      	movs	r2, #1
 8011744:	4922      	ldr	r1, [pc, #136]	; (80117d0 <DisplayMenu_Function+0xfc>)
 8011746:	4823      	ldr	r0, [pc, #140]	; (80117d4 <DisplayMenu_Function+0x100>)
 8011748:	f7f0 fe38 	bl	80023bc <SSD1306_Puts>
		SSD1306_UpdateScreen();
 801174c:	f7f0 fcfa 	bl	8002144 <SSD1306_UpdateScreen>
		for (uint8_t i = 0; i <= 1; i++)
 8011750:	2300      	movs	r3, #0
 8011752:	71fb      	strb	r3, [r7, #7]
 8011754:	e016      	b.n	8011784 <DisplayMenu_Function+0xb0>
		{
			if (i == selected_main)
 8011756:	4b1b      	ldr	r3, [pc, #108]	; (80117c4 <DisplayMenu_Function+0xf0>)
 8011758:	781b      	ldrb	r3, [r3, #0]
 801175a:	79fa      	ldrb	r2, [r7, #7]
 801175c:	429a      	cmp	r2, r3
 801175e:	d10e      	bne.n	801177e <DisplayMenu_Function+0xaa>
			{
				SSD1306_GotoXY(1, 30);
 8011760:	211e      	movs	r1, #30
 8011762:	2001      	movs	r0, #1
 8011764:	f7f0 fd94 	bl	8002290 <SSD1306_GotoXY>
				SSD1306_Puts(options_menu[i], &Font_7x10, 0);
 8011768:	79fb      	ldrb	r3, [r7, #7]
 801176a:	4a1b      	ldr	r2, [pc, #108]	; (80117d8 <DisplayMenu_Function+0x104>)
 801176c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011770:	2200      	movs	r2, #0
 8011772:	4917      	ldr	r1, [pc, #92]	; (80117d0 <DisplayMenu_Function+0xfc>)
 8011774:	4618      	mov	r0, r3
 8011776:	f7f0 fe21 	bl	80023bc <SSD1306_Puts>
				SSD1306_UpdateScreen();
 801177a:	f7f0 fce3 	bl	8002144 <SSD1306_UpdateScreen>
		for (uint8_t i = 0; i <= 1; i++)
 801177e:	79fb      	ldrb	r3, [r7, #7]
 8011780:	3301      	adds	r3, #1
 8011782:	71fb      	strb	r3, [r7, #7]
 8011784:	79fb      	ldrb	r3, [r7, #7]
 8011786:	2b01      	cmp	r3, #1
 8011788:	d9e5      	bls.n	8011756 <DisplayMenu_Function+0x82>
	//Ingresa a la funcion de obtencion de datos de temperatura y humedad
	else if (entered_main == 2)
	{
		menu_counter = 2;
	}
}
 801178a:	e014      	b.n	80117b6 <DisplayMenu_Function+0xe2>
	else if (entered_main == 1)
 801178c:	4b0f      	ldr	r3, [pc, #60]	; (80117cc <DisplayMenu_Function+0xf8>)
 801178e:	781b      	ldrb	r3, [r3, #0]
 8011790:	2b01      	cmp	r3, #1
 8011792:	d109      	bne.n	80117a8 <DisplayMenu_Function+0xd4>
		menu_counter = 1;
 8011794:	4b11      	ldr	r3, [pc, #68]	; (80117dc <DisplayMenu_Function+0x108>)
 8011796:	2201      	movs	r2, #1
 8011798:	701a      	strb	r2, [r3, #0]
		entered_second = 0;
 801179a:	4b11      	ldr	r3, [pc, #68]	; (80117e0 <DisplayMenu_Function+0x10c>)
 801179c:	2200      	movs	r2, #0
 801179e:	701a      	strb	r2, [r3, #0]
		selected_second = 0;
 80117a0:	4b10      	ldr	r3, [pc, #64]	; (80117e4 <DisplayMenu_Function+0x110>)
 80117a2:	2200      	movs	r2, #0
 80117a4:	701a      	strb	r2, [r3, #0]
}
 80117a6:	e006      	b.n	80117b6 <DisplayMenu_Function+0xe2>
	else if (entered_main == 2)
 80117a8:	4b08      	ldr	r3, [pc, #32]	; (80117cc <DisplayMenu_Function+0xf8>)
 80117aa:	781b      	ldrb	r3, [r3, #0]
 80117ac:	2b02      	cmp	r3, #2
 80117ae:	d102      	bne.n	80117b6 <DisplayMenu_Function+0xe2>
		menu_counter = 2;
 80117b0:	4b0a      	ldr	r3, [pc, #40]	; (80117dc <DisplayMenu_Function+0x108>)
 80117b2:	2202      	movs	r2, #2
 80117b4:	701a      	strb	r2, [r3, #0]
}
 80117b6:	bf00      	nop
 80117b8:	3708      	adds	r7, #8
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bd80      	pop	{r7, pc}
 80117be:	bf00      	nop
 80117c0:	48001000 	.word	0x48001000
 80117c4:	20000a88 	.word	0x20000a88
 80117c8:	48000400 	.word	0x48000400
 80117cc:	20000a8b 	.word	0x20000a8b
 80117d0:	20000004 	.word	0x20000004
 80117d4:	080166e0 	.word	0x080166e0
 80117d8:	200000b8 	.word	0x200000b8
 80117dc:	20000a87 	.word	0x20000a87
 80117e0:	20000a8a 	.word	0x20000a8a
 80117e4:	20000a89 	.word	0x20000a89

080117e8 <Amplification_Function>:

void Amplification_Function(void)
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b082      	sub	sp, #8
 80117ec:	af00      	add	r7, sp, #0
	//Se presiona boton 1
	if((HAL_GPIO_ReadPin(BUTT_2_GPIO_Port, BUTT_2_Pin) == GPIO_PIN_RESET))
 80117ee:	2110      	movs	r1, #16
 80117f0:	4847      	ldr	r0, [pc, #284]	; (8011910 <Amplification_Function+0x128>)
 80117f2:	f7f3 fab5 	bl	8004d60 <HAL_GPIO_ReadPin>
 80117f6:	4603      	mov	r3, r0
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d113      	bne.n	8011824 <Amplification_Function+0x3c>
	{
		//SSD1306_Clear();
		if (selected_second >= 3)
 80117fc:	4b45      	ldr	r3, [pc, #276]	; (8011914 <Amplification_Function+0x12c>)
 80117fe:	781b      	ldrb	r3, [r3, #0]
 8011800:	2b02      	cmp	r3, #2
 8011802:	d905      	bls.n	8011810 <Amplification_Function+0x28>
		{
			SSD1306_Clear();
 8011804:	f7f0 fdff 	bl	8002406 <SSD1306_Clear>
			selected_second = 0;
 8011808:	4b42      	ldr	r3, [pc, #264]	; (8011914 <Amplification_Function+0x12c>)
 801180a:	2200      	movs	r2, #0
 801180c:	701a      	strb	r2, [r3, #0]
 801180e:	e009      	b.n	8011824 <Amplification_Function+0x3c>
		}
		else
		{
			HAL_Delay(500);
 8011810:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011814:	f7ef fe05 	bl	8001422 <HAL_Delay>
			selected_second++;
 8011818:	4b3e      	ldr	r3, [pc, #248]	; (8011914 <Amplification_Function+0x12c>)
 801181a:	781b      	ldrb	r3, [r3, #0]
 801181c:	3301      	adds	r3, #1
 801181e:	b2da      	uxtb	r2, r3
 8011820:	4b3c      	ldr	r3, [pc, #240]	; (8011914 <Amplification_Function+0x12c>)
 8011822:	701a      	strb	r2, [r3, #0]
		}
	}

	//Se presiona boton 2
	if((HAL_GPIO_ReadPin(BUTT_1_GPIO_Port, BUTT_1_Pin) == GPIO_PIN_RESET))
 8011824:	2102      	movs	r1, #2
 8011826:	483c      	ldr	r0, [pc, #240]	; (8011918 <Amplification_Function+0x130>)
 8011828:	f7f3 fa9a 	bl	8004d60 <HAL_GPIO_ReadPin>
 801182c:	4603      	mov	r3, r0
 801182e:	2b00      	cmp	r3, #0
 8011830:	d109      	bne.n	8011846 <Amplification_Function+0x5e>
	{
		HAL_Delay(500);
 8011832:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011836:	f7ef fdf4 	bl	8001422 <HAL_Delay>
		entered_second = selected_second + 1;
 801183a:	4b36      	ldr	r3, [pc, #216]	; (8011914 <Amplification_Function+0x12c>)
 801183c:	781b      	ldrb	r3, [r3, #0]
 801183e:	3301      	adds	r3, #1
 8011840:	b2da      	uxtb	r2, r3
 8011842:	4b36      	ldr	r3, [pc, #216]	; (801191c <Amplification_Function+0x134>)
 8011844:	701a      	strb	r2, [r3, #0]
	}

	if (entered_second == 0)
 8011846:	4b35      	ldr	r3, [pc, #212]	; (801191c <Amplification_Function+0x134>)
 8011848:	781b      	ldrb	r3, [r3, #0]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d127      	bne.n	801189e <Amplification_Function+0xb6>
	{
		SSD1306_GotoXY (1, 0);
 801184e:	2100      	movs	r1, #0
 8011850:	2001      	movs	r0, #1
 8011852:	f7f0 fd1d 	bl	8002290 <SSD1306_GotoXY>
		SSD1306_Puts("Elegir quimico", &Font_7x10, 1);
 8011856:	2201      	movs	r2, #1
 8011858:	4931      	ldr	r1, [pc, #196]	; (8011920 <Amplification_Function+0x138>)
 801185a:	4832      	ldr	r0, [pc, #200]	; (8011924 <Amplification_Function+0x13c>)
 801185c:	f7f0 fdae 	bl	80023bc <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8011860:	f7f0 fc70 	bl	8002144 <SSD1306_UpdateScreen>
		for (uint8_t i = 0; i <= 3; i++)
 8011864:	2300      	movs	r3, #0
 8011866:	71fb      	strb	r3, [r7, #7]
 8011868:	e016      	b.n	8011898 <Amplification_Function+0xb0>
		{
			if (i == selected_second)
 801186a:	4b2a      	ldr	r3, [pc, #168]	; (8011914 <Amplification_Function+0x12c>)
 801186c:	781b      	ldrb	r3, [r3, #0]
 801186e:	79fa      	ldrb	r2, [r7, #7]
 8011870:	429a      	cmp	r2, r3
 8011872:	d10e      	bne.n	8011892 <Amplification_Function+0xaa>
			{
				SSD1306_GotoXY(1, 30);
 8011874:	211e      	movs	r1, #30
 8011876:	2001      	movs	r0, #1
 8011878:	f7f0 fd0a 	bl	8002290 <SSD1306_GotoXY>
				SSD1306_Puts(options_elements[i], &Font_7x10, 0);
 801187c:	79fb      	ldrb	r3, [r7, #7]
 801187e:	4a2a      	ldr	r2, [pc, #168]	; (8011928 <Amplification_Function+0x140>)
 8011880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011884:	2200      	movs	r2, #0
 8011886:	4926      	ldr	r1, [pc, #152]	; (8011920 <Amplification_Function+0x138>)
 8011888:	4618      	mov	r0, r3
 801188a:	f7f0 fd97 	bl	80023bc <SSD1306_Puts>
				SSD1306_UpdateScreen();
 801188e:	f7f0 fc59 	bl	8002144 <SSD1306_UpdateScreen>
		for (uint8_t i = 0; i <= 3; i++)
 8011892:	79fb      	ldrb	r3, [r7, #7]
 8011894:	3301      	adds	r3, #1
 8011896:	71fb      	strb	r3, [r7, #7]
 8011898:	79fb      	ldrb	r3, [r7, #7]
 801189a:	2b03      	cmp	r3, #3
 801189c:	d9e5      	bls.n	801186a <Amplification_Function+0x82>
			}
		}
	}

	//Phosphorus
	if (entered_second == 1)
 801189e:	4b1f      	ldr	r3, [pc, #124]	; (801191c <Amplification_Function+0x134>)
 80118a0:	781b      	ldrb	r3, [r3, #0]
 80118a2:	2b01      	cmp	r3, #1
 80118a4:	d106      	bne.n	80118b4 <Amplification_Function+0xcc>
	{
		MeasureChemical_Function(GPIOA, LED_WP7_EN_Pin);
 80118a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80118aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80118ae:	f000 f8f3 	bl	8011a98 <MeasureChemical_Function>
 80118b2:	e025      	b.n	8011900 <Amplification_Function+0x118>
	}

	//Potasium
	else if (entered_second == 2)
 80118b4:	4b19      	ldr	r3, [pc, #100]	; (801191c <Amplification_Function+0x134>)
 80118b6:	781b      	ldrb	r3, [r3, #0]
 80118b8:	2b02      	cmp	r3, #2
 80118ba:	d104      	bne.n	80118c6 <Amplification_Function+0xde>
	{
		MeasureChemical_Function(GPIOB, LED_4273_EN_Pin);
 80118bc:	2110      	movs	r1, #16
 80118be:	4816      	ldr	r0, [pc, #88]	; (8011918 <Amplification_Function+0x130>)
 80118c0:	f000 f8ea 	bl	8011a98 <MeasureChemical_Function>
 80118c4:	e01c      	b.n	8011900 <Amplification_Function+0x118>
	}

	//Nitrogen
	else if (entered_second == 3)
 80118c6:	4b15      	ldr	r3, [pc, #84]	; (801191c <Amplification_Function+0x134>)
 80118c8:	781b      	ldrb	r3, [r3, #0]
 80118ca:	2b03      	cmp	r3, #3
 80118cc:	d104      	bne.n	80118d8 <Amplification_Function+0xf0>
	{
		MeasureChemical_Function(GPIOB, LED_4261_EN_Pin);
 80118ce:	2120      	movs	r1, #32
 80118d0:	4811      	ldr	r0, [pc, #68]	; (8011918 <Amplification_Function+0x130>)
 80118d2:	f000 f8e1 	bl	8011a98 <MeasureChemical_Function>
 80118d6:	e013      	b.n	8011900 <Amplification_Function+0x118>
	}

	//Return
	else if (entered_second == 4)
 80118d8:	4b10      	ldr	r3, [pc, #64]	; (801191c <Amplification_Function+0x134>)
 80118da:	781b      	ldrb	r3, [r3, #0]
 80118dc:	2b04      	cmp	r3, #4
 80118de:	d10f      	bne.n	8011900 <Amplification_Function+0x118>
	{
		menu_counter = 0;
 80118e0:	4b12      	ldr	r3, [pc, #72]	; (801192c <Amplification_Function+0x144>)
 80118e2:	2200      	movs	r2, #0
 80118e4:	701a      	strb	r2, [r3, #0]
		entered_main = 0;
 80118e6:	4b12      	ldr	r3, [pc, #72]	; (8011930 <Amplification_Function+0x148>)
 80118e8:	2200      	movs	r2, #0
 80118ea:	701a      	strb	r2, [r3, #0]
		selected_main = 0;
 80118ec:	4b11      	ldr	r3, [pc, #68]	; (8011934 <Amplification_Function+0x14c>)
 80118ee:	2200      	movs	r2, #0
 80118f0:	701a      	strb	r2, [r3, #0]
		SSD1306_Clear();
 80118f2:	f7f0 fd88 	bl	8002406 <SSD1306_Clear>
		UTIL_SEQ_SetTask(1 << CFG_TASK_MAIN, CFG_SCH_PRIO_0);
 80118f6:	2100      	movs	r1, #0
 80118f8:	2004      	movs	r0, #4
 80118fa:	f001 ff41 	bl	8013780 <UTIL_SEQ_SetTask>
		return;
 80118fe:	e004      	b.n	801190a <Amplification_Function+0x122>
	}

	UTIL_SEQ_SetTask(1 << CFG_TASK_MAIN_2, CFG_SCH_PRIO_0);
 8011900:	2100      	movs	r1, #0
 8011902:	2010      	movs	r0, #16
 8011904:	f001 ff3c 	bl	8013780 <UTIL_SEQ_SetTask>
	return;
 8011908:	bf00      	nop
}
 801190a:	3708      	adds	r7, #8
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}
 8011910:	48001000 	.word	0x48001000
 8011914:	20000a89 	.word	0x20000a89
 8011918:	48000400 	.word	0x48000400
 801191c:	20000a8a 	.word	0x20000a8a
 8011920:	20000004 	.word	0x20000004
 8011924:	080166ec 	.word	0x080166ec
 8011928:	200000c0 	.word	0x200000c0
 801192c:	20000a87 	.word	0x20000a87
 8011930:	20000a8b 	.word	0x20000a8b
 8011934:	20000a88 	.word	0x20000a88

08011938 <TempHum_Function>:

void TempHum_Function(void)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b082      	sub	sp, #8
 801193c:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(BUTT_1_GPIO_Port, BUTT_1_Pin) == GPIO_PIN_RESET)
 801193e:	2102      	movs	r1, #2
 8011940:	4846      	ldr	r0, [pc, #280]	; (8011a5c <TempHum_Function+0x124>)
 8011942:	f7f3 fa0d 	bl	8004d60 <HAL_GPIO_ReadPin>
 8011946:	4603      	mov	r3, r0
 8011948:	2b00      	cmp	r3, #0
 801194a:	d113      	bne.n	8011974 <TempHum_Function+0x3c>
	{
		entered_main = 0;
 801194c:	4b44      	ldr	r3, [pc, #272]	; (8011a60 <TempHum_Function+0x128>)
 801194e:	2200      	movs	r2, #0
 8011950:	701a      	strb	r2, [r3, #0]
		selected_main = 0;
 8011952:	4b44      	ldr	r3, [pc, #272]	; (8011a64 <TempHum_Function+0x12c>)
 8011954:	2200      	movs	r2, #0
 8011956:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << CFG_TASK_MAIN, CFG_SCH_PRIO_0);
 8011958:	2100      	movs	r1, #0
 801195a:	2004      	movs	r0, #4
 801195c:	f001 ff10 	bl	8013780 <UTIL_SEQ_SetTask>
		menu_counter = 0;
 8011960:	4b41      	ldr	r3, [pc, #260]	; (8011a68 <TempHum_Function+0x130>)
 8011962:	2200      	movs	r2, #0
 8011964:	701a      	strb	r2, [r3, #0]
		SSD1306_Clear();
 8011966:	f7f0 fd4e 	bl	8002406 <SSD1306_Clear>
		HAL_Delay(1000);
 801196a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801196e:	f7ef fd58 	bl	8001422 <HAL_Delay>
		Custom_STM_App_Update_Char(CUSTOM_STM_TEMP_HUM, &UpdateCharData[2]);

		//Repeats Task
		UTIL_SEQ_SetTask(1 << CFG_TASK_READ_TEMP_HUM, CFG_SCH_PRIO_0);
	}
}
 8011972:	e06f      	b.n	8011a54 <TempHum_Function+0x11c>
		SSD1306_GotoXY(1, 0);
 8011974:	2100      	movs	r1, #0
 8011976:	2001      	movs	r0, #1
 8011978:	f7f0 fc8a 	bl	8002290 <SSD1306_GotoXY>
		SSD1306_Puts("Back", &Font_7x10, 0);
 801197c:	2200      	movs	r2, #0
 801197e:	493b      	ldr	r1, [pc, #236]	; (8011a6c <TempHum_Function+0x134>)
 8011980:	483b      	ldr	r0, [pc, #236]	; (8011a70 <TempHum_Function+0x138>)
 8011982:	f7f0 fd1b 	bl	80023bc <SSD1306_Puts>
		SSD1306_GotoXY(29,0);
 8011986:	2100      	movs	r1, #0
 8011988:	201d      	movs	r0, #29
 801198a:	f7f0 fc81 	bl	8002290 <SSD1306_GotoXY>
		SSD1306_Puts("Temperatura", &Font_7x10, 1);
 801198e:	2201      	movs	r2, #1
 8011990:	4936      	ldr	r1, [pc, #216]	; (8011a6c <TempHum_Function+0x134>)
 8011992:	4838      	ldr	r0, [pc, #224]	; (8011a74 <TempHum_Function+0x13c>)
 8011994:	f7f0 fd12 	bl	80023bc <SSD1306_Puts>
		SSD1306_GotoXY(35,35);
 8011998:	2123      	movs	r1, #35	; 0x23
 801199a:	2023      	movs	r0, #35	; 0x23
 801199c:	f7f0 fc78 	bl	8002290 <SSD1306_GotoXY>
		SSD1306_Puts("Humedad", &Font_7x10, 1);
 80119a0:	2201      	movs	r2, #1
 80119a2:	4932      	ldr	r1, [pc, #200]	; (8011a6c <TempHum_Function+0x134>)
 80119a4:	4834      	ldr	r0, [pc, #208]	; (8011a78 <TempHum_Function+0x140>)
 80119a6:	f7f0 fd09 	bl	80023bc <SSD1306_Puts>
		sht3x_read_temperature_and_humidity(&sht3x_handle, &temperature, &humidity);
 80119aa:	4a34      	ldr	r2, [pc, #208]	; (8011a7c <TempHum_Function+0x144>)
 80119ac:	4934      	ldr	r1, [pc, #208]	; (8011a80 <TempHum_Function+0x148>)
 80119ae:	4835      	ldr	r0, [pc, #212]	; (8011a84 <TempHum_Function+0x14c>)
 80119b0:	f7f0 fa86 	bl	8001ec0 <sht3x_read_temperature_and_humidity>
		SSD1306_GotoXY(1, 20);
 80119b4:	2114      	movs	r1, #20
 80119b6:	2001      	movs	r0, #1
 80119b8:	f7f0 fc6a 	bl	8002290 <SSD1306_GotoXY>
		gcvt(temperature, 3, buf);
 80119bc:	4b30      	ldr	r3, [pc, #192]	; (8011a80 <TempHum_Function+0x148>)
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	4618      	mov	r0, r3
 80119c2:	f7ee fd99 	bl	80004f8 <__aeabi_f2d>
 80119c6:	4602      	mov	r2, r0
 80119c8:	460b      	mov	r3, r1
 80119ca:	492f      	ldr	r1, [pc, #188]	; (8011a88 <TempHum_Function+0x150>)
 80119cc:	2003      	movs	r0, #3
 80119ce:	ec43 2b10 	vmov	d0, r2, r3
 80119d2:	f002 f813 	bl	80139fc <gcvt>
		SSD1306_Puts(buf, &Font_7x10, 1);
 80119d6:	2201      	movs	r2, #1
 80119d8:	4924      	ldr	r1, [pc, #144]	; (8011a6c <TempHum_Function+0x134>)
 80119da:	482b      	ldr	r0, [pc, #172]	; (8011a88 <TempHum_Function+0x150>)
 80119dc:	f7f0 fcee 	bl	80023bc <SSD1306_Puts>
		SSD1306_GotoXY(1, 45);
 80119e0:	212d      	movs	r1, #45	; 0x2d
 80119e2:	2001      	movs	r0, #1
 80119e4:	f7f0 fc54 	bl	8002290 <SSD1306_GotoXY>
		gcvt(humidity, 3, buf);
 80119e8:	4b24      	ldr	r3, [pc, #144]	; (8011a7c <TempHum_Function+0x144>)
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	4618      	mov	r0, r3
 80119ee:	f7ee fd83 	bl	80004f8 <__aeabi_f2d>
 80119f2:	4602      	mov	r2, r0
 80119f4:	460b      	mov	r3, r1
 80119f6:	4924      	ldr	r1, [pc, #144]	; (8011a88 <TempHum_Function+0x150>)
 80119f8:	2003      	movs	r0, #3
 80119fa:	ec43 2b10 	vmov	d0, r2, r3
 80119fe:	f001 fffd 	bl	80139fc <gcvt>
		SSD1306_Puts(buf, &Font_7x10, 1);
 8011a02:	2201      	movs	r2, #1
 8011a04:	4919      	ldr	r1, [pc, #100]	; (8011a6c <TempHum_Function+0x134>)
 8011a06:	4820      	ldr	r0, [pc, #128]	; (8011a88 <TempHum_Function+0x150>)
 8011a08:	f7f0 fcd8 	bl	80023bc <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8011a0c:	f7f0 fb9a 	bl	8002144 <SSD1306_UpdateScreen>
		UpdateCharData[1] = (uint8_t) temperature;
 8011a10:	4b1b      	ldr	r3, [pc, #108]	; (8011a80 <TempHum_Function+0x148>)
 8011a12:	edd3 7a00 	vldr	s15, [r3]
 8011a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a1a:	edc7 7a01 	vstr	s15, [r7, #4]
 8011a1e:	793b      	ldrb	r3, [r7, #4]
 8011a20:	b2da      	uxtb	r2, r3
 8011a22:	4b1a      	ldr	r3, [pc, #104]	; (8011a8c <TempHum_Function+0x154>)
 8011a24:	705a      	strb	r2, [r3, #1]
		Custom_STM_App_Update_Char(CUSTOM_STM_TEMP_HUM, &UpdateCharData[1]);
 8011a26:	491a      	ldr	r1, [pc, #104]	; (8011a90 <TempHum_Function+0x158>)
 8011a28:	2002      	movs	r0, #2
 8011a2a:	f000 fd5d 	bl	80124e8 <Custom_STM_App_Update_Char>
		UpdateCharData[2] = (uint8_t) humidity;
 8011a2e:	4b13      	ldr	r3, [pc, #76]	; (8011a7c <TempHum_Function+0x144>)
 8011a30:	edd3 7a00 	vldr	s15, [r3]
 8011a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a38:	edc7 7a01 	vstr	s15, [r7, #4]
 8011a3c:	793b      	ldrb	r3, [r7, #4]
 8011a3e:	b2da      	uxtb	r2, r3
 8011a40:	4b12      	ldr	r3, [pc, #72]	; (8011a8c <TempHum_Function+0x154>)
 8011a42:	709a      	strb	r2, [r3, #2]
		Custom_STM_App_Update_Char(CUSTOM_STM_TEMP_HUM, &UpdateCharData[2]);
 8011a44:	4913      	ldr	r1, [pc, #76]	; (8011a94 <TempHum_Function+0x15c>)
 8011a46:	2002      	movs	r0, #2
 8011a48:	f000 fd4e 	bl	80124e8 <Custom_STM_App_Update_Char>
		UTIL_SEQ_SetTask(1 << CFG_TASK_READ_TEMP_HUM, CFG_SCH_PRIO_0);
 8011a4c:	2100      	movs	r1, #0
 8011a4e:	2008      	movs	r0, #8
 8011a50:	f001 fe96 	bl	8013780 <UTIL_SEQ_SetTask>
}
 8011a54:	bf00      	nop
 8011a56:	3708      	adds	r7, #8
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	bd80      	pop	{r7, pc}
 8011a5c:	48000400 	.word	0x48000400
 8011a60:	20000a8b 	.word	0x20000a8b
 8011a64:	20000a88 	.word	0x20000a88
 8011a68:	20000a87 	.word	0x20000a87
 8011a6c:	20000004 	.word	0x20000004
 8011a70:	080166fc 	.word	0x080166fc
 8011a74:	08016704 	.word	0x08016704
 8011a78:	08016710 	.word	0x08016710
 8011a7c:	20000a98 	.word	0x20000a98
 8011a80:	20000a9c 	.word	0x20000a9c
 8011a84:	200000d0 	.word	0x200000d0
 8011a88:	20000ab4 	.word	0x20000ab4
 8011a8c:	20000990 	.word	0x20000990
 8011a90:	20000991 	.word	0x20000991
 8011a94:	20000992 	.word	0x20000992

08011a98 <MeasureChemical_Function>:

void MeasureChemical_Function(GPIO_TypeDef *GPIO_Port, uint16_t GPIO_Pin)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b082      	sub	sp, #8
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
 8011aa0:	460b      	mov	r3, r1
 8011aa2:	807b      	strh	r3, [r7, #2]
	//Wait for user input
	WaitUser_Function();
 8011aa4:	f000 f97a 	bl	8011d9c <WaitUser_Function>

	//Turn on selected LED
	HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_SET);
 8011aa8:	887b      	ldrh	r3, [r7, #2]
 8011aaa:	2201      	movs	r2, #1
 8011aac:	4619      	mov	r1, r3
 8011aae:	6878      	ldr	r0, [r7, #4]
 8011ab0:	f7f3 f96e 	bl	8004d90 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8011ab4:	2064      	movs	r0, #100	; 0x64
 8011ab6:	f7ef fcb4 	bl	8001422 <HAL_Delay>

	//Check if selected LED is in correct position
	ADCCheck_Function();
 8011aba:	f000 fb21 	bl	8012100 <ADCCheck_Function>

	if(adc_value[0] > 500)
 8011abe:	4b20      	ldr	r3, [pc, #128]	; (8011b40 <MeasureChemical_Function+0xa8>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8011ac6:	d91e      	bls.n	8011b06 <MeasureChemical_Function+0x6e>
	{
		//Funcion que pide al usuario colocar la prueba blanca en la ranura
		Sample_Function("Blanca", 1);
 8011ac8:	2101      	movs	r1, #1
 8011aca:	481e      	ldr	r0, [pc, #120]	; (8011b44 <MeasureChemical_Function+0xac>)
 8011acc:	f000 f9d8 	bl	8011e80 <Sample_Function>

		//Funcion que pide al usuario colocar la prueba real en la ranura
		Sample_Function("Real", 2);
 8011ad0:	2102      	movs	r1, #2
 8011ad2:	481d      	ldr	r0, [pc, #116]	; (8011b48 <MeasureChemical_Function+0xb0>)
 8011ad4:	f000 f9d4 	bl	8011e80 <Sample_Function>

		//Turn off selected LED & reset variables for returning to Menu
		HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_RESET);
 8011ad8:	887b      	ldrh	r3, [r7, #2]
 8011ada:	2200      	movs	r2, #0
 8011adc:	4619      	mov	r1, r3
 8011ade:	6878      	ldr	r0, [r7, #4]
 8011ae0:	f7f3 f956 	bl	8004d90 <HAL_GPIO_WritePin>
		entered_main = 0;
 8011ae4:	4b19      	ldr	r3, [pc, #100]	; (8011b4c <MeasureChemical_Function+0xb4>)
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	701a      	strb	r2, [r3, #0]
		selected_main = 0;
 8011aea:	4b19      	ldr	r3, [pc, #100]	; (8011b50 <MeasureChemical_Function+0xb8>)
 8011aec:	2200      	movs	r2, #0
 8011aee:	701a      	strb	r2, [r3, #0]
		selected_second = 0;
 8011af0:	4b18      	ldr	r3, [pc, #96]	; (8011b54 <MeasureChemical_Function+0xbc>)
 8011af2:	2200      	movs	r2, #0
 8011af4:	701a      	strb	r2, [r3, #0]
		entered_second = 0;
 8011af6:	4b18      	ldr	r3, [pc, #96]	; (8011b58 <MeasureChemical_Function+0xc0>)
 8011af8:	2200      	movs	r2, #0
 8011afa:	701a      	strb	r2, [r3, #0]
		//menu_counter = 0;

		//TODO:Mostrar el valor en pantalla y guardar en memoria
		UTIL_SEQ_SetTask(1 << CFG_TASK_SHOW_VALUES, CFG_SCH_PRIO_0);
 8011afc:	2100      	movs	r1, #0
 8011afe:	2020      	movs	r0, #32
 8011b00:	f001 fe3e 	bl	8013780 <UTIL_SEQ_SetTask>
		return;
 8011b04:	e018      	b.n	8011b38 <MeasureChemical_Function+0xa0>
	}

	else
	{
		//Turn off selected LED
		HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_RESET);
 8011b06:	887b      	ldrh	r3, [r7, #2]
 8011b08:	2200      	movs	r2, #0
 8011b0a:	4619      	mov	r1, r3
 8011b0c:	6878      	ldr	r0, [r7, #4]
 8011b0e:	f7f3 f93f 	bl	8004d90 <HAL_GPIO_WritePin>

		//Error al escoger led
		ChemicalError_Function();
 8011b12:	f000 f989 	bl	8011e28 <ChemicalError_Function>
		entered_main = 0;
 8011b16:	4b0d      	ldr	r3, [pc, #52]	; (8011b4c <MeasureChemical_Function+0xb4>)
 8011b18:	2200      	movs	r2, #0
 8011b1a:	701a      	strb	r2, [r3, #0]
		selected_main = 0;
 8011b1c:	4b0c      	ldr	r3, [pc, #48]	; (8011b50 <MeasureChemical_Function+0xb8>)
 8011b1e:	2200      	movs	r2, #0
 8011b20:	701a      	strb	r2, [r3, #0]
		selected_second = 0;
 8011b22:	4b0c      	ldr	r3, [pc, #48]	; (8011b54 <MeasureChemical_Function+0xbc>)
 8011b24:	2200      	movs	r2, #0
 8011b26:	701a      	strb	r2, [r3, #0]
		entered_second = 0;
 8011b28:	4b0b      	ldr	r3, [pc, #44]	; (8011b58 <MeasureChemical_Function+0xc0>)
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << CFG_TASK_MAIN, CFG_SCH_PRIO_0);
 8011b2e:	2100      	movs	r1, #0
 8011b30:	2004      	movs	r0, #4
 8011b32:	f001 fe25 	bl	8013780 <UTIL_SEQ_SetTask>
		return;
 8011b36:	bf00      	nop
	}

	return;
}
 8011b38:	3708      	adds	r7, #8
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	bd80      	pop	{r7, pc}
 8011b3e:	bf00      	nop
 8011b40:	20000a90 	.word	0x20000a90
 8011b44:	08016718 	.word	0x08016718
 8011b48:	08016720 	.word	0x08016720
 8011b4c:	20000a8b 	.word	0x20000a8b
 8011b50:	20000a88 	.word	0x20000a88
 8011b54:	20000a89 	.word	0x20000a89
 8011b58:	20000a8a 	.word	0x20000a8a

08011b5c <ShowValues_Function>:

void ShowValues_Function(void){
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b082      	sub	sp, #8
 8011b60:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(BUTT_1_GPIO_Port, BUTT_1_Pin) == GPIO_PIN_RESET)
 8011b62:	2102      	movs	r1, #2
 8011b64:	487a      	ldr	r0, [pc, #488]	; (8011d50 <ShowValues_Function+0x1f4>)
 8011b66:	f7f3 f8fb 	bl	8004d60 <HAL_GPIO_ReadPin>
 8011b6a:	4603      	mov	r3, r0
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d113      	bne.n	8011b98 <ShowValues_Function+0x3c>
	{
		entered_main = 0;
 8011b70:	4b78      	ldr	r3, [pc, #480]	; (8011d54 <ShowValues_Function+0x1f8>)
 8011b72:	2200      	movs	r2, #0
 8011b74:	701a      	strb	r2, [r3, #0]
		selected_main = 0;
 8011b76:	4b78      	ldr	r3, [pc, #480]	; (8011d58 <ShowValues_Function+0x1fc>)
 8011b78:	2200      	movs	r2, #0
 8011b7a:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << CFG_TASK_MAIN, CFG_SCH_PRIO_0);
 8011b7c:	2100      	movs	r1, #0
 8011b7e:	2004      	movs	r0, #4
 8011b80:	f001 fdfe 	bl	8013780 <UTIL_SEQ_SetTask>
		menu_counter = 0;
 8011b84:	4b75      	ldr	r3, [pc, #468]	; (8011d5c <ShowValues_Function+0x200>)
 8011b86:	2200      	movs	r2, #0
 8011b88:	701a      	strb	r2, [r3, #0]
		SSD1306_Clear();
 8011b8a:	f7f0 fc3c 	bl	8002406 <SSD1306_Clear>
		HAL_Delay(1000);
 8011b8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011b92:	f7ef fc46 	bl	8001422 <HAL_Delay>
		Custom_STM_App_Update_Char(CUSTOM_STM_TEMP_HUM, &UpdateCharData[2]);

		//Repeats Task
		UTIL_SEQ_SetTask(1 << CFG_TASK_SHOW_VALUES, CFG_SCH_PRIO_0);
	}
}
 8011b96:	e0d6      	b.n	8011d46 <ShowValues_Function+0x1ea>
		SSD1306_Clear();
 8011b98:	f7f0 fc35 	bl	8002406 <SSD1306_Clear>
		SSD1306_GotoXY(1, 0);
 8011b9c:	2100      	movs	r1, #0
 8011b9e:	2001      	movs	r0, #1
 8011ba0:	f7f0 fb76 	bl	8002290 <SSD1306_GotoXY>
		SSD1306_Puts("Back", &Font_7x10, 0);
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	496e      	ldr	r1, [pc, #440]	; (8011d60 <ShowValues_Function+0x204>)
 8011ba8:	486e      	ldr	r0, [pc, #440]	; (8011d64 <ShowValues_Function+0x208>)
 8011baa:	f7f0 fc07 	bl	80023bc <SSD1306_Puts>
		SSD1306_GotoXY(29,0);
 8011bae:	2100      	movs	r1, #0
 8011bb0:	201d      	movs	r0, #29
 8011bb2:	f7f0 fb6d 	bl	8002290 <SSD1306_GotoXY>
		SSD1306_Puts("Absorbancia y voltaje", &Font_7x10, 1);
 8011bb6:	2201      	movs	r2, #1
 8011bb8:	4969      	ldr	r1, [pc, #420]	; (8011d60 <ShowValues_Function+0x204>)
 8011bba:	486b      	ldr	r0, [pc, #428]	; (8011d68 <ShowValues_Function+0x20c>)
 8011bbc:	f7f0 fbfe 	bl	80023bc <SSD1306_Puts>
		SSD1306_GotoXY(35,35);
 8011bc0:	2123      	movs	r1, #35	; 0x23
 8011bc2:	2023      	movs	r0, #35	; 0x23
 8011bc4:	f7f0 fb64 	bl	8002290 <SSD1306_GotoXY>
		SSD1306_Puts("Lineal y voltaje", &Font_7x10, 1);
 8011bc8:	2201      	movs	r2, #1
 8011bca:	4965      	ldr	r1, [pc, #404]	; (8011d60 <ShowValues_Function+0x204>)
 8011bcc:	4867      	ldr	r0, [pc, #412]	; (8011d6c <ShowValues_Function+0x210>)
 8011bce:	f7f0 fbf5 	bl	80023bc <SSD1306_Puts>
		SSD1306_GotoXY(1, 20);
 8011bd2:	2114      	movs	r1, #20
 8011bd4:	2001      	movs	r0, #1
 8011bd6:	f7f0 fb5b 	bl	8002290 <SSD1306_GotoXY>
		gcvt(absorbance, 3, buf);
 8011bda:	4b65      	ldr	r3, [pc, #404]	; (8011d70 <ShowValues_Function+0x214>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	4618      	mov	r0, r3
 8011be0:	f7ee fc8a 	bl	80004f8 <__aeabi_f2d>
 8011be4:	4602      	mov	r2, r0
 8011be6:	460b      	mov	r3, r1
 8011be8:	4962      	ldr	r1, [pc, #392]	; (8011d74 <ShowValues_Function+0x218>)
 8011bea:	2003      	movs	r0, #3
 8011bec:	ec43 2b10 	vmov	d0, r2, r3
 8011bf0:	f001 ff04 	bl	80139fc <gcvt>
		SSD1306_Puts(buf, &Font_7x10, 1);
 8011bf4:	2201      	movs	r2, #1
 8011bf6:	495a      	ldr	r1, [pc, #360]	; (8011d60 <ShowValues_Function+0x204>)
 8011bf8:	485e      	ldr	r0, [pc, #376]	; (8011d74 <ShowValues_Function+0x218>)
 8011bfa:	f7f0 fbdf 	bl	80023bc <SSD1306_Puts>
		SSD1306_GotoXY(20, 20);
 8011bfe:	2114      	movs	r1, #20
 8011c00:	2014      	movs	r0, #20
 8011c02:	f7f0 fb45 	bl	8002290 <SSD1306_GotoXY>
		gcvt(voltage_log, 3, buf);
 8011c06:	4b5c      	ldr	r3, [pc, #368]	; (8011d78 <ShowValues_Function+0x21c>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7ee fc74 	bl	80004f8 <__aeabi_f2d>
 8011c10:	4602      	mov	r2, r0
 8011c12:	460b      	mov	r3, r1
 8011c14:	4957      	ldr	r1, [pc, #348]	; (8011d74 <ShowValues_Function+0x218>)
 8011c16:	2003      	movs	r0, #3
 8011c18:	ec43 2b10 	vmov	d0, r2, r3
 8011c1c:	f001 feee 	bl	80139fc <gcvt>
		SSD1306_Puts(buf, &Font_7x10, 1);
 8011c20:	2201      	movs	r2, #1
 8011c22:	494f      	ldr	r1, [pc, #316]	; (8011d60 <ShowValues_Function+0x204>)
 8011c24:	4853      	ldr	r0, [pc, #332]	; (8011d74 <ShowValues_Function+0x218>)
 8011c26:	f7f0 fbc9 	bl	80023bc <SSD1306_Puts>
		SSD1306_GotoXY(1, 45);
 8011c2a:	212d      	movs	r1, #45	; 0x2d
 8011c2c:	2001      	movs	r0, #1
 8011c2e:	f7f0 fb2f 	bl	8002290 <SSD1306_GotoXY>
		gcvt(voltage_log, 3, buf);
 8011c32:	4b51      	ldr	r3, [pc, #324]	; (8011d78 <ShowValues_Function+0x21c>)
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	4618      	mov	r0, r3
 8011c38:	f7ee fc5e 	bl	80004f8 <__aeabi_f2d>
 8011c3c:	4602      	mov	r2, r0
 8011c3e:	460b      	mov	r3, r1
 8011c40:	494c      	ldr	r1, [pc, #304]	; (8011d74 <ShowValues_Function+0x218>)
 8011c42:	2003      	movs	r0, #3
 8011c44:	ec43 2b10 	vmov	d0, r2, r3
 8011c48:	f001 fed8 	bl	80139fc <gcvt>
		SSD1306_Puts(buf, &Font_7x10, 1);
 8011c4c:	2201      	movs	r2, #1
 8011c4e:	4944      	ldr	r1, [pc, #272]	; (8011d60 <ShowValues_Function+0x204>)
 8011c50:	4848      	ldr	r0, [pc, #288]	; (8011d74 <ShowValues_Function+0x218>)
 8011c52:	f7f0 fbb3 	bl	80023bc <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8011c56:	f7f0 fa75 	bl	8002144 <SSD1306_UpdateScreen>
		HAL_Delay(2000);
 8011c5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8011c5e:	f7ef fbe0 	bl	8001422 <HAL_Delay>
		SSD1306_Clear();
 8011c62:	f7f0 fbd0 	bl	8002406 <SSD1306_Clear>
		SSD1306_GotoXY(1, 0);
 8011c66:	2100      	movs	r1, #0
 8011c68:	2001      	movs	r0, #1
 8011c6a:	f7f0 fb11 	bl	8002290 <SSD1306_GotoXY>
		SSD1306_Puts("Back", &Font_7x10, 0);
 8011c6e:	2200      	movs	r2, #0
 8011c70:	493b      	ldr	r1, [pc, #236]	; (8011d60 <ShowValues_Function+0x204>)
 8011c72:	483c      	ldr	r0, [pc, #240]	; (8011d64 <ShowValues_Function+0x208>)
 8011c74:	f7f0 fba2 	bl	80023bc <SSD1306_Puts>
		SSD1306_GotoXY(29,0);
 8011c78:	2100      	movs	r1, #0
 8011c7a:	201d      	movs	r0, #29
 8011c7c:	f7f0 fb08 	bl	8002290 <SSD1306_GotoXY>
		SSD1306_Puts("Temperatura", &Font_7x10, 1);
 8011c80:	2201      	movs	r2, #1
 8011c82:	4937      	ldr	r1, [pc, #220]	; (8011d60 <ShowValues_Function+0x204>)
 8011c84:	483d      	ldr	r0, [pc, #244]	; (8011d7c <ShowValues_Function+0x220>)
 8011c86:	f7f0 fb99 	bl	80023bc <SSD1306_Puts>
		SSD1306_GotoXY(35,35);
 8011c8a:	2123      	movs	r1, #35	; 0x23
 8011c8c:	2023      	movs	r0, #35	; 0x23
 8011c8e:	f7f0 faff 	bl	8002290 <SSD1306_GotoXY>
		SSD1306_Puts("Humedad", &Font_7x10, 1);
 8011c92:	2201      	movs	r2, #1
 8011c94:	4932      	ldr	r1, [pc, #200]	; (8011d60 <ShowValues_Function+0x204>)
 8011c96:	483a      	ldr	r0, [pc, #232]	; (8011d80 <ShowValues_Function+0x224>)
 8011c98:	f7f0 fb90 	bl	80023bc <SSD1306_Puts>
		sht3x_read_temperature_and_humidity(&sht3x_handle, &temperature, &humidity);
 8011c9c:	4a39      	ldr	r2, [pc, #228]	; (8011d84 <ShowValues_Function+0x228>)
 8011c9e:	493a      	ldr	r1, [pc, #232]	; (8011d88 <ShowValues_Function+0x22c>)
 8011ca0:	483a      	ldr	r0, [pc, #232]	; (8011d8c <ShowValues_Function+0x230>)
 8011ca2:	f7f0 f90d 	bl	8001ec0 <sht3x_read_temperature_and_humidity>
		SSD1306_GotoXY(1, 20);
 8011ca6:	2114      	movs	r1, #20
 8011ca8:	2001      	movs	r0, #1
 8011caa:	f7f0 faf1 	bl	8002290 <SSD1306_GotoXY>
		gcvt(temperature, 3, buf);
 8011cae:	4b36      	ldr	r3, [pc, #216]	; (8011d88 <ShowValues_Function+0x22c>)
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f7ee fc20 	bl	80004f8 <__aeabi_f2d>
 8011cb8:	4602      	mov	r2, r0
 8011cba:	460b      	mov	r3, r1
 8011cbc:	492d      	ldr	r1, [pc, #180]	; (8011d74 <ShowValues_Function+0x218>)
 8011cbe:	2003      	movs	r0, #3
 8011cc0:	ec43 2b10 	vmov	d0, r2, r3
 8011cc4:	f001 fe9a 	bl	80139fc <gcvt>
		SSD1306_Puts(buf, &Font_7x10, 1);
 8011cc8:	2201      	movs	r2, #1
 8011cca:	4925      	ldr	r1, [pc, #148]	; (8011d60 <ShowValues_Function+0x204>)
 8011ccc:	4829      	ldr	r0, [pc, #164]	; (8011d74 <ShowValues_Function+0x218>)
 8011cce:	f7f0 fb75 	bl	80023bc <SSD1306_Puts>
		SSD1306_GotoXY(1, 45);
 8011cd2:	212d      	movs	r1, #45	; 0x2d
 8011cd4:	2001      	movs	r0, #1
 8011cd6:	f7f0 fadb 	bl	8002290 <SSD1306_GotoXY>
		gcvt(humidity, 3, buf);
 8011cda:	4b2a      	ldr	r3, [pc, #168]	; (8011d84 <ShowValues_Function+0x228>)
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7ee fc0a 	bl	80004f8 <__aeabi_f2d>
 8011ce4:	4602      	mov	r2, r0
 8011ce6:	460b      	mov	r3, r1
 8011ce8:	4922      	ldr	r1, [pc, #136]	; (8011d74 <ShowValues_Function+0x218>)
 8011cea:	2003      	movs	r0, #3
 8011cec:	ec43 2b10 	vmov	d0, r2, r3
 8011cf0:	f001 fe84 	bl	80139fc <gcvt>
		SSD1306_Puts(buf, &Font_7x10, 1);
 8011cf4:	2201      	movs	r2, #1
 8011cf6:	491a      	ldr	r1, [pc, #104]	; (8011d60 <ShowValues_Function+0x204>)
 8011cf8:	481e      	ldr	r0, [pc, #120]	; (8011d74 <ShowValues_Function+0x218>)
 8011cfa:	f7f0 fb5f 	bl	80023bc <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8011cfe:	f7f0 fa21 	bl	8002144 <SSD1306_UpdateScreen>
		UpdateCharData[1] = (uint8_t) temperature;
 8011d02:	4b21      	ldr	r3, [pc, #132]	; (8011d88 <ShowValues_Function+0x22c>)
 8011d04:	edd3 7a00 	vldr	s15, [r3]
 8011d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011d0c:	edc7 7a01 	vstr	s15, [r7, #4]
 8011d10:	793b      	ldrb	r3, [r7, #4]
 8011d12:	b2da      	uxtb	r2, r3
 8011d14:	4b1e      	ldr	r3, [pc, #120]	; (8011d90 <ShowValues_Function+0x234>)
 8011d16:	705a      	strb	r2, [r3, #1]
		Custom_STM_App_Update_Char(CUSTOM_STM_TEMP_HUM, &UpdateCharData[1]);
 8011d18:	491e      	ldr	r1, [pc, #120]	; (8011d94 <ShowValues_Function+0x238>)
 8011d1a:	2002      	movs	r0, #2
 8011d1c:	f000 fbe4 	bl	80124e8 <Custom_STM_App_Update_Char>
		UpdateCharData[2] = (uint8_t) humidity;
 8011d20:	4b18      	ldr	r3, [pc, #96]	; (8011d84 <ShowValues_Function+0x228>)
 8011d22:	edd3 7a00 	vldr	s15, [r3]
 8011d26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011d2a:	edc7 7a01 	vstr	s15, [r7, #4]
 8011d2e:	793b      	ldrb	r3, [r7, #4]
 8011d30:	b2da      	uxtb	r2, r3
 8011d32:	4b17      	ldr	r3, [pc, #92]	; (8011d90 <ShowValues_Function+0x234>)
 8011d34:	709a      	strb	r2, [r3, #2]
		Custom_STM_App_Update_Char(CUSTOM_STM_TEMP_HUM, &UpdateCharData[2]);
 8011d36:	4918      	ldr	r1, [pc, #96]	; (8011d98 <ShowValues_Function+0x23c>)
 8011d38:	2002      	movs	r0, #2
 8011d3a:	f000 fbd5 	bl	80124e8 <Custom_STM_App_Update_Char>
		UTIL_SEQ_SetTask(1 << CFG_TASK_SHOW_VALUES, CFG_SCH_PRIO_0);
 8011d3e:	2100      	movs	r1, #0
 8011d40:	2020      	movs	r0, #32
 8011d42:	f001 fd1d 	bl	8013780 <UTIL_SEQ_SetTask>
}
 8011d46:	bf00      	nop
 8011d48:	3708      	adds	r7, #8
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}
 8011d4e:	bf00      	nop
 8011d50:	48000400 	.word	0x48000400
 8011d54:	20000a8b 	.word	0x20000a8b
 8011d58:	20000a88 	.word	0x20000a88
 8011d5c:	20000a87 	.word	0x20000a87
 8011d60:	20000004 	.word	0x20000004
 8011d64:	080166fc 	.word	0x080166fc
 8011d68:	08016728 	.word	0x08016728
 8011d6c:	08016740 	.word	0x08016740
 8011d70:	20000ab0 	.word	0x20000ab0
 8011d74:	20000ab4 	.word	0x20000ab4
 8011d78:	20000aa8 	.word	0x20000aa8
 8011d7c:	08016704 	.word	0x08016704
 8011d80:	08016710 	.word	0x08016710
 8011d84:	20000a98 	.word	0x20000a98
 8011d88:	20000a9c 	.word	0x20000a9c
 8011d8c:	200000d0 	.word	0x200000d0
 8011d90:	20000990 	.word	0x20000990
 8011d94:	20000991 	.word	0x20000991
 8011d98:	20000992 	.word	0x20000992

08011d9c <WaitUser_Function>:

void WaitUser_Function(void)
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8011da0:	f7f0 fb31 	bl	8002406 <SSD1306_Clear>
	HAL_Delay(500);
 8011da4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011da8:	f7ef fb3b 	bl	8001422 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, BUTT_1_Pin) == GPIO_PIN_SET){
 8011dac:	e025      	b.n	8011dfa <WaitUser_Function+0x5e>
		SSD1306_GotoXY(15, 5);
 8011dae:	2105      	movs	r1, #5
 8011db0:	200f      	movs	r0, #15
 8011db2:	f7f0 fa6d 	bl	8002290 <SSD1306_GotoXY>
		SSD1306_Puts("Mover palanca", &Font_7x10, 1);
 8011db6:	2201      	movs	r2, #1
 8011db8:	4915      	ldr	r1, [pc, #84]	; (8011e10 <WaitUser_Function+0x74>)
 8011dba:	4816      	ldr	r0, [pc, #88]	; (8011e14 <WaitUser_Function+0x78>)
 8011dbc:	f7f0 fafe 	bl	80023bc <SSD1306_Puts>
		SSD1306_GotoXY(15, 15);
 8011dc0:	210f      	movs	r1, #15
 8011dc2:	200f      	movs	r0, #15
 8011dc4:	f7f0 fa64 	bl	8002290 <SSD1306_GotoXY>
		SSD1306_Puts("al LED escogido", &Font_7x10, 1);
 8011dc8:	2201      	movs	r2, #1
 8011dca:	4911      	ldr	r1, [pc, #68]	; (8011e10 <WaitUser_Function+0x74>)
 8011dcc:	4812      	ldr	r0, [pc, #72]	; (8011e18 <WaitUser_Function+0x7c>)
 8011dce:	f7f0 faf5 	bl	80023bc <SSD1306_Puts>
		SSD1306_GotoXY(15, 25);
 8011dd2:	2119      	movs	r1, #25
 8011dd4:	200f      	movs	r0, #15
 8011dd6:	f7f0 fa5b 	bl	8002290 <SSD1306_GotoXY>
		SSD1306_Puts("Presionar 2", &Font_7x10, 1);
 8011dda:	2201      	movs	r2, #1
 8011ddc:	490c      	ldr	r1, [pc, #48]	; (8011e10 <WaitUser_Function+0x74>)
 8011dde:	480f      	ldr	r0, [pc, #60]	; (8011e1c <WaitUser_Function+0x80>)
 8011de0:	f7f0 faec 	bl	80023bc <SSD1306_Puts>
		SSD1306_GotoXY(15, 35);
 8011de4:	2123      	movs	r1, #35	; 0x23
 8011de6:	200f      	movs	r0, #15
 8011de8:	f7f0 fa52 	bl	8002290 <SSD1306_GotoXY>
		SSD1306_Puts("Para continuar", &Font_7x10, 1);
 8011dec:	2201      	movs	r2, #1
 8011dee:	4908      	ldr	r1, [pc, #32]	; (8011e10 <WaitUser_Function+0x74>)
 8011df0:	480b      	ldr	r0, [pc, #44]	; (8011e20 <WaitUser_Function+0x84>)
 8011df2:	f7f0 fae3 	bl	80023bc <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8011df6:	f7f0 f9a5 	bl	8002144 <SSD1306_UpdateScreen>
	while(HAL_GPIO_ReadPin(GPIOB, BUTT_1_Pin) == GPIO_PIN_SET){
 8011dfa:	2102      	movs	r1, #2
 8011dfc:	4809      	ldr	r0, [pc, #36]	; (8011e24 <WaitUser_Function+0x88>)
 8011dfe:	f7f2 ffaf 	bl	8004d60 <HAL_GPIO_ReadPin>
 8011e02:	4603      	mov	r3, r0
 8011e04:	2b01      	cmp	r3, #1
 8011e06:	d0d2      	beq.n	8011dae <WaitUser_Function+0x12>
	}
}
 8011e08:	bf00      	nop
 8011e0a:	bf00      	nop
 8011e0c:	bd80      	pop	{r7, pc}
 8011e0e:	bf00      	nop
 8011e10:	20000004 	.word	0x20000004
 8011e14:	08016754 	.word	0x08016754
 8011e18:	08016764 	.word	0x08016764
 8011e1c:	08016774 	.word	0x08016774
 8011e20:	08016780 	.word	0x08016780
 8011e24:	48000400 	.word	0x48000400

08011e28 <ChemicalError_Function>:

void ChemicalError_Function(void)
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	af00      	add	r7, sp, #0
	//Show on screen
	SSD1306_Clear();
 8011e2c:	f7f0 faeb 	bl	8002406 <SSD1306_Clear>
	SSD1306_GotoXY(15, 15);
 8011e30:	210f      	movs	r1, #15
 8011e32:	200f      	movs	r0, #15
 8011e34:	f7f0 fa2c 	bl	8002290 <SSD1306_GotoXY>
	SSD1306_Puts("LED Incorrecto", &Font_7x10, 1);
 8011e38:	2201      	movs	r2, #1
 8011e3a:	490c      	ldr	r1, [pc, #48]	; (8011e6c <ChemicalError_Function+0x44>)
 8011e3c:	480c      	ldr	r0, [pc, #48]	; (8011e70 <ChemicalError_Function+0x48>)
 8011e3e:	f7f0 fabd 	bl	80023bc <SSD1306_Puts>
	SSD1306_GotoXY(15, 45);
 8011e42:	212d      	movs	r1, #45	; 0x2d
 8011e44:	200f      	movs	r0, #15
 8011e46:	f7f0 fa23 	bl	8002290 <SSD1306_GotoXY>
	SSD1306_Puts("Cambiar LED", &Font_7x10, 1);
 8011e4a:	2201      	movs	r2, #1
 8011e4c:	4907      	ldr	r1, [pc, #28]	; (8011e6c <ChemicalError_Function+0x44>)
 8011e4e:	4809      	ldr	r0, [pc, #36]	; (8011e74 <ChemicalError_Function+0x4c>)
 8011e50:	f7f0 fab4 	bl	80023bc <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8011e54:	f7f0 f976 	bl	8002144 <SSD1306_UpdateScreen>

	HAL_Delay(3000);
 8011e58:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8011e5c:	f7ef fae1 	bl	8001422 <HAL_Delay>
	entered_second = 4;
 8011e60:	4b05      	ldr	r3, [pc, #20]	; (8011e78 <ChemicalError_Function+0x50>)
 8011e62:	2204      	movs	r2, #4
 8011e64:	701a      	strb	r2, [r3, #0]
}
 8011e66:	bf00      	nop
 8011e68:	bd80      	pop	{r7, pc}
 8011e6a:	bf00      	nop
 8011e6c:	20000004 	.word	0x20000004
 8011e70:	08016790 	.word	0x08016790
 8011e74:	080167a0 	.word	0x080167a0
 8011e78:	20000a8a 	.word	0x20000a8a
 8011e7c:	00000000 	.word	0x00000000

08011e80 <Sample_Function>:

void Sample_Function(char* str, uint8_t sample_type)
{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b082      	sub	sp, #8
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
 8011e88:	460b      	mov	r3, r1
 8011e8a:	70fb      	strb	r3, [r7, #3]
	SSD1306_Clear();
 8011e8c:	f7f0 fabb 	bl	8002406 <SSD1306_Clear>
	HAL_Delay(500);
 8011e90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011e94:	f7ef fac5 	bl	8001422 <HAL_Delay>

	while(HAL_GPIO_ReadPin(GPIOB, BUTT_1_Pin) == GPIO_PIN_SET)
 8011e98:	e032      	b.n	8011f00 <Sample_Function+0x80>
	{
		SSD1306_GotoXY(15, 5);
 8011e9a:	2105      	movs	r1, #5
 8011e9c:	200f      	movs	r0, #15
 8011e9e:	f7f0 f9f7 	bl	8002290 <SSD1306_GotoXY>
		SSD1306_Puts("Colocar muestra", &Font_7x10, 1);
 8011ea2:	2201      	movs	r2, #1
 8011ea4:	4986      	ldr	r1, [pc, #536]	; (80120c0 <Sample_Function+0x240>)
 8011ea6:	4887      	ldr	r0, [pc, #540]	; (80120c4 <Sample_Function+0x244>)
 8011ea8:	f7f0 fa88 	bl	80023bc <SSD1306_Puts>
		SSD1306_GotoXY(15, 15);
 8011eac:	210f      	movs	r1, #15
 8011eae:	200f      	movs	r0, #15
 8011eb0:	f7f0 f9ee 	bl	8002290 <SSD1306_GotoXY>
		switch(sample_type)
 8011eb4:	78fb      	ldrb	r3, [r7, #3]
 8011eb6:	2b01      	cmp	r3, #1
 8011eb8:	d002      	beq.n	8011ec0 <Sample_Function+0x40>
 8011eba:	2b02      	cmp	r3, #2
 8011ebc:	d006      	beq.n	8011ecc <Sample_Function+0x4c>
 8011ebe:	e00b      	b.n	8011ed8 <Sample_Function+0x58>
		{
		case 1:
			SSD1306_Puts(str, &Font_7x10, 1);
 8011ec0:	2201      	movs	r2, #1
 8011ec2:	497f      	ldr	r1, [pc, #508]	; (80120c0 <Sample_Function+0x240>)
 8011ec4:	6878      	ldr	r0, [r7, #4]
 8011ec6:	f7f0 fa79 	bl	80023bc <SSD1306_Puts>
			break;
 8011eca:	e005      	b.n	8011ed8 <Sample_Function+0x58>

		case 2:
			SSD1306_Puts(str, &Font_7x10, 1);
 8011ecc:	2201      	movs	r2, #1
 8011ece:	497c      	ldr	r1, [pc, #496]	; (80120c0 <Sample_Function+0x240>)
 8011ed0:	6878      	ldr	r0, [r7, #4]
 8011ed2:	f7f0 fa73 	bl	80023bc <SSD1306_Puts>
			break;
 8011ed6:	bf00      	nop
		}
		//SSD1306_Puts(str, &Font_7x10, 1);
		SSD1306_GotoXY(15, 25);
 8011ed8:	2119      	movs	r1, #25
 8011eda:	200f      	movs	r0, #15
 8011edc:	f7f0 f9d8 	bl	8002290 <SSD1306_GotoXY>
		SSD1306_Puts("Presionar 2", &Font_7x10, 1);
 8011ee0:	2201      	movs	r2, #1
 8011ee2:	4977      	ldr	r1, [pc, #476]	; (80120c0 <Sample_Function+0x240>)
 8011ee4:	4878      	ldr	r0, [pc, #480]	; (80120c8 <Sample_Function+0x248>)
 8011ee6:	f7f0 fa69 	bl	80023bc <SSD1306_Puts>
		SSD1306_GotoXY(15, 35);
 8011eea:	2123      	movs	r1, #35	; 0x23
 8011eec:	200f      	movs	r0, #15
 8011eee:	f7f0 f9cf 	bl	8002290 <SSD1306_GotoXY>
		SSD1306_Puts("Para continuar", &Font_7x10, 1);
 8011ef2:	2201      	movs	r2, #1
 8011ef4:	4972      	ldr	r1, [pc, #456]	; (80120c0 <Sample_Function+0x240>)
 8011ef6:	4875      	ldr	r0, [pc, #468]	; (80120cc <Sample_Function+0x24c>)
 8011ef8:	f7f0 fa60 	bl	80023bc <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8011efc:	f7f0 f922 	bl	8002144 <SSD1306_UpdateScreen>
	while(HAL_GPIO_ReadPin(GPIOB, BUTT_1_Pin) == GPIO_PIN_SET)
 8011f00:	2102      	movs	r1, #2
 8011f02:	4873      	ldr	r0, [pc, #460]	; (80120d0 <Sample_Function+0x250>)
 8011f04:	f7f2 ff2c 	bl	8004d60 <HAL_GPIO_ReadPin>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	2b01      	cmp	r3, #1
 8011f0c:	d0c5      	beq.n	8011e9a <Sample_Function+0x1a>
	}

	//PWM voltage to 1.5V
	TIM2->CCR1 = 34492;
 8011f0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011f12:	f248 62bc 	movw	r2, #34492	; 0x86bc
 8011f16:	635a      	str	r2, [r3, #52]	; 0x34

	//Start TIM, ADC and get ADC value[0]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8011f18:	2100      	movs	r1, #0
 8011f1a:	486e      	ldr	r0, [pc, #440]	; (80120d4 <Sample_Function+0x254>)
 8011f1c:	f7f7 fd72 	bl	8009a04 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, adc_value, 2);
 8011f20:	2202      	movs	r2, #2
 8011f22:	496d      	ldr	r1, [pc, #436]	; (80120d8 <Sample_Function+0x258>)
 8011f24:	486d      	ldr	r0, [pc, #436]	; (80120dc <Sample_Function+0x25c>)
 8011f26:	f7f1 fa83 	bl	8003430 <HAL_ADC_Start_DMA>

	//Find ideal PWM value
	while (adc_value[0] > 2200 || adc_value[0] < 2100)
 8011f2a:	e03c      	b.n	8011fa6 <Sample_Function+0x126>
	{
		HAL_ADC_Start_DMA(&hadc1, adc_value, 2);
 8011f2c:	2202      	movs	r2, #2
 8011f2e:	496a      	ldr	r1, [pc, #424]	; (80120d8 <Sample_Function+0x258>)
 8011f30:	486a      	ldr	r0, [pc, #424]	; (80120dc <Sample_Function+0x25c>)
 8011f32:	f7f1 fa7d 	bl	8003430 <HAL_ADC_Start_DMA>
		if (adc_value[0] <= 2101)
 8011f36:	4b68      	ldr	r3, [pc, #416]	; (80120d8 <Sample_Function+0x258>)
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	f640 0235 	movw	r2, #2101	; 0x835
 8011f3e:	4293      	cmp	r3, r2
 8011f40:	d814      	bhi.n	8011f6c <Sample_Function+0xec>
		{
			//PWM++
			TIM2->CCR1 += 100;
 8011f42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011f4c:	3364      	adds	r3, #100	; 0x64
 8011f4e:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8011f50:	2100      	movs	r1, #0
 8011f52:	4860      	ldr	r0, [pc, #384]	; (80120d4 <Sample_Function+0x254>)
 8011f54:	f7f7 fd56 	bl	8009a04 <HAL_TIM_PWM_Start>
			if(TIM2->CCR1 > 65565)
 8011f58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f5e:	4a60      	ldr	r2, [pc, #384]	; (80120e0 <Sample_Function+0x260>)
 8011f60:	4293      	cmp	r3, r2
 8011f62:	d91c      	bls.n	8011f9e <Sample_Function+0x11e>
			{
				done_1 = 1;
 8011f64:	4b5f      	ldr	r3, [pc, #380]	; (80120e4 <Sample_Function+0x264>)
 8011f66:	2201      	movs	r2, #1
 8011f68:	701a      	strb	r2, [r3, #0]
 8011f6a:	e018      	b.n	8011f9e <Sample_Function+0x11e>
			}
		}
		else if(adc_value[0] >= 2199)
 8011f6c:	4b5a      	ldr	r3, [pc, #360]	; (80120d8 <Sample_Function+0x258>)
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	f640 0296 	movw	r2, #2198	; 0x896
 8011f74:	4293      	cmp	r3, r2
 8011f76:	d912      	bls.n	8011f9e <Sample_Function+0x11e>
		{
			//PWM--
			TIM2->CCR1 -= 100;
 8011f78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011f82:	3b64      	subs	r3, #100	; 0x64
 8011f84:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8011f86:	2100      	movs	r1, #0
 8011f88:	4852      	ldr	r0, [pc, #328]	; (80120d4 <Sample_Function+0x254>)
 8011f8a:	f7f7 fd3b 	bl	8009a04 <HAL_TIM_PWM_Start>
			if(TIM2->CCR1 < 200)
 8011f8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f94:	2bc7      	cmp	r3, #199	; 0xc7
 8011f96:	d802      	bhi.n	8011f9e <Sample_Function+0x11e>
			{
				done_1 = 1;
 8011f98:	4b52      	ldr	r3, [pc, #328]	; (80120e4 <Sample_Function+0x264>)
 8011f9a:	2201      	movs	r2, #1
 8011f9c:	701a      	strb	r2, [r3, #0]
			}
		}

		if(done_1 == 1)
 8011f9e:	4b51      	ldr	r3, [pc, #324]	; (80120e4 <Sample_Function+0x264>)
 8011fa0:	781b      	ldrb	r3, [r3, #0]
 8011fa2:	2b01      	cmp	r3, #1
 8011fa4:	d00c      	beq.n	8011fc0 <Sample_Function+0x140>
	while (adc_value[0] > 2200 || adc_value[0] < 2100)
 8011fa6:	4b4c      	ldr	r3, [pc, #304]	; (80120d8 <Sample_Function+0x258>)
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	f640 0298 	movw	r2, #2200	; 0x898
 8011fae:	4293      	cmp	r3, r2
 8011fb0:	d8bc      	bhi.n	8011f2c <Sample_Function+0xac>
 8011fb2:	4b49      	ldr	r3, [pc, #292]	; (80120d8 <Sample_Function+0x258>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	f640 0233 	movw	r2, #2099	; 0x833
 8011fba:	4293      	cmp	r3, r2
 8011fbc:	d9b6      	bls.n	8011f2c <Sample_Function+0xac>
 8011fbe:	e000      	b.n	8011fc2 <Sample_Function+0x142>
		{
			break;
 8011fc0:	bf00      	nop
		}
	}

	//Turn off ADC and PWM
	HAL_ADC_Stop_DMA(&hadc1);
 8011fc2:	4846      	ldr	r0, [pc, #280]	; (80120dc <Sample_Function+0x25c>)
 8011fc4:	f7f1 fab8 	bl	8003538 <HAL_ADC_Stop_DMA>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8011fc8:	2100      	movs	r1, #0
 8011fca:	4842      	ldr	r0, [pc, #264]	; (80120d4 <Sample_Function+0x254>)
 8011fcc:	f7f7 fdf4 	bl	8009bb8 <HAL_TIM_PWM_Stop>

	switch(sample_type)
 8011fd0:	78fb      	ldrb	r3, [r7, #3]
 8011fd2:	2b01      	cmp	r3, #1
 8011fd4:	d002      	beq.n	8011fdc <Sample_Function+0x15c>
 8011fd6:	2b02      	cmp	r3, #2
 8011fd8:	d02b      	beq.n	8012032 <Sample_Function+0x1b2>
		absorbance = log(voltage_log / val_lineal);
		//TODO: Agregar
		break;
	}

	return;
 8011fda:	e063      	b.n	80120a4 <Sample_Function+0x224>
		voltage_lin = 2.99*adc_value[0]/4095;
 8011fdc:	4b3e      	ldr	r3, [pc, #248]	; (80120d8 <Sample_Function+0x258>)
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	f7ee fa67 	bl	80004b4 <__aeabi_ui2d>
 8011fe6:	a332      	add	r3, pc, #200	; (adr r3, 80120b0 <Sample_Function+0x230>)
 8011fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fec:	f7ee fadc 	bl	80005a8 <__aeabi_dmul>
 8011ff0:	4602      	mov	r2, r0
 8011ff2:	460b      	mov	r3, r1
 8011ff4:	4610      	mov	r0, r2
 8011ff6:	4619      	mov	r1, r3
 8011ff8:	a32f      	add	r3, pc, #188	; (adr r3, 80120b8 <Sample_Function+0x238>)
 8011ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ffe:	f7ee fbfd 	bl	80007fc <__aeabi_ddiv>
 8012002:	4602      	mov	r2, r0
 8012004:	460b      	mov	r3, r1
 8012006:	4610      	mov	r0, r2
 8012008:	4619      	mov	r1, r3
 801200a:	f7ee fda5 	bl	8000b58 <__aeabi_d2f>
 801200e:	4603      	mov	r3, r0
 8012010:	4a35      	ldr	r2, [pc, #212]	; (80120e8 <Sample_Function+0x268>)
 8012012:	6013      	str	r3, [r2, #0]
		val_lineal = (A * voltage_lin) - B; //TODO Corregir
 8012014:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80120ec <Sample_Function+0x26c>
 8012018:	4b33      	ldr	r3, [pc, #204]	; (80120e8 <Sample_Function+0x268>)
 801201a:	edd3 7a00 	vldr	s15, [r3]
 801201e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012022:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80120f0 <Sample_Function+0x270>
 8012026:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801202a:	4b32      	ldr	r3, [pc, #200]	; (80120f4 <Sample_Function+0x274>)
 801202c:	edc3 7a00 	vstr	s15, [r3]
		break;
 8012030:	e037      	b.n	80120a2 <Sample_Function+0x222>
		voltage_log = 2.99*adc_value[0]/4095;
 8012032:	4b29      	ldr	r3, [pc, #164]	; (80120d8 <Sample_Function+0x258>)
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	4618      	mov	r0, r3
 8012038:	f7ee fa3c 	bl	80004b4 <__aeabi_ui2d>
 801203c:	a31c      	add	r3, pc, #112	; (adr r3, 80120b0 <Sample_Function+0x230>)
 801203e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012042:	f7ee fab1 	bl	80005a8 <__aeabi_dmul>
 8012046:	4602      	mov	r2, r0
 8012048:	460b      	mov	r3, r1
 801204a:	4610      	mov	r0, r2
 801204c:	4619      	mov	r1, r3
 801204e:	a31a      	add	r3, pc, #104	; (adr r3, 80120b8 <Sample_Function+0x238>)
 8012050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012054:	f7ee fbd2 	bl	80007fc <__aeabi_ddiv>
 8012058:	4602      	mov	r2, r0
 801205a:	460b      	mov	r3, r1
 801205c:	4610      	mov	r0, r2
 801205e:	4619      	mov	r1, r3
 8012060:	f7ee fd7a 	bl	8000b58 <__aeabi_d2f>
 8012064:	4603      	mov	r3, r0
 8012066:	4a24      	ldr	r2, [pc, #144]	; (80120f8 <Sample_Function+0x278>)
 8012068:	6013      	str	r3, [r2, #0]
		absorbance = log(voltage_log / val_lineal);
 801206a:	4b23      	ldr	r3, [pc, #140]	; (80120f8 <Sample_Function+0x278>)
 801206c:	ed93 7a00 	vldr	s14, [r3]
 8012070:	4b20      	ldr	r3, [pc, #128]	; (80120f4 <Sample_Function+0x274>)
 8012072:	edd3 7a00 	vldr	s15, [r3]
 8012076:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801207a:	ee16 0a90 	vmov	r0, s13
 801207e:	f7ee fa3b 	bl	80004f8 <__aeabi_f2d>
 8012082:	4602      	mov	r2, r0
 8012084:	460b      	mov	r3, r1
 8012086:	ec43 2b10 	vmov	d0, r2, r3
 801208a:	f004 f869 	bl	8016160 <log>
 801208e:	ec53 2b10 	vmov	r2, r3, d0
 8012092:	4610      	mov	r0, r2
 8012094:	4619      	mov	r1, r3
 8012096:	f7ee fd5f 	bl	8000b58 <__aeabi_d2f>
 801209a:	4603      	mov	r3, r0
 801209c:	4a17      	ldr	r2, [pc, #92]	; (80120fc <Sample_Function+0x27c>)
 801209e:	6013      	str	r3, [r2, #0]
		break;
 80120a0:	bf00      	nop
	return;
 80120a2:	bf00      	nop
}
 80120a4:	3708      	adds	r7, #8
 80120a6:	46bd      	mov	sp, r7
 80120a8:	bd80      	pop	{r7, pc}
 80120aa:	bf00      	nop
 80120ac:	f3af 8000 	nop.w
 80120b0:	1eb851ec 	.word	0x1eb851ec
 80120b4:	4007eb85 	.word	0x4007eb85
 80120b8:	00000000 	.word	0x00000000
 80120bc:	40affe00 	.word	0x40affe00
 80120c0:	20000004 	.word	0x20000004
 80120c4:	080167ac 	.word	0x080167ac
 80120c8:	08016774 	.word	0x08016774
 80120cc:	08016780 	.word	0x08016780
 80120d0:	48000400 	.word	0x48000400
 80120d4:	20000430 	.word	0x20000430
 80120d8:	20000a90 	.word	0x20000a90
 80120dc:	200002b8 	.word	0x200002b8
 80120e0:	0001001d 	.word	0x0001001d
 80120e4:	20000a8c 	.word	0x20000a8c
 80120e8:	20000aa4 	.word	0x20000aa4
 80120ec:	404b0aec 	.word	0x404b0aec
 80120f0:	3f3b9404 	.word	0x3f3b9404
 80120f4:	20000aac 	.word	0x20000aac
 80120f8:	20000aa8 	.word	0x20000aa8
 80120fc:	20000ab0 	.word	0x20000ab0

08012100 <ADCCheck_Function>:

void ADCCheck_Function(void)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	af00      	add	r7, sp, #0
	//Start PWM, PHT & OPAMP
	TIM2->CCR1 = 65535;
 8012104:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801210c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 801210e:	2100      	movs	r1, #0
 8012110:	4809      	ldr	r0, [pc, #36]	; (8012138 <ADCCheck_Function+0x38>)
 8012112:	f7f7 fc77 	bl	8009a04 <HAL_TIM_PWM_Start>
	HAL_Delay(100);
 8012116:	2064      	movs	r0, #100	; 0x64
 8012118:	f7ef f983 	bl	8001422 <HAL_Delay>
	HAL_ADC_Start_DMA(&hadc1, adc_value, 2);
 801211c:	2202      	movs	r2, #2
 801211e:	4907      	ldr	r1, [pc, #28]	; (801213c <ADCCheck_Function+0x3c>)
 8012120:	4807      	ldr	r0, [pc, #28]	; (8012140 <ADCCheck_Function+0x40>)
 8012122:	f7f1 f985 	bl	8003430 <HAL_ADC_Start_DMA>

	//Turn off PWM and ADC
	HAL_ADC_Stop_DMA(&hadc1);
 8012126:	4806      	ldr	r0, [pc, #24]	; (8012140 <ADCCheck_Function+0x40>)
 8012128:	f7f1 fa06 	bl	8003538 <HAL_ADC_Stop_DMA>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 801212c:	2100      	movs	r1, #0
 801212e:	4802      	ldr	r0, [pc, #8]	; (8012138 <ADCCheck_Function+0x38>)
 8012130:	f7f7 fd42 	bl	8009bb8 <HAL_TIM_PWM_Stop>
}
 8012134:	bf00      	nop
 8012136:	bd80      	pop	{r7, pc}
 8012138:	20000430 	.word	0x20000430
 801213c:	20000a90 	.word	0x20000a90
 8012140:	200002b8 	.word	0x200002b8
 8012144:	00000000 	.word	0x00000000

08012148 <Battery_Percentage>:

void Battery_Percentage(void)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	af00      	add	r7, sp, #0
	//Obtain battery value by ADC
	HAL_ADC_Start_DMA(&hadc1, adc_value, 2);
 801214c:	2202      	movs	r2, #2
 801214e:	4932      	ldr	r1, [pc, #200]	; (8012218 <Battery_Percentage+0xd0>)
 8012150:	4832      	ldr	r0, [pc, #200]	; (801221c <Battery_Percentage+0xd4>)
 8012152:	f7f1 f96d 	bl	8003430 <HAL_ADC_Start_DMA>
	HAL_Delay(100);
 8012156:	2064      	movs	r0, #100	; 0x64
 8012158:	f7ef f963 	bl	8001422 <HAL_Delay>

	//Voltage calculation
	batt_percentage = 2.99*adc_value[1]/4095;
 801215c:	4b2e      	ldr	r3, [pc, #184]	; (8012218 <Battery_Percentage+0xd0>)
 801215e:	685b      	ldr	r3, [r3, #4]
 8012160:	4618      	mov	r0, r3
 8012162:	f7ee f9a7 	bl	80004b4 <__aeabi_ui2d>
 8012166:	a326      	add	r3, pc, #152	; (adr r3, 8012200 <Battery_Percentage+0xb8>)
 8012168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801216c:	f7ee fa1c 	bl	80005a8 <__aeabi_dmul>
 8012170:	4602      	mov	r2, r0
 8012172:	460b      	mov	r3, r1
 8012174:	4610      	mov	r0, r2
 8012176:	4619      	mov	r1, r3
 8012178:	a323      	add	r3, pc, #140	; (adr r3, 8012208 <Battery_Percentage+0xc0>)
 801217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801217e:	f7ee fb3d 	bl	80007fc <__aeabi_ddiv>
 8012182:	4602      	mov	r2, r0
 8012184:	460b      	mov	r3, r1
 8012186:	4610      	mov	r0, r2
 8012188:	4619      	mov	r1, r3
 801218a:	f7ee fce5 	bl	8000b58 <__aeabi_d2f>
 801218e:	4603      	mov	r3, r0
 8012190:	4a23      	ldr	r2, [pc, #140]	; (8012220 <Battery_Percentage+0xd8>)
 8012192:	6013      	str	r3, [r2, #0]

	//Show value on screen
	if(batt_percentage <= 1.64)
 8012194:	4b22      	ldr	r3, [pc, #136]	; (8012220 <Battery_Percentage+0xd8>)
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	4618      	mov	r0, r3
 801219a:	f7ee f9ad 	bl	80004f8 <__aeabi_f2d>
 801219e:	a31c      	add	r3, pc, #112	; (adr r3, 8012210 <Battery_Percentage+0xc8>)
 80121a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121a4:	f7ee fc7c 	bl	8000aa0 <__aeabi_dcmple>
 80121a8:	4603      	mov	r3, r0
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d100      	bne.n	80121b0 <Battery_Percentage+0x68>
		SSD1306_UpdateScreen();
		battery_completed = 1;
		HAL_Delay(2000);
	}

	return;
 80121ae:	e025      	b.n	80121fc <Battery_Percentage+0xb4>
		SSD1306_Clear();
 80121b0:	f7f0 f929 	bl	8002406 <SSD1306_Clear>
		HAL_GPIO_WritePin(GPIOA, RGB_RED_Pin, GPIO_PIN_SET);
 80121b4:	2201      	movs	r2, #1
 80121b6:	2104      	movs	r1, #4
 80121b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80121bc:	f7f2 fde8 	bl	8004d90 <HAL_GPIO_WritePin>
		SSD1306_Clear();
 80121c0:	f7f0 f921 	bl	8002406 <SSD1306_Clear>
		SSD1306_GotoXY(15, 15);
 80121c4:	210f      	movs	r1, #15
 80121c6:	200f      	movs	r0, #15
 80121c8:	f7f0 f862 	bl	8002290 <SSD1306_GotoXY>
		SSD1306_Puts("Bateria baja", &Font_7x10, 1);
 80121cc:	2201      	movs	r2, #1
 80121ce:	4915      	ldr	r1, [pc, #84]	; (8012224 <Battery_Percentage+0xdc>)
 80121d0:	4815      	ldr	r0, [pc, #84]	; (8012228 <Battery_Percentage+0xe0>)
 80121d2:	f7f0 f8f3 	bl	80023bc <SSD1306_Puts>
		SSD1306_GotoXY(15, 45);
 80121d6:	212d      	movs	r1, #45	; 0x2d
 80121d8:	200f      	movs	r0, #15
 80121da:	f7f0 f859 	bl	8002290 <SSD1306_GotoXY>
		SSD1306_Puts("Conectar cargador", &Font_7x10, 1);
 80121de:	2201      	movs	r2, #1
 80121e0:	4910      	ldr	r1, [pc, #64]	; (8012224 <Battery_Percentage+0xdc>)
 80121e2:	4812      	ldr	r0, [pc, #72]	; (801222c <Battery_Percentage+0xe4>)
 80121e4:	f7f0 f8ea 	bl	80023bc <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80121e8:	f7ef ffac 	bl	8002144 <SSD1306_UpdateScreen>
		battery_completed = 1;
 80121ec:	4b10      	ldr	r3, [pc, #64]	; (8012230 <Battery_Percentage+0xe8>)
 80121ee:	2201      	movs	r2, #1
 80121f0:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2000);
 80121f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80121f6:	f7ef f914 	bl	8001422 <HAL_Delay>
	return;
 80121fa:	bf00      	nop
}
 80121fc:	bd80      	pop	{r7, pc}
 80121fe:	bf00      	nop
 8012200:	1eb851ec 	.word	0x1eb851ec
 8012204:	4007eb85 	.word	0x4007eb85
 8012208:	00000000 	.word	0x00000000
 801220c:	40affe00 	.word	0x40affe00
 8012210:	a3d70a3d 	.word	0xa3d70a3d
 8012214:	3ffa3d70 	.word	0x3ffa3d70
 8012218:	20000a90 	.word	0x20000a90
 801221c:	200002b8 	.word	0x200002b8
 8012220:	20000aa0 	.word	0x20000aa0
 8012224:	20000004 	.word	0x20000004
 8012228:	080167bc 	.word	0x080167bc
 801222c:	080167cc 	.word	0x080167cc
 8012230:	2000047c 	.word	0x2000047c

08012234 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8012234:	b480      	push	{r7}
 8012236:	b08b      	sub	sp, #44	; 0x2c
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 801223c:	2300      	movs	r3, #0
 801223e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	3301      	adds	r3, #1
 8012246:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 8012248:	6a3b      	ldr	r3, [r7, #32]
 801224a:	781b      	ldrb	r3, [r3, #0]
 801224c:	2bff      	cmp	r3, #255	; 0xff
 801224e:	d11b      	bne.n	8012288 <Custom_STM_Event_Handler+0x54>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8012250:	6a3b      	ldr	r3, [r7, #32]
 8012252:	3302      	adds	r3, #2
 8012254:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 8012256:	69fb      	ldr	r3, [r7, #28]
 8012258:	881b      	ldrh	r3, [r3, #0]
 801225a:	b29b      	uxth	r3, r3
 801225c:	f640 4214 	movw	r2, #3092	; 0xc14
 8012260:	4293      	cmp	r3, r2
 8012262:	d00b      	beq.n	801227c <Custom_STM_Event_Handler+0x48>
 8012264:	f640 4214 	movw	r2, #3092	; 0xc14
 8012268:	4293      	cmp	r3, r2
 801226a:	dc09      	bgt.n	8012280 <Custom_STM_Event_Handler+0x4c>
 801226c:	f640 4201 	movw	r2, #3073	; 0xc01
 8012270:	4293      	cmp	r3, r2
 8012272:	d007      	beq.n	8012284 <Custom_STM_Event_Handler+0x50>
 8012274:	f640 4213 	movw	r2, #3091	; 0xc13
 8012278:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 801227a:	e004      	b.n	8012286 <Custom_STM_Event_Handler+0x52>
          break;
 801227c:	bf00      	nop
 801227e:	e004      	b.n	801228a <Custom_STM_Event_Handler+0x56>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8012280:	bf00      	nop
 8012282:	e002      	b.n	801228a <Custom_STM_Event_Handler+0x56>
          break;
 8012284:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8012286:	e000      	b.n	801228a <Custom_STM_Event_Handler+0x56>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8012288:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 801228a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 801228e:	4618      	mov	r0, r3
 8012290:	372c      	adds	r7, #44	; 0x2c
 8012292:	46bd      	mov	sp, r7
 8012294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012298:	4770      	bx	lr
	...

0801229c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b08c      	sub	sp, #48	; 0x30
 80122a0:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80122a2:	2392      	movs	r3, #146	; 0x92
 80122a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 80122a6:	4886      	ldr	r0, [pc, #536]	; (80124c0 <SVCCTL_InitCustomSvc+0x224>)
 80122a8:	f7fd ff32 	bl	8010110 <SVCCTL_RegisterSvcHandler>
   *                                2 for TEMP_HUM +
   *                                2 for DATE +
   *                              = 9
   */

  COPY_SNAP_SVC_UUID(uuid.Char_UUID_128);
 80122ac:	238f      	movs	r3, #143	; 0x8f
 80122ae:	713b      	strb	r3, [r7, #4]
 80122b0:	23e5      	movs	r3, #229	; 0xe5
 80122b2:	717b      	strb	r3, [r7, #5]
 80122b4:	23b3      	movs	r3, #179	; 0xb3
 80122b6:	71bb      	strb	r3, [r7, #6]
 80122b8:	23d5      	movs	r3, #213	; 0xd5
 80122ba:	71fb      	strb	r3, [r7, #7]
 80122bc:	232e      	movs	r3, #46	; 0x2e
 80122be:	723b      	strb	r3, [r7, #8]
 80122c0:	237f      	movs	r3, #127	; 0x7f
 80122c2:	727b      	strb	r3, [r7, #9]
 80122c4:	234a      	movs	r3, #74	; 0x4a
 80122c6:	72bb      	strb	r3, [r7, #10]
 80122c8:	2398      	movs	r3, #152	; 0x98
 80122ca:	72fb      	strb	r3, [r7, #11]
 80122cc:	232a      	movs	r3, #42	; 0x2a
 80122ce:	733b      	strb	r3, [r7, #12]
 80122d0:	2348      	movs	r3, #72	; 0x48
 80122d2:	737b      	strb	r3, [r7, #13]
 80122d4:	237a      	movs	r3, #122	; 0x7a
 80122d6:	73bb      	strb	r3, [r7, #14]
 80122d8:	23cc      	movs	r3, #204	; 0xcc
 80122da:	73fb      	strb	r3, [r7, #15]
 80122dc:	2340      	movs	r3, #64	; 0x40
 80122de:	743b      	strb	r3, [r7, #16]
 80122e0:	2300      	movs	r3, #0
 80122e2:	747b      	strb	r3, [r7, #17]
 80122e4:	2300      	movs	r3, #0
 80122e6:	74bb      	strb	r3, [r7, #18]
 80122e8:	2300      	movs	r3, #0
 80122ea:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 80122ec:	1d39      	adds	r1, r7, #4
 80122ee:	4b75      	ldr	r3, [pc, #468]	; (80124c4 <SVCCTL_InitCustomSvc+0x228>)
 80122f0:	9300      	str	r3, [sp, #0]
 80122f2:	2309      	movs	r3, #9
 80122f4:	2201      	movs	r2, #1
 80122f6:	2002      	movs	r0, #2
 80122f8:	f7fd f9d2 	bl	800f6a0 <aci_gatt_add_service>
 80122fc:	4603      	mov	r3, r0
 80122fe:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  ABSORBANCE
   */
  COPY_ABSORBANCE_UUID(uuid.Char_UUID_128);
 8012300:	2319      	movs	r3, #25
 8012302:	713b      	strb	r3, [r7, #4]
 8012304:	23ed      	movs	r3, #237	; 0xed
 8012306:	717b      	strb	r3, [r7, #5]
 8012308:	2382      	movs	r3, #130	; 0x82
 801230a:	71bb      	strb	r3, [r7, #6]
 801230c:	23ae      	movs	r3, #174	; 0xae
 801230e:	71fb      	strb	r3, [r7, #7]
 8012310:	23ed      	movs	r3, #237	; 0xed
 8012312:	723b      	strb	r3, [r7, #8]
 8012314:	2321      	movs	r3, #33	; 0x21
 8012316:	727b      	strb	r3, [r7, #9]
 8012318:	234c      	movs	r3, #76	; 0x4c
 801231a:	72bb      	strb	r3, [r7, #10]
 801231c:	239d      	movs	r3, #157	; 0x9d
 801231e:	72fb      	strb	r3, [r7, #11]
 8012320:	2341      	movs	r3, #65	; 0x41
 8012322:	733b      	strb	r3, [r7, #12]
 8012324:	2345      	movs	r3, #69	; 0x45
 8012326:	737b      	strb	r3, [r7, #13]
 8012328:	2322      	movs	r3, #34	; 0x22
 801232a:	73bb      	strb	r3, [r7, #14]
 801232c:	238e      	movs	r3, #142	; 0x8e
 801232e:	73fb      	strb	r3, [r7, #15]
 8012330:	2341      	movs	r3, #65	; 0x41
 8012332:	743b      	strb	r3, [r7, #16]
 8012334:	2300      	movs	r3, #0
 8012336:	747b      	strb	r3, [r7, #17]
 8012338:	2300      	movs	r3, #0
 801233a:	74bb      	strb	r3, [r7, #18]
 801233c:	2300      	movs	r3, #0
 801233e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomSnapHdle,
 8012340:	4b60      	ldr	r3, [pc, #384]	; (80124c4 <SVCCTL_InitCustomSvc+0x228>)
 8012342:	8818      	ldrh	r0, [r3, #0]
 8012344:	4b60      	ldr	r3, [pc, #384]	; (80124c8 <SVCCTL_InitCustomSvc+0x22c>)
 8012346:	781b      	ldrb	r3, [r3, #0]
 8012348:	b29b      	uxth	r3, r3
 801234a:	1d3a      	adds	r2, r7, #4
 801234c:	495f      	ldr	r1, [pc, #380]	; (80124cc <SVCCTL_InitCustomSvc+0x230>)
 801234e:	9105      	str	r1, [sp, #20]
 8012350:	2100      	movs	r1, #0
 8012352:	9104      	str	r1, [sp, #16]
 8012354:	2110      	movs	r1, #16
 8012356:	9103      	str	r1, [sp, #12]
 8012358:	2100      	movs	r1, #0
 801235a:	9102      	str	r1, [sp, #8]
 801235c:	2102      	movs	r1, #2
 801235e:	9101      	str	r1, [sp, #4]
 8012360:	2102      	movs	r1, #2
 8012362:	9100      	str	r1, [sp, #0]
 8012364:	2102      	movs	r1, #2
 8012366:	f7fd fa71 	bl	800f84c <aci_gatt_add_char>
 801236a:	4603      	mov	r3, r0
 801236c:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ABS \n\r");
  }
  /**
   *  REF_VOLTAGE
   */
  COPY_REF_VOLTAGE_UUID(uuid.Char_UUID_128);
 801236e:	2319      	movs	r3, #25
 8012370:	713b      	strb	r3, [r7, #4]
 8012372:	23ed      	movs	r3, #237	; 0xed
 8012374:	717b      	strb	r3, [r7, #5]
 8012376:	2382      	movs	r3, #130	; 0x82
 8012378:	71bb      	strb	r3, [r7, #6]
 801237a:	23ae      	movs	r3, #174	; 0xae
 801237c:	71fb      	strb	r3, [r7, #7]
 801237e:	23ed      	movs	r3, #237	; 0xed
 8012380:	723b      	strb	r3, [r7, #8]
 8012382:	2321      	movs	r3, #33	; 0x21
 8012384:	727b      	strb	r3, [r7, #9]
 8012386:	234c      	movs	r3, #76	; 0x4c
 8012388:	72bb      	strb	r3, [r7, #10]
 801238a:	239d      	movs	r3, #157	; 0x9d
 801238c:	72fb      	strb	r3, [r7, #11]
 801238e:	2341      	movs	r3, #65	; 0x41
 8012390:	733b      	strb	r3, [r7, #12]
 8012392:	2345      	movs	r3, #69	; 0x45
 8012394:	737b      	strb	r3, [r7, #13]
 8012396:	2322      	movs	r3, #34	; 0x22
 8012398:	73bb      	strb	r3, [r7, #14]
 801239a:	238e      	movs	r3, #142	; 0x8e
 801239c:	73fb      	strb	r3, [r7, #15]
 801239e:	2342      	movs	r3, #66	; 0x42
 80123a0:	743b      	strb	r3, [r7, #16]
 80123a2:	2300      	movs	r3, #0
 80123a4:	747b      	strb	r3, [r7, #17]
 80123a6:	2300      	movs	r3, #0
 80123a8:	74bb      	strb	r3, [r7, #18]
 80123aa:	2300      	movs	r3, #0
 80123ac:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomSnapHdle,
 80123ae:	4b45      	ldr	r3, [pc, #276]	; (80124c4 <SVCCTL_InitCustomSvc+0x228>)
 80123b0:	8818      	ldrh	r0, [r3, #0]
 80123b2:	4b47      	ldr	r3, [pc, #284]	; (80124d0 <SVCCTL_InitCustomSvc+0x234>)
 80123b4:	781b      	ldrb	r3, [r3, #0]
 80123b6:	b29b      	uxth	r3, r3
 80123b8:	1d3a      	adds	r2, r7, #4
 80123ba:	4946      	ldr	r1, [pc, #280]	; (80124d4 <SVCCTL_InitCustomSvc+0x238>)
 80123bc:	9105      	str	r1, [sp, #20]
 80123be:	2100      	movs	r1, #0
 80123c0:	9104      	str	r1, [sp, #16]
 80123c2:	2110      	movs	r1, #16
 80123c4:	9103      	str	r1, [sp, #12]
 80123c6:	2100      	movs	r1, #0
 80123c8:	9102      	str	r1, [sp, #8]
 80123ca:	2102      	movs	r1, #2
 80123cc:	9101      	str	r1, [sp, #4]
 80123ce:	2102      	movs	r1, #2
 80123d0:	9100      	str	r1, [sp, #0]
 80123d2:	2102      	movs	r1, #2
 80123d4:	f7fd fa3a 	bl	800f84c <aci_gatt_add_char>
 80123d8:	4603      	mov	r3, r0
 80123da:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : REF_VOL \n\r");
  }
  /**
   *  TEMP_HUM
   */
  COPY_TEMP_HUM_UUID(uuid.Char_UUID_128);
 80123dc:	2319      	movs	r3, #25
 80123de:	713b      	strb	r3, [r7, #4]
 80123e0:	23ed      	movs	r3, #237	; 0xed
 80123e2:	717b      	strb	r3, [r7, #5]
 80123e4:	2382      	movs	r3, #130	; 0x82
 80123e6:	71bb      	strb	r3, [r7, #6]
 80123e8:	23ae      	movs	r3, #174	; 0xae
 80123ea:	71fb      	strb	r3, [r7, #7]
 80123ec:	23ed      	movs	r3, #237	; 0xed
 80123ee:	723b      	strb	r3, [r7, #8]
 80123f0:	2321      	movs	r3, #33	; 0x21
 80123f2:	727b      	strb	r3, [r7, #9]
 80123f4:	234c      	movs	r3, #76	; 0x4c
 80123f6:	72bb      	strb	r3, [r7, #10]
 80123f8:	239d      	movs	r3, #157	; 0x9d
 80123fa:	72fb      	strb	r3, [r7, #11]
 80123fc:	2341      	movs	r3, #65	; 0x41
 80123fe:	733b      	strb	r3, [r7, #12]
 8012400:	2345      	movs	r3, #69	; 0x45
 8012402:	737b      	strb	r3, [r7, #13]
 8012404:	2322      	movs	r3, #34	; 0x22
 8012406:	73bb      	strb	r3, [r7, #14]
 8012408:	238e      	movs	r3, #142	; 0x8e
 801240a:	73fb      	strb	r3, [r7, #15]
 801240c:	2343      	movs	r3, #67	; 0x43
 801240e:	743b      	strb	r3, [r7, #16]
 8012410:	2300      	movs	r3, #0
 8012412:	747b      	strb	r3, [r7, #17]
 8012414:	2300      	movs	r3, #0
 8012416:	74bb      	strb	r3, [r7, #18]
 8012418:	2300      	movs	r3, #0
 801241a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomSnapHdle,
 801241c:	4b29      	ldr	r3, [pc, #164]	; (80124c4 <SVCCTL_InitCustomSvc+0x228>)
 801241e:	8818      	ldrh	r0, [r3, #0]
 8012420:	4b2d      	ldr	r3, [pc, #180]	; (80124d8 <SVCCTL_InitCustomSvc+0x23c>)
 8012422:	781b      	ldrb	r3, [r3, #0]
 8012424:	b29b      	uxth	r3, r3
 8012426:	1d3a      	adds	r2, r7, #4
 8012428:	492c      	ldr	r1, [pc, #176]	; (80124dc <SVCCTL_InitCustomSvc+0x240>)
 801242a:	9105      	str	r1, [sp, #20]
 801242c:	2100      	movs	r1, #0
 801242e:	9104      	str	r1, [sp, #16]
 8012430:	2110      	movs	r1, #16
 8012432:	9103      	str	r1, [sp, #12]
 8012434:	2100      	movs	r1, #0
 8012436:	9102      	str	r1, [sp, #8]
 8012438:	2102      	movs	r1, #2
 801243a:	9101      	str	r1, [sp, #4]
 801243c:	2102      	movs	r1, #2
 801243e:	9100      	str	r1, [sp, #0]
 8012440:	2102      	movs	r1, #2
 8012442:	f7fd fa03 	bl	800f84c <aci_gatt_add_char>
 8012446:	4603      	mov	r3, r0
 8012448:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : TEMP_HUM \n\r");
  }
  /**
   *  DATE
   */
  COPY_DATE_UUID(uuid.Char_UUID_128);
 801244a:	2319      	movs	r3, #25
 801244c:	713b      	strb	r3, [r7, #4]
 801244e:	23ed      	movs	r3, #237	; 0xed
 8012450:	717b      	strb	r3, [r7, #5]
 8012452:	2382      	movs	r3, #130	; 0x82
 8012454:	71bb      	strb	r3, [r7, #6]
 8012456:	23ae      	movs	r3, #174	; 0xae
 8012458:	71fb      	strb	r3, [r7, #7]
 801245a:	23ed      	movs	r3, #237	; 0xed
 801245c:	723b      	strb	r3, [r7, #8]
 801245e:	2321      	movs	r3, #33	; 0x21
 8012460:	727b      	strb	r3, [r7, #9]
 8012462:	234c      	movs	r3, #76	; 0x4c
 8012464:	72bb      	strb	r3, [r7, #10]
 8012466:	239d      	movs	r3, #157	; 0x9d
 8012468:	72fb      	strb	r3, [r7, #11]
 801246a:	2341      	movs	r3, #65	; 0x41
 801246c:	733b      	strb	r3, [r7, #12]
 801246e:	2345      	movs	r3, #69	; 0x45
 8012470:	737b      	strb	r3, [r7, #13]
 8012472:	2322      	movs	r3, #34	; 0x22
 8012474:	73bb      	strb	r3, [r7, #14]
 8012476:	238e      	movs	r3, #142	; 0x8e
 8012478:	73fb      	strb	r3, [r7, #15]
 801247a:	2344      	movs	r3, #68	; 0x44
 801247c:	743b      	strb	r3, [r7, #16]
 801247e:	23fe      	movs	r3, #254	; 0xfe
 8012480:	747b      	strb	r3, [r7, #17]
 8012482:	2300      	movs	r3, #0
 8012484:	74bb      	strb	r3, [r7, #18]
 8012486:	2300      	movs	r3, #0
 8012488:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomSnapHdle,
 801248a:	4b0e      	ldr	r3, [pc, #56]	; (80124c4 <SVCCTL_InitCustomSvc+0x228>)
 801248c:	8818      	ldrh	r0, [r3, #0]
 801248e:	4b14      	ldr	r3, [pc, #80]	; (80124e0 <SVCCTL_InitCustomSvc+0x244>)
 8012490:	781b      	ldrb	r3, [r3, #0]
 8012492:	b29b      	uxth	r3, r3
 8012494:	1d3a      	adds	r2, r7, #4
 8012496:	4913      	ldr	r1, [pc, #76]	; (80124e4 <SVCCTL_InitCustomSvc+0x248>)
 8012498:	9105      	str	r1, [sp, #20]
 801249a:	2100      	movs	r1, #0
 801249c:	9104      	str	r1, [sp, #16]
 801249e:	2110      	movs	r1, #16
 80124a0:	9103      	str	r1, [sp, #12]
 80124a2:	2100      	movs	r1, #0
 80124a4:	9102      	str	r1, [sp, #8]
 80124a6:	2102      	movs	r1, #2
 80124a8:	9101      	str	r1, [sp, #4]
 80124aa:	2102      	movs	r1, #2
 80124ac:	9100      	str	r1, [sp, #0]
 80124ae:	2102      	movs	r1, #2
 80124b0:	f7fd f9cc 	bl	800f84c <aci_gatt_add_char>
 80124b4:	4603      	mov	r3, r0
 80124b6:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 80124b8:	bf00      	nop
}
 80124ba:	3718      	adds	r7, #24
 80124bc:	46bd      	mov	sp, r7
 80124be:	bd80      	pop	{r7, pc}
 80124c0:	08012235 	.word	0x08012235
 80124c4:	20000ac0 	.word	0x20000ac0
 80124c8:	200000d8 	.word	0x200000d8
 80124cc:	20000ac2 	.word	0x20000ac2
 80124d0:	200000d9 	.word	0x200000d9
 80124d4:	20000ac4 	.word	0x20000ac4
 80124d8:	200000da 	.word	0x200000da
 80124dc:	20000ac6 	.word	0x20000ac6
 80124e0:	200000db 	.word	0x200000db
 80124e4:	20000ac8 	.word	0x20000ac8

080124e8 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b086      	sub	sp, #24
 80124ec:	af02      	add	r7, sp, #8
 80124ee:	4603      	mov	r3, r0
 80124f0:	6039      	str	r1, [r7, #0]
 80124f2:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80124f4:	2392      	movs	r3, #146	; 0x92
 80124f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 80124f8:	79fb      	ldrb	r3, [r7, #7]
 80124fa:	2b03      	cmp	r3, #3
 80124fc:	d846      	bhi.n	801258c <Custom_STM_App_Update_Char+0xa4>
 80124fe:	a201      	add	r2, pc, #4	; (adr r2, 8012504 <Custom_STM_App_Update_Char+0x1c>)
 8012500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012504:	08012515 	.word	0x08012515
 8012508:	08012533 	.word	0x08012533
 801250c:	08012551 	.word	0x08012551
 8012510:	0801256f 	.word	0x0801256f
  {

    case CUSTOM_STM_ABS:
      ret = aci_gatt_update_char_value(CustomContext.CustomSnapHdle,
 8012514:	4b20      	ldr	r3, [pc, #128]	; (8012598 <Custom_STM_App_Update_Char+0xb0>)
 8012516:	8818      	ldrh	r0, [r3, #0]
 8012518:	4b1f      	ldr	r3, [pc, #124]	; (8012598 <Custom_STM_App_Update_Char+0xb0>)
 801251a:	8859      	ldrh	r1, [r3, #2]
 801251c:	4b1f      	ldr	r3, [pc, #124]	; (801259c <Custom_STM_App_Update_Char+0xb4>)
 801251e:	781a      	ldrb	r2, [r3, #0]
 8012520:	683b      	ldr	r3, [r7, #0]
 8012522:	9300      	str	r3, [sp, #0]
 8012524:	4613      	mov	r3, r2
 8012526:	2200      	movs	r2, #0
 8012528:	f7fd fa98 	bl	800fa5c <aci_gatt_update_char_value>
 801252c:	4603      	mov	r3, r0
 801252e:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ABS command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 8012530:	e02d      	b.n	801258e <Custom_STM_App_Update_Char+0xa6>

    case CUSTOM_STM_REF_VOL:
      ret = aci_gatt_update_char_value(CustomContext.CustomSnapHdle,
 8012532:	4b19      	ldr	r3, [pc, #100]	; (8012598 <Custom_STM_App_Update_Char+0xb0>)
 8012534:	8818      	ldrh	r0, [r3, #0]
 8012536:	4b18      	ldr	r3, [pc, #96]	; (8012598 <Custom_STM_App_Update_Char+0xb0>)
 8012538:	8899      	ldrh	r1, [r3, #4]
 801253a:	4b19      	ldr	r3, [pc, #100]	; (80125a0 <Custom_STM_App_Update_Char+0xb8>)
 801253c:	781a      	ldrb	r2, [r3, #0]
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	9300      	str	r3, [sp, #0]
 8012542:	4613      	mov	r3, r2
 8012544:	2200      	movs	r2, #0
 8012546:	f7fd fa89 	bl	800fa5c <aci_gatt_update_char_value>
 801254a:	4603      	mov	r3, r0
 801254c:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value REF_VOL command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;
 801254e:	e01e      	b.n	801258e <Custom_STM_App_Update_Char+0xa6>

    case CUSTOM_STM_TEMP_HUM:
      ret = aci_gatt_update_char_value(CustomContext.CustomSnapHdle,
 8012550:	4b11      	ldr	r3, [pc, #68]	; (8012598 <Custom_STM_App_Update_Char+0xb0>)
 8012552:	8818      	ldrh	r0, [r3, #0]
 8012554:	4b10      	ldr	r3, [pc, #64]	; (8012598 <Custom_STM_App_Update_Char+0xb0>)
 8012556:	88d9      	ldrh	r1, [r3, #6]
 8012558:	4b12      	ldr	r3, [pc, #72]	; (80125a4 <Custom_STM_App_Update_Char+0xbc>)
 801255a:	781a      	ldrb	r2, [r3, #0]
 801255c:	683b      	ldr	r3, [r7, #0]
 801255e:	9300      	str	r3, [sp, #0]
 8012560:	4613      	mov	r3, r2
 8012562:	2200      	movs	r2, #0
 8012564:	f7fd fa7a 	bl	800fa5c <aci_gatt_update_char_value>
 8012568:	4603      	mov	r3, r0
 801256a:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value TEMP_HUM command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_3*/
      break;
 801256c:	e00f      	b.n	801258e <Custom_STM_App_Update_Char+0xa6>

    case CUSTOM_STM_DATE:
      ret = aci_gatt_update_char_value(CustomContext.CustomSnapHdle,
 801256e:	4b0a      	ldr	r3, [pc, #40]	; (8012598 <Custom_STM_App_Update_Char+0xb0>)
 8012570:	8818      	ldrh	r0, [r3, #0]
 8012572:	4b09      	ldr	r3, [pc, #36]	; (8012598 <Custom_STM_App_Update_Char+0xb0>)
 8012574:	8919      	ldrh	r1, [r3, #8]
 8012576:	4b0c      	ldr	r3, [pc, #48]	; (80125a8 <Custom_STM_App_Update_Char+0xc0>)
 8012578:	781a      	ldrb	r2, [r3, #0]
 801257a:	683b      	ldr	r3, [r7, #0]
 801257c:	9300      	str	r3, [sp, #0]
 801257e:	4613      	mov	r3, r2
 8012580:	2200      	movs	r2, #0
 8012582:	f7fd fa6b 	bl	800fa5c <aci_gatt_update_char_value>
 8012586:	4603      	mov	r3, r0
 8012588:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value DATE command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_4*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_4*/
      break;
 801258a:	e000      	b.n	801258e <Custom_STM_App_Update_Char+0xa6>

    default:
      break;
 801258c:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 801258e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012590:	4618      	mov	r0, r3
 8012592:	3710      	adds	r7, #16
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}
 8012598:	20000ac0 	.word	0x20000ac0
 801259c:	200000d8 	.word	0x200000d8
 80125a0:	200000d9 	.word	0x200000d9
 80125a4:	200000da 	.word	0x200000da
 80125a8:	200000db 	.word	0x200000db

080125ac <LL_PWR_EnableBootC2>:
{
 80125ac:	b480      	push	{r7}
 80125ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80125b0:	4b05      	ldr	r3, [pc, #20]	; (80125c8 <LL_PWR_EnableBootC2+0x1c>)
 80125b2:	68db      	ldr	r3, [r3, #12]
 80125b4:	4a04      	ldr	r2, [pc, #16]	; (80125c8 <LL_PWR_EnableBootC2+0x1c>)
 80125b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80125ba:	60d3      	str	r3, [r2, #12]
}
 80125bc:	bf00      	nop
 80125be:	46bd      	mov	sp, r7
 80125c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c4:	4770      	bx	lr
 80125c6:	bf00      	nop
 80125c8:	58000400 	.word	0x58000400

080125cc <LL_C2_EXTI_EnableEvent_32_63>:
{
 80125cc:	b480      	push	{r7}
 80125ce:	b083      	sub	sp, #12
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80125d4:	4b06      	ldr	r3, [pc, #24]	; (80125f0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80125d6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80125da:	4905      	ldr	r1, [pc, #20]	; (80125f0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	4313      	orrs	r3, r2
 80125e0:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80125e4:	bf00      	nop
 80125e6:	370c      	adds	r7, #12
 80125e8:	46bd      	mov	sp, r7
 80125ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ee:	4770      	bx	lr
 80125f0:	58000800 	.word	0x58000800

080125f4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80125f4:	b480      	push	{r7}
 80125f6:	b083      	sub	sp, #12
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80125fc:	4b05      	ldr	r3, [pc, #20]	; (8012614 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80125fe:	6a1a      	ldr	r2, [r3, #32]
 8012600:	4904      	ldr	r1, [pc, #16]	; (8012614 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	4313      	orrs	r3, r2
 8012606:	620b      	str	r3, [r1, #32]
}
 8012608:	bf00      	nop
 801260a:	370c      	adds	r7, #12
 801260c:	46bd      	mov	sp, r7
 801260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012612:	4770      	bx	lr
 8012614:	58000800 	.word	0x58000800

08012618 <LL_AHB3_GRP1_EnableClock>:
{
 8012618:	b480      	push	{r7}
 801261a:	b085      	sub	sp, #20
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8012620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012624:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012626:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	4313      	orrs	r3, r2
 801262e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8012630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012634:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	4013      	ands	r3, r2
 801263a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801263c:	68fb      	ldr	r3, [r7, #12]
}
 801263e:	bf00      	nop
 8012640:	3714      	adds	r7, #20
 8012642:	46bd      	mov	sp, r7
 8012644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012648:	4770      	bx	lr

0801264a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 801264a:	b480      	push	{r7}
 801264c:	b085      	sub	sp, #20
 801264e:	af00      	add	r7, sp, #0
 8012650:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8012652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012656:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 801265a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	4313      	orrs	r3, r2
 8012662:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8012666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801266a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	4013      	ands	r3, r2
 8012672:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012674:	68fb      	ldr	r3, [r7, #12]
}
 8012676:	bf00      	nop
 8012678:	3714      	adds	r7, #20
 801267a:	46bd      	mov	sp, r7
 801267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012680:	4770      	bx	lr

08012682 <LL_C1_IPCC_EnableIT_TXF>:
{
 8012682:	b480      	push	{r7}
 8012684:	b083      	sub	sp, #12
 8012686:	af00      	add	r7, sp, #0
 8012688:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	601a      	str	r2, [r3, #0]
}
 8012696:	bf00      	nop
 8012698:	370c      	adds	r7, #12
 801269a:	46bd      	mov	sp, r7
 801269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a0:	4770      	bx	lr

080126a2 <LL_C1_IPCC_EnableIT_RXO>:
{
 80126a2:	b480      	push	{r7}
 80126a4:	b083      	sub	sp, #12
 80126a6:	af00      	add	r7, sp, #0
 80126a8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	f043 0201 	orr.w	r2, r3, #1
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	601a      	str	r2, [r3, #0]
}
 80126b6:	bf00      	nop
 80126b8:	370c      	adds	r7, #12
 80126ba:	46bd      	mov	sp, r7
 80126bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c0:	4770      	bx	lr

080126c2 <LL_C1_IPCC_EnableTransmitChannel>:
{
 80126c2:	b480      	push	{r7}
 80126c4:	b083      	sub	sp, #12
 80126c6:	af00      	add	r7, sp, #0
 80126c8:	6078      	str	r0, [r7, #4]
 80126ca:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	685a      	ldr	r2, [r3, #4]
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	041b      	lsls	r3, r3, #16
 80126d4:	43db      	mvns	r3, r3
 80126d6:	401a      	ands	r2, r3
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	605a      	str	r2, [r3, #4]
}
 80126dc:	bf00      	nop
 80126de:	370c      	adds	r7, #12
 80126e0:	46bd      	mov	sp, r7
 80126e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e6:	4770      	bx	lr

080126e8 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80126e8:	b480      	push	{r7}
 80126ea:	b083      	sub	sp, #12
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
 80126f0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	685a      	ldr	r2, [r3, #4]
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	041b      	lsls	r3, r3, #16
 80126fa:	431a      	orrs	r2, r3
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	605a      	str	r2, [r3, #4]
}
 8012700:	bf00      	nop
 8012702:	370c      	adds	r7, #12
 8012704:	46bd      	mov	sp, r7
 8012706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270a:	4770      	bx	lr

0801270c <LL_C1_IPCC_EnableReceiveChannel>:
{
 801270c:	b480      	push	{r7}
 801270e:	b083      	sub	sp, #12
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
 8012714:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	685a      	ldr	r2, [r3, #4]
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	43db      	mvns	r3, r3
 801271e:	401a      	ands	r2, r3
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	605a      	str	r2, [r3, #4]
}
 8012724:	bf00      	nop
 8012726:	370c      	adds	r7, #12
 8012728:	46bd      	mov	sp, r7
 801272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272e:	4770      	bx	lr

08012730 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8012730:	b480      	push	{r7}
 8012732:	b083      	sub	sp, #12
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
 8012738:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	683a      	ldr	r2, [r7, #0]
 801273e:	609a      	str	r2, [r3, #8]
}
 8012740:	bf00      	nop
 8012742:	370c      	adds	r7, #12
 8012744:	46bd      	mov	sp, r7
 8012746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274a:	4770      	bx	lr

0801274c <LL_C1_IPCC_SetFlag_CHx>:
{
 801274c:	b480      	push	{r7}
 801274e:	b083      	sub	sp, #12
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
 8012754:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8012756:	683b      	ldr	r3, [r7, #0]
 8012758:	041a      	lsls	r2, r3, #16
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	609a      	str	r2, [r3, #8]
}
 801275e:	bf00      	nop
 8012760:	370c      	adds	r7, #12
 8012762:	46bd      	mov	sp, r7
 8012764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012768:	4770      	bx	lr

0801276a <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 801276a:	b480      	push	{r7}
 801276c:	b083      	sub	sp, #12
 801276e:	af00      	add	r7, sp, #0
 8012770:	6078      	str	r0, [r7, #4]
 8012772:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	68da      	ldr	r2, [r3, #12]
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	4013      	ands	r3, r2
 801277c:	683a      	ldr	r2, [r7, #0]
 801277e:	429a      	cmp	r2, r3
 8012780:	d101      	bne.n	8012786 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8012782:	2301      	movs	r3, #1
 8012784:	e000      	b.n	8012788 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8012786:	2300      	movs	r3, #0
}
 8012788:	4618      	mov	r0, r3
 801278a:	370c      	adds	r7, #12
 801278c:	46bd      	mov	sp, r7
 801278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012792:	4770      	bx	lr

08012794 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8012794:	b480      	push	{r7}
 8012796:	b083      	sub	sp, #12
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
 801279c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	69da      	ldr	r2, [r3, #28]
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	4013      	ands	r3, r2
 80127a6:	683a      	ldr	r2, [r7, #0]
 80127a8:	429a      	cmp	r2, r3
 80127aa:	d101      	bne.n	80127b0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80127ac:	2301      	movs	r3, #1
 80127ae:	e000      	b.n	80127b2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80127b0:	2300      	movs	r3, #0
}
 80127b2:	4618      	mov	r0, r3
 80127b4:	370c      	adds	r7, #12
 80127b6:	46bd      	mov	sp, r7
 80127b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127bc:	4770      	bx	lr
	...

080127c0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80127c4:	2102      	movs	r1, #2
 80127c6:	4819      	ldr	r0, [pc, #100]	; (801282c <HW_IPCC_Rx_Handler+0x6c>)
 80127c8:	f7ff ffe4 	bl	8012794 <LL_C2_IPCC_IsActiveFlag_CHx>
 80127cc:	4603      	mov	r3, r0
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d009      	beq.n	80127e6 <HW_IPCC_Rx_Handler+0x26>
 80127d2:	4b16      	ldr	r3, [pc, #88]	; (801282c <HW_IPCC_Rx_Handler+0x6c>)
 80127d4:	685b      	ldr	r3, [r3, #4]
 80127d6:	43db      	mvns	r3, r3
 80127d8:	f003 0302 	and.w	r3, r3, #2
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d002      	beq.n	80127e6 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80127e0:	f000 f8da 	bl	8012998 <HW_IPCC_SYS_EvtHandler>
 80127e4:	e01f      	b.n	8012826 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80127e6:	2101      	movs	r1, #1
 80127e8:	4810      	ldr	r0, [pc, #64]	; (801282c <HW_IPCC_Rx_Handler+0x6c>)
 80127ea:	f7ff ffd3 	bl	8012794 <LL_C2_IPCC_IsActiveFlag_CHx>
 80127ee:	4603      	mov	r3, r0
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d008      	beq.n	8012806 <HW_IPCC_Rx_Handler+0x46>
 80127f4:	4b0d      	ldr	r3, [pc, #52]	; (801282c <HW_IPCC_Rx_Handler+0x6c>)
 80127f6:	685b      	ldr	r3, [r3, #4]
 80127f8:	f003 0301 	and.w	r3, r3, #1
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d102      	bne.n	8012806 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8012800:	f000 f88e 	bl	8012920 <HW_IPCC_BLE_EvtHandler>
 8012804:	e00f      	b.n	8012826 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8012806:	2108      	movs	r1, #8
 8012808:	4808      	ldr	r0, [pc, #32]	; (801282c <HW_IPCC_Rx_Handler+0x6c>)
 801280a:	f7ff ffc3 	bl	8012794 <LL_C2_IPCC_IsActiveFlag_CHx>
 801280e:	4603      	mov	r3, r0
 8012810:	2b00      	cmp	r3, #0
 8012812:	d009      	beq.n	8012828 <HW_IPCC_Rx_Handler+0x68>
 8012814:	4b05      	ldr	r3, [pc, #20]	; (801282c <HW_IPCC_Rx_Handler+0x6c>)
 8012816:	685b      	ldr	r3, [r3, #4]
 8012818:	43db      	mvns	r3, r3
 801281a:	f003 0308 	and.w	r3, r3, #8
 801281e:	2b00      	cmp	r3, #0
 8012820:	d002      	beq.n	8012828 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8012822:	f000 f905 	bl	8012a30 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8012826:	bf00      	nop
 8012828:	bf00      	nop
}
 801282a:	bd80      	pop	{r7, pc}
 801282c:	58000c00 	.word	0x58000c00

08012830 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8012830:	b580      	push	{r7, lr}
 8012832:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8012834:	2102      	movs	r1, #2
 8012836:	481a      	ldr	r0, [pc, #104]	; (80128a0 <HW_IPCC_Tx_Handler+0x70>)
 8012838:	f7ff ff97 	bl	801276a <LL_C1_IPCC_IsActiveFlag_CHx>
 801283c:	4603      	mov	r3, r0
 801283e:	2b00      	cmp	r3, #0
 8012840:	d109      	bne.n	8012856 <HW_IPCC_Tx_Handler+0x26>
 8012842:	4b17      	ldr	r3, [pc, #92]	; (80128a0 <HW_IPCC_Tx_Handler+0x70>)
 8012844:	685b      	ldr	r3, [r3, #4]
 8012846:	43db      	mvns	r3, r3
 8012848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801284c:	2b00      	cmp	r3, #0
 801284e:	d002      	beq.n	8012856 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8012850:	f000 f896 	bl	8012980 <HW_IPCC_SYS_CmdEvtHandler>
 8012854:	e020      	b.n	8012898 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8012856:	2108      	movs	r1, #8
 8012858:	4811      	ldr	r0, [pc, #68]	; (80128a0 <HW_IPCC_Tx_Handler+0x70>)
 801285a:	f7ff ff86 	bl	801276a <LL_C1_IPCC_IsActiveFlag_CHx>
 801285e:	4603      	mov	r3, r0
 8012860:	2b00      	cmp	r3, #0
 8012862:	d109      	bne.n	8012878 <HW_IPCC_Tx_Handler+0x48>
 8012864:	4b0e      	ldr	r3, [pc, #56]	; (80128a0 <HW_IPCC_Tx_Handler+0x70>)
 8012866:	685b      	ldr	r3, [r3, #4]
 8012868:	43db      	mvns	r3, r3
 801286a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801286e:	2b00      	cmp	r3, #0
 8012870:	d002      	beq.n	8012878 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8012872:	f000 f8bf 	bl	80129f4 <HW_IPCC_MM_FreeBufHandler>
 8012876:	e00f      	b.n	8012898 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8012878:	2120      	movs	r1, #32
 801287a:	4809      	ldr	r0, [pc, #36]	; (80128a0 <HW_IPCC_Tx_Handler+0x70>)
 801287c:	f7ff ff75 	bl	801276a <LL_C1_IPCC_IsActiveFlag_CHx>
 8012880:	4603      	mov	r3, r0
 8012882:	2b00      	cmp	r3, #0
 8012884:	d109      	bne.n	801289a <HW_IPCC_Tx_Handler+0x6a>
 8012886:	4b06      	ldr	r3, [pc, #24]	; (80128a0 <HW_IPCC_Tx_Handler+0x70>)
 8012888:	685b      	ldr	r3, [r3, #4]
 801288a:	43db      	mvns	r3, r3
 801288c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012890:	2b00      	cmp	r3, #0
 8012892:	d002      	beq.n	801289a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8012894:	f000 f850 	bl	8012938 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8012898:	bf00      	nop
 801289a:	bf00      	nop
}
 801289c:	bd80      	pop	{r7, pc}
 801289e:	bf00      	nop
 80128a0:	58000c00 	.word	0x58000c00

080128a4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80128a8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80128ac:	f7ff fecd 	bl	801264a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80128b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80128b4:	f7ff fe9e 	bl	80125f4 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80128b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80128bc:	f7ff fe86 	bl	80125cc <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80128c0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80128c2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80128c4:	f7ff fe72 	bl	80125ac <LL_PWR_EnableBootC2>

  return;
 80128c8:	bf00      	nop
}
 80128ca:	bd80      	pop	{r7, pc}

080128cc <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80128d0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80128d4:	f7ff fea0 	bl	8012618 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80128d8:	4806      	ldr	r0, [pc, #24]	; (80128f4 <HW_IPCC_Init+0x28>)
 80128da:	f7ff fee2 	bl	80126a2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80128de:	4805      	ldr	r0, [pc, #20]	; (80128f4 <HW_IPCC_Init+0x28>)
 80128e0:	f7ff fecf 	bl	8012682 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80128e4:	202c      	movs	r0, #44	; 0x2c
 80128e6:	f7f1 fdc8 	bl	800447a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80128ea:	202d      	movs	r0, #45	; 0x2d
 80128ec:	f7f1 fdc5 	bl	800447a <HAL_NVIC_EnableIRQ>

  return;
 80128f0:	bf00      	nop
}
 80128f2:	bd80      	pop	{r7, pc}
 80128f4:	58000c00 	.word	0x58000c00

080128f8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80128fc:	2101      	movs	r1, #1
 80128fe:	4802      	ldr	r0, [pc, #8]	; (8012908 <HW_IPCC_BLE_Init+0x10>)
 8012900:	f7ff ff04 	bl	801270c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012904:	bf00      	nop
}
 8012906:	bd80      	pop	{r7, pc}
 8012908:	58000c00 	.word	0x58000c00

0801290c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 801290c:	b580      	push	{r7, lr}
 801290e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8012910:	2101      	movs	r1, #1
 8012912:	4802      	ldr	r0, [pc, #8]	; (801291c <HW_IPCC_BLE_SendCmd+0x10>)
 8012914:	f7ff ff1a 	bl	801274c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8012918:	bf00      	nop
}
 801291a:	bd80      	pop	{r7, pc}
 801291c:	58000c00 	.word	0x58000c00

08012920 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8012920:	b580      	push	{r7, lr}
 8012922:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8012924:	f7fe f8ae 	bl	8010a84 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8012928:	2101      	movs	r1, #1
 801292a:	4802      	ldr	r0, [pc, #8]	; (8012934 <HW_IPCC_BLE_EvtHandler+0x14>)
 801292c:	f7ff ff00 	bl	8012730 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012930:	bf00      	nop
}
 8012932:	bd80      	pop	{r7, pc}
 8012934:	58000c00 	.word	0x58000c00

08012938 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8012938:	b580      	push	{r7, lr}
 801293a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 801293c:	2120      	movs	r1, #32
 801293e:	4803      	ldr	r0, [pc, #12]	; (801294c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8012940:	f7ff fed2 	bl	80126e8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8012944:	f7fe f8ce 	bl	8010ae4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8012948:	bf00      	nop
}
 801294a:	bd80      	pop	{r7, pc}
 801294c:	58000c00 	.word	0x58000c00

08012950 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8012950:	b580      	push	{r7, lr}
 8012952:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8012954:	2102      	movs	r1, #2
 8012956:	4802      	ldr	r0, [pc, #8]	; (8012960 <HW_IPCC_SYS_Init+0x10>)
 8012958:	f7ff fed8 	bl	801270c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801295c:	bf00      	nop
}
 801295e:	bd80      	pop	{r7, pc}
 8012960:	58000c00 	.word	0x58000c00

08012964 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8012964:	b580      	push	{r7, lr}
 8012966:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012968:	2102      	movs	r1, #2
 801296a:	4804      	ldr	r0, [pc, #16]	; (801297c <HW_IPCC_SYS_SendCmd+0x18>)
 801296c:	f7ff feee 	bl	801274c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012970:	2102      	movs	r1, #2
 8012972:	4802      	ldr	r0, [pc, #8]	; (801297c <HW_IPCC_SYS_SendCmd+0x18>)
 8012974:	f7ff fea5 	bl	80126c2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8012978:	bf00      	nop
}
 801297a:	bd80      	pop	{r7, pc}
 801297c:	58000c00 	.word	0x58000c00

08012980 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8012980:	b580      	push	{r7, lr}
 8012982:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012984:	2102      	movs	r1, #2
 8012986:	4803      	ldr	r0, [pc, #12]	; (8012994 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8012988:	f7ff feae 	bl	80126e8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 801298c:	f7fe f8fa 	bl	8010b84 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8012990:	bf00      	nop
}
 8012992:	bd80      	pop	{r7, pc}
 8012994:	58000c00 	.word	0x58000c00

08012998 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8012998:	b580      	push	{r7, lr}
 801299a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 801299c:	f7fe f908 	bl	8010bb0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80129a0:	2102      	movs	r1, #2
 80129a2:	4802      	ldr	r0, [pc, #8]	; (80129ac <HW_IPCC_SYS_EvtHandler+0x14>)
 80129a4:	f7ff fec4 	bl	8012730 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80129a8:	bf00      	nop
}
 80129aa:	bd80      	pop	{r7, pc}
 80129ac:	58000c00 	.word	0x58000c00

080129b0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b082      	sub	sp, #8
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80129b8:	2108      	movs	r1, #8
 80129ba:	480c      	ldr	r0, [pc, #48]	; (80129ec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80129bc:	f7ff fed5 	bl	801276a <LL_C1_IPCC_IsActiveFlag_CHx>
 80129c0:	4603      	mov	r3, r0
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d007      	beq.n	80129d6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80129c6:	4a0a      	ldr	r2, [pc, #40]	; (80129f0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80129cc:	2108      	movs	r1, #8
 80129ce:	4807      	ldr	r0, [pc, #28]	; (80129ec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80129d0:	f7ff fe77 	bl	80126c2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80129d4:	e006      	b.n	80129e4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80129da:	2108      	movs	r1, #8
 80129dc:	4803      	ldr	r0, [pc, #12]	; (80129ec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80129de:	f7ff feb5 	bl	801274c <LL_C1_IPCC_SetFlag_CHx>
  return;
 80129e2:	bf00      	nop
}
 80129e4:	3708      	adds	r7, #8
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}
 80129ea:	bf00      	nop
 80129ec:	58000c00 	.word	0x58000c00
 80129f0:	20000acc 	.word	0x20000acc

080129f4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80129f8:	2108      	movs	r1, #8
 80129fa:	4806      	ldr	r0, [pc, #24]	; (8012a14 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80129fc:	f7ff fe74 	bl	80126e8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8012a00:	4b05      	ldr	r3, [pc, #20]	; (8012a18 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012a06:	2108      	movs	r1, #8
 8012a08:	4802      	ldr	r0, [pc, #8]	; (8012a14 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8012a0a:	f7ff fe9f 	bl	801274c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8012a0e:	bf00      	nop
}
 8012a10:	bd80      	pop	{r7, pc}
 8012a12:	bf00      	nop
 8012a14:	58000c00 	.word	0x58000c00
 8012a18:	20000acc 	.word	0x20000acc

08012a1c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8012a20:	2108      	movs	r1, #8
 8012a22:	4802      	ldr	r0, [pc, #8]	; (8012a2c <HW_IPCC_TRACES_Init+0x10>)
 8012a24:	f7ff fe72 	bl	801270c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012a28:	bf00      	nop
}
 8012a2a:	bd80      	pop	{r7, pc}
 8012a2c:	58000c00 	.word	0x58000c00

08012a30 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8012a34:	f7fe f964 	bl	8010d00 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8012a38:	2108      	movs	r1, #8
 8012a3a:	4802      	ldr	r0, [pc, #8]	; (8012a44 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8012a3c:	f7ff fe78 	bl	8012730 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012a40:	bf00      	nop
}
 8012a42:	bd80      	pop	{r7, pc}
 8012a44:	58000c00 	.word	0x58000c00

08012a48 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	4912      	ldr	r1, [pc, #72]	; (8012a98 <MX_USB_Device_Init+0x50>)
 8012a50:	4812      	ldr	r0, [pc, #72]	; (8012a9c <MX_USB_Device_Init+0x54>)
 8012a52:	f7fa ff29 	bl	800d8a8 <USBD_Init>
 8012a56:	4603      	mov	r3, r0
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d001      	beq.n	8012a60 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8012a5c:	f7ef f96a 	bl	8001d34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8012a60:	490f      	ldr	r1, [pc, #60]	; (8012aa0 <MX_USB_Device_Init+0x58>)
 8012a62:	480e      	ldr	r0, [pc, #56]	; (8012a9c <MX_USB_Device_Init+0x54>)
 8012a64:	f7fa ff50 	bl	800d908 <USBD_RegisterClass>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d001      	beq.n	8012a72 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8012a6e:	f7ef f961 	bl	8001d34 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8012a72:	490c      	ldr	r1, [pc, #48]	; (8012aa4 <MX_USB_Device_Init+0x5c>)
 8012a74:	4809      	ldr	r0, [pc, #36]	; (8012a9c <MX_USB_Device_Init+0x54>)
 8012a76:	f7fa fe87 	bl	800d788 <USBD_CDC_RegisterInterface>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d001      	beq.n	8012a84 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8012a80:	f7ef f958 	bl	8001d34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8012a84:	4805      	ldr	r0, [pc, #20]	; (8012a9c <MX_USB_Device_Init+0x54>)
 8012a86:	f7fa ff75 	bl	800d974 <USBD_Start>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d001      	beq.n	8012a94 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8012a90:	f7ef f950 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8012a94:	bf00      	nop
 8012a96:	bd80      	pop	{r7, pc}
 8012a98:	200000f0 	.word	0x200000f0
 8012a9c:	20000ad0 	.word	0x20000ad0
 8012aa0:	20000024 	.word	0x20000024
 8012aa4:	200000dc 	.word	0x200000dc

08012aa8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012aac:	2200      	movs	r2, #0
 8012aae:	4905      	ldr	r1, [pc, #20]	; (8012ac4 <CDC_Init_FS+0x1c>)
 8012ab0:	4805      	ldr	r0, [pc, #20]	; (8012ac8 <CDC_Init_FS+0x20>)
 8012ab2:	f7fa fe83 	bl	800d7bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012ab6:	4905      	ldr	r1, [pc, #20]	; (8012acc <CDC_Init_FS+0x24>)
 8012ab8:	4803      	ldr	r0, [pc, #12]	; (8012ac8 <CDC_Init_FS+0x20>)
 8012aba:	f7fa fea1 	bl	800d800 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012abe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	bd80      	pop	{r7, pc}
 8012ac4:	200015ac 	.word	0x200015ac
 8012ac8:	20000ad0 	.word	0x20000ad0
 8012acc:	20000dac 	.word	0x20000dac

08012ad0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012ad0:	b480      	push	{r7}
 8012ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012ad4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ade:	4770      	bx	lr

08012ae0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012ae0:	b480      	push	{r7}
 8012ae2:	b083      	sub	sp, #12
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	6039      	str	r1, [r7, #0]
 8012aea:	71fb      	strb	r3, [r7, #7]
 8012aec:	4613      	mov	r3, r2
 8012aee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012af0:	79fb      	ldrb	r3, [r7, #7]
 8012af2:	2b23      	cmp	r3, #35	; 0x23
 8012af4:	d84a      	bhi.n	8012b8c <CDC_Control_FS+0xac>
 8012af6:	a201      	add	r2, pc, #4	; (adr r2, 8012afc <CDC_Control_FS+0x1c>)
 8012af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012afc:	08012b8d 	.word	0x08012b8d
 8012b00:	08012b8d 	.word	0x08012b8d
 8012b04:	08012b8d 	.word	0x08012b8d
 8012b08:	08012b8d 	.word	0x08012b8d
 8012b0c:	08012b8d 	.word	0x08012b8d
 8012b10:	08012b8d 	.word	0x08012b8d
 8012b14:	08012b8d 	.word	0x08012b8d
 8012b18:	08012b8d 	.word	0x08012b8d
 8012b1c:	08012b8d 	.word	0x08012b8d
 8012b20:	08012b8d 	.word	0x08012b8d
 8012b24:	08012b8d 	.word	0x08012b8d
 8012b28:	08012b8d 	.word	0x08012b8d
 8012b2c:	08012b8d 	.word	0x08012b8d
 8012b30:	08012b8d 	.word	0x08012b8d
 8012b34:	08012b8d 	.word	0x08012b8d
 8012b38:	08012b8d 	.word	0x08012b8d
 8012b3c:	08012b8d 	.word	0x08012b8d
 8012b40:	08012b8d 	.word	0x08012b8d
 8012b44:	08012b8d 	.word	0x08012b8d
 8012b48:	08012b8d 	.word	0x08012b8d
 8012b4c:	08012b8d 	.word	0x08012b8d
 8012b50:	08012b8d 	.word	0x08012b8d
 8012b54:	08012b8d 	.word	0x08012b8d
 8012b58:	08012b8d 	.word	0x08012b8d
 8012b5c:	08012b8d 	.word	0x08012b8d
 8012b60:	08012b8d 	.word	0x08012b8d
 8012b64:	08012b8d 	.word	0x08012b8d
 8012b68:	08012b8d 	.word	0x08012b8d
 8012b6c:	08012b8d 	.word	0x08012b8d
 8012b70:	08012b8d 	.word	0x08012b8d
 8012b74:	08012b8d 	.word	0x08012b8d
 8012b78:	08012b8d 	.word	0x08012b8d
 8012b7c:	08012b8d 	.word	0x08012b8d
 8012b80:	08012b8d 	.word	0x08012b8d
 8012b84:	08012b8d 	.word	0x08012b8d
 8012b88:	08012b8d 	.word	0x08012b8d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012b8c:	bf00      	nop
  }

  return (USBD_OK);
 8012b8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012b90:	4618      	mov	r0, r3
 8012b92:	370c      	adds	r7, #12
 8012b94:	46bd      	mov	sp, r7
 8012b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9a:	4770      	bx	lr

08012b9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b082      	sub	sp, #8
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
 8012ba4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012ba6:	6879      	ldr	r1, [r7, #4]
 8012ba8:	4805      	ldr	r0, [pc, #20]	; (8012bc0 <CDC_Receive_FS+0x24>)
 8012baa:	f7fa fe29 	bl	800d800 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012bae:	4804      	ldr	r0, [pc, #16]	; (8012bc0 <CDC_Receive_FS+0x24>)
 8012bb0:	f7fa fe44 	bl	800d83c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012bb4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	3708      	adds	r7, #8
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bd80      	pop	{r7, pc}
 8012bbe:	bf00      	nop
 8012bc0:	20000ad0 	.word	0x20000ad0

08012bc4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012bc4:	b480      	push	{r7}
 8012bc6:	b087      	sub	sp, #28
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	60f8      	str	r0, [r7, #12]
 8012bcc:	60b9      	str	r1, [r7, #8]
 8012bce:	4613      	mov	r3, r2
 8012bd0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012bd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012bda:	4618      	mov	r0, r3
 8012bdc:	371c      	adds	r7, #28
 8012bde:	46bd      	mov	sp, r7
 8012be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be4:	4770      	bx	lr
	...

08012be8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012be8:	b480      	push	{r7}
 8012bea:	b083      	sub	sp, #12
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	4603      	mov	r3, r0
 8012bf0:	6039      	str	r1, [r7, #0]
 8012bf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8012bf4:	683b      	ldr	r3, [r7, #0]
 8012bf6:	2212      	movs	r2, #18
 8012bf8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8012bfa:	4b03      	ldr	r3, [pc, #12]	; (8012c08 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	370c      	adds	r7, #12
 8012c00:	46bd      	mov	sp, r7
 8012c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c06:	4770      	bx	lr
 8012c08:	20000110 	.word	0x20000110

08012c0c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c0c:	b480      	push	{r7}
 8012c0e:	b083      	sub	sp, #12
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	4603      	mov	r3, r0
 8012c14:	6039      	str	r1, [r7, #0]
 8012c16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012c18:	683b      	ldr	r3, [r7, #0]
 8012c1a:	2204      	movs	r2, #4
 8012c1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012c1e:	4b03      	ldr	r3, [pc, #12]	; (8012c2c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8012c20:	4618      	mov	r0, r3
 8012c22:	370c      	adds	r7, #12
 8012c24:	46bd      	mov	sp, r7
 8012c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2a:	4770      	bx	lr
 8012c2c:	20000124 	.word	0x20000124

08012c30 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b082      	sub	sp, #8
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	4603      	mov	r3, r0
 8012c38:	6039      	str	r1, [r7, #0]
 8012c3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012c3c:	79fb      	ldrb	r3, [r7, #7]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d105      	bne.n	8012c4e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012c42:	683a      	ldr	r2, [r7, #0]
 8012c44:	4907      	ldr	r1, [pc, #28]	; (8012c64 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012c46:	4808      	ldr	r0, [pc, #32]	; (8012c68 <USBD_CDC_ProductStrDescriptor+0x38>)
 8012c48:	f7fb ffde 	bl	800ec08 <USBD_GetString>
 8012c4c:	e004      	b.n	8012c58 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012c4e:	683a      	ldr	r2, [r7, #0]
 8012c50:	4904      	ldr	r1, [pc, #16]	; (8012c64 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012c52:	4805      	ldr	r0, [pc, #20]	; (8012c68 <USBD_CDC_ProductStrDescriptor+0x38>)
 8012c54:	f7fb ffd8 	bl	800ec08 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012c58:	4b02      	ldr	r3, [pc, #8]	; (8012c64 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	3708      	adds	r7, #8
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}
 8012c62:	bf00      	nop
 8012c64:	20001dac 	.word	0x20001dac
 8012c68:	080167e0 	.word	0x080167e0

08012c6c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b082      	sub	sp, #8
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	4603      	mov	r3, r0
 8012c74:	6039      	str	r1, [r7, #0]
 8012c76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012c78:	683a      	ldr	r2, [r7, #0]
 8012c7a:	4904      	ldr	r1, [pc, #16]	; (8012c8c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8012c7c:	4804      	ldr	r0, [pc, #16]	; (8012c90 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8012c7e:	f7fb ffc3 	bl	800ec08 <USBD_GetString>
  return USBD_StrDesc;
 8012c82:	4b02      	ldr	r3, [pc, #8]	; (8012c8c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8012c84:	4618      	mov	r0, r3
 8012c86:	3708      	adds	r7, #8
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd80      	pop	{r7, pc}
 8012c8c:	20001dac 	.word	0x20001dac
 8012c90:	080167ec 	.word	0x080167ec

08012c94 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b082      	sub	sp, #8
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	6039      	str	r1, [r7, #0]
 8012c9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012ca0:	683b      	ldr	r3, [r7, #0]
 8012ca2:	221a      	movs	r2, #26
 8012ca4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012ca6:	f000 f843 	bl	8012d30 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8012caa:	4b02      	ldr	r3, [pc, #8]	; (8012cb4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8012cac:	4618      	mov	r0, r3
 8012cae:	3708      	adds	r7, #8
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	bd80      	pop	{r7, pc}
 8012cb4:	20000128 	.word	0x20000128

08012cb8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b082      	sub	sp, #8
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	6039      	str	r1, [r7, #0]
 8012cc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012cc4:	79fb      	ldrb	r3, [r7, #7]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d105      	bne.n	8012cd6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012cca:	683a      	ldr	r2, [r7, #0]
 8012ccc:	4907      	ldr	r1, [pc, #28]	; (8012cec <USBD_CDC_ConfigStrDescriptor+0x34>)
 8012cce:	4808      	ldr	r0, [pc, #32]	; (8012cf0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8012cd0:	f7fb ff9a 	bl	800ec08 <USBD_GetString>
 8012cd4:	e004      	b.n	8012ce0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012cd6:	683a      	ldr	r2, [r7, #0]
 8012cd8:	4904      	ldr	r1, [pc, #16]	; (8012cec <USBD_CDC_ConfigStrDescriptor+0x34>)
 8012cda:	4805      	ldr	r0, [pc, #20]	; (8012cf0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8012cdc:	f7fb ff94 	bl	800ec08 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012ce0:	4b02      	ldr	r3, [pc, #8]	; (8012cec <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	3708      	adds	r7, #8
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	bd80      	pop	{r7, pc}
 8012cea:	bf00      	nop
 8012cec:	20001dac 	.word	0x20001dac
 8012cf0:	080167f4 	.word	0x080167f4

08012cf4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b082      	sub	sp, #8
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	6039      	str	r1, [r7, #0]
 8012cfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012d00:	79fb      	ldrb	r3, [r7, #7]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d105      	bne.n	8012d12 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012d06:	683a      	ldr	r2, [r7, #0]
 8012d08:	4907      	ldr	r1, [pc, #28]	; (8012d28 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8012d0a:	4808      	ldr	r0, [pc, #32]	; (8012d2c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8012d0c:	f7fb ff7c 	bl	800ec08 <USBD_GetString>
 8012d10:	e004      	b.n	8012d1c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012d12:	683a      	ldr	r2, [r7, #0]
 8012d14:	4904      	ldr	r1, [pc, #16]	; (8012d28 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8012d16:	4805      	ldr	r0, [pc, #20]	; (8012d2c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8012d18:	f7fb ff76 	bl	800ec08 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012d1c:	4b02      	ldr	r3, [pc, #8]	; (8012d28 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8012d1e:	4618      	mov	r0, r3
 8012d20:	3708      	adds	r7, #8
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bd80      	pop	{r7, pc}
 8012d26:	bf00      	nop
 8012d28:	20001dac 	.word	0x20001dac
 8012d2c:	08016800 	.word	0x08016800

08012d30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b084      	sub	sp, #16
 8012d34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012d36:	4b0f      	ldr	r3, [pc, #60]	; (8012d74 <Get_SerialNum+0x44>)
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012d3c:	4b0e      	ldr	r3, [pc, #56]	; (8012d78 <Get_SerialNum+0x48>)
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012d42:	4b0e      	ldr	r3, [pc, #56]	; (8012d7c <Get_SerialNum+0x4c>)
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012d48:	68fa      	ldr	r2, [r7, #12]
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	4413      	add	r3, r2
 8012d4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d009      	beq.n	8012d6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012d56:	2208      	movs	r2, #8
 8012d58:	4909      	ldr	r1, [pc, #36]	; (8012d80 <Get_SerialNum+0x50>)
 8012d5a:	68f8      	ldr	r0, [r7, #12]
 8012d5c:	f000 f814 	bl	8012d88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012d60:	2204      	movs	r2, #4
 8012d62:	4908      	ldr	r1, [pc, #32]	; (8012d84 <Get_SerialNum+0x54>)
 8012d64:	68b8      	ldr	r0, [r7, #8]
 8012d66:	f000 f80f 	bl	8012d88 <IntToUnicode>
  }
}
 8012d6a:	bf00      	nop
 8012d6c:	3710      	adds	r7, #16
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	bd80      	pop	{r7, pc}
 8012d72:	bf00      	nop
 8012d74:	1fff7590 	.word	0x1fff7590
 8012d78:	1fff7594 	.word	0x1fff7594
 8012d7c:	1fff7598 	.word	0x1fff7598
 8012d80:	2000012a 	.word	0x2000012a
 8012d84:	2000013a 	.word	0x2000013a

08012d88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012d88:	b480      	push	{r7}
 8012d8a:	b087      	sub	sp, #28
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	60f8      	str	r0, [r7, #12]
 8012d90:	60b9      	str	r1, [r7, #8]
 8012d92:	4613      	mov	r3, r2
 8012d94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012d96:	2300      	movs	r3, #0
 8012d98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	75fb      	strb	r3, [r7, #23]
 8012d9e:	e027      	b.n	8012df0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	0f1b      	lsrs	r3, r3, #28
 8012da4:	2b09      	cmp	r3, #9
 8012da6:	d80b      	bhi.n	8012dc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	0f1b      	lsrs	r3, r3, #28
 8012dac:	b2da      	uxtb	r2, r3
 8012dae:	7dfb      	ldrb	r3, [r7, #23]
 8012db0:	005b      	lsls	r3, r3, #1
 8012db2:	4619      	mov	r1, r3
 8012db4:	68bb      	ldr	r3, [r7, #8]
 8012db6:	440b      	add	r3, r1
 8012db8:	3230      	adds	r2, #48	; 0x30
 8012dba:	b2d2      	uxtb	r2, r2
 8012dbc:	701a      	strb	r2, [r3, #0]
 8012dbe:	e00a      	b.n	8012dd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	0f1b      	lsrs	r3, r3, #28
 8012dc4:	b2da      	uxtb	r2, r3
 8012dc6:	7dfb      	ldrb	r3, [r7, #23]
 8012dc8:	005b      	lsls	r3, r3, #1
 8012dca:	4619      	mov	r1, r3
 8012dcc:	68bb      	ldr	r3, [r7, #8]
 8012dce:	440b      	add	r3, r1
 8012dd0:	3237      	adds	r2, #55	; 0x37
 8012dd2:	b2d2      	uxtb	r2, r2
 8012dd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	011b      	lsls	r3, r3, #4
 8012dda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012ddc:	7dfb      	ldrb	r3, [r7, #23]
 8012dde:	005b      	lsls	r3, r3, #1
 8012de0:	3301      	adds	r3, #1
 8012de2:	68ba      	ldr	r2, [r7, #8]
 8012de4:	4413      	add	r3, r2
 8012de6:	2200      	movs	r2, #0
 8012de8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012dea:	7dfb      	ldrb	r3, [r7, #23]
 8012dec:	3301      	adds	r3, #1
 8012dee:	75fb      	strb	r3, [r7, #23]
 8012df0:	7dfa      	ldrb	r2, [r7, #23]
 8012df2:	79fb      	ldrb	r3, [r7, #7]
 8012df4:	429a      	cmp	r2, r3
 8012df6:	d3d3      	bcc.n	8012da0 <IntToUnicode+0x18>
  }
}
 8012df8:	bf00      	nop
 8012dfa:	bf00      	nop
 8012dfc:	371c      	adds	r7, #28
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e04:	4770      	bx	lr

08012e06 <LL_AHB2_GRP1_EnableClock>:
{
 8012e06:	b480      	push	{r7}
 8012e08:	b085      	sub	sp, #20
 8012e0a:	af00      	add	r7, sp, #0
 8012e0c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8012e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012e12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012e14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	4313      	orrs	r3, r2
 8012e1c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8012e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012e22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	4013      	ands	r3, r2
 8012e28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012e2a:	68fb      	ldr	r3, [r7, #12]
}
 8012e2c:	bf00      	nop
 8012e2e:	3714      	adds	r7, #20
 8012e30:	46bd      	mov	sp, r7
 8012e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e36:	4770      	bx	lr

08012e38 <LL_APB1_GRP1_EnableClock>:
{
 8012e38:	b480      	push	{r7}
 8012e3a:	b085      	sub	sp, #20
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8012e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012e44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012e46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	4313      	orrs	r3, r2
 8012e4e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8012e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012e54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	4013      	ands	r3, r2
 8012e5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012e5c:	68fb      	ldr	r3, [r7, #12]
}
 8012e5e:	bf00      	nop
 8012e60:	3714      	adds	r7, #20
 8012e62:	46bd      	mov	sp, r7
 8012e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e68:	4770      	bx	lr
	...

08012e6c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b09c      	sub	sp, #112	; 0x70
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012e74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012e78:	2200      	movs	r2, #0
 8012e7a:	601a      	str	r2, [r3, #0]
 8012e7c:	605a      	str	r2, [r3, #4]
 8012e7e:	609a      	str	r2, [r3, #8]
 8012e80:	60da      	str	r2, [r3, #12]
 8012e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012e84:	f107 030c 	add.w	r3, r7, #12
 8012e88:	2250      	movs	r2, #80	; 0x50
 8012e8a:	2100      	movs	r1, #0
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f000 fe23 	bl	8013ad8 <memset>
  if(pcdHandle->Instance==USB)
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	4a23      	ldr	r2, [pc, #140]	; (8012f24 <HAL_PCD_MspInit+0xb8>)
 8012e98:	4293      	cmp	r3, r2
 8012e9a:	d13e      	bne.n	8012f1a <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012e9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012ea0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8012ea2:	2318      	movs	r3, #24
 8012ea4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8012ea6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012eaa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8012eac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012eb0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV8;
 8012eb2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8012eb6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8012eb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8012ebc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8012ebe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8012ec2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012ec4:	f107 030c 	add.w	r3, r7, #12
 8012ec8:	4618      	mov	r0, r3
 8012eca:	f7f6 f8b9 	bl	8009040 <HAL_RCCEx_PeriphCLKConfig>
 8012ece:	4603      	mov	r3, r0
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d001      	beq.n	8012ed8 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8012ed4:	f7ee ff2e 	bl	8001d34 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012ed8:	2001      	movs	r0, #1
 8012eda:	f7ff ff94 	bl	8012e06 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012ede:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012ee4:	2302      	movs	r3, #2
 8012ee6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ee8:	2300      	movs	r3, #0
 8012eea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012eec:	2300      	movs	r3, #0
 8012eee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8012ef0:	230a      	movs	r3, #10
 8012ef2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012ef4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012ef8:	4619      	mov	r1, r3
 8012efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012efe:	f7f1 fdc7 	bl	8004a90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8012f02:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8012f06:	f7ff ff97 	bl	8012e38 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	2100      	movs	r1, #0
 8012f0e:	2014      	movs	r0, #20
 8012f10:	f7f1 fa99 	bl	8004446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8012f14:	2014      	movs	r0, #20
 8012f16:	f7f1 fab0 	bl	800447a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8012f1a:	bf00      	nop
 8012f1c:	3770      	adds	r7, #112	; 0x70
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bd80      	pop	{r7, pc}
 8012f22:	bf00      	nop
 8012f24:	40006800 	.word	0x40006800

08012f28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b082      	sub	sp, #8
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8012f3c:	4619      	mov	r1, r3
 8012f3e:	4610      	mov	r0, r2
 8012f40:	f7fa fd65 	bl	800da0e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8012f44:	bf00      	nop
 8012f46:	3708      	adds	r7, #8
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	bd80      	pop	{r7, pc}

08012f4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	b082      	sub	sp, #8
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
 8012f54:	460b      	mov	r3, r1
 8012f56:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8012f5e:	78fa      	ldrb	r2, [r7, #3]
 8012f60:	6879      	ldr	r1, [r7, #4]
 8012f62:	4613      	mov	r3, r2
 8012f64:	009b      	lsls	r3, r3, #2
 8012f66:	4413      	add	r3, r2
 8012f68:	00db      	lsls	r3, r3, #3
 8012f6a:	440b      	add	r3, r1
 8012f6c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8012f70:	681a      	ldr	r2, [r3, #0]
 8012f72:	78fb      	ldrb	r3, [r7, #3]
 8012f74:	4619      	mov	r1, r3
 8012f76:	f7fa fd9f 	bl	800dab8 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8012f7a:	bf00      	nop
 8012f7c:	3708      	adds	r7, #8
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	bd80      	pop	{r7, pc}

08012f82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f82:	b580      	push	{r7, lr}
 8012f84:	b082      	sub	sp, #8
 8012f86:	af00      	add	r7, sp, #0
 8012f88:	6078      	str	r0, [r7, #4]
 8012f8a:	460b      	mov	r3, r1
 8012f8c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8012f94:	78fa      	ldrb	r2, [r7, #3]
 8012f96:	6879      	ldr	r1, [r7, #4]
 8012f98:	4613      	mov	r3, r2
 8012f9a:	009b      	lsls	r3, r3, #2
 8012f9c:	4413      	add	r3, r2
 8012f9e:	00db      	lsls	r3, r3, #3
 8012fa0:	440b      	add	r3, r1
 8012fa2:	333c      	adds	r3, #60	; 0x3c
 8012fa4:	681a      	ldr	r2, [r3, #0]
 8012fa6:	78fb      	ldrb	r3, [r7, #3]
 8012fa8:	4619      	mov	r1, r3
 8012faa:	f7fa fe38 	bl	800dc1e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8012fae:	bf00      	nop
 8012fb0:	3708      	adds	r7, #8
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}

08012fb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fb6:	b580      	push	{r7, lr}
 8012fb8:	b082      	sub	sp, #8
 8012fba:	af00      	add	r7, sp, #0
 8012fbc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f7fa ff72 	bl	800deae <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8012fca:	bf00      	nop
 8012fcc:	3708      	adds	r7, #8
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	bd80      	pop	{r7, pc}

08012fd2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fd2:	b580      	push	{r7, lr}
 8012fd4:	b084      	sub	sp, #16
 8012fd6:	af00      	add	r7, sp, #0
 8012fd8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012fda:	2301      	movs	r3, #1
 8012fdc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	689b      	ldr	r3, [r3, #8]
 8012fe2:	2b02      	cmp	r3, #2
 8012fe4:	d001      	beq.n	8012fea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012fe6:	f7ee fea5 	bl	8001d34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8012ff0:	7bfa      	ldrb	r2, [r7, #15]
 8012ff2:	4611      	mov	r1, r2
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f7fa ff16 	bl	800de26 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8013000:	4618      	mov	r0, r3
 8013002:	f7fa febe 	bl	800dd82 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8013006:	bf00      	nop
 8013008:	3710      	adds	r7, #16
 801300a:	46bd      	mov	sp, r7
 801300c:	bd80      	pop	{r7, pc}
	...

08013010 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b082      	sub	sp, #8
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801301e:	4618      	mov	r0, r3
 8013020:	f7fa ff11 	bl	800de46 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	699b      	ldr	r3, [r3, #24]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d005      	beq.n	8013038 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801302c:	4b04      	ldr	r3, [pc, #16]	; (8013040 <HAL_PCD_SuspendCallback+0x30>)
 801302e:	691b      	ldr	r3, [r3, #16]
 8013030:	4a03      	ldr	r2, [pc, #12]	; (8013040 <HAL_PCD_SuspendCallback+0x30>)
 8013032:	f043 0306 	orr.w	r3, r3, #6
 8013036:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8013038:	bf00      	nop
 801303a:	3708      	adds	r7, #8
 801303c:	46bd      	mov	sp, r7
 801303e:	bd80      	pop	{r7, pc}
 8013040:	e000ed00 	.word	0xe000ed00

08013044 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b082      	sub	sp, #8
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	699b      	ldr	r3, [r3, #24]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d007      	beq.n	8013064 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013054:	4b08      	ldr	r3, [pc, #32]	; (8013078 <HAL_PCD_ResumeCallback+0x34>)
 8013056:	691b      	ldr	r3, [r3, #16]
 8013058:	4a07      	ldr	r2, [pc, #28]	; (8013078 <HAL_PCD_ResumeCallback+0x34>)
 801305a:	f023 0306 	bic.w	r3, r3, #6
 801305e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8013060:	f000 f9fc 	bl	801345c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801306a:	4618      	mov	r0, r3
 801306c:	f7fa ff07 	bl	800de7e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8013070:	bf00      	nop
 8013072:	3708      	adds	r7, #8
 8013074:	46bd      	mov	sp, r7
 8013076:	bd80      	pop	{r7, pc}
 8013078:	e000ed00 	.word	0xe000ed00

0801307c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b082      	sub	sp, #8
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8013084:	4a2c      	ldr	r2, [pc, #176]	; (8013138 <USBD_LL_Init+0xbc>)
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	4a2a      	ldr	r2, [pc, #168]	; (8013138 <USBD_LL_Init+0xbc>)
 8013090:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8013094:	f7f4 fcd2 	bl	8007a3c <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8013098:	4b27      	ldr	r3, [pc, #156]	; (8013138 <USBD_LL_Init+0xbc>)
 801309a:	4a28      	ldr	r2, [pc, #160]	; (801313c <USBD_LL_Init+0xc0>)
 801309c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801309e:	4b26      	ldr	r3, [pc, #152]	; (8013138 <USBD_LL_Init+0xbc>)
 80130a0:	2208      	movs	r2, #8
 80130a2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80130a4:	4b24      	ldr	r3, [pc, #144]	; (8013138 <USBD_LL_Init+0xbc>)
 80130a6:	2202      	movs	r2, #2
 80130a8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80130aa:	4b23      	ldr	r3, [pc, #140]	; (8013138 <USBD_LL_Init+0xbc>)
 80130ac:	2202      	movs	r2, #2
 80130ae:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80130b0:	4b21      	ldr	r3, [pc, #132]	; (8013138 <USBD_LL_Init+0xbc>)
 80130b2:	2200      	movs	r2, #0
 80130b4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80130b6:	4b20      	ldr	r3, [pc, #128]	; (8013138 <USBD_LL_Init+0xbc>)
 80130b8:	2200      	movs	r2, #0
 80130ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80130bc:	4b1e      	ldr	r3, [pc, #120]	; (8013138 <USBD_LL_Init+0xbc>)
 80130be:	2200      	movs	r2, #0
 80130c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80130c2:	4b1d      	ldr	r3, [pc, #116]	; (8013138 <USBD_LL_Init+0xbc>)
 80130c4:	2200      	movs	r2, #0
 80130c6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80130c8:	481b      	ldr	r0, [pc, #108]	; (8013138 <USBD_LL_Init+0xbc>)
 80130ca:	f7f2 ff55 	bl	8005f78 <HAL_PCD_Init>
 80130ce:	4603      	mov	r3, r0
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d001      	beq.n	80130d8 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80130d4:	f7ee fe2e 	bl	8001d34 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80130de:	2318      	movs	r3, #24
 80130e0:	2200      	movs	r2, #0
 80130e2:	2100      	movs	r1, #0
 80130e4:	f7f4 fc1e 	bl	8007924 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80130ee:	2358      	movs	r3, #88	; 0x58
 80130f0:	2200      	movs	r2, #0
 80130f2:	2180      	movs	r1, #128	; 0x80
 80130f4:	f7f4 fc16 	bl	8007924 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80130fe:	23c0      	movs	r3, #192	; 0xc0
 8013100:	2200      	movs	r2, #0
 8013102:	2181      	movs	r1, #129	; 0x81
 8013104:	f7f4 fc0e 	bl	8007924 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801310e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8013112:	2200      	movs	r2, #0
 8013114:	2101      	movs	r1, #1
 8013116:	f7f4 fc05 	bl	8007924 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013120:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013124:	2200      	movs	r2, #0
 8013126:	2182      	movs	r1, #130	; 0x82
 8013128:	f7f4 fbfc 	bl	8007924 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801312c:	2300      	movs	r3, #0
}
 801312e:	4618      	mov	r0, r3
 8013130:	3708      	adds	r7, #8
 8013132:	46bd      	mov	sp, r7
 8013134:	bd80      	pop	{r7, pc}
 8013136:	bf00      	nop
 8013138:	20001fac 	.word	0x20001fac
 801313c:	40006800 	.word	0x40006800

08013140 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b084      	sub	sp, #16
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013148:	2300      	movs	r3, #0
 801314a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801314c:	2300      	movs	r3, #0
 801314e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013156:	4618      	mov	r0, r3
 8013158:	f7f2 ffe7 	bl	800612a <HAL_PCD_Start>
 801315c:	4603      	mov	r3, r0
 801315e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013160:	7bfb      	ldrb	r3, [r7, #15]
 8013162:	4618      	mov	r0, r3
 8013164:	f000 f980 	bl	8013468 <USBD_Get_USB_Status>
 8013168:	4603      	mov	r3, r0
 801316a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801316c:	7bbb      	ldrb	r3, [r7, #14]
}
 801316e:	4618      	mov	r0, r3
 8013170:	3710      	adds	r7, #16
 8013172:	46bd      	mov	sp, r7
 8013174:	bd80      	pop	{r7, pc}

08013176 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013176:	b580      	push	{r7, lr}
 8013178:	b084      	sub	sp, #16
 801317a:	af00      	add	r7, sp, #0
 801317c:	6078      	str	r0, [r7, #4]
 801317e:	4608      	mov	r0, r1
 8013180:	4611      	mov	r1, r2
 8013182:	461a      	mov	r2, r3
 8013184:	4603      	mov	r3, r0
 8013186:	70fb      	strb	r3, [r7, #3]
 8013188:	460b      	mov	r3, r1
 801318a:	70bb      	strb	r3, [r7, #2]
 801318c:	4613      	mov	r3, r2
 801318e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013190:	2300      	movs	r3, #0
 8013192:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013194:	2300      	movs	r3, #0
 8013196:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801319e:	78bb      	ldrb	r3, [r7, #2]
 80131a0:	883a      	ldrh	r2, [r7, #0]
 80131a2:	78f9      	ldrb	r1, [r7, #3]
 80131a4:	f7f3 f92f 	bl	8006406 <HAL_PCD_EP_Open>
 80131a8:	4603      	mov	r3, r0
 80131aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80131ac:	7bfb      	ldrb	r3, [r7, #15]
 80131ae:	4618      	mov	r0, r3
 80131b0:	f000 f95a 	bl	8013468 <USBD_Get_USB_Status>
 80131b4:	4603      	mov	r3, r0
 80131b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80131b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80131ba:	4618      	mov	r0, r3
 80131bc:	3710      	adds	r7, #16
 80131be:	46bd      	mov	sp, r7
 80131c0:	bd80      	pop	{r7, pc}

080131c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80131c2:	b580      	push	{r7, lr}
 80131c4:	b084      	sub	sp, #16
 80131c6:	af00      	add	r7, sp, #0
 80131c8:	6078      	str	r0, [r7, #4]
 80131ca:	460b      	mov	r3, r1
 80131cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80131ce:	2300      	movs	r3, #0
 80131d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80131d2:	2300      	movs	r3, #0
 80131d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80131dc:	78fa      	ldrb	r2, [r7, #3]
 80131de:	4611      	mov	r1, r2
 80131e0:	4618      	mov	r0, r3
 80131e2:	f7f3 f96d 	bl	80064c0 <HAL_PCD_EP_Close>
 80131e6:	4603      	mov	r3, r0
 80131e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80131ea:	7bfb      	ldrb	r3, [r7, #15]
 80131ec:	4618      	mov	r0, r3
 80131ee:	f000 f93b 	bl	8013468 <USBD_Get_USB_Status>
 80131f2:	4603      	mov	r3, r0
 80131f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80131f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80131f8:	4618      	mov	r0, r3
 80131fa:	3710      	adds	r7, #16
 80131fc:	46bd      	mov	sp, r7
 80131fe:	bd80      	pop	{r7, pc}

08013200 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b084      	sub	sp, #16
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
 8013208:	460b      	mov	r3, r1
 801320a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801320c:	2300      	movs	r3, #0
 801320e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013210:	2300      	movs	r3, #0
 8013212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801321a:	78fa      	ldrb	r2, [r7, #3]
 801321c:	4611      	mov	r1, r2
 801321e:	4618      	mov	r0, r3
 8013220:	f7f3 fa16 	bl	8006650 <HAL_PCD_EP_SetStall>
 8013224:	4603      	mov	r3, r0
 8013226:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013228:	7bfb      	ldrb	r3, [r7, #15]
 801322a:	4618      	mov	r0, r3
 801322c:	f000 f91c 	bl	8013468 <USBD_Get_USB_Status>
 8013230:	4603      	mov	r3, r0
 8013232:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013234:	7bbb      	ldrb	r3, [r7, #14]
}
 8013236:	4618      	mov	r0, r3
 8013238:	3710      	adds	r7, #16
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}

0801323e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801323e:	b580      	push	{r7, lr}
 8013240:	b084      	sub	sp, #16
 8013242:	af00      	add	r7, sp, #0
 8013244:	6078      	str	r0, [r7, #4]
 8013246:	460b      	mov	r3, r1
 8013248:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801324a:	2300      	movs	r3, #0
 801324c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801324e:	2300      	movs	r3, #0
 8013250:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013258:	78fa      	ldrb	r2, [r7, #3]
 801325a:	4611      	mov	r1, r2
 801325c:	4618      	mov	r0, r3
 801325e:	f7f3 fa49 	bl	80066f4 <HAL_PCD_EP_ClrStall>
 8013262:	4603      	mov	r3, r0
 8013264:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013266:	7bfb      	ldrb	r3, [r7, #15]
 8013268:	4618      	mov	r0, r3
 801326a:	f000 f8fd 	bl	8013468 <USBD_Get_USB_Status>
 801326e:	4603      	mov	r3, r0
 8013270:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013272:	7bbb      	ldrb	r3, [r7, #14]
}
 8013274:	4618      	mov	r0, r3
 8013276:	3710      	adds	r7, #16
 8013278:	46bd      	mov	sp, r7
 801327a:	bd80      	pop	{r7, pc}

0801327c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801327c:	b480      	push	{r7}
 801327e:	b085      	sub	sp, #20
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
 8013284:	460b      	mov	r3, r1
 8013286:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801328e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013290:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013294:	2b00      	cmp	r3, #0
 8013296:	da0c      	bge.n	80132b2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013298:	78fb      	ldrb	r3, [r7, #3]
 801329a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801329e:	68f9      	ldr	r1, [r7, #12]
 80132a0:	1c5a      	adds	r2, r3, #1
 80132a2:	4613      	mov	r3, r2
 80132a4:	009b      	lsls	r3, r3, #2
 80132a6:	4413      	add	r3, r2
 80132a8:	00db      	lsls	r3, r3, #3
 80132aa:	440b      	add	r3, r1
 80132ac:	3302      	adds	r3, #2
 80132ae:	781b      	ldrb	r3, [r3, #0]
 80132b0:	e00b      	b.n	80132ca <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80132b2:	78fb      	ldrb	r3, [r7, #3]
 80132b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80132b8:	68f9      	ldr	r1, [r7, #12]
 80132ba:	4613      	mov	r3, r2
 80132bc:	009b      	lsls	r3, r3, #2
 80132be:	4413      	add	r3, r2
 80132c0:	00db      	lsls	r3, r3, #3
 80132c2:	440b      	add	r3, r1
 80132c4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80132c8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80132ca:	4618      	mov	r0, r3
 80132cc:	3714      	adds	r7, #20
 80132ce:	46bd      	mov	sp, r7
 80132d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d4:	4770      	bx	lr

080132d6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80132d6:	b580      	push	{r7, lr}
 80132d8:	b084      	sub	sp, #16
 80132da:	af00      	add	r7, sp, #0
 80132dc:	6078      	str	r0, [r7, #4]
 80132de:	460b      	mov	r3, r1
 80132e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132e2:	2300      	movs	r3, #0
 80132e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132e6:	2300      	movs	r3, #0
 80132e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80132f0:	78fa      	ldrb	r2, [r7, #3]
 80132f2:	4611      	mov	r1, r2
 80132f4:	4618      	mov	r0, r3
 80132f6:	f7f3 f861 	bl	80063bc <HAL_PCD_SetAddress>
 80132fa:	4603      	mov	r3, r0
 80132fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80132fe:	7bfb      	ldrb	r3, [r7, #15]
 8013300:	4618      	mov	r0, r3
 8013302:	f000 f8b1 	bl	8013468 <USBD_Get_USB_Status>
 8013306:	4603      	mov	r3, r0
 8013308:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801330a:	7bbb      	ldrb	r3, [r7, #14]
}
 801330c:	4618      	mov	r0, r3
 801330e:	3710      	adds	r7, #16
 8013310:	46bd      	mov	sp, r7
 8013312:	bd80      	pop	{r7, pc}

08013314 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013314:	b580      	push	{r7, lr}
 8013316:	b086      	sub	sp, #24
 8013318:	af00      	add	r7, sp, #0
 801331a:	60f8      	str	r0, [r7, #12]
 801331c:	607a      	str	r2, [r7, #4]
 801331e:	603b      	str	r3, [r7, #0]
 8013320:	460b      	mov	r3, r1
 8013322:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013324:	2300      	movs	r3, #0
 8013326:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013328:	2300      	movs	r3, #0
 801332a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013332:	7af9      	ldrb	r1, [r7, #11]
 8013334:	683b      	ldr	r3, [r7, #0]
 8013336:	687a      	ldr	r2, [r7, #4]
 8013338:	f7f3 f953 	bl	80065e2 <HAL_PCD_EP_Transmit>
 801333c:	4603      	mov	r3, r0
 801333e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013340:	7dfb      	ldrb	r3, [r7, #23]
 8013342:	4618      	mov	r0, r3
 8013344:	f000 f890 	bl	8013468 <USBD_Get_USB_Status>
 8013348:	4603      	mov	r3, r0
 801334a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801334c:	7dbb      	ldrb	r3, [r7, #22]
}
 801334e:	4618      	mov	r0, r3
 8013350:	3718      	adds	r7, #24
 8013352:	46bd      	mov	sp, r7
 8013354:	bd80      	pop	{r7, pc}

08013356 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013356:	b580      	push	{r7, lr}
 8013358:	b086      	sub	sp, #24
 801335a:	af00      	add	r7, sp, #0
 801335c:	60f8      	str	r0, [r7, #12]
 801335e:	607a      	str	r2, [r7, #4]
 8013360:	603b      	str	r3, [r7, #0]
 8013362:	460b      	mov	r3, r1
 8013364:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013366:	2300      	movs	r3, #0
 8013368:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801336a:	2300      	movs	r3, #0
 801336c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013374:	7af9      	ldrb	r1, [r7, #11]
 8013376:	683b      	ldr	r3, [r7, #0]
 8013378:	687a      	ldr	r2, [r7, #4]
 801337a:	f7f3 f8e9 	bl	8006550 <HAL_PCD_EP_Receive>
 801337e:	4603      	mov	r3, r0
 8013380:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013382:	7dfb      	ldrb	r3, [r7, #23]
 8013384:	4618      	mov	r0, r3
 8013386:	f000 f86f 	bl	8013468 <USBD_Get_USB_Status>
 801338a:	4603      	mov	r3, r0
 801338c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801338e:	7dbb      	ldrb	r3, [r7, #22]
}
 8013390:	4618      	mov	r0, r3
 8013392:	3718      	adds	r7, #24
 8013394:	46bd      	mov	sp, r7
 8013396:	bd80      	pop	{r7, pc}

08013398 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b082      	sub	sp, #8
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
 80133a0:	460b      	mov	r3, r1
 80133a2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80133aa:	78fa      	ldrb	r2, [r7, #3]
 80133ac:	4611      	mov	r1, r2
 80133ae:	4618      	mov	r0, r3
 80133b0:	f7f3 f8ff 	bl	80065b2 <HAL_PCD_EP_GetRxCount>
 80133b4:	4603      	mov	r3, r0
}
 80133b6:	4618      	mov	r0, r3
 80133b8:	3708      	adds	r7, #8
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bd80      	pop	{r7, pc}
	...

080133c0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b082      	sub	sp, #8
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
 80133c8:	460b      	mov	r3, r1
 80133ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80133cc:	78fb      	ldrb	r3, [r7, #3]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d002      	beq.n	80133d8 <HAL_PCDEx_LPM_Callback+0x18>
 80133d2:	2b01      	cmp	r3, #1
 80133d4:	d013      	beq.n	80133fe <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80133d6:	e023      	b.n	8013420 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	699b      	ldr	r3, [r3, #24]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d007      	beq.n	80133f0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80133e0:	f000 f83c 	bl	801345c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80133e4:	4b10      	ldr	r3, [pc, #64]	; (8013428 <HAL_PCDEx_LPM_Callback+0x68>)
 80133e6:	691b      	ldr	r3, [r3, #16]
 80133e8:	4a0f      	ldr	r2, [pc, #60]	; (8013428 <HAL_PCDEx_LPM_Callback+0x68>)
 80133ea:	f023 0306 	bic.w	r3, r3, #6
 80133ee:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80133f6:	4618      	mov	r0, r3
 80133f8:	f7fa fd41 	bl	800de7e <USBD_LL_Resume>
    break;
 80133fc:	e010      	b.n	8013420 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8013404:	4618      	mov	r0, r3
 8013406:	f7fa fd1e 	bl	800de46 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	699b      	ldr	r3, [r3, #24]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d005      	beq.n	801341e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013412:	4b05      	ldr	r3, [pc, #20]	; (8013428 <HAL_PCDEx_LPM_Callback+0x68>)
 8013414:	691b      	ldr	r3, [r3, #16]
 8013416:	4a04      	ldr	r2, [pc, #16]	; (8013428 <HAL_PCDEx_LPM_Callback+0x68>)
 8013418:	f043 0306 	orr.w	r3, r3, #6
 801341c:	6113      	str	r3, [r2, #16]
    break;
 801341e:	bf00      	nop
}
 8013420:	bf00      	nop
 8013422:	3708      	adds	r7, #8
 8013424:	46bd      	mov	sp, r7
 8013426:	bd80      	pop	{r7, pc}
 8013428:	e000ed00 	.word	0xe000ed00

0801342c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801342c:	b480      	push	{r7}
 801342e:	b083      	sub	sp, #12
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013434:	4b03      	ldr	r3, [pc, #12]	; (8013444 <USBD_static_malloc+0x18>)
}
 8013436:	4618      	mov	r0, r3
 8013438:	370c      	adds	r7, #12
 801343a:	46bd      	mov	sp, r7
 801343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013440:	4770      	bx	lr
 8013442:	bf00      	nop
 8013444:	200022a0 	.word	0x200022a0

08013448 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013448:	b480      	push	{r7}
 801344a:	b083      	sub	sp, #12
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8013450:	bf00      	nop
 8013452:	370c      	adds	r7, #12
 8013454:	46bd      	mov	sp, r7
 8013456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345a:	4770      	bx	lr

0801345c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801345c:	b580      	push	{r7, lr}
 801345e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8013460:	f7ee f9b4 	bl	80017cc <SystemClock_Config>
}
 8013464:	bf00      	nop
 8013466:	bd80      	pop	{r7, pc}

08013468 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013468:	b480      	push	{r7}
 801346a:	b085      	sub	sp, #20
 801346c:	af00      	add	r7, sp, #0
 801346e:	4603      	mov	r3, r0
 8013470:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013472:	2300      	movs	r3, #0
 8013474:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013476:	79fb      	ldrb	r3, [r7, #7]
 8013478:	2b03      	cmp	r3, #3
 801347a:	d817      	bhi.n	80134ac <USBD_Get_USB_Status+0x44>
 801347c:	a201      	add	r2, pc, #4	; (adr r2, 8013484 <USBD_Get_USB_Status+0x1c>)
 801347e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013482:	bf00      	nop
 8013484:	08013495 	.word	0x08013495
 8013488:	0801349b 	.word	0x0801349b
 801348c:	080134a1 	.word	0x080134a1
 8013490:	080134a7 	.word	0x080134a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013494:	2300      	movs	r3, #0
 8013496:	73fb      	strb	r3, [r7, #15]
    break;
 8013498:	e00b      	b.n	80134b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801349a:	2303      	movs	r3, #3
 801349c:	73fb      	strb	r3, [r7, #15]
    break;
 801349e:	e008      	b.n	80134b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80134a0:	2301      	movs	r3, #1
 80134a2:	73fb      	strb	r3, [r7, #15]
    break;
 80134a4:	e005      	b.n	80134b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80134a6:	2303      	movs	r3, #3
 80134a8:	73fb      	strb	r3, [r7, #15]
    break;
 80134aa:	e002      	b.n	80134b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80134ac:	2303      	movs	r3, #3
 80134ae:	73fb      	strb	r3, [r7, #15]
    break;
 80134b0:	bf00      	nop
  }
  return usb_status;
 80134b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80134b4:	4618      	mov	r0, r3
 80134b6:	3714      	adds	r7, #20
 80134b8:	46bd      	mov	sp, r7
 80134ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134be:	4770      	bx	lr

080134c0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80134c0:	b480      	push	{r7}
 80134c2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80134c4:	4b05      	ldr	r3, [pc, #20]	; (80134dc <UTIL_LPM_Init+0x1c>)
 80134c6:	2200      	movs	r2, #0
 80134c8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80134ca:	4b05      	ldr	r3, [pc, #20]	; (80134e0 <UTIL_LPM_Init+0x20>)
 80134cc:	2200      	movs	r2, #0
 80134ce:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80134d0:	bf00      	nop
 80134d2:	46bd      	mov	sp, r7
 80134d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d8:	4770      	bx	lr
 80134da:	bf00      	nop
 80134dc:	200024c0 	.word	0x200024c0
 80134e0:	200024c4 	.word	0x200024c4

080134e4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80134e4:	b480      	push	{r7}
 80134e6:	b087      	sub	sp, #28
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
 80134ec:	460b      	mov	r3, r1
 80134ee:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80134f0:	f3ef 8310 	mrs	r3, PRIMASK
 80134f4:	613b      	str	r3, [r7, #16]
  return(result);
 80134f6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80134f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80134fa:	b672      	cpsid	i
}
 80134fc:	bf00      	nop
  
  switch(state)
 80134fe:	78fb      	ldrb	r3, [r7, #3]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d008      	beq.n	8013516 <UTIL_LPM_SetOffMode+0x32>
 8013504:	2b01      	cmp	r3, #1
 8013506:	d10e      	bne.n	8013526 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8013508:	4b0d      	ldr	r3, [pc, #52]	; (8013540 <UTIL_LPM_SetOffMode+0x5c>)
 801350a:	681a      	ldr	r2, [r3, #0]
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	4313      	orrs	r3, r2
 8013510:	4a0b      	ldr	r2, [pc, #44]	; (8013540 <UTIL_LPM_SetOffMode+0x5c>)
 8013512:	6013      	str	r3, [r2, #0]
      break;
 8013514:	e008      	b.n	8013528 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	43da      	mvns	r2, r3
 801351a:	4b09      	ldr	r3, [pc, #36]	; (8013540 <UTIL_LPM_SetOffMode+0x5c>)
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	4013      	ands	r3, r2
 8013520:	4a07      	ldr	r2, [pc, #28]	; (8013540 <UTIL_LPM_SetOffMode+0x5c>)
 8013522:	6013      	str	r3, [r2, #0]
      break;
 8013524:	e000      	b.n	8013528 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8013526:	bf00      	nop
 8013528:	697b      	ldr	r3, [r7, #20]
 801352a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	f383 8810 	msr	PRIMASK, r3
}
 8013532:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8013534:	bf00      	nop
 8013536:	371c      	adds	r7, #28
 8013538:	46bd      	mov	sp, r7
 801353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353e:	4770      	bx	lr
 8013540:	200024c4 	.word	0x200024c4

08013544 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b090      	sub	sp, #64	; 0x40
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801354c:	4b73      	ldr	r3, [pc, #460]	; (801371c <UTIL_SEQ_Run+0x1d8>)
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8013552:	4b72      	ldr	r3, [pc, #456]	; (801371c <UTIL_SEQ_Run+0x1d8>)
 8013554:	681a      	ldr	r2, [r3, #0]
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	4013      	ands	r3, r2
 801355a:	4a70      	ldr	r2, [pc, #448]	; (801371c <UTIL_SEQ_Run+0x1d8>)
 801355c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801355e:	4b70      	ldr	r3, [pc, #448]	; (8013720 <UTIL_SEQ_Run+0x1dc>)
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8013564:	4b6f      	ldr	r3, [pc, #444]	; (8013724 <UTIL_SEQ_Run+0x1e0>)
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801356a:	4b6f      	ldr	r3, [pc, #444]	; (8013728 <UTIL_SEQ_Run+0x1e4>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8013570:	4b6e      	ldr	r3, [pc, #440]	; (801372c <UTIL_SEQ_Run+0x1e8>)
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8013576:	e08d      	b.n	8013694 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8013578:	2300      	movs	r3, #0
 801357a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801357c:	e002      	b.n	8013584 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801357e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013580:	3301      	adds	r3, #1
 8013582:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8013584:	4a6a      	ldr	r2, [pc, #424]	; (8013730 <UTIL_SEQ_Run+0x1ec>)
 8013586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013588:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801358c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801358e:	401a      	ands	r2, r3
 8013590:	4b62      	ldr	r3, [pc, #392]	; (801371c <UTIL_SEQ_Run+0x1d8>)
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	4013      	ands	r3, r2
 8013596:	2b00      	cmp	r3, #0
 8013598:	d0f1      	beq.n	801357e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801359a:	4a65      	ldr	r2, [pc, #404]	; (8013730 <UTIL_SEQ_Run+0x1ec>)
 801359c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801359e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80135a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135a4:	401a      	ands	r2, r3
 80135a6:	4b5d      	ldr	r3, [pc, #372]	; (801371c <UTIL_SEQ_Run+0x1d8>)
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	4013      	ands	r3, r2
 80135ac:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80135ae:	4a60      	ldr	r2, [pc, #384]	; (8013730 <UTIL_SEQ_Run+0x1ec>)
 80135b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135b2:	00db      	lsls	r3, r3, #3
 80135b4:	4413      	add	r3, r2
 80135b6:	685a      	ldr	r2, [r3, #4]
 80135b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ba:	4013      	ands	r3, r2
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d106      	bne.n	80135ce <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80135c0:	4a5b      	ldr	r2, [pc, #364]	; (8013730 <UTIL_SEQ_Run+0x1ec>)
 80135c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135c4:	00db      	lsls	r3, r3, #3
 80135c6:	4413      	add	r3, r2
 80135c8:	f04f 32ff 	mov.w	r2, #4294967295
 80135cc:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80135ce:	4a58      	ldr	r2, [pc, #352]	; (8013730 <UTIL_SEQ_Run+0x1ec>)
 80135d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135d2:	00db      	lsls	r3, r3, #3
 80135d4:	4413      	add	r3, r2
 80135d6:	685a      	ldr	r2, [r3, #4]
 80135d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135da:	4013      	ands	r3, r2
 80135dc:	4618      	mov	r0, r3
 80135de:	f000 f9b3 	bl	8013948 <SEQ_BitPosition>
 80135e2:	4603      	mov	r3, r0
 80135e4:	461a      	mov	r2, r3
 80135e6:	4b53      	ldr	r3, [pc, #332]	; (8013734 <UTIL_SEQ_Run+0x1f0>)
 80135e8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80135ea:	4a51      	ldr	r2, [pc, #324]	; (8013730 <UTIL_SEQ_Run+0x1ec>)
 80135ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135ee:	00db      	lsls	r3, r3, #3
 80135f0:	4413      	add	r3, r2
 80135f2:	685a      	ldr	r2, [r3, #4]
 80135f4:	4b4f      	ldr	r3, [pc, #316]	; (8013734 <UTIL_SEQ_Run+0x1f0>)
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	2101      	movs	r1, #1
 80135fa:	fa01 f303 	lsl.w	r3, r1, r3
 80135fe:	43db      	mvns	r3, r3
 8013600:	401a      	ands	r2, r3
 8013602:	494b      	ldr	r1, [pc, #300]	; (8013730 <UTIL_SEQ_Run+0x1ec>)
 8013604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013606:	00db      	lsls	r3, r3, #3
 8013608:	440b      	add	r3, r1
 801360a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801360c:	f3ef 8310 	mrs	r3, PRIMASK
 8013610:	61bb      	str	r3, [r7, #24]
  return(result);
 8013612:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013614:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8013616:	b672      	cpsid	i
}
 8013618:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801361a:	4b46      	ldr	r3, [pc, #280]	; (8013734 <UTIL_SEQ_Run+0x1f0>)
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	2201      	movs	r2, #1
 8013620:	fa02 f303 	lsl.w	r3, r2, r3
 8013624:	43da      	mvns	r2, r3
 8013626:	4b3e      	ldr	r3, [pc, #248]	; (8013720 <UTIL_SEQ_Run+0x1dc>)
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	4013      	ands	r3, r2
 801362c:	4a3c      	ldr	r2, [pc, #240]	; (8013720 <UTIL_SEQ_Run+0x1dc>)
 801362e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8013630:	2302      	movs	r3, #2
 8013632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013634:	e013      	b.n	801365e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8013636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013638:	3b01      	subs	r3, #1
 801363a:	4a3d      	ldr	r2, [pc, #244]	; (8013730 <UTIL_SEQ_Run+0x1ec>)
 801363c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8013640:	4b3c      	ldr	r3, [pc, #240]	; (8013734 <UTIL_SEQ_Run+0x1f0>)
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	2201      	movs	r2, #1
 8013646:	fa02 f303 	lsl.w	r3, r2, r3
 801364a:	43da      	mvns	r2, r3
 801364c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801364e:	3b01      	subs	r3, #1
 8013650:	400a      	ands	r2, r1
 8013652:	4937      	ldr	r1, [pc, #220]	; (8013730 <UTIL_SEQ_Run+0x1ec>)
 8013654:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8013658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801365a:	3b01      	subs	r3, #1
 801365c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801365e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013660:	2b00      	cmp	r3, #0
 8013662:	d1e8      	bne.n	8013636 <UTIL_SEQ_Run+0xf2>
 8013664:	6a3b      	ldr	r3, [r7, #32]
 8013666:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013668:	697b      	ldr	r3, [r7, #20]
 801366a:	f383 8810 	msr	PRIMASK, r3
}
 801366e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8013670:	4b30      	ldr	r3, [pc, #192]	; (8013734 <UTIL_SEQ_Run+0x1f0>)
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	4a30      	ldr	r2, [pc, #192]	; (8013738 <UTIL_SEQ_Run+0x1f4>)
 8013676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801367a:	4798      	blx	r3

    local_taskset = TaskSet;
 801367c:	4b28      	ldr	r3, [pc, #160]	; (8013720 <UTIL_SEQ_Run+0x1dc>)
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8013682:	4b28      	ldr	r3, [pc, #160]	; (8013724 <UTIL_SEQ_Run+0x1e0>)
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8013688:	4b27      	ldr	r3, [pc, #156]	; (8013728 <UTIL_SEQ_Run+0x1e4>)
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801368e:	4b27      	ldr	r3, [pc, #156]	; (801372c <UTIL_SEQ_Run+0x1e8>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8013694:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013698:	401a      	ands	r2, r3
 801369a:	4b20      	ldr	r3, [pc, #128]	; (801371c <UTIL_SEQ_Run+0x1d8>)
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	4013      	ands	r3, r2
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d005      	beq.n	80136b0 <UTIL_SEQ_Run+0x16c>
 80136a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80136a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136a8:	4013      	ands	r3, r2
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	f43f af64 	beq.w	8013578 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80136b0:	4b20      	ldr	r3, [pc, #128]	; (8013734 <UTIL_SEQ_Run+0x1f0>)
 80136b2:	f04f 32ff 	mov.w	r2, #4294967295
 80136b6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80136b8:	f000 f938 	bl	801392c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80136bc:	f3ef 8310 	mrs	r3, PRIMASK
 80136c0:	613b      	str	r3, [r7, #16]
  return(result);
 80136c2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80136c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80136c6:	b672      	cpsid	i
}
 80136c8:	bf00      	nop
  local_taskset = TaskSet;
 80136ca:	4b15      	ldr	r3, [pc, #84]	; (8013720 <UTIL_SEQ_Run+0x1dc>)
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80136d0:	4b14      	ldr	r3, [pc, #80]	; (8013724 <UTIL_SEQ_Run+0x1e0>)
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80136d6:	4b14      	ldr	r3, [pc, #80]	; (8013728 <UTIL_SEQ_Run+0x1e4>)
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80136dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80136de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136e0:	401a      	ands	r2, r3
 80136e2:	4b0e      	ldr	r3, [pc, #56]	; (801371c <UTIL_SEQ_Run+0x1d8>)
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	4013      	ands	r3, r2
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d107      	bne.n	80136fc <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80136ec:	4b0f      	ldr	r3, [pc, #60]	; (801372c <UTIL_SEQ_Run+0x1e8>)
 80136ee:	681a      	ldr	r2, [r3, #0]
 80136f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136f2:	4013      	ands	r3, r2
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d101      	bne.n	80136fc <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80136f8:	f7ed fec0 	bl	800147c <UTIL_SEQ_Idle>
 80136fc:	69fb      	ldr	r3, [r7, #28]
 80136fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	f383 8810 	msr	PRIMASK, r3
}
 8013706:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8013708:	f000 f917 	bl	801393a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801370c:	4a03      	ldr	r2, [pc, #12]	; (801371c <UTIL_SEQ_Run+0x1d8>)
 801370e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013710:	6013      	str	r3, [r2, #0]

  return;
 8013712:	bf00      	nop
}
 8013714:	3740      	adds	r7, #64	; 0x40
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}
 801371a:	bf00      	nop
 801371c:	20000148 	.word	0x20000148
 8013720:	200024c8 	.word	0x200024c8
 8013724:	200024cc 	.word	0x200024cc
 8013728:	20000144 	.word	0x20000144
 801372c:	200024d0 	.word	0x200024d0
 8013730:	20002558 	.word	0x20002558
 8013734:	200024d4 	.word	0x200024d4
 8013738:	200024d8 	.word	0x200024d8

0801373c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b088      	sub	sp, #32
 8013740:	af00      	add	r7, sp, #0
 8013742:	60f8      	str	r0, [r7, #12]
 8013744:	60b9      	str	r1, [r7, #8]
 8013746:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013748:	f3ef 8310 	mrs	r3, PRIMASK
 801374c:	617b      	str	r3, [r7, #20]
  return(result);
 801374e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8013750:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8013752:	b672      	cpsid	i
}
 8013754:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8013756:	68f8      	ldr	r0, [r7, #12]
 8013758:	f000 f8f6 	bl	8013948 <SEQ_BitPosition>
 801375c:	4603      	mov	r3, r0
 801375e:	4619      	mov	r1, r3
 8013760:	4a06      	ldr	r2, [pc, #24]	; (801377c <UTIL_SEQ_RegTask+0x40>)
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8013768:	69fb      	ldr	r3, [r7, #28]
 801376a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801376c:	69bb      	ldr	r3, [r7, #24]
 801376e:	f383 8810 	msr	PRIMASK, r3
}
 8013772:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8013774:	bf00      	nop
}
 8013776:	3720      	adds	r7, #32
 8013778:	46bd      	mov	sp, r7
 801377a:	bd80      	pop	{r7, pc}
 801377c:	200024d8 	.word	0x200024d8

08013780 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8013780:	b480      	push	{r7}
 8013782:	b087      	sub	sp, #28
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
 8013788:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801378a:	f3ef 8310 	mrs	r3, PRIMASK
 801378e:	60fb      	str	r3, [r7, #12]
  return(result);
 8013790:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013792:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013794:	b672      	cpsid	i
}
 8013796:	bf00      	nop

  TaskSet |= TaskId_bm;
 8013798:	4b0d      	ldr	r3, [pc, #52]	; (80137d0 <UTIL_SEQ_SetTask+0x50>)
 801379a:	681a      	ldr	r2, [r3, #0]
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	4313      	orrs	r3, r2
 80137a0:	4a0b      	ldr	r2, [pc, #44]	; (80137d0 <UTIL_SEQ_SetTask+0x50>)
 80137a2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80137a4:	4a0b      	ldr	r2, [pc, #44]	; (80137d4 <UTIL_SEQ_SetTask+0x54>)
 80137a6:	683b      	ldr	r3, [r7, #0]
 80137a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	431a      	orrs	r2, r3
 80137b0:	4908      	ldr	r1, [pc, #32]	; (80137d4 <UTIL_SEQ_SetTask+0x54>)
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80137b8:	697b      	ldr	r3, [r7, #20]
 80137ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80137bc:	693b      	ldr	r3, [r7, #16]
 80137be:	f383 8810 	msr	PRIMASK, r3
}
 80137c2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80137c4:	bf00      	nop
}
 80137c6:	371c      	adds	r7, #28
 80137c8:	46bd      	mov	sp, r7
 80137ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ce:	4770      	bx	lr
 80137d0:	200024c8 	.word	0x200024c8
 80137d4:	20002558 	.word	0x20002558

080137d8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80137d8:	b480      	push	{r7}
 80137da:	b087      	sub	sp, #28
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80137e0:	f3ef 8310 	mrs	r3, PRIMASK
 80137e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80137e6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80137e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80137ea:	b672      	cpsid	i
}
 80137ec:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	43da      	mvns	r2, r3
 80137f2:	4b08      	ldr	r3, [pc, #32]	; (8013814 <UTIL_SEQ_PauseTask+0x3c>)
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	4013      	ands	r3, r2
 80137f8:	4a06      	ldr	r2, [pc, #24]	; (8013814 <UTIL_SEQ_PauseTask+0x3c>)
 80137fa:	6013      	str	r3, [r2, #0]
 80137fc:	697b      	ldr	r3, [r7, #20]
 80137fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013800:	693b      	ldr	r3, [r7, #16]
 8013802:	f383 8810 	msr	PRIMASK, r3
}
 8013806:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013808:	bf00      	nop
}
 801380a:	371c      	adds	r7, #28
 801380c:	46bd      	mov	sp, r7
 801380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013812:	4770      	bx	lr
 8013814:	20000144 	.word	0x20000144

08013818 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8013818:	b480      	push	{r7}
 801381a:	b087      	sub	sp, #28
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013820:	f3ef 8310 	mrs	r3, PRIMASK
 8013824:	60fb      	str	r3, [r7, #12]
  return(result);
 8013826:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013828:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801382a:	b672      	cpsid	i
}
 801382c:	bf00      	nop

  TaskMask |= TaskId_bm;
 801382e:	4b09      	ldr	r3, [pc, #36]	; (8013854 <UTIL_SEQ_ResumeTask+0x3c>)
 8013830:	681a      	ldr	r2, [r3, #0]
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	4313      	orrs	r3, r2
 8013836:	4a07      	ldr	r2, [pc, #28]	; (8013854 <UTIL_SEQ_ResumeTask+0x3c>)
 8013838:	6013      	str	r3, [r2, #0]
 801383a:	697b      	ldr	r3, [r7, #20]
 801383c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801383e:	693b      	ldr	r3, [r7, #16]
 8013840:	f383 8810 	msr	PRIMASK, r3
}
 8013844:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013846:	bf00      	nop
}
 8013848:	371c      	adds	r7, #28
 801384a:	46bd      	mov	sp, r7
 801384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013850:	4770      	bx	lr
 8013852:	bf00      	nop
 8013854:	20000144 	.word	0x20000144

08013858 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8013858:	b480      	push	{r7}
 801385a:	b087      	sub	sp, #28
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013860:	f3ef 8310 	mrs	r3, PRIMASK
 8013864:	60fb      	str	r3, [r7, #12]
  return(result);
 8013866:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013868:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801386a:	b672      	cpsid	i
}
 801386c:	bf00      	nop

  EvtSet |= EvtId_bm;
 801386e:	4b09      	ldr	r3, [pc, #36]	; (8013894 <UTIL_SEQ_SetEvt+0x3c>)
 8013870:	681a      	ldr	r2, [r3, #0]
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	4313      	orrs	r3, r2
 8013876:	4a07      	ldr	r2, [pc, #28]	; (8013894 <UTIL_SEQ_SetEvt+0x3c>)
 8013878:	6013      	str	r3, [r2, #0]
 801387a:	697b      	ldr	r3, [r7, #20]
 801387c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801387e:	693b      	ldr	r3, [r7, #16]
 8013880:	f383 8810 	msr	PRIMASK, r3
}
 8013884:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013886:	bf00      	nop
}
 8013888:	371c      	adds	r7, #28
 801388a:	46bd      	mov	sp, r7
 801388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013890:	4770      	bx	lr
 8013892:	bf00      	nop
 8013894:	200024cc 	.word	0x200024cc

08013898 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8013898:	b580      	push	{r7, lr}
 801389a:	b088      	sub	sp, #32
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80138a0:	4b1f      	ldr	r3, [pc, #124]	; (8013920 <UTIL_SEQ_WaitEvt+0x88>)
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80138a6:	4b1e      	ldr	r3, [pc, #120]	; (8013920 <UTIL_SEQ_WaitEvt+0x88>)
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138ae:	d102      	bne.n	80138b6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80138b0:	2300      	movs	r3, #0
 80138b2:	61fb      	str	r3, [r7, #28]
 80138b4:	e005      	b.n	80138c2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80138b6:	4b1a      	ldr	r3, [pc, #104]	; (8013920 <UTIL_SEQ_WaitEvt+0x88>)
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	2201      	movs	r2, #1
 80138bc:	fa02 f303 	lsl.w	r3, r2, r3
 80138c0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80138c2:	4b18      	ldr	r3, [pc, #96]	; (8013924 <UTIL_SEQ_WaitEvt+0x8c>)
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80138c8:	4a16      	ldr	r2, [pc, #88]	; (8013924 <UTIL_SEQ_WaitEvt+0x8c>)
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80138ce:	e003      	b.n	80138d8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80138d0:	6879      	ldr	r1, [r7, #4]
 80138d2:	69f8      	ldr	r0, [r7, #28]
 80138d4:	f7ed fdd9 	bl	800148a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80138d8:	4b13      	ldr	r3, [pc, #76]	; (8013928 <UTIL_SEQ_WaitEvt+0x90>)
 80138da:	681a      	ldr	r2, [r3, #0]
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	4013      	ands	r3, r2
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d0f5      	beq.n	80138d0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80138e4:	4a0e      	ldr	r2, [pc, #56]	; (8013920 <UTIL_SEQ_WaitEvt+0x88>)
 80138e6:	69bb      	ldr	r3, [r7, #24]
 80138e8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80138ea:	f3ef 8310 	mrs	r3, PRIMASK
 80138ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80138f0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80138f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80138f4:	b672      	cpsid	i
}
 80138f6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	43da      	mvns	r2, r3
 80138fc:	4b0a      	ldr	r3, [pc, #40]	; (8013928 <UTIL_SEQ_WaitEvt+0x90>)
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	4013      	ands	r3, r2
 8013902:	4a09      	ldr	r2, [pc, #36]	; (8013928 <UTIL_SEQ_WaitEvt+0x90>)
 8013904:	6013      	str	r3, [r2, #0]
 8013906:	693b      	ldr	r3, [r7, #16]
 8013908:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	f383 8810 	msr	PRIMASK, r3
}
 8013910:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8013912:	4a04      	ldr	r2, [pc, #16]	; (8013924 <UTIL_SEQ_WaitEvt+0x8c>)
 8013914:	697b      	ldr	r3, [r7, #20]
 8013916:	6013      	str	r3, [r2, #0]
  return;
 8013918:	bf00      	nop
}
 801391a:	3720      	adds	r7, #32
 801391c:	46bd      	mov	sp, r7
 801391e:	bd80      	pop	{r7, pc}
 8013920:	200024d4 	.word	0x200024d4
 8013924:	200024d0 	.word	0x200024d0
 8013928:	200024cc 	.word	0x200024cc

0801392c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801392c:	b480      	push	{r7}
 801392e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8013930:	bf00      	nop
}
 8013932:	46bd      	mov	sp, r7
 8013934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013938:	4770      	bx	lr

0801393a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801393a:	b480      	push	{r7}
 801393c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801393e:	bf00      	nop
}
 8013940:	46bd      	mov	sp, r7
 8013942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013946:	4770      	bx	lr

08013948 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8013948:	b480      	push	{r7}
 801394a:	b085      	sub	sp, #20
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8013950:	2300      	movs	r3, #0
 8013952:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8013958:	68bb      	ldr	r3, [r7, #8]
 801395a:	0c1b      	lsrs	r3, r3, #16
 801395c:	041b      	lsls	r3, r3, #16
 801395e:	2b00      	cmp	r3, #0
 8013960:	d104      	bne.n	801396c <SEQ_BitPosition+0x24>
 8013962:	2310      	movs	r3, #16
 8013964:	73fb      	strb	r3, [r7, #15]
 8013966:	68bb      	ldr	r3, [r7, #8]
 8013968:	041b      	lsls	r3, r3, #16
 801396a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801396c:	68bb      	ldr	r3, [r7, #8]
 801396e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013972:	2b00      	cmp	r3, #0
 8013974:	d105      	bne.n	8013982 <SEQ_BitPosition+0x3a>
 8013976:	7bfb      	ldrb	r3, [r7, #15]
 8013978:	3308      	adds	r3, #8
 801397a:	73fb      	strb	r3, [r7, #15]
 801397c:	68bb      	ldr	r3, [r7, #8]
 801397e:	021b      	lsls	r3, r3, #8
 8013980:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8013982:	68bb      	ldr	r3, [r7, #8]
 8013984:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013988:	2b00      	cmp	r3, #0
 801398a:	d105      	bne.n	8013998 <SEQ_BitPosition+0x50>
 801398c:	7bfb      	ldrb	r3, [r7, #15]
 801398e:	3304      	adds	r3, #4
 8013990:	73fb      	strb	r3, [r7, #15]
 8013992:	68bb      	ldr	r3, [r7, #8]
 8013994:	011b      	lsls	r3, r3, #4
 8013996:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8013998:	68bb      	ldr	r3, [r7, #8]
 801399a:	0f1b      	lsrs	r3, r3, #28
 801399c:	4a07      	ldr	r2, [pc, #28]	; (80139bc <SEQ_BitPosition+0x74>)
 801399e:	5cd2      	ldrb	r2, [r2, r3]
 80139a0:	7bfb      	ldrb	r3, [r7, #15]
 80139a2:	4413      	add	r3, r2
 80139a4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80139a6:	7bfb      	ldrb	r3, [r7, #15]
 80139a8:	f1c3 031f 	rsb	r3, r3, #31
 80139ac:	b2db      	uxtb	r3, r3
}
 80139ae:	4618      	mov	r0, r3
 80139b0:	3714      	adds	r7, #20
 80139b2:	46bd      	mov	sp, r7
 80139b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b8:	4770      	bx	lr
 80139ba:	bf00      	nop
 80139bc:	08017160 	.word	0x08017160

080139c0 <__assert_func>:
 80139c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80139c2:	4614      	mov	r4, r2
 80139c4:	461a      	mov	r2, r3
 80139c6:	4b09      	ldr	r3, [pc, #36]	; (80139ec <__assert_func+0x2c>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	4605      	mov	r5, r0
 80139cc:	68d8      	ldr	r0, [r3, #12]
 80139ce:	b14c      	cbz	r4, 80139e4 <__assert_func+0x24>
 80139d0:	4b07      	ldr	r3, [pc, #28]	; (80139f0 <__assert_func+0x30>)
 80139d2:	9100      	str	r1, [sp, #0]
 80139d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80139d8:	4906      	ldr	r1, [pc, #24]	; (80139f4 <__assert_func+0x34>)
 80139da:	462b      	mov	r3, r5
 80139dc:	f000 f838 	bl	8013a50 <fiprintf>
 80139e0:	f000 fc30 	bl	8014244 <abort>
 80139e4:	4b04      	ldr	r3, [pc, #16]	; (80139f8 <__assert_func+0x38>)
 80139e6:	461c      	mov	r4, r3
 80139e8:	e7f3      	b.n	80139d2 <__assert_func+0x12>
 80139ea:	bf00      	nop
 80139ec:	2000014c 	.word	0x2000014c
 80139f0:	08017170 	.word	0x08017170
 80139f4:	0801717d 	.word	0x0801717d
 80139f8:	080171ab 	.word	0x080171ab

080139fc <gcvt>:
 80139fc:	b530      	push	{r4, r5, lr}
 80139fe:	2200      	movs	r2, #0
 8013a00:	b085      	sub	sp, #20
 8013a02:	460c      	mov	r4, r1
 8013a04:	4605      	mov	r5, r0
 8013a06:	2300      	movs	r3, #0
 8013a08:	ec51 0b10 	vmov	r0, r1, d0
 8013a0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013a10:	f7ed f83c 	bl	8000a8c <__aeabi_dcmplt>
 8013a14:	ed9d 0b02 	vldr	d0, [sp, #8]
 8013a18:	4622      	mov	r2, r4
 8013a1a:	b118      	cbz	r0, 8013a24 <gcvt+0x28>
 8013a1c:	232d      	movs	r3, #45	; 0x2d
 8013a1e:	f802 3b01 	strb.w	r3, [r2], #1
 8013a22:	3d01      	subs	r5, #1
 8013a24:	2300      	movs	r3, #0
 8013a26:	4806      	ldr	r0, [pc, #24]	; (8013a40 <gcvt+0x44>)
 8013a28:	9300      	str	r3, [sp, #0]
 8013a2a:	4629      	mov	r1, r5
 8013a2c:	2367      	movs	r3, #103	; 0x67
 8013a2e:	6800      	ldr	r0, [r0, #0]
 8013a30:	f000 fc86 	bl	8014340 <_gcvt>
 8013a34:	2800      	cmp	r0, #0
 8013a36:	bf14      	ite	ne
 8013a38:	4620      	movne	r0, r4
 8013a3a:	2000      	moveq	r0, #0
 8013a3c:	b005      	add	sp, #20
 8013a3e:	bd30      	pop	{r4, r5, pc}
 8013a40:	2000014c 	.word	0x2000014c

08013a44 <__errno>:
 8013a44:	4b01      	ldr	r3, [pc, #4]	; (8013a4c <__errno+0x8>)
 8013a46:	6818      	ldr	r0, [r3, #0]
 8013a48:	4770      	bx	lr
 8013a4a:	bf00      	nop
 8013a4c:	2000014c 	.word	0x2000014c

08013a50 <fiprintf>:
 8013a50:	b40e      	push	{r1, r2, r3}
 8013a52:	b503      	push	{r0, r1, lr}
 8013a54:	4601      	mov	r1, r0
 8013a56:	ab03      	add	r3, sp, #12
 8013a58:	4805      	ldr	r0, [pc, #20]	; (8013a70 <fiprintf+0x20>)
 8013a5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a5e:	6800      	ldr	r0, [r0, #0]
 8013a60:	9301      	str	r3, [sp, #4]
 8013a62:	f000 f86b 	bl	8013b3c <_vfiprintf_r>
 8013a66:	b002      	add	sp, #8
 8013a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a6c:	b003      	add	sp, #12
 8013a6e:	4770      	bx	lr
 8013a70:	2000014c 	.word	0x2000014c

08013a74 <__libc_init_array>:
 8013a74:	b570      	push	{r4, r5, r6, lr}
 8013a76:	4d0d      	ldr	r5, [pc, #52]	; (8013aac <__libc_init_array+0x38>)
 8013a78:	4c0d      	ldr	r4, [pc, #52]	; (8013ab0 <__libc_init_array+0x3c>)
 8013a7a:	1b64      	subs	r4, r4, r5
 8013a7c:	10a4      	asrs	r4, r4, #2
 8013a7e:	2600      	movs	r6, #0
 8013a80:	42a6      	cmp	r6, r4
 8013a82:	d109      	bne.n	8013a98 <__libc_init_array+0x24>
 8013a84:	4d0b      	ldr	r5, [pc, #44]	; (8013ab4 <__libc_init_array+0x40>)
 8013a86:	4c0c      	ldr	r4, [pc, #48]	; (8013ab8 <__libc_init_array+0x44>)
 8013a88:	f002 fd6e 	bl	8016568 <_init>
 8013a8c:	1b64      	subs	r4, r4, r5
 8013a8e:	10a4      	asrs	r4, r4, #2
 8013a90:	2600      	movs	r6, #0
 8013a92:	42a6      	cmp	r6, r4
 8013a94:	d105      	bne.n	8013aa2 <__libc_init_array+0x2e>
 8013a96:	bd70      	pop	{r4, r5, r6, pc}
 8013a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a9c:	4798      	blx	r3
 8013a9e:	3601      	adds	r6, #1
 8013aa0:	e7ee      	b.n	8013a80 <__libc_init_array+0xc>
 8013aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8013aa6:	4798      	blx	r3
 8013aa8:	3601      	adds	r6, #1
 8013aaa:	e7f2      	b.n	8013a92 <__libc_init_array+0x1e>
 8013aac:	08017430 	.word	0x08017430
 8013ab0:	08017430 	.word	0x08017430
 8013ab4:	08017430 	.word	0x08017430
 8013ab8:	08017434 	.word	0x08017434

08013abc <memcpy>:
 8013abc:	440a      	add	r2, r1
 8013abe:	4291      	cmp	r1, r2
 8013ac0:	f100 33ff 	add.w	r3, r0, #4294967295
 8013ac4:	d100      	bne.n	8013ac8 <memcpy+0xc>
 8013ac6:	4770      	bx	lr
 8013ac8:	b510      	push	{r4, lr}
 8013aca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013ace:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013ad2:	4291      	cmp	r1, r2
 8013ad4:	d1f9      	bne.n	8013aca <memcpy+0xe>
 8013ad6:	bd10      	pop	{r4, pc}

08013ad8 <memset>:
 8013ad8:	4402      	add	r2, r0
 8013ada:	4603      	mov	r3, r0
 8013adc:	4293      	cmp	r3, r2
 8013ade:	d100      	bne.n	8013ae2 <memset+0xa>
 8013ae0:	4770      	bx	lr
 8013ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8013ae6:	e7f9      	b.n	8013adc <memset+0x4>

08013ae8 <__sfputc_r>:
 8013ae8:	6893      	ldr	r3, [r2, #8]
 8013aea:	3b01      	subs	r3, #1
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	b410      	push	{r4}
 8013af0:	6093      	str	r3, [r2, #8]
 8013af2:	da08      	bge.n	8013b06 <__sfputc_r+0x1e>
 8013af4:	6994      	ldr	r4, [r2, #24]
 8013af6:	42a3      	cmp	r3, r4
 8013af8:	db01      	blt.n	8013afe <__sfputc_r+0x16>
 8013afa:	290a      	cmp	r1, #10
 8013afc:	d103      	bne.n	8013b06 <__sfputc_r+0x1e>
 8013afe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b02:	f000 badf 	b.w	80140c4 <__swbuf_r>
 8013b06:	6813      	ldr	r3, [r2, #0]
 8013b08:	1c58      	adds	r0, r3, #1
 8013b0a:	6010      	str	r0, [r2, #0]
 8013b0c:	7019      	strb	r1, [r3, #0]
 8013b0e:	4608      	mov	r0, r1
 8013b10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b14:	4770      	bx	lr

08013b16 <__sfputs_r>:
 8013b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b18:	4606      	mov	r6, r0
 8013b1a:	460f      	mov	r7, r1
 8013b1c:	4614      	mov	r4, r2
 8013b1e:	18d5      	adds	r5, r2, r3
 8013b20:	42ac      	cmp	r4, r5
 8013b22:	d101      	bne.n	8013b28 <__sfputs_r+0x12>
 8013b24:	2000      	movs	r0, #0
 8013b26:	e007      	b.n	8013b38 <__sfputs_r+0x22>
 8013b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b2c:	463a      	mov	r2, r7
 8013b2e:	4630      	mov	r0, r6
 8013b30:	f7ff ffda 	bl	8013ae8 <__sfputc_r>
 8013b34:	1c43      	adds	r3, r0, #1
 8013b36:	d1f3      	bne.n	8013b20 <__sfputs_r+0xa>
 8013b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013b3c <_vfiprintf_r>:
 8013b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b40:	460d      	mov	r5, r1
 8013b42:	b09d      	sub	sp, #116	; 0x74
 8013b44:	4614      	mov	r4, r2
 8013b46:	4698      	mov	r8, r3
 8013b48:	4606      	mov	r6, r0
 8013b4a:	b118      	cbz	r0, 8013b54 <_vfiprintf_r+0x18>
 8013b4c:	6983      	ldr	r3, [r0, #24]
 8013b4e:	b90b      	cbnz	r3, 8013b54 <_vfiprintf_r+0x18>
 8013b50:	f000 fdd0 	bl	80146f4 <__sinit>
 8013b54:	4b89      	ldr	r3, [pc, #548]	; (8013d7c <_vfiprintf_r+0x240>)
 8013b56:	429d      	cmp	r5, r3
 8013b58:	d11b      	bne.n	8013b92 <_vfiprintf_r+0x56>
 8013b5a:	6875      	ldr	r5, [r6, #4]
 8013b5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013b5e:	07d9      	lsls	r1, r3, #31
 8013b60:	d405      	bmi.n	8013b6e <_vfiprintf_r+0x32>
 8013b62:	89ab      	ldrh	r3, [r5, #12]
 8013b64:	059a      	lsls	r2, r3, #22
 8013b66:	d402      	bmi.n	8013b6e <_vfiprintf_r+0x32>
 8013b68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013b6a:	f000 fe61 	bl	8014830 <__retarget_lock_acquire_recursive>
 8013b6e:	89ab      	ldrh	r3, [r5, #12]
 8013b70:	071b      	lsls	r3, r3, #28
 8013b72:	d501      	bpl.n	8013b78 <_vfiprintf_r+0x3c>
 8013b74:	692b      	ldr	r3, [r5, #16]
 8013b76:	b9eb      	cbnz	r3, 8013bb4 <_vfiprintf_r+0x78>
 8013b78:	4629      	mov	r1, r5
 8013b7a:	4630      	mov	r0, r6
 8013b7c:	f000 faf4 	bl	8014168 <__swsetup_r>
 8013b80:	b1c0      	cbz	r0, 8013bb4 <_vfiprintf_r+0x78>
 8013b82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013b84:	07dc      	lsls	r4, r3, #31
 8013b86:	d50e      	bpl.n	8013ba6 <_vfiprintf_r+0x6a>
 8013b88:	f04f 30ff 	mov.w	r0, #4294967295
 8013b8c:	b01d      	add	sp, #116	; 0x74
 8013b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b92:	4b7b      	ldr	r3, [pc, #492]	; (8013d80 <_vfiprintf_r+0x244>)
 8013b94:	429d      	cmp	r5, r3
 8013b96:	d101      	bne.n	8013b9c <_vfiprintf_r+0x60>
 8013b98:	68b5      	ldr	r5, [r6, #8]
 8013b9a:	e7df      	b.n	8013b5c <_vfiprintf_r+0x20>
 8013b9c:	4b79      	ldr	r3, [pc, #484]	; (8013d84 <_vfiprintf_r+0x248>)
 8013b9e:	429d      	cmp	r5, r3
 8013ba0:	bf08      	it	eq
 8013ba2:	68f5      	ldreq	r5, [r6, #12]
 8013ba4:	e7da      	b.n	8013b5c <_vfiprintf_r+0x20>
 8013ba6:	89ab      	ldrh	r3, [r5, #12]
 8013ba8:	0598      	lsls	r0, r3, #22
 8013baa:	d4ed      	bmi.n	8013b88 <_vfiprintf_r+0x4c>
 8013bac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013bae:	f000 fe40 	bl	8014832 <__retarget_lock_release_recursive>
 8013bb2:	e7e9      	b.n	8013b88 <_vfiprintf_r+0x4c>
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8013bb8:	2320      	movs	r3, #32
 8013bba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013bbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8013bc2:	2330      	movs	r3, #48	; 0x30
 8013bc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013d88 <_vfiprintf_r+0x24c>
 8013bc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013bcc:	f04f 0901 	mov.w	r9, #1
 8013bd0:	4623      	mov	r3, r4
 8013bd2:	469a      	mov	sl, r3
 8013bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013bd8:	b10a      	cbz	r2, 8013bde <_vfiprintf_r+0xa2>
 8013bda:	2a25      	cmp	r2, #37	; 0x25
 8013bdc:	d1f9      	bne.n	8013bd2 <_vfiprintf_r+0x96>
 8013bde:	ebba 0b04 	subs.w	fp, sl, r4
 8013be2:	d00b      	beq.n	8013bfc <_vfiprintf_r+0xc0>
 8013be4:	465b      	mov	r3, fp
 8013be6:	4622      	mov	r2, r4
 8013be8:	4629      	mov	r1, r5
 8013bea:	4630      	mov	r0, r6
 8013bec:	f7ff ff93 	bl	8013b16 <__sfputs_r>
 8013bf0:	3001      	adds	r0, #1
 8013bf2:	f000 80aa 	beq.w	8013d4a <_vfiprintf_r+0x20e>
 8013bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013bf8:	445a      	add	r2, fp
 8013bfa:	9209      	str	r2, [sp, #36]	; 0x24
 8013bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	f000 80a2 	beq.w	8013d4a <_vfiprintf_r+0x20e>
 8013c06:	2300      	movs	r3, #0
 8013c08:	f04f 32ff 	mov.w	r2, #4294967295
 8013c0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c10:	f10a 0a01 	add.w	sl, sl, #1
 8013c14:	9304      	str	r3, [sp, #16]
 8013c16:	9307      	str	r3, [sp, #28]
 8013c18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013c1c:	931a      	str	r3, [sp, #104]	; 0x68
 8013c1e:	4654      	mov	r4, sl
 8013c20:	2205      	movs	r2, #5
 8013c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c26:	4858      	ldr	r0, [pc, #352]	; (8013d88 <_vfiprintf_r+0x24c>)
 8013c28:	f7ec fab2 	bl	8000190 <memchr>
 8013c2c:	9a04      	ldr	r2, [sp, #16]
 8013c2e:	b9d8      	cbnz	r0, 8013c68 <_vfiprintf_r+0x12c>
 8013c30:	06d1      	lsls	r1, r2, #27
 8013c32:	bf44      	itt	mi
 8013c34:	2320      	movmi	r3, #32
 8013c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c3a:	0713      	lsls	r3, r2, #28
 8013c3c:	bf44      	itt	mi
 8013c3e:	232b      	movmi	r3, #43	; 0x2b
 8013c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c44:	f89a 3000 	ldrb.w	r3, [sl]
 8013c48:	2b2a      	cmp	r3, #42	; 0x2a
 8013c4a:	d015      	beq.n	8013c78 <_vfiprintf_r+0x13c>
 8013c4c:	9a07      	ldr	r2, [sp, #28]
 8013c4e:	4654      	mov	r4, sl
 8013c50:	2000      	movs	r0, #0
 8013c52:	f04f 0c0a 	mov.w	ip, #10
 8013c56:	4621      	mov	r1, r4
 8013c58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013c5c:	3b30      	subs	r3, #48	; 0x30
 8013c5e:	2b09      	cmp	r3, #9
 8013c60:	d94e      	bls.n	8013d00 <_vfiprintf_r+0x1c4>
 8013c62:	b1b0      	cbz	r0, 8013c92 <_vfiprintf_r+0x156>
 8013c64:	9207      	str	r2, [sp, #28]
 8013c66:	e014      	b.n	8013c92 <_vfiprintf_r+0x156>
 8013c68:	eba0 0308 	sub.w	r3, r0, r8
 8013c6c:	fa09 f303 	lsl.w	r3, r9, r3
 8013c70:	4313      	orrs	r3, r2
 8013c72:	9304      	str	r3, [sp, #16]
 8013c74:	46a2      	mov	sl, r4
 8013c76:	e7d2      	b.n	8013c1e <_vfiprintf_r+0xe2>
 8013c78:	9b03      	ldr	r3, [sp, #12]
 8013c7a:	1d19      	adds	r1, r3, #4
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	9103      	str	r1, [sp, #12]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	bfbb      	ittet	lt
 8013c84:	425b      	neglt	r3, r3
 8013c86:	f042 0202 	orrlt.w	r2, r2, #2
 8013c8a:	9307      	strge	r3, [sp, #28]
 8013c8c:	9307      	strlt	r3, [sp, #28]
 8013c8e:	bfb8      	it	lt
 8013c90:	9204      	strlt	r2, [sp, #16]
 8013c92:	7823      	ldrb	r3, [r4, #0]
 8013c94:	2b2e      	cmp	r3, #46	; 0x2e
 8013c96:	d10c      	bne.n	8013cb2 <_vfiprintf_r+0x176>
 8013c98:	7863      	ldrb	r3, [r4, #1]
 8013c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8013c9c:	d135      	bne.n	8013d0a <_vfiprintf_r+0x1ce>
 8013c9e:	9b03      	ldr	r3, [sp, #12]
 8013ca0:	1d1a      	adds	r2, r3, #4
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	9203      	str	r2, [sp, #12]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	bfb8      	it	lt
 8013caa:	f04f 33ff 	movlt.w	r3, #4294967295
 8013cae:	3402      	adds	r4, #2
 8013cb0:	9305      	str	r3, [sp, #20]
 8013cb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013d98 <_vfiprintf_r+0x25c>
 8013cb6:	7821      	ldrb	r1, [r4, #0]
 8013cb8:	2203      	movs	r2, #3
 8013cba:	4650      	mov	r0, sl
 8013cbc:	f7ec fa68 	bl	8000190 <memchr>
 8013cc0:	b140      	cbz	r0, 8013cd4 <_vfiprintf_r+0x198>
 8013cc2:	2340      	movs	r3, #64	; 0x40
 8013cc4:	eba0 000a 	sub.w	r0, r0, sl
 8013cc8:	fa03 f000 	lsl.w	r0, r3, r0
 8013ccc:	9b04      	ldr	r3, [sp, #16]
 8013cce:	4303      	orrs	r3, r0
 8013cd0:	3401      	adds	r4, #1
 8013cd2:	9304      	str	r3, [sp, #16]
 8013cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013cd8:	482c      	ldr	r0, [pc, #176]	; (8013d8c <_vfiprintf_r+0x250>)
 8013cda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013cde:	2206      	movs	r2, #6
 8013ce0:	f7ec fa56 	bl	8000190 <memchr>
 8013ce4:	2800      	cmp	r0, #0
 8013ce6:	d03f      	beq.n	8013d68 <_vfiprintf_r+0x22c>
 8013ce8:	4b29      	ldr	r3, [pc, #164]	; (8013d90 <_vfiprintf_r+0x254>)
 8013cea:	bb1b      	cbnz	r3, 8013d34 <_vfiprintf_r+0x1f8>
 8013cec:	9b03      	ldr	r3, [sp, #12]
 8013cee:	3307      	adds	r3, #7
 8013cf0:	f023 0307 	bic.w	r3, r3, #7
 8013cf4:	3308      	adds	r3, #8
 8013cf6:	9303      	str	r3, [sp, #12]
 8013cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cfa:	443b      	add	r3, r7
 8013cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8013cfe:	e767      	b.n	8013bd0 <_vfiprintf_r+0x94>
 8013d00:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d04:	460c      	mov	r4, r1
 8013d06:	2001      	movs	r0, #1
 8013d08:	e7a5      	b.n	8013c56 <_vfiprintf_r+0x11a>
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	3401      	adds	r4, #1
 8013d0e:	9305      	str	r3, [sp, #20]
 8013d10:	4619      	mov	r1, r3
 8013d12:	f04f 0c0a 	mov.w	ip, #10
 8013d16:	4620      	mov	r0, r4
 8013d18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d1c:	3a30      	subs	r2, #48	; 0x30
 8013d1e:	2a09      	cmp	r2, #9
 8013d20:	d903      	bls.n	8013d2a <_vfiprintf_r+0x1ee>
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d0c5      	beq.n	8013cb2 <_vfiprintf_r+0x176>
 8013d26:	9105      	str	r1, [sp, #20]
 8013d28:	e7c3      	b.n	8013cb2 <_vfiprintf_r+0x176>
 8013d2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8013d2e:	4604      	mov	r4, r0
 8013d30:	2301      	movs	r3, #1
 8013d32:	e7f0      	b.n	8013d16 <_vfiprintf_r+0x1da>
 8013d34:	ab03      	add	r3, sp, #12
 8013d36:	9300      	str	r3, [sp, #0]
 8013d38:	462a      	mov	r2, r5
 8013d3a:	4b16      	ldr	r3, [pc, #88]	; (8013d94 <_vfiprintf_r+0x258>)
 8013d3c:	a904      	add	r1, sp, #16
 8013d3e:	4630      	mov	r0, r6
 8013d40:	f3af 8000 	nop.w
 8013d44:	4607      	mov	r7, r0
 8013d46:	1c78      	adds	r0, r7, #1
 8013d48:	d1d6      	bne.n	8013cf8 <_vfiprintf_r+0x1bc>
 8013d4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d4c:	07d9      	lsls	r1, r3, #31
 8013d4e:	d405      	bmi.n	8013d5c <_vfiprintf_r+0x220>
 8013d50:	89ab      	ldrh	r3, [r5, #12]
 8013d52:	059a      	lsls	r2, r3, #22
 8013d54:	d402      	bmi.n	8013d5c <_vfiprintf_r+0x220>
 8013d56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d58:	f000 fd6b 	bl	8014832 <__retarget_lock_release_recursive>
 8013d5c:	89ab      	ldrh	r3, [r5, #12]
 8013d5e:	065b      	lsls	r3, r3, #25
 8013d60:	f53f af12 	bmi.w	8013b88 <_vfiprintf_r+0x4c>
 8013d64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d66:	e711      	b.n	8013b8c <_vfiprintf_r+0x50>
 8013d68:	ab03      	add	r3, sp, #12
 8013d6a:	9300      	str	r3, [sp, #0]
 8013d6c:	462a      	mov	r2, r5
 8013d6e:	4b09      	ldr	r3, [pc, #36]	; (8013d94 <_vfiprintf_r+0x258>)
 8013d70:	a904      	add	r1, sp, #16
 8013d72:	4630      	mov	r0, r6
 8013d74:	f000 f880 	bl	8013e78 <_printf_i>
 8013d78:	e7e4      	b.n	8013d44 <_vfiprintf_r+0x208>
 8013d7a:	bf00      	nop
 8013d7c:	08017204 	.word	0x08017204
 8013d80:	08017224 	.word	0x08017224
 8013d84:	080171e4 	.word	0x080171e4
 8013d88:	080171b0 	.word	0x080171b0
 8013d8c:	080171ba 	.word	0x080171ba
 8013d90:	00000000 	.word	0x00000000
 8013d94:	08013b17 	.word	0x08013b17
 8013d98:	080171b6 	.word	0x080171b6

08013d9c <_printf_common>:
 8013d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013da0:	4616      	mov	r6, r2
 8013da2:	4699      	mov	r9, r3
 8013da4:	688a      	ldr	r2, [r1, #8]
 8013da6:	690b      	ldr	r3, [r1, #16]
 8013da8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013dac:	4293      	cmp	r3, r2
 8013dae:	bfb8      	it	lt
 8013db0:	4613      	movlt	r3, r2
 8013db2:	6033      	str	r3, [r6, #0]
 8013db4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013db8:	4607      	mov	r7, r0
 8013dba:	460c      	mov	r4, r1
 8013dbc:	b10a      	cbz	r2, 8013dc2 <_printf_common+0x26>
 8013dbe:	3301      	adds	r3, #1
 8013dc0:	6033      	str	r3, [r6, #0]
 8013dc2:	6823      	ldr	r3, [r4, #0]
 8013dc4:	0699      	lsls	r1, r3, #26
 8013dc6:	bf42      	ittt	mi
 8013dc8:	6833      	ldrmi	r3, [r6, #0]
 8013dca:	3302      	addmi	r3, #2
 8013dcc:	6033      	strmi	r3, [r6, #0]
 8013dce:	6825      	ldr	r5, [r4, #0]
 8013dd0:	f015 0506 	ands.w	r5, r5, #6
 8013dd4:	d106      	bne.n	8013de4 <_printf_common+0x48>
 8013dd6:	f104 0a19 	add.w	sl, r4, #25
 8013dda:	68e3      	ldr	r3, [r4, #12]
 8013ddc:	6832      	ldr	r2, [r6, #0]
 8013dde:	1a9b      	subs	r3, r3, r2
 8013de0:	42ab      	cmp	r3, r5
 8013de2:	dc26      	bgt.n	8013e32 <_printf_common+0x96>
 8013de4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013de8:	1e13      	subs	r3, r2, #0
 8013dea:	6822      	ldr	r2, [r4, #0]
 8013dec:	bf18      	it	ne
 8013dee:	2301      	movne	r3, #1
 8013df0:	0692      	lsls	r2, r2, #26
 8013df2:	d42b      	bmi.n	8013e4c <_printf_common+0xb0>
 8013df4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013df8:	4649      	mov	r1, r9
 8013dfa:	4638      	mov	r0, r7
 8013dfc:	47c0      	blx	r8
 8013dfe:	3001      	adds	r0, #1
 8013e00:	d01e      	beq.n	8013e40 <_printf_common+0xa4>
 8013e02:	6823      	ldr	r3, [r4, #0]
 8013e04:	68e5      	ldr	r5, [r4, #12]
 8013e06:	6832      	ldr	r2, [r6, #0]
 8013e08:	f003 0306 	and.w	r3, r3, #6
 8013e0c:	2b04      	cmp	r3, #4
 8013e0e:	bf08      	it	eq
 8013e10:	1aad      	subeq	r5, r5, r2
 8013e12:	68a3      	ldr	r3, [r4, #8]
 8013e14:	6922      	ldr	r2, [r4, #16]
 8013e16:	bf0c      	ite	eq
 8013e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013e1c:	2500      	movne	r5, #0
 8013e1e:	4293      	cmp	r3, r2
 8013e20:	bfc4      	itt	gt
 8013e22:	1a9b      	subgt	r3, r3, r2
 8013e24:	18ed      	addgt	r5, r5, r3
 8013e26:	2600      	movs	r6, #0
 8013e28:	341a      	adds	r4, #26
 8013e2a:	42b5      	cmp	r5, r6
 8013e2c:	d11a      	bne.n	8013e64 <_printf_common+0xc8>
 8013e2e:	2000      	movs	r0, #0
 8013e30:	e008      	b.n	8013e44 <_printf_common+0xa8>
 8013e32:	2301      	movs	r3, #1
 8013e34:	4652      	mov	r2, sl
 8013e36:	4649      	mov	r1, r9
 8013e38:	4638      	mov	r0, r7
 8013e3a:	47c0      	blx	r8
 8013e3c:	3001      	adds	r0, #1
 8013e3e:	d103      	bne.n	8013e48 <_printf_common+0xac>
 8013e40:	f04f 30ff 	mov.w	r0, #4294967295
 8013e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e48:	3501      	adds	r5, #1
 8013e4a:	e7c6      	b.n	8013dda <_printf_common+0x3e>
 8013e4c:	18e1      	adds	r1, r4, r3
 8013e4e:	1c5a      	adds	r2, r3, #1
 8013e50:	2030      	movs	r0, #48	; 0x30
 8013e52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013e56:	4422      	add	r2, r4
 8013e58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013e5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013e60:	3302      	adds	r3, #2
 8013e62:	e7c7      	b.n	8013df4 <_printf_common+0x58>
 8013e64:	2301      	movs	r3, #1
 8013e66:	4622      	mov	r2, r4
 8013e68:	4649      	mov	r1, r9
 8013e6a:	4638      	mov	r0, r7
 8013e6c:	47c0      	blx	r8
 8013e6e:	3001      	adds	r0, #1
 8013e70:	d0e6      	beq.n	8013e40 <_printf_common+0xa4>
 8013e72:	3601      	adds	r6, #1
 8013e74:	e7d9      	b.n	8013e2a <_printf_common+0x8e>
	...

08013e78 <_printf_i>:
 8013e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013e7c:	7e0f      	ldrb	r7, [r1, #24]
 8013e7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013e80:	2f78      	cmp	r7, #120	; 0x78
 8013e82:	4691      	mov	r9, r2
 8013e84:	4680      	mov	r8, r0
 8013e86:	460c      	mov	r4, r1
 8013e88:	469a      	mov	sl, r3
 8013e8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013e8e:	d807      	bhi.n	8013ea0 <_printf_i+0x28>
 8013e90:	2f62      	cmp	r7, #98	; 0x62
 8013e92:	d80a      	bhi.n	8013eaa <_printf_i+0x32>
 8013e94:	2f00      	cmp	r7, #0
 8013e96:	f000 80d8 	beq.w	801404a <_printf_i+0x1d2>
 8013e9a:	2f58      	cmp	r7, #88	; 0x58
 8013e9c:	f000 80a3 	beq.w	8013fe6 <_printf_i+0x16e>
 8013ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013ea4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013ea8:	e03a      	b.n	8013f20 <_printf_i+0xa8>
 8013eaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013eae:	2b15      	cmp	r3, #21
 8013eb0:	d8f6      	bhi.n	8013ea0 <_printf_i+0x28>
 8013eb2:	a101      	add	r1, pc, #4	; (adr r1, 8013eb8 <_printf_i+0x40>)
 8013eb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013eb8:	08013f11 	.word	0x08013f11
 8013ebc:	08013f25 	.word	0x08013f25
 8013ec0:	08013ea1 	.word	0x08013ea1
 8013ec4:	08013ea1 	.word	0x08013ea1
 8013ec8:	08013ea1 	.word	0x08013ea1
 8013ecc:	08013ea1 	.word	0x08013ea1
 8013ed0:	08013f25 	.word	0x08013f25
 8013ed4:	08013ea1 	.word	0x08013ea1
 8013ed8:	08013ea1 	.word	0x08013ea1
 8013edc:	08013ea1 	.word	0x08013ea1
 8013ee0:	08013ea1 	.word	0x08013ea1
 8013ee4:	08014031 	.word	0x08014031
 8013ee8:	08013f55 	.word	0x08013f55
 8013eec:	08014013 	.word	0x08014013
 8013ef0:	08013ea1 	.word	0x08013ea1
 8013ef4:	08013ea1 	.word	0x08013ea1
 8013ef8:	08014053 	.word	0x08014053
 8013efc:	08013ea1 	.word	0x08013ea1
 8013f00:	08013f55 	.word	0x08013f55
 8013f04:	08013ea1 	.word	0x08013ea1
 8013f08:	08013ea1 	.word	0x08013ea1
 8013f0c:	0801401b 	.word	0x0801401b
 8013f10:	682b      	ldr	r3, [r5, #0]
 8013f12:	1d1a      	adds	r2, r3, #4
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	602a      	str	r2, [r5, #0]
 8013f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013f1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013f20:	2301      	movs	r3, #1
 8013f22:	e0a3      	b.n	801406c <_printf_i+0x1f4>
 8013f24:	6820      	ldr	r0, [r4, #0]
 8013f26:	6829      	ldr	r1, [r5, #0]
 8013f28:	0606      	lsls	r6, r0, #24
 8013f2a:	f101 0304 	add.w	r3, r1, #4
 8013f2e:	d50a      	bpl.n	8013f46 <_printf_i+0xce>
 8013f30:	680e      	ldr	r6, [r1, #0]
 8013f32:	602b      	str	r3, [r5, #0]
 8013f34:	2e00      	cmp	r6, #0
 8013f36:	da03      	bge.n	8013f40 <_printf_i+0xc8>
 8013f38:	232d      	movs	r3, #45	; 0x2d
 8013f3a:	4276      	negs	r6, r6
 8013f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013f40:	485e      	ldr	r0, [pc, #376]	; (80140bc <_printf_i+0x244>)
 8013f42:	230a      	movs	r3, #10
 8013f44:	e019      	b.n	8013f7a <_printf_i+0x102>
 8013f46:	680e      	ldr	r6, [r1, #0]
 8013f48:	602b      	str	r3, [r5, #0]
 8013f4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013f4e:	bf18      	it	ne
 8013f50:	b236      	sxthne	r6, r6
 8013f52:	e7ef      	b.n	8013f34 <_printf_i+0xbc>
 8013f54:	682b      	ldr	r3, [r5, #0]
 8013f56:	6820      	ldr	r0, [r4, #0]
 8013f58:	1d19      	adds	r1, r3, #4
 8013f5a:	6029      	str	r1, [r5, #0]
 8013f5c:	0601      	lsls	r1, r0, #24
 8013f5e:	d501      	bpl.n	8013f64 <_printf_i+0xec>
 8013f60:	681e      	ldr	r6, [r3, #0]
 8013f62:	e002      	b.n	8013f6a <_printf_i+0xf2>
 8013f64:	0646      	lsls	r6, r0, #25
 8013f66:	d5fb      	bpl.n	8013f60 <_printf_i+0xe8>
 8013f68:	881e      	ldrh	r6, [r3, #0]
 8013f6a:	4854      	ldr	r0, [pc, #336]	; (80140bc <_printf_i+0x244>)
 8013f6c:	2f6f      	cmp	r7, #111	; 0x6f
 8013f6e:	bf0c      	ite	eq
 8013f70:	2308      	moveq	r3, #8
 8013f72:	230a      	movne	r3, #10
 8013f74:	2100      	movs	r1, #0
 8013f76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013f7a:	6865      	ldr	r5, [r4, #4]
 8013f7c:	60a5      	str	r5, [r4, #8]
 8013f7e:	2d00      	cmp	r5, #0
 8013f80:	bfa2      	ittt	ge
 8013f82:	6821      	ldrge	r1, [r4, #0]
 8013f84:	f021 0104 	bicge.w	r1, r1, #4
 8013f88:	6021      	strge	r1, [r4, #0]
 8013f8a:	b90e      	cbnz	r6, 8013f90 <_printf_i+0x118>
 8013f8c:	2d00      	cmp	r5, #0
 8013f8e:	d04d      	beq.n	801402c <_printf_i+0x1b4>
 8013f90:	4615      	mov	r5, r2
 8013f92:	fbb6 f1f3 	udiv	r1, r6, r3
 8013f96:	fb03 6711 	mls	r7, r3, r1, r6
 8013f9a:	5dc7      	ldrb	r7, [r0, r7]
 8013f9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013fa0:	4637      	mov	r7, r6
 8013fa2:	42bb      	cmp	r3, r7
 8013fa4:	460e      	mov	r6, r1
 8013fa6:	d9f4      	bls.n	8013f92 <_printf_i+0x11a>
 8013fa8:	2b08      	cmp	r3, #8
 8013faa:	d10b      	bne.n	8013fc4 <_printf_i+0x14c>
 8013fac:	6823      	ldr	r3, [r4, #0]
 8013fae:	07de      	lsls	r6, r3, #31
 8013fb0:	d508      	bpl.n	8013fc4 <_printf_i+0x14c>
 8013fb2:	6923      	ldr	r3, [r4, #16]
 8013fb4:	6861      	ldr	r1, [r4, #4]
 8013fb6:	4299      	cmp	r1, r3
 8013fb8:	bfde      	ittt	le
 8013fba:	2330      	movle	r3, #48	; 0x30
 8013fbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013fc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013fc4:	1b52      	subs	r2, r2, r5
 8013fc6:	6122      	str	r2, [r4, #16]
 8013fc8:	f8cd a000 	str.w	sl, [sp]
 8013fcc:	464b      	mov	r3, r9
 8013fce:	aa03      	add	r2, sp, #12
 8013fd0:	4621      	mov	r1, r4
 8013fd2:	4640      	mov	r0, r8
 8013fd4:	f7ff fee2 	bl	8013d9c <_printf_common>
 8013fd8:	3001      	adds	r0, #1
 8013fda:	d14c      	bne.n	8014076 <_printf_i+0x1fe>
 8013fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8013fe0:	b004      	add	sp, #16
 8013fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fe6:	4835      	ldr	r0, [pc, #212]	; (80140bc <_printf_i+0x244>)
 8013fe8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013fec:	6829      	ldr	r1, [r5, #0]
 8013fee:	6823      	ldr	r3, [r4, #0]
 8013ff0:	f851 6b04 	ldr.w	r6, [r1], #4
 8013ff4:	6029      	str	r1, [r5, #0]
 8013ff6:	061d      	lsls	r5, r3, #24
 8013ff8:	d514      	bpl.n	8014024 <_printf_i+0x1ac>
 8013ffa:	07df      	lsls	r7, r3, #31
 8013ffc:	bf44      	itt	mi
 8013ffe:	f043 0320 	orrmi.w	r3, r3, #32
 8014002:	6023      	strmi	r3, [r4, #0]
 8014004:	b91e      	cbnz	r6, 801400e <_printf_i+0x196>
 8014006:	6823      	ldr	r3, [r4, #0]
 8014008:	f023 0320 	bic.w	r3, r3, #32
 801400c:	6023      	str	r3, [r4, #0]
 801400e:	2310      	movs	r3, #16
 8014010:	e7b0      	b.n	8013f74 <_printf_i+0xfc>
 8014012:	6823      	ldr	r3, [r4, #0]
 8014014:	f043 0320 	orr.w	r3, r3, #32
 8014018:	6023      	str	r3, [r4, #0]
 801401a:	2378      	movs	r3, #120	; 0x78
 801401c:	4828      	ldr	r0, [pc, #160]	; (80140c0 <_printf_i+0x248>)
 801401e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014022:	e7e3      	b.n	8013fec <_printf_i+0x174>
 8014024:	0659      	lsls	r1, r3, #25
 8014026:	bf48      	it	mi
 8014028:	b2b6      	uxthmi	r6, r6
 801402a:	e7e6      	b.n	8013ffa <_printf_i+0x182>
 801402c:	4615      	mov	r5, r2
 801402e:	e7bb      	b.n	8013fa8 <_printf_i+0x130>
 8014030:	682b      	ldr	r3, [r5, #0]
 8014032:	6826      	ldr	r6, [r4, #0]
 8014034:	6961      	ldr	r1, [r4, #20]
 8014036:	1d18      	adds	r0, r3, #4
 8014038:	6028      	str	r0, [r5, #0]
 801403a:	0635      	lsls	r5, r6, #24
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	d501      	bpl.n	8014044 <_printf_i+0x1cc>
 8014040:	6019      	str	r1, [r3, #0]
 8014042:	e002      	b.n	801404a <_printf_i+0x1d2>
 8014044:	0670      	lsls	r0, r6, #25
 8014046:	d5fb      	bpl.n	8014040 <_printf_i+0x1c8>
 8014048:	8019      	strh	r1, [r3, #0]
 801404a:	2300      	movs	r3, #0
 801404c:	6123      	str	r3, [r4, #16]
 801404e:	4615      	mov	r5, r2
 8014050:	e7ba      	b.n	8013fc8 <_printf_i+0x150>
 8014052:	682b      	ldr	r3, [r5, #0]
 8014054:	1d1a      	adds	r2, r3, #4
 8014056:	602a      	str	r2, [r5, #0]
 8014058:	681d      	ldr	r5, [r3, #0]
 801405a:	6862      	ldr	r2, [r4, #4]
 801405c:	2100      	movs	r1, #0
 801405e:	4628      	mov	r0, r5
 8014060:	f7ec f896 	bl	8000190 <memchr>
 8014064:	b108      	cbz	r0, 801406a <_printf_i+0x1f2>
 8014066:	1b40      	subs	r0, r0, r5
 8014068:	6060      	str	r0, [r4, #4]
 801406a:	6863      	ldr	r3, [r4, #4]
 801406c:	6123      	str	r3, [r4, #16]
 801406e:	2300      	movs	r3, #0
 8014070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014074:	e7a8      	b.n	8013fc8 <_printf_i+0x150>
 8014076:	6923      	ldr	r3, [r4, #16]
 8014078:	462a      	mov	r2, r5
 801407a:	4649      	mov	r1, r9
 801407c:	4640      	mov	r0, r8
 801407e:	47d0      	blx	sl
 8014080:	3001      	adds	r0, #1
 8014082:	d0ab      	beq.n	8013fdc <_printf_i+0x164>
 8014084:	6823      	ldr	r3, [r4, #0]
 8014086:	079b      	lsls	r3, r3, #30
 8014088:	d413      	bmi.n	80140b2 <_printf_i+0x23a>
 801408a:	68e0      	ldr	r0, [r4, #12]
 801408c:	9b03      	ldr	r3, [sp, #12]
 801408e:	4298      	cmp	r0, r3
 8014090:	bfb8      	it	lt
 8014092:	4618      	movlt	r0, r3
 8014094:	e7a4      	b.n	8013fe0 <_printf_i+0x168>
 8014096:	2301      	movs	r3, #1
 8014098:	4632      	mov	r2, r6
 801409a:	4649      	mov	r1, r9
 801409c:	4640      	mov	r0, r8
 801409e:	47d0      	blx	sl
 80140a0:	3001      	adds	r0, #1
 80140a2:	d09b      	beq.n	8013fdc <_printf_i+0x164>
 80140a4:	3501      	adds	r5, #1
 80140a6:	68e3      	ldr	r3, [r4, #12]
 80140a8:	9903      	ldr	r1, [sp, #12]
 80140aa:	1a5b      	subs	r3, r3, r1
 80140ac:	42ab      	cmp	r3, r5
 80140ae:	dcf2      	bgt.n	8014096 <_printf_i+0x21e>
 80140b0:	e7eb      	b.n	801408a <_printf_i+0x212>
 80140b2:	2500      	movs	r5, #0
 80140b4:	f104 0619 	add.w	r6, r4, #25
 80140b8:	e7f5      	b.n	80140a6 <_printf_i+0x22e>
 80140ba:	bf00      	nop
 80140bc:	080171c1 	.word	0x080171c1
 80140c0:	080171d2 	.word	0x080171d2

080140c4 <__swbuf_r>:
 80140c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140c6:	460e      	mov	r6, r1
 80140c8:	4614      	mov	r4, r2
 80140ca:	4605      	mov	r5, r0
 80140cc:	b118      	cbz	r0, 80140d6 <__swbuf_r+0x12>
 80140ce:	6983      	ldr	r3, [r0, #24]
 80140d0:	b90b      	cbnz	r3, 80140d6 <__swbuf_r+0x12>
 80140d2:	f000 fb0f 	bl	80146f4 <__sinit>
 80140d6:	4b21      	ldr	r3, [pc, #132]	; (801415c <__swbuf_r+0x98>)
 80140d8:	429c      	cmp	r4, r3
 80140da:	d12b      	bne.n	8014134 <__swbuf_r+0x70>
 80140dc:	686c      	ldr	r4, [r5, #4]
 80140de:	69a3      	ldr	r3, [r4, #24]
 80140e0:	60a3      	str	r3, [r4, #8]
 80140e2:	89a3      	ldrh	r3, [r4, #12]
 80140e4:	071a      	lsls	r2, r3, #28
 80140e6:	d52f      	bpl.n	8014148 <__swbuf_r+0x84>
 80140e8:	6923      	ldr	r3, [r4, #16]
 80140ea:	b36b      	cbz	r3, 8014148 <__swbuf_r+0x84>
 80140ec:	6923      	ldr	r3, [r4, #16]
 80140ee:	6820      	ldr	r0, [r4, #0]
 80140f0:	1ac0      	subs	r0, r0, r3
 80140f2:	6963      	ldr	r3, [r4, #20]
 80140f4:	b2f6      	uxtb	r6, r6
 80140f6:	4283      	cmp	r3, r0
 80140f8:	4637      	mov	r7, r6
 80140fa:	dc04      	bgt.n	8014106 <__swbuf_r+0x42>
 80140fc:	4621      	mov	r1, r4
 80140fe:	4628      	mov	r0, r5
 8014100:	f000 fa64 	bl	80145cc <_fflush_r>
 8014104:	bb30      	cbnz	r0, 8014154 <__swbuf_r+0x90>
 8014106:	68a3      	ldr	r3, [r4, #8]
 8014108:	3b01      	subs	r3, #1
 801410a:	60a3      	str	r3, [r4, #8]
 801410c:	6823      	ldr	r3, [r4, #0]
 801410e:	1c5a      	adds	r2, r3, #1
 8014110:	6022      	str	r2, [r4, #0]
 8014112:	701e      	strb	r6, [r3, #0]
 8014114:	6963      	ldr	r3, [r4, #20]
 8014116:	3001      	adds	r0, #1
 8014118:	4283      	cmp	r3, r0
 801411a:	d004      	beq.n	8014126 <__swbuf_r+0x62>
 801411c:	89a3      	ldrh	r3, [r4, #12]
 801411e:	07db      	lsls	r3, r3, #31
 8014120:	d506      	bpl.n	8014130 <__swbuf_r+0x6c>
 8014122:	2e0a      	cmp	r6, #10
 8014124:	d104      	bne.n	8014130 <__swbuf_r+0x6c>
 8014126:	4621      	mov	r1, r4
 8014128:	4628      	mov	r0, r5
 801412a:	f000 fa4f 	bl	80145cc <_fflush_r>
 801412e:	b988      	cbnz	r0, 8014154 <__swbuf_r+0x90>
 8014130:	4638      	mov	r0, r7
 8014132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014134:	4b0a      	ldr	r3, [pc, #40]	; (8014160 <__swbuf_r+0x9c>)
 8014136:	429c      	cmp	r4, r3
 8014138:	d101      	bne.n	801413e <__swbuf_r+0x7a>
 801413a:	68ac      	ldr	r4, [r5, #8]
 801413c:	e7cf      	b.n	80140de <__swbuf_r+0x1a>
 801413e:	4b09      	ldr	r3, [pc, #36]	; (8014164 <__swbuf_r+0xa0>)
 8014140:	429c      	cmp	r4, r3
 8014142:	bf08      	it	eq
 8014144:	68ec      	ldreq	r4, [r5, #12]
 8014146:	e7ca      	b.n	80140de <__swbuf_r+0x1a>
 8014148:	4621      	mov	r1, r4
 801414a:	4628      	mov	r0, r5
 801414c:	f000 f80c 	bl	8014168 <__swsetup_r>
 8014150:	2800      	cmp	r0, #0
 8014152:	d0cb      	beq.n	80140ec <__swbuf_r+0x28>
 8014154:	f04f 37ff 	mov.w	r7, #4294967295
 8014158:	e7ea      	b.n	8014130 <__swbuf_r+0x6c>
 801415a:	bf00      	nop
 801415c:	08017204 	.word	0x08017204
 8014160:	08017224 	.word	0x08017224
 8014164:	080171e4 	.word	0x080171e4

08014168 <__swsetup_r>:
 8014168:	4b32      	ldr	r3, [pc, #200]	; (8014234 <__swsetup_r+0xcc>)
 801416a:	b570      	push	{r4, r5, r6, lr}
 801416c:	681d      	ldr	r5, [r3, #0]
 801416e:	4606      	mov	r6, r0
 8014170:	460c      	mov	r4, r1
 8014172:	b125      	cbz	r5, 801417e <__swsetup_r+0x16>
 8014174:	69ab      	ldr	r3, [r5, #24]
 8014176:	b913      	cbnz	r3, 801417e <__swsetup_r+0x16>
 8014178:	4628      	mov	r0, r5
 801417a:	f000 fabb 	bl	80146f4 <__sinit>
 801417e:	4b2e      	ldr	r3, [pc, #184]	; (8014238 <__swsetup_r+0xd0>)
 8014180:	429c      	cmp	r4, r3
 8014182:	d10f      	bne.n	80141a4 <__swsetup_r+0x3c>
 8014184:	686c      	ldr	r4, [r5, #4]
 8014186:	89a3      	ldrh	r3, [r4, #12]
 8014188:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801418c:	0719      	lsls	r1, r3, #28
 801418e:	d42c      	bmi.n	80141ea <__swsetup_r+0x82>
 8014190:	06dd      	lsls	r5, r3, #27
 8014192:	d411      	bmi.n	80141b8 <__swsetup_r+0x50>
 8014194:	2309      	movs	r3, #9
 8014196:	6033      	str	r3, [r6, #0]
 8014198:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801419c:	81a3      	strh	r3, [r4, #12]
 801419e:	f04f 30ff 	mov.w	r0, #4294967295
 80141a2:	e03e      	b.n	8014222 <__swsetup_r+0xba>
 80141a4:	4b25      	ldr	r3, [pc, #148]	; (801423c <__swsetup_r+0xd4>)
 80141a6:	429c      	cmp	r4, r3
 80141a8:	d101      	bne.n	80141ae <__swsetup_r+0x46>
 80141aa:	68ac      	ldr	r4, [r5, #8]
 80141ac:	e7eb      	b.n	8014186 <__swsetup_r+0x1e>
 80141ae:	4b24      	ldr	r3, [pc, #144]	; (8014240 <__swsetup_r+0xd8>)
 80141b0:	429c      	cmp	r4, r3
 80141b2:	bf08      	it	eq
 80141b4:	68ec      	ldreq	r4, [r5, #12]
 80141b6:	e7e6      	b.n	8014186 <__swsetup_r+0x1e>
 80141b8:	0758      	lsls	r0, r3, #29
 80141ba:	d512      	bpl.n	80141e2 <__swsetup_r+0x7a>
 80141bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80141be:	b141      	cbz	r1, 80141d2 <__swsetup_r+0x6a>
 80141c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80141c4:	4299      	cmp	r1, r3
 80141c6:	d002      	beq.n	80141ce <__swsetup_r+0x66>
 80141c8:	4630      	mov	r0, r6
 80141ca:	f000 ff51 	bl	8015070 <_free_r>
 80141ce:	2300      	movs	r3, #0
 80141d0:	6363      	str	r3, [r4, #52]	; 0x34
 80141d2:	89a3      	ldrh	r3, [r4, #12]
 80141d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80141d8:	81a3      	strh	r3, [r4, #12]
 80141da:	2300      	movs	r3, #0
 80141dc:	6063      	str	r3, [r4, #4]
 80141de:	6923      	ldr	r3, [r4, #16]
 80141e0:	6023      	str	r3, [r4, #0]
 80141e2:	89a3      	ldrh	r3, [r4, #12]
 80141e4:	f043 0308 	orr.w	r3, r3, #8
 80141e8:	81a3      	strh	r3, [r4, #12]
 80141ea:	6923      	ldr	r3, [r4, #16]
 80141ec:	b94b      	cbnz	r3, 8014202 <__swsetup_r+0x9a>
 80141ee:	89a3      	ldrh	r3, [r4, #12]
 80141f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80141f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80141f8:	d003      	beq.n	8014202 <__swsetup_r+0x9a>
 80141fa:	4621      	mov	r1, r4
 80141fc:	4630      	mov	r0, r6
 80141fe:	f000 fb3f 	bl	8014880 <__smakebuf_r>
 8014202:	89a0      	ldrh	r0, [r4, #12]
 8014204:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014208:	f010 0301 	ands.w	r3, r0, #1
 801420c:	d00a      	beq.n	8014224 <__swsetup_r+0xbc>
 801420e:	2300      	movs	r3, #0
 8014210:	60a3      	str	r3, [r4, #8]
 8014212:	6963      	ldr	r3, [r4, #20]
 8014214:	425b      	negs	r3, r3
 8014216:	61a3      	str	r3, [r4, #24]
 8014218:	6923      	ldr	r3, [r4, #16]
 801421a:	b943      	cbnz	r3, 801422e <__swsetup_r+0xc6>
 801421c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014220:	d1ba      	bne.n	8014198 <__swsetup_r+0x30>
 8014222:	bd70      	pop	{r4, r5, r6, pc}
 8014224:	0781      	lsls	r1, r0, #30
 8014226:	bf58      	it	pl
 8014228:	6963      	ldrpl	r3, [r4, #20]
 801422a:	60a3      	str	r3, [r4, #8]
 801422c:	e7f4      	b.n	8014218 <__swsetup_r+0xb0>
 801422e:	2000      	movs	r0, #0
 8014230:	e7f7      	b.n	8014222 <__swsetup_r+0xba>
 8014232:	bf00      	nop
 8014234:	2000014c 	.word	0x2000014c
 8014238:	08017204 	.word	0x08017204
 801423c:	08017224 	.word	0x08017224
 8014240:	080171e4 	.word	0x080171e4

08014244 <abort>:
 8014244:	b508      	push	{r3, lr}
 8014246:	2006      	movs	r0, #6
 8014248:	f001 f82a 	bl	80152a0 <raise>
 801424c:	2001      	movs	r0, #1
 801424e:	f7ee fb9b 	bl	8002988 <_exit>

08014252 <print_e>:
 8014252:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014254:	b087      	sub	sp, #28
 8014256:	ec43 2b10 	vmov	d0, r2, r3
 801425a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801425c:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8014260:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8014262:	ab04      	add	r3, sp, #16
 8014264:	9301      	str	r3, [sp, #4]
 8014266:	ab03      	add	r3, sp, #12
 8014268:	9300      	str	r3, [sp, #0]
 801426a:	1c62      	adds	r2, r4, #1
 801426c:	ab05      	add	r3, sp, #20
 801426e:	460f      	mov	r7, r1
 8014270:	2102      	movs	r1, #2
 8014272:	f001 f92d 	bl	80154d0 <_dtoa_r>
 8014276:	9a05      	ldr	r2, [sp, #20]
 8014278:	f242 730f 	movw	r3, #9999	; 0x270f
 801427c:	429a      	cmp	r2, r3
 801427e:	d105      	bne.n	801428c <print_e+0x3a>
 8014280:	4601      	mov	r1, r0
 8014282:	4638      	mov	r0, r7
 8014284:	f001 f86b 	bl	801535e <strcpy>
 8014288:	b007      	add	sp, #28
 801428a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801428c:	463b      	mov	r3, r7
 801428e:	7801      	ldrb	r1, [r0, #0]
 8014290:	f803 1b01 	strb.w	r1, [r3], #1
 8014294:	2c00      	cmp	r4, #0
 8014296:	bfc8      	it	gt
 8014298:	2501      	movgt	r5, #1
 801429a:	212e      	movs	r1, #46	; 0x2e
 801429c:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 80142a0:	b10f      	cbz	r7, 80142a6 <print_e+0x54>
 80142a2:	2c00      	cmp	r4, #0
 80142a4:	dc37      	bgt.n	8014316 <print_e+0xc4>
 80142a6:	2e67      	cmp	r6, #103	; 0x67
 80142a8:	d046      	beq.n	8014338 <print_e+0xe6>
 80142aa:	2e47      	cmp	r6, #71	; 0x47
 80142ac:	d046      	beq.n	801433c <print_e+0xea>
 80142ae:	212e      	movs	r1, #46	; 0x2e
 80142b0:	2030      	movs	r0, #48	; 0x30
 80142b2:	2c00      	cmp	r4, #0
 80142b4:	dc38      	bgt.n	8014328 <print_e+0xd6>
 80142b6:	1e51      	subs	r1, r2, #1
 80142b8:	2900      	cmp	r1, #0
 80142ba:	bfb8      	it	lt
 80142bc:	f1c2 0201 	rsblt	r2, r2, #1
 80142c0:	4618      	mov	r0, r3
 80142c2:	9105      	str	r1, [sp, #20]
 80142c4:	bfac      	ite	ge
 80142c6:	222b      	movge	r2, #43	; 0x2b
 80142c8:	9205      	strlt	r2, [sp, #20]
 80142ca:	f800 6b02 	strb.w	r6, [r0], #2
 80142ce:	bfa8      	it	ge
 80142d0:	705a      	strbge	r2, [r3, #1]
 80142d2:	9a05      	ldr	r2, [sp, #20]
 80142d4:	bfbc      	itt	lt
 80142d6:	212d      	movlt	r1, #45	; 0x2d
 80142d8:	7059      	strblt	r1, [r3, #1]
 80142da:	2a63      	cmp	r2, #99	; 0x63
 80142dc:	dd0b      	ble.n	80142f6 <print_e+0xa4>
 80142de:	2164      	movs	r1, #100	; 0x64
 80142e0:	fb92 f1f1 	sdiv	r1, r2, r1
 80142e4:	f101 0430 	add.w	r4, r1, #48	; 0x30
 80142e8:	1cd8      	adds	r0, r3, #3
 80142ea:	709c      	strb	r4, [r3, #2]
 80142ec:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80142f0:	fb03 2201 	mla	r2, r3, r1, r2
 80142f4:	9205      	str	r2, [sp, #20]
 80142f6:	9b05      	ldr	r3, [sp, #20]
 80142f8:	220a      	movs	r2, #10
 80142fa:	fb93 f2f2 	sdiv	r2, r3, r2
 80142fe:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8014302:	7001      	strb	r1, [r0, #0]
 8014304:	f06f 0109 	mvn.w	r1, #9
 8014308:	fb01 3302 	mla	r3, r1, r2, r3
 801430c:	3330      	adds	r3, #48	; 0x30
 801430e:	7043      	strb	r3, [r0, #1]
 8014310:	2300      	movs	r3, #0
 8014312:	7083      	strb	r3, [r0, #2]
 8014314:	e7b8      	b.n	8014288 <print_e+0x36>
 8014316:	b10d      	cbz	r5, 801431c <print_e+0xca>
 8014318:	f803 1b01 	strb.w	r1, [r3], #1
 801431c:	7805      	ldrb	r5, [r0, #0]
 801431e:	f803 5b01 	strb.w	r5, [r3], #1
 8014322:	3c01      	subs	r4, #1
 8014324:	2500      	movs	r5, #0
 8014326:	e7b9      	b.n	801429c <print_e+0x4a>
 8014328:	b10d      	cbz	r5, 801432e <print_e+0xdc>
 801432a:	f803 1b01 	strb.w	r1, [r3], #1
 801432e:	f803 0b01 	strb.w	r0, [r3], #1
 8014332:	3c01      	subs	r4, #1
 8014334:	2500      	movs	r5, #0
 8014336:	e7bc      	b.n	80142b2 <print_e+0x60>
 8014338:	2665      	movs	r6, #101	; 0x65
 801433a:	e7bc      	b.n	80142b6 <print_e+0x64>
 801433c:	2645      	movs	r6, #69	; 0x45
 801433e:	e7ba      	b.n	80142b6 <print_e+0x64>

08014340 <_gcvt>:
 8014340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014344:	ec55 4b10 	vmov	r4, r5, d0
 8014348:	b088      	sub	sp, #32
 801434a:	4681      	mov	r9, r0
 801434c:	4688      	mov	r8, r1
 801434e:	4616      	mov	r6, r2
 8014350:	469a      	mov	sl, r3
 8014352:	ee10 0a10 	vmov	r0, s0
 8014356:	2200      	movs	r2, #0
 8014358:	2300      	movs	r3, #0
 801435a:	4629      	mov	r1, r5
 801435c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801435e:	f7ec fb95 	bl	8000a8c <__aeabi_dcmplt>
 8014362:	b110      	cbz	r0, 801436a <_gcvt+0x2a>
 8014364:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8014368:	461d      	mov	r5, r3
 801436a:	2200      	movs	r2, #0
 801436c:	2300      	movs	r3, #0
 801436e:	4620      	mov	r0, r4
 8014370:	4629      	mov	r1, r5
 8014372:	f7ec fb81 	bl	8000a78 <__aeabi_dcmpeq>
 8014376:	b138      	cbz	r0, 8014388 <_gcvt+0x48>
 8014378:	2330      	movs	r3, #48	; 0x30
 801437a:	7033      	strb	r3, [r6, #0]
 801437c:	2300      	movs	r3, #0
 801437e:	7073      	strb	r3, [r6, #1]
 8014380:	4630      	mov	r0, r6
 8014382:	b008      	add	sp, #32
 8014384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014388:	a34b      	add	r3, pc, #300	; (adr r3, 80144b8 <_gcvt+0x178>)
 801438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801438e:	4620      	mov	r0, r4
 8014390:	4629      	mov	r1, r5
 8014392:	f7ec fb85 	bl	8000aa0 <__aeabi_dcmple>
 8014396:	b158      	cbz	r0, 80143b0 <_gcvt+0x70>
 8014398:	f108 31ff 	add.w	r1, r8, #4294967295
 801439c:	9100      	str	r1, [sp, #0]
 801439e:	e9cd a701 	strd	sl, r7, [sp, #4]
 80143a2:	4622      	mov	r2, r4
 80143a4:	462b      	mov	r3, r5
 80143a6:	4631      	mov	r1, r6
 80143a8:	4648      	mov	r0, r9
 80143aa:	f7ff ff52 	bl	8014252 <print_e>
 80143ae:	e7e7      	b.n	8014380 <_gcvt+0x40>
 80143b0:	4640      	mov	r0, r8
 80143b2:	f000 fe29 	bl	8015008 <_mprec_log10>
 80143b6:	4622      	mov	r2, r4
 80143b8:	ec51 0b10 	vmov	r0, r1, d0
 80143bc:	462b      	mov	r3, r5
 80143be:	f7ec fb6f 	bl	8000aa0 <__aeabi_dcmple>
 80143c2:	2800      	cmp	r0, #0
 80143c4:	d1e8      	bne.n	8014398 <_gcvt+0x58>
 80143c6:	ab07      	add	r3, sp, #28
 80143c8:	9301      	str	r3, [sp, #4]
 80143ca:	ab06      	add	r3, sp, #24
 80143cc:	9300      	str	r3, [sp, #0]
 80143ce:	4642      	mov	r2, r8
 80143d0:	ab05      	add	r3, sp, #20
 80143d2:	ec45 4b10 	vmov	d0, r4, r5
 80143d6:	2102      	movs	r1, #2
 80143d8:	4648      	mov	r0, r9
 80143da:	f001 f879 	bl	80154d0 <_dtoa_r>
 80143de:	9a05      	ldr	r2, [sp, #20]
 80143e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80143e4:	429a      	cmp	r2, r3
 80143e6:	d00e      	beq.n	8014406 <_gcvt+0xc6>
 80143e8:	4633      	mov	r3, r6
 80143ea:	44b0      	add	r8, r6
 80143ec:	4605      	mov	r5, r0
 80143ee:	f810 1b01 	ldrb.w	r1, [r0], #1
 80143f2:	9c05      	ldr	r4, [sp, #20]
 80143f4:	eba8 0203 	sub.w	r2, r8, r3
 80143f8:	b109      	cbz	r1, 80143fe <_gcvt+0xbe>
 80143fa:	2c00      	cmp	r4, #0
 80143fc:	dc08      	bgt.n	8014410 <_gcvt+0xd0>
 80143fe:	2100      	movs	r1, #0
 8014400:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8014404:	e00d      	b.n	8014422 <_gcvt+0xe2>
 8014406:	4601      	mov	r1, r0
 8014408:	4630      	mov	r0, r6
 801440a:	f000 ffa8 	bl	801535e <strcpy>
 801440e:	e7b7      	b.n	8014380 <_gcvt+0x40>
 8014410:	3c01      	subs	r4, #1
 8014412:	f803 1b01 	strb.w	r1, [r3], #1
 8014416:	9405      	str	r4, [sp, #20]
 8014418:	e7e8      	b.n	80143ec <_gcvt+0xac>
 801441a:	f803 cb01 	strb.w	ip, [r3], #1
 801441e:	3a01      	subs	r2, #1
 8014420:	2101      	movs	r1, #1
 8014422:	2c00      	cmp	r4, #0
 8014424:	4620      	mov	r0, r4
 8014426:	dc2a      	bgt.n	801447e <_gcvt+0x13e>
 8014428:	b101      	cbz	r1, 801442c <_gcvt+0xec>
 801442a:	9405      	str	r4, [sp, #20]
 801442c:	b90f      	cbnz	r7, 8014432 <_gcvt+0xf2>
 801442e:	7829      	ldrb	r1, [r5, #0]
 8014430:	b311      	cbz	r1, 8014478 <_gcvt+0x138>
 8014432:	42b3      	cmp	r3, r6
 8014434:	bf04      	itt	eq
 8014436:	2130      	moveq	r1, #48	; 0x30
 8014438:	f803 1b01 	strbeq.w	r1, [r3], #1
 801443c:	212e      	movs	r1, #46	; 0x2e
 801443e:	7019      	strb	r1, [r3, #0]
 8014440:	9905      	ldr	r1, [sp, #20]
 8014442:	4618      	mov	r0, r3
 8014444:	2400      	movs	r4, #0
 8014446:	eba1 0c03 	sub.w	ip, r1, r3
 801444a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 801444e:	eb1c 0f00 	cmn.w	ip, r0
 8014452:	d41c      	bmi.n	801448e <_gcvt+0x14e>
 8014454:	2900      	cmp	r1, #0
 8014456:	f1c1 0000 	rsb	r0, r1, #0
 801445a:	bfc8      	it	gt
 801445c:	2000      	movgt	r0, #0
 801445e:	f100 0c01 	add.w	ip, r0, #1
 8014462:	4463      	add	r3, ip
 8014464:	4401      	add	r1, r0
 8014466:	b104      	cbz	r4, 801446a <_gcvt+0x12a>
 8014468:	9105      	str	r1, [sp, #20]
 801446a:	1e69      	subs	r1, r5, #1
 801446c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014470:	b108      	cbz	r0, 8014476 <_gcvt+0x136>
 8014472:	2a00      	cmp	r2, #0
 8014474:	dc0f      	bgt.n	8014496 <_gcvt+0x156>
 8014476:	b9df      	cbnz	r7, 80144b0 <_gcvt+0x170>
 8014478:	2200      	movs	r2, #0
 801447a:	701a      	strb	r2, [r3, #0]
 801447c:	e780      	b.n	8014380 <_gcvt+0x40>
 801447e:	2a00      	cmp	r2, #0
 8014480:	f104 34ff 	add.w	r4, r4, #4294967295
 8014484:	dcc9      	bgt.n	801441a <_gcvt+0xda>
 8014486:	2900      	cmp	r1, #0
 8014488:	d0d0      	beq.n	801442c <_gcvt+0xec>
 801448a:	9005      	str	r0, [sp, #20]
 801448c:	e7ce      	b.n	801442c <_gcvt+0xec>
 801448e:	f800 ef01 	strb.w	lr, [r0, #1]!
 8014492:	2401      	movs	r4, #1
 8014494:	e7db      	b.n	801444e <_gcvt+0x10e>
 8014496:	f803 0b01 	strb.w	r0, [r3], #1
 801449a:	3a01      	subs	r2, #1
 801449c:	e7e6      	b.n	801446c <_gcvt+0x12c>
 801449e:	f801 5b01 	strb.w	r5, [r1], #1
 80144a2:	1a60      	subs	r0, r4, r1
 80144a4:	2800      	cmp	r0, #0
 80144a6:	dcfa      	bgt.n	801449e <_gcvt+0x15e>
 80144a8:	2a00      	cmp	r2, #0
 80144aa:	bfa8      	it	ge
 80144ac:	189b      	addge	r3, r3, r2
 80144ae:	e7e3      	b.n	8014478 <_gcvt+0x138>
 80144b0:	4619      	mov	r1, r3
 80144b2:	189c      	adds	r4, r3, r2
 80144b4:	2530      	movs	r5, #48	; 0x30
 80144b6:	e7f4      	b.n	80144a2 <_gcvt+0x162>
 80144b8:	eb1c432d 	.word	0xeb1c432d
 80144bc:	3f1a36e2 	.word	0x3f1a36e2

080144c0 <__sflush_r>:
 80144c0:	898a      	ldrh	r2, [r1, #12]
 80144c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144c6:	4605      	mov	r5, r0
 80144c8:	0710      	lsls	r0, r2, #28
 80144ca:	460c      	mov	r4, r1
 80144cc:	d458      	bmi.n	8014580 <__sflush_r+0xc0>
 80144ce:	684b      	ldr	r3, [r1, #4]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	dc05      	bgt.n	80144e0 <__sflush_r+0x20>
 80144d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	dc02      	bgt.n	80144e0 <__sflush_r+0x20>
 80144da:	2000      	movs	r0, #0
 80144dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80144e2:	2e00      	cmp	r6, #0
 80144e4:	d0f9      	beq.n	80144da <__sflush_r+0x1a>
 80144e6:	2300      	movs	r3, #0
 80144e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80144ec:	682f      	ldr	r7, [r5, #0]
 80144ee:	602b      	str	r3, [r5, #0]
 80144f0:	d032      	beq.n	8014558 <__sflush_r+0x98>
 80144f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80144f4:	89a3      	ldrh	r3, [r4, #12]
 80144f6:	075a      	lsls	r2, r3, #29
 80144f8:	d505      	bpl.n	8014506 <__sflush_r+0x46>
 80144fa:	6863      	ldr	r3, [r4, #4]
 80144fc:	1ac0      	subs	r0, r0, r3
 80144fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014500:	b10b      	cbz	r3, 8014506 <__sflush_r+0x46>
 8014502:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014504:	1ac0      	subs	r0, r0, r3
 8014506:	2300      	movs	r3, #0
 8014508:	4602      	mov	r2, r0
 801450a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801450c:	6a21      	ldr	r1, [r4, #32]
 801450e:	4628      	mov	r0, r5
 8014510:	47b0      	blx	r6
 8014512:	1c43      	adds	r3, r0, #1
 8014514:	89a3      	ldrh	r3, [r4, #12]
 8014516:	d106      	bne.n	8014526 <__sflush_r+0x66>
 8014518:	6829      	ldr	r1, [r5, #0]
 801451a:	291d      	cmp	r1, #29
 801451c:	d82c      	bhi.n	8014578 <__sflush_r+0xb8>
 801451e:	4a2a      	ldr	r2, [pc, #168]	; (80145c8 <__sflush_r+0x108>)
 8014520:	40ca      	lsrs	r2, r1
 8014522:	07d6      	lsls	r6, r2, #31
 8014524:	d528      	bpl.n	8014578 <__sflush_r+0xb8>
 8014526:	2200      	movs	r2, #0
 8014528:	6062      	str	r2, [r4, #4]
 801452a:	04d9      	lsls	r1, r3, #19
 801452c:	6922      	ldr	r2, [r4, #16]
 801452e:	6022      	str	r2, [r4, #0]
 8014530:	d504      	bpl.n	801453c <__sflush_r+0x7c>
 8014532:	1c42      	adds	r2, r0, #1
 8014534:	d101      	bne.n	801453a <__sflush_r+0x7a>
 8014536:	682b      	ldr	r3, [r5, #0]
 8014538:	b903      	cbnz	r3, 801453c <__sflush_r+0x7c>
 801453a:	6560      	str	r0, [r4, #84]	; 0x54
 801453c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801453e:	602f      	str	r7, [r5, #0]
 8014540:	2900      	cmp	r1, #0
 8014542:	d0ca      	beq.n	80144da <__sflush_r+0x1a>
 8014544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014548:	4299      	cmp	r1, r3
 801454a:	d002      	beq.n	8014552 <__sflush_r+0x92>
 801454c:	4628      	mov	r0, r5
 801454e:	f000 fd8f 	bl	8015070 <_free_r>
 8014552:	2000      	movs	r0, #0
 8014554:	6360      	str	r0, [r4, #52]	; 0x34
 8014556:	e7c1      	b.n	80144dc <__sflush_r+0x1c>
 8014558:	6a21      	ldr	r1, [r4, #32]
 801455a:	2301      	movs	r3, #1
 801455c:	4628      	mov	r0, r5
 801455e:	47b0      	blx	r6
 8014560:	1c41      	adds	r1, r0, #1
 8014562:	d1c7      	bne.n	80144f4 <__sflush_r+0x34>
 8014564:	682b      	ldr	r3, [r5, #0]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d0c4      	beq.n	80144f4 <__sflush_r+0x34>
 801456a:	2b1d      	cmp	r3, #29
 801456c:	d001      	beq.n	8014572 <__sflush_r+0xb2>
 801456e:	2b16      	cmp	r3, #22
 8014570:	d101      	bne.n	8014576 <__sflush_r+0xb6>
 8014572:	602f      	str	r7, [r5, #0]
 8014574:	e7b1      	b.n	80144da <__sflush_r+0x1a>
 8014576:	89a3      	ldrh	r3, [r4, #12]
 8014578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801457c:	81a3      	strh	r3, [r4, #12]
 801457e:	e7ad      	b.n	80144dc <__sflush_r+0x1c>
 8014580:	690f      	ldr	r7, [r1, #16]
 8014582:	2f00      	cmp	r7, #0
 8014584:	d0a9      	beq.n	80144da <__sflush_r+0x1a>
 8014586:	0793      	lsls	r3, r2, #30
 8014588:	680e      	ldr	r6, [r1, #0]
 801458a:	bf08      	it	eq
 801458c:	694b      	ldreq	r3, [r1, #20]
 801458e:	600f      	str	r7, [r1, #0]
 8014590:	bf18      	it	ne
 8014592:	2300      	movne	r3, #0
 8014594:	eba6 0807 	sub.w	r8, r6, r7
 8014598:	608b      	str	r3, [r1, #8]
 801459a:	f1b8 0f00 	cmp.w	r8, #0
 801459e:	dd9c      	ble.n	80144da <__sflush_r+0x1a>
 80145a0:	6a21      	ldr	r1, [r4, #32]
 80145a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80145a4:	4643      	mov	r3, r8
 80145a6:	463a      	mov	r2, r7
 80145a8:	4628      	mov	r0, r5
 80145aa:	47b0      	blx	r6
 80145ac:	2800      	cmp	r0, #0
 80145ae:	dc06      	bgt.n	80145be <__sflush_r+0xfe>
 80145b0:	89a3      	ldrh	r3, [r4, #12]
 80145b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80145b6:	81a3      	strh	r3, [r4, #12]
 80145b8:	f04f 30ff 	mov.w	r0, #4294967295
 80145bc:	e78e      	b.n	80144dc <__sflush_r+0x1c>
 80145be:	4407      	add	r7, r0
 80145c0:	eba8 0800 	sub.w	r8, r8, r0
 80145c4:	e7e9      	b.n	801459a <__sflush_r+0xda>
 80145c6:	bf00      	nop
 80145c8:	20400001 	.word	0x20400001

080145cc <_fflush_r>:
 80145cc:	b538      	push	{r3, r4, r5, lr}
 80145ce:	690b      	ldr	r3, [r1, #16]
 80145d0:	4605      	mov	r5, r0
 80145d2:	460c      	mov	r4, r1
 80145d4:	b913      	cbnz	r3, 80145dc <_fflush_r+0x10>
 80145d6:	2500      	movs	r5, #0
 80145d8:	4628      	mov	r0, r5
 80145da:	bd38      	pop	{r3, r4, r5, pc}
 80145dc:	b118      	cbz	r0, 80145e6 <_fflush_r+0x1a>
 80145de:	6983      	ldr	r3, [r0, #24]
 80145e0:	b90b      	cbnz	r3, 80145e6 <_fflush_r+0x1a>
 80145e2:	f000 f887 	bl	80146f4 <__sinit>
 80145e6:	4b14      	ldr	r3, [pc, #80]	; (8014638 <_fflush_r+0x6c>)
 80145e8:	429c      	cmp	r4, r3
 80145ea:	d11b      	bne.n	8014624 <_fflush_r+0x58>
 80145ec:	686c      	ldr	r4, [r5, #4]
 80145ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d0ef      	beq.n	80145d6 <_fflush_r+0xa>
 80145f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80145f8:	07d0      	lsls	r0, r2, #31
 80145fa:	d404      	bmi.n	8014606 <_fflush_r+0x3a>
 80145fc:	0599      	lsls	r1, r3, #22
 80145fe:	d402      	bmi.n	8014606 <_fflush_r+0x3a>
 8014600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014602:	f000 f915 	bl	8014830 <__retarget_lock_acquire_recursive>
 8014606:	4628      	mov	r0, r5
 8014608:	4621      	mov	r1, r4
 801460a:	f7ff ff59 	bl	80144c0 <__sflush_r>
 801460e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014610:	07da      	lsls	r2, r3, #31
 8014612:	4605      	mov	r5, r0
 8014614:	d4e0      	bmi.n	80145d8 <_fflush_r+0xc>
 8014616:	89a3      	ldrh	r3, [r4, #12]
 8014618:	059b      	lsls	r3, r3, #22
 801461a:	d4dd      	bmi.n	80145d8 <_fflush_r+0xc>
 801461c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801461e:	f000 f908 	bl	8014832 <__retarget_lock_release_recursive>
 8014622:	e7d9      	b.n	80145d8 <_fflush_r+0xc>
 8014624:	4b05      	ldr	r3, [pc, #20]	; (801463c <_fflush_r+0x70>)
 8014626:	429c      	cmp	r4, r3
 8014628:	d101      	bne.n	801462e <_fflush_r+0x62>
 801462a:	68ac      	ldr	r4, [r5, #8]
 801462c:	e7df      	b.n	80145ee <_fflush_r+0x22>
 801462e:	4b04      	ldr	r3, [pc, #16]	; (8014640 <_fflush_r+0x74>)
 8014630:	429c      	cmp	r4, r3
 8014632:	bf08      	it	eq
 8014634:	68ec      	ldreq	r4, [r5, #12]
 8014636:	e7da      	b.n	80145ee <_fflush_r+0x22>
 8014638:	08017204 	.word	0x08017204
 801463c:	08017224 	.word	0x08017224
 8014640:	080171e4 	.word	0x080171e4

08014644 <std>:
 8014644:	2300      	movs	r3, #0
 8014646:	b510      	push	{r4, lr}
 8014648:	4604      	mov	r4, r0
 801464a:	e9c0 3300 	strd	r3, r3, [r0]
 801464e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014652:	6083      	str	r3, [r0, #8]
 8014654:	8181      	strh	r1, [r0, #12]
 8014656:	6643      	str	r3, [r0, #100]	; 0x64
 8014658:	81c2      	strh	r2, [r0, #14]
 801465a:	6183      	str	r3, [r0, #24]
 801465c:	4619      	mov	r1, r3
 801465e:	2208      	movs	r2, #8
 8014660:	305c      	adds	r0, #92	; 0x5c
 8014662:	f7ff fa39 	bl	8013ad8 <memset>
 8014666:	4b05      	ldr	r3, [pc, #20]	; (801467c <std+0x38>)
 8014668:	6263      	str	r3, [r4, #36]	; 0x24
 801466a:	4b05      	ldr	r3, [pc, #20]	; (8014680 <std+0x3c>)
 801466c:	62a3      	str	r3, [r4, #40]	; 0x28
 801466e:	4b05      	ldr	r3, [pc, #20]	; (8014684 <std+0x40>)
 8014670:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014672:	4b05      	ldr	r3, [pc, #20]	; (8014688 <std+0x44>)
 8014674:	6224      	str	r4, [r4, #32]
 8014676:	6323      	str	r3, [r4, #48]	; 0x30
 8014678:	bd10      	pop	{r4, pc}
 801467a:	bf00      	nop
 801467c:	080152d9 	.word	0x080152d9
 8014680:	080152fb 	.word	0x080152fb
 8014684:	08015333 	.word	0x08015333
 8014688:	08015357 	.word	0x08015357

0801468c <_cleanup_r>:
 801468c:	4901      	ldr	r1, [pc, #4]	; (8014694 <_cleanup_r+0x8>)
 801468e:	f000 b8af 	b.w	80147f0 <_fwalk_reent>
 8014692:	bf00      	nop
 8014694:	080145cd 	.word	0x080145cd

08014698 <__sfmoreglue>:
 8014698:	b570      	push	{r4, r5, r6, lr}
 801469a:	2268      	movs	r2, #104	; 0x68
 801469c:	1e4d      	subs	r5, r1, #1
 801469e:	4355      	muls	r5, r2
 80146a0:	460e      	mov	r6, r1
 80146a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80146a6:	f000 fd4f 	bl	8015148 <_malloc_r>
 80146aa:	4604      	mov	r4, r0
 80146ac:	b140      	cbz	r0, 80146c0 <__sfmoreglue+0x28>
 80146ae:	2100      	movs	r1, #0
 80146b0:	e9c0 1600 	strd	r1, r6, [r0]
 80146b4:	300c      	adds	r0, #12
 80146b6:	60a0      	str	r0, [r4, #8]
 80146b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80146bc:	f7ff fa0c 	bl	8013ad8 <memset>
 80146c0:	4620      	mov	r0, r4
 80146c2:	bd70      	pop	{r4, r5, r6, pc}

080146c4 <__sfp_lock_acquire>:
 80146c4:	4801      	ldr	r0, [pc, #4]	; (80146cc <__sfp_lock_acquire+0x8>)
 80146c6:	f000 b8b3 	b.w	8014830 <__retarget_lock_acquire_recursive>
 80146ca:	bf00      	nop
 80146cc:	20002569 	.word	0x20002569

080146d0 <__sfp_lock_release>:
 80146d0:	4801      	ldr	r0, [pc, #4]	; (80146d8 <__sfp_lock_release+0x8>)
 80146d2:	f000 b8ae 	b.w	8014832 <__retarget_lock_release_recursive>
 80146d6:	bf00      	nop
 80146d8:	20002569 	.word	0x20002569

080146dc <__sinit_lock_acquire>:
 80146dc:	4801      	ldr	r0, [pc, #4]	; (80146e4 <__sinit_lock_acquire+0x8>)
 80146de:	f000 b8a7 	b.w	8014830 <__retarget_lock_acquire_recursive>
 80146e2:	bf00      	nop
 80146e4:	2000256a 	.word	0x2000256a

080146e8 <__sinit_lock_release>:
 80146e8:	4801      	ldr	r0, [pc, #4]	; (80146f0 <__sinit_lock_release+0x8>)
 80146ea:	f000 b8a2 	b.w	8014832 <__retarget_lock_release_recursive>
 80146ee:	bf00      	nop
 80146f0:	2000256a 	.word	0x2000256a

080146f4 <__sinit>:
 80146f4:	b510      	push	{r4, lr}
 80146f6:	4604      	mov	r4, r0
 80146f8:	f7ff fff0 	bl	80146dc <__sinit_lock_acquire>
 80146fc:	69a3      	ldr	r3, [r4, #24]
 80146fe:	b11b      	cbz	r3, 8014708 <__sinit+0x14>
 8014700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014704:	f7ff bff0 	b.w	80146e8 <__sinit_lock_release>
 8014708:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801470c:	6523      	str	r3, [r4, #80]	; 0x50
 801470e:	4b13      	ldr	r3, [pc, #76]	; (801475c <__sinit+0x68>)
 8014710:	4a13      	ldr	r2, [pc, #76]	; (8014760 <__sinit+0x6c>)
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	62a2      	str	r2, [r4, #40]	; 0x28
 8014716:	42a3      	cmp	r3, r4
 8014718:	bf04      	itt	eq
 801471a:	2301      	moveq	r3, #1
 801471c:	61a3      	streq	r3, [r4, #24]
 801471e:	4620      	mov	r0, r4
 8014720:	f000 f820 	bl	8014764 <__sfp>
 8014724:	6060      	str	r0, [r4, #4]
 8014726:	4620      	mov	r0, r4
 8014728:	f000 f81c 	bl	8014764 <__sfp>
 801472c:	60a0      	str	r0, [r4, #8]
 801472e:	4620      	mov	r0, r4
 8014730:	f000 f818 	bl	8014764 <__sfp>
 8014734:	2200      	movs	r2, #0
 8014736:	60e0      	str	r0, [r4, #12]
 8014738:	2104      	movs	r1, #4
 801473a:	6860      	ldr	r0, [r4, #4]
 801473c:	f7ff ff82 	bl	8014644 <std>
 8014740:	68a0      	ldr	r0, [r4, #8]
 8014742:	2201      	movs	r2, #1
 8014744:	2109      	movs	r1, #9
 8014746:	f7ff ff7d 	bl	8014644 <std>
 801474a:	68e0      	ldr	r0, [r4, #12]
 801474c:	2202      	movs	r2, #2
 801474e:	2112      	movs	r1, #18
 8014750:	f7ff ff78 	bl	8014644 <std>
 8014754:	2301      	movs	r3, #1
 8014756:	61a3      	str	r3, [r4, #24]
 8014758:	e7d2      	b.n	8014700 <__sinit+0xc>
 801475a:	bf00      	nop
 801475c:	080171ac 	.word	0x080171ac
 8014760:	0801468d 	.word	0x0801468d

08014764 <__sfp>:
 8014764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014766:	4607      	mov	r7, r0
 8014768:	f7ff ffac 	bl	80146c4 <__sfp_lock_acquire>
 801476c:	4b1e      	ldr	r3, [pc, #120]	; (80147e8 <__sfp+0x84>)
 801476e:	681e      	ldr	r6, [r3, #0]
 8014770:	69b3      	ldr	r3, [r6, #24]
 8014772:	b913      	cbnz	r3, 801477a <__sfp+0x16>
 8014774:	4630      	mov	r0, r6
 8014776:	f7ff ffbd 	bl	80146f4 <__sinit>
 801477a:	3648      	adds	r6, #72	; 0x48
 801477c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014780:	3b01      	subs	r3, #1
 8014782:	d503      	bpl.n	801478c <__sfp+0x28>
 8014784:	6833      	ldr	r3, [r6, #0]
 8014786:	b30b      	cbz	r3, 80147cc <__sfp+0x68>
 8014788:	6836      	ldr	r6, [r6, #0]
 801478a:	e7f7      	b.n	801477c <__sfp+0x18>
 801478c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014790:	b9d5      	cbnz	r5, 80147c8 <__sfp+0x64>
 8014792:	4b16      	ldr	r3, [pc, #88]	; (80147ec <__sfp+0x88>)
 8014794:	60e3      	str	r3, [r4, #12]
 8014796:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801479a:	6665      	str	r5, [r4, #100]	; 0x64
 801479c:	f000 f847 	bl	801482e <__retarget_lock_init_recursive>
 80147a0:	f7ff ff96 	bl	80146d0 <__sfp_lock_release>
 80147a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80147a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80147ac:	6025      	str	r5, [r4, #0]
 80147ae:	61a5      	str	r5, [r4, #24]
 80147b0:	2208      	movs	r2, #8
 80147b2:	4629      	mov	r1, r5
 80147b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80147b8:	f7ff f98e 	bl	8013ad8 <memset>
 80147bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80147c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80147c4:	4620      	mov	r0, r4
 80147c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147c8:	3468      	adds	r4, #104	; 0x68
 80147ca:	e7d9      	b.n	8014780 <__sfp+0x1c>
 80147cc:	2104      	movs	r1, #4
 80147ce:	4638      	mov	r0, r7
 80147d0:	f7ff ff62 	bl	8014698 <__sfmoreglue>
 80147d4:	4604      	mov	r4, r0
 80147d6:	6030      	str	r0, [r6, #0]
 80147d8:	2800      	cmp	r0, #0
 80147da:	d1d5      	bne.n	8014788 <__sfp+0x24>
 80147dc:	f7ff ff78 	bl	80146d0 <__sfp_lock_release>
 80147e0:	230c      	movs	r3, #12
 80147e2:	603b      	str	r3, [r7, #0]
 80147e4:	e7ee      	b.n	80147c4 <__sfp+0x60>
 80147e6:	bf00      	nop
 80147e8:	080171ac 	.word	0x080171ac
 80147ec:	ffff0001 	.word	0xffff0001

080147f0 <_fwalk_reent>:
 80147f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147f4:	4606      	mov	r6, r0
 80147f6:	4688      	mov	r8, r1
 80147f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80147fc:	2700      	movs	r7, #0
 80147fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014802:	f1b9 0901 	subs.w	r9, r9, #1
 8014806:	d505      	bpl.n	8014814 <_fwalk_reent+0x24>
 8014808:	6824      	ldr	r4, [r4, #0]
 801480a:	2c00      	cmp	r4, #0
 801480c:	d1f7      	bne.n	80147fe <_fwalk_reent+0xe>
 801480e:	4638      	mov	r0, r7
 8014810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014814:	89ab      	ldrh	r3, [r5, #12]
 8014816:	2b01      	cmp	r3, #1
 8014818:	d907      	bls.n	801482a <_fwalk_reent+0x3a>
 801481a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801481e:	3301      	adds	r3, #1
 8014820:	d003      	beq.n	801482a <_fwalk_reent+0x3a>
 8014822:	4629      	mov	r1, r5
 8014824:	4630      	mov	r0, r6
 8014826:	47c0      	blx	r8
 8014828:	4307      	orrs	r7, r0
 801482a:	3568      	adds	r5, #104	; 0x68
 801482c:	e7e9      	b.n	8014802 <_fwalk_reent+0x12>

0801482e <__retarget_lock_init_recursive>:
 801482e:	4770      	bx	lr

08014830 <__retarget_lock_acquire_recursive>:
 8014830:	4770      	bx	lr

08014832 <__retarget_lock_release_recursive>:
 8014832:	4770      	bx	lr

08014834 <__swhatbuf_r>:
 8014834:	b570      	push	{r4, r5, r6, lr}
 8014836:	460e      	mov	r6, r1
 8014838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801483c:	2900      	cmp	r1, #0
 801483e:	b096      	sub	sp, #88	; 0x58
 8014840:	4614      	mov	r4, r2
 8014842:	461d      	mov	r5, r3
 8014844:	da08      	bge.n	8014858 <__swhatbuf_r+0x24>
 8014846:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801484a:	2200      	movs	r2, #0
 801484c:	602a      	str	r2, [r5, #0]
 801484e:	061a      	lsls	r2, r3, #24
 8014850:	d410      	bmi.n	8014874 <__swhatbuf_r+0x40>
 8014852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014856:	e00e      	b.n	8014876 <__swhatbuf_r+0x42>
 8014858:	466a      	mov	r2, sp
 801485a:	f001 fc27 	bl	80160ac <_fstat_r>
 801485e:	2800      	cmp	r0, #0
 8014860:	dbf1      	blt.n	8014846 <__swhatbuf_r+0x12>
 8014862:	9a01      	ldr	r2, [sp, #4]
 8014864:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014868:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801486c:	425a      	negs	r2, r3
 801486e:	415a      	adcs	r2, r3
 8014870:	602a      	str	r2, [r5, #0]
 8014872:	e7ee      	b.n	8014852 <__swhatbuf_r+0x1e>
 8014874:	2340      	movs	r3, #64	; 0x40
 8014876:	2000      	movs	r0, #0
 8014878:	6023      	str	r3, [r4, #0]
 801487a:	b016      	add	sp, #88	; 0x58
 801487c:	bd70      	pop	{r4, r5, r6, pc}
	...

08014880 <__smakebuf_r>:
 8014880:	898b      	ldrh	r3, [r1, #12]
 8014882:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014884:	079d      	lsls	r5, r3, #30
 8014886:	4606      	mov	r6, r0
 8014888:	460c      	mov	r4, r1
 801488a:	d507      	bpl.n	801489c <__smakebuf_r+0x1c>
 801488c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014890:	6023      	str	r3, [r4, #0]
 8014892:	6123      	str	r3, [r4, #16]
 8014894:	2301      	movs	r3, #1
 8014896:	6163      	str	r3, [r4, #20]
 8014898:	b002      	add	sp, #8
 801489a:	bd70      	pop	{r4, r5, r6, pc}
 801489c:	ab01      	add	r3, sp, #4
 801489e:	466a      	mov	r2, sp
 80148a0:	f7ff ffc8 	bl	8014834 <__swhatbuf_r>
 80148a4:	9900      	ldr	r1, [sp, #0]
 80148a6:	4605      	mov	r5, r0
 80148a8:	4630      	mov	r0, r6
 80148aa:	f000 fc4d 	bl	8015148 <_malloc_r>
 80148ae:	b948      	cbnz	r0, 80148c4 <__smakebuf_r+0x44>
 80148b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148b4:	059a      	lsls	r2, r3, #22
 80148b6:	d4ef      	bmi.n	8014898 <__smakebuf_r+0x18>
 80148b8:	f023 0303 	bic.w	r3, r3, #3
 80148bc:	f043 0302 	orr.w	r3, r3, #2
 80148c0:	81a3      	strh	r3, [r4, #12]
 80148c2:	e7e3      	b.n	801488c <__smakebuf_r+0xc>
 80148c4:	4b0d      	ldr	r3, [pc, #52]	; (80148fc <__smakebuf_r+0x7c>)
 80148c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80148c8:	89a3      	ldrh	r3, [r4, #12]
 80148ca:	6020      	str	r0, [r4, #0]
 80148cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80148d0:	81a3      	strh	r3, [r4, #12]
 80148d2:	9b00      	ldr	r3, [sp, #0]
 80148d4:	6163      	str	r3, [r4, #20]
 80148d6:	9b01      	ldr	r3, [sp, #4]
 80148d8:	6120      	str	r0, [r4, #16]
 80148da:	b15b      	cbz	r3, 80148f4 <__smakebuf_r+0x74>
 80148dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80148e0:	4630      	mov	r0, r6
 80148e2:	f001 fbf5 	bl	80160d0 <_isatty_r>
 80148e6:	b128      	cbz	r0, 80148f4 <__smakebuf_r+0x74>
 80148e8:	89a3      	ldrh	r3, [r4, #12]
 80148ea:	f023 0303 	bic.w	r3, r3, #3
 80148ee:	f043 0301 	orr.w	r3, r3, #1
 80148f2:	81a3      	strh	r3, [r4, #12]
 80148f4:	89a0      	ldrh	r0, [r4, #12]
 80148f6:	4305      	orrs	r5, r0
 80148f8:	81a5      	strh	r5, [r4, #12]
 80148fa:	e7cd      	b.n	8014898 <__smakebuf_r+0x18>
 80148fc:	0801468d 	.word	0x0801468d

08014900 <_Balloc>:
 8014900:	b570      	push	{r4, r5, r6, lr}
 8014902:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014904:	4604      	mov	r4, r0
 8014906:	460d      	mov	r5, r1
 8014908:	b976      	cbnz	r6, 8014928 <_Balloc+0x28>
 801490a:	2010      	movs	r0, #16
 801490c:	f001 fc02 	bl	8016114 <malloc>
 8014910:	4602      	mov	r2, r0
 8014912:	6260      	str	r0, [r4, #36]	; 0x24
 8014914:	b920      	cbnz	r0, 8014920 <_Balloc+0x20>
 8014916:	4b18      	ldr	r3, [pc, #96]	; (8014978 <_Balloc+0x78>)
 8014918:	4818      	ldr	r0, [pc, #96]	; (801497c <_Balloc+0x7c>)
 801491a:	2166      	movs	r1, #102	; 0x66
 801491c:	f7ff f850 	bl	80139c0 <__assert_func>
 8014920:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014924:	6006      	str	r6, [r0, #0]
 8014926:	60c6      	str	r6, [r0, #12]
 8014928:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801492a:	68f3      	ldr	r3, [r6, #12]
 801492c:	b183      	cbz	r3, 8014950 <_Balloc+0x50>
 801492e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014930:	68db      	ldr	r3, [r3, #12]
 8014932:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014936:	b9b8      	cbnz	r0, 8014968 <_Balloc+0x68>
 8014938:	2101      	movs	r1, #1
 801493a:	fa01 f605 	lsl.w	r6, r1, r5
 801493e:	1d72      	adds	r2, r6, #5
 8014940:	0092      	lsls	r2, r2, #2
 8014942:	4620      	mov	r0, r4
 8014944:	f000 fb7e 	bl	8015044 <_calloc_r>
 8014948:	b160      	cbz	r0, 8014964 <_Balloc+0x64>
 801494a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801494e:	e00e      	b.n	801496e <_Balloc+0x6e>
 8014950:	2221      	movs	r2, #33	; 0x21
 8014952:	2104      	movs	r1, #4
 8014954:	4620      	mov	r0, r4
 8014956:	f000 fb75 	bl	8015044 <_calloc_r>
 801495a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801495c:	60f0      	str	r0, [r6, #12]
 801495e:	68db      	ldr	r3, [r3, #12]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d1e4      	bne.n	801492e <_Balloc+0x2e>
 8014964:	2000      	movs	r0, #0
 8014966:	bd70      	pop	{r4, r5, r6, pc}
 8014968:	6802      	ldr	r2, [r0, #0]
 801496a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801496e:	2300      	movs	r3, #0
 8014970:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014974:	e7f7      	b.n	8014966 <_Balloc+0x66>
 8014976:	bf00      	nop
 8014978:	08017244 	.word	0x08017244
 801497c:	0801725b 	.word	0x0801725b

08014980 <_Bfree>:
 8014980:	b570      	push	{r4, r5, r6, lr}
 8014982:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014984:	4605      	mov	r5, r0
 8014986:	460c      	mov	r4, r1
 8014988:	b976      	cbnz	r6, 80149a8 <_Bfree+0x28>
 801498a:	2010      	movs	r0, #16
 801498c:	f001 fbc2 	bl	8016114 <malloc>
 8014990:	4602      	mov	r2, r0
 8014992:	6268      	str	r0, [r5, #36]	; 0x24
 8014994:	b920      	cbnz	r0, 80149a0 <_Bfree+0x20>
 8014996:	4b09      	ldr	r3, [pc, #36]	; (80149bc <_Bfree+0x3c>)
 8014998:	4809      	ldr	r0, [pc, #36]	; (80149c0 <_Bfree+0x40>)
 801499a:	218a      	movs	r1, #138	; 0x8a
 801499c:	f7ff f810 	bl	80139c0 <__assert_func>
 80149a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80149a4:	6006      	str	r6, [r0, #0]
 80149a6:	60c6      	str	r6, [r0, #12]
 80149a8:	b13c      	cbz	r4, 80149ba <_Bfree+0x3a>
 80149aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80149ac:	6862      	ldr	r2, [r4, #4]
 80149ae:	68db      	ldr	r3, [r3, #12]
 80149b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80149b4:	6021      	str	r1, [r4, #0]
 80149b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80149ba:	bd70      	pop	{r4, r5, r6, pc}
 80149bc:	08017244 	.word	0x08017244
 80149c0:	0801725b 	.word	0x0801725b

080149c4 <__multadd>:
 80149c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149c8:	690d      	ldr	r5, [r1, #16]
 80149ca:	4607      	mov	r7, r0
 80149cc:	460c      	mov	r4, r1
 80149ce:	461e      	mov	r6, r3
 80149d0:	f101 0c14 	add.w	ip, r1, #20
 80149d4:	2000      	movs	r0, #0
 80149d6:	f8dc 3000 	ldr.w	r3, [ip]
 80149da:	b299      	uxth	r1, r3
 80149dc:	fb02 6101 	mla	r1, r2, r1, r6
 80149e0:	0c1e      	lsrs	r6, r3, #16
 80149e2:	0c0b      	lsrs	r3, r1, #16
 80149e4:	fb02 3306 	mla	r3, r2, r6, r3
 80149e8:	b289      	uxth	r1, r1
 80149ea:	3001      	adds	r0, #1
 80149ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80149f0:	4285      	cmp	r5, r0
 80149f2:	f84c 1b04 	str.w	r1, [ip], #4
 80149f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80149fa:	dcec      	bgt.n	80149d6 <__multadd+0x12>
 80149fc:	b30e      	cbz	r6, 8014a42 <__multadd+0x7e>
 80149fe:	68a3      	ldr	r3, [r4, #8]
 8014a00:	42ab      	cmp	r3, r5
 8014a02:	dc19      	bgt.n	8014a38 <__multadd+0x74>
 8014a04:	6861      	ldr	r1, [r4, #4]
 8014a06:	4638      	mov	r0, r7
 8014a08:	3101      	adds	r1, #1
 8014a0a:	f7ff ff79 	bl	8014900 <_Balloc>
 8014a0e:	4680      	mov	r8, r0
 8014a10:	b928      	cbnz	r0, 8014a1e <__multadd+0x5a>
 8014a12:	4602      	mov	r2, r0
 8014a14:	4b0c      	ldr	r3, [pc, #48]	; (8014a48 <__multadd+0x84>)
 8014a16:	480d      	ldr	r0, [pc, #52]	; (8014a4c <__multadd+0x88>)
 8014a18:	21b5      	movs	r1, #181	; 0xb5
 8014a1a:	f7fe ffd1 	bl	80139c0 <__assert_func>
 8014a1e:	6922      	ldr	r2, [r4, #16]
 8014a20:	3202      	adds	r2, #2
 8014a22:	f104 010c 	add.w	r1, r4, #12
 8014a26:	0092      	lsls	r2, r2, #2
 8014a28:	300c      	adds	r0, #12
 8014a2a:	f7ff f847 	bl	8013abc <memcpy>
 8014a2e:	4621      	mov	r1, r4
 8014a30:	4638      	mov	r0, r7
 8014a32:	f7ff ffa5 	bl	8014980 <_Bfree>
 8014a36:	4644      	mov	r4, r8
 8014a38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014a3c:	3501      	adds	r5, #1
 8014a3e:	615e      	str	r6, [r3, #20]
 8014a40:	6125      	str	r5, [r4, #16]
 8014a42:	4620      	mov	r0, r4
 8014a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a48:	080172b7 	.word	0x080172b7
 8014a4c:	0801725b 	.word	0x0801725b

08014a50 <__hi0bits>:
 8014a50:	0c03      	lsrs	r3, r0, #16
 8014a52:	041b      	lsls	r3, r3, #16
 8014a54:	b9d3      	cbnz	r3, 8014a8c <__hi0bits+0x3c>
 8014a56:	0400      	lsls	r0, r0, #16
 8014a58:	2310      	movs	r3, #16
 8014a5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014a5e:	bf04      	itt	eq
 8014a60:	0200      	lsleq	r0, r0, #8
 8014a62:	3308      	addeq	r3, #8
 8014a64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014a68:	bf04      	itt	eq
 8014a6a:	0100      	lsleq	r0, r0, #4
 8014a6c:	3304      	addeq	r3, #4
 8014a6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014a72:	bf04      	itt	eq
 8014a74:	0080      	lsleq	r0, r0, #2
 8014a76:	3302      	addeq	r3, #2
 8014a78:	2800      	cmp	r0, #0
 8014a7a:	db05      	blt.n	8014a88 <__hi0bits+0x38>
 8014a7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014a80:	f103 0301 	add.w	r3, r3, #1
 8014a84:	bf08      	it	eq
 8014a86:	2320      	moveq	r3, #32
 8014a88:	4618      	mov	r0, r3
 8014a8a:	4770      	bx	lr
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	e7e4      	b.n	8014a5a <__hi0bits+0xa>

08014a90 <__lo0bits>:
 8014a90:	6803      	ldr	r3, [r0, #0]
 8014a92:	f013 0207 	ands.w	r2, r3, #7
 8014a96:	4601      	mov	r1, r0
 8014a98:	d00b      	beq.n	8014ab2 <__lo0bits+0x22>
 8014a9a:	07da      	lsls	r2, r3, #31
 8014a9c:	d423      	bmi.n	8014ae6 <__lo0bits+0x56>
 8014a9e:	0798      	lsls	r0, r3, #30
 8014aa0:	bf49      	itett	mi
 8014aa2:	085b      	lsrmi	r3, r3, #1
 8014aa4:	089b      	lsrpl	r3, r3, #2
 8014aa6:	2001      	movmi	r0, #1
 8014aa8:	600b      	strmi	r3, [r1, #0]
 8014aaa:	bf5c      	itt	pl
 8014aac:	600b      	strpl	r3, [r1, #0]
 8014aae:	2002      	movpl	r0, #2
 8014ab0:	4770      	bx	lr
 8014ab2:	b298      	uxth	r0, r3
 8014ab4:	b9a8      	cbnz	r0, 8014ae2 <__lo0bits+0x52>
 8014ab6:	0c1b      	lsrs	r3, r3, #16
 8014ab8:	2010      	movs	r0, #16
 8014aba:	b2da      	uxtb	r2, r3
 8014abc:	b90a      	cbnz	r2, 8014ac2 <__lo0bits+0x32>
 8014abe:	3008      	adds	r0, #8
 8014ac0:	0a1b      	lsrs	r3, r3, #8
 8014ac2:	071a      	lsls	r2, r3, #28
 8014ac4:	bf04      	itt	eq
 8014ac6:	091b      	lsreq	r3, r3, #4
 8014ac8:	3004      	addeq	r0, #4
 8014aca:	079a      	lsls	r2, r3, #30
 8014acc:	bf04      	itt	eq
 8014ace:	089b      	lsreq	r3, r3, #2
 8014ad0:	3002      	addeq	r0, #2
 8014ad2:	07da      	lsls	r2, r3, #31
 8014ad4:	d403      	bmi.n	8014ade <__lo0bits+0x4e>
 8014ad6:	085b      	lsrs	r3, r3, #1
 8014ad8:	f100 0001 	add.w	r0, r0, #1
 8014adc:	d005      	beq.n	8014aea <__lo0bits+0x5a>
 8014ade:	600b      	str	r3, [r1, #0]
 8014ae0:	4770      	bx	lr
 8014ae2:	4610      	mov	r0, r2
 8014ae4:	e7e9      	b.n	8014aba <__lo0bits+0x2a>
 8014ae6:	2000      	movs	r0, #0
 8014ae8:	4770      	bx	lr
 8014aea:	2020      	movs	r0, #32
 8014aec:	4770      	bx	lr
	...

08014af0 <__i2b>:
 8014af0:	b510      	push	{r4, lr}
 8014af2:	460c      	mov	r4, r1
 8014af4:	2101      	movs	r1, #1
 8014af6:	f7ff ff03 	bl	8014900 <_Balloc>
 8014afa:	4602      	mov	r2, r0
 8014afc:	b928      	cbnz	r0, 8014b0a <__i2b+0x1a>
 8014afe:	4b05      	ldr	r3, [pc, #20]	; (8014b14 <__i2b+0x24>)
 8014b00:	4805      	ldr	r0, [pc, #20]	; (8014b18 <__i2b+0x28>)
 8014b02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014b06:	f7fe ff5b 	bl	80139c0 <__assert_func>
 8014b0a:	2301      	movs	r3, #1
 8014b0c:	6144      	str	r4, [r0, #20]
 8014b0e:	6103      	str	r3, [r0, #16]
 8014b10:	bd10      	pop	{r4, pc}
 8014b12:	bf00      	nop
 8014b14:	080172b7 	.word	0x080172b7
 8014b18:	0801725b 	.word	0x0801725b

08014b1c <__multiply>:
 8014b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b20:	4691      	mov	r9, r2
 8014b22:	690a      	ldr	r2, [r1, #16]
 8014b24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014b28:	429a      	cmp	r2, r3
 8014b2a:	bfb8      	it	lt
 8014b2c:	460b      	movlt	r3, r1
 8014b2e:	460c      	mov	r4, r1
 8014b30:	bfbc      	itt	lt
 8014b32:	464c      	movlt	r4, r9
 8014b34:	4699      	movlt	r9, r3
 8014b36:	6927      	ldr	r7, [r4, #16]
 8014b38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014b3c:	68a3      	ldr	r3, [r4, #8]
 8014b3e:	6861      	ldr	r1, [r4, #4]
 8014b40:	eb07 060a 	add.w	r6, r7, sl
 8014b44:	42b3      	cmp	r3, r6
 8014b46:	b085      	sub	sp, #20
 8014b48:	bfb8      	it	lt
 8014b4a:	3101      	addlt	r1, #1
 8014b4c:	f7ff fed8 	bl	8014900 <_Balloc>
 8014b50:	b930      	cbnz	r0, 8014b60 <__multiply+0x44>
 8014b52:	4602      	mov	r2, r0
 8014b54:	4b44      	ldr	r3, [pc, #272]	; (8014c68 <__multiply+0x14c>)
 8014b56:	4845      	ldr	r0, [pc, #276]	; (8014c6c <__multiply+0x150>)
 8014b58:	f240 115d 	movw	r1, #349	; 0x15d
 8014b5c:	f7fe ff30 	bl	80139c0 <__assert_func>
 8014b60:	f100 0514 	add.w	r5, r0, #20
 8014b64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014b68:	462b      	mov	r3, r5
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	4543      	cmp	r3, r8
 8014b6e:	d321      	bcc.n	8014bb4 <__multiply+0x98>
 8014b70:	f104 0314 	add.w	r3, r4, #20
 8014b74:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014b78:	f109 0314 	add.w	r3, r9, #20
 8014b7c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014b80:	9202      	str	r2, [sp, #8]
 8014b82:	1b3a      	subs	r2, r7, r4
 8014b84:	3a15      	subs	r2, #21
 8014b86:	f022 0203 	bic.w	r2, r2, #3
 8014b8a:	3204      	adds	r2, #4
 8014b8c:	f104 0115 	add.w	r1, r4, #21
 8014b90:	428f      	cmp	r7, r1
 8014b92:	bf38      	it	cc
 8014b94:	2204      	movcc	r2, #4
 8014b96:	9201      	str	r2, [sp, #4]
 8014b98:	9a02      	ldr	r2, [sp, #8]
 8014b9a:	9303      	str	r3, [sp, #12]
 8014b9c:	429a      	cmp	r2, r3
 8014b9e:	d80c      	bhi.n	8014bba <__multiply+0x9e>
 8014ba0:	2e00      	cmp	r6, #0
 8014ba2:	dd03      	ble.n	8014bac <__multiply+0x90>
 8014ba4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d05a      	beq.n	8014c62 <__multiply+0x146>
 8014bac:	6106      	str	r6, [r0, #16]
 8014bae:	b005      	add	sp, #20
 8014bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bb4:	f843 2b04 	str.w	r2, [r3], #4
 8014bb8:	e7d8      	b.n	8014b6c <__multiply+0x50>
 8014bba:	f8b3 a000 	ldrh.w	sl, [r3]
 8014bbe:	f1ba 0f00 	cmp.w	sl, #0
 8014bc2:	d024      	beq.n	8014c0e <__multiply+0xf2>
 8014bc4:	f104 0e14 	add.w	lr, r4, #20
 8014bc8:	46a9      	mov	r9, r5
 8014bca:	f04f 0c00 	mov.w	ip, #0
 8014bce:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014bd2:	f8d9 1000 	ldr.w	r1, [r9]
 8014bd6:	fa1f fb82 	uxth.w	fp, r2
 8014bda:	b289      	uxth	r1, r1
 8014bdc:	fb0a 110b 	mla	r1, sl, fp, r1
 8014be0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014be4:	f8d9 2000 	ldr.w	r2, [r9]
 8014be8:	4461      	add	r1, ip
 8014bea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014bee:	fb0a c20b 	mla	r2, sl, fp, ip
 8014bf2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014bf6:	b289      	uxth	r1, r1
 8014bf8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014bfc:	4577      	cmp	r7, lr
 8014bfe:	f849 1b04 	str.w	r1, [r9], #4
 8014c02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014c06:	d8e2      	bhi.n	8014bce <__multiply+0xb2>
 8014c08:	9a01      	ldr	r2, [sp, #4]
 8014c0a:	f845 c002 	str.w	ip, [r5, r2]
 8014c0e:	9a03      	ldr	r2, [sp, #12]
 8014c10:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014c14:	3304      	adds	r3, #4
 8014c16:	f1b9 0f00 	cmp.w	r9, #0
 8014c1a:	d020      	beq.n	8014c5e <__multiply+0x142>
 8014c1c:	6829      	ldr	r1, [r5, #0]
 8014c1e:	f104 0c14 	add.w	ip, r4, #20
 8014c22:	46ae      	mov	lr, r5
 8014c24:	f04f 0a00 	mov.w	sl, #0
 8014c28:	f8bc b000 	ldrh.w	fp, [ip]
 8014c2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014c30:	fb09 220b 	mla	r2, r9, fp, r2
 8014c34:	4492      	add	sl, r2
 8014c36:	b289      	uxth	r1, r1
 8014c38:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8014c3c:	f84e 1b04 	str.w	r1, [lr], #4
 8014c40:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014c44:	f8be 1000 	ldrh.w	r1, [lr]
 8014c48:	0c12      	lsrs	r2, r2, #16
 8014c4a:	fb09 1102 	mla	r1, r9, r2, r1
 8014c4e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8014c52:	4567      	cmp	r7, ip
 8014c54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014c58:	d8e6      	bhi.n	8014c28 <__multiply+0x10c>
 8014c5a:	9a01      	ldr	r2, [sp, #4]
 8014c5c:	50a9      	str	r1, [r5, r2]
 8014c5e:	3504      	adds	r5, #4
 8014c60:	e79a      	b.n	8014b98 <__multiply+0x7c>
 8014c62:	3e01      	subs	r6, #1
 8014c64:	e79c      	b.n	8014ba0 <__multiply+0x84>
 8014c66:	bf00      	nop
 8014c68:	080172b7 	.word	0x080172b7
 8014c6c:	0801725b 	.word	0x0801725b

08014c70 <__pow5mult>:
 8014c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c74:	4615      	mov	r5, r2
 8014c76:	f012 0203 	ands.w	r2, r2, #3
 8014c7a:	4606      	mov	r6, r0
 8014c7c:	460f      	mov	r7, r1
 8014c7e:	d007      	beq.n	8014c90 <__pow5mult+0x20>
 8014c80:	4c25      	ldr	r4, [pc, #148]	; (8014d18 <__pow5mult+0xa8>)
 8014c82:	3a01      	subs	r2, #1
 8014c84:	2300      	movs	r3, #0
 8014c86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014c8a:	f7ff fe9b 	bl	80149c4 <__multadd>
 8014c8e:	4607      	mov	r7, r0
 8014c90:	10ad      	asrs	r5, r5, #2
 8014c92:	d03d      	beq.n	8014d10 <__pow5mult+0xa0>
 8014c94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014c96:	b97c      	cbnz	r4, 8014cb8 <__pow5mult+0x48>
 8014c98:	2010      	movs	r0, #16
 8014c9a:	f001 fa3b 	bl	8016114 <malloc>
 8014c9e:	4602      	mov	r2, r0
 8014ca0:	6270      	str	r0, [r6, #36]	; 0x24
 8014ca2:	b928      	cbnz	r0, 8014cb0 <__pow5mult+0x40>
 8014ca4:	4b1d      	ldr	r3, [pc, #116]	; (8014d1c <__pow5mult+0xac>)
 8014ca6:	481e      	ldr	r0, [pc, #120]	; (8014d20 <__pow5mult+0xb0>)
 8014ca8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014cac:	f7fe fe88 	bl	80139c0 <__assert_func>
 8014cb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014cb4:	6004      	str	r4, [r0, #0]
 8014cb6:	60c4      	str	r4, [r0, #12]
 8014cb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014cbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014cc0:	b94c      	cbnz	r4, 8014cd6 <__pow5mult+0x66>
 8014cc2:	f240 2171 	movw	r1, #625	; 0x271
 8014cc6:	4630      	mov	r0, r6
 8014cc8:	f7ff ff12 	bl	8014af0 <__i2b>
 8014ccc:	2300      	movs	r3, #0
 8014cce:	f8c8 0008 	str.w	r0, [r8, #8]
 8014cd2:	4604      	mov	r4, r0
 8014cd4:	6003      	str	r3, [r0, #0]
 8014cd6:	f04f 0900 	mov.w	r9, #0
 8014cda:	07eb      	lsls	r3, r5, #31
 8014cdc:	d50a      	bpl.n	8014cf4 <__pow5mult+0x84>
 8014cde:	4639      	mov	r1, r7
 8014ce0:	4622      	mov	r2, r4
 8014ce2:	4630      	mov	r0, r6
 8014ce4:	f7ff ff1a 	bl	8014b1c <__multiply>
 8014ce8:	4639      	mov	r1, r7
 8014cea:	4680      	mov	r8, r0
 8014cec:	4630      	mov	r0, r6
 8014cee:	f7ff fe47 	bl	8014980 <_Bfree>
 8014cf2:	4647      	mov	r7, r8
 8014cf4:	106d      	asrs	r5, r5, #1
 8014cf6:	d00b      	beq.n	8014d10 <__pow5mult+0xa0>
 8014cf8:	6820      	ldr	r0, [r4, #0]
 8014cfa:	b938      	cbnz	r0, 8014d0c <__pow5mult+0x9c>
 8014cfc:	4622      	mov	r2, r4
 8014cfe:	4621      	mov	r1, r4
 8014d00:	4630      	mov	r0, r6
 8014d02:	f7ff ff0b 	bl	8014b1c <__multiply>
 8014d06:	6020      	str	r0, [r4, #0]
 8014d08:	f8c0 9000 	str.w	r9, [r0]
 8014d0c:	4604      	mov	r4, r0
 8014d0e:	e7e4      	b.n	8014cda <__pow5mult+0x6a>
 8014d10:	4638      	mov	r0, r7
 8014d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d16:	bf00      	nop
 8014d18:	080173b8 	.word	0x080173b8
 8014d1c:	08017244 	.word	0x08017244
 8014d20:	0801725b 	.word	0x0801725b

08014d24 <__lshift>:
 8014d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d28:	460c      	mov	r4, r1
 8014d2a:	6849      	ldr	r1, [r1, #4]
 8014d2c:	6923      	ldr	r3, [r4, #16]
 8014d2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014d32:	68a3      	ldr	r3, [r4, #8]
 8014d34:	4607      	mov	r7, r0
 8014d36:	4691      	mov	r9, r2
 8014d38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014d3c:	f108 0601 	add.w	r6, r8, #1
 8014d40:	42b3      	cmp	r3, r6
 8014d42:	db0b      	blt.n	8014d5c <__lshift+0x38>
 8014d44:	4638      	mov	r0, r7
 8014d46:	f7ff fddb 	bl	8014900 <_Balloc>
 8014d4a:	4605      	mov	r5, r0
 8014d4c:	b948      	cbnz	r0, 8014d62 <__lshift+0x3e>
 8014d4e:	4602      	mov	r2, r0
 8014d50:	4b2a      	ldr	r3, [pc, #168]	; (8014dfc <__lshift+0xd8>)
 8014d52:	482b      	ldr	r0, [pc, #172]	; (8014e00 <__lshift+0xdc>)
 8014d54:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014d58:	f7fe fe32 	bl	80139c0 <__assert_func>
 8014d5c:	3101      	adds	r1, #1
 8014d5e:	005b      	lsls	r3, r3, #1
 8014d60:	e7ee      	b.n	8014d40 <__lshift+0x1c>
 8014d62:	2300      	movs	r3, #0
 8014d64:	f100 0114 	add.w	r1, r0, #20
 8014d68:	f100 0210 	add.w	r2, r0, #16
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	4553      	cmp	r3, sl
 8014d70:	db37      	blt.n	8014de2 <__lshift+0xbe>
 8014d72:	6920      	ldr	r0, [r4, #16]
 8014d74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014d78:	f104 0314 	add.w	r3, r4, #20
 8014d7c:	f019 091f 	ands.w	r9, r9, #31
 8014d80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014d84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014d88:	d02f      	beq.n	8014dea <__lshift+0xc6>
 8014d8a:	f1c9 0e20 	rsb	lr, r9, #32
 8014d8e:	468a      	mov	sl, r1
 8014d90:	f04f 0c00 	mov.w	ip, #0
 8014d94:	681a      	ldr	r2, [r3, #0]
 8014d96:	fa02 f209 	lsl.w	r2, r2, r9
 8014d9a:	ea42 020c 	orr.w	r2, r2, ip
 8014d9e:	f84a 2b04 	str.w	r2, [sl], #4
 8014da2:	f853 2b04 	ldr.w	r2, [r3], #4
 8014da6:	4298      	cmp	r0, r3
 8014da8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8014dac:	d8f2      	bhi.n	8014d94 <__lshift+0x70>
 8014dae:	1b03      	subs	r3, r0, r4
 8014db0:	3b15      	subs	r3, #21
 8014db2:	f023 0303 	bic.w	r3, r3, #3
 8014db6:	3304      	adds	r3, #4
 8014db8:	f104 0215 	add.w	r2, r4, #21
 8014dbc:	4290      	cmp	r0, r2
 8014dbe:	bf38      	it	cc
 8014dc0:	2304      	movcc	r3, #4
 8014dc2:	f841 c003 	str.w	ip, [r1, r3]
 8014dc6:	f1bc 0f00 	cmp.w	ip, #0
 8014dca:	d001      	beq.n	8014dd0 <__lshift+0xac>
 8014dcc:	f108 0602 	add.w	r6, r8, #2
 8014dd0:	3e01      	subs	r6, #1
 8014dd2:	4638      	mov	r0, r7
 8014dd4:	612e      	str	r6, [r5, #16]
 8014dd6:	4621      	mov	r1, r4
 8014dd8:	f7ff fdd2 	bl	8014980 <_Bfree>
 8014ddc:	4628      	mov	r0, r5
 8014dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014de2:	f842 0f04 	str.w	r0, [r2, #4]!
 8014de6:	3301      	adds	r3, #1
 8014de8:	e7c1      	b.n	8014d6e <__lshift+0x4a>
 8014dea:	3904      	subs	r1, #4
 8014dec:	f853 2b04 	ldr.w	r2, [r3], #4
 8014df0:	f841 2f04 	str.w	r2, [r1, #4]!
 8014df4:	4298      	cmp	r0, r3
 8014df6:	d8f9      	bhi.n	8014dec <__lshift+0xc8>
 8014df8:	e7ea      	b.n	8014dd0 <__lshift+0xac>
 8014dfa:	bf00      	nop
 8014dfc:	080172b7 	.word	0x080172b7
 8014e00:	0801725b 	.word	0x0801725b

08014e04 <__mcmp>:
 8014e04:	b530      	push	{r4, r5, lr}
 8014e06:	6902      	ldr	r2, [r0, #16]
 8014e08:	690c      	ldr	r4, [r1, #16]
 8014e0a:	1b12      	subs	r2, r2, r4
 8014e0c:	d10e      	bne.n	8014e2c <__mcmp+0x28>
 8014e0e:	f100 0314 	add.w	r3, r0, #20
 8014e12:	3114      	adds	r1, #20
 8014e14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014e18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014e1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014e20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014e24:	42a5      	cmp	r5, r4
 8014e26:	d003      	beq.n	8014e30 <__mcmp+0x2c>
 8014e28:	d305      	bcc.n	8014e36 <__mcmp+0x32>
 8014e2a:	2201      	movs	r2, #1
 8014e2c:	4610      	mov	r0, r2
 8014e2e:	bd30      	pop	{r4, r5, pc}
 8014e30:	4283      	cmp	r3, r0
 8014e32:	d3f3      	bcc.n	8014e1c <__mcmp+0x18>
 8014e34:	e7fa      	b.n	8014e2c <__mcmp+0x28>
 8014e36:	f04f 32ff 	mov.w	r2, #4294967295
 8014e3a:	e7f7      	b.n	8014e2c <__mcmp+0x28>

08014e3c <__mdiff>:
 8014e3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e40:	460c      	mov	r4, r1
 8014e42:	4606      	mov	r6, r0
 8014e44:	4611      	mov	r1, r2
 8014e46:	4620      	mov	r0, r4
 8014e48:	4690      	mov	r8, r2
 8014e4a:	f7ff ffdb 	bl	8014e04 <__mcmp>
 8014e4e:	1e05      	subs	r5, r0, #0
 8014e50:	d110      	bne.n	8014e74 <__mdiff+0x38>
 8014e52:	4629      	mov	r1, r5
 8014e54:	4630      	mov	r0, r6
 8014e56:	f7ff fd53 	bl	8014900 <_Balloc>
 8014e5a:	b930      	cbnz	r0, 8014e6a <__mdiff+0x2e>
 8014e5c:	4b3a      	ldr	r3, [pc, #232]	; (8014f48 <__mdiff+0x10c>)
 8014e5e:	4602      	mov	r2, r0
 8014e60:	f240 2132 	movw	r1, #562	; 0x232
 8014e64:	4839      	ldr	r0, [pc, #228]	; (8014f4c <__mdiff+0x110>)
 8014e66:	f7fe fdab 	bl	80139c0 <__assert_func>
 8014e6a:	2301      	movs	r3, #1
 8014e6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014e70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e74:	bfa4      	itt	ge
 8014e76:	4643      	movge	r3, r8
 8014e78:	46a0      	movge	r8, r4
 8014e7a:	4630      	mov	r0, r6
 8014e7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014e80:	bfa6      	itte	ge
 8014e82:	461c      	movge	r4, r3
 8014e84:	2500      	movge	r5, #0
 8014e86:	2501      	movlt	r5, #1
 8014e88:	f7ff fd3a 	bl	8014900 <_Balloc>
 8014e8c:	b920      	cbnz	r0, 8014e98 <__mdiff+0x5c>
 8014e8e:	4b2e      	ldr	r3, [pc, #184]	; (8014f48 <__mdiff+0x10c>)
 8014e90:	4602      	mov	r2, r0
 8014e92:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014e96:	e7e5      	b.n	8014e64 <__mdiff+0x28>
 8014e98:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014e9c:	6926      	ldr	r6, [r4, #16]
 8014e9e:	60c5      	str	r5, [r0, #12]
 8014ea0:	f104 0914 	add.w	r9, r4, #20
 8014ea4:	f108 0514 	add.w	r5, r8, #20
 8014ea8:	f100 0e14 	add.w	lr, r0, #20
 8014eac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014eb0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014eb4:	f108 0210 	add.w	r2, r8, #16
 8014eb8:	46f2      	mov	sl, lr
 8014eba:	2100      	movs	r1, #0
 8014ebc:	f859 3b04 	ldr.w	r3, [r9], #4
 8014ec0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014ec4:	fa1f f883 	uxth.w	r8, r3
 8014ec8:	fa11 f18b 	uxtah	r1, r1, fp
 8014ecc:	0c1b      	lsrs	r3, r3, #16
 8014ece:	eba1 0808 	sub.w	r8, r1, r8
 8014ed2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014ed6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014eda:	fa1f f888 	uxth.w	r8, r8
 8014ede:	1419      	asrs	r1, r3, #16
 8014ee0:	454e      	cmp	r6, r9
 8014ee2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014ee6:	f84a 3b04 	str.w	r3, [sl], #4
 8014eea:	d8e7      	bhi.n	8014ebc <__mdiff+0x80>
 8014eec:	1b33      	subs	r3, r6, r4
 8014eee:	3b15      	subs	r3, #21
 8014ef0:	f023 0303 	bic.w	r3, r3, #3
 8014ef4:	3304      	adds	r3, #4
 8014ef6:	3415      	adds	r4, #21
 8014ef8:	42a6      	cmp	r6, r4
 8014efa:	bf38      	it	cc
 8014efc:	2304      	movcc	r3, #4
 8014efe:	441d      	add	r5, r3
 8014f00:	4473      	add	r3, lr
 8014f02:	469e      	mov	lr, r3
 8014f04:	462e      	mov	r6, r5
 8014f06:	4566      	cmp	r6, ip
 8014f08:	d30e      	bcc.n	8014f28 <__mdiff+0xec>
 8014f0a:	f10c 0203 	add.w	r2, ip, #3
 8014f0e:	1b52      	subs	r2, r2, r5
 8014f10:	f022 0203 	bic.w	r2, r2, #3
 8014f14:	3d03      	subs	r5, #3
 8014f16:	45ac      	cmp	ip, r5
 8014f18:	bf38      	it	cc
 8014f1a:	2200      	movcc	r2, #0
 8014f1c:	441a      	add	r2, r3
 8014f1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014f22:	b17b      	cbz	r3, 8014f44 <__mdiff+0x108>
 8014f24:	6107      	str	r7, [r0, #16]
 8014f26:	e7a3      	b.n	8014e70 <__mdiff+0x34>
 8014f28:	f856 8b04 	ldr.w	r8, [r6], #4
 8014f2c:	fa11 f288 	uxtah	r2, r1, r8
 8014f30:	1414      	asrs	r4, r2, #16
 8014f32:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014f36:	b292      	uxth	r2, r2
 8014f38:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014f3c:	f84e 2b04 	str.w	r2, [lr], #4
 8014f40:	1421      	asrs	r1, r4, #16
 8014f42:	e7e0      	b.n	8014f06 <__mdiff+0xca>
 8014f44:	3f01      	subs	r7, #1
 8014f46:	e7ea      	b.n	8014f1e <__mdiff+0xe2>
 8014f48:	080172b7 	.word	0x080172b7
 8014f4c:	0801725b 	.word	0x0801725b

08014f50 <__d2b>:
 8014f50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014f54:	4689      	mov	r9, r1
 8014f56:	2101      	movs	r1, #1
 8014f58:	ec57 6b10 	vmov	r6, r7, d0
 8014f5c:	4690      	mov	r8, r2
 8014f5e:	f7ff fccf 	bl	8014900 <_Balloc>
 8014f62:	4604      	mov	r4, r0
 8014f64:	b930      	cbnz	r0, 8014f74 <__d2b+0x24>
 8014f66:	4602      	mov	r2, r0
 8014f68:	4b25      	ldr	r3, [pc, #148]	; (8015000 <__d2b+0xb0>)
 8014f6a:	4826      	ldr	r0, [pc, #152]	; (8015004 <__d2b+0xb4>)
 8014f6c:	f240 310a 	movw	r1, #778	; 0x30a
 8014f70:	f7fe fd26 	bl	80139c0 <__assert_func>
 8014f74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014f78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014f7c:	bb35      	cbnz	r5, 8014fcc <__d2b+0x7c>
 8014f7e:	2e00      	cmp	r6, #0
 8014f80:	9301      	str	r3, [sp, #4]
 8014f82:	d028      	beq.n	8014fd6 <__d2b+0x86>
 8014f84:	4668      	mov	r0, sp
 8014f86:	9600      	str	r6, [sp, #0]
 8014f88:	f7ff fd82 	bl	8014a90 <__lo0bits>
 8014f8c:	9900      	ldr	r1, [sp, #0]
 8014f8e:	b300      	cbz	r0, 8014fd2 <__d2b+0x82>
 8014f90:	9a01      	ldr	r2, [sp, #4]
 8014f92:	f1c0 0320 	rsb	r3, r0, #32
 8014f96:	fa02 f303 	lsl.w	r3, r2, r3
 8014f9a:	430b      	orrs	r3, r1
 8014f9c:	40c2      	lsrs	r2, r0
 8014f9e:	6163      	str	r3, [r4, #20]
 8014fa0:	9201      	str	r2, [sp, #4]
 8014fa2:	9b01      	ldr	r3, [sp, #4]
 8014fa4:	61a3      	str	r3, [r4, #24]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	bf14      	ite	ne
 8014faa:	2202      	movne	r2, #2
 8014fac:	2201      	moveq	r2, #1
 8014fae:	6122      	str	r2, [r4, #16]
 8014fb0:	b1d5      	cbz	r5, 8014fe8 <__d2b+0x98>
 8014fb2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014fb6:	4405      	add	r5, r0
 8014fb8:	f8c9 5000 	str.w	r5, [r9]
 8014fbc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014fc0:	f8c8 0000 	str.w	r0, [r8]
 8014fc4:	4620      	mov	r0, r4
 8014fc6:	b003      	add	sp, #12
 8014fc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014fcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014fd0:	e7d5      	b.n	8014f7e <__d2b+0x2e>
 8014fd2:	6161      	str	r1, [r4, #20]
 8014fd4:	e7e5      	b.n	8014fa2 <__d2b+0x52>
 8014fd6:	a801      	add	r0, sp, #4
 8014fd8:	f7ff fd5a 	bl	8014a90 <__lo0bits>
 8014fdc:	9b01      	ldr	r3, [sp, #4]
 8014fde:	6163      	str	r3, [r4, #20]
 8014fe0:	2201      	movs	r2, #1
 8014fe2:	6122      	str	r2, [r4, #16]
 8014fe4:	3020      	adds	r0, #32
 8014fe6:	e7e3      	b.n	8014fb0 <__d2b+0x60>
 8014fe8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014fec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014ff0:	f8c9 0000 	str.w	r0, [r9]
 8014ff4:	6918      	ldr	r0, [r3, #16]
 8014ff6:	f7ff fd2b 	bl	8014a50 <__hi0bits>
 8014ffa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014ffe:	e7df      	b.n	8014fc0 <__d2b+0x70>
 8015000:	080172b7 	.word	0x080172b7
 8015004:	0801725b 	.word	0x0801725b

08015008 <_mprec_log10>:
 8015008:	2817      	cmp	r0, #23
 801500a:	b5d0      	push	{r4, r6, r7, lr}
 801500c:	4604      	mov	r4, r0
 801500e:	dc07      	bgt.n	8015020 <_mprec_log10+0x18>
 8015010:	4809      	ldr	r0, [pc, #36]	; (8015038 <_mprec_log10+0x30>)
 8015012:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8015016:	e9d4 0100 	ldrd	r0, r1, [r4]
 801501a:	ec41 0b10 	vmov	d0, r0, r1
 801501e:	bdd0      	pop	{r4, r6, r7, pc}
 8015020:	4906      	ldr	r1, [pc, #24]	; (801503c <_mprec_log10+0x34>)
 8015022:	4f07      	ldr	r7, [pc, #28]	; (8015040 <_mprec_log10+0x38>)
 8015024:	2000      	movs	r0, #0
 8015026:	2600      	movs	r6, #0
 8015028:	4632      	mov	r2, r6
 801502a:	463b      	mov	r3, r7
 801502c:	f7eb fabc 	bl	80005a8 <__aeabi_dmul>
 8015030:	3c01      	subs	r4, #1
 8015032:	d1f9      	bne.n	8015028 <_mprec_log10+0x20>
 8015034:	e7f1      	b.n	801501a <_mprec_log10+0x12>
 8015036:	bf00      	nop
 8015038:	080172f0 	.word	0x080172f0
 801503c:	3ff00000 	.word	0x3ff00000
 8015040:	40240000 	.word	0x40240000

08015044 <_calloc_r>:
 8015044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015046:	fba1 2402 	umull	r2, r4, r1, r2
 801504a:	b94c      	cbnz	r4, 8015060 <_calloc_r+0x1c>
 801504c:	4611      	mov	r1, r2
 801504e:	9201      	str	r2, [sp, #4]
 8015050:	f000 f87a 	bl	8015148 <_malloc_r>
 8015054:	9a01      	ldr	r2, [sp, #4]
 8015056:	4605      	mov	r5, r0
 8015058:	b930      	cbnz	r0, 8015068 <_calloc_r+0x24>
 801505a:	4628      	mov	r0, r5
 801505c:	b003      	add	sp, #12
 801505e:	bd30      	pop	{r4, r5, pc}
 8015060:	220c      	movs	r2, #12
 8015062:	6002      	str	r2, [r0, #0]
 8015064:	2500      	movs	r5, #0
 8015066:	e7f8      	b.n	801505a <_calloc_r+0x16>
 8015068:	4621      	mov	r1, r4
 801506a:	f7fe fd35 	bl	8013ad8 <memset>
 801506e:	e7f4      	b.n	801505a <_calloc_r+0x16>

08015070 <_free_r>:
 8015070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015072:	2900      	cmp	r1, #0
 8015074:	d044      	beq.n	8015100 <_free_r+0x90>
 8015076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801507a:	9001      	str	r0, [sp, #4]
 801507c:	2b00      	cmp	r3, #0
 801507e:	f1a1 0404 	sub.w	r4, r1, #4
 8015082:	bfb8      	it	lt
 8015084:	18e4      	addlt	r4, r4, r3
 8015086:	f001 f84d 	bl	8016124 <__malloc_lock>
 801508a:	4a1e      	ldr	r2, [pc, #120]	; (8015104 <_free_r+0x94>)
 801508c:	9801      	ldr	r0, [sp, #4]
 801508e:	6813      	ldr	r3, [r2, #0]
 8015090:	b933      	cbnz	r3, 80150a0 <_free_r+0x30>
 8015092:	6063      	str	r3, [r4, #4]
 8015094:	6014      	str	r4, [r2, #0]
 8015096:	b003      	add	sp, #12
 8015098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801509c:	f001 b848 	b.w	8016130 <__malloc_unlock>
 80150a0:	42a3      	cmp	r3, r4
 80150a2:	d908      	bls.n	80150b6 <_free_r+0x46>
 80150a4:	6825      	ldr	r5, [r4, #0]
 80150a6:	1961      	adds	r1, r4, r5
 80150a8:	428b      	cmp	r3, r1
 80150aa:	bf01      	itttt	eq
 80150ac:	6819      	ldreq	r1, [r3, #0]
 80150ae:	685b      	ldreq	r3, [r3, #4]
 80150b0:	1949      	addeq	r1, r1, r5
 80150b2:	6021      	streq	r1, [r4, #0]
 80150b4:	e7ed      	b.n	8015092 <_free_r+0x22>
 80150b6:	461a      	mov	r2, r3
 80150b8:	685b      	ldr	r3, [r3, #4]
 80150ba:	b10b      	cbz	r3, 80150c0 <_free_r+0x50>
 80150bc:	42a3      	cmp	r3, r4
 80150be:	d9fa      	bls.n	80150b6 <_free_r+0x46>
 80150c0:	6811      	ldr	r1, [r2, #0]
 80150c2:	1855      	adds	r5, r2, r1
 80150c4:	42a5      	cmp	r5, r4
 80150c6:	d10b      	bne.n	80150e0 <_free_r+0x70>
 80150c8:	6824      	ldr	r4, [r4, #0]
 80150ca:	4421      	add	r1, r4
 80150cc:	1854      	adds	r4, r2, r1
 80150ce:	42a3      	cmp	r3, r4
 80150d0:	6011      	str	r1, [r2, #0]
 80150d2:	d1e0      	bne.n	8015096 <_free_r+0x26>
 80150d4:	681c      	ldr	r4, [r3, #0]
 80150d6:	685b      	ldr	r3, [r3, #4]
 80150d8:	6053      	str	r3, [r2, #4]
 80150da:	4421      	add	r1, r4
 80150dc:	6011      	str	r1, [r2, #0]
 80150de:	e7da      	b.n	8015096 <_free_r+0x26>
 80150e0:	d902      	bls.n	80150e8 <_free_r+0x78>
 80150e2:	230c      	movs	r3, #12
 80150e4:	6003      	str	r3, [r0, #0]
 80150e6:	e7d6      	b.n	8015096 <_free_r+0x26>
 80150e8:	6825      	ldr	r5, [r4, #0]
 80150ea:	1961      	adds	r1, r4, r5
 80150ec:	428b      	cmp	r3, r1
 80150ee:	bf04      	itt	eq
 80150f0:	6819      	ldreq	r1, [r3, #0]
 80150f2:	685b      	ldreq	r3, [r3, #4]
 80150f4:	6063      	str	r3, [r4, #4]
 80150f6:	bf04      	itt	eq
 80150f8:	1949      	addeq	r1, r1, r5
 80150fa:	6021      	streq	r1, [r4, #0]
 80150fc:	6054      	str	r4, [r2, #4]
 80150fe:	e7ca      	b.n	8015096 <_free_r+0x26>
 8015100:	b003      	add	sp, #12
 8015102:	bd30      	pop	{r4, r5, pc}
 8015104:	2000256c 	.word	0x2000256c

08015108 <sbrk_aligned>:
 8015108:	b570      	push	{r4, r5, r6, lr}
 801510a:	4e0e      	ldr	r6, [pc, #56]	; (8015144 <sbrk_aligned+0x3c>)
 801510c:	460c      	mov	r4, r1
 801510e:	6831      	ldr	r1, [r6, #0]
 8015110:	4605      	mov	r5, r0
 8015112:	b911      	cbnz	r1, 801511a <sbrk_aligned+0x12>
 8015114:	f000 f88c 	bl	8015230 <_sbrk_r>
 8015118:	6030      	str	r0, [r6, #0]
 801511a:	4621      	mov	r1, r4
 801511c:	4628      	mov	r0, r5
 801511e:	f000 f887 	bl	8015230 <_sbrk_r>
 8015122:	1c43      	adds	r3, r0, #1
 8015124:	d00a      	beq.n	801513c <sbrk_aligned+0x34>
 8015126:	1cc4      	adds	r4, r0, #3
 8015128:	f024 0403 	bic.w	r4, r4, #3
 801512c:	42a0      	cmp	r0, r4
 801512e:	d007      	beq.n	8015140 <sbrk_aligned+0x38>
 8015130:	1a21      	subs	r1, r4, r0
 8015132:	4628      	mov	r0, r5
 8015134:	f000 f87c 	bl	8015230 <_sbrk_r>
 8015138:	3001      	adds	r0, #1
 801513a:	d101      	bne.n	8015140 <sbrk_aligned+0x38>
 801513c:	f04f 34ff 	mov.w	r4, #4294967295
 8015140:	4620      	mov	r0, r4
 8015142:	bd70      	pop	{r4, r5, r6, pc}
 8015144:	20002570 	.word	0x20002570

08015148 <_malloc_r>:
 8015148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801514c:	1ccd      	adds	r5, r1, #3
 801514e:	f025 0503 	bic.w	r5, r5, #3
 8015152:	3508      	adds	r5, #8
 8015154:	2d0c      	cmp	r5, #12
 8015156:	bf38      	it	cc
 8015158:	250c      	movcc	r5, #12
 801515a:	2d00      	cmp	r5, #0
 801515c:	4607      	mov	r7, r0
 801515e:	db01      	blt.n	8015164 <_malloc_r+0x1c>
 8015160:	42a9      	cmp	r1, r5
 8015162:	d905      	bls.n	8015170 <_malloc_r+0x28>
 8015164:	230c      	movs	r3, #12
 8015166:	603b      	str	r3, [r7, #0]
 8015168:	2600      	movs	r6, #0
 801516a:	4630      	mov	r0, r6
 801516c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015170:	4e2e      	ldr	r6, [pc, #184]	; (801522c <_malloc_r+0xe4>)
 8015172:	f000 ffd7 	bl	8016124 <__malloc_lock>
 8015176:	6833      	ldr	r3, [r6, #0]
 8015178:	461c      	mov	r4, r3
 801517a:	bb34      	cbnz	r4, 80151ca <_malloc_r+0x82>
 801517c:	4629      	mov	r1, r5
 801517e:	4638      	mov	r0, r7
 8015180:	f7ff ffc2 	bl	8015108 <sbrk_aligned>
 8015184:	1c43      	adds	r3, r0, #1
 8015186:	4604      	mov	r4, r0
 8015188:	d14d      	bne.n	8015226 <_malloc_r+0xde>
 801518a:	6834      	ldr	r4, [r6, #0]
 801518c:	4626      	mov	r6, r4
 801518e:	2e00      	cmp	r6, #0
 8015190:	d140      	bne.n	8015214 <_malloc_r+0xcc>
 8015192:	6823      	ldr	r3, [r4, #0]
 8015194:	4631      	mov	r1, r6
 8015196:	4638      	mov	r0, r7
 8015198:	eb04 0803 	add.w	r8, r4, r3
 801519c:	f000 f848 	bl	8015230 <_sbrk_r>
 80151a0:	4580      	cmp	r8, r0
 80151a2:	d13a      	bne.n	801521a <_malloc_r+0xd2>
 80151a4:	6821      	ldr	r1, [r4, #0]
 80151a6:	3503      	adds	r5, #3
 80151a8:	1a6d      	subs	r5, r5, r1
 80151aa:	f025 0503 	bic.w	r5, r5, #3
 80151ae:	3508      	adds	r5, #8
 80151b0:	2d0c      	cmp	r5, #12
 80151b2:	bf38      	it	cc
 80151b4:	250c      	movcc	r5, #12
 80151b6:	4629      	mov	r1, r5
 80151b8:	4638      	mov	r0, r7
 80151ba:	f7ff ffa5 	bl	8015108 <sbrk_aligned>
 80151be:	3001      	adds	r0, #1
 80151c0:	d02b      	beq.n	801521a <_malloc_r+0xd2>
 80151c2:	6823      	ldr	r3, [r4, #0]
 80151c4:	442b      	add	r3, r5
 80151c6:	6023      	str	r3, [r4, #0]
 80151c8:	e00e      	b.n	80151e8 <_malloc_r+0xa0>
 80151ca:	6822      	ldr	r2, [r4, #0]
 80151cc:	1b52      	subs	r2, r2, r5
 80151ce:	d41e      	bmi.n	801520e <_malloc_r+0xc6>
 80151d0:	2a0b      	cmp	r2, #11
 80151d2:	d916      	bls.n	8015202 <_malloc_r+0xba>
 80151d4:	1961      	adds	r1, r4, r5
 80151d6:	42a3      	cmp	r3, r4
 80151d8:	6025      	str	r5, [r4, #0]
 80151da:	bf18      	it	ne
 80151dc:	6059      	strne	r1, [r3, #4]
 80151de:	6863      	ldr	r3, [r4, #4]
 80151e0:	bf08      	it	eq
 80151e2:	6031      	streq	r1, [r6, #0]
 80151e4:	5162      	str	r2, [r4, r5]
 80151e6:	604b      	str	r3, [r1, #4]
 80151e8:	4638      	mov	r0, r7
 80151ea:	f104 060b 	add.w	r6, r4, #11
 80151ee:	f000 ff9f 	bl	8016130 <__malloc_unlock>
 80151f2:	f026 0607 	bic.w	r6, r6, #7
 80151f6:	1d23      	adds	r3, r4, #4
 80151f8:	1af2      	subs	r2, r6, r3
 80151fa:	d0b6      	beq.n	801516a <_malloc_r+0x22>
 80151fc:	1b9b      	subs	r3, r3, r6
 80151fe:	50a3      	str	r3, [r4, r2]
 8015200:	e7b3      	b.n	801516a <_malloc_r+0x22>
 8015202:	6862      	ldr	r2, [r4, #4]
 8015204:	42a3      	cmp	r3, r4
 8015206:	bf0c      	ite	eq
 8015208:	6032      	streq	r2, [r6, #0]
 801520a:	605a      	strne	r2, [r3, #4]
 801520c:	e7ec      	b.n	80151e8 <_malloc_r+0xa0>
 801520e:	4623      	mov	r3, r4
 8015210:	6864      	ldr	r4, [r4, #4]
 8015212:	e7b2      	b.n	801517a <_malloc_r+0x32>
 8015214:	4634      	mov	r4, r6
 8015216:	6876      	ldr	r6, [r6, #4]
 8015218:	e7b9      	b.n	801518e <_malloc_r+0x46>
 801521a:	230c      	movs	r3, #12
 801521c:	603b      	str	r3, [r7, #0]
 801521e:	4638      	mov	r0, r7
 8015220:	f000 ff86 	bl	8016130 <__malloc_unlock>
 8015224:	e7a1      	b.n	801516a <_malloc_r+0x22>
 8015226:	6025      	str	r5, [r4, #0]
 8015228:	e7de      	b.n	80151e8 <_malloc_r+0xa0>
 801522a:	bf00      	nop
 801522c:	2000256c 	.word	0x2000256c

08015230 <_sbrk_r>:
 8015230:	b538      	push	{r3, r4, r5, lr}
 8015232:	4d06      	ldr	r5, [pc, #24]	; (801524c <_sbrk_r+0x1c>)
 8015234:	2300      	movs	r3, #0
 8015236:	4604      	mov	r4, r0
 8015238:	4608      	mov	r0, r1
 801523a:	602b      	str	r3, [r5, #0]
 801523c:	f7ed fc1c 	bl	8002a78 <_sbrk>
 8015240:	1c43      	adds	r3, r0, #1
 8015242:	d102      	bne.n	801524a <_sbrk_r+0x1a>
 8015244:	682b      	ldr	r3, [r5, #0]
 8015246:	b103      	cbz	r3, 801524a <_sbrk_r+0x1a>
 8015248:	6023      	str	r3, [r4, #0]
 801524a:	bd38      	pop	{r3, r4, r5, pc}
 801524c:	20002574 	.word	0x20002574

08015250 <_raise_r>:
 8015250:	291f      	cmp	r1, #31
 8015252:	b538      	push	{r3, r4, r5, lr}
 8015254:	4604      	mov	r4, r0
 8015256:	460d      	mov	r5, r1
 8015258:	d904      	bls.n	8015264 <_raise_r+0x14>
 801525a:	2316      	movs	r3, #22
 801525c:	6003      	str	r3, [r0, #0]
 801525e:	f04f 30ff 	mov.w	r0, #4294967295
 8015262:	bd38      	pop	{r3, r4, r5, pc}
 8015264:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015266:	b112      	cbz	r2, 801526e <_raise_r+0x1e>
 8015268:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801526c:	b94b      	cbnz	r3, 8015282 <_raise_r+0x32>
 801526e:	4620      	mov	r0, r4
 8015270:	f000 f830 	bl	80152d4 <_getpid_r>
 8015274:	462a      	mov	r2, r5
 8015276:	4601      	mov	r1, r0
 8015278:	4620      	mov	r0, r4
 801527a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801527e:	f000 b817 	b.w	80152b0 <_kill_r>
 8015282:	2b01      	cmp	r3, #1
 8015284:	d00a      	beq.n	801529c <_raise_r+0x4c>
 8015286:	1c59      	adds	r1, r3, #1
 8015288:	d103      	bne.n	8015292 <_raise_r+0x42>
 801528a:	2316      	movs	r3, #22
 801528c:	6003      	str	r3, [r0, #0]
 801528e:	2001      	movs	r0, #1
 8015290:	e7e7      	b.n	8015262 <_raise_r+0x12>
 8015292:	2400      	movs	r4, #0
 8015294:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015298:	4628      	mov	r0, r5
 801529a:	4798      	blx	r3
 801529c:	2000      	movs	r0, #0
 801529e:	e7e0      	b.n	8015262 <_raise_r+0x12>

080152a0 <raise>:
 80152a0:	4b02      	ldr	r3, [pc, #8]	; (80152ac <raise+0xc>)
 80152a2:	4601      	mov	r1, r0
 80152a4:	6818      	ldr	r0, [r3, #0]
 80152a6:	f7ff bfd3 	b.w	8015250 <_raise_r>
 80152aa:	bf00      	nop
 80152ac:	2000014c 	.word	0x2000014c

080152b0 <_kill_r>:
 80152b0:	b538      	push	{r3, r4, r5, lr}
 80152b2:	4d07      	ldr	r5, [pc, #28]	; (80152d0 <_kill_r+0x20>)
 80152b4:	2300      	movs	r3, #0
 80152b6:	4604      	mov	r4, r0
 80152b8:	4608      	mov	r0, r1
 80152ba:	4611      	mov	r1, r2
 80152bc:	602b      	str	r3, [r5, #0]
 80152be:	f7ed fb53 	bl	8002968 <_kill>
 80152c2:	1c43      	adds	r3, r0, #1
 80152c4:	d102      	bne.n	80152cc <_kill_r+0x1c>
 80152c6:	682b      	ldr	r3, [r5, #0]
 80152c8:	b103      	cbz	r3, 80152cc <_kill_r+0x1c>
 80152ca:	6023      	str	r3, [r4, #0]
 80152cc:	bd38      	pop	{r3, r4, r5, pc}
 80152ce:	bf00      	nop
 80152d0:	20002574 	.word	0x20002574

080152d4 <_getpid_r>:
 80152d4:	f7ed bb40 	b.w	8002958 <_getpid>

080152d8 <__sread>:
 80152d8:	b510      	push	{r4, lr}
 80152da:	460c      	mov	r4, r1
 80152dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152e0:	f000 ff2c 	bl	801613c <_read_r>
 80152e4:	2800      	cmp	r0, #0
 80152e6:	bfab      	itete	ge
 80152e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80152ea:	89a3      	ldrhlt	r3, [r4, #12]
 80152ec:	181b      	addge	r3, r3, r0
 80152ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80152f2:	bfac      	ite	ge
 80152f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80152f6:	81a3      	strhlt	r3, [r4, #12]
 80152f8:	bd10      	pop	{r4, pc}

080152fa <__swrite>:
 80152fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152fe:	461f      	mov	r7, r3
 8015300:	898b      	ldrh	r3, [r1, #12]
 8015302:	05db      	lsls	r3, r3, #23
 8015304:	4605      	mov	r5, r0
 8015306:	460c      	mov	r4, r1
 8015308:	4616      	mov	r6, r2
 801530a:	d505      	bpl.n	8015318 <__swrite+0x1e>
 801530c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015310:	2302      	movs	r3, #2
 8015312:	2200      	movs	r2, #0
 8015314:	f000 feec 	bl	80160f0 <_lseek_r>
 8015318:	89a3      	ldrh	r3, [r4, #12]
 801531a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801531e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015322:	81a3      	strh	r3, [r4, #12]
 8015324:	4632      	mov	r2, r6
 8015326:	463b      	mov	r3, r7
 8015328:	4628      	mov	r0, r5
 801532a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801532e:	f000 b81f 	b.w	8015370 <_write_r>

08015332 <__sseek>:
 8015332:	b510      	push	{r4, lr}
 8015334:	460c      	mov	r4, r1
 8015336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801533a:	f000 fed9 	bl	80160f0 <_lseek_r>
 801533e:	1c43      	adds	r3, r0, #1
 8015340:	89a3      	ldrh	r3, [r4, #12]
 8015342:	bf15      	itete	ne
 8015344:	6560      	strne	r0, [r4, #84]	; 0x54
 8015346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801534a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801534e:	81a3      	strheq	r3, [r4, #12]
 8015350:	bf18      	it	ne
 8015352:	81a3      	strhne	r3, [r4, #12]
 8015354:	bd10      	pop	{r4, pc}

08015356 <__sclose>:
 8015356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801535a:	f000 b81b 	b.w	8015394 <_close_r>

0801535e <strcpy>:
 801535e:	4603      	mov	r3, r0
 8015360:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015364:	f803 2b01 	strb.w	r2, [r3], #1
 8015368:	2a00      	cmp	r2, #0
 801536a:	d1f9      	bne.n	8015360 <strcpy+0x2>
 801536c:	4770      	bx	lr
	...

08015370 <_write_r>:
 8015370:	b538      	push	{r3, r4, r5, lr}
 8015372:	4d07      	ldr	r5, [pc, #28]	; (8015390 <_write_r+0x20>)
 8015374:	4604      	mov	r4, r0
 8015376:	4608      	mov	r0, r1
 8015378:	4611      	mov	r1, r2
 801537a:	2200      	movs	r2, #0
 801537c:	602a      	str	r2, [r5, #0]
 801537e:	461a      	mov	r2, r3
 8015380:	f7ed fb29 	bl	80029d6 <_write>
 8015384:	1c43      	adds	r3, r0, #1
 8015386:	d102      	bne.n	801538e <_write_r+0x1e>
 8015388:	682b      	ldr	r3, [r5, #0]
 801538a:	b103      	cbz	r3, 801538e <_write_r+0x1e>
 801538c:	6023      	str	r3, [r4, #0]
 801538e:	bd38      	pop	{r3, r4, r5, pc}
 8015390:	20002574 	.word	0x20002574

08015394 <_close_r>:
 8015394:	b538      	push	{r3, r4, r5, lr}
 8015396:	4d06      	ldr	r5, [pc, #24]	; (80153b0 <_close_r+0x1c>)
 8015398:	2300      	movs	r3, #0
 801539a:	4604      	mov	r4, r0
 801539c:	4608      	mov	r0, r1
 801539e:	602b      	str	r3, [r5, #0]
 80153a0:	f7ed fb35 	bl	8002a0e <_close>
 80153a4:	1c43      	adds	r3, r0, #1
 80153a6:	d102      	bne.n	80153ae <_close_r+0x1a>
 80153a8:	682b      	ldr	r3, [r5, #0]
 80153aa:	b103      	cbz	r3, 80153ae <_close_r+0x1a>
 80153ac:	6023      	str	r3, [r4, #0]
 80153ae:	bd38      	pop	{r3, r4, r5, pc}
 80153b0:	20002574 	.word	0x20002574

080153b4 <quorem>:
 80153b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153b8:	6903      	ldr	r3, [r0, #16]
 80153ba:	690c      	ldr	r4, [r1, #16]
 80153bc:	42a3      	cmp	r3, r4
 80153be:	4607      	mov	r7, r0
 80153c0:	f2c0 8081 	blt.w	80154c6 <quorem+0x112>
 80153c4:	3c01      	subs	r4, #1
 80153c6:	f101 0814 	add.w	r8, r1, #20
 80153ca:	f100 0514 	add.w	r5, r0, #20
 80153ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80153d2:	9301      	str	r3, [sp, #4]
 80153d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80153d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80153dc:	3301      	adds	r3, #1
 80153de:	429a      	cmp	r2, r3
 80153e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80153e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80153e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80153ec:	d331      	bcc.n	8015452 <quorem+0x9e>
 80153ee:	f04f 0e00 	mov.w	lr, #0
 80153f2:	4640      	mov	r0, r8
 80153f4:	46ac      	mov	ip, r5
 80153f6:	46f2      	mov	sl, lr
 80153f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80153fc:	b293      	uxth	r3, r2
 80153fe:	fb06 e303 	mla	r3, r6, r3, lr
 8015402:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015406:	b29b      	uxth	r3, r3
 8015408:	ebaa 0303 	sub.w	r3, sl, r3
 801540c:	f8dc a000 	ldr.w	sl, [ip]
 8015410:	0c12      	lsrs	r2, r2, #16
 8015412:	fa13 f38a 	uxtah	r3, r3, sl
 8015416:	fb06 e202 	mla	r2, r6, r2, lr
 801541a:	9300      	str	r3, [sp, #0]
 801541c:	9b00      	ldr	r3, [sp, #0]
 801541e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015422:	b292      	uxth	r2, r2
 8015424:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8015428:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801542c:	f8bd 3000 	ldrh.w	r3, [sp]
 8015430:	4581      	cmp	r9, r0
 8015432:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015436:	f84c 3b04 	str.w	r3, [ip], #4
 801543a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801543e:	d2db      	bcs.n	80153f8 <quorem+0x44>
 8015440:	f855 300b 	ldr.w	r3, [r5, fp]
 8015444:	b92b      	cbnz	r3, 8015452 <quorem+0x9e>
 8015446:	9b01      	ldr	r3, [sp, #4]
 8015448:	3b04      	subs	r3, #4
 801544a:	429d      	cmp	r5, r3
 801544c:	461a      	mov	r2, r3
 801544e:	d32e      	bcc.n	80154ae <quorem+0xfa>
 8015450:	613c      	str	r4, [r7, #16]
 8015452:	4638      	mov	r0, r7
 8015454:	f7ff fcd6 	bl	8014e04 <__mcmp>
 8015458:	2800      	cmp	r0, #0
 801545a:	db24      	blt.n	80154a6 <quorem+0xf2>
 801545c:	3601      	adds	r6, #1
 801545e:	4628      	mov	r0, r5
 8015460:	f04f 0c00 	mov.w	ip, #0
 8015464:	f858 2b04 	ldr.w	r2, [r8], #4
 8015468:	f8d0 e000 	ldr.w	lr, [r0]
 801546c:	b293      	uxth	r3, r2
 801546e:	ebac 0303 	sub.w	r3, ip, r3
 8015472:	0c12      	lsrs	r2, r2, #16
 8015474:	fa13 f38e 	uxtah	r3, r3, lr
 8015478:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801547c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015480:	b29b      	uxth	r3, r3
 8015482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015486:	45c1      	cmp	r9, r8
 8015488:	f840 3b04 	str.w	r3, [r0], #4
 801548c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015490:	d2e8      	bcs.n	8015464 <quorem+0xb0>
 8015492:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015496:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801549a:	b922      	cbnz	r2, 80154a6 <quorem+0xf2>
 801549c:	3b04      	subs	r3, #4
 801549e:	429d      	cmp	r5, r3
 80154a0:	461a      	mov	r2, r3
 80154a2:	d30a      	bcc.n	80154ba <quorem+0x106>
 80154a4:	613c      	str	r4, [r7, #16]
 80154a6:	4630      	mov	r0, r6
 80154a8:	b003      	add	sp, #12
 80154aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154ae:	6812      	ldr	r2, [r2, #0]
 80154b0:	3b04      	subs	r3, #4
 80154b2:	2a00      	cmp	r2, #0
 80154b4:	d1cc      	bne.n	8015450 <quorem+0x9c>
 80154b6:	3c01      	subs	r4, #1
 80154b8:	e7c7      	b.n	801544a <quorem+0x96>
 80154ba:	6812      	ldr	r2, [r2, #0]
 80154bc:	3b04      	subs	r3, #4
 80154be:	2a00      	cmp	r2, #0
 80154c0:	d1f0      	bne.n	80154a4 <quorem+0xf0>
 80154c2:	3c01      	subs	r4, #1
 80154c4:	e7eb      	b.n	801549e <quorem+0xea>
 80154c6:	2000      	movs	r0, #0
 80154c8:	e7ee      	b.n	80154a8 <quorem+0xf4>
 80154ca:	0000      	movs	r0, r0
 80154cc:	0000      	movs	r0, r0
	...

080154d0 <_dtoa_r>:
 80154d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154d4:	ed2d 8b04 	vpush	{d8-d9}
 80154d8:	ec57 6b10 	vmov	r6, r7, d0
 80154dc:	b093      	sub	sp, #76	; 0x4c
 80154de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80154e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80154e4:	9106      	str	r1, [sp, #24]
 80154e6:	ee10 aa10 	vmov	sl, s0
 80154ea:	4604      	mov	r4, r0
 80154ec:	9209      	str	r2, [sp, #36]	; 0x24
 80154ee:	930c      	str	r3, [sp, #48]	; 0x30
 80154f0:	46bb      	mov	fp, r7
 80154f2:	b975      	cbnz	r5, 8015512 <_dtoa_r+0x42>
 80154f4:	2010      	movs	r0, #16
 80154f6:	f000 fe0d 	bl	8016114 <malloc>
 80154fa:	4602      	mov	r2, r0
 80154fc:	6260      	str	r0, [r4, #36]	; 0x24
 80154fe:	b920      	cbnz	r0, 801550a <_dtoa_r+0x3a>
 8015500:	4ba7      	ldr	r3, [pc, #668]	; (80157a0 <_dtoa_r+0x2d0>)
 8015502:	21ea      	movs	r1, #234	; 0xea
 8015504:	48a7      	ldr	r0, [pc, #668]	; (80157a4 <_dtoa_r+0x2d4>)
 8015506:	f7fe fa5b 	bl	80139c0 <__assert_func>
 801550a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801550e:	6005      	str	r5, [r0, #0]
 8015510:	60c5      	str	r5, [r0, #12]
 8015512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015514:	6819      	ldr	r1, [r3, #0]
 8015516:	b151      	cbz	r1, 801552e <_dtoa_r+0x5e>
 8015518:	685a      	ldr	r2, [r3, #4]
 801551a:	604a      	str	r2, [r1, #4]
 801551c:	2301      	movs	r3, #1
 801551e:	4093      	lsls	r3, r2
 8015520:	608b      	str	r3, [r1, #8]
 8015522:	4620      	mov	r0, r4
 8015524:	f7ff fa2c 	bl	8014980 <_Bfree>
 8015528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801552a:	2200      	movs	r2, #0
 801552c:	601a      	str	r2, [r3, #0]
 801552e:	1e3b      	subs	r3, r7, #0
 8015530:	bfaa      	itet	ge
 8015532:	2300      	movge	r3, #0
 8015534:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8015538:	f8c8 3000 	strge.w	r3, [r8]
 801553c:	4b9a      	ldr	r3, [pc, #616]	; (80157a8 <_dtoa_r+0x2d8>)
 801553e:	bfbc      	itt	lt
 8015540:	2201      	movlt	r2, #1
 8015542:	f8c8 2000 	strlt.w	r2, [r8]
 8015546:	ea33 030b 	bics.w	r3, r3, fp
 801554a:	d11b      	bne.n	8015584 <_dtoa_r+0xb4>
 801554c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801554e:	f242 730f 	movw	r3, #9999	; 0x270f
 8015552:	6013      	str	r3, [r2, #0]
 8015554:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015558:	4333      	orrs	r3, r6
 801555a:	f000 8592 	beq.w	8016082 <_dtoa_r+0xbb2>
 801555e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015560:	b963      	cbnz	r3, 801557c <_dtoa_r+0xac>
 8015562:	4b92      	ldr	r3, [pc, #584]	; (80157ac <_dtoa_r+0x2dc>)
 8015564:	e022      	b.n	80155ac <_dtoa_r+0xdc>
 8015566:	4b92      	ldr	r3, [pc, #584]	; (80157b0 <_dtoa_r+0x2e0>)
 8015568:	9301      	str	r3, [sp, #4]
 801556a:	3308      	adds	r3, #8
 801556c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801556e:	6013      	str	r3, [r2, #0]
 8015570:	9801      	ldr	r0, [sp, #4]
 8015572:	b013      	add	sp, #76	; 0x4c
 8015574:	ecbd 8b04 	vpop	{d8-d9}
 8015578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801557c:	4b8b      	ldr	r3, [pc, #556]	; (80157ac <_dtoa_r+0x2dc>)
 801557e:	9301      	str	r3, [sp, #4]
 8015580:	3303      	adds	r3, #3
 8015582:	e7f3      	b.n	801556c <_dtoa_r+0x9c>
 8015584:	2200      	movs	r2, #0
 8015586:	2300      	movs	r3, #0
 8015588:	4650      	mov	r0, sl
 801558a:	4659      	mov	r1, fp
 801558c:	f7eb fa74 	bl	8000a78 <__aeabi_dcmpeq>
 8015590:	ec4b ab19 	vmov	d9, sl, fp
 8015594:	4680      	mov	r8, r0
 8015596:	b158      	cbz	r0, 80155b0 <_dtoa_r+0xe0>
 8015598:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801559a:	2301      	movs	r3, #1
 801559c:	6013      	str	r3, [r2, #0]
 801559e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	f000 856b 	beq.w	801607c <_dtoa_r+0xbac>
 80155a6:	4883      	ldr	r0, [pc, #524]	; (80157b4 <_dtoa_r+0x2e4>)
 80155a8:	6018      	str	r0, [r3, #0]
 80155aa:	1e43      	subs	r3, r0, #1
 80155ac:	9301      	str	r3, [sp, #4]
 80155ae:	e7df      	b.n	8015570 <_dtoa_r+0xa0>
 80155b0:	ec4b ab10 	vmov	d0, sl, fp
 80155b4:	aa10      	add	r2, sp, #64	; 0x40
 80155b6:	a911      	add	r1, sp, #68	; 0x44
 80155b8:	4620      	mov	r0, r4
 80155ba:	f7ff fcc9 	bl	8014f50 <__d2b>
 80155be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80155c2:	ee08 0a10 	vmov	s16, r0
 80155c6:	2d00      	cmp	r5, #0
 80155c8:	f000 8084 	beq.w	80156d4 <_dtoa_r+0x204>
 80155cc:	ee19 3a90 	vmov	r3, s19
 80155d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80155d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80155d8:	4656      	mov	r6, sl
 80155da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80155de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80155e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80155e6:	4b74      	ldr	r3, [pc, #464]	; (80157b8 <_dtoa_r+0x2e8>)
 80155e8:	2200      	movs	r2, #0
 80155ea:	4630      	mov	r0, r6
 80155ec:	4639      	mov	r1, r7
 80155ee:	f7ea fe23 	bl	8000238 <__aeabi_dsub>
 80155f2:	a365      	add	r3, pc, #404	; (adr r3, 8015788 <_dtoa_r+0x2b8>)
 80155f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155f8:	f7ea ffd6 	bl	80005a8 <__aeabi_dmul>
 80155fc:	a364      	add	r3, pc, #400	; (adr r3, 8015790 <_dtoa_r+0x2c0>)
 80155fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015602:	f7ea fe1b 	bl	800023c <__adddf3>
 8015606:	4606      	mov	r6, r0
 8015608:	4628      	mov	r0, r5
 801560a:	460f      	mov	r7, r1
 801560c:	f7ea ff62 	bl	80004d4 <__aeabi_i2d>
 8015610:	a361      	add	r3, pc, #388	; (adr r3, 8015798 <_dtoa_r+0x2c8>)
 8015612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015616:	f7ea ffc7 	bl	80005a8 <__aeabi_dmul>
 801561a:	4602      	mov	r2, r0
 801561c:	460b      	mov	r3, r1
 801561e:	4630      	mov	r0, r6
 8015620:	4639      	mov	r1, r7
 8015622:	f7ea fe0b 	bl	800023c <__adddf3>
 8015626:	4606      	mov	r6, r0
 8015628:	460f      	mov	r7, r1
 801562a:	f7eb fa6d 	bl	8000b08 <__aeabi_d2iz>
 801562e:	2200      	movs	r2, #0
 8015630:	9000      	str	r0, [sp, #0]
 8015632:	2300      	movs	r3, #0
 8015634:	4630      	mov	r0, r6
 8015636:	4639      	mov	r1, r7
 8015638:	f7eb fa28 	bl	8000a8c <__aeabi_dcmplt>
 801563c:	b150      	cbz	r0, 8015654 <_dtoa_r+0x184>
 801563e:	9800      	ldr	r0, [sp, #0]
 8015640:	f7ea ff48 	bl	80004d4 <__aeabi_i2d>
 8015644:	4632      	mov	r2, r6
 8015646:	463b      	mov	r3, r7
 8015648:	f7eb fa16 	bl	8000a78 <__aeabi_dcmpeq>
 801564c:	b910      	cbnz	r0, 8015654 <_dtoa_r+0x184>
 801564e:	9b00      	ldr	r3, [sp, #0]
 8015650:	3b01      	subs	r3, #1
 8015652:	9300      	str	r3, [sp, #0]
 8015654:	9b00      	ldr	r3, [sp, #0]
 8015656:	2b16      	cmp	r3, #22
 8015658:	d85a      	bhi.n	8015710 <_dtoa_r+0x240>
 801565a:	9a00      	ldr	r2, [sp, #0]
 801565c:	4b57      	ldr	r3, [pc, #348]	; (80157bc <_dtoa_r+0x2ec>)
 801565e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015666:	ec51 0b19 	vmov	r0, r1, d9
 801566a:	f7eb fa0f 	bl	8000a8c <__aeabi_dcmplt>
 801566e:	2800      	cmp	r0, #0
 8015670:	d050      	beq.n	8015714 <_dtoa_r+0x244>
 8015672:	9b00      	ldr	r3, [sp, #0]
 8015674:	3b01      	subs	r3, #1
 8015676:	9300      	str	r3, [sp, #0]
 8015678:	2300      	movs	r3, #0
 801567a:	930b      	str	r3, [sp, #44]	; 0x2c
 801567c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801567e:	1b5d      	subs	r5, r3, r5
 8015680:	1e6b      	subs	r3, r5, #1
 8015682:	9305      	str	r3, [sp, #20]
 8015684:	bf45      	ittet	mi
 8015686:	f1c5 0301 	rsbmi	r3, r5, #1
 801568a:	9304      	strmi	r3, [sp, #16]
 801568c:	2300      	movpl	r3, #0
 801568e:	2300      	movmi	r3, #0
 8015690:	bf4c      	ite	mi
 8015692:	9305      	strmi	r3, [sp, #20]
 8015694:	9304      	strpl	r3, [sp, #16]
 8015696:	9b00      	ldr	r3, [sp, #0]
 8015698:	2b00      	cmp	r3, #0
 801569a:	db3d      	blt.n	8015718 <_dtoa_r+0x248>
 801569c:	9b05      	ldr	r3, [sp, #20]
 801569e:	9a00      	ldr	r2, [sp, #0]
 80156a0:	920a      	str	r2, [sp, #40]	; 0x28
 80156a2:	4413      	add	r3, r2
 80156a4:	9305      	str	r3, [sp, #20]
 80156a6:	2300      	movs	r3, #0
 80156a8:	9307      	str	r3, [sp, #28]
 80156aa:	9b06      	ldr	r3, [sp, #24]
 80156ac:	2b09      	cmp	r3, #9
 80156ae:	f200 8089 	bhi.w	80157c4 <_dtoa_r+0x2f4>
 80156b2:	2b05      	cmp	r3, #5
 80156b4:	bfc4      	itt	gt
 80156b6:	3b04      	subgt	r3, #4
 80156b8:	9306      	strgt	r3, [sp, #24]
 80156ba:	9b06      	ldr	r3, [sp, #24]
 80156bc:	f1a3 0302 	sub.w	r3, r3, #2
 80156c0:	bfcc      	ite	gt
 80156c2:	2500      	movgt	r5, #0
 80156c4:	2501      	movle	r5, #1
 80156c6:	2b03      	cmp	r3, #3
 80156c8:	f200 8087 	bhi.w	80157da <_dtoa_r+0x30a>
 80156cc:	e8df f003 	tbb	[pc, r3]
 80156d0:	59383a2d 	.word	0x59383a2d
 80156d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80156d8:	441d      	add	r5, r3
 80156da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80156de:	2b20      	cmp	r3, #32
 80156e0:	bfc1      	itttt	gt
 80156e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80156e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80156ea:	fa0b f303 	lslgt.w	r3, fp, r3
 80156ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80156f2:	bfda      	itte	le
 80156f4:	f1c3 0320 	rsble	r3, r3, #32
 80156f8:	fa06 f003 	lslle.w	r0, r6, r3
 80156fc:	4318      	orrgt	r0, r3
 80156fe:	f7ea fed9 	bl	80004b4 <__aeabi_ui2d>
 8015702:	2301      	movs	r3, #1
 8015704:	4606      	mov	r6, r0
 8015706:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801570a:	3d01      	subs	r5, #1
 801570c:	930e      	str	r3, [sp, #56]	; 0x38
 801570e:	e76a      	b.n	80155e6 <_dtoa_r+0x116>
 8015710:	2301      	movs	r3, #1
 8015712:	e7b2      	b.n	801567a <_dtoa_r+0x1aa>
 8015714:	900b      	str	r0, [sp, #44]	; 0x2c
 8015716:	e7b1      	b.n	801567c <_dtoa_r+0x1ac>
 8015718:	9b04      	ldr	r3, [sp, #16]
 801571a:	9a00      	ldr	r2, [sp, #0]
 801571c:	1a9b      	subs	r3, r3, r2
 801571e:	9304      	str	r3, [sp, #16]
 8015720:	4253      	negs	r3, r2
 8015722:	9307      	str	r3, [sp, #28]
 8015724:	2300      	movs	r3, #0
 8015726:	930a      	str	r3, [sp, #40]	; 0x28
 8015728:	e7bf      	b.n	80156aa <_dtoa_r+0x1da>
 801572a:	2300      	movs	r3, #0
 801572c:	9308      	str	r3, [sp, #32]
 801572e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015730:	2b00      	cmp	r3, #0
 8015732:	dc55      	bgt.n	80157e0 <_dtoa_r+0x310>
 8015734:	2301      	movs	r3, #1
 8015736:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801573a:	461a      	mov	r2, r3
 801573c:	9209      	str	r2, [sp, #36]	; 0x24
 801573e:	e00c      	b.n	801575a <_dtoa_r+0x28a>
 8015740:	2301      	movs	r3, #1
 8015742:	e7f3      	b.n	801572c <_dtoa_r+0x25c>
 8015744:	2300      	movs	r3, #0
 8015746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015748:	9308      	str	r3, [sp, #32]
 801574a:	9b00      	ldr	r3, [sp, #0]
 801574c:	4413      	add	r3, r2
 801574e:	9302      	str	r3, [sp, #8]
 8015750:	3301      	adds	r3, #1
 8015752:	2b01      	cmp	r3, #1
 8015754:	9303      	str	r3, [sp, #12]
 8015756:	bfb8      	it	lt
 8015758:	2301      	movlt	r3, #1
 801575a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801575c:	2200      	movs	r2, #0
 801575e:	6042      	str	r2, [r0, #4]
 8015760:	2204      	movs	r2, #4
 8015762:	f102 0614 	add.w	r6, r2, #20
 8015766:	429e      	cmp	r6, r3
 8015768:	6841      	ldr	r1, [r0, #4]
 801576a:	d93d      	bls.n	80157e8 <_dtoa_r+0x318>
 801576c:	4620      	mov	r0, r4
 801576e:	f7ff f8c7 	bl	8014900 <_Balloc>
 8015772:	9001      	str	r0, [sp, #4]
 8015774:	2800      	cmp	r0, #0
 8015776:	d13b      	bne.n	80157f0 <_dtoa_r+0x320>
 8015778:	4b11      	ldr	r3, [pc, #68]	; (80157c0 <_dtoa_r+0x2f0>)
 801577a:	4602      	mov	r2, r0
 801577c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015780:	e6c0      	b.n	8015504 <_dtoa_r+0x34>
 8015782:	2301      	movs	r3, #1
 8015784:	e7df      	b.n	8015746 <_dtoa_r+0x276>
 8015786:	bf00      	nop
 8015788:	636f4361 	.word	0x636f4361
 801578c:	3fd287a7 	.word	0x3fd287a7
 8015790:	8b60c8b3 	.word	0x8b60c8b3
 8015794:	3fc68a28 	.word	0x3fc68a28
 8015798:	509f79fb 	.word	0x509f79fb
 801579c:	3fd34413 	.word	0x3fd34413
 80157a0:	08017244 	.word	0x08017244
 80157a4:	080173d3 	.word	0x080173d3
 80157a8:	7ff00000 	.word	0x7ff00000
 80157ac:	080173cd 	.word	0x080173cd
 80157b0:	080173c4 	.word	0x080173c4
 80157b4:	080173d2 	.word	0x080173d2
 80157b8:	3ff80000 	.word	0x3ff80000
 80157bc:	080172f0 	.word	0x080172f0
 80157c0:	080172b7 	.word	0x080172b7
 80157c4:	2501      	movs	r5, #1
 80157c6:	2300      	movs	r3, #0
 80157c8:	9306      	str	r3, [sp, #24]
 80157ca:	9508      	str	r5, [sp, #32]
 80157cc:	f04f 33ff 	mov.w	r3, #4294967295
 80157d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80157d4:	2200      	movs	r2, #0
 80157d6:	2312      	movs	r3, #18
 80157d8:	e7b0      	b.n	801573c <_dtoa_r+0x26c>
 80157da:	2301      	movs	r3, #1
 80157dc:	9308      	str	r3, [sp, #32]
 80157de:	e7f5      	b.n	80157cc <_dtoa_r+0x2fc>
 80157e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80157e6:	e7b8      	b.n	801575a <_dtoa_r+0x28a>
 80157e8:	3101      	adds	r1, #1
 80157ea:	6041      	str	r1, [r0, #4]
 80157ec:	0052      	lsls	r2, r2, #1
 80157ee:	e7b8      	b.n	8015762 <_dtoa_r+0x292>
 80157f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80157f2:	9a01      	ldr	r2, [sp, #4]
 80157f4:	601a      	str	r2, [r3, #0]
 80157f6:	9b03      	ldr	r3, [sp, #12]
 80157f8:	2b0e      	cmp	r3, #14
 80157fa:	f200 809d 	bhi.w	8015938 <_dtoa_r+0x468>
 80157fe:	2d00      	cmp	r5, #0
 8015800:	f000 809a 	beq.w	8015938 <_dtoa_r+0x468>
 8015804:	9b00      	ldr	r3, [sp, #0]
 8015806:	2b00      	cmp	r3, #0
 8015808:	dd32      	ble.n	8015870 <_dtoa_r+0x3a0>
 801580a:	4ab7      	ldr	r2, [pc, #732]	; (8015ae8 <_dtoa_r+0x618>)
 801580c:	f003 030f 	and.w	r3, r3, #15
 8015810:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015814:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015818:	9b00      	ldr	r3, [sp, #0]
 801581a:	05d8      	lsls	r0, r3, #23
 801581c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8015820:	d516      	bpl.n	8015850 <_dtoa_r+0x380>
 8015822:	4bb2      	ldr	r3, [pc, #712]	; (8015aec <_dtoa_r+0x61c>)
 8015824:	ec51 0b19 	vmov	r0, r1, d9
 8015828:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801582c:	f7ea ffe6 	bl	80007fc <__aeabi_ddiv>
 8015830:	f007 070f 	and.w	r7, r7, #15
 8015834:	4682      	mov	sl, r0
 8015836:	468b      	mov	fp, r1
 8015838:	2503      	movs	r5, #3
 801583a:	4eac      	ldr	r6, [pc, #688]	; (8015aec <_dtoa_r+0x61c>)
 801583c:	b957      	cbnz	r7, 8015854 <_dtoa_r+0x384>
 801583e:	4642      	mov	r2, r8
 8015840:	464b      	mov	r3, r9
 8015842:	4650      	mov	r0, sl
 8015844:	4659      	mov	r1, fp
 8015846:	f7ea ffd9 	bl	80007fc <__aeabi_ddiv>
 801584a:	4682      	mov	sl, r0
 801584c:	468b      	mov	fp, r1
 801584e:	e028      	b.n	80158a2 <_dtoa_r+0x3d2>
 8015850:	2502      	movs	r5, #2
 8015852:	e7f2      	b.n	801583a <_dtoa_r+0x36a>
 8015854:	07f9      	lsls	r1, r7, #31
 8015856:	d508      	bpl.n	801586a <_dtoa_r+0x39a>
 8015858:	4640      	mov	r0, r8
 801585a:	4649      	mov	r1, r9
 801585c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015860:	f7ea fea2 	bl	80005a8 <__aeabi_dmul>
 8015864:	3501      	adds	r5, #1
 8015866:	4680      	mov	r8, r0
 8015868:	4689      	mov	r9, r1
 801586a:	107f      	asrs	r7, r7, #1
 801586c:	3608      	adds	r6, #8
 801586e:	e7e5      	b.n	801583c <_dtoa_r+0x36c>
 8015870:	f000 809b 	beq.w	80159aa <_dtoa_r+0x4da>
 8015874:	9b00      	ldr	r3, [sp, #0]
 8015876:	4f9d      	ldr	r7, [pc, #628]	; (8015aec <_dtoa_r+0x61c>)
 8015878:	425e      	negs	r6, r3
 801587a:	4b9b      	ldr	r3, [pc, #620]	; (8015ae8 <_dtoa_r+0x618>)
 801587c:	f006 020f 	and.w	r2, r6, #15
 8015880:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015888:	ec51 0b19 	vmov	r0, r1, d9
 801588c:	f7ea fe8c 	bl	80005a8 <__aeabi_dmul>
 8015890:	1136      	asrs	r6, r6, #4
 8015892:	4682      	mov	sl, r0
 8015894:	468b      	mov	fp, r1
 8015896:	2300      	movs	r3, #0
 8015898:	2502      	movs	r5, #2
 801589a:	2e00      	cmp	r6, #0
 801589c:	d17a      	bne.n	8015994 <_dtoa_r+0x4c4>
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d1d3      	bne.n	801584a <_dtoa_r+0x37a>
 80158a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	f000 8082 	beq.w	80159ae <_dtoa_r+0x4de>
 80158aa:	4b91      	ldr	r3, [pc, #580]	; (8015af0 <_dtoa_r+0x620>)
 80158ac:	2200      	movs	r2, #0
 80158ae:	4650      	mov	r0, sl
 80158b0:	4659      	mov	r1, fp
 80158b2:	f7eb f8eb 	bl	8000a8c <__aeabi_dcmplt>
 80158b6:	2800      	cmp	r0, #0
 80158b8:	d079      	beq.n	80159ae <_dtoa_r+0x4de>
 80158ba:	9b03      	ldr	r3, [sp, #12]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d076      	beq.n	80159ae <_dtoa_r+0x4de>
 80158c0:	9b02      	ldr	r3, [sp, #8]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	dd36      	ble.n	8015934 <_dtoa_r+0x464>
 80158c6:	9b00      	ldr	r3, [sp, #0]
 80158c8:	4650      	mov	r0, sl
 80158ca:	4659      	mov	r1, fp
 80158cc:	1e5f      	subs	r7, r3, #1
 80158ce:	2200      	movs	r2, #0
 80158d0:	4b88      	ldr	r3, [pc, #544]	; (8015af4 <_dtoa_r+0x624>)
 80158d2:	f7ea fe69 	bl	80005a8 <__aeabi_dmul>
 80158d6:	9e02      	ldr	r6, [sp, #8]
 80158d8:	4682      	mov	sl, r0
 80158da:	468b      	mov	fp, r1
 80158dc:	3501      	adds	r5, #1
 80158de:	4628      	mov	r0, r5
 80158e0:	f7ea fdf8 	bl	80004d4 <__aeabi_i2d>
 80158e4:	4652      	mov	r2, sl
 80158e6:	465b      	mov	r3, fp
 80158e8:	f7ea fe5e 	bl	80005a8 <__aeabi_dmul>
 80158ec:	4b82      	ldr	r3, [pc, #520]	; (8015af8 <_dtoa_r+0x628>)
 80158ee:	2200      	movs	r2, #0
 80158f0:	f7ea fca4 	bl	800023c <__adddf3>
 80158f4:	46d0      	mov	r8, sl
 80158f6:	46d9      	mov	r9, fp
 80158f8:	4682      	mov	sl, r0
 80158fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80158fe:	2e00      	cmp	r6, #0
 8015900:	d158      	bne.n	80159b4 <_dtoa_r+0x4e4>
 8015902:	4b7e      	ldr	r3, [pc, #504]	; (8015afc <_dtoa_r+0x62c>)
 8015904:	2200      	movs	r2, #0
 8015906:	4640      	mov	r0, r8
 8015908:	4649      	mov	r1, r9
 801590a:	f7ea fc95 	bl	8000238 <__aeabi_dsub>
 801590e:	4652      	mov	r2, sl
 8015910:	465b      	mov	r3, fp
 8015912:	4680      	mov	r8, r0
 8015914:	4689      	mov	r9, r1
 8015916:	f7eb f8d7 	bl	8000ac8 <__aeabi_dcmpgt>
 801591a:	2800      	cmp	r0, #0
 801591c:	f040 8295 	bne.w	8015e4a <_dtoa_r+0x97a>
 8015920:	4652      	mov	r2, sl
 8015922:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015926:	4640      	mov	r0, r8
 8015928:	4649      	mov	r1, r9
 801592a:	f7eb f8af 	bl	8000a8c <__aeabi_dcmplt>
 801592e:	2800      	cmp	r0, #0
 8015930:	f040 8289 	bne.w	8015e46 <_dtoa_r+0x976>
 8015934:	ec5b ab19 	vmov	sl, fp, d9
 8015938:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801593a:	2b00      	cmp	r3, #0
 801593c:	f2c0 8148 	blt.w	8015bd0 <_dtoa_r+0x700>
 8015940:	9a00      	ldr	r2, [sp, #0]
 8015942:	2a0e      	cmp	r2, #14
 8015944:	f300 8144 	bgt.w	8015bd0 <_dtoa_r+0x700>
 8015948:	4b67      	ldr	r3, [pc, #412]	; (8015ae8 <_dtoa_r+0x618>)
 801594a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801594e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015954:	2b00      	cmp	r3, #0
 8015956:	f280 80d5 	bge.w	8015b04 <_dtoa_r+0x634>
 801595a:	9b03      	ldr	r3, [sp, #12]
 801595c:	2b00      	cmp	r3, #0
 801595e:	f300 80d1 	bgt.w	8015b04 <_dtoa_r+0x634>
 8015962:	f040 826f 	bne.w	8015e44 <_dtoa_r+0x974>
 8015966:	4b65      	ldr	r3, [pc, #404]	; (8015afc <_dtoa_r+0x62c>)
 8015968:	2200      	movs	r2, #0
 801596a:	4640      	mov	r0, r8
 801596c:	4649      	mov	r1, r9
 801596e:	f7ea fe1b 	bl	80005a8 <__aeabi_dmul>
 8015972:	4652      	mov	r2, sl
 8015974:	465b      	mov	r3, fp
 8015976:	f7eb f89d 	bl	8000ab4 <__aeabi_dcmpge>
 801597a:	9e03      	ldr	r6, [sp, #12]
 801597c:	4637      	mov	r7, r6
 801597e:	2800      	cmp	r0, #0
 8015980:	f040 8245 	bne.w	8015e0e <_dtoa_r+0x93e>
 8015984:	9d01      	ldr	r5, [sp, #4]
 8015986:	2331      	movs	r3, #49	; 0x31
 8015988:	f805 3b01 	strb.w	r3, [r5], #1
 801598c:	9b00      	ldr	r3, [sp, #0]
 801598e:	3301      	adds	r3, #1
 8015990:	9300      	str	r3, [sp, #0]
 8015992:	e240      	b.n	8015e16 <_dtoa_r+0x946>
 8015994:	07f2      	lsls	r2, r6, #31
 8015996:	d505      	bpl.n	80159a4 <_dtoa_r+0x4d4>
 8015998:	e9d7 2300 	ldrd	r2, r3, [r7]
 801599c:	f7ea fe04 	bl	80005a8 <__aeabi_dmul>
 80159a0:	3501      	adds	r5, #1
 80159a2:	2301      	movs	r3, #1
 80159a4:	1076      	asrs	r6, r6, #1
 80159a6:	3708      	adds	r7, #8
 80159a8:	e777      	b.n	801589a <_dtoa_r+0x3ca>
 80159aa:	2502      	movs	r5, #2
 80159ac:	e779      	b.n	80158a2 <_dtoa_r+0x3d2>
 80159ae:	9f00      	ldr	r7, [sp, #0]
 80159b0:	9e03      	ldr	r6, [sp, #12]
 80159b2:	e794      	b.n	80158de <_dtoa_r+0x40e>
 80159b4:	9901      	ldr	r1, [sp, #4]
 80159b6:	4b4c      	ldr	r3, [pc, #304]	; (8015ae8 <_dtoa_r+0x618>)
 80159b8:	4431      	add	r1, r6
 80159ba:	910d      	str	r1, [sp, #52]	; 0x34
 80159bc:	9908      	ldr	r1, [sp, #32]
 80159be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80159c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80159c6:	2900      	cmp	r1, #0
 80159c8:	d043      	beq.n	8015a52 <_dtoa_r+0x582>
 80159ca:	494d      	ldr	r1, [pc, #308]	; (8015b00 <_dtoa_r+0x630>)
 80159cc:	2000      	movs	r0, #0
 80159ce:	f7ea ff15 	bl	80007fc <__aeabi_ddiv>
 80159d2:	4652      	mov	r2, sl
 80159d4:	465b      	mov	r3, fp
 80159d6:	f7ea fc2f 	bl	8000238 <__aeabi_dsub>
 80159da:	9d01      	ldr	r5, [sp, #4]
 80159dc:	4682      	mov	sl, r0
 80159de:	468b      	mov	fp, r1
 80159e0:	4649      	mov	r1, r9
 80159e2:	4640      	mov	r0, r8
 80159e4:	f7eb f890 	bl	8000b08 <__aeabi_d2iz>
 80159e8:	4606      	mov	r6, r0
 80159ea:	f7ea fd73 	bl	80004d4 <__aeabi_i2d>
 80159ee:	4602      	mov	r2, r0
 80159f0:	460b      	mov	r3, r1
 80159f2:	4640      	mov	r0, r8
 80159f4:	4649      	mov	r1, r9
 80159f6:	f7ea fc1f 	bl	8000238 <__aeabi_dsub>
 80159fa:	3630      	adds	r6, #48	; 0x30
 80159fc:	f805 6b01 	strb.w	r6, [r5], #1
 8015a00:	4652      	mov	r2, sl
 8015a02:	465b      	mov	r3, fp
 8015a04:	4680      	mov	r8, r0
 8015a06:	4689      	mov	r9, r1
 8015a08:	f7eb f840 	bl	8000a8c <__aeabi_dcmplt>
 8015a0c:	2800      	cmp	r0, #0
 8015a0e:	d163      	bne.n	8015ad8 <_dtoa_r+0x608>
 8015a10:	4642      	mov	r2, r8
 8015a12:	464b      	mov	r3, r9
 8015a14:	4936      	ldr	r1, [pc, #216]	; (8015af0 <_dtoa_r+0x620>)
 8015a16:	2000      	movs	r0, #0
 8015a18:	f7ea fc0e 	bl	8000238 <__aeabi_dsub>
 8015a1c:	4652      	mov	r2, sl
 8015a1e:	465b      	mov	r3, fp
 8015a20:	f7eb f834 	bl	8000a8c <__aeabi_dcmplt>
 8015a24:	2800      	cmp	r0, #0
 8015a26:	f040 80b5 	bne.w	8015b94 <_dtoa_r+0x6c4>
 8015a2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a2c:	429d      	cmp	r5, r3
 8015a2e:	d081      	beq.n	8015934 <_dtoa_r+0x464>
 8015a30:	4b30      	ldr	r3, [pc, #192]	; (8015af4 <_dtoa_r+0x624>)
 8015a32:	2200      	movs	r2, #0
 8015a34:	4650      	mov	r0, sl
 8015a36:	4659      	mov	r1, fp
 8015a38:	f7ea fdb6 	bl	80005a8 <__aeabi_dmul>
 8015a3c:	4b2d      	ldr	r3, [pc, #180]	; (8015af4 <_dtoa_r+0x624>)
 8015a3e:	4682      	mov	sl, r0
 8015a40:	468b      	mov	fp, r1
 8015a42:	4640      	mov	r0, r8
 8015a44:	4649      	mov	r1, r9
 8015a46:	2200      	movs	r2, #0
 8015a48:	f7ea fdae 	bl	80005a8 <__aeabi_dmul>
 8015a4c:	4680      	mov	r8, r0
 8015a4e:	4689      	mov	r9, r1
 8015a50:	e7c6      	b.n	80159e0 <_dtoa_r+0x510>
 8015a52:	4650      	mov	r0, sl
 8015a54:	4659      	mov	r1, fp
 8015a56:	f7ea fda7 	bl	80005a8 <__aeabi_dmul>
 8015a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a5c:	9d01      	ldr	r5, [sp, #4]
 8015a5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015a60:	4682      	mov	sl, r0
 8015a62:	468b      	mov	fp, r1
 8015a64:	4649      	mov	r1, r9
 8015a66:	4640      	mov	r0, r8
 8015a68:	f7eb f84e 	bl	8000b08 <__aeabi_d2iz>
 8015a6c:	4606      	mov	r6, r0
 8015a6e:	f7ea fd31 	bl	80004d4 <__aeabi_i2d>
 8015a72:	3630      	adds	r6, #48	; 0x30
 8015a74:	4602      	mov	r2, r0
 8015a76:	460b      	mov	r3, r1
 8015a78:	4640      	mov	r0, r8
 8015a7a:	4649      	mov	r1, r9
 8015a7c:	f7ea fbdc 	bl	8000238 <__aeabi_dsub>
 8015a80:	f805 6b01 	strb.w	r6, [r5], #1
 8015a84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a86:	429d      	cmp	r5, r3
 8015a88:	4680      	mov	r8, r0
 8015a8a:	4689      	mov	r9, r1
 8015a8c:	f04f 0200 	mov.w	r2, #0
 8015a90:	d124      	bne.n	8015adc <_dtoa_r+0x60c>
 8015a92:	4b1b      	ldr	r3, [pc, #108]	; (8015b00 <_dtoa_r+0x630>)
 8015a94:	4650      	mov	r0, sl
 8015a96:	4659      	mov	r1, fp
 8015a98:	f7ea fbd0 	bl	800023c <__adddf3>
 8015a9c:	4602      	mov	r2, r0
 8015a9e:	460b      	mov	r3, r1
 8015aa0:	4640      	mov	r0, r8
 8015aa2:	4649      	mov	r1, r9
 8015aa4:	f7eb f810 	bl	8000ac8 <__aeabi_dcmpgt>
 8015aa8:	2800      	cmp	r0, #0
 8015aaa:	d173      	bne.n	8015b94 <_dtoa_r+0x6c4>
 8015aac:	4652      	mov	r2, sl
 8015aae:	465b      	mov	r3, fp
 8015ab0:	4913      	ldr	r1, [pc, #76]	; (8015b00 <_dtoa_r+0x630>)
 8015ab2:	2000      	movs	r0, #0
 8015ab4:	f7ea fbc0 	bl	8000238 <__aeabi_dsub>
 8015ab8:	4602      	mov	r2, r0
 8015aba:	460b      	mov	r3, r1
 8015abc:	4640      	mov	r0, r8
 8015abe:	4649      	mov	r1, r9
 8015ac0:	f7ea ffe4 	bl	8000a8c <__aeabi_dcmplt>
 8015ac4:	2800      	cmp	r0, #0
 8015ac6:	f43f af35 	beq.w	8015934 <_dtoa_r+0x464>
 8015aca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015acc:	1e6b      	subs	r3, r5, #1
 8015ace:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ad0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015ad4:	2b30      	cmp	r3, #48	; 0x30
 8015ad6:	d0f8      	beq.n	8015aca <_dtoa_r+0x5fa>
 8015ad8:	9700      	str	r7, [sp, #0]
 8015ada:	e049      	b.n	8015b70 <_dtoa_r+0x6a0>
 8015adc:	4b05      	ldr	r3, [pc, #20]	; (8015af4 <_dtoa_r+0x624>)
 8015ade:	f7ea fd63 	bl	80005a8 <__aeabi_dmul>
 8015ae2:	4680      	mov	r8, r0
 8015ae4:	4689      	mov	r9, r1
 8015ae6:	e7bd      	b.n	8015a64 <_dtoa_r+0x594>
 8015ae8:	080172f0 	.word	0x080172f0
 8015aec:	080172c8 	.word	0x080172c8
 8015af0:	3ff00000 	.word	0x3ff00000
 8015af4:	40240000 	.word	0x40240000
 8015af8:	401c0000 	.word	0x401c0000
 8015afc:	40140000 	.word	0x40140000
 8015b00:	3fe00000 	.word	0x3fe00000
 8015b04:	9d01      	ldr	r5, [sp, #4]
 8015b06:	4656      	mov	r6, sl
 8015b08:	465f      	mov	r7, fp
 8015b0a:	4642      	mov	r2, r8
 8015b0c:	464b      	mov	r3, r9
 8015b0e:	4630      	mov	r0, r6
 8015b10:	4639      	mov	r1, r7
 8015b12:	f7ea fe73 	bl	80007fc <__aeabi_ddiv>
 8015b16:	f7ea fff7 	bl	8000b08 <__aeabi_d2iz>
 8015b1a:	4682      	mov	sl, r0
 8015b1c:	f7ea fcda 	bl	80004d4 <__aeabi_i2d>
 8015b20:	4642      	mov	r2, r8
 8015b22:	464b      	mov	r3, r9
 8015b24:	f7ea fd40 	bl	80005a8 <__aeabi_dmul>
 8015b28:	4602      	mov	r2, r0
 8015b2a:	460b      	mov	r3, r1
 8015b2c:	4630      	mov	r0, r6
 8015b2e:	4639      	mov	r1, r7
 8015b30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8015b34:	f7ea fb80 	bl	8000238 <__aeabi_dsub>
 8015b38:	f805 6b01 	strb.w	r6, [r5], #1
 8015b3c:	9e01      	ldr	r6, [sp, #4]
 8015b3e:	9f03      	ldr	r7, [sp, #12]
 8015b40:	1bae      	subs	r6, r5, r6
 8015b42:	42b7      	cmp	r7, r6
 8015b44:	4602      	mov	r2, r0
 8015b46:	460b      	mov	r3, r1
 8015b48:	d135      	bne.n	8015bb6 <_dtoa_r+0x6e6>
 8015b4a:	f7ea fb77 	bl	800023c <__adddf3>
 8015b4e:	4642      	mov	r2, r8
 8015b50:	464b      	mov	r3, r9
 8015b52:	4606      	mov	r6, r0
 8015b54:	460f      	mov	r7, r1
 8015b56:	f7ea ffb7 	bl	8000ac8 <__aeabi_dcmpgt>
 8015b5a:	b9d0      	cbnz	r0, 8015b92 <_dtoa_r+0x6c2>
 8015b5c:	4642      	mov	r2, r8
 8015b5e:	464b      	mov	r3, r9
 8015b60:	4630      	mov	r0, r6
 8015b62:	4639      	mov	r1, r7
 8015b64:	f7ea ff88 	bl	8000a78 <__aeabi_dcmpeq>
 8015b68:	b110      	cbz	r0, 8015b70 <_dtoa_r+0x6a0>
 8015b6a:	f01a 0f01 	tst.w	sl, #1
 8015b6e:	d110      	bne.n	8015b92 <_dtoa_r+0x6c2>
 8015b70:	4620      	mov	r0, r4
 8015b72:	ee18 1a10 	vmov	r1, s16
 8015b76:	f7fe ff03 	bl	8014980 <_Bfree>
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	9800      	ldr	r0, [sp, #0]
 8015b7e:	702b      	strb	r3, [r5, #0]
 8015b80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b82:	3001      	adds	r0, #1
 8015b84:	6018      	str	r0, [r3, #0]
 8015b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	f43f acf1 	beq.w	8015570 <_dtoa_r+0xa0>
 8015b8e:	601d      	str	r5, [r3, #0]
 8015b90:	e4ee      	b.n	8015570 <_dtoa_r+0xa0>
 8015b92:	9f00      	ldr	r7, [sp, #0]
 8015b94:	462b      	mov	r3, r5
 8015b96:	461d      	mov	r5, r3
 8015b98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015b9c:	2a39      	cmp	r2, #57	; 0x39
 8015b9e:	d106      	bne.n	8015bae <_dtoa_r+0x6de>
 8015ba0:	9a01      	ldr	r2, [sp, #4]
 8015ba2:	429a      	cmp	r2, r3
 8015ba4:	d1f7      	bne.n	8015b96 <_dtoa_r+0x6c6>
 8015ba6:	9901      	ldr	r1, [sp, #4]
 8015ba8:	2230      	movs	r2, #48	; 0x30
 8015baa:	3701      	adds	r7, #1
 8015bac:	700a      	strb	r2, [r1, #0]
 8015bae:	781a      	ldrb	r2, [r3, #0]
 8015bb0:	3201      	adds	r2, #1
 8015bb2:	701a      	strb	r2, [r3, #0]
 8015bb4:	e790      	b.n	8015ad8 <_dtoa_r+0x608>
 8015bb6:	4ba6      	ldr	r3, [pc, #664]	; (8015e50 <_dtoa_r+0x980>)
 8015bb8:	2200      	movs	r2, #0
 8015bba:	f7ea fcf5 	bl	80005a8 <__aeabi_dmul>
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	4606      	mov	r6, r0
 8015bc4:	460f      	mov	r7, r1
 8015bc6:	f7ea ff57 	bl	8000a78 <__aeabi_dcmpeq>
 8015bca:	2800      	cmp	r0, #0
 8015bcc:	d09d      	beq.n	8015b0a <_dtoa_r+0x63a>
 8015bce:	e7cf      	b.n	8015b70 <_dtoa_r+0x6a0>
 8015bd0:	9a08      	ldr	r2, [sp, #32]
 8015bd2:	2a00      	cmp	r2, #0
 8015bd4:	f000 80d7 	beq.w	8015d86 <_dtoa_r+0x8b6>
 8015bd8:	9a06      	ldr	r2, [sp, #24]
 8015bda:	2a01      	cmp	r2, #1
 8015bdc:	f300 80ba 	bgt.w	8015d54 <_dtoa_r+0x884>
 8015be0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015be2:	2a00      	cmp	r2, #0
 8015be4:	f000 80b2 	beq.w	8015d4c <_dtoa_r+0x87c>
 8015be8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015bec:	9e07      	ldr	r6, [sp, #28]
 8015bee:	9d04      	ldr	r5, [sp, #16]
 8015bf0:	9a04      	ldr	r2, [sp, #16]
 8015bf2:	441a      	add	r2, r3
 8015bf4:	9204      	str	r2, [sp, #16]
 8015bf6:	9a05      	ldr	r2, [sp, #20]
 8015bf8:	2101      	movs	r1, #1
 8015bfa:	441a      	add	r2, r3
 8015bfc:	4620      	mov	r0, r4
 8015bfe:	9205      	str	r2, [sp, #20]
 8015c00:	f7fe ff76 	bl	8014af0 <__i2b>
 8015c04:	4607      	mov	r7, r0
 8015c06:	2d00      	cmp	r5, #0
 8015c08:	dd0c      	ble.n	8015c24 <_dtoa_r+0x754>
 8015c0a:	9b05      	ldr	r3, [sp, #20]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	dd09      	ble.n	8015c24 <_dtoa_r+0x754>
 8015c10:	42ab      	cmp	r3, r5
 8015c12:	9a04      	ldr	r2, [sp, #16]
 8015c14:	bfa8      	it	ge
 8015c16:	462b      	movge	r3, r5
 8015c18:	1ad2      	subs	r2, r2, r3
 8015c1a:	9204      	str	r2, [sp, #16]
 8015c1c:	9a05      	ldr	r2, [sp, #20]
 8015c1e:	1aed      	subs	r5, r5, r3
 8015c20:	1ad3      	subs	r3, r2, r3
 8015c22:	9305      	str	r3, [sp, #20]
 8015c24:	9b07      	ldr	r3, [sp, #28]
 8015c26:	b31b      	cbz	r3, 8015c70 <_dtoa_r+0x7a0>
 8015c28:	9b08      	ldr	r3, [sp, #32]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	f000 80af 	beq.w	8015d8e <_dtoa_r+0x8be>
 8015c30:	2e00      	cmp	r6, #0
 8015c32:	dd13      	ble.n	8015c5c <_dtoa_r+0x78c>
 8015c34:	4639      	mov	r1, r7
 8015c36:	4632      	mov	r2, r6
 8015c38:	4620      	mov	r0, r4
 8015c3a:	f7ff f819 	bl	8014c70 <__pow5mult>
 8015c3e:	ee18 2a10 	vmov	r2, s16
 8015c42:	4601      	mov	r1, r0
 8015c44:	4607      	mov	r7, r0
 8015c46:	4620      	mov	r0, r4
 8015c48:	f7fe ff68 	bl	8014b1c <__multiply>
 8015c4c:	ee18 1a10 	vmov	r1, s16
 8015c50:	4680      	mov	r8, r0
 8015c52:	4620      	mov	r0, r4
 8015c54:	f7fe fe94 	bl	8014980 <_Bfree>
 8015c58:	ee08 8a10 	vmov	s16, r8
 8015c5c:	9b07      	ldr	r3, [sp, #28]
 8015c5e:	1b9a      	subs	r2, r3, r6
 8015c60:	d006      	beq.n	8015c70 <_dtoa_r+0x7a0>
 8015c62:	ee18 1a10 	vmov	r1, s16
 8015c66:	4620      	mov	r0, r4
 8015c68:	f7ff f802 	bl	8014c70 <__pow5mult>
 8015c6c:	ee08 0a10 	vmov	s16, r0
 8015c70:	2101      	movs	r1, #1
 8015c72:	4620      	mov	r0, r4
 8015c74:	f7fe ff3c 	bl	8014af0 <__i2b>
 8015c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	4606      	mov	r6, r0
 8015c7e:	f340 8088 	ble.w	8015d92 <_dtoa_r+0x8c2>
 8015c82:	461a      	mov	r2, r3
 8015c84:	4601      	mov	r1, r0
 8015c86:	4620      	mov	r0, r4
 8015c88:	f7fe fff2 	bl	8014c70 <__pow5mult>
 8015c8c:	9b06      	ldr	r3, [sp, #24]
 8015c8e:	2b01      	cmp	r3, #1
 8015c90:	4606      	mov	r6, r0
 8015c92:	f340 8081 	ble.w	8015d98 <_dtoa_r+0x8c8>
 8015c96:	f04f 0800 	mov.w	r8, #0
 8015c9a:	6933      	ldr	r3, [r6, #16]
 8015c9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015ca0:	6918      	ldr	r0, [r3, #16]
 8015ca2:	f7fe fed5 	bl	8014a50 <__hi0bits>
 8015ca6:	f1c0 0020 	rsb	r0, r0, #32
 8015caa:	9b05      	ldr	r3, [sp, #20]
 8015cac:	4418      	add	r0, r3
 8015cae:	f010 001f 	ands.w	r0, r0, #31
 8015cb2:	f000 8092 	beq.w	8015dda <_dtoa_r+0x90a>
 8015cb6:	f1c0 0320 	rsb	r3, r0, #32
 8015cba:	2b04      	cmp	r3, #4
 8015cbc:	f340 808a 	ble.w	8015dd4 <_dtoa_r+0x904>
 8015cc0:	f1c0 001c 	rsb	r0, r0, #28
 8015cc4:	9b04      	ldr	r3, [sp, #16]
 8015cc6:	4403      	add	r3, r0
 8015cc8:	9304      	str	r3, [sp, #16]
 8015cca:	9b05      	ldr	r3, [sp, #20]
 8015ccc:	4403      	add	r3, r0
 8015cce:	4405      	add	r5, r0
 8015cd0:	9305      	str	r3, [sp, #20]
 8015cd2:	9b04      	ldr	r3, [sp, #16]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	dd07      	ble.n	8015ce8 <_dtoa_r+0x818>
 8015cd8:	ee18 1a10 	vmov	r1, s16
 8015cdc:	461a      	mov	r2, r3
 8015cde:	4620      	mov	r0, r4
 8015ce0:	f7ff f820 	bl	8014d24 <__lshift>
 8015ce4:	ee08 0a10 	vmov	s16, r0
 8015ce8:	9b05      	ldr	r3, [sp, #20]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	dd05      	ble.n	8015cfa <_dtoa_r+0x82a>
 8015cee:	4631      	mov	r1, r6
 8015cf0:	461a      	mov	r2, r3
 8015cf2:	4620      	mov	r0, r4
 8015cf4:	f7ff f816 	bl	8014d24 <__lshift>
 8015cf8:	4606      	mov	r6, r0
 8015cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d06e      	beq.n	8015dde <_dtoa_r+0x90e>
 8015d00:	ee18 0a10 	vmov	r0, s16
 8015d04:	4631      	mov	r1, r6
 8015d06:	f7ff f87d 	bl	8014e04 <__mcmp>
 8015d0a:	2800      	cmp	r0, #0
 8015d0c:	da67      	bge.n	8015dde <_dtoa_r+0x90e>
 8015d0e:	9b00      	ldr	r3, [sp, #0]
 8015d10:	3b01      	subs	r3, #1
 8015d12:	ee18 1a10 	vmov	r1, s16
 8015d16:	9300      	str	r3, [sp, #0]
 8015d18:	220a      	movs	r2, #10
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	4620      	mov	r0, r4
 8015d1e:	f7fe fe51 	bl	80149c4 <__multadd>
 8015d22:	9b08      	ldr	r3, [sp, #32]
 8015d24:	ee08 0a10 	vmov	s16, r0
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	f000 81b1 	beq.w	8016090 <_dtoa_r+0xbc0>
 8015d2e:	2300      	movs	r3, #0
 8015d30:	4639      	mov	r1, r7
 8015d32:	220a      	movs	r2, #10
 8015d34:	4620      	mov	r0, r4
 8015d36:	f7fe fe45 	bl	80149c4 <__multadd>
 8015d3a:	9b02      	ldr	r3, [sp, #8]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	4607      	mov	r7, r0
 8015d40:	f300 808e 	bgt.w	8015e60 <_dtoa_r+0x990>
 8015d44:	9b06      	ldr	r3, [sp, #24]
 8015d46:	2b02      	cmp	r3, #2
 8015d48:	dc51      	bgt.n	8015dee <_dtoa_r+0x91e>
 8015d4a:	e089      	b.n	8015e60 <_dtoa_r+0x990>
 8015d4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015d52:	e74b      	b.n	8015bec <_dtoa_r+0x71c>
 8015d54:	9b03      	ldr	r3, [sp, #12]
 8015d56:	1e5e      	subs	r6, r3, #1
 8015d58:	9b07      	ldr	r3, [sp, #28]
 8015d5a:	42b3      	cmp	r3, r6
 8015d5c:	bfbf      	itttt	lt
 8015d5e:	9b07      	ldrlt	r3, [sp, #28]
 8015d60:	9607      	strlt	r6, [sp, #28]
 8015d62:	1af2      	sublt	r2, r6, r3
 8015d64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8015d66:	bfb6      	itet	lt
 8015d68:	189b      	addlt	r3, r3, r2
 8015d6a:	1b9e      	subge	r6, r3, r6
 8015d6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8015d6e:	9b03      	ldr	r3, [sp, #12]
 8015d70:	bfb8      	it	lt
 8015d72:	2600      	movlt	r6, #0
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	bfb7      	itett	lt
 8015d78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8015d7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8015d80:	1a9d      	sublt	r5, r3, r2
 8015d82:	2300      	movlt	r3, #0
 8015d84:	e734      	b.n	8015bf0 <_dtoa_r+0x720>
 8015d86:	9e07      	ldr	r6, [sp, #28]
 8015d88:	9d04      	ldr	r5, [sp, #16]
 8015d8a:	9f08      	ldr	r7, [sp, #32]
 8015d8c:	e73b      	b.n	8015c06 <_dtoa_r+0x736>
 8015d8e:	9a07      	ldr	r2, [sp, #28]
 8015d90:	e767      	b.n	8015c62 <_dtoa_r+0x792>
 8015d92:	9b06      	ldr	r3, [sp, #24]
 8015d94:	2b01      	cmp	r3, #1
 8015d96:	dc18      	bgt.n	8015dca <_dtoa_r+0x8fa>
 8015d98:	f1ba 0f00 	cmp.w	sl, #0
 8015d9c:	d115      	bne.n	8015dca <_dtoa_r+0x8fa>
 8015d9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015da2:	b993      	cbnz	r3, 8015dca <_dtoa_r+0x8fa>
 8015da4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015da8:	0d1b      	lsrs	r3, r3, #20
 8015daa:	051b      	lsls	r3, r3, #20
 8015dac:	b183      	cbz	r3, 8015dd0 <_dtoa_r+0x900>
 8015dae:	9b04      	ldr	r3, [sp, #16]
 8015db0:	3301      	adds	r3, #1
 8015db2:	9304      	str	r3, [sp, #16]
 8015db4:	9b05      	ldr	r3, [sp, #20]
 8015db6:	3301      	adds	r3, #1
 8015db8:	9305      	str	r3, [sp, #20]
 8015dba:	f04f 0801 	mov.w	r8, #1
 8015dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	f47f af6a 	bne.w	8015c9a <_dtoa_r+0x7ca>
 8015dc6:	2001      	movs	r0, #1
 8015dc8:	e76f      	b.n	8015caa <_dtoa_r+0x7da>
 8015dca:	f04f 0800 	mov.w	r8, #0
 8015dce:	e7f6      	b.n	8015dbe <_dtoa_r+0x8ee>
 8015dd0:	4698      	mov	r8, r3
 8015dd2:	e7f4      	b.n	8015dbe <_dtoa_r+0x8ee>
 8015dd4:	f43f af7d 	beq.w	8015cd2 <_dtoa_r+0x802>
 8015dd8:	4618      	mov	r0, r3
 8015dda:	301c      	adds	r0, #28
 8015ddc:	e772      	b.n	8015cc4 <_dtoa_r+0x7f4>
 8015dde:	9b03      	ldr	r3, [sp, #12]
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	dc37      	bgt.n	8015e54 <_dtoa_r+0x984>
 8015de4:	9b06      	ldr	r3, [sp, #24]
 8015de6:	2b02      	cmp	r3, #2
 8015de8:	dd34      	ble.n	8015e54 <_dtoa_r+0x984>
 8015dea:	9b03      	ldr	r3, [sp, #12]
 8015dec:	9302      	str	r3, [sp, #8]
 8015dee:	9b02      	ldr	r3, [sp, #8]
 8015df0:	b96b      	cbnz	r3, 8015e0e <_dtoa_r+0x93e>
 8015df2:	4631      	mov	r1, r6
 8015df4:	2205      	movs	r2, #5
 8015df6:	4620      	mov	r0, r4
 8015df8:	f7fe fde4 	bl	80149c4 <__multadd>
 8015dfc:	4601      	mov	r1, r0
 8015dfe:	4606      	mov	r6, r0
 8015e00:	ee18 0a10 	vmov	r0, s16
 8015e04:	f7fe fffe 	bl	8014e04 <__mcmp>
 8015e08:	2800      	cmp	r0, #0
 8015e0a:	f73f adbb 	bgt.w	8015984 <_dtoa_r+0x4b4>
 8015e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e10:	9d01      	ldr	r5, [sp, #4]
 8015e12:	43db      	mvns	r3, r3
 8015e14:	9300      	str	r3, [sp, #0]
 8015e16:	f04f 0800 	mov.w	r8, #0
 8015e1a:	4631      	mov	r1, r6
 8015e1c:	4620      	mov	r0, r4
 8015e1e:	f7fe fdaf 	bl	8014980 <_Bfree>
 8015e22:	2f00      	cmp	r7, #0
 8015e24:	f43f aea4 	beq.w	8015b70 <_dtoa_r+0x6a0>
 8015e28:	f1b8 0f00 	cmp.w	r8, #0
 8015e2c:	d005      	beq.n	8015e3a <_dtoa_r+0x96a>
 8015e2e:	45b8      	cmp	r8, r7
 8015e30:	d003      	beq.n	8015e3a <_dtoa_r+0x96a>
 8015e32:	4641      	mov	r1, r8
 8015e34:	4620      	mov	r0, r4
 8015e36:	f7fe fda3 	bl	8014980 <_Bfree>
 8015e3a:	4639      	mov	r1, r7
 8015e3c:	4620      	mov	r0, r4
 8015e3e:	f7fe fd9f 	bl	8014980 <_Bfree>
 8015e42:	e695      	b.n	8015b70 <_dtoa_r+0x6a0>
 8015e44:	2600      	movs	r6, #0
 8015e46:	4637      	mov	r7, r6
 8015e48:	e7e1      	b.n	8015e0e <_dtoa_r+0x93e>
 8015e4a:	9700      	str	r7, [sp, #0]
 8015e4c:	4637      	mov	r7, r6
 8015e4e:	e599      	b.n	8015984 <_dtoa_r+0x4b4>
 8015e50:	40240000 	.word	0x40240000
 8015e54:	9b08      	ldr	r3, [sp, #32]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	f000 80ca 	beq.w	8015ff0 <_dtoa_r+0xb20>
 8015e5c:	9b03      	ldr	r3, [sp, #12]
 8015e5e:	9302      	str	r3, [sp, #8]
 8015e60:	2d00      	cmp	r5, #0
 8015e62:	dd05      	ble.n	8015e70 <_dtoa_r+0x9a0>
 8015e64:	4639      	mov	r1, r7
 8015e66:	462a      	mov	r2, r5
 8015e68:	4620      	mov	r0, r4
 8015e6a:	f7fe ff5b 	bl	8014d24 <__lshift>
 8015e6e:	4607      	mov	r7, r0
 8015e70:	f1b8 0f00 	cmp.w	r8, #0
 8015e74:	d05b      	beq.n	8015f2e <_dtoa_r+0xa5e>
 8015e76:	6879      	ldr	r1, [r7, #4]
 8015e78:	4620      	mov	r0, r4
 8015e7a:	f7fe fd41 	bl	8014900 <_Balloc>
 8015e7e:	4605      	mov	r5, r0
 8015e80:	b928      	cbnz	r0, 8015e8e <_dtoa_r+0x9be>
 8015e82:	4b87      	ldr	r3, [pc, #540]	; (80160a0 <_dtoa_r+0xbd0>)
 8015e84:	4602      	mov	r2, r0
 8015e86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015e8a:	f7ff bb3b 	b.w	8015504 <_dtoa_r+0x34>
 8015e8e:	693a      	ldr	r2, [r7, #16]
 8015e90:	3202      	adds	r2, #2
 8015e92:	0092      	lsls	r2, r2, #2
 8015e94:	f107 010c 	add.w	r1, r7, #12
 8015e98:	300c      	adds	r0, #12
 8015e9a:	f7fd fe0f 	bl	8013abc <memcpy>
 8015e9e:	2201      	movs	r2, #1
 8015ea0:	4629      	mov	r1, r5
 8015ea2:	4620      	mov	r0, r4
 8015ea4:	f7fe ff3e 	bl	8014d24 <__lshift>
 8015ea8:	9b01      	ldr	r3, [sp, #4]
 8015eaa:	f103 0901 	add.w	r9, r3, #1
 8015eae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8015eb2:	4413      	add	r3, r2
 8015eb4:	9305      	str	r3, [sp, #20]
 8015eb6:	f00a 0301 	and.w	r3, sl, #1
 8015eba:	46b8      	mov	r8, r7
 8015ebc:	9304      	str	r3, [sp, #16]
 8015ebe:	4607      	mov	r7, r0
 8015ec0:	4631      	mov	r1, r6
 8015ec2:	ee18 0a10 	vmov	r0, s16
 8015ec6:	f7ff fa75 	bl	80153b4 <quorem>
 8015eca:	4641      	mov	r1, r8
 8015ecc:	9002      	str	r0, [sp, #8]
 8015ece:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015ed2:	ee18 0a10 	vmov	r0, s16
 8015ed6:	f7fe ff95 	bl	8014e04 <__mcmp>
 8015eda:	463a      	mov	r2, r7
 8015edc:	9003      	str	r0, [sp, #12]
 8015ede:	4631      	mov	r1, r6
 8015ee0:	4620      	mov	r0, r4
 8015ee2:	f7fe ffab 	bl	8014e3c <__mdiff>
 8015ee6:	68c2      	ldr	r2, [r0, #12]
 8015ee8:	f109 3bff 	add.w	fp, r9, #4294967295
 8015eec:	4605      	mov	r5, r0
 8015eee:	bb02      	cbnz	r2, 8015f32 <_dtoa_r+0xa62>
 8015ef0:	4601      	mov	r1, r0
 8015ef2:	ee18 0a10 	vmov	r0, s16
 8015ef6:	f7fe ff85 	bl	8014e04 <__mcmp>
 8015efa:	4602      	mov	r2, r0
 8015efc:	4629      	mov	r1, r5
 8015efe:	4620      	mov	r0, r4
 8015f00:	9207      	str	r2, [sp, #28]
 8015f02:	f7fe fd3d 	bl	8014980 <_Bfree>
 8015f06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8015f0a:	ea43 0102 	orr.w	r1, r3, r2
 8015f0e:	9b04      	ldr	r3, [sp, #16]
 8015f10:	430b      	orrs	r3, r1
 8015f12:	464d      	mov	r5, r9
 8015f14:	d10f      	bne.n	8015f36 <_dtoa_r+0xa66>
 8015f16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015f1a:	d02a      	beq.n	8015f72 <_dtoa_r+0xaa2>
 8015f1c:	9b03      	ldr	r3, [sp, #12]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	dd02      	ble.n	8015f28 <_dtoa_r+0xa58>
 8015f22:	9b02      	ldr	r3, [sp, #8]
 8015f24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8015f28:	f88b a000 	strb.w	sl, [fp]
 8015f2c:	e775      	b.n	8015e1a <_dtoa_r+0x94a>
 8015f2e:	4638      	mov	r0, r7
 8015f30:	e7ba      	b.n	8015ea8 <_dtoa_r+0x9d8>
 8015f32:	2201      	movs	r2, #1
 8015f34:	e7e2      	b.n	8015efc <_dtoa_r+0xa2c>
 8015f36:	9b03      	ldr	r3, [sp, #12]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	db04      	blt.n	8015f46 <_dtoa_r+0xa76>
 8015f3c:	9906      	ldr	r1, [sp, #24]
 8015f3e:	430b      	orrs	r3, r1
 8015f40:	9904      	ldr	r1, [sp, #16]
 8015f42:	430b      	orrs	r3, r1
 8015f44:	d122      	bne.n	8015f8c <_dtoa_r+0xabc>
 8015f46:	2a00      	cmp	r2, #0
 8015f48:	ddee      	ble.n	8015f28 <_dtoa_r+0xa58>
 8015f4a:	ee18 1a10 	vmov	r1, s16
 8015f4e:	2201      	movs	r2, #1
 8015f50:	4620      	mov	r0, r4
 8015f52:	f7fe fee7 	bl	8014d24 <__lshift>
 8015f56:	4631      	mov	r1, r6
 8015f58:	ee08 0a10 	vmov	s16, r0
 8015f5c:	f7fe ff52 	bl	8014e04 <__mcmp>
 8015f60:	2800      	cmp	r0, #0
 8015f62:	dc03      	bgt.n	8015f6c <_dtoa_r+0xa9c>
 8015f64:	d1e0      	bne.n	8015f28 <_dtoa_r+0xa58>
 8015f66:	f01a 0f01 	tst.w	sl, #1
 8015f6a:	d0dd      	beq.n	8015f28 <_dtoa_r+0xa58>
 8015f6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015f70:	d1d7      	bne.n	8015f22 <_dtoa_r+0xa52>
 8015f72:	2339      	movs	r3, #57	; 0x39
 8015f74:	f88b 3000 	strb.w	r3, [fp]
 8015f78:	462b      	mov	r3, r5
 8015f7a:	461d      	mov	r5, r3
 8015f7c:	3b01      	subs	r3, #1
 8015f7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015f82:	2a39      	cmp	r2, #57	; 0x39
 8015f84:	d071      	beq.n	801606a <_dtoa_r+0xb9a>
 8015f86:	3201      	adds	r2, #1
 8015f88:	701a      	strb	r2, [r3, #0]
 8015f8a:	e746      	b.n	8015e1a <_dtoa_r+0x94a>
 8015f8c:	2a00      	cmp	r2, #0
 8015f8e:	dd07      	ble.n	8015fa0 <_dtoa_r+0xad0>
 8015f90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015f94:	d0ed      	beq.n	8015f72 <_dtoa_r+0xaa2>
 8015f96:	f10a 0301 	add.w	r3, sl, #1
 8015f9a:	f88b 3000 	strb.w	r3, [fp]
 8015f9e:	e73c      	b.n	8015e1a <_dtoa_r+0x94a>
 8015fa0:	9b05      	ldr	r3, [sp, #20]
 8015fa2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8015fa6:	4599      	cmp	r9, r3
 8015fa8:	d047      	beq.n	801603a <_dtoa_r+0xb6a>
 8015faa:	ee18 1a10 	vmov	r1, s16
 8015fae:	2300      	movs	r3, #0
 8015fb0:	220a      	movs	r2, #10
 8015fb2:	4620      	mov	r0, r4
 8015fb4:	f7fe fd06 	bl	80149c4 <__multadd>
 8015fb8:	45b8      	cmp	r8, r7
 8015fba:	ee08 0a10 	vmov	s16, r0
 8015fbe:	f04f 0300 	mov.w	r3, #0
 8015fc2:	f04f 020a 	mov.w	r2, #10
 8015fc6:	4641      	mov	r1, r8
 8015fc8:	4620      	mov	r0, r4
 8015fca:	d106      	bne.n	8015fda <_dtoa_r+0xb0a>
 8015fcc:	f7fe fcfa 	bl	80149c4 <__multadd>
 8015fd0:	4680      	mov	r8, r0
 8015fd2:	4607      	mov	r7, r0
 8015fd4:	f109 0901 	add.w	r9, r9, #1
 8015fd8:	e772      	b.n	8015ec0 <_dtoa_r+0x9f0>
 8015fda:	f7fe fcf3 	bl	80149c4 <__multadd>
 8015fde:	4639      	mov	r1, r7
 8015fe0:	4680      	mov	r8, r0
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	220a      	movs	r2, #10
 8015fe6:	4620      	mov	r0, r4
 8015fe8:	f7fe fcec 	bl	80149c4 <__multadd>
 8015fec:	4607      	mov	r7, r0
 8015fee:	e7f1      	b.n	8015fd4 <_dtoa_r+0xb04>
 8015ff0:	9b03      	ldr	r3, [sp, #12]
 8015ff2:	9302      	str	r3, [sp, #8]
 8015ff4:	9d01      	ldr	r5, [sp, #4]
 8015ff6:	ee18 0a10 	vmov	r0, s16
 8015ffa:	4631      	mov	r1, r6
 8015ffc:	f7ff f9da 	bl	80153b4 <quorem>
 8016000:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8016004:	9b01      	ldr	r3, [sp, #4]
 8016006:	f805 ab01 	strb.w	sl, [r5], #1
 801600a:	1aea      	subs	r2, r5, r3
 801600c:	9b02      	ldr	r3, [sp, #8]
 801600e:	4293      	cmp	r3, r2
 8016010:	dd09      	ble.n	8016026 <_dtoa_r+0xb56>
 8016012:	ee18 1a10 	vmov	r1, s16
 8016016:	2300      	movs	r3, #0
 8016018:	220a      	movs	r2, #10
 801601a:	4620      	mov	r0, r4
 801601c:	f7fe fcd2 	bl	80149c4 <__multadd>
 8016020:	ee08 0a10 	vmov	s16, r0
 8016024:	e7e7      	b.n	8015ff6 <_dtoa_r+0xb26>
 8016026:	9b02      	ldr	r3, [sp, #8]
 8016028:	2b00      	cmp	r3, #0
 801602a:	bfc8      	it	gt
 801602c:	461d      	movgt	r5, r3
 801602e:	9b01      	ldr	r3, [sp, #4]
 8016030:	bfd8      	it	le
 8016032:	2501      	movle	r5, #1
 8016034:	441d      	add	r5, r3
 8016036:	f04f 0800 	mov.w	r8, #0
 801603a:	ee18 1a10 	vmov	r1, s16
 801603e:	2201      	movs	r2, #1
 8016040:	4620      	mov	r0, r4
 8016042:	f7fe fe6f 	bl	8014d24 <__lshift>
 8016046:	4631      	mov	r1, r6
 8016048:	ee08 0a10 	vmov	s16, r0
 801604c:	f7fe feda 	bl	8014e04 <__mcmp>
 8016050:	2800      	cmp	r0, #0
 8016052:	dc91      	bgt.n	8015f78 <_dtoa_r+0xaa8>
 8016054:	d102      	bne.n	801605c <_dtoa_r+0xb8c>
 8016056:	f01a 0f01 	tst.w	sl, #1
 801605a:	d18d      	bne.n	8015f78 <_dtoa_r+0xaa8>
 801605c:	462b      	mov	r3, r5
 801605e:	461d      	mov	r5, r3
 8016060:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016064:	2a30      	cmp	r2, #48	; 0x30
 8016066:	d0fa      	beq.n	801605e <_dtoa_r+0xb8e>
 8016068:	e6d7      	b.n	8015e1a <_dtoa_r+0x94a>
 801606a:	9a01      	ldr	r2, [sp, #4]
 801606c:	429a      	cmp	r2, r3
 801606e:	d184      	bne.n	8015f7a <_dtoa_r+0xaaa>
 8016070:	9b00      	ldr	r3, [sp, #0]
 8016072:	3301      	adds	r3, #1
 8016074:	9300      	str	r3, [sp, #0]
 8016076:	2331      	movs	r3, #49	; 0x31
 8016078:	7013      	strb	r3, [r2, #0]
 801607a:	e6ce      	b.n	8015e1a <_dtoa_r+0x94a>
 801607c:	4b09      	ldr	r3, [pc, #36]	; (80160a4 <_dtoa_r+0xbd4>)
 801607e:	f7ff ba95 	b.w	80155ac <_dtoa_r+0xdc>
 8016082:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016084:	2b00      	cmp	r3, #0
 8016086:	f47f aa6e 	bne.w	8015566 <_dtoa_r+0x96>
 801608a:	4b07      	ldr	r3, [pc, #28]	; (80160a8 <_dtoa_r+0xbd8>)
 801608c:	f7ff ba8e 	b.w	80155ac <_dtoa_r+0xdc>
 8016090:	9b02      	ldr	r3, [sp, #8]
 8016092:	2b00      	cmp	r3, #0
 8016094:	dcae      	bgt.n	8015ff4 <_dtoa_r+0xb24>
 8016096:	9b06      	ldr	r3, [sp, #24]
 8016098:	2b02      	cmp	r3, #2
 801609a:	f73f aea8 	bgt.w	8015dee <_dtoa_r+0x91e>
 801609e:	e7a9      	b.n	8015ff4 <_dtoa_r+0xb24>
 80160a0:	080172b7 	.word	0x080172b7
 80160a4:	080173d1 	.word	0x080173d1
 80160a8:	080173c4 	.word	0x080173c4

080160ac <_fstat_r>:
 80160ac:	b538      	push	{r3, r4, r5, lr}
 80160ae:	4d07      	ldr	r5, [pc, #28]	; (80160cc <_fstat_r+0x20>)
 80160b0:	2300      	movs	r3, #0
 80160b2:	4604      	mov	r4, r0
 80160b4:	4608      	mov	r0, r1
 80160b6:	4611      	mov	r1, r2
 80160b8:	602b      	str	r3, [r5, #0]
 80160ba:	f7ec fcb4 	bl	8002a26 <_fstat>
 80160be:	1c43      	adds	r3, r0, #1
 80160c0:	d102      	bne.n	80160c8 <_fstat_r+0x1c>
 80160c2:	682b      	ldr	r3, [r5, #0]
 80160c4:	b103      	cbz	r3, 80160c8 <_fstat_r+0x1c>
 80160c6:	6023      	str	r3, [r4, #0]
 80160c8:	bd38      	pop	{r3, r4, r5, pc}
 80160ca:	bf00      	nop
 80160cc:	20002574 	.word	0x20002574

080160d0 <_isatty_r>:
 80160d0:	b538      	push	{r3, r4, r5, lr}
 80160d2:	4d06      	ldr	r5, [pc, #24]	; (80160ec <_isatty_r+0x1c>)
 80160d4:	2300      	movs	r3, #0
 80160d6:	4604      	mov	r4, r0
 80160d8:	4608      	mov	r0, r1
 80160da:	602b      	str	r3, [r5, #0]
 80160dc:	f7ec fcb3 	bl	8002a46 <_isatty>
 80160e0:	1c43      	adds	r3, r0, #1
 80160e2:	d102      	bne.n	80160ea <_isatty_r+0x1a>
 80160e4:	682b      	ldr	r3, [r5, #0]
 80160e6:	b103      	cbz	r3, 80160ea <_isatty_r+0x1a>
 80160e8:	6023      	str	r3, [r4, #0]
 80160ea:	bd38      	pop	{r3, r4, r5, pc}
 80160ec:	20002574 	.word	0x20002574

080160f0 <_lseek_r>:
 80160f0:	b538      	push	{r3, r4, r5, lr}
 80160f2:	4d07      	ldr	r5, [pc, #28]	; (8016110 <_lseek_r+0x20>)
 80160f4:	4604      	mov	r4, r0
 80160f6:	4608      	mov	r0, r1
 80160f8:	4611      	mov	r1, r2
 80160fa:	2200      	movs	r2, #0
 80160fc:	602a      	str	r2, [r5, #0]
 80160fe:	461a      	mov	r2, r3
 8016100:	f7ec fcac 	bl	8002a5c <_lseek>
 8016104:	1c43      	adds	r3, r0, #1
 8016106:	d102      	bne.n	801610e <_lseek_r+0x1e>
 8016108:	682b      	ldr	r3, [r5, #0]
 801610a:	b103      	cbz	r3, 801610e <_lseek_r+0x1e>
 801610c:	6023      	str	r3, [r4, #0]
 801610e:	bd38      	pop	{r3, r4, r5, pc}
 8016110:	20002574 	.word	0x20002574

08016114 <malloc>:
 8016114:	4b02      	ldr	r3, [pc, #8]	; (8016120 <malloc+0xc>)
 8016116:	4601      	mov	r1, r0
 8016118:	6818      	ldr	r0, [r3, #0]
 801611a:	f7ff b815 	b.w	8015148 <_malloc_r>
 801611e:	bf00      	nop
 8016120:	2000014c 	.word	0x2000014c

08016124 <__malloc_lock>:
 8016124:	4801      	ldr	r0, [pc, #4]	; (801612c <__malloc_lock+0x8>)
 8016126:	f7fe bb83 	b.w	8014830 <__retarget_lock_acquire_recursive>
 801612a:	bf00      	nop
 801612c:	20002568 	.word	0x20002568

08016130 <__malloc_unlock>:
 8016130:	4801      	ldr	r0, [pc, #4]	; (8016138 <__malloc_unlock+0x8>)
 8016132:	f7fe bb7e 	b.w	8014832 <__retarget_lock_release_recursive>
 8016136:	bf00      	nop
 8016138:	20002568 	.word	0x20002568

0801613c <_read_r>:
 801613c:	b538      	push	{r3, r4, r5, lr}
 801613e:	4d07      	ldr	r5, [pc, #28]	; (801615c <_read_r+0x20>)
 8016140:	4604      	mov	r4, r0
 8016142:	4608      	mov	r0, r1
 8016144:	4611      	mov	r1, r2
 8016146:	2200      	movs	r2, #0
 8016148:	602a      	str	r2, [r5, #0]
 801614a:	461a      	mov	r2, r3
 801614c:	f7ec fc26 	bl	800299c <_read>
 8016150:	1c43      	adds	r3, r0, #1
 8016152:	d102      	bne.n	801615a <_read_r+0x1e>
 8016154:	682b      	ldr	r3, [r5, #0]
 8016156:	b103      	cbz	r3, 801615a <_read_r+0x1e>
 8016158:	6023      	str	r3, [r4, #0]
 801615a:	bd38      	pop	{r3, r4, r5, pc}
 801615c:	20002574 	.word	0x20002574

08016160 <log>:
 8016160:	b538      	push	{r3, r4, r5, lr}
 8016162:	ed2d 8b02 	vpush	{d8}
 8016166:	ec55 4b10 	vmov	r4, r5, d0
 801616a:	f000 f839 	bl	80161e0 <__ieee754_log>
 801616e:	4622      	mov	r2, r4
 8016170:	462b      	mov	r3, r5
 8016172:	4620      	mov	r0, r4
 8016174:	4629      	mov	r1, r5
 8016176:	eeb0 8a40 	vmov.f32	s16, s0
 801617a:	eef0 8a60 	vmov.f32	s17, s1
 801617e:	f7ea fcad 	bl	8000adc <__aeabi_dcmpun>
 8016182:	b998      	cbnz	r0, 80161ac <log+0x4c>
 8016184:	2200      	movs	r2, #0
 8016186:	2300      	movs	r3, #0
 8016188:	4620      	mov	r0, r4
 801618a:	4629      	mov	r1, r5
 801618c:	f7ea fc9c 	bl	8000ac8 <__aeabi_dcmpgt>
 8016190:	b960      	cbnz	r0, 80161ac <log+0x4c>
 8016192:	2200      	movs	r2, #0
 8016194:	2300      	movs	r3, #0
 8016196:	4620      	mov	r0, r4
 8016198:	4629      	mov	r1, r5
 801619a:	f7ea fc6d 	bl	8000a78 <__aeabi_dcmpeq>
 801619e:	b160      	cbz	r0, 80161ba <log+0x5a>
 80161a0:	f7fd fc50 	bl	8013a44 <__errno>
 80161a4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80161d0 <log+0x70>
 80161a8:	2322      	movs	r3, #34	; 0x22
 80161aa:	6003      	str	r3, [r0, #0]
 80161ac:	eeb0 0a48 	vmov.f32	s0, s16
 80161b0:	eef0 0a68 	vmov.f32	s1, s17
 80161b4:	ecbd 8b02 	vpop	{d8}
 80161b8:	bd38      	pop	{r3, r4, r5, pc}
 80161ba:	f7fd fc43 	bl	8013a44 <__errno>
 80161be:	ecbd 8b02 	vpop	{d8}
 80161c2:	2321      	movs	r3, #33	; 0x21
 80161c4:	6003      	str	r3, [r0, #0]
 80161c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80161ca:	4803      	ldr	r0, [pc, #12]	; (80161d8 <log+0x78>)
 80161cc:	f000 b9c4 	b.w	8016558 <nan>
 80161d0:	00000000 	.word	0x00000000
 80161d4:	fff00000 	.word	0xfff00000
 80161d8:	080171ab 	.word	0x080171ab
 80161dc:	00000000 	.word	0x00000000

080161e0 <__ieee754_log>:
 80161e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161e4:	ec51 0b10 	vmov	r0, r1, d0
 80161e8:	ed2d 8b04 	vpush	{d8-d9}
 80161ec:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80161f0:	b083      	sub	sp, #12
 80161f2:	460d      	mov	r5, r1
 80161f4:	da29      	bge.n	801624a <__ieee754_log+0x6a>
 80161f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80161fa:	4303      	orrs	r3, r0
 80161fc:	ee10 2a10 	vmov	r2, s0
 8016200:	d10c      	bne.n	801621c <__ieee754_log+0x3c>
 8016202:	49cf      	ldr	r1, [pc, #828]	; (8016540 <__ieee754_log+0x360>)
 8016204:	2200      	movs	r2, #0
 8016206:	2300      	movs	r3, #0
 8016208:	2000      	movs	r0, #0
 801620a:	f7ea faf7 	bl	80007fc <__aeabi_ddiv>
 801620e:	ec41 0b10 	vmov	d0, r0, r1
 8016212:	b003      	add	sp, #12
 8016214:	ecbd 8b04 	vpop	{d8-d9}
 8016218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801621c:	2900      	cmp	r1, #0
 801621e:	da05      	bge.n	801622c <__ieee754_log+0x4c>
 8016220:	460b      	mov	r3, r1
 8016222:	f7ea f809 	bl	8000238 <__aeabi_dsub>
 8016226:	2200      	movs	r2, #0
 8016228:	2300      	movs	r3, #0
 801622a:	e7ee      	b.n	801620a <__ieee754_log+0x2a>
 801622c:	4bc5      	ldr	r3, [pc, #788]	; (8016544 <__ieee754_log+0x364>)
 801622e:	2200      	movs	r2, #0
 8016230:	f7ea f9ba 	bl	80005a8 <__aeabi_dmul>
 8016234:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8016238:	460d      	mov	r5, r1
 801623a:	4ac3      	ldr	r2, [pc, #780]	; (8016548 <__ieee754_log+0x368>)
 801623c:	4295      	cmp	r5, r2
 801623e:	dd06      	ble.n	801624e <__ieee754_log+0x6e>
 8016240:	4602      	mov	r2, r0
 8016242:	460b      	mov	r3, r1
 8016244:	f7e9 fffa 	bl	800023c <__adddf3>
 8016248:	e7e1      	b.n	801620e <__ieee754_log+0x2e>
 801624a:	2300      	movs	r3, #0
 801624c:	e7f5      	b.n	801623a <__ieee754_log+0x5a>
 801624e:	152c      	asrs	r4, r5, #20
 8016250:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8016254:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8016258:	441c      	add	r4, r3
 801625a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801625e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8016262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016266:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801626a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801626e:	ea42 0105 	orr.w	r1, r2, r5
 8016272:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8016276:	2200      	movs	r2, #0
 8016278:	4bb4      	ldr	r3, [pc, #720]	; (801654c <__ieee754_log+0x36c>)
 801627a:	f7e9 ffdd 	bl	8000238 <__aeabi_dsub>
 801627e:	1cab      	adds	r3, r5, #2
 8016280:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016284:	2b02      	cmp	r3, #2
 8016286:	4682      	mov	sl, r0
 8016288:	468b      	mov	fp, r1
 801628a:	f04f 0200 	mov.w	r2, #0
 801628e:	dc53      	bgt.n	8016338 <__ieee754_log+0x158>
 8016290:	2300      	movs	r3, #0
 8016292:	f7ea fbf1 	bl	8000a78 <__aeabi_dcmpeq>
 8016296:	b1d0      	cbz	r0, 80162ce <__ieee754_log+0xee>
 8016298:	2c00      	cmp	r4, #0
 801629a:	f000 8122 	beq.w	80164e2 <__ieee754_log+0x302>
 801629e:	4620      	mov	r0, r4
 80162a0:	f7ea f918 	bl	80004d4 <__aeabi_i2d>
 80162a4:	a390      	add	r3, pc, #576	; (adr r3, 80164e8 <__ieee754_log+0x308>)
 80162a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162aa:	4606      	mov	r6, r0
 80162ac:	460f      	mov	r7, r1
 80162ae:	f7ea f97b 	bl	80005a8 <__aeabi_dmul>
 80162b2:	a38f      	add	r3, pc, #572	; (adr r3, 80164f0 <__ieee754_log+0x310>)
 80162b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162b8:	4604      	mov	r4, r0
 80162ba:	460d      	mov	r5, r1
 80162bc:	4630      	mov	r0, r6
 80162be:	4639      	mov	r1, r7
 80162c0:	f7ea f972 	bl	80005a8 <__aeabi_dmul>
 80162c4:	4602      	mov	r2, r0
 80162c6:	460b      	mov	r3, r1
 80162c8:	4620      	mov	r0, r4
 80162ca:	4629      	mov	r1, r5
 80162cc:	e7ba      	b.n	8016244 <__ieee754_log+0x64>
 80162ce:	a38a      	add	r3, pc, #552	; (adr r3, 80164f8 <__ieee754_log+0x318>)
 80162d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162d4:	4650      	mov	r0, sl
 80162d6:	4659      	mov	r1, fp
 80162d8:	f7ea f966 	bl	80005a8 <__aeabi_dmul>
 80162dc:	4602      	mov	r2, r0
 80162de:	460b      	mov	r3, r1
 80162e0:	2000      	movs	r0, #0
 80162e2:	499b      	ldr	r1, [pc, #620]	; (8016550 <__ieee754_log+0x370>)
 80162e4:	f7e9 ffa8 	bl	8000238 <__aeabi_dsub>
 80162e8:	4652      	mov	r2, sl
 80162ea:	4606      	mov	r6, r0
 80162ec:	460f      	mov	r7, r1
 80162ee:	465b      	mov	r3, fp
 80162f0:	4650      	mov	r0, sl
 80162f2:	4659      	mov	r1, fp
 80162f4:	f7ea f958 	bl	80005a8 <__aeabi_dmul>
 80162f8:	4602      	mov	r2, r0
 80162fa:	460b      	mov	r3, r1
 80162fc:	4630      	mov	r0, r6
 80162fe:	4639      	mov	r1, r7
 8016300:	f7ea f952 	bl	80005a8 <__aeabi_dmul>
 8016304:	4606      	mov	r6, r0
 8016306:	460f      	mov	r7, r1
 8016308:	b914      	cbnz	r4, 8016310 <__ieee754_log+0x130>
 801630a:	4632      	mov	r2, r6
 801630c:	463b      	mov	r3, r7
 801630e:	e0a2      	b.n	8016456 <__ieee754_log+0x276>
 8016310:	4620      	mov	r0, r4
 8016312:	f7ea f8df 	bl	80004d4 <__aeabi_i2d>
 8016316:	a374      	add	r3, pc, #464	; (adr r3, 80164e8 <__ieee754_log+0x308>)
 8016318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801631c:	4680      	mov	r8, r0
 801631e:	4689      	mov	r9, r1
 8016320:	f7ea f942 	bl	80005a8 <__aeabi_dmul>
 8016324:	a372      	add	r3, pc, #456	; (adr r3, 80164f0 <__ieee754_log+0x310>)
 8016326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801632a:	4604      	mov	r4, r0
 801632c:	460d      	mov	r5, r1
 801632e:	4640      	mov	r0, r8
 8016330:	4649      	mov	r1, r9
 8016332:	f7ea f939 	bl	80005a8 <__aeabi_dmul>
 8016336:	e0a7      	b.n	8016488 <__ieee754_log+0x2a8>
 8016338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801633c:	f7e9 ff7e 	bl	800023c <__adddf3>
 8016340:	4602      	mov	r2, r0
 8016342:	460b      	mov	r3, r1
 8016344:	4650      	mov	r0, sl
 8016346:	4659      	mov	r1, fp
 8016348:	f7ea fa58 	bl	80007fc <__aeabi_ddiv>
 801634c:	ec41 0b18 	vmov	d8, r0, r1
 8016350:	4620      	mov	r0, r4
 8016352:	f7ea f8bf 	bl	80004d4 <__aeabi_i2d>
 8016356:	ec53 2b18 	vmov	r2, r3, d8
 801635a:	ec41 0b19 	vmov	d9, r0, r1
 801635e:	ec51 0b18 	vmov	r0, r1, d8
 8016362:	f7ea f921 	bl	80005a8 <__aeabi_dmul>
 8016366:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801636a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801636e:	9301      	str	r3, [sp, #4]
 8016370:	4602      	mov	r2, r0
 8016372:	460b      	mov	r3, r1
 8016374:	4680      	mov	r8, r0
 8016376:	4689      	mov	r9, r1
 8016378:	f7ea f916 	bl	80005a8 <__aeabi_dmul>
 801637c:	a360      	add	r3, pc, #384	; (adr r3, 8016500 <__ieee754_log+0x320>)
 801637e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016382:	4606      	mov	r6, r0
 8016384:	460f      	mov	r7, r1
 8016386:	f7ea f90f 	bl	80005a8 <__aeabi_dmul>
 801638a:	a35f      	add	r3, pc, #380	; (adr r3, 8016508 <__ieee754_log+0x328>)
 801638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016390:	f7e9 ff54 	bl	800023c <__adddf3>
 8016394:	4632      	mov	r2, r6
 8016396:	463b      	mov	r3, r7
 8016398:	f7ea f906 	bl	80005a8 <__aeabi_dmul>
 801639c:	a35c      	add	r3, pc, #368	; (adr r3, 8016510 <__ieee754_log+0x330>)
 801639e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163a2:	f7e9 ff4b 	bl	800023c <__adddf3>
 80163a6:	4632      	mov	r2, r6
 80163a8:	463b      	mov	r3, r7
 80163aa:	f7ea f8fd 	bl	80005a8 <__aeabi_dmul>
 80163ae:	a35a      	add	r3, pc, #360	; (adr r3, 8016518 <__ieee754_log+0x338>)
 80163b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163b4:	f7e9 ff42 	bl	800023c <__adddf3>
 80163b8:	4642      	mov	r2, r8
 80163ba:	464b      	mov	r3, r9
 80163bc:	f7ea f8f4 	bl	80005a8 <__aeabi_dmul>
 80163c0:	a357      	add	r3, pc, #348	; (adr r3, 8016520 <__ieee754_log+0x340>)
 80163c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163c6:	4680      	mov	r8, r0
 80163c8:	4689      	mov	r9, r1
 80163ca:	4630      	mov	r0, r6
 80163cc:	4639      	mov	r1, r7
 80163ce:	f7ea f8eb 	bl	80005a8 <__aeabi_dmul>
 80163d2:	a355      	add	r3, pc, #340	; (adr r3, 8016528 <__ieee754_log+0x348>)
 80163d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163d8:	f7e9 ff30 	bl	800023c <__adddf3>
 80163dc:	4632      	mov	r2, r6
 80163de:	463b      	mov	r3, r7
 80163e0:	f7ea f8e2 	bl	80005a8 <__aeabi_dmul>
 80163e4:	a352      	add	r3, pc, #328	; (adr r3, 8016530 <__ieee754_log+0x350>)
 80163e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163ea:	f7e9 ff27 	bl	800023c <__adddf3>
 80163ee:	4632      	mov	r2, r6
 80163f0:	463b      	mov	r3, r7
 80163f2:	f7ea f8d9 	bl	80005a8 <__aeabi_dmul>
 80163f6:	460b      	mov	r3, r1
 80163f8:	4602      	mov	r2, r0
 80163fa:	4649      	mov	r1, r9
 80163fc:	4640      	mov	r0, r8
 80163fe:	f7e9 ff1d 	bl	800023c <__adddf3>
 8016402:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8016406:	9b01      	ldr	r3, [sp, #4]
 8016408:	3551      	adds	r5, #81	; 0x51
 801640a:	431d      	orrs	r5, r3
 801640c:	2d00      	cmp	r5, #0
 801640e:	4680      	mov	r8, r0
 8016410:	4689      	mov	r9, r1
 8016412:	dd48      	ble.n	80164a6 <__ieee754_log+0x2c6>
 8016414:	4b4e      	ldr	r3, [pc, #312]	; (8016550 <__ieee754_log+0x370>)
 8016416:	2200      	movs	r2, #0
 8016418:	4650      	mov	r0, sl
 801641a:	4659      	mov	r1, fp
 801641c:	f7ea f8c4 	bl	80005a8 <__aeabi_dmul>
 8016420:	4652      	mov	r2, sl
 8016422:	465b      	mov	r3, fp
 8016424:	f7ea f8c0 	bl	80005a8 <__aeabi_dmul>
 8016428:	4602      	mov	r2, r0
 801642a:	460b      	mov	r3, r1
 801642c:	4606      	mov	r6, r0
 801642e:	460f      	mov	r7, r1
 8016430:	4640      	mov	r0, r8
 8016432:	4649      	mov	r1, r9
 8016434:	f7e9 ff02 	bl	800023c <__adddf3>
 8016438:	ec53 2b18 	vmov	r2, r3, d8
 801643c:	f7ea f8b4 	bl	80005a8 <__aeabi_dmul>
 8016440:	4680      	mov	r8, r0
 8016442:	4689      	mov	r9, r1
 8016444:	b964      	cbnz	r4, 8016460 <__ieee754_log+0x280>
 8016446:	4602      	mov	r2, r0
 8016448:	460b      	mov	r3, r1
 801644a:	4630      	mov	r0, r6
 801644c:	4639      	mov	r1, r7
 801644e:	f7e9 fef3 	bl	8000238 <__aeabi_dsub>
 8016452:	4602      	mov	r2, r0
 8016454:	460b      	mov	r3, r1
 8016456:	4650      	mov	r0, sl
 8016458:	4659      	mov	r1, fp
 801645a:	f7e9 feed 	bl	8000238 <__aeabi_dsub>
 801645e:	e6d6      	b.n	801620e <__ieee754_log+0x2e>
 8016460:	a321      	add	r3, pc, #132	; (adr r3, 80164e8 <__ieee754_log+0x308>)
 8016462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016466:	ec51 0b19 	vmov	r0, r1, d9
 801646a:	f7ea f89d 	bl	80005a8 <__aeabi_dmul>
 801646e:	a320      	add	r3, pc, #128	; (adr r3, 80164f0 <__ieee754_log+0x310>)
 8016470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016474:	4604      	mov	r4, r0
 8016476:	460d      	mov	r5, r1
 8016478:	ec51 0b19 	vmov	r0, r1, d9
 801647c:	f7ea f894 	bl	80005a8 <__aeabi_dmul>
 8016480:	4642      	mov	r2, r8
 8016482:	464b      	mov	r3, r9
 8016484:	f7e9 feda 	bl	800023c <__adddf3>
 8016488:	4602      	mov	r2, r0
 801648a:	460b      	mov	r3, r1
 801648c:	4630      	mov	r0, r6
 801648e:	4639      	mov	r1, r7
 8016490:	f7e9 fed2 	bl	8000238 <__aeabi_dsub>
 8016494:	4652      	mov	r2, sl
 8016496:	465b      	mov	r3, fp
 8016498:	f7e9 fece 	bl	8000238 <__aeabi_dsub>
 801649c:	4602      	mov	r2, r0
 801649e:	460b      	mov	r3, r1
 80164a0:	4620      	mov	r0, r4
 80164a2:	4629      	mov	r1, r5
 80164a4:	e7d9      	b.n	801645a <__ieee754_log+0x27a>
 80164a6:	4602      	mov	r2, r0
 80164a8:	460b      	mov	r3, r1
 80164aa:	4650      	mov	r0, sl
 80164ac:	4659      	mov	r1, fp
 80164ae:	f7e9 fec3 	bl	8000238 <__aeabi_dsub>
 80164b2:	ec53 2b18 	vmov	r2, r3, d8
 80164b6:	f7ea f877 	bl	80005a8 <__aeabi_dmul>
 80164ba:	4606      	mov	r6, r0
 80164bc:	460f      	mov	r7, r1
 80164be:	2c00      	cmp	r4, #0
 80164c0:	f43f af23 	beq.w	801630a <__ieee754_log+0x12a>
 80164c4:	a308      	add	r3, pc, #32	; (adr r3, 80164e8 <__ieee754_log+0x308>)
 80164c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164ca:	ec51 0b19 	vmov	r0, r1, d9
 80164ce:	f7ea f86b 	bl	80005a8 <__aeabi_dmul>
 80164d2:	a307      	add	r3, pc, #28	; (adr r3, 80164f0 <__ieee754_log+0x310>)
 80164d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164d8:	4604      	mov	r4, r0
 80164da:	460d      	mov	r5, r1
 80164dc:	ec51 0b19 	vmov	r0, r1, d9
 80164e0:	e727      	b.n	8016332 <__ieee754_log+0x152>
 80164e2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8016538 <__ieee754_log+0x358>
 80164e6:	e694      	b.n	8016212 <__ieee754_log+0x32>
 80164e8:	fee00000 	.word	0xfee00000
 80164ec:	3fe62e42 	.word	0x3fe62e42
 80164f0:	35793c76 	.word	0x35793c76
 80164f4:	3dea39ef 	.word	0x3dea39ef
 80164f8:	55555555 	.word	0x55555555
 80164fc:	3fd55555 	.word	0x3fd55555
 8016500:	df3e5244 	.word	0xdf3e5244
 8016504:	3fc2f112 	.word	0x3fc2f112
 8016508:	96cb03de 	.word	0x96cb03de
 801650c:	3fc74664 	.word	0x3fc74664
 8016510:	94229359 	.word	0x94229359
 8016514:	3fd24924 	.word	0x3fd24924
 8016518:	55555593 	.word	0x55555593
 801651c:	3fe55555 	.word	0x3fe55555
 8016520:	d078c69f 	.word	0xd078c69f
 8016524:	3fc39a09 	.word	0x3fc39a09
 8016528:	1d8e78af 	.word	0x1d8e78af
 801652c:	3fcc71c5 	.word	0x3fcc71c5
 8016530:	9997fa04 	.word	0x9997fa04
 8016534:	3fd99999 	.word	0x3fd99999
	...
 8016540:	c3500000 	.word	0xc3500000
 8016544:	43500000 	.word	0x43500000
 8016548:	7fefffff 	.word	0x7fefffff
 801654c:	3ff00000 	.word	0x3ff00000
 8016550:	3fe00000 	.word	0x3fe00000
 8016554:	00000000 	.word	0x00000000

08016558 <nan>:
 8016558:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016560 <nan+0x8>
 801655c:	4770      	bx	lr
 801655e:	bf00      	nop
 8016560:	00000000 	.word	0x00000000
 8016564:	7ff80000 	.word	0x7ff80000

08016568 <_init>:
 8016568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801656a:	bf00      	nop
 801656c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801656e:	bc08      	pop	{r3}
 8016570:	469e      	mov	lr, r3
 8016572:	4770      	bx	lr

08016574 <_fini>:
 8016574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016576:	bf00      	nop
 8016578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801657a:	bc08      	pop	{r3}
 801657c:	469e      	mov	lr, r3
 801657e:	4770      	bx	lr
